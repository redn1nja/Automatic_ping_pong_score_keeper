
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f4  080038f4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080038f4  080038f4  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f4  080038f4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080038fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          0000008c  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006ebd  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001279  00000000  00000000  00026f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00028208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  00028920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001705  00000000  00000000  00028f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d70  00000000  00000000  0002a695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac086  00000000  00000000  00033405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000df48b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002024  00000000  00000000  000df4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037f0 	.word	0x080037f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	080037f0 	.word	0x080037f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <i2cLcd_SendByte>:

#include "main.h"
#include "i2c_lcd.h"

// Send byte or nibble to LCD module via PCF8574
uint8_t i2cLcd_SendByte(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t data, uint8_t opts){
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af02      	add	r7, sp, #8
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
 800027c:	4613      	mov	r3, r2
 800027e:	70bb      	strb	r3, [r7, #2]
	uint8_t i2c_frame_size;
	uint8_t n;
	uint8_t lcd_opts;

	// Select between command/data frame
	cmd = opts & I2CLCD_OPTS_RS;
 8000280:	78bb      	ldrb	r3, [r7, #2]
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	753b      	strb	r3, [r7, #20]

	// Toggle between waiting 1ms or poll Busy Flag
	wait_bf = opts & I2CLCD_OPTS_WAIT_BF;
 8000288:	78bb      	ldrb	r3, [r7, #2]
 800028a:	f003 0308 	and.w	r3, r3, #8
 800028e:	74fb      	strb	r3, [r7, #19]

	// Frame size for I2C communication.
	if (opts & I2CLCD_OPTS_4B) {
 8000290:	78bb      	ldrb	r3, [r7, #2]
 8000292:	f003 0302 	and.w	r3, r3, #2
 8000296:	2b00      	cmp	r3, #0
 8000298:	d002      	beq.n	80002a0 <i2cLcd_SendByte+0x30>
		i2c_frame_size = 2;
 800029a:	2302      	movs	r3, #2
 800029c:	75bb      	strb	r3, [r7, #22]
 800029e:	e001      	b.n	80002a4 <i2cLcd_SendByte+0x34>
	}
	else {
		i2c_frame_size = 4;
 80002a0:	2304      	movs	r3, #4
 80002a2:	75bb      	strb	r3, [r7, #22]
	}

	// Add final all 1s on the 4 data bits to be able to read BusyFlag after a transaction
	i2c_frame_size += wait_bf;
 80002a4:	7dba      	ldrb	r2, [r7, #22]
 80002a6:	7cfb      	ldrb	r3, [r7, #19]
 80002a8:	4413      	add	r3, r2
 80002aa:	75bb      	strb	r3, [r7, #22]

	lcd_opts = (I2CLCD_RS & cmd) | (I2CLCD_BL & h_i2cLcd->blacklight) | (I2CLCD_E);
 80002ac:	7d3b      	ldrb	r3, [r7, #20]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	7adb      	ldrb	r3, [r3, #11]
 80002b8:	f003 0308 	and.w	r3, r3, #8
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	4313      	orrs	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	74bb      	strb	r3, [r7, #18]

	i2c_frame_data[0] = (data & 0xF0) | lcd_opts;
 80002c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80002cc:	f023 030f 	bic.w	r3, r3, #15
 80002d0:	b25a      	sxtb	r2, r3
 80002d2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80002d6:	4313      	orrs	r3, r2
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	733b      	strb	r3, [r7, #12]
	i2c_frame_data[1] = i2c_frame_data[0] & (~I2CLCD_E);
 80002de:	7b3b      	ldrb	r3, [r7, #12]
 80002e0:	f023 0304 	bic.w	r3, r3, #4
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	737b      	strb	r3, [r7, #13]

	i2c_frame_data[2] = ((data << 4) & 0xF0) | lcd_opts;
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	011b      	lsls	r3, r3, #4
 80002ec:	b25a      	sxtb	r2, r3
 80002ee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80002f2:	4313      	orrs	r3, r2
 80002f4:	b25b      	sxtb	r3, r3
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73bb      	strb	r3, [r7, #14]
	i2c_frame_data[3] = i2c_frame_data[2] & (~I2CLCD_E);
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
 80002fc:	f023 0304 	bic.w	r3, r3, #4
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73fb      	strb	r3, [r7, #15]

	// Preferably remove this
	if(wait_bf)
 8000304:	7cfb      	ldrb	r3, [r7, #19]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d00e      	beq.n	8000328 <i2cLcd_SendByte+0xb8>
		i2c_frame_data[i2c_frame_size-1] = i2c_frame_data[i2c_frame_size-2] | 0x80;
 800030a:	7dbb      	ldrb	r3, [r7, #22]
 800030c:	3b02      	subs	r3, #2
 800030e:	3318      	adds	r3, #24
 8000310:	443b      	add	r3, r7
 8000312:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000316:	7dbb      	ldrb	r3, [r7, #22]
 8000318:	3b01      	subs	r3, #1
 800031a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	3318      	adds	r3, #24
 8000322:	443b      	add	r3, r7
 8000324:	f803 2c0c 	strb.w	r2, [r3, #-12]

	// HAL transmits i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
	hal_stat = i2cLcd_I2cWrite(h_i2cLcd, i2c_frame_data, i2c_frame_size);
 8000328:	7dba      	ldrb	r2, [r7, #22]
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	4619      	mov	r1, r3
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f000 fa56 	bl	80007e2 <i2cLcd_I2cWrite>
 8000336:	4603      	mov	r3, r0
 8000338:	75fb      	strb	r3, [r7, #23]

	//i2cLcd_WaitBusyFlag();
	if (wait_bf) {
 800033a:	7cfb      	ldrb	r3, [r7, #19]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d01d      	beq.n	800037c <i2cLcd_SendByte+0x10c>
		n = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	757b      	strb	r3, [r7, #21]
		do {
			hal_stat |= HAL_I2C_Master_Receive(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, i2c_frame_data,
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	b299      	uxth	r1, r3
 800034e:	f107 020c 	add.w	r2, r7, #12
 8000352:	230a      	movs	r3, #10
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2301      	movs	r3, #1
 8000358:	f001 f8a0 	bl	800149c <HAL_I2C_Master_Receive>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	7dfb      	ldrb	r3, [r7, #23]
 8000362:	4313      	orrs	r3, r2
 8000364:	75fb      	strb	r3, [r7, #23]
										1, 10);
			n++;
 8000366:	7d7b      	ldrb	r3, [r7, #21]
 8000368:	3301      	adds	r3, #1
 800036a:	757b      	strb	r3, [r7, #21]
		} while ( (n < I2CLCD_MAX_BF_POLLS) && (i2c_frame_data[0] & 0x80) );
 800036c:	7d7b      	ldrb	r3, [r7, #21]
 800036e:	2b7e      	cmp	r3, #126	; 0x7e
 8000370:	d807      	bhi.n	8000382 <i2cLcd_SendByte+0x112>
 8000372:	7b3b      	ldrb	r3, [r7, #12]
 8000374:	b25b      	sxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	dbe4      	blt.n	8000344 <i2cLcd_SendByte+0xd4>
 800037a:	e002      	b.n	8000382 <i2cLcd_SendByte+0x112>
	}
	else {
		i2cLcd_Delay_ms(1);
 800037c:	2001      	movs	r0, #1
 800037e:	f000 fa60 	bl	8000842 <i2cLcd_Delay_ms>
	}

	return (uint8_t) hal_stat;
 8000382:	7dfb      	ldrb	r3, [r7, #23]

}
 8000384:	4618      	mov	r0, r3
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <i2cLcd_ReadByte>:


uint8_t i2cLcd_ReadByte(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * data){
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_stat;
	uint8_t i2c_frame_data[5];

	uint8_t lcd_opts;

	lcd_opts = (I2CLCD_BL & h_i2cLcd->blacklight) /*| (I2CLCD_E)*/ | (I2CLCD_RW);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	7adb      	ldrb	r3, [r3, #11]
 800039a:	f003 0308 	and.w	r3, r3, #8
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	f043 0302 	orr.w	r3, r3, #2
 80003a4:	73fb      	strb	r3, [r7, #15]

	// first need to write 0xF to data bits of PCF, E and R
	i2c_frame_data[0] = (0xF0) | lcd_opts;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	f063 030f 	orn	r3, r3, #15
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	723b      	strb	r3, [r7, #8]
	i2c_frame_data[1] = i2c_frame_data[0] | (I2CLCD_E);
 80003b0:	7a3b      	ldrb	r3, [r7, #8]
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	727b      	strb	r3, [r7, #9]

	i2c_frame_data[2] = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	72bb      	strb	r3, [r7, #10]
	i2c_frame_data[3] = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	72fb      	strb	r3, [r7, #11]

	// HAL receives i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
	hal_stat = i2cLcd_I2cWrite(h_i2cLcd, i2c_frame_data, 2);
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2202      	movs	r2, #2
 80003c8:	4619      	mov	r1, r3
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f000 fa09 	bl	80007e2 <i2cLcd_I2cWrite>
 80003d0:	4603      	mov	r3, r0
 80003d2:	73bb      	strb	r3, [r7, #14]
	hal_stat |= i2cLcd_I2cRead(h_i2cLcd, &i2c_frame_data[2], 1);
 80003d4:	f107 0308 	add.w	r3, r7, #8
 80003d8:	3302      	adds	r3, #2
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f000 fa17 	bl	8000812 <i2cLcd_I2cRead>
 80003e4:	4603      	mov	r3, r0
 80003e6:	461a      	mov	r2, r3
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	73bb      	strb	r3, [r7, #14]

	hal_stat |= i2cLcd_I2cWrite(h_i2cLcd, i2c_frame_data, 2);
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	2202      	movs	r2, #2
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f9f3 	bl	80007e2 <i2cLcd_I2cWrite>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	4313      	orrs	r3, r2
 8000404:	73bb      	strb	r3, [r7, #14]
	hal_stat |= i2cLcd_I2cRead(h_i2cLcd, &i2c_frame_data[3], 1);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	3303      	adds	r3, #3
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f000 f9fe 	bl	8000812 <i2cLcd_I2cRead>
 8000416:	4603      	mov	r3, r0
 8000418:	461a      	mov	r2, r3
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	4313      	orrs	r3, r2
 800041e:	73bb      	strb	r3, [r7, #14]

	*data = (i2c_frame_data[2] & 0xF0) | ( (i2c_frame_data[3] >> 4) & 0x0F);
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	b25b      	sxtb	r3, r3
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	b25a      	sxtb	r2, r3
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	091b      	lsrs	r3, r3, #4
 800042e:	b2db      	uxtb	r3, r3
 8000430:	b25b      	sxtb	r3, r3
 8000432:	4313      	orrs	r3, r2
 8000434:	b25b      	sxtb	r3, r3
 8000436:	b2da      	uxtb	r2, r3
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	701a      	strb	r2, [r3, #0]

	return (uint8_t) hal_stat;
 800043c:	7bbb      	ldrb	r3, [r7, #14]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <i2cLcd_SendChar>:



uint8_t i2cLcd_SendChar(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t chr){
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	460b      	mov	r3, r1
 8000450:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, chr, I2CLCD_OPTS_DATA);
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	2201      	movs	r2, #1
 8000456:	4619      	mov	r1, r3
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff ff09 	bl	8000270 <i2cLcd_SendByte>
 800045e:	4603      	mov	r3, r0
}
 8000460:	4618      	mov	r0, r3
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <i2cLcd_SendCmd>:

uint8_t i2cLcd_SendCmd(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t args){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, args, I2CLCD_OPTS_COMMAND | I2CLCD_OPTS_NOINIT );
 8000474:	78fb      	ldrb	r3, [r7, #3]
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f7ff fef8 	bl	8000270 <i2cLcd_SendByte>
 8000480:	4603      	mov	r3, r0
}
 8000482:	4618      	mov	r0, r3
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <i2cLcd_SendCmd_4b>:

uint8_t i2cLcd_SendCmd_4b(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t args){
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, args, I2CLCD_OPTS_INIT );
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	2202      	movs	r2, #2
 800049a:	4619      	mov	r1, r3
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff fee7 	bl	8000270 <i2cLcd_SendByte>
 80004a2:	4603      	mov	r3, r0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <i2cLcd_WriteCustomChar>:





uint8_t i2cLcd_WriteCustomChar(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t cgaddr, uint8_t * chardef){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	460b      	mov	r3, r1
 80004b6:	607a      	str	r2, [r7, #4]
 80004b8:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint8_t hal_stat;
	uint8_t _addr;

	cgaddr = (cgaddr << 3);
 80004ba:	7afb      	ldrb	r3, [r7, #11]
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	72fb      	strb	r3, [r7, #11]
	hal_stat = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	75bb      	strb	r3, [r7, #22]

	// get the current DDRAM address
	hal_stat |= i2cLcd_GetCursorPosition(h_i2cLcd, &_addr);
 80004c4:	f107 0315 	add.w	r3, r7, #21
 80004c8:	4619      	mov	r1, r3
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f000 f952 	bl	8000774 <i2cLcd_GetCursorPosition>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	7dbb      	ldrb	r3, [r7, #22]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	75bb      	strb	r3, [r7, #22]

	for(i=0; i<8; i++){
 80004da:	2300      	movs	r3, #0
 80004dc:	75fb      	strb	r3, [r7, #23]
 80004de:	e023      	b.n	8000528 <i2cLcd_WriteCustomChar+0x7c>
		h_i2cLcd->cgram_addr = CGRAM_ADDR | (cgaddr | i);
 80004e0:	7afa      	ldrb	r2, [r7, #11]
 80004e2:	7dfb      	ldrb	r3, [r7, #23]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	725a      	strb	r2, [r3, #9]
		hal_stat |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->cgram_addr );
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	7a5b      	ldrb	r3, [r3, #9]
 80004f6:	4619      	mov	r1, r3
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f7ff ffb5 	bl	8000468 <i2cLcd_SendCmd>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	7dbb      	ldrb	r3, [r7, #22]
 8000504:	4313      	orrs	r3, r2
 8000506:	75bb      	strb	r3, [r7, #22]

		hal_stat |= i2cLcd_SendChar(h_i2cLcd, chardef[i]);
 8000508:	7dfb      	ldrb	r3, [r7, #23]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f7ff ff97 	bl	8000446 <i2cLcd_SendChar>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	7dbb      	ldrb	r3, [r7, #22]
 800051e:	4313      	orrs	r3, r2
 8000520:	75bb      	strb	r3, [r7, #22]
	for(i=0; i<8; i++){
 8000522:	7dfb      	ldrb	r3, [r7, #23]
 8000524:	3301      	adds	r3, #1
 8000526:	75fb      	strb	r3, [r7, #23]
 8000528:	7dfb      	ldrb	r3, [r7, #23]
 800052a:	2b07      	cmp	r3, #7
 800052c:	d9d8      	bls.n	80004e0 <i2cLcd_WriteCustomChar+0x34>
	}

	// restore DDRAM address such that further writes are in DDRAM section
	hal_stat |= i2cLcd_SetCursorPosition(h_i2cLcd, _addr);
 800052e:	7d7b      	ldrb	r3, [r7, #21]
 8000530:	4619      	mov	r1, r3
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f000 f90a 	bl	800074c <i2cLcd_SetCursorPosition>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	7dbb      	ldrb	r3, [r7, #22]
 800053e:	4313      	orrs	r3, r2
 8000540:	75bb      	strb	r3, [r7, #22]

	return hal_stat;
 8000542:	7dbb      	ldrb	r3, [r7, #22]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <i2cLcd_EntryIncrEn>:



uint8_t i2cLcd_EntryIncrEn(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t incr_en){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	if (incr_en) h_i2cLcd->entry_mode_set |=  (DIR_INCR_DECR) ;
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d007      	beq.n	800056e <i2cLcd_EntryIncrEn+0x22>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	b2da      	uxtb	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	715a      	strb	r2, [r3, #5]
 800056c:	e006      	b.n	800057c <i2cLcd_EntryIncrEn+0x30>
	else h_i2cLcd->entry_mode_set &= ~(DIR_INCR_DECR) ;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	f023 0302 	bic.w	r3, r3, #2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	715a      	strb	r2, [r3, #5]
	return i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->entry_mode_set );
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff ff70 	bl	8000468 <i2cLcd_SendCmd>
 8000588:	4603      	mov	r3, r0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <i2cLcd_EntryShiftEn>:

uint8_t i2cLcd_EntryShiftEn(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t shift_en){
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	70fb      	strb	r3, [r7, #3]
	if (shift_en) h_i2cLcd->entry_mode_set |=  (SHIFT) ;
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d007      	beq.n	80005b4 <i2cLcd_EntryShiftEn+0x22>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	715a      	strb	r2, [r3, #5]
 80005b2:	e006      	b.n	80005c2 <i2cLcd_EntryShiftEn+0x30>
	else h_i2cLcd->entry_mode_set &= ~(SHIFT) ;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	f023 0301 	bic.w	r3, r3, #1
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	715a      	strb	r2, [r3, #5]
	return i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->entry_mode_set );
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	4619      	mov	r1, r3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff ff4d 	bl	8000468 <i2cLcd_SendCmd>
 80005ce:	4603      	mov	r3, r0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <i2cLcd_Shift>:


uint8_t i2cLcd_Shift(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t disp_or_cursor, uint8_t right_left){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
 80005e4:	4613      	mov	r3, r2
 80005e6:	70bb      	strb	r3, [r7, #2]
	if (disp_or_cursor) h_i2cLcd->cursor_display_shift |= (CD_SHIFT_DSIPLAY) ;
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <i2cLcd_Shift+0x26>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	79db      	ldrb	r3, [r3, #7]
 80005f2:	f043 0308 	orr.w	r3, r3, #8
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	71da      	strb	r2, [r3, #7]
 80005fc:	e006      	b.n	800060c <i2cLcd_Shift+0x34>
	else h_i2cLcd->cursor_display_shift &= ~(CD_SHIFT_DSIPLAY) ;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	79db      	ldrb	r3, [r3, #7]
 8000602:	f023 0308 	bic.w	r3, r3, #8
 8000606:	b2da      	uxtb	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	71da      	strb	r2, [r3, #7]
	if (right_left) h_i2cLcd->cursor_display_shift |= (CD_SHIFT_RIGHT) ;
 800060c:	78bb      	ldrb	r3, [r7, #2]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d007      	beq.n	8000622 <i2cLcd_Shift+0x4a>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	79db      	ldrb	r3, [r3, #7]
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	b2da      	uxtb	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	71da      	strb	r2, [r3, #7]
 8000620:	e006      	b.n	8000630 <i2cLcd_Shift+0x58>
	else h_i2cLcd->cursor_display_shift &= ~(CD_SHIFT_RIGHT) ;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	79db      	ldrb	r3, [r3, #7]
 8000626:	f023 0304 	bic.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	71da      	strb	r2, [r3, #7]
	return i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->cursor_display_shift );
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	79db      	ldrb	r3, [r3, #7]
 8000634:	4619      	mov	r1, r3
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ff16 	bl	8000468 <i2cLcd_SendCmd>
 800063c:	4603      	mov	r3, r0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <i2cLcd_Init>:
	return i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->diplay_ctrl );
}



uint8_t i2cLcd_Init(i2cLcd_HandleTypeDef * h_i2cLcd){
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	ret = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_8B;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2230      	movs	r2, #48	; 0x30
 8000656:	721a      	strb	r2, [r3, #8]
	h_i2cLcd->blacklight = I2CLCD_BL;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2208      	movs	r2, #8
 800065c:	72da      	strb	r2, [r3, #11]
	h_i2cLcd->entry_mode_set = MODE_SET ;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2204      	movs	r2, #4
 8000662:	715a      	strb	r2, [r3, #5]
	h_i2cLcd->cursor_display_shift = CD_SHIFT;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2210      	movs	r2, #16
 8000668:	71da      	strb	r2, [r3, #7]

	// As per HD44780, if reset timing cannot be generated, initilization should be a sequence
	// of 0x3 writes with specific delays afterwards

	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7a1b      	ldrb	r3, [r3, #8]
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff0a 	bl	800048a <i2cLcd_SendCmd_4b>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	4313      	orrs	r3, r2
 800067e:	73fb      	strb	r3, [r7, #15]
	i2cLcd_Delay_ms(4);
 8000680:	2004      	movs	r0, #4
 8000682:	f000 f8de 	bl	8000842 <i2cLcd_Delay_ms>
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7a1b      	ldrb	r3, [r3, #8]
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff fefc 	bl	800048a <i2cLcd_SendCmd_4b>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	4313      	orrs	r3, r2
 800069a:	73fb      	strb	r3, [r7, #15]
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7a1b      	ldrb	r3, [r3, #8]
 80006a0:	4619      	mov	r1, r3
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff fef1 	bl	800048a <i2cLcd_SendCmd_4b>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_4B;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2220      	movs	r2, #32
 80006b6:	721a      	strb	r2, [r3, #8]
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a1b      	ldrb	r3, [r3, #8]
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff fee3 	bl	800048a <i2cLcd_SendCmd_4b>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_4B | FUNC_SET_LINES_2 | FUNC_SET_FO_5X8;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2228      	movs	r2, #40	; 0x28
 80006d2:	721a      	strb	r2, [r3, #8]
	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->function_set);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7a1b      	ldrb	r3, [r3, #8]
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff fec4 	bl	8000468 <i2cLcd_SendCmd>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->diplay_ctrl = DISP_CTRL | DISP_CTRL_CURSOR_ON | DISP_CTRL_BLINK_ON | DISP_CTRL_DISPLAY_ON;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	220f      	movs	r2, #15
 80006ee:	719a      	strb	r2, [r3, #6]
	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->diplay_ctrl);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	799b      	ldrb	r3, [r3, #6]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff feb6 	bl	8000468 <i2cLcd_SendCmd>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4313      	orrs	r3, r2
 8000704:	73fb      	strb	r3, [r7, #15]

	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->entry_mode_set);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	795b      	ldrb	r3, [r3, #5]
 800070a:	4619      	mov	r1, r3
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff feab 	bl	8000468 <i2cLcd_SendCmd>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	4313      	orrs	r3, r2
 800071a:	73fb      	strb	r3, [r7, #15]

	i2cLcd_ClearDisplay(h_i2cLcd);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f808 	bl	8000732 <i2cLcd_ClearDisplay>

	i2cLcd_Delay_ms(5);
 8000722:	2005      	movs	r0, #5
 8000724:	f000 f88d 	bl	8000842 <i2cLcd_Delay_ms>
	return ret;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <i2cLcd_ClearDisplay>:



uint8_t i2cLcd_ClearDisplay(i2cLcd_HandleTypeDef * h_i2cLcd){
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]

	//return i2cLcd_SendByte(h_i2cLcd, CLR_DISPLAY, 0);
	return i2cLcd_SendCmd(h_i2cLcd, CLR_DISPLAY);
 800073a:	2101      	movs	r1, #1
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fe93 	bl	8000468 <i2cLcd_SendCmd>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <i2cLcd_SetCursorPosition>:
uint8_t i2cLcd_ReturnHome(i2cLcd_HandleTypeDef * h_i2cLcd){
	return i2cLcd_SendCmd(h_i2cLcd, RET_HOME );
}


uint8_t i2cLcd_SetCursorPosition(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t pos){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	return i2cLcd_SendByte(h_i2cLcd, DDRAM_ADDR | pos, I2CLCD_OPTS_NOINIT);
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd83 	bl	8000270 <i2cLcd_SendByte>
 800076a:	4603      	mov	r3, r0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <i2cLcd_GetCursorPosition>:

uint8_t i2cLcd_GetCursorPosition(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * pos){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t hal_stat;
	hal_stat = i2cLcd_ReadByte(h_i2cLcd, pos );
 800077e:	6839      	ldr	r1, [r7, #0]
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fe03 	bl	800038c <i2cLcd_ReadByte>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
	*pos = *pos & 0x7F;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000792:	b2da      	uxtb	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	701a      	strb	r2, [r3, #0]
	return hal_stat;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <i2cLcd_CreateHandle>:

uint8_t i2cLcd_CreateHandle(i2cLcd_HandleTypeDef *h_i2cLcd, I2C_HandleTypeDef *h_i2c, uint8_t i2c_slave_addr){
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71fb      	strb	r3, [r7, #7]

	uint8_t init_state;
	init_state = 0x00; // all inputs of PCF
 80007b0:	2300      	movs	r3, #0
 80007b2:	75fb      	strb	r3, [r7, #23]
	// Bind I2C HAL handler
	if (h_i2c == NULL)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <i2cLcd_CreateHandle+0x1c>
		return -1;
 80007ba:	23ff      	movs	r3, #255	; 0xff
 80007bc:	e00d      	b.n	80007da <i2cLcd_CreateHandle+0x38>

	h_i2cLcd->hi2c = h_i2c;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	601a      	str	r2, [r3, #0]

	// Set slave address
	h_i2cLcd->i2c_addr = i2c_slave_addr;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	711a      	strb	r2, [r3, #4]

	//return HAL_I2C_Master_Transmit(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, &init_state, 1, 10);
	return i2cLcd_I2cWrite(h_i2cLcd, &init_state, 1);
 80007ca:	f107 0317 	add.w	r3, r7, #23
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f000 f805 	bl	80007e2 <i2cLcd_I2cWrite>
 80007d8:	4603      	mov	r3, r0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <i2cLcd_I2cWrite>:


// Low level function wrappers
// Can be

uint8_t i2cLcd_I2cWrite(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * data, uint8_t len){
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af02      	add	r7, sp, #8
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	4613      	mov	r3, r2
 80007ee:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Transmit(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, data, len, 10);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	b299      	uxth	r1, r3
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	220a      	movs	r2, #10
 8000800:	9200      	str	r2, [sp, #0]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f000 fd56 	bl	80012b4 <HAL_I2C_Master_Transmit>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <i2cLcd_I2cRead>:

uint8_t i2cLcd_I2cRead(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * data, uint8_t len){
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af02      	add	r7, sp, #8
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	4613      	mov	r3, r2
 800081e:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Receive(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, data, len, 10);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	b299      	uxth	r1, r3
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	b29b      	uxth	r3, r3
 800082e:	220a      	movs	r2, #10
 8000830:	9200      	str	r2, [sp, #0]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f000 fe32 	bl	800149c <HAL_I2C_Master_Receive>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <i2cLcd_Delay_ms>:

uint8_t i2cLcd_Delay_ms(uint32_t delay_ms){
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	// Change the delay function call if HAL_ is not available
	HAL_Delay(delay_ms);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 fb90 	bl	8000f70 <HAL_Delay>
	return 0;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <print_long_text>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_long_text(i2cLcd_HandleTypeDef *h_lcd, char * text){
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	char txt[32] = "Some very very long text\0";
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <print_long_text+0x68>)
 8000868:	f107 040c 	add.w	r4, r7, #12
 800086c:	461d      	mov	r5, r3
 800086e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000872:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000876:	c403      	stmia	r4!, {r0, r1}
 8000878:	8022      	strh	r2, [r4, #0]
 800087a:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	809a      	strh	r2, [r3, #4]
	int i;
	i=0;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(text == NULL) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10e      	bne.n	80008ac <print_long_text+0x50>
		text = txt;
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	603b      	str	r3, [r7, #0]
	}

	while(text[i]){
 8000894:	e00a      	b.n	80008ac <print_long_text+0x50>
		i2cLcd_SendChar(h_lcd, text[i]);
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fdd0 	bl	8000446 <i2cLcd_SendChar>
		i++;
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	3301      	adds	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(text[i]){
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1ee      	bne.n	8000896 <print_long_text+0x3a>
	}
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bdb0      	pop	{r4, r5, r7, pc}
 80008c2:	bf00      	nop
 80008c4:	08003808 	.word	0x08003808

080008c8 <test_some_features>:
						0b01010,
						0b01010,
						0b00000
};

void test_some_features(i2cLcd_HandleTypeDef *h_lcd){
 80008c8:	b5b0      	push	{r4, r5, r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	char text[32] = "Some very very long text\0";
 80008d0:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <test_some_features+0x1e8>)
 80008d2:	f107 0410 	add.w	r4, r7, #16
 80008d6:	461d      	mov	r5, r3
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e0:	c403      	stmia	r4!, {r0, r1}
 80008e2:	8022      	strh	r2, [r4, #0]
 80008e4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	809a      	strh	r2, [r3, #4]
	uint8_t addr;

	i2cLcd_ClearDisplay(h_lcd);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff1f 	bl	8000732 <i2cLcd_ClearDisplay>

	i2cLcd_EntryIncrEn(h_lcd, 0);
 80008f4:	2100      	movs	r1, #0
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe28 	bl	800054c <i2cLcd_EntryIncrEn>
	i2cLcd_EntryShiftEn(h_lcd, 0);
 80008fc:	2100      	movs	r1, #0
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fe47 	bl	8000592 <i2cLcd_EntryShiftEn>
	print_long_text(h_lcd, "some long very text now\0");
 8000904:	496b      	ldr	r1, [pc, #428]	; (8000ab4 <test_some_features+0x1ec>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffa8 	bl	800085c <print_long_text>

	i2cLcd_ClearDisplay(h_lcd);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff10 	bl	8000732 <i2cLcd_ClearDisplay>

	i2cLcd_EntryIncrEn(h_lcd, 1);
 8000912:	2101      	movs	r1, #1
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fe19 	bl	800054c <i2cLcd_EntryIncrEn>
	i2cLcd_EntryShiftEn(h_lcd, 0);
 800091a:	2100      	movs	r1, #0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fe38 	bl	8000592 <i2cLcd_EntryShiftEn>
	print_long_text(h_lcd, "some long very text now\0");
 8000922:	4964      	ldr	r1, [pc, #400]	; (8000ab4 <test_some_features+0x1ec>)
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff99 	bl	800085c <print_long_text>

	i2cLcd_ClearDisplay(h_lcd);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ff01 	bl	8000732 <i2cLcd_ClearDisplay>

	i2cLcd_EntryIncrEn(h_lcd, 0);
 8000930:	2100      	movs	r1, #0
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fe0a 	bl	800054c <i2cLcd_EntryIncrEn>
	i2cLcd_EntryShiftEn(h_lcd, 1);
 8000938:	2101      	movs	r1, #1
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe29 	bl	8000592 <i2cLcd_EntryShiftEn>
	print_long_text(h_lcd, "some long very text now\0");
 8000940:	495c      	ldr	r1, [pc, #368]	; (8000ab4 <test_some_features+0x1ec>)
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff8a 	bl	800085c <print_long_text>

	i2cLcd_ClearDisplay(h_lcd);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fef2 	bl	8000732 <i2cLcd_ClearDisplay>


	i2cLcd_EntryIncrEn(h_lcd, 1);
 800094e:	2101      	movs	r1, #1
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fdfb 	bl	800054c <i2cLcd_EntryIncrEn>
	i2cLcd_EntryShiftEn(h_lcd, 1);
 8000956:	2101      	movs	r1, #1
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fe1a 	bl	8000592 <i2cLcd_EntryShiftEn>
	print_long_text(h_lcd, "some long very text now\0");
 800095e:	4955      	ldr	r1, [pc, #340]	; (8000ab4 <test_some_features+0x1ec>)
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff7b 	bl	800085c <print_long_text>

	i2cLcd_ClearDisplay(h_lcd);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fee3 	bl	8000732 <i2cLcd_ClearDisplay>


	i2cLcd_SetCursorPosition(h_lcd, 16);
 800096c:	2110      	movs	r1, #16
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff feec 	bl	800074c <i2cLcd_SetCursorPosition>
	i2cLcd_EntryIncrEn(h_lcd, 0);
 8000974:	2100      	movs	r1, #0
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fde8 	bl	800054c <i2cLcd_EntryIncrEn>
	i2cLcd_EntryShiftEn(h_lcd, 1);
 800097c:	2101      	movs	r1, #1
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fe07 	bl	8000592 <i2cLcd_EntryShiftEn>
	print_long_text(h_lcd, "some long very text now\0");
 8000984:	494b      	ldr	r1, [pc, #300]	; (8000ab4 <test_some_features+0x1ec>)
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ff68 	bl	800085c <print_long_text>

	i2cLcd_ClearDisplay(h_lcd);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff fed0 	bl	8000732 <i2cLcd_ClearDisplay>

	i2cLcd_SetCursorPosition(h_lcd, 5);
 8000992:	2105      	movs	r1, #5
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fed9 	bl	800074c <i2cLcd_SetCursorPosition>
	i2cLcd_EntryIncrEn(h_lcd, 1);
 800099a:	2101      	movs	r1, #1
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fdd5 	bl	800054c <i2cLcd_EntryIncrEn>
	i2cLcd_EntryShiftEn(h_lcd, 1);
 80009a2:	2101      	movs	r1, #1
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fdf4 	bl	8000592 <i2cLcd_EntryShiftEn>
	print_long_text(h_lcd, "some long very text now\0");
 80009aa:	4942      	ldr	r1, [pc, #264]	; (8000ab4 <test_some_features+0x1ec>)
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff55 	bl	800085c <print_long_text>
	print_long_text(h_lcd, "123456789abcdefghijklmop\0");
 80009b2:	4941      	ldr	r1, [pc, #260]	; (8000ab8 <test_some_features+0x1f0>)
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff51 	bl	800085c <print_long_text>

	//i2cLcd_SetCursorPosition(h_lcd, 4);

	i2cLcd_Shift(h_lcd,0,0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fe0a 	bl	80005d8 <i2cLcd_Shift>
	i2cLcd_Shift(h_lcd,0,1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2100      	movs	r1, #0
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fe05 	bl	80005d8 <i2cLcd_Shift>
	i2cLcd_Shift(h_lcd,1,0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fe00 	bl	80005d8 <i2cLcd_Shift>

	i2cLcd_Shift(h_lcd,1,1);
 80009d8:	2201      	movs	r2, #1
 80009da:	2101      	movs	r1, #1
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fdfb 	bl	80005d8 <i2cLcd_Shift>

	i2cLcd_ClearDisplay(h_lcd);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fea5 	bl	8000732 <i2cLcd_ClearDisplay>

	i2cLcd_Init(h_lcd);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff fe2c 	bl	8000646 <i2cLcd_Init>

	// playing around with custom chars
	i2cLcd_SendChar(h_lcd, 'a');
 80009ee:	2161      	movs	r1, #97	; 0x61
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fd28 	bl	8000446 <i2cLcd_SendChar>
	i2cLcd_SendChar(h_lcd, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fd24 	bl	8000446 <i2cLcd_SendChar>
	i2cLcd_SendChar(h_lcd, 1);
 80009fe:	2101      	movs	r1, #1
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fd20 	bl	8000446 <i2cLcd_SendChar>

	i2cLcd_WriteCustomChar(h_lcd, 1, cchar2);
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <test_some_features+0x1f4>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fd4e 	bl	80004ac <i2cLcd_WriteCustomChar>

	i2cLcd_SendChar(h_lcd, 'a');
 8000a10:	2161      	movs	r1, #97	; 0x61
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fd17 	bl	8000446 <i2cLcd_SendChar>


	i2cLcd_SendChar(h_lcd, 0);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fd13 	bl	8000446 <i2cLcd_SendChar>

	i2cLcd_WriteCustomChar(h_lcd, 0, cchar1);
 8000a20:	4a27      	ldr	r2, [pc, #156]	; (8000ac0 <test_some_features+0x1f8>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fd41 	bl	80004ac <i2cLcd_WriteCustomChar>

	i2cLcd_SendChar(h_lcd, 1);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fd0a 	bl	8000446 <i2cLcd_SendChar>



	i2cLcd_ClearDisplay(h_lcd);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fe7d 	bl	8000732 <i2cLcd_ClearDisplay>
	print_long_text(h_lcd, "Custom character\0");
 8000a38:	4922      	ldr	r1, [pc, #136]	; (8000ac4 <test_some_features+0x1fc>)
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff0e 	bl	800085c <print_long_text>

	i2cLcd_SetCursorPosition(h_lcd, 40);
 8000a40:	2128      	movs	r1, #40	; 0x28
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fe82 	bl	800074c <i2cLcd_SetCursorPosition>
	i2cLcd_SendChar(h_lcd, 'z');
 8000a48:	217a      	movs	r1, #122	; 0x7a
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fcfb 	bl	8000446 <i2cLcd_SendChar>
	i2cLcd_WriteCustomChar(h_lcd, 0, ch_smiley);
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <test_some_features+0x200>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fd29 	bl	80004ac <i2cLcd_WriteCustomChar>
	i2cLcd_WriteCustomChar(h_lcd, 1, ch_sadley);
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <test_some_features+0x204>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fd24 	bl	80004ac <i2cLcd_WriteCustomChar>
	i2cLcd_WriteCustomChar(h_lcd, 2, ch_hearty);
 8000a64:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <test_some_features+0x208>)
 8000a66:	2102      	movs	r1, #2
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fd1f 	bl	80004ac <i2cLcd_WriteCustomChar>
	i2cLcd_WriteCustomChar(h_lcd, 3, ch_skully);
 8000a6e:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <test_some_features+0x20c>)
 8000a70:	2103      	movs	r1, #3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fd1a 	bl	80004ac <i2cLcd_WriteCustomChar>
	i2cLcd_SendChar(h_lcd, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fce3 	bl	8000446 <i2cLcd_SendChar>
	i2cLcd_SendChar(h_lcd, 1);
 8000a80:	2101      	movs	r1, #1
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fcdf 	bl	8000446 <i2cLcd_SendChar>
	i2cLcd_SendChar(h_lcd, 2);
 8000a88:	2102      	movs	r1, #2
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fcdb 	bl	8000446 <i2cLcd_SendChar>
	i2cLcd_SendChar(h_lcd, 3);
 8000a90:	2103      	movs	r1, #3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fcd7 	bl	8000446 <i2cLcd_SendChar>

	addr = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]
	i2cLcd_GetCursorPosition(h_lcd, &addr);
 8000a9c:	f107 030f 	add.w	r3, r7, #15
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fe66 	bl	8000774 <i2cLcd_GetCursorPosition>



}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab0:	08003808 	.word	0x08003808
 8000ab4:	08003828 	.word	0x08003828
 8000ab8:	08003844 	.word	0x08003844
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	08003860 	.word	0x08003860
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000018 	.word	0x20000018
 8000ad0:	20000020 	.word	0x20000020
 8000ad4:	20000028 	.word	0x20000028

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i2c_lcd_addr = (0x20<<1);
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 f9de 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f88a 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 f8ee 	bl	8000ccc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000af0:	f000 f8c2 	bl	8000c78 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 fa3b 	bl	8000f70 <HAL_Delay>

  i2cLcd_CreateHandle(&h_lcd, &hi2c1, i2c_lcd_addr);
 8000afa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000afe:	461a      	mov	r2, r3
 8000b00:	493b      	ldr	r1, [pc, #236]	; (8000bf0 <main+0x118>)
 8000b02:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <main+0x11c>)
 8000b04:	f7ff fe4d 	bl	80007a2 <i2cLcd_CreateHandle>

  i2cLcd_Init(&h_lcd);
 8000b08:	483a      	ldr	r0, [pc, #232]	; (8000bf4 <main+0x11c>)
 8000b0a:	f7ff fd9c 	bl	8000646 <i2cLcd_Init>

  i2cLcd_ClearDisplay(&h_lcd);
 8000b0e:	4839      	ldr	r0, [pc, #228]	; (8000bf4 <main+0x11c>)
 8000b10:	f7ff fe0f 	bl	8000732 <i2cLcd_ClearDisplay>

  i=0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  j=0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(500);
 8000b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b24:	f000 fa24 	bl	8000f70 <HAL_Delay>

  test_some_features(&h_lcd);
 8000b28:	4832      	ldr	r0, [pc, #200]	; (8000bf4 <main+0x11c>)
 8000b2a:	f7ff fecd 	bl	80008c8 <test_some_features>


  i2cLcd_Init(&h_lcd);
 8000b2e:	4831      	ldr	r0, [pc, #196]	; (8000bf4 <main+0x11c>)
 8000b30:	f7ff fd89 	bl	8000646 <i2cLcd_Init>

  while (1){
	  i2cLcd_ClearDisplay(&h_lcd);
 8000b34:	482f      	ldr	r0, [pc, #188]	; (8000bf4 <main+0x11c>)
 8000b36:	f7ff fdfc 	bl	8000732 <i2cLcd_ClearDisplay>
	  HAL_Delay(20);
 8000b3a:	2014      	movs	r0, #20
 8000b3c:	f000 fa18 	bl	8000f70 <HAL_Delay>
	  sprintf(strData,"STM32F100");
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	492d      	ldr	r1, [pc, #180]	; (8000bf8 <main+0x120>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 f9e5 	bl	8002f14 <siprintf>
	  while(strData[i]) {
 8000b4a:	e00e      	b.n	8000b6a <main+0x92>
		  i2cLcd_SendChar(&h_lcd, strData[i]);
 8000b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b50:	3328      	adds	r3, #40	; 0x28
 8000b52:	443b      	add	r3, r7
 8000b54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4826      	ldr	r0, [pc, #152]	; (8000bf4 <main+0x11c>)
 8000b5c:	f7ff fc73 	bl	8000446 <i2cLcd_SendChar>
		  //HAL_Delay(100);
		  i++;
 8000b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b64:	3301      	adds	r3, #1
 8000b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  while(strData[i]) {
 8000b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b6e:	3328      	adds	r3, #40	; 0x28
 8000b70:	443b      	add	r3, r7
 8000b72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1e8      	bne.n	8000b4c <main+0x74>
	  }

	  // test reading address cursor
	  i2cLcd_ReadByte(&h_lcd, &data);
 8000b7a:	1cfb      	adds	r3, r7, #3
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <main+0x11c>)
 8000b80:	f7ff fc04 	bl	800038c <i2cLcd_ReadByte>

	  i2cLcd_SetCursorPosition(&h_lcd, 0x40);
 8000b84:	2140      	movs	r1, #64	; 0x40
 8000b86:	481b      	ldr	r0, [pc, #108]	; (8000bf4 <main+0x11c>)
 8000b88:	f7ff fde0 	bl	800074c <i2cLcd_SetCursorPosition>
	  i=0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  sprintf(strData,"I2C LCD Library");
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4919      	ldr	r1, [pc, #100]	; (8000bfc <main+0x124>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 f9bc 	bl	8002f14 <siprintf>
	  while(strData[i]) {
 8000b9c:	e00e      	b.n	8000bbc <main+0xe4>
		  i2cLcd_SendChar(&h_lcd, strData[i]);
 8000b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ba2:	3328      	adds	r3, #40	; 0x28
 8000ba4:	443b      	add	r3, r7
 8000ba6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <main+0x11c>)
 8000bae:	f7ff fc4a 	bl	8000446 <i2cLcd_SendChar>
		  //HAL_Delay(100);
		  i++;
 8000bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  while(strData[i]) {
 8000bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc0:	3328      	adds	r3, #40	; 0x28
 8000bc2:	443b      	add	r3, r7
 8000bc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1e8      	bne.n	8000b9e <main+0xc6>
	  }

	  i2cLcd_SendChar(&h_lcd, 0x7E);
 8000bcc:	217e      	movs	r1, #126	; 0x7e
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <main+0x11c>)
 8000bd0:	f7ff fc39 	bl	8000446 <i2cLcd_SendChar>
	  HAL_Delay(2000);
 8000bd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bd8:	f000 f9ca 	bl	8000f70 <HAL_Delay>

	  i=0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  j++;
 8000be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000be6:	3301      	adds	r3, #1
 8000be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while (1){
 8000bec:	e7a2      	b.n	8000b34 <main+0x5c>
 8000bee:	bf00      	nop
 8000bf0:	200000bc 	.word	0x200000bc
 8000bf4:	20000108 	.word	0x20000108
 8000bf8:	08003874 	.word	0x08003874
 8000bfc:	08003880 	.word	0x08003880

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 f978 	bl	8002f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 ff16 	bl	8001a68 <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c42:	f000 f867 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 ff40 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 f853 	bl	8000d14 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	; 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <MX_I2C1_Init+0x4c>)
 8000c80:	601a      	str	r2, [r3, #0]
//  hi2c1.Init.ClockSpeed = 400000;
//  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.Timing = 0x50330309;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000c84:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_I2C1_Init+0x48>)
 8000cae:	f000 fa68 	bl	8001182 <HAL_I2C_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x44>
  {
    Error_Handler();
 8000cb8:	f000 f82c 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000bc 	.word	0x200000bc
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	50330309 	.word	0x50330309

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_GPIO_Init+0x44>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <MX_GPIO_Init+0x44>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_GPIO_Init+0x44>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_GPIO_Init+0x44>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <MX_GPIO_Init+0x44>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_GPIO_Init+0x44>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_MspInit+0x44>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_MspInit+0x44>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_MspInit+0x44>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x44>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x44>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x44>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 f9de 	bl	800111c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8ba 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f002 f85e 	bl	8002eb0 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000a000 	.word	0x2000a000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	20000114 	.word	0x20000114
 8000e28:	20000130 	.word	0x20000130

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f002 f81d 	bl	8002ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e82:	f7ff fe29 	bl	8000ad8 <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e88:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000e94:	080038fc 	.word	0x080038fc
  ldr r2, =_sbss
 8000e98:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000e9c:	2000012c 	.word	0x2000012c

08000ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_2_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x28>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x28>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f931 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff ff30 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f93b 	bl	800116a <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f0c:	f000 f911 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000030 	.word	0x20000030
 8000f28:	20000038 	.word	0x20000038
 8000f2c:	20000034 	.word	0x20000034

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000038 	.word	0x20000038
 8000f54:	20000118 	.word	0x20000118

08000f58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000118 	.word	0x20000118

08000f70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000038 	.word	0x20000038

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff47 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5c 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e081      	b.n	8001298 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f879 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2224      	movs	r2, #36	; 0x24
 80011b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0201 	bic.w	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e006      	b.n	800120a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001208:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d104      	bne.n	800121c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69d9      	ldr	r1, [r3, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	461a      	mov	r2, r3
 80012c0:	460b      	mov	r3, r1
 80012c2:	817b      	strh	r3, [r7, #10]
 80012c4:	4613      	mov	r3, r2
 80012c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b20      	cmp	r3, #32
 80012d2:	f040 80da 	bne.w	800148a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_I2C_Master_Transmit+0x30>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e0d3      	b.n	800148c <HAL_I2C_Master_Transmit+0x1d8>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012ec:	f7ff fe34 	bl	8000f58 <HAL_GetTick>
 80012f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2319      	movs	r3, #25
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 f9e6 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e0be      	b.n	800148c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2221      	movs	r2, #33	; 0x21
 8001312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2210      	movs	r2, #16
 800131a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	893a      	ldrh	r2, [r7, #8]
 800132e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133a:	b29b      	uxth	r3, r3
 800133c:	2bff      	cmp	r3, #255	; 0xff
 800133e:	d90e      	bls.n	800135e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134a:	b2da      	uxtb	r2, r3
 800134c:	8979      	ldrh	r1, [r7, #10]
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_I2C_Master_Transmit+0x1e0>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fb58 	bl	8001a0c <I2C_TransferConfig>
 800135c:	e06c      	b.n	8001438 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136c:	b2da      	uxtb	r2, r3
 800136e:	8979      	ldrh	r1, [r7, #10]
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <HAL_I2C_Master_Transmit+0x1e0>)
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 fb47 	bl	8001a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800137e:	e05b      	b.n	8001438 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	6a39      	ldr	r1, [r7, #32]
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f9e3 	bl	8001750 <I2C_WaitOnTXISFlagUntilTimeout>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e07b      	b.n	800148c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013bc:	3b01      	subs	r3, #1
 80013be:	b29a      	uxth	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d034      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x184>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d130      	bne.n	8001438 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f975 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e04d      	b.n	800148c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	2bff      	cmp	r3, #255	; 0xff
 80013f8:	d90e      	bls.n	8001418 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	22ff      	movs	r2, #255	; 0xff
 80013fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	b2da      	uxtb	r2, r3
 8001406:	8979      	ldrh	r1, [r7, #10]
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 fafb 	bl	8001a0c <I2C_TransferConfig>
 8001416:	e00f      	b.n	8001438 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001426:	b2da      	uxtb	r2, r3
 8001428:	8979      	ldrh	r1, [r7, #10]
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 faea 	bl	8001a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d19e      	bne.n	8001380 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	6a39      	ldr	r1, [r7, #32]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f9c2 	bl	80017d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e01a      	b.n	800148c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2220      	movs	r2, #32
 800145c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_I2C_Master_Transmit+0x1e4>)
 800146a:	400b      	ands	r3, r1
 800146c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2220      	movs	r2, #32
 8001472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800148a:	2302      	movs	r3, #2
  }
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	80002000 	.word	0x80002000
 8001498:	fe00e800 	.word	0xfe00e800

0800149c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	817b      	strh	r3, [r7, #10]
 80014ac:	4613      	mov	r3, r2
 80014ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	f040 80db 	bne.w	8001674 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_I2C_Master_Receive+0x30>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e0d4      	b.n	8001676 <HAL_I2C_Master_Receive+0x1da>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014d4:	f7ff fd40 	bl	8000f58 <HAL_GetTick>
 80014d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2319      	movs	r3, #25
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f8f2 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0bf      	b.n	8001676 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2222      	movs	r2, #34	; 0x22
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2210      	movs	r2, #16
 8001502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	893a      	ldrh	r2, [r7, #8]
 8001516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	d90e      	bls.n	8001546 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001532:	b2da      	uxtb	r2, r3
 8001534:	8979      	ldrh	r1, [r7, #10]
 8001536:	4b52      	ldr	r3, [pc, #328]	; (8001680 <HAL_I2C_Master_Receive+0x1e4>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fa64 	bl	8001a0c <I2C_TransferConfig>
 8001544:	e06d      	b.n	8001622 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	b2da      	uxtb	r2, r3
 8001556:	8979      	ldrh	r1, [r7, #10]
 8001558:	4b49      	ldr	r3, [pc, #292]	; (8001680 <HAL_I2C_Master_Receive+0x1e4>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 fa53 	bl	8001a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001566:	e05c      	b.n	8001622 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	6a39      	ldr	r1, [r7, #32]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f96b 	bl	8001848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e07c      	b.n	8001676 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001598:	3b01      	subs	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d034      	beq.n	8001622 <HAL_I2C_Master_Receive+0x186>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d130      	bne.n	8001622 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	2200      	movs	r2, #0
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f880 	bl	80016d0 <I2C_WaitOnFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e04d      	b.n	8001676 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2bff      	cmp	r3, #255	; 0xff
 80015e2:	d90e      	bls.n	8001602 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	8979      	ldrh	r1, [r7, #10]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fa06 	bl	8001a0c <I2C_TransferConfig>
 8001600:	e00f      	b.n	8001622 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29a      	uxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001610:	b2da      	uxtb	r2, r3
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f9f5 	bl	8001a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d19d      	bne.n	8001568 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	6a39      	ldr	r1, [r7, #32]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f8cd 	bl	80017d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e01a      	b.n	8001676 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2220      	movs	r2, #32
 8001646:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_I2C_Master_Receive+0x1e8>)
 8001654:	400b      	ands	r3, r1
 8001656:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001674:	2302      	movs	r3, #2
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	80002400 	.word	0x80002400
 8001684:	fe00e800 	.word	0xfe00e800

08001688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d103      	bne.n	80016a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d007      	beq.n	80016c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	619a      	str	r2, [r3, #24]
  }
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016e0:	e022      	b.n	8001728 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e8:	d01e      	beq.n	8001728 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ea:	f7ff fc35 	bl	8000f58 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d302      	bcc.n	8001700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d113      	bne.n	8001728 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	f043 0220 	orr.w	r2, r3, #32
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2220      	movs	r2, #32
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e00f      	b.n	8001748 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4013      	ands	r3, r2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	429a      	cmp	r2, r3
 8001744:	d0cd      	beq.n	80016e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800175c:	e02c      	b.n	80017b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f8dc 	bl	8001920 <I2C_IsAcknowledgeFailed>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e02a      	b.n	80017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001778:	d01e      	beq.n	80017b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800177a:	f7ff fbed 	bl	8000f58 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	429a      	cmp	r2, r3
 8001788:	d302      	bcc.n	8001790 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d113      	bne.n	80017b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	f043 0220 	orr.w	r2, r3, #32
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2220      	movs	r2, #32
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e007      	b.n	80017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d1cb      	bne.n	800175e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017dc:	e028      	b.n	8001830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f89c 	bl	8001920 <I2C_IsAcknowledgeFailed>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e026      	b.n	8001840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017f2:	f7ff fbb1 	bl	8000f58 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d302      	bcc.n	8001808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d113      	bne.n	8001830 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e007      	b.n	8001840 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b20      	cmp	r3, #32
 800183c:	d1cf      	bne.n	80017de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001854:	e055      	b.n	8001902 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f860 	bl	8001920 <I2C_IsAcknowledgeFailed>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e053      	b.n	8001912 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	2b20      	cmp	r3, #32
 8001876:	d129      	bne.n	80018cc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b04      	cmp	r3, #4
 8001884:	d105      	bne.n	8001892 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e03f      	b.n	8001912 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2220      	movs	r2, #32
 8001898:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80018a6:	400b      	ands	r3, r1
 80018a8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e022      	b.n	8001912 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018cc:	f7ff fb44 	bl	8000f58 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d302      	bcc.n	80018e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f043 0220 	orr.w	r2, r3, #32
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e007      	b.n	8001912 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b04      	cmp	r3, #4
 800190e:	d1a2      	bne.n	8001856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	fe00e800 	.word	0xfe00e800

08001920 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b10      	cmp	r3, #16
 8001938:	d161      	bne.n	80019fe <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001948:	d02b      	beq.n	80019a2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001958:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800195a:	e022      	b.n	80019a2 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001962:	d01e      	beq.n	80019a2 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001964:	f7ff faf8 	bl	8000f58 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	429a      	cmp	r2, r3
 8001972:	d302      	bcc.n	800197a <I2C_IsAcknowledgeFailed+0x5a>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d113      	bne.n	80019a2 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f043 0220 	orr.w	r2, r3, #32
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e02e      	b.n	8001a00 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d1d5      	bne.n	800195c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2210      	movs	r2, #16
 80019b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2220      	movs	r2, #32
 80019be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fe61 	bl	8001688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <I2C_IsAcknowledgeFailed+0xe8>)
 80019d2:	400b      	ands	r3, r1
 80019d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f043 0204 	orr.w	r2, r3, #4
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	fe00e800 	.word	0xfe00e800

08001a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	817b      	strh	r3, [r7, #10]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	0d5b      	lsrs	r3, r3, #21
 8001a28:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <I2C_TransferConfig+0x58>)
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	43db      	mvns	r3, r3
 8001a32:	ea02 0103 	and.w	r1, r2, r3
 8001a36:	897b      	ldrh	r3, [r7, #10]
 8001a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a3c:	7a7b      	ldrb	r3, [r7, #9]
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	03ff63ff 	.word	0x03ff63ff

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f001 b823 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 817d 	beq.w	8001d9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aa4:	4bbc      	ldr	r3, [pc, #752]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00c      	beq.n	8001aca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab0:	4bb9      	ldr	r3, [pc, #740]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d15c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x10e>
 8001abc:	4bb6      	ldr	r3, [pc, #728]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d155      	bne.n	8001b76 <HAL_RCC_OscConfig+0x10e>
 8001aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ace:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ade:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0x94>
 8001af6:	4ba8      	ldr	r3, [pc, #672]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	e015      	b.n	8001b28 <HAL_RCC_OscConfig+0xc0>
 8001afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b24:	4b9c      	ldr	r3, [pc, #624]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b34:	fa92 f2a2 	rbit	r2, r2
 8001b38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b40:	fab2 f282 	clz	r2, r2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	f042 0220 	orr.w	r2, r2, #32
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f002 021f 	and.w	r2, r2, #31
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f202 	lsl.w	r2, r1, r2
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 811f 	beq.w	8001d9c <HAL_RCC_OscConfig+0x334>
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 8116 	bne.w	8001d9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f000 bfaf 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12e>
 8001b88:	4b83      	ldr	r3, [pc, #524]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a82      	ldr	r2, [pc, #520]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e036      	b.n	8001c04 <HAL_RCC_OscConfig+0x19c>
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x158>
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7b      	ldr	r2, [pc, #492]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b79      	ldr	r3, [pc, #484]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a78      	ldr	r2, [pc, #480]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e021      	b.n	8001c04 <HAL_RCC_OscConfig+0x19c>
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x184>
 8001bd2:	4b71      	ldr	r3, [pc, #452]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a70      	ldr	r2, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6e      	ldr	r3, [pc, #440]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6d      	ldr	r2, [pc, #436]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x19c>
 8001bec:	4b6a      	ldr	r3, [pc, #424]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a69      	ldr	r2, [pc, #420]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a66      	ldr	r2, [pc, #408]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c04:	4b64      	ldr	r3, [pc, #400]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f023 020f 	bic.w	r2, r3, #15
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	495f      	ldr	r1, [pc, #380]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d059      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f993 	bl	8000f58 <HAL_GetTick>
 8001c32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f98e 	bl	8000f58 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	; 0x64
 8001c46:	d902      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f000 bf43 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8001c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_RCC_OscConfig+0x218>
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	e015      	b.n	8001cac <HAL_RCC_OscConfig+0x244>
 8001c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001cb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cb8:	fa92 f2a2 	rbit	r2, r2
 8001cbc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001cc0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ab      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1d0>
 8001ce0:	e05d      	b.n	8001d9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f939 	bl	8000f58 <HAL_GetTick>
 8001ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f934 	bl	8000f58 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b64      	cmp	r3, #100	; 0x64
 8001cfa:	d902      	bls.n	8001d02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f000 bee9 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8001d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2cc>
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e015      	b.n	8001d60 <HAL_RCC_OscConfig+0x2f8>
 8001d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d6c:	fa92 f2a2 	rbit	r2, r2
 8001d70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f002 021f 	and.w	r2, r2, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ab      	bne.n	8001cec <HAL_RCC_OscConfig+0x284>
 8001d94:	e003      	b.n	8001d9e <HAL_RCC_OscConfig+0x336>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 817d 	beq.w	80020ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001db4:	4ba6      	ldr	r3, [pc, #664]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dc0:	4ba3      	ldr	r3, [pc, #652]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d172      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x44a>
 8001dcc:	4ba0      	ldr	r3, [pc, #640]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d16c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x44a>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001dea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_RCC_OscConfig+0x3a0>
 8001e02:	4b93      	ldr	r3, [pc, #588]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c8>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e2c:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	2202      	movs	r2, #2
 8001e32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_RCC_OscConfig+0x410>
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f000 be2e 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b75      	ldr	r3, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	21f8      	movs	r1, #248	; 0xf8
 8001e8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e96:	fa91 f1a1 	rbit	r1, r1
 8001e9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ea2:	fab1 f181 	clz	r1, r1
 8001ea6:	b2c9      	uxtb	r1, r1
 8001ea8:	408b      	lsls	r3, r1
 8001eaa:	4969      	ldr	r1, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb0:	e0fd      	b.n	80020ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8088 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x56c>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ed6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	2301      	movs	r3, #1
 8001eee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f832 	bl	8000f58 <HAL_GetTick>
 8001ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff f82d 	bl	8000f58 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d902      	bls.n	8001f10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f000 bde2 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4d8>
 8001f3a:	4b45      	ldr	r3, [pc, #276]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e013      	b.n	8001f68 <HAL_RCC_OscConfig+0x500>
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f72:	fa92 f2a2 	rbit	r2, r2
 8001f76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f002 021f 	and.w	r2, r2, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0af      	beq.n	8001efa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	21f8      	movs	r1, #248	; 0xf8
 8001fb0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fb8:	fa91 f1a1 	rbit	r1, r1
 8001fbc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001fc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fc4:	fab1 f181 	clz	r1, r1
 8001fc8:	b2c9      	uxtb	r1, r1
 8001fca:	408b      	lsls	r3, r1
 8001fcc:	4920      	ldr	r1, [pc, #128]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
 8001fd2:	e06c      	b.n	80020ae <HAL_RCC_OscConfig+0x646>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe ffaa 	bl	8000f58 <HAL_GetTick>
 8002004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7fe ffa5 	bl	8000f58 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d902      	bls.n	8002020 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	f000 bd5a 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d104      	bne.n	8002054 <HAL_RCC_OscConfig+0x5ec>
 800204a:	4b01      	ldr	r3, [pc, #4]	; (8002050 <HAL_RCC_OscConfig+0x5e8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e015      	b.n	800207c <HAL_RCC_OscConfig+0x614>
 8002050:	40021000 	.word	0x40021000
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800206c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002078:	4bc8      	ldr	r3, [pc, #800]	; (800239c <HAL_RCC_OscConfig+0x934>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002082:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002086:	fa92 f2a2 	rbit	r2, r2
 800208a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800208e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ad      	bne.n	800200a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8110 	beq.w	80022e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d079      	beq.n	80021c8 <HAL_RCC_OscConfig+0x760>
 80020d4:	2301      	movs	r3, #1
 80020d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	4bab      	ldr	r3, [pc, #684]	; (80023a0 <HAL_RCC_OscConfig+0x938>)
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	461a      	mov	r2, r3
 80020fa:	2301      	movs	r3, #1
 80020fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7fe ff2b 	bl	8000f58 <HAL_GetTick>
 8002102:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe ff26 	bl	8000f58 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d902      	bls.n	800211e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	f000 bcdb 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800215c:	2202      	movs	r2, #2
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002176:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002178:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x934>)
 800217a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002184:	2102      	movs	r1, #2
 8002186:	6019      	str	r1, [r3, #0]
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f1a3 	rbit	r1, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800219e:	6019      	str	r1, [r3, #0]
  return result;
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0a0      	beq.n	8002108 <HAL_RCC_OscConfig+0x6a0>
 80021c6:	e08d      	b.n	80022e4 <HAL_RCC_OscConfig+0x87c>
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021ea:	601a      	str	r2, [r3, #0]
  return result;
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_OscConfig+0x938>)
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	461a      	mov	r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7fe fea5 	bl	8000f58 <HAL_GetTick>
 800220e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002212:	e00a      	b.n	800222a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe fea0 	bl	8000f58 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d902      	bls.n	800222a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	f000 bc55 	b.w	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002256:	2202      	movs	r2, #2
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f2a3 	rbit	r2, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800227a:	2202      	movs	r2, #2
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	fa93 f2a3 	rbit	r2, r3
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002294:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_RCC_OscConfig+0x934>)
 8002298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022a2:	2102      	movs	r1, #2
 80022a4:	6019      	str	r1, [r3, #0]
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f1a3 	rbit	r1, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022bc:	6019      	str	r1, [r3, #0]
  return result;
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d197      	bne.n	8002214 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 81a1 	beq.w	800263c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x934>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d116      	bne.n	800233a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_RCC_OscConfig+0x934>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4a22      	ldr	r2, [pc, #136]	; (800239c <HAL_RCC_OscConfig+0x934>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	61d3      	str	r3, [r2, #28]
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_RCC_OscConfig+0x934>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002332:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_OscConfig+0x93c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_RCC_OscConfig+0x93c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_RCC_OscConfig+0x93c>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fe01 	bl	8000f58 <HAL_GetTick>
 8002356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	e009      	b.n	8002370 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235c:	f7fe fdfc 	bl	8000f58 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e3b1      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCC_OscConfig+0x93c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ef      	beq.n	800235c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10d      	bne.n	80023a8 <HAL_RCC_OscConfig+0x940>
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCC_OscConfig+0x934>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a02      	ldr	r2, [pc, #8]	; (800239c <HAL_RCC_OscConfig+0x934>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e03c      	b.n	8002414 <HAL_RCC_OscConfig+0x9ac>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	10908120 	.word	0x10908120
 80023a4:	40007000 	.word	0x40007000
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x96a>
 80023b8:	4bc1      	ldr	r3, [pc, #772]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4ac0      	ldr	r2, [pc, #768]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4bbe      	ldr	r3, [pc, #760]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4abd      	ldr	r2, [pc, #756]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e020      	b.n	8002414 <HAL_RCC_OscConfig+0x9ac>
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x994>
 80023e2:	4bb7      	ldr	r3, [pc, #732]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4ab6      	ldr	r2, [pc, #728]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4bb4      	ldr	r3, [pc, #720]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4ab3      	ldr	r2, [pc, #716]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0x9ac>
 80023fc:	4bb0      	ldr	r3, [pc, #704]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4aaf      	ldr	r2, [pc, #700]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4bad      	ldr	r3, [pc, #692]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4aac      	ldr	r2, [pc, #688]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8081 	beq.w	8002528 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fd97 	bl	8000f58 <HAL_GetTick>
 800242a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7fe fd92 	bl	8000f58 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e345      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002474:	2202      	movs	r2, #2
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002498:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d102      	bne.n	80024b4 <HAL_RCC_OscConfig+0xa4c>
 80024ae:	4b84      	ldr	r3, [pc, #528]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	e013      	b.n	80024dc <HAL_RCC_OscConfig+0xa74>
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4b79      	ldr	r3, [pc, #484]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024e4:	2102      	movs	r1, #2
 80024e6:	6011      	str	r1, [r2, #0]
 80024e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	fa92 f1a2 	rbit	r1, r2
 80024f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024fe:	6011      	str	r1, [r2, #0]
  return result;
 8002500:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002504:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	fab2 f282 	clz	r2, r2
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f002 021f 	and.w	r2, r2, #31
 800251a:	2101      	movs	r1, #1
 800251c:	fa01 f202 	lsl.w	r2, r1, r2
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d084      	beq.n	8002430 <HAL_RCC_OscConfig+0x9c8>
 8002526:	e07f      	b.n	8002628 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe fd16 	bl	8000f58 <HAL_GetTick>
 800252c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fd11 	bl	8000f58 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e2c4      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002590:	601a      	str	r2, [r3, #0]
  return result;
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800259a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_OscConfig+0xb4e>
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	e013      	b.n	80025de <HAL_RCC_OscConfig+0xb76>
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025e6:	2102      	movs	r1, #2
 80025e8:	6011      	str	r1, [r2, #0]
 80025ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	fa92 f1a2 	rbit	r1, r2
 80025f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002600:	6011      	str	r1, [r2, #0]
  return result;
 8002602:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002606:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	fab2 f282 	clz	r2, r2
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f002 021f 	and.w	r2, r2, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d184      	bne.n	8002532 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002628:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8242 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_RCC_OscConfig+0xc58>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	f000 8213 	beq.w	8002a82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b02      	cmp	r3, #2
 800266a:	f040 8162 	bne.w	8002932 <HAL_RCC_OscConfig+0xeca>
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002692:	601a      	str	r2, [r3, #0]
  return result;
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800269c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	461a      	mov	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fc50 	bl	8000f58 <HAL_GetTick>
 80026b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e00c      	b.n	80026d8 <HAL_RCC_OscConfig+0xc70>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fc48 	bl	8000f58 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1fd      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026fc:	601a      	str	r2, [r3, #0]
  return result;
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0xcba>
 800271c:	4bb0      	ldr	r3, [pc, #704]	; (80029e0 <HAL_RCC_OscConfig+0xf78>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e027      	b.n	8002772 <HAL_RCC_OscConfig+0xd0a>
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800272a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f2a3 	rbit	r2, r3
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b9c      	ldr	r3, [pc, #624]	; (80029e0 <HAL_RCC_OscConfig+0xf78>)
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002776:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800277a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800277e:	6011      	str	r1, [r2, #0]
 8002780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002784:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	fa92 f1a2 	rbit	r1, r2
 800278e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002792:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002796:	6011      	str	r1, [r2, #0]
  return result;
 8002798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800279c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f002 021f 	and.w	r2, r2, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d182      	bne.n	80026c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	430b      	orrs	r3, r1
 80027e0:	497f      	ldr	r1, [pc, #508]	; (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800280a:	601a      	str	r2, [r3, #0]
  return result;
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002814:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	2301      	movs	r3, #1
 800282a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fb94 	bl	8000f58 <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	e009      	b.n	800284a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe fb8f 	bl	8000f58 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e144      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800286e:	601a      	str	r2, [r3, #0]
  return result;
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002878:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d102      	bne.n	8002894 <HAL_RCC_OscConfig+0xe2c>
 800288e:	4b54      	ldr	r3, [pc, #336]	; (80029e0 <HAL_RCC_OscConfig+0xf78>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e027      	b.n	80028e4 <HAL_RCC_OscConfig+0xe7c>
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800289c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f2a3 	rbit	r2, r3
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028f0:	6011      	str	r1, [r2, #0]
 80028f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	fa92 f1a2 	rbit	r1, r2
 8002900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002904:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002908:	6011      	str	r1, [r2, #0]
  return result;
 800290a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f042 0220 	orr.w	r2, r2, #32
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f002 021f 	and.w	r2, r2, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d082      	beq.n	8002836 <HAL_RCC_OscConfig+0xdce>
 8002930:	e0cf      	b.n	8002ad2 <HAL_RCC_OscConfig+0x106a>
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800293a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800293e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002956:	601a      	str	r2, [r3, #0]
  return result;
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002960:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800296c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	461a      	mov	r2, r3
 8002974:	2300      	movs	r3, #0
 8002976:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe faee 	bl	8000f58 <HAL_GetTick>
 800297c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002980:	e009      	b.n	8002996 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe fae9 	bl	8000f58 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e09e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800299e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f2a3 	rbit	r2, r3
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029ba:	601a      	str	r2, [r3, #0]
  return result;
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <HAL_RCC_OscConfig+0xf7c>
 80029da:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <HAL_RCC_OscConfig+0xf78>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e029      	b.n	8002a34 <HAL_RCC_OscConfig+0xfcc>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_OscConfig+0x1078>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a58:	6011      	str	r1, [r2, #0]
  return result;
 8002a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d180      	bne.n	8002982 <HAL_RCC_OscConfig+0xf1a>
 8002a80:	e027      	b.n	8002ad2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e01e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_OscConfig+0x1078>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aa2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d10b      	bne.n	8002ace <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b09e      	sub	sp, #120	; 0x78
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e162      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b90      	ldr	r3, [pc, #576]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d910      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b8d      	ldr	r3, [pc, #564]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	498b      	ldr	r1, [pc, #556]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e14a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b82      	ldr	r3, [pc, #520]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	497f      	ldr	r1, [pc, #508]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80dc 	beq.w	8002d10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d13c      	bne.n	8002bda <HAL_RCC_ClockConfig+0xf6>
 8002b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xa6>
 8002b84:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	e00f      	b.n	8002baa <HAL_RCC_ClockConfig+0xc6>
 8002b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	667b      	str	r3, [r7, #100]	; 0x64
 8002b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ba6:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bae:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bb2:	fa92 f2a2 	rbit	r2, r2
 8002bb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0220 	orr.w	r2, r2, #32
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d17b      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0f3      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d13c      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x178>
 8002be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x128>
 8002c06:	4b4f      	ldr	r3, [pc, #316]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	e00f      	b.n	8002c2c <HAL_RCC_ClockConfig+0x148>
 8002c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c28:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c30:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c34:	fa92 f2a2 	rbit	r2, r2
 8002c38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f042 0220 	orr.w	r2, r2, #32
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f002 021f 	and.w	r2, r2, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d13a      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b2      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1a0>
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	e00d      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1bc>
 8002c84:	2302      	movs	r3, #2
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	2302      	movs	r3, #2
 8002c92:	623b      	str	r3, [r7, #32]
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	61ba      	str	r2, [r7, #24]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	fa92 f2a2 	rbit	r2, r2
 8002caa:	617a      	str	r2, [r7, #20]
  return result;
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	fab2 f282 	clz	r2, r2
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f042 0220 	orr.w	r2, r2, #32
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f002 021f 	and.w	r2, r2, #31
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e079      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 0203 	bic.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	491a      	ldr	r1, [pc, #104]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe f93a 	bl	8000f58 <HAL_GetTick>
 8002ce4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7fe f936 	bl	8000f58 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e061      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 020c 	and.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1eb      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d214      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4906      	ldr	r1, [pc, #24]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e040      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x2de>
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	491a      	ldr	r1, [pc, #104]	; (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4912      	ldr	r1, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d86:	f000 f829 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_ClockConfig+0x2e8>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d94:	22f0      	movs	r2, #240	; 0xf0
 8002d96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	fa92 f2a2 	rbit	r2, r2
 8002d9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	40d3      	lsrs	r3, r2
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002dac:	5cd3      	ldrb	r3, [r2, r3]
 8002dae:	fa21 f303 	lsr.w	r3, r1, r3
 8002db2:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <HAL_RCC_ClockConfig+0x2f0>)
 8002db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_RCC_ClockConfig+0x2f4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f888 	bl	8000ed0 <HAL_InitTick>
  
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3778      	adds	r7, #120	; 0x78
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08003890 	.word	0x08003890
 8002dd4:	20000030 	.word	0x20000030
 8002dd8:	20000034 	.word	0x20000034

08002ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b08b      	sub	sp, #44	; 0x2c
 8002de0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x30>
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x36>
 8002e0a:	e03c      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e0e:	623b      	str	r3, [r7, #32]
      break;
 8002e10:	e03c      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	fa92 f2a2 	rbit	r2, r2
 8002e24:	607a      	str	r2, [r7, #4]
  return result;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	fab2 f282 	clz	r2, r2
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	40d3      	lsrs	r3, r2
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	220f      	movs	r2, #15
 8002e40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	fa92 f2a2 	rbit	r2, r2
 8002e48:	60fa      	str	r2, [r7, #12]
  return result;
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	40d3      	lsrs	r3, r2
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e64:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	e004      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	623b      	str	r3, [r7, #32]
      break;
 8002e84:	e002      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e88:	623b      	str	r3, [r7, #32]
      break;
 8002e8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	372c      	adds	r7, #44	; 0x2c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	007a1200 	.word	0x007a1200
 8002ea4:	080038a0 	.word	0x080038a0
 8002ea8:	080038b0 	.word	0x080038b0
 8002eac:	003d0900 	.word	0x003d0900

08002eb0 <__errno>:
 8002eb0:	4b01      	ldr	r3, [pc, #4]	; (8002eb8 <__errno+0x8>)
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	2000003c 	.word	0x2000003c

08002ebc <__libc_init_array>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	4d0d      	ldr	r5, [pc, #52]	; (8002ef4 <__libc_init_array+0x38>)
 8002ec0:	4c0d      	ldr	r4, [pc, #52]	; (8002ef8 <__libc_init_array+0x3c>)
 8002ec2:	1b64      	subs	r4, r4, r5
 8002ec4:	10a4      	asrs	r4, r4, #2
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d109      	bne.n	8002ee0 <__libc_init_array+0x24>
 8002ecc:	4d0b      	ldr	r5, [pc, #44]	; (8002efc <__libc_init_array+0x40>)
 8002ece:	4c0c      	ldr	r4, [pc, #48]	; (8002f00 <__libc_init_array+0x44>)
 8002ed0:	f000 fc8e 	bl	80037f0 <_init>
 8002ed4:	1b64      	subs	r4, r4, r5
 8002ed6:	10a4      	asrs	r4, r4, #2
 8002ed8:	2600      	movs	r6, #0
 8002eda:	42a6      	cmp	r6, r4
 8002edc:	d105      	bne.n	8002eea <__libc_init_array+0x2e>
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee4:	4798      	blx	r3
 8002ee6:	3601      	adds	r6, #1
 8002ee8:	e7ee      	b.n	8002ec8 <__libc_init_array+0xc>
 8002eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eee:	4798      	blx	r3
 8002ef0:	3601      	adds	r6, #1
 8002ef2:	e7f2      	b.n	8002eda <__libc_init_array+0x1e>
 8002ef4:	080038f4 	.word	0x080038f4
 8002ef8:	080038f4 	.word	0x080038f4
 8002efc:	080038f4 	.word	0x080038f4
 8002f00:	080038f8 	.word	0x080038f8

08002f04 <memset>:
 8002f04:	4402      	add	r2, r0
 8002f06:	4603      	mov	r3, r0
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <memset+0xa>
 8002f0c:	4770      	bx	lr
 8002f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f12:	e7f9      	b.n	8002f08 <memset+0x4>

08002f14 <siprintf>:
 8002f14:	b40e      	push	{r1, r2, r3}
 8002f16:	b500      	push	{lr}
 8002f18:	b09c      	sub	sp, #112	; 0x70
 8002f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f1c:	9002      	str	r0, [sp, #8]
 8002f1e:	9006      	str	r0, [sp, #24]
 8002f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f24:	4809      	ldr	r0, [pc, #36]	; (8002f4c <siprintf+0x38>)
 8002f26:	9107      	str	r1, [sp, #28]
 8002f28:	9104      	str	r1, [sp, #16]
 8002f2a:	4909      	ldr	r1, [pc, #36]	; (8002f50 <siprintf+0x3c>)
 8002f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f30:	9105      	str	r1, [sp, #20]
 8002f32:	6800      	ldr	r0, [r0, #0]
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	a902      	add	r1, sp, #8
 8002f38:	f000 f868 	bl	800300c <_svfiprintf_r>
 8002f3c:	9b02      	ldr	r3, [sp, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	b01c      	add	sp, #112	; 0x70
 8002f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f48:	b003      	add	sp, #12
 8002f4a:	4770      	bx	lr
 8002f4c:	2000003c 	.word	0x2000003c
 8002f50:	ffff0208 	.word	0xffff0208

08002f54 <__ssputs_r>:
 8002f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f58:	688e      	ldr	r6, [r1, #8]
 8002f5a:	429e      	cmp	r6, r3
 8002f5c:	4682      	mov	sl, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	4690      	mov	r8, r2
 8002f62:	461f      	mov	r7, r3
 8002f64:	d838      	bhi.n	8002fd8 <__ssputs_r+0x84>
 8002f66:	898a      	ldrh	r2, [r1, #12]
 8002f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f6c:	d032      	beq.n	8002fd4 <__ssputs_r+0x80>
 8002f6e:	6825      	ldr	r5, [r4, #0]
 8002f70:	6909      	ldr	r1, [r1, #16]
 8002f72:	eba5 0901 	sub.w	r9, r5, r1
 8002f76:	6965      	ldr	r5, [r4, #20]
 8002f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f80:	3301      	adds	r3, #1
 8002f82:	444b      	add	r3, r9
 8002f84:	106d      	asrs	r5, r5, #1
 8002f86:	429d      	cmp	r5, r3
 8002f88:	bf38      	it	cc
 8002f8a:	461d      	movcc	r5, r3
 8002f8c:	0553      	lsls	r3, r2, #21
 8002f8e:	d531      	bpl.n	8002ff4 <__ssputs_r+0xa0>
 8002f90:	4629      	mov	r1, r5
 8002f92:	f000 fb63 	bl	800365c <_malloc_r>
 8002f96:	4606      	mov	r6, r0
 8002f98:	b950      	cbnz	r0, 8002fb0 <__ssputs_r+0x5c>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	f8ca 3000 	str.w	r3, [sl]
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb0:	6921      	ldr	r1, [r4, #16]
 8002fb2:	464a      	mov	r2, r9
 8002fb4:	f000 fabe 	bl	8003534 <memcpy>
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	6126      	str	r6, [r4, #16]
 8002fc6:	6165      	str	r5, [r4, #20]
 8002fc8:	444e      	add	r6, r9
 8002fca:	eba5 0509 	sub.w	r5, r5, r9
 8002fce:	6026      	str	r6, [r4, #0]
 8002fd0:	60a5      	str	r5, [r4, #8]
 8002fd2:	463e      	mov	r6, r7
 8002fd4:	42be      	cmp	r6, r7
 8002fd6:	d900      	bls.n	8002fda <__ssputs_r+0x86>
 8002fd8:	463e      	mov	r6, r7
 8002fda:	6820      	ldr	r0, [r4, #0]
 8002fdc:	4632      	mov	r2, r6
 8002fde:	4641      	mov	r1, r8
 8002fe0:	f000 fab6 	bl	8003550 <memmove>
 8002fe4:	68a3      	ldr	r3, [r4, #8]
 8002fe6:	1b9b      	subs	r3, r3, r6
 8002fe8:	60a3      	str	r3, [r4, #8]
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	4433      	add	r3, r6
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	e7db      	b.n	8002fac <__ssputs_r+0x58>
 8002ff4:	462a      	mov	r2, r5
 8002ff6:	f000 fba5 	bl	8003744 <_realloc_r>
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d1e1      	bne.n	8002fc4 <__ssputs_r+0x70>
 8003000:	6921      	ldr	r1, [r4, #16]
 8003002:	4650      	mov	r0, sl
 8003004:	f000 fabe 	bl	8003584 <_free_r>
 8003008:	e7c7      	b.n	8002f9a <__ssputs_r+0x46>
	...

0800300c <_svfiprintf_r>:
 800300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003010:	4698      	mov	r8, r3
 8003012:	898b      	ldrh	r3, [r1, #12]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	b09d      	sub	sp, #116	; 0x74
 8003018:	4607      	mov	r7, r0
 800301a:	460d      	mov	r5, r1
 800301c:	4614      	mov	r4, r2
 800301e:	d50e      	bpl.n	800303e <_svfiprintf_r+0x32>
 8003020:	690b      	ldr	r3, [r1, #16]
 8003022:	b963      	cbnz	r3, 800303e <_svfiprintf_r+0x32>
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	f000 fb19 	bl	800365c <_malloc_r>
 800302a:	6028      	str	r0, [r5, #0]
 800302c:	6128      	str	r0, [r5, #16]
 800302e:	b920      	cbnz	r0, 800303a <_svfiprintf_r+0x2e>
 8003030:	230c      	movs	r3, #12
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003038:	e0d1      	b.n	80031de <_svfiprintf_r+0x1d2>
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	616b      	str	r3, [r5, #20]
 800303e:	2300      	movs	r3, #0
 8003040:	9309      	str	r3, [sp, #36]	; 0x24
 8003042:	2320      	movs	r3, #32
 8003044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003048:	f8cd 800c 	str.w	r8, [sp, #12]
 800304c:	2330      	movs	r3, #48	; 0x30
 800304e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031f8 <_svfiprintf_r+0x1ec>
 8003052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003056:	f04f 0901 	mov.w	r9, #1
 800305a:	4623      	mov	r3, r4
 800305c:	469a      	mov	sl, r3
 800305e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003062:	b10a      	cbz	r2, 8003068 <_svfiprintf_r+0x5c>
 8003064:	2a25      	cmp	r2, #37	; 0x25
 8003066:	d1f9      	bne.n	800305c <_svfiprintf_r+0x50>
 8003068:	ebba 0b04 	subs.w	fp, sl, r4
 800306c:	d00b      	beq.n	8003086 <_svfiprintf_r+0x7a>
 800306e:	465b      	mov	r3, fp
 8003070:	4622      	mov	r2, r4
 8003072:	4629      	mov	r1, r5
 8003074:	4638      	mov	r0, r7
 8003076:	f7ff ff6d 	bl	8002f54 <__ssputs_r>
 800307a:	3001      	adds	r0, #1
 800307c:	f000 80aa 	beq.w	80031d4 <_svfiprintf_r+0x1c8>
 8003080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003082:	445a      	add	r2, fp
 8003084:	9209      	str	r2, [sp, #36]	; 0x24
 8003086:	f89a 3000 	ldrb.w	r3, [sl]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80a2 	beq.w	80031d4 <_svfiprintf_r+0x1c8>
 8003090:	2300      	movs	r3, #0
 8003092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800309a:	f10a 0a01 	add.w	sl, sl, #1
 800309e:	9304      	str	r3, [sp, #16]
 80030a0:	9307      	str	r3, [sp, #28]
 80030a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030a6:	931a      	str	r3, [sp, #104]	; 0x68
 80030a8:	4654      	mov	r4, sl
 80030aa:	2205      	movs	r2, #5
 80030ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b0:	4851      	ldr	r0, [pc, #324]	; (80031f8 <_svfiprintf_r+0x1ec>)
 80030b2:	f7fd f88d 	bl	80001d0 <memchr>
 80030b6:	9a04      	ldr	r2, [sp, #16]
 80030b8:	b9d8      	cbnz	r0, 80030f2 <_svfiprintf_r+0xe6>
 80030ba:	06d0      	lsls	r0, r2, #27
 80030bc:	bf44      	itt	mi
 80030be:	2320      	movmi	r3, #32
 80030c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030c4:	0711      	lsls	r1, r2, #28
 80030c6:	bf44      	itt	mi
 80030c8:	232b      	movmi	r3, #43	; 0x2b
 80030ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ce:	f89a 3000 	ldrb.w	r3, [sl]
 80030d2:	2b2a      	cmp	r3, #42	; 0x2a
 80030d4:	d015      	beq.n	8003102 <_svfiprintf_r+0xf6>
 80030d6:	9a07      	ldr	r2, [sp, #28]
 80030d8:	4654      	mov	r4, sl
 80030da:	2000      	movs	r0, #0
 80030dc:	f04f 0c0a 	mov.w	ip, #10
 80030e0:	4621      	mov	r1, r4
 80030e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030e6:	3b30      	subs	r3, #48	; 0x30
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d94e      	bls.n	800318a <_svfiprintf_r+0x17e>
 80030ec:	b1b0      	cbz	r0, 800311c <_svfiprintf_r+0x110>
 80030ee:	9207      	str	r2, [sp, #28]
 80030f0:	e014      	b.n	800311c <_svfiprintf_r+0x110>
 80030f2:	eba0 0308 	sub.w	r3, r0, r8
 80030f6:	fa09 f303 	lsl.w	r3, r9, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	9304      	str	r3, [sp, #16]
 80030fe:	46a2      	mov	sl, r4
 8003100:	e7d2      	b.n	80030a8 <_svfiprintf_r+0x9c>
 8003102:	9b03      	ldr	r3, [sp, #12]
 8003104:	1d19      	adds	r1, r3, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	9103      	str	r1, [sp, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	bfbb      	ittet	lt
 800310e:	425b      	neglt	r3, r3
 8003110:	f042 0202 	orrlt.w	r2, r2, #2
 8003114:	9307      	strge	r3, [sp, #28]
 8003116:	9307      	strlt	r3, [sp, #28]
 8003118:	bfb8      	it	lt
 800311a:	9204      	strlt	r2, [sp, #16]
 800311c:	7823      	ldrb	r3, [r4, #0]
 800311e:	2b2e      	cmp	r3, #46	; 0x2e
 8003120:	d10c      	bne.n	800313c <_svfiprintf_r+0x130>
 8003122:	7863      	ldrb	r3, [r4, #1]
 8003124:	2b2a      	cmp	r3, #42	; 0x2a
 8003126:	d135      	bne.n	8003194 <_svfiprintf_r+0x188>
 8003128:	9b03      	ldr	r3, [sp, #12]
 800312a:	1d1a      	adds	r2, r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	9203      	str	r2, [sp, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	bfb8      	it	lt
 8003134:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003138:	3402      	adds	r4, #2
 800313a:	9305      	str	r3, [sp, #20]
 800313c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003208 <_svfiprintf_r+0x1fc>
 8003140:	7821      	ldrb	r1, [r4, #0]
 8003142:	2203      	movs	r2, #3
 8003144:	4650      	mov	r0, sl
 8003146:	f7fd f843 	bl	80001d0 <memchr>
 800314a:	b140      	cbz	r0, 800315e <_svfiprintf_r+0x152>
 800314c:	2340      	movs	r3, #64	; 0x40
 800314e:	eba0 000a 	sub.w	r0, r0, sl
 8003152:	fa03 f000 	lsl.w	r0, r3, r0
 8003156:	9b04      	ldr	r3, [sp, #16]
 8003158:	4303      	orrs	r3, r0
 800315a:	3401      	adds	r4, #1
 800315c:	9304      	str	r3, [sp, #16]
 800315e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003162:	4826      	ldr	r0, [pc, #152]	; (80031fc <_svfiprintf_r+0x1f0>)
 8003164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003168:	2206      	movs	r2, #6
 800316a:	f7fd f831 	bl	80001d0 <memchr>
 800316e:	2800      	cmp	r0, #0
 8003170:	d038      	beq.n	80031e4 <_svfiprintf_r+0x1d8>
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <_svfiprintf_r+0x1f4>)
 8003174:	bb1b      	cbnz	r3, 80031be <_svfiprintf_r+0x1b2>
 8003176:	9b03      	ldr	r3, [sp, #12]
 8003178:	3307      	adds	r3, #7
 800317a:	f023 0307 	bic.w	r3, r3, #7
 800317e:	3308      	adds	r3, #8
 8003180:	9303      	str	r3, [sp, #12]
 8003182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003184:	4433      	add	r3, r6
 8003186:	9309      	str	r3, [sp, #36]	; 0x24
 8003188:	e767      	b.n	800305a <_svfiprintf_r+0x4e>
 800318a:	fb0c 3202 	mla	r2, ip, r2, r3
 800318e:	460c      	mov	r4, r1
 8003190:	2001      	movs	r0, #1
 8003192:	e7a5      	b.n	80030e0 <_svfiprintf_r+0xd4>
 8003194:	2300      	movs	r3, #0
 8003196:	3401      	adds	r4, #1
 8003198:	9305      	str	r3, [sp, #20]
 800319a:	4619      	mov	r1, r3
 800319c:	f04f 0c0a 	mov.w	ip, #10
 80031a0:	4620      	mov	r0, r4
 80031a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031a6:	3a30      	subs	r2, #48	; 0x30
 80031a8:	2a09      	cmp	r2, #9
 80031aa:	d903      	bls.n	80031b4 <_svfiprintf_r+0x1a8>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0c5      	beq.n	800313c <_svfiprintf_r+0x130>
 80031b0:	9105      	str	r1, [sp, #20]
 80031b2:	e7c3      	b.n	800313c <_svfiprintf_r+0x130>
 80031b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80031b8:	4604      	mov	r4, r0
 80031ba:	2301      	movs	r3, #1
 80031bc:	e7f0      	b.n	80031a0 <_svfiprintf_r+0x194>
 80031be:	ab03      	add	r3, sp, #12
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	462a      	mov	r2, r5
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <_svfiprintf_r+0x1f8>)
 80031c6:	a904      	add	r1, sp, #16
 80031c8:	4638      	mov	r0, r7
 80031ca:	f3af 8000 	nop.w
 80031ce:	1c42      	adds	r2, r0, #1
 80031d0:	4606      	mov	r6, r0
 80031d2:	d1d6      	bne.n	8003182 <_svfiprintf_r+0x176>
 80031d4:	89ab      	ldrh	r3, [r5, #12]
 80031d6:	065b      	lsls	r3, r3, #25
 80031d8:	f53f af2c 	bmi.w	8003034 <_svfiprintf_r+0x28>
 80031dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031de:	b01d      	add	sp, #116	; 0x74
 80031e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e4:	ab03      	add	r3, sp, #12
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	462a      	mov	r2, r5
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <_svfiprintf_r+0x1f8>)
 80031ec:	a904      	add	r1, sp, #16
 80031ee:	4638      	mov	r0, r7
 80031f0:	f000 f87a 	bl	80032e8 <_printf_i>
 80031f4:	e7eb      	b.n	80031ce <_svfiprintf_r+0x1c2>
 80031f6:	bf00      	nop
 80031f8:	080038c0 	.word	0x080038c0
 80031fc:	080038ca 	.word	0x080038ca
 8003200:	00000000 	.word	0x00000000
 8003204:	08002f55 	.word	0x08002f55
 8003208:	080038c6 	.word	0x080038c6

0800320c <_printf_common>:
 800320c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	4616      	mov	r6, r2
 8003212:	4699      	mov	r9, r3
 8003214:	688a      	ldr	r2, [r1, #8]
 8003216:	690b      	ldr	r3, [r1, #16]
 8003218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800321c:	4293      	cmp	r3, r2
 800321e:	bfb8      	it	lt
 8003220:	4613      	movlt	r3, r2
 8003222:	6033      	str	r3, [r6, #0]
 8003224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003228:	4607      	mov	r7, r0
 800322a:	460c      	mov	r4, r1
 800322c:	b10a      	cbz	r2, 8003232 <_printf_common+0x26>
 800322e:	3301      	adds	r3, #1
 8003230:	6033      	str	r3, [r6, #0]
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	0699      	lsls	r1, r3, #26
 8003236:	bf42      	ittt	mi
 8003238:	6833      	ldrmi	r3, [r6, #0]
 800323a:	3302      	addmi	r3, #2
 800323c:	6033      	strmi	r3, [r6, #0]
 800323e:	6825      	ldr	r5, [r4, #0]
 8003240:	f015 0506 	ands.w	r5, r5, #6
 8003244:	d106      	bne.n	8003254 <_printf_common+0x48>
 8003246:	f104 0a19 	add.w	sl, r4, #25
 800324a:	68e3      	ldr	r3, [r4, #12]
 800324c:	6832      	ldr	r2, [r6, #0]
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	42ab      	cmp	r3, r5
 8003252:	dc26      	bgt.n	80032a2 <_printf_common+0x96>
 8003254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003258:	1e13      	subs	r3, r2, #0
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	bf18      	it	ne
 800325e:	2301      	movne	r3, #1
 8003260:	0692      	lsls	r2, r2, #26
 8003262:	d42b      	bmi.n	80032bc <_printf_common+0xb0>
 8003264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003268:	4649      	mov	r1, r9
 800326a:	4638      	mov	r0, r7
 800326c:	47c0      	blx	r8
 800326e:	3001      	adds	r0, #1
 8003270:	d01e      	beq.n	80032b0 <_printf_common+0xa4>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	68e5      	ldr	r5, [r4, #12]
 8003276:	6832      	ldr	r2, [r6, #0]
 8003278:	f003 0306 	and.w	r3, r3, #6
 800327c:	2b04      	cmp	r3, #4
 800327e:	bf08      	it	eq
 8003280:	1aad      	subeq	r5, r5, r2
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	6922      	ldr	r2, [r4, #16]
 8003286:	bf0c      	ite	eq
 8003288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800328c:	2500      	movne	r5, #0
 800328e:	4293      	cmp	r3, r2
 8003290:	bfc4      	itt	gt
 8003292:	1a9b      	subgt	r3, r3, r2
 8003294:	18ed      	addgt	r5, r5, r3
 8003296:	2600      	movs	r6, #0
 8003298:	341a      	adds	r4, #26
 800329a:	42b5      	cmp	r5, r6
 800329c:	d11a      	bne.n	80032d4 <_printf_common+0xc8>
 800329e:	2000      	movs	r0, #0
 80032a0:	e008      	b.n	80032b4 <_printf_common+0xa8>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4652      	mov	r2, sl
 80032a6:	4649      	mov	r1, r9
 80032a8:	4638      	mov	r0, r7
 80032aa:	47c0      	blx	r8
 80032ac:	3001      	adds	r0, #1
 80032ae:	d103      	bne.n	80032b8 <_printf_common+0xac>
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	3501      	adds	r5, #1
 80032ba:	e7c6      	b.n	800324a <_printf_common+0x3e>
 80032bc:	18e1      	adds	r1, r4, r3
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	2030      	movs	r0, #48	; 0x30
 80032c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032c6:	4422      	add	r2, r4
 80032c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032d0:	3302      	adds	r3, #2
 80032d2:	e7c7      	b.n	8003264 <_printf_common+0x58>
 80032d4:	2301      	movs	r3, #1
 80032d6:	4622      	mov	r2, r4
 80032d8:	4649      	mov	r1, r9
 80032da:	4638      	mov	r0, r7
 80032dc:	47c0      	blx	r8
 80032de:	3001      	adds	r0, #1
 80032e0:	d0e6      	beq.n	80032b0 <_printf_common+0xa4>
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7d9      	b.n	800329a <_printf_common+0x8e>
	...

080032e8 <_printf_i>:
 80032e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032ec:	7e0f      	ldrb	r7, [r1, #24]
 80032ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032f0:	2f78      	cmp	r7, #120	; 0x78
 80032f2:	4691      	mov	r9, r2
 80032f4:	4680      	mov	r8, r0
 80032f6:	460c      	mov	r4, r1
 80032f8:	469a      	mov	sl, r3
 80032fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032fe:	d807      	bhi.n	8003310 <_printf_i+0x28>
 8003300:	2f62      	cmp	r7, #98	; 0x62
 8003302:	d80a      	bhi.n	800331a <_printf_i+0x32>
 8003304:	2f00      	cmp	r7, #0
 8003306:	f000 80d8 	beq.w	80034ba <_printf_i+0x1d2>
 800330a:	2f58      	cmp	r7, #88	; 0x58
 800330c:	f000 80a3 	beq.w	8003456 <_printf_i+0x16e>
 8003310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003318:	e03a      	b.n	8003390 <_printf_i+0xa8>
 800331a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800331e:	2b15      	cmp	r3, #21
 8003320:	d8f6      	bhi.n	8003310 <_printf_i+0x28>
 8003322:	a101      	add	r1, pc, #4	; (adr r1, 8003328 <_printf_i+0x40>)
 8003324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003328:	08003381 	.word	0x08003381
 800332c:	08003395 	.word	0x08003395
 8003330:	08003311 	.word	0x08003311
 8003334:	08003311 	.word	0x08003311
 8003338:	08003311 	.word	0x08003311
 800333c:	08003311 	.word	0x08003311
 8003340:	08003395 	.word	0x08003395
 8003344:	08003311 	.word	0x08003311
 8003348:	08003311 	.word	0x08003311
 800334c:	08003311 	.word	0x08003311
 8003350:	08003311 	.word	0x08003311
 8003354:	080034a1 	.word	0x080034a1
 8003358:	080033c5 	.word	0x080033c5
 800335c:	08003483 	.word	0x08003483
 8003360:	08003311 	.word	0x08003311
 8003364:	08003311 	.word	0x08003311
 8003368:	080034c3 	.word	0x080034c3
 800336c:	08003311 	.word	0x08003311
 8003370:	080033c5 	.word	0x080033c5
 8003374:	08003311 	.word	0x08003311
 8003378:	08003311 	.word	0x08003311
 800337c:	0800348b 	.word	0x0800348b
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	1d1a      	adds	r2, r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	602a      	str	r2, [r5, #0]
 8003388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800338c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003390:	2301      	movs	r3, #1
 8003392:	e0a3      	b.n	80034dc <_printf_i+0x1f4>
 8003394:	6820      	ldr	r0, [r4, #0]
 8003396:	6829      	ldr	r1, [r5, #0]
 8003398:	0606      	lsls	r6, r0, #24
 800339a:	f101 0304 	add.w	r3, r1, #4
 800339e:	d50a      	bpl.n	80033b6 <_printf_i+0xce>
 80033a0:	680e      	ldr	r6, [r1, #0]
 80033a2:	602b      	str	r3, [r5, #0]
 80033a4:	2e00      	cmp	r6, #0
 80033a6:	da03      	bge.n	80033b0 <_printf_i+0xc8>
 80033a8:	232d      	movs	r3, #45	; 0x2d
 80033aa:	4276      	negs	r6, r6
 80033ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b0:	485e      	ldr	r0, [pc, #376]	; (800352c <_printf_i+0x244>)
 80033b2:	230a      	movs	r3, #10
 80033b4:	e019      	b.n	80033ea <_printf_i+0x102>
 80033b6:	680e      	ldr	r6, [r1, #0]
 80033b8:	602b      	str	r3, [r5, #0]
 80033ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033be:	bf18      	it	ne
 80033c0:	b236      	sxthne	r6, r6
 80033c2:	e7ef      	b.n	80033a4 <_printf_i+0xbc>
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	6820      	ldr	r0, [r4, #0]
 80033c8:	1d19      	adds	r1, r3, #4
 80033ca:	6029      	str	r1, [r5, #0]
 80033cc:	0601      	lsls	r1, r0, #24
 80033ce:	d501      	bpl.n	80033d4 <_printf_i+0xec>
 80033d0:	681e      	ldr	r6, [r3, #0]
 80033d2:	e002      	b.n	80033da <_printf_i+0xf2>
 80033d4:	0646      	lsls	r6, r0, #25
 80033d6:	d5fb      	bpl.n	80033d0 <_printf_i+0xe8>
 80033d8:	881e      	ldrh	r6, [r3, #0]
 80033da:	4854      	ldr	r0, [pc, #336]	; (800352c <_printf_i+0x244>)
 80033dc:	2f6f      	cmp	r7, #111	; 0x6f
 80033de:	bf0c      	ite	eq
 80033e0:	2308      	moveq	r3, #8
 80033e2:	230a      	movne	r3, #10
 80033e4:	2100      	movs	r1, #0
 80033e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ea:	6865      	ldr	r5, [r4, #4]
 80033ec:	60a5      	str	r5, [r4, #8]
 80033ee:	2d00      	cmp	r5, #0
 80033f0:	bfa2      	ittt	ge
 80033f2:	6821      	ldrge	r1, [r4, #0]
 80033f4:	f021 0104 	bicge.w	r1, r1, #4
 80033f8:	6021      	strge	r1, [r4, #0]
 80033fa:	b90e      	cbnz	r6, 8003400 <_printf_i+0x118>
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	d04d      	beq.n	800349c <_printf_i+0x1b4>
 8003400:	4615      	mov	r5, r2
 8003402:	fbb6 f1f3 	udiv	r1, r6, r3
 8003406:	fb03 6711 	mls	r7, r3, r1, r6
 800340a:	5dc7      	ldrb	r7, [r0, r7]
 800340c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003410:	4637      	mov	r7, r6
 8003412:	42bb      	cmp	r3, r7
 8003414:	460e      	mov	r6, r1
 8003416:	d9f4      	bls.n	8003402 <_printf_i+0x11a>
 8003418:	2b08      	cmp	r3, #8
 800341a:	d10b      	bne.n	8003434 <_printf_i+0x14c>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	07de      	lsls	r6, r3, #31
 8003420:	d508      	bpl.n	8003434 <_printf_i+0x14c>
 8003422:	6923      	ldr	r3, [r4, #16]
 8003424:	6861      	ldr	r1, [r4, #4]
 8003426:	4299      	cmp	r1, r3
 8003428:	bfde      	ittt	le
 800342a:	2330      	movle	r3, #48	; 0x30
 800342c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003430:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003434:	1b52      	subs	r2, r2, r5
 8003436:	6122      	str	r2, [r4, #16]
 8003438:	f8cd a000 	str.w	sl, [sp]
 800343c:	464b      	mov	r3, r9
 800343e:	aa03      	add	r2, sp, #12
 8003440:	4621      	mov	r1, r4
 8003442:	4640      	mov	r0, r8
 8003444:	f7ff fee2 	bl	800320c <_printf_common>
 8003448:	3001      	adds	r0, #1
 800344a:	d14c      	bne.n	80034e6 <_printf_i+0x1fe>
 800344c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003450:	b004      	add	sp, #16
 8003452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003456:	4835      	ldr	r0, [pc, #212]	; (800352c <_printf_i+0x244>)
 8003458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800345c:	6829      	ldr	r1, [r5, #0]
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	f851 6b04 	ldr.w	r6, [r1], #4
 8003464:	6029      	str	r1, [r5, #0]
 8003466:	061d      	lsls	r5, r3, #24
 8003468:	d514      	bpl.n	8003494 <_printf_i+0x1ac>
 800346a:	07df      	lsls	r7, r3, #31
 800346c:	bf44      	itt	mi
 800346e:	f043 0320 	orrmi.w	r3, r3, #32
 8003472:	6023      	strmi	r3, [r4, #0]
 8003474:	b91e      	cbnz	r6, 800347e <_printf_i+0x196>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	f023 0320 	bic.w	r3, r3, #32
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	2310      	movs	r3, #16
 8003480:	e7b0      	b.n	80033e4 <_printf_i+0xfc>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	2378      	movs	r3, #120	; 0x78
 800348c:	4828      	ldr	r0, [pc, #160]	; (8003530 <_printf_i+0x248>)
 800348e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003492:	e7e3      	b.n	800345c <_printf_i+0x174>
 8003494:	0659      	lsls	r1, r3, #25
 8003496:	bf48      	it	mi
 8003498:	b2b6      	uxthmi	r6, r6
 800349a:	e7e6      	b.n	800346a <_printf_i+0x182>
 800349c:	4615      	mov	r5, r2
 800349e:	e7bb      	b.n	8003418 <_printf_i+0x130>
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	6826      	ldr	r6, [r4, #0]
 80034a4:	6961      	ldr	r1, [r4, #20]
 80034a6:	1d18      	adds	r0, r3, #4
 80034a8:	6028      	str	r0, [r5, #0]
 80034aa:	0635      	lsls	r5, r6, #24
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	d501      	bpl.n	80034b4 <_printf_i+0x1cc>
 80034b0:	6019      	str	r1, [r3, #0]
 80034b2:	e002      	b.n	80034ba <_printf_i+0x1d2>
 80034b4:	0670      	lsls	r0, r6, #25
 80034b6:	d5fb      	bpl.n	80034b0 <_printf_i+0x1c8>
 80034b8:	8019      	strh	r1, [r3, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	6123      	str	r3, [r4, #16]
 80034be:	4615      	mov	r5, r2
 80034c0:	e7ba      	b.n	8003438 <_printf_i+0x150>
 80034c2:	682b      	ldr	r3, [r5, #0]
 80034c4:	1d1a      	adds	r2, r3, #4
 80034c6:	602a      	str	r2, [r5, #0]
 80034c8:	681d      	ldr	r5, [r3, #0]
 80034ca:	6862      	ldr	r2, [r4, #4]
 80034cc:	2100      	movs	r1, #0
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7fc fe7e 	bl	80001d0 <memchr>
 80034d4:	b108      	cbz	r0, 80034da <_printf_i+0x1f2>
 80034d6:	1b40      	subs	r0, r0, r5
 80034d8:	6060      	str	r0, [r4, #4]
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	6123      	str	r3, [r4, #16]
 80034de:	2300      	movs	r3, #0
 80034e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e4:	e7a8      	b.n	8003438 <_printf_i+0x150>
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	462a      	mov	r2, r5
 80034ea:	4649      	mov	r1, r9
 80034ec:	4640      	mov	r0, r8
 80034ee:	47d0      	blx	sl
 80034f0:	3001      	adds	r0, #1
 80034f2:	d0ab      	beq.n	800344c <_printf_i+0x164>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	079b      	lsls	r3, r3, #30
 80034f8:	d413      	bmi.n	8003522 <_printf_i+0x23a>
 80034fa:	68e0      	ldr	r0, [r4, #12]
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	4298      	cmp	r0, r3
 8003500:	bfb8      	it	lt
 8003502:	4618      	movlt	r0, r3
 8003504:	e7a4      	b.n	8003450 <_printf_i+0x168>
 8003506:	2301      	movs	r3, #1
 8003508:	4632      	mov	r2, r6
 800350a:	4649      	mov	r1, r9
 800350c:	4640      	mov	r0, r8
 800350e:	47d0      	blx	sl
 8003510:	3001      	adds	r0, #1
 8003512:	d09b      	beq.n	800344c <_printf_i+0x164>
 8003514:	3501      	adds	r5, #1
 8003516:	68e3      	ldr	r3, [r4, #12]
 8003518:	9903      	ldr	r1, [sp, #12]
 800351a:	1a5b      	subs	r3, r3, r1
 800351c:	42ab      	cmp	r3, r5
 800351e:	dcf2      	bgt.n	8003506 <_printf_i+0x21e>
 8003520:	e7eb      	b.n	80034fa <_printf_i+0x212>
 8003522:	2500      	movs	r5, #0
 8003524:	f104 0619 	add.w	r6, r4, #25
 8003528:	e7f5      	b.n	8003516 <_printf_i+0x22e>
 800352a:	bf00      	nop
 800352c:	080038d1 	.word	0x080038d1
 8003530:	080038e2 	.word	0x080038e2

08003534 <memcpy>:
 8003534:	440a      	add	r2, r1
 8003536:	4291      	cmp	r1, r2
 8003538:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800353c:	d100      	bne.n	8003540 <memcpy+0xc>
 800353e:	4770      	bx	lr
 8003540:	b510      	push	{r4, lr}
 8003542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003546:	f803 4f01 	strb.w	r4, [r3, #1]!
 800354a:	4291      	cmp	r1, r2
 800354c:	d1f9      	bne.n	8003542 <memcpy+0xe>
 800354e:	bd10      	pop	{r4, pc}

08003550 <memmove>:
 8003550:	4288      	cmp	r0, r1
 8003552:	b510      	push	{r4, lr}
 8003554:	eb01 0402 	add.w	r4, r1, r2
 8003558:	d902      	bls.n	8003560 <memmove+0x10>
 800355a:	4284      	cmp	r4, r0
 800355c:	4623      	mov	r3, r4
 800355e:	d807      	bhi.n	8003570 <memmove+0x20>
 8003560:	1e43      	subs	r3, r0, #1
 8003562:	42a1      	cmp	r1, r4
 8003564:	d008      	beq.n	8003578 <memmove+0x28>
 8003566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800356a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800356e:	e7f8      	b.n	8003562 <memmove+0x12>
 8003570:	4402      	add	r2, r0
 8003572:	4601      	mov	r1, r0
 8003574:	428a      	cmp	r2, r1
 8003576:	d100      	bne.n	800357a <memmove+0x2a>
 8003578:	bd10      	pop	{r4, pc}
 800357a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800357e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003582:	e7f7      	b.n	8003574 <memmove+0x24>

08003584 <_free_r>:
 8003584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003586:	2900      	cmp	r1, #0
 8003588:	d044      	beq.n	8003614 <_free_r+0x90>
 800358a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358e:	9001      	str	r0, [sp, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f1a1 0404 	sub.w	r4, r1, #4
 8003596:	bfb8      	it	lt
 8003598:	18e4      	addlt	r4, r4, r3
 800359a:	f000 f913 	bl	80037c4 <__malloc_lock>
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <_free_r+0x94>)
 80035a0:	9801      	ldr	r0, [sp, #4]
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	b933      	cbnz	r3, 80035b4 <_free_r+0x30>
 80035a6:	6063      	str	r3, [r4, #4]
 80035a8:	6014      	str	r4, [r2, #0]
 80035aa:	b003      	add	sp, #12
 80035ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035b0:	f000 b90e 	b.w	80037d0 <__malloc_unlock>
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	d908      	bls.n	80035ca <_free_r+0x46>
 80035b8:	6825      	ldr	r5, [r4, #0]
 80035ba:	1961      	adds	r1, r4, r5
 80035bc:	428b      	cmp	r3, r1
 80035be:	bf01      	itttt	eq
 80035c0:	6819      	ldreq	r1, [r3, #0]
 80035c2:	685b      	ldreq	r3, [r3, #4]
 80035c4:	1949      	addeq	r1, r1, r5
 80035c6:	6021      	streq	r1, [r4, #0]
 80035c8:	e7ed      	b.n	80035a6 <_free_r+0x22>
 80035ca:	461a      	mov	r2, r3
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	b10b      	cbz	r3, 80035d4 <_free_r+0x50>
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	d9fa      	bls.n	80035ca <_free_r+0x46>
 80035d4:	6811      	ldr	r1, [r2, #0]
 80035d6:	1855      	adds	r5, r2, r1
 80035d8:	42a5      	cmp	r5, r4
 80035da:	d10b      	bne.n	80035f4 <_free_r+0x70>
 80035dc:	6824      	ldr	r4, [r4, #0]
 80035de:	4421      	add	r1, r4
 80035e0:	1854      	adds	r4, r2, r1
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	6011      	str	r1, [r2, #0]
 80035e6:	d1e0      	bne.n	80035aa <_free_r+0x26>
 80035e8:	681c      	ldr	r4, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	6053      	str	r3, [r2, #4]
 80035ee:	4421      	add	r1, r4
 80035f0:	6011      	str	r1, [r2, #0]
 80035f2:	e7da      	b.n	80035aa <_free_r+0x26>
 80035f4:	d902      	bls.n	80035fc <_free_r+0x78>
 80035f6:	230c      	movs	r3, #12
 80035f8:	6003      	str	r3, [r0, #0]
 80035fa:	e7d6      	b.n	80035aa <_free_r+0x26>
 80035fc:	6825      	ldr	r5, [r4, #0]
 80035fe:	1961      	adds	r1, r4, r5
 8003600:	428b      	cmp	r3, r1
 8003602:	bf04      	itt	eq
 8003604:	6819      	ldreq	r1, [r3, #0]
 8003606:	685b      	ldreq	r3, [r3, #4]
 8003608:	6063      	str	r3, [r4, #4]
 800360a:	bf04      	itt	eq
 800360c:	1949      	addeq	r1, r1, r5
 800360e:	6021      	streq	r1, [r4, #0]
 8003610:	6054      	str	r4, [r2, #4]
 8003612:	e7ca      	b.n	80035aa <_free_r+0x26>
 8003614:	b003      	add	sp, #12
 8003616:	bd30      	pop	{r4, r5, pc}
 8003618:	2000011c 	.word	0x2000011c

0800361c <sbrk_aligned>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4e0e      	ldr	r6, [pc, #56]	; (8003658 <sbrk_aligned+0x3c>)
 8003620:	460c      	mov	r4, r1
 8003622:	6831      	ldr	r1, [r6, #0]
 8003624:	4605      	mov	r5, r0
 8003626:	b911      	cbnz	r1, 800362e <sbrk_aligned+0x12>
 8003628:	f000 f8bc 	bl	80037a4 <_sbrk_r>
 800362c:	6030      	str	r0, [r6, #0]
 800362e:	4621      	mov	r1, r4
 8003630:	4628      	mov	r0, r5
 8003632:	f000 f8b7 	bl	80037a4 <_sbrk_r>
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	d00a      	beq.n	8003650 <sbrk_aligned+0x34>
 800363a:	1cc4      	adds	r4, r0, #3
 800363c:	f024 0403 	bic.w	r4, r4, #3
 8003640:	42a0      	cmp	r0, r4
 8003642:	d007      	beq.n	8003654 <sbrk_aligned+0x38>
 8003644:	1a21      	subs	r1, r4, r0
 8003646:	4628      	mov	r0, r5
 8003648:	f000 f8ac 	bl	80037a4 <_sbrk_r>
 800364c:	3001      	adds	r0, #1
 800364e:	d101      	bne.n	8003654 <sbrk_aligned+0x38>
 8003650:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003654:	4620      	mov	r0, r4
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	20000120 	.word	0x20000120

0800365c <_malloc_r>:
 800365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003660:	1ccd      	adds	r5, r1, #3
 8003662:	f025 0503 	bic.w	r5, r5, #3
 8003666:	3508      	adds	r5, #8
 8003668:	2d0c      	cmp	r5, #12
 800366a:	bf38      	it	cc
 800366c:	250c      	movcc	r5, #12
 800366e:	2d00      	cmp	r5, #0
 8003670:	4607      	mov	r7, r0
 8003672:	db01      	blt.n	8003678 <_malloc_r+0x1c>
 8003674:	42a9      	cmp	r1, r5
 8003676:	d905      	bls.n	8003684 <_malloc_r+0x28>
 8003678:	230c      	movs	r3, #12
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	2600      	movs	r6, #0
 800367e:	4630      	mov	r0, r6
 8003680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003684:	4e2e      	ldr	r6, [pc, #184]	; (8003740 <_malloc_r+0xe4>)
 8003686:	f000 f89d 	bl	80037c4 <__malloc_lock>
 800368a:	6833      	ldr	r3, [r6, #0]
 800368c:	461c      	mov	r4, r3
 800368e:	bb34      	cbnz	r4, 80036de <_malloc_r+0x82>
 8003690:	4629      	mov	r1, r5
 8003692:	4638      	mov	r0, r7
 8003694:	f7ff ffc2 	bl	800361c <sbrk_aligned>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	4604      	mov	r4, r0
 800369c:	d14d      	bne.n	800373a <_malloc_r+0xde>
 800369e:	6834      	ldr	r4, [r6, #0]
 80036a0:	4626      	mov	r6, r4
 80036a2:	2e00      	cmp	r6, #0
 80036a4:	d140      	bne.n	8003728 <_malloc_r+0xcc>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	4631      	mov	r1, r6
 80036aa:	4638      	mov	r0, r7
 80036ac:	eb04 0803 	add.w	r8, r4, r3
 80036b0:	f000 f878 	bl	80037a4 <_sbrk_r>
 80036b4:	4580      	cmp	r8, r0
 80036b6:	d13a      	bne.n	800372e <_malloc_r+0xd2>
 80036b8:	6821      	ldr	r1, [r4, #0]
 80036ba:	3503      	adds	r5, #3
 80036bc:	1a6d      	subs	r5, r5, r1
 80036be:	f025 0503 	bic.w	r5, r5, #3
 80036c2:	3508      	adds	r5, #8
 80036c4:	2d0c      	cmp	r5, #12
 80036c6:	bf38      	it	cc
 80036c8:	250c      	movcc	r5, #12
 80036ca:	4629      	mov	r1, r5
 80036cc:	4638      	mov	r0, r7
 80036ce:	f7ff ffa5 	bl	800361c <sbrk_aligned>
 80036d2:	3001      	adds	r0, #1
 80036d4:	d02b      	beq.n	800372e <_malloc_r+0xd2>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	442b      	add	r3, r5
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	e00e      	b.n	80036fc <_malloc_r+0xa0>
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	1b52      	subs	r2, r2, r5
 80036e2:	d41e      	bmi.n	8003722 <_malloc_r+0xc6>
 80036e4:	2a0b      	cmp	r2, #11
 80036e6:	d916      	bls.n	8003716 <_malloc_r+0xba>
 80036e8:	1961      	adds	r1, r4, r5
 80036ea:	42a3      	cmp	r3, r4
 80036ec:	6025      	str	r5, [r4, #0]
 80036ee:	bf18      	it	ne
 80036f0:	6059      	strne	r1, [r3, #4]
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	bf08      	it	eq
 80036f6:	6031      	streq	r1, [r6, #0]
 80036f8:	5162      	str	r2, [r4, r5]
 80036fa:	604b      	str	r3, [r1, #4]
 80036fc:	4638      	mov	r0, r7
 80036fe:	f104 060b 	add.w	r6, r4, #11
 8003702:	f000 f865 	bl	80037d0 <__malloc_unlock>
 8003706:	f026 0607 	bic.w	r6, r6, #7
 800370a:	1d23      	adds	r3, r4, #4
 800370c:	1af2      	subs	r2, r6, r3
 800370e:	d0b6      	beq.n	800367e <_malloc_r+0x22>
 8003710:	1b9b      	subs	r3, r3, r6
 8003712:	50a3      	str	r3, [r4, r2]
 8003714:	e7b3      	b.n	800367e <_malloc_r+0x22>
 8003716:	6862      	ldr	r2, [r4, #4]
 8003718:	42a3      	cmp	r3, r4
 800371a:	bf0c      	ite	eq
 800371c:	6032      	streq	r2, [r6, #0]
 800371e:	605a      	strne	r2, [r3, #4]
 8003720:	e7ec      	b.n	80036fc <_malloc_r+0xa0>
 8003722:	4623      	mov	r3, r4
 8003724:	6864      	ldr	r4, [r4, #4]
 8003726:	e7b2      	b.n	800368e <_malloc_r+0x32>
 8003728:	4634      	mov	r4, r6
 800372a:	6876      	ldr	r6, [r6, #4]
 800372c:	e7b9      	b.n	80036a2 <_malloc_r+0x46>
 800372e:	230c      	movs	r3, #12
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	4638      	mov	r0, r7
 8003734:	f000 f84c 	bl	80037d0 <__malloc_unlock>
 8003738:	e7a1      	b.n	800367e <_malloc_r+0x22>
 800373a:	6025      	str	r5, [r4, #0]
 800373c:	e7de      	b.n	80036fc <_malloc_r+0xa0>
 800373e:	bf00      	nop
 8003740:	2000011c 	.word	0x2000011c

08003744 <_realloc_r>:
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	4680      	mov	r8, r0
 800374a:	4614      	mov	r4, r2
 800374c:	460e      	mov	r6, r1
 800374e:	b921      	cbnz	r1, 800375a <_realloc_r+0x16>
 8003750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003754:	4611      	mov	r1, r2
 8003756:	f7ff bf81 	b.w	800365c <_malloc_r>
 800375a:	b92a      	cbnz	r2, 8003768 <_realloc_r+0x24>
 800375c:	f7ff ff12 	bl	8003584 <_free_r>
 8003760:	4625      	mov	r5, r4
 8003762:	4628      	mov	r0, r5
 8003764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003768:	f000 f838 	bl	80037dc <_malloc_usable_size_r>
 800376c:	4284      	cmp	r4, r0
 800376e:	4607      	mov	r7, r0
 8003770:	d802      	bhi.n	8003778 <_realloc_r+0x34>
 8003772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003776:	d812      	bhi.n	800379e <_realloc_r+0x5a>
 8003778:	4621      	mov	r1, r4
 800377a:	4640      	mov	r0, r8
 800377c:	f7ff ff6e 	bl	800365c <_malloc_r>
 8003780:	4605      	mov	r5, r0
 8003782:	2800      	cmp	r0, #0
 8003784:	d0ed      	beq.n	8003762 <_realloc_r+0x1e>
 8003786:	42bc      	cmp	r4, r7
 8003788:	4622      	mov	r2, r4
 800378a:	4631      	mov	r1, r6
 800378c:	bf28      	it	cs
 800378e:	463a      	movcs	r2, r7
 8003790:	f7ff fed0 	bl	8003534 <memcpy>
 8003794:	4631      	mov	r1, r6
 8003796:	4640      	mov	r0, r8
 8003798:	f7ff fef4 	bl	8003584 <_free_r>
 800379c:	e7e1      	b.n	8003762 <_realloc_r+0x1e>
 800379e:	4635      	mov	r5, r6
 80037a0:	e7df      	b.n	8003762 <_realloc_r+0x1e>
	...

080037a4 <_sbrk_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4d06      	ldr	r5, [pc, #24]	; (80037c0 <_sbrk_r+0x1c>)
 80037a8:	2300      	movs	r3, #0
 80037aa:	4604      	mov	r4, r0
 80037ac:	4608      	mov	r0, r1
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	f7fd fb06 	bl	8000dc0 <_sbrk>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d102      	bne.n	80037be <_sbrk_r+0x1a>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b103      	cbz	r3, 80037be <_sbrk_r+0x1a>
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	bd38      	pop	{r3, r4, r5, pc}
 80037c0:	20000124 	.word	0x20000124

080037c4 <__malloc_lock>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__malloc_lock+0x8>)
 80037c6:	f000 b811 	b.w	80037ec <__retarget_lock_acquire_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000128 	.word	0x20000128

080037d0 <__malloc_unlock>:
 80037d0:	4801      	ldr	r0, [pc, #4]	; (80037d8 <__malloc_unlock+0x8>)
 80037d2:	f000 b80c 	b.w	80037ee <__retarget_lock_release_recursive>
 80037d6:	bf00      	nop
 80037d8:	20000128 	.word	0x20000128

080037dc <_malloc_usable_size_r>:
 80037dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e0:	1f18      	subs	r0, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfbc      	itt	lt
 80037e6:	580b      	ldrlt	r3, [r1, r0]
 80037e8:	18c0      	addlt	r0, r0, r3
 80037ea:	4770      	bx	lr

080037ec <__retarget_lock_acquire_recursive>:
 80037ec:	4770      	bx	lr

080037ee <__retarget_lock_release_recursive>:
 80037ee:	4770      	bx	lr

080037f0 <_init>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr

080037fc <_fini>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr
