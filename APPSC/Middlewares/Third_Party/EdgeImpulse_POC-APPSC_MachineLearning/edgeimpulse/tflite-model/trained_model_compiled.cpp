/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.12.2022 17:27:26

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0031709559261798859, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -81,34,-96,48,60,-66,41,66,53,-62,-33,53,-5,84,-35,-93,-50,-28,-59,-48,-104,30,-27,18,85,83,-124,4,-12,-70,-91,-8,-79,-39,75,29,-127,-87,-21,-122, 84,3,62,-63,-22,75,67,-104,20,-39,80,-29,-52,-61,-38,90,-36,-66,9,-34,-80,-63,54,-66,-29,-116,-110,-40,28,17,-59,71,93,-17,-62,-86,-55,-8,-75,-53, 5,-64,-26,45,76,17,60,11,-58,-78,-73,-34,-26,40,-29,14,-110,-103,-73,85,58,39,13,-106,8,56,-94,-79,-46,67,-106,-47,32,-22,-63,-41,70,39,67,-63, 
  /* [1][0][][] */ 127,118,79,73,58,16,86,35,60,88,39,23,70,44,5,33,-23,-3,26,-24,-64,2,-27,-54,41,67,23,-4,-27,35,-29,-53,-15,-44,-49,-54,-12,-24,-4,0, 94,125,80,95,7,47,101,35,100,89,44,63,-18,-15,-16,-35,-33,19,-23,-32,-16,10,33,11,50,52,-4,-49,-19,5,-38,19,10,-5,-46,14,-50,11,28,43, 46,91,73,109,43,-58,46,10,58,36,17,36,62,36,-18,25,-42,-57,-44,-89,-64,-74,-46,-12,-6,39,21,-62,19,-32,-64,-17,18,-5,-39,-24,5,-2,0,-34, 
  /* [2][0][][] */ -22,-106,-56,111,-127,-99,-86,100,-23,-35,-19,81,42,40,-59,-111,18,-21,-40,50,-51,-4,-13,37,-60,-58,-8,-110,-101,-36,-96,3,61,-93,-46,38,-31,-65,8,-34, -88,-82,-26,66,-33,104,-18,-74,-29,-47,87,-76,48,3,60,-41,83,-50,-96,23,-32,-31,-86,-19,-13,-7,-93,60,0,-33,-37,17,-1,-46,-11,-88,83,40,-48,-21, -109,-115,71,-25,54,-87,77,30,-61,-118,9,-54,30,57,-7,-69,-84,7,-57,-52,71,-58,-53,-13,-100,-20,68,14,-74,-111,-42,18,84,-21,-18,57,3,-98,74,-120, 
  /* [3][0][][] */ 56,127,51,100,66,0,37,65,32,34,27,31,33,48,52,-49,-9,-14,-36,-30,10,26,56,-22,40,39,8,-14,-6,27,10,-4,3,-14,-9,11,-11,40,9,-17, 58,74,93,53,41,40,70,51,44,68,-21,43,12,-18,-23,15,-39,18,-6,-49,-16,13,28,-45,-10,35,8,-12,19,19,26,-40,-48,13,-18,-8,-42,-53,29,-36, 71,43,87,27,-8,-45,100,84,47,2,11,66,53,17,17,-61,3,3,8,7,-28,-47,-43,-49,-23,20,-13,28,-19,5,-34,-62,-42,9,-5,6,-54,-29,22,21, 
  /* [4][0][][] */ -85,-64,-76,-15,41,-54,-2,-5,-120,-20,-2,12,-30,9,-12,-54,38,-42,-14,12,52,14,3,-12,31,3,0,-10,70,-23,5,-8,79,3,-23,-11,73,74,-15,43, -127,-71,-96,-88,23,-24,-125,-108,-64,-76,-15,-86,-58,-29,-51,-27,48,-43,-43,72,27,-8,-67,47,24,20,-49,39,16,8,60,60,-3,18,69,19,39,-40,33,-3, -98,-88,-13,-40,59,-20,-106,-81,-20,-37,12,-66,36,6,1,-33,-29,3,16,56,71,28,75,-35,55,-58,15,57,45,-33,-41,20,38,32,49,75,54,46,44,48, 
  /* [5][0][][] */ 125,103,103,101,64,19,40,35,94,-12,19,48,87,40,13,19,29,56,7,55,18,36,76,9,18,20,98,-2,6,40,54,33,-37,9,-12,53,13,-16,-19,-17, 64,60,33,127,16,34,93,103,16,89,11,-16,12,-15,10,-6,19,-16,72,-23,-36,-55,-19,-26,10,58,74,42,-17,69,43,55,18,33,30,37,-53,50,12,8, 57,70,60,29,16,-33,99,109,82,-14,38,89,57,83,26,37,40,-11,53,9,-5,-16,19,-15,55,102,73,14,51,55,-9,-34,-51,-45,36,-51,-33,-10,-14,38, 
  /* [6][0][][] */ -107,-99,-99,-91,-39,4,-1,-32,-115,2,-76,-23,-19,-47,13,-9,52,-24,-5,-15,14,24,12,68,-18,-99,-66,-4,53,-31,-40,-20,17,69,38,79,25,-14,-6,62, -81,-98,-62,-17,4,-4,-99,-127,-59,-68,-23,-32,-32,-5,-43,39,-20,8,-40,81,58,75,52,17,-59,-83,-55,-20,42,-1,33,2,-14,-13,27,52,26,63,21,43, -85,-14,-5,-27,-5,-25,0,-25,-39,5,-40,-45,-14,-12,-5,-21,-34,-49,18,64,77,41,3,0,-85,-109,23,20,58,7,22,8,26,66,87,78,58,18,63,44, 
  /* [7][0][][] */ -56,-87,-48,39,27,-93,-53,25,-43,30,-111,-49,11,84,-25,-7,-84,-5,55,-98,66,-33,76,78,77,48,-82,-112,68,62,-96,-63,27,-94,-53,-76,84,-75,26,14, -22,-28,-44,41,-121,-15,45,42,59,-35,-51,20,-89,-64,38,-125,6,-28,4,-114,-35,-56,77,-95,79,55,46,-52,64,79,20,1,17,44,-127,-113,-122,57,20,-94, -116,-116,-108,-59,34,-4,47,59,-104,-10,-126,-51,-45,30,-75,25,-26,-15,-68,-39,-10,68,-30,-54,-66,46,65,37,-118,34,-88,-53,-76,-32,-4,30,-118,-102,-23,60, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0018362727714702487, 0.0041269944049417973, 0.0019018382299691439, 0.0051328446716070175, 0.0036046779714524746, 0.0036890734918415546, 0.0038001828361302614, 0.0018743851687759161, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -5152, -8417, -5846, -6514, -45, -9742, 5080, -7475, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 5.8227401495969389e-06, 1.3086517355986871e-05, 6.0306451814540196e-06, 1.6276024325634353e-05, 1.1430274753365666e-05, 1.1697889021888841e-05, 1.2050212717440445e-05, 5.9435928960738238e-06, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -55,-56,-50,110,-11,-42,127,-26, 77,-51,-67,-60,-26,-56,50,-55, 44,-71,59,47,53,57,75,2, 
  /* [1][0][][] */ -33,127,-52,28,-16,-14,11,15, -47,12,-29,69,-52,34,-45,-16, 37,107,24,79,-1,-20,-76,4, 
  /* [2][0][][] */ -42,127,-40,19,18,84,-82,-65, 50,80,-7,113,-3,-15,-100,34, -21,17,-18,-7,-9,38,9,-2, 
  /* [3][0][][] */ -51,9,16,-20,-36,77,27,67, -31,-13,9,113,68,75,127,-14, 2,-50,31,63,-17,90,54,-26, 
  /* [4][0][][] */ 17,113,49,46,34,-24,-35,33, -68,76,21,48,-52,-45,-26,76, 65,37,61,127,-62,97,-110,71, 
  /* [5][0][][] */ 47,39,-79,110,82,127,59,74, -59,3,-70,90,59,114,-63,-72, -21,90,49,48,92,48,-62,46, 
  /* [6][0][][] */ 46,87,33,127,-2,35,-73,33, 16,61,29,-21,-26,76,-79,-52, -35,91,-8,-3,1,-55,-65,-25, 
  /* [7][0][][] */ -57,-29,69,-45,-14,127,85,41, 39,-47,-71,84,124,94,76,-95, -97,-52,-68,120,52,40,-66,84, 
  /* [8][0][][] */ -45,-107,49,-61,9,-14,72,52, -12,-70,-53,23,87,20,100,34, 3,-117,36,-93,45,-23,127,20, 
  /* [9][0][][] */ -28,-94,7,-68,79,75,-48,-23, -11,30,65,-107,57,35,127,-51, -63,-36,55,-8,44,-14,78,11, 
  /* [10][0][][] */ -3,-10,50,-7,-9,-53,-45,20, 102,38,3,44,45,7,82,-86, 4,9,-20,-127,-63,-71,90,-47, 
  /* [11][0][][] */ 12,-73,-10,64,-7,-13,64,5, -35,35,62,-33,-21,-37,-12,95, 37,14,-87,32,127,-48,98,9, 
  /* [12][0][][] */ 57,-45,-108,-61,104,82,93,-98, -27,-65,83,-57,110,-55,127,34, -8,16,-61,-100,45,76,66,54, 
  /* [13][0][][] */ -12,-18,-44,6,-59,-30,-30,-55, -49,-72,18,-54,96,12,-14,-56, -22,-88,-40,22,47,20,127,-32, 
  /* [14][0][][] */ 4,95,34,118,-93,80,-89,-69, 17,127,-65,48,12,-13,-63,-33, -32,106,49,-14,-25,45,-58,0, 
  /* [15][0][][] */ 74,30,-21,72,-94,-127,-67,-26, -16,22,-19,-105,123,95,97,15, 72,-51,33,-80,-10,61,-58,28, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0031916848383843899, 0.0049001113511621952, 0.0045089274644851685, 0.0034782441798597574, 0.0038703442551195621, 0.0030069516506046057, 0.0047515234909951687, 0.0026691725943237543, 0.0041670105420053005, 0.0036104181781411171, 0.0029565156437456608, 0.0034302449785172939, 0.0028728554025292397, 0.0043184738606214523, 0.0042208735831081867, 0.0027072036173194647, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { 104, -777, -808, -742, 1145, -33, -663, -327, 1562, 749, -1066, -656, 718, 792, -1009, 1394, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 7.666608871659264e-05, 0.00011770346463890746, 0.00010830700193764642, 8.3549406554084271e-05, 9.2967871751170605e-05, 7.222869317047298e-05, 0.0001141343018389307, 6.4115047280211002e-05, 0.0001000939664663747, 8.6724299762863666e-05, 7.1017188020050526e-05, 8.2396436482667923e-05, 6.9007619458716363e-05, 0.0001037321999319829, 0.00010138778452528641, 6.5028572862502187e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[3*400] = { 
  -15, -68, -80, -16, -24, -31, -28, -27, -37, -34, -35, -2, -20, 13, -16, -44, -64, -20, -62, -61, -49, -26, -26, -12, -25, -33, -23, -26, -52, -54, -56, -52, 3, 18, -29, -52, -60, -10, -61, -13, 8, -54, 15, -3, -16, -43, -52, 23, 6, -33, -29, -45, -61, -17, -27, -4, -49, -9, -37, -37, -38, -53, -14, -23, -12, 30, -26, -35, 35, -14, 0, -8, -58, -66, -9, -13, -31, -49, -42, -7, 17, -10, 25, -20, 42, -67, -43, -20, 8, -27, 44, 26, -3, 40, 14, -11, 3, 16, 25, 31, -17, -25, 1, 15, -29, -26, -30, 12, 15, 2, -13, 31, -23, -3, 17, -4, 68, 10, 39, 41, -6, 12, -2, -63, 10, 22, 24, 1, -78, 36, 22, 46, -7, 4, 34, 54, -18, -4, 2, -29, 25, -58, 42, 19, -26, 26, -26, 39, -21, -20, -18, 6, 0, 13, -5, 0, -18, -13, -8, 29, 34, 28, 22, -6, -4, 30, 30, 14, -5, 8, 9, 51, 32, 31, 43, 18, -12, 3, 10, 55, 63, 43, 38, 18, -11, 11, 19, -39, 44, -13, 24, 46, -51, 9, 55, 21, -69, 76, 56, 60, 18, 10, 15, -46, -32, -12, 15, 46, -26, -18, 37, 60, -47, 38, 49, 25, -4, 50, 27, -34, 16, -48, 42, -5, -8, -13, 42, 26, 9, 29, -22, 33, 8, -5, 23, 59, 45, 28, -4, 25, 25, -1, 52, 42, 56, 36, -4, 4, 0, 37, -14, -1, 25, 48, 6, 41, 9, 19, 34, 29, 35, 70, 27, 31, 39, 9, 50, -28, 49, 11, 48, 45, 25, 5, 25, 12, 38, 23, 14, 71, 8, 13, 11, -53, 42, -5, 33, 0, 17, -8, 20, 7, -58, 57, 1, 48, 3, 17, 1, 26, 14, -27, 52, -16, 33, 22, 36, 51, 31, 45, 35, 34, 0, 23, -5, -16, 25, 16, 19, 3, -33, 47, 5, 8, -13, 46, 22, -1, -2, 30, -1, -1, 32, -14, 23, 26, 10, -21, 9, 42, -15, 11, 34, 23, -9, 21, 22, 34, 32, 12, 16, 32, -11, 26, 40, 37, -37, 11, -2, 16, 43, 40, 32, 14, -5, 6, -8, 18, 44, 33, 6, 28, -54, 23, -2, 47, 37, 21, 39, -17, 25, 59, 33, 46, 26, 20, 34, 50, -20, 23, 52, 33, 44, 40, 5, 47, 9, -15, 1, 14, 
  -14, -75, 7, 4, -20, 8, -31, 25, 63, 25, -16, -26, 32, 89, -44, 23, -17, -45, -15, 31, -33, 0, -56, -7, 83, 42, -2, 27, 36, 24, 0, -15, 18, -23, -7, 31, -26, 26, -76, 34, 69, 32, 24, 13, 7, 36, -38, 6, 31, -28, -21, 26, 11, 6, -1, 2, 44, 14, 4, 5, 31, 1, 6, 51, 9, 29, 18, 1, -2, 31, 13, 24, 5, 24, 17, -16, 42, -29, -6, -1, 10, 13, 3, -6, 0, 21, 35, 6, -12, 13, -19, -1, 19, 2, 2, 13, 14, 0, -5, -15, 20, -9, 0, 21, 38, 24, -24, 19, 9, -4, -14, 26, -37, -17, -48, -10, -2, -13, -9, -31, -44, 8, -2, 49, -14, -57, -19, -9, 32, -41, -71, -25, 20, -27, -61, -34, 24, -33, 26, -14, 1, -38, -88, 9, -36, -10, -28, -20, 5, -17, 5, -37, 34, -14, -24, 25, -13, -19, -58, 14, -76, -16, -3, -23, -13, -67, 3, -35, 10, -23, -30, -51, -12, -67, 4, -32, -12, -42, -38, -71, -18, -28, -40, -41, -32, -26, -12, 56, -31, -8, -54, -16, 72, 1, -51, -29, 57, -60, -51, -16, 18, -36, 54, 61, 34, -4, -36, -5, 19, 0, -34, 19, 5, -21, 22, -8, 47, 2, 17, 18, -1, 35, 10, -14, 18, -14, 19, 19, 16, -4, -8, 43, 12, 14, -17, 1, 3, -21, 9, 11, -31, 9, -8, -35, -22, -2, -62, -6, 8, -1, 18, -13, -22, 16, -47, -8, 6, -20, -24, -28, -24, -26, -42, -27, 49, -13, 1, 90, -5, 28, -67, -49, -8, 6, -80, -38, 20, -69, 1, -59, 39, -35, 68, 26, 9, 38, -17, -9, 19, -27, 5, -17, 61, -13, 11, -45, 4, -33, 24, -21, -2, 1, -2, 18, -27, -9, -47, -23, 10, -28, -41, 19, 22, 24, -5, 8, -12, -9, 9, -1, -4, 1, -49, 21, -26, -11, -10, -38, 68, -32, 47, -23, 8, 32, -7, -36, 17, 21, 17, 18, 45, 15, -15, 19, 13, 8, 29, -16, 13, -31, -29, 15, 52, -21, -37, -38, 56, -9, 10, -45, 31, -30, 34, 30, -28, 19, -1, 27, 14, 7, -17, -26, 51, -18, -27, -49, -3, -28, -7, -39, -19, 18, -6, 18, -52, -40, -5, 2, -16, -33, 0, -41, 47, -10, 15, -7, -46, -5, 9, -33, 
  1, 77, 54, 28, 77, 26, 50, 14, -26, -8, 18, 12, -6, -105, 47, -5, -20, 127, 69, 17, 88, 20, 48, 13, -111, 11, -24, 3, 28, -29, 62, 59, -35, 52, 86, -4, 58, 23, 108, -8, -110, -15, -28, -28, -35, -48, 65, 21, -76, -5, 26, 11, -36, -12, 45, -2, -32, 27, 16, -51, -24, -12, 13, -26, 34, 8, 0, 11, 2, 5, -17, -20, -7, 12, 10, 6, -1, 25, -23, 29, -24, 27, -7, -17, -19, 5, 13, 44, 14, -18, 2, -3, 9, -38, 34, -19, -53, 2, 23, -4, 17, 34, 20, -7, -7, 3, 5, -13, 20, 21, -17, 3, -18, 24, -14, 2, -40, 14, -26, 24, -24, 4, -24, 21, 12, 40, 1, -35, -1, -13, 31, -21, 5, 50, -16, 27, -9, 40, 33, 30, 15, 38, 2, -10, -9, -15, 22, 6, 31, 33, 34, 74, 23, 23, 5, 16, 10, 34, 33, 4, -12, 19, 18, 7, -55, 61, 9, 6, 6, 14, 20, 23, 45, 18, 25, -2, 2, -43, -6, -3, -30, 0, -43, -18, -7, 6, -41, -54, -9, -24, -6, -54, -45, -16, -49, -53, -37, -38, 21, -24, -73, -15, -51, -33, -36, -55, 9, -52, -27, 9, -7, -74, -31, -62, -38, -57, -79, -100, -25, -53, -48, -43, -54, -30, -56, -22, -69, -52, -20, -68, 0, -26, -59, -85, -21, -2, -81, -74, -53, -42, -26, -12, -63, -29, -12, -35, 6, -86, -50, -51, -10, -51, -48, -85, 9, -19, -31, 15, 4, -4, -51, 1, 6, -16, -31, -33, -2, -29, -35, -59, -41, -17, -46, -4, 4, -8, -18, -30, -49, -54, -62, -33, -30, -45, -55, -61, -33, -41, -39, -14, -17, -68, 21, -70, -48, -66, -71, -77, -49, -14, -67, -50, -42, -24, -75, -11, -1, -1, -8, -42, 7, -50, -47, -23, 5, -73, -80, -75, -54, -14, -6, 17, -42, -82, -29, -66, -28, -57, -59, -59, -53, -63, -66, -58, -57, -52, -92, -28, -23, -70, -38, -48, -10, -58, -55, -16, -47, -33, -43, -54, 8, -35, -54, -11, -10, -4, -10, -5, 9, -91, -85, -80, -20, 2, -91, -102, -45, -56, -39, 15, -3, -43, -14, -48, -27, -42, -79, -54, 6, 15, -12, -67, -4, -61, 8, 13, -7, 6, -46, -39, -45, -54, -79, -46, 1, 14, -16, 8, -9, -15, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 3,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0036349615547806025, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[3] = { -878, 1671, -532, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const TfArray<1, float> quant11_scale = { 1, { 9.7688862297218293e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0031709559261798859, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.024020569398999214, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.024020569398999214, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.024020569398999214, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.024020569398999214, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.026874799281358719, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.026874799281358719, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.026874799281358719, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.026874799281358719, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.11257734894752502, } };
const TfArray<1, int> quant21_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
