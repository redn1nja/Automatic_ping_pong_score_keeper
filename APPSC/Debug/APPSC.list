
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800ed8c  0800ed8c  0001ed8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0dc  0800f0dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0dc  0800f0dc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0dc  0800f0dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0dc  0800f0dc  0001f0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0e0  0800f0e0  0001f0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00001324  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001504  20001504  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2a5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004467  00000000  00000000  0003c4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001780  00000000  00000000  00040920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001568  00000000  00000000  000420a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232aa  00000000  00000000  00043608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000249c9  00000000  00000000  000668b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c387c  00000000  00000000  0008b27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eaf7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006538  00000000  00000000  0014eb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed74 	.word	0x0800ed74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ed74 	.word	0x0800ed74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b094      	sub	sp, #80	; 0x50
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
 80002a2:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f00e f8ec 	bl	800e488 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b0:	4b40      	ldr	r3, [pc, #256]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002b8:	4b3e      	ldr	r3, [pc, #248]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002be:	4b3d      	ldr	r3, [pc, #244]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c4:	4b3b      	ldr	r3, [pc, #236]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ca:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d0:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002d8:	4b36      	ldr	r3, [pc, #216]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002de:	4b35      	ldr	r3, [pc, #212]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e4:	4b33      	ldr	r3, [pc, #204]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002ea:	4b32      	ldr	r3, [pc, #200]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f0:	4b30      	ldr	r3, [pc, #192]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002f8:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <MX_ADC1_Init+0x134>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002fe:	4b2d      	ldr	r3, [pc, #180]	; (80003b4 <MX_ADC1_Init+0x134>)
 8000300:	2200      	movs	r2, #0
 8000302:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000304:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <MX_ADC1_Init+0x134>)
 8000306:	2200      	movs	r2, #0
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030a:	482a      	ldr	r0, [pc, #168]	; (80003b4 <MX_ADC1_Init+0x134>)
 800030c:	f000 fcfa 	bl	8000d04 <HAL_ADC_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000316:	f000 fa43 	bl	80007a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800031a:	2300      	movs	r3, #0
 800031c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800031e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000322:	4619      	mov	r1, r3
 8000324:	4823      	ldr	r0, [pc, #140]	; (80003b4 <MX_ADC1_Init+0x134>)
 8000326:	f003 f82b 	bl	8003380 <HAL_ADCEx_MultiModeConfigChannel>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000330:	f000 fa36 	bl	80007a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000334:	2307      	movs	r3, #7
 8000336:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000338:	2301      	movs	r3, #1
 800033a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800033c:	2300      	movs	r3, #0
 800033e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000340:	2300      	movs	r3, #0
 8000342:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000344:	2300      	movs	r3, #0
 8000346:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Offset = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000350:	4619      	mov	r1, r3
 8000352:	4818      	ldr	r0, [pc, #96]	; (80003b4 <MX_ADC1_Init+0x134>)
 8000354:	f001 fe0e 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800035e:	f000 fa1f 	bl	80007a0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000362:	2306      	movs	r3, #6
 8000364:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000366:	2301      	movs	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800036e:	2301      	movs	r3, #1
 8000370:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000376:	2340      	movs	r3, #64	; 0x40
 8000378:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800037a:	2301      	movs	r3, #1
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_ADC1_Init+0x134>)
 800039e:	f002 fa5f 	bl	8002860 <HAL_ADCEx_InjectedConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80003a8:	f000 f9fa 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3750      	adds	r7, #80	; 0x50
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200001fc 	.word	0x200001fc

080003b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d8:	d12b      	bne.n	8000432 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <HAL_ADC_MspInit+0x84>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a17      	ldr	r2, [pc, #92]	; (800043c <HAL_ADC_MspInit+0x84>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_ADC_MspInit+0x84>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_ADC_MspInit+0x84>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a11      	ldr	r2, [pc, #68]	; (800043c <HAL_ADC_MspInit+0x84>)
 80003f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_ADC_MspInit+0x84>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800040a:	2303      	movs	r3, #3
 800040c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040e:	2303      	movs	r3, #3
 8000410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	4619      	mov	r1, r3
 800041c:	4808      	ldr	r0, [pc, #32]	; (8000440 <HAL_ADC_MspInit+0x88>)
 800041e:	f003 fb35 	bl	8003a8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	2012      	movs	r0, #18
 8000428:	f003 fae0 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800042c:	2012      	movs	r0, #18
 800042e:	f003 fb09 	bl	8003a44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000432:	bf00      	nop
 8000434:	3728      	adds	r7, #40	; 0x28
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	48000800 	.word	0x48000800

08000444 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800045a:	4b37      	ldr	r3, [pc, #220]	; (8000538 <MX_GPIO_Init+0xf4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a36      	ldr	r2, [pc, #216]	; (8000538 <MX_GPIO_Init+0xf4>)
 8000460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b34      	ldr	r3, [pc, #208]	; (8000538 <MX_GPIO_Init+0xf4>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b31      	ldr	r3, [pc, #196]	; (8000538 <MX_GPIO_Init+0xf4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a30      	ldr	r2, [pc, #192]	; (8000538 <MX_GPIO_Init+0xf4>)
 8000478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <MX_GPIO_Init+0xf4>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048a:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <MX_GPIO_Init+0xf4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a2a      	ldr	r2, [pc, #168]	; (8000538 <MX_GPIO_Init+0xf4>)
 8000490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b28      	ldr	r3, [pc, #160]	; (8000538 <MX_GPIO_Init+0xf4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <MX_GPIO_Init+0xf4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a24      	ldr	r2, [pc, #144]	; (8000538 <MX_GPIO_Init+0xf4>)
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b22      	ldr	r3, [pc, #136]	; (8000538 <MX_GPIO_Init+0xf4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <MX_GPIO_Init+0xf4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a1e      	ldr	r2, [pc, #120]	; (8000538 <MX_GPIO_Init+0xf4>)
 80004c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <MX_GPIO_Init+0xf4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004d2:	2200      	movs	r2, #0
 80004d4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004d8:	4818      	ldr	r0, [pc, #96]	; (800053c <MX_GPIO_Init+0xf8>)
 80004da:	f003 fd1f 	bl	8003f1c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004de:	2337      	movs	r3, #55	; 0x37
 80004e0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	4812      	ldr	r0, [pc, #72]	; (800053c <MX_GPIO_Init+0xf8>)
 80004f4:	f003 faca 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004f8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80004fc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <MX_GPIO_Init+0xf8>)
 8000512:	f003 fabb 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000516:	2301      	movs	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f003 faae 	bl	8003a8c <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3728      	adds	r7, #40	; 0x28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	48001000 	.word	0x48001000

08000540 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <MX_I2C1_Init+0x74>)
 8000546:	4a1c      	ldr	r2, [pc, #112]	; (80005b8 <MX_I2C1_Init+0x78>)
 8000548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <MX_I2C1_Init+0x74>)
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <MX_I2C1_Init+0x7c>)
 800054e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_I2C1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <MX_I2C1_Init+0x74>)
 8000558:	2201      	movs	r2, #1
 800055a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <MX_I2C1_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <MX_I2C1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_I2C1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <MX_I2C1_Init+0x74>)
 800057c:	f003 fcfe 	bl	8003f7c <HAL_I2C_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000586:	f000 f90b 	bl	80007a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800058a:	2100      	movs	r1, #0
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <MX_I2C1_Init+0x74>)
 800058e:	f003 fe09 	bl	80041a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000598:	f000 f902 	bl	80007a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800059c:	2100      	movs	r1, #0
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_I2C1_Init+0x74>)
 80005a0:	f003 fe68 	bl	8004274 <HAL_I2CEx_ConfigDigitalFilter>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005aa:	f000 f8f9 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000024c 	.word	0x2000024c
 80005b8:	40005400 	.word	0x40005400
 80005bc:	2000090e 	.word	0x2000090e

080005c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a17      	ldr	r2, [pc, #92]	; (800063c <HAL_I2C_MspInit+0x7c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d127      	bne.n	8000632 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_I2C_MspInit+0x80>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <HAL_I2C_MspInit+0x80>)
 80005e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <HAL_I2C_MspInit+0x80>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005fa:	23c0      	movs	r3, #192	; 0xc0
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005fe:	2312      	movs	r3, #18
 8000600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000606:	2303      	movs	r3, #3
 8000608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800060a:	2304      	movs	r3, #4
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <HAL_I2C_MspInit+0x84>)
 8000616:	f003 fa39 	bl	8003a8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_I2C_MspInit+0x80>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_I2C_MspInit+0x80>)
 8000620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_I2C_MspInit+0x80>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40005400 	.word	0x40005400
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 uint16_t AD_RES = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fad3 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f83f 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f7ff fef3 	bl	8000444 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065e:	f7ff ff6f 	bl	8000540 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000662:	f000 f8ad 	bl	80007c0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000666:	f00d f9f5 	bl	800da54 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800066a:	f7ff fe09 	bl	8000280 <MX_ADC1_Init>
  MX_TIM2_Init();
 800066e:	f000 f9d1 	bl	8000a14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000672:	2100      	movs	r1, #0
 8000674:	4815      	ldr	r0, [pc, #84]	; (80006cc <main+0x84>)
 8000676:	f007 fe7b 	bl	8008370 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <main+0x88>)
 800067c:	f000 fe8c 	bl	8001398 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 8000680:	2101      	movs	r1, #1
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <main+0x88>)
 8000684:	f000 ffbc 	bl	8001600 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(&hadc1);
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <main+0x88>)
 800068a:	f001 f8d7 	bl	800183c <HAL_ADC_GetValue>
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = (AD_RES<<4);
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	011a      	lsls	r2, r3, #4
 8000696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800069a:	635a      	str	r2, [r3, #52]	; 0x34

	char* str = malloc(6);
 800069c:	2006      	movs	r0, #6
 800069e:	f00d fee3 	bl	800e468 <malloc>
 80006a2:	4603      	mov	r3, r0
 80006a4:	603b      	str	r3, [r7, #0]
	sprintf(str, "%d\n", AD_RES);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	461a      	mov	r2, r3
 80006aa:	490a      	ldr	r1, [pc, #40]	; (80006d4 <main+0x8c>)
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f00d ffe3 	bl	800e678 <siprintf>
	CDC_Transmit_FS(str, strlen(str));
 80006b2:	6838      	ldr	r0, [r7, #0]
 80006b4:	f7ff fd8c 	bl	80001d0 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	4619      	mov	r1, r3
 80006be:	6838      	ldr	r0, [r7, #0]
 80006c0:	f00d fa9c 	bl	800dbfc <CDC_Transmit_FS>
//	CDC_Transmit_FS("\n", strlen("\n"));
//	HAL_Delay(2000);
	free(str);
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f00d fed7 	bl	800e478 <free>
  {
 80006ca:	e7d6      	b.n	800067a <main+0x32>
 80006cc:	20000300 	.word	0x20000300
 80006d0:	200001fc 	.word	0x200001fc
 80006d4:	0800ed8c 	.word	0x0800ed8c

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09e      	sub	sp, #120	; 0x78
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006e2:	2228      	movs	r2, #40	; 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00d fece 	bl	800e488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	223c      	movs	r2, #60	; 0x3c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f00d fec0 	bl	800e488 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000708:	2303      	movs	r3, #3
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	2310      	movs	r3, #16
 800071c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000726:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000728:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800072c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fafe 	bl	8005d34 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800073e:	f000 f82f 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f006 fc9c 	bl	800709c <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 f819 	bl	80007a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <SystemClock_Config+0xc4>)
 8000770:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f006 ff16 	bl	80075b4 <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800078e:	f000 f807 	bl	80007a0 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3778      	adds	r7, #120	; 0x78
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	000200a0 	.word	0x000200a0

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>

080007aa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_SPI1_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_SPI1_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_SPI1_Init+0x74>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI1_Init+0x74>)
 80007da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI1_Init+0x74>)
 80007ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI1_Init+0x74>)
 80007f6:	2208      	movs	r2, #8
 80007f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI1_Init+0x74>)
 800080e:	2207      	movs	r2, #7
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI1_Init+0x74>)
 800081a:	2208      	movs	r2, #8
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_SPI1_Init+0x74>)
 8000820:	f007 f9ee 	bl	8007c00 <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800082a:	f7ff ffb9 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000298 	.word	0x20000298
 8000838:	40013000 	.word	0x40013000

0800083c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_SPI_MspInit+0x7c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d128      	bne.n	80008b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_SPI_MspInit+0x80>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <HAL_SPI_MspInit+0x80>)
 8000864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_SPI_MspInit+0x80>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_SPI_MspInit+0x80>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_SPI_MspInit+0x80>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_SPI_MspInit+0x80>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800088e:	23e0      	movs	r3, #224	; 0xe0
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089e:	2305      	movs	r3, #5
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f003 f8ee 	bl	8003a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40013000 	.word	0x40013000
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x44>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x44>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x44>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x44>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x44>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008f6:	2007      	movs	r0, #7
 80008f8:	f003 f858 	bl	80039ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f998 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <ADC1_2_IRQHandler+0x10>)
 8000962:	f000 ff97 	bl	8001894 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001fc 	.word	0x200001fc

08000970 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000976:	f003 fdf5 	bl	8004564 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000fe8 	.word	0x20000fe8

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f00d fd2e 	bl	800e414 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000a000 	.word	0x2000a000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200002fc 	.word	0x200002fc
 80009ec:	20001508 	.word	0x20001508

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6e:	4823      	ldr	r0, [pc, #140]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a70:	f007 fabc 	bl	8007fec <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f7ff fe91 	bl	80007a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481c      	ldr	r0, [pc, #112]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a8c:	f008 f836 	bl	8008afc <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a96:	f7ff fe83 	bl	80007a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000a9c:	f007 fb82 	bl	80081a4 <HAL_TIM_PWM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000aa6:	f7ff fe7b 	bl	80007a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000aba:	f009 f837 	bl	8009b2c <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ac4:	f7ff fe6c 	bl	80007a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000ae0:	f007 fdd6 	bl	8008690 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000aea:	f7ff fe59 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM2_Init+0xe8>)
 8000af0:	f000 f824 	bl	8000b3c <HAL_TIM_MspPostInit>

}
 8000af4:	bf00      	nop
 8000af6:	3738      	adds	r7, #56	; 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000300 	.word	0x20000300

08000b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b10:	d10b      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_TIM_Base_MspInit+0x38>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_TIM_Base_MspInit+0x38>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_TIM_Base_MspInit+0x38>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b5c:	d11d      	bne.n	8000b9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_TIM_MspPostInit+0x68>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_TIM_MspPostInit+0x68>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_TIM_MspPostInit+0x68>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f002 ff79 	bl	8003a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bd2:	f7ff ff0d 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f00d fc23 	bl	800e420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bda:	f7ff fd35 	bl	8000648 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000bec:	0800f0e4 	.word	0x0800f0e4
  ldr r2, =_sbss
 8000bf0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000bf4:	20001504 	.word	0x20001504

08000bf8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC3_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f002 fecd 	bl	80039ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe52 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 ff14 	bl	8003a74 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c64:	f002 fec2 	bl	80039ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	2000034c 	.word	0x2000034c

08000cb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000034c 	.word	0x2000034c

08000cc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b09a      	sub	sp, #104	; 0x68
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e32e      	b.n	8001382 <HAL_ADC_Init+0x67e>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2c:	d012      	beq.n	8000d54 <HAL_ADC_Init+0x50>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a8b      	ldr	r2, [pc, #556]	; (8000f60 <HAL_ADC_Init+0x25c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_ADC_Init+0x50>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a89      	ldr	r2, [pc, #548]	; (8000f64 <HAL_ADC_Init+0x260>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d008      	beq.n	8000d54 <HAL_ADC_Init+0x50>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a88      	ldr	r2, [pc, #544]	; (8000f68 <HAL_ADC_Init+0x264>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_ADC_Init+0x50>
 8000d4c:	21f9      	movs	r1, #249	; 0xf9
 8000d4e:	4887      	ldr	r0, [pc, #540]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000d50:	f7ff fd2b 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d012      	beq.n	8000d82 <HAL_ADC_Init+0x7e>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d64:	d00d      	beq.n	8000d82 <HAL_ADC_Init+0x7e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d6e:	d008      	beq.n	8000d82 <HAL_ADC_Init+0x7e>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_Init+0x7e>
 8000d7a:	21fa      	movs	r1, #250	; 0xfa
 8000d7c:	487b      	ldr	r0, [pc, #492]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000d7e:	f7ff fd14 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00f      	beq.n	8000daa <HAL_ADC_Init+0xa6>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d00b      	beq.n	8000daa <HAL_ADC_Init+0xa6>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b10      	cmp	r3, #16
 8000d98:	d007      	beq.n	8000daa <HAL_ADC_Init+0xa6>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b18      	cmp	r3, #24
 8000da0:	d003      	beq.n	8000daa <HAL_ADC_Init+0xa6>
 8000da2:	21fb      	movs	r1, #251	; 0xfb
 8000da4:	4871      	ldr	r0, [pc, #452]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000da6:	f7ff fd00 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <HAL_ADC_Init+0xbe>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b20      	cmp	r3, #32
 8000db8:	d003      	beq.n	8000dc2 <HAL_ADC_Init+0xbe>
 8000dba:	21fc      	movs	r1, #252	; 0xfc
 8000dbc:	486b      	ldr	r0, [pc, #428]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000dbe:	f7ff fcf4 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <HAL_ADC_Init+0xd6>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d003      	beq.n	8000dda <HAL_ADC_Init+0xd6>
 8000dd2:	21fd      	movs	r1, #253	; 0xfd
 8000dd4:	4865      	ldr	r0, [pc, #404]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000dd6:	f7ff fce8 	bl	80007aa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7e5b      	ldrb	r3, [r3, #25]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <HAL_ADC_Init+0xee>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7e5b      	ldrb	r3, [r3, #25]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d003      	beq.n	8000df2 <HAL_ADC_Init+0xee>
 8000dea:	21fe      	movs	r1, #254	; 0xfe
 8000dec:	485f      	ldr	r0, [pc, #380]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000dee:	f7ff fcdc 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d012      	beq.n	8000e20 <HAL_ADC_Init+0x11c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e02:	d00d      	beq.n	8000e20 <HAL_ADC_Init+0x11c>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e0c:	d008      	beq.n	8000e20 <HAL_ADC_Init+0x11c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000e16:	d003      	beq.n	8000e20 <HAL_ADC_Init+0x11c>
 8000e18:	21ff      	movs	r1, #255	; 0xff
 8000e1a:	4854      	ldr	r0, [pc, #336]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000e1c:	f7ff fcc5 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d070      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	2b40      	cmp	r3, #64	; 0x40
 8000e2e:	d06c      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	2bc0      	cmp	r3, #192	; 0xc0
 8000e36:	d068      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3c:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8000e40:	d063      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e4a:	d05e      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8000e54:	d059      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e5e:	d054      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8000e68:	d04f      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	2b40      	cmp	r3, #64	; 0x40
 8000e70:	d04b      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d047      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e82:	d042      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8000e8c:	d03d      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	2bc0      	cmp	r3, #192	; 0xc0
 8000e94:	d039      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e9e:	d034      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	2b80      	cmp	r3, #128	; 0x80
 8000ea6:	d030      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000eb0:	d02b      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000eba:	d026      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000ec4:	d021      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ece:	d01c      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ed8:	d017      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000ee2:	d012      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eec:	d00d      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ef6:	d008      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d004      	beq.n	8000f0a <HAL_ADC_Init+0x206>
 8000f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f04:	4819      	ldr	r0, [pc, #100]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000f06:	f7ff fc50 	bl	80007aa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d009      	beq.n	8000f28 <HAL_ADC_Init+0x224>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d004      	beq.n	8000f28 <HAL_ADC_Init+0x224>
 8000f1e:	f240 1101 	movw	r1, #257	; 0x101
 8000f22:	4812      	ldr	r0, [pc, #72]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000f24:	f7ff fc41 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d008      	beq.n	8000f42 <HAL_ADC_Init+0x23e>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d004      	beq.n	8000f42 <HAL_ADC_Init+0x23e>
 8000f38:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000f3e:	f7ff fc34 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d012      	beq.n	8000f70 <HAL_ADC_Init+0x26c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00e      	beq.n	8000f70 <HAL_ADC_Init+0x26c>
 8000f52:	f240 1103 	movw	r1, #259	; 0x103
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_ADC_Init+0x268>)
 8000f58:	f7ff fc27 	bl	80007aa <assert_failed>
 8000f5c:	e008      	b.n	8000f70 <HAL_ADC_Init+0x26c>
 8000f5e:	bf00      	nop
 8000f60:	50000100 	.word	0x50000100
 8000f64:	50000400 	.word	0x50000400
 8000f68:	50000500 	.word	0x50000500
 8000f6c:	0800ed90 	.word	0x0800ed90
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e1b      	ldrb	r3, [r3, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d008      	beq.n	8000f8a <HAL_ADC_Init+0x286>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7e1b      	ldrb	r3, [r3, #24]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d004      	beq.n	8000f8a <HAL_ADC_Init+0x286>
 8000f80:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f84:	4891      	ldr	r0, [pc, #580]	; (80011cc <HAL_ADC_Init+0x4c8>)
 8000f86:	f7ff fc10 	bl	80007aa <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d02d      	beq.n	8000fee <HAL_ADC_Init+0x2ea>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_ADC_Init+0x29e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	2b10      	cmp	r3, #16
 8000fa0:	d904      	bls.n	8000fac <HAL_ADC_Init+0x2a8>
 8000fa2:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000fa6:	4889      	ldr	r0, [pc, #548]	; (80011cc <HAL_ADC_Init+0x4c8>)
 8000fa8:	f7ff fbff 	bl	80007aa <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d009      	beq.n	8000fca <HAL_ADC_Init+0x2c6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d004      	beq.n	8000fca <HAL_ADC_Init+0x2c6>
 8000fc0:	f240 1109 	movw	r1, #265	; 0x109
 8000fc4:	4881      	ldr	r0, [pc, #516]	; (80011cc <HAL_ADC_Init+0x4c8>)
 8000fc6:	f7ff fbf0 	bl	80007aa <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00c      	beq.n	8000fee <HAL_ADC_Init+0x2ea>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_ADC_Init+0x2e0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d904      	bls.n	8000fee <HAL_ADC_Init+0x2ea>
 8000fe4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000fe8:	4878      	ldr	r0, [pc, #480]	; (80011cc <HAL_ADC_Init+0x4c8>)
 8000fea:	f7ff fbde 	bl	80007aa <assert_failed>
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d176      	bne.n	80010e8 <HAL_ADC_Init+0x3e4>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d152      	bne.n	80010a8 <HAL_ADC_Init+0x3a4>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f9cb 	bl	80003b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d13b      	bne.n	80010a8 <HAL_ADC_Init+0x3a4>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f002 fb85 	bl	8003740 <ADC_Disable>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d12f      	bne.n	80010a8 <HAL_ADC_Init+0x3a4>
 8001048:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800104c:	2b00      	cmp	r3, #0
 800104e:	d12b      	bne.n	80010a8 <HAL_ADC_Init+0x3a4>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	f043 0202 	orr.w	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001072:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001082:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <HAL_ADC_Init+0x4cc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_ADC_Init+0x4d0>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9a      	lsrs	r2, r3, #18
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109a:	e002      	b.n	80010a2 <HAL_ADC_Init+0x39e>
          {
            wait_loop_index--;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	3b01      	subs	r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f9      	bne.n	800109c <HAL_ADC_Init+0x398>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <HAL_ADC_Init+0x3c2>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010c4:	d110      	bne.n	80010e8 <HAL_ADC_Init+0x3e4>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f023 0312 	bic.w	r3, r3, #18
 80010ce:	f043 0210 	orr.w	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f040 8139 	bne.w	8001368 <HAL_ADC_Init+0x664>
 80010f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 8134 	bne.w	8001368 <HAL_ADC_Init+0x664>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 812c 	bne.w	8001368 <HAL_ADC_Init+0x664>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001118:	f043 0202 	orr.w	r2, r3, #2
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001128:	d004      	beq.n	8001134 <HAL_ADC_Init+0x430>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <HAL_ADC_Init+0x4d4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_ADC_Init+0x434>
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_Init+0x4d8>)
 8001136:	e000      	b.n	800113a <HAL_ADC_Init+0x436>
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_ADC_Init+0x4dc>)
 800113a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001144:	d102      	bne.n	800114c <HAL_ADC_Init+0x448>
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_ADC_Init+0x4d4>)
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e01a      	b.n	8001182 <HAL_ADC_Init+0x47e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_ADC_Init+0x4d4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d103      	bne.n	800115e <HAL_ADC_Init+0x45a>
 8001156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e011      	b.n	8001182 <HAL_ADC_Init+0x47e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_ADC_Init+0x4e0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d102      	bne.n	800116e <HAL_ADC_Init+0x46a>
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_ADC_Init+0x4e4>)
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e009      	b.n	8001182 <HAL_ADC_Init+0x47e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_ADC_Init+0x4e4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d102      	bne.n	800117e <HAL_ADC_Init+0x47a>
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_ADC_Init+0x4e0>)
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e001      	b.n	8001182 <HAL_ADC_Init+0x47e>
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_ADC_Init+0x49e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b01      	cmp	r3, #1
 800119c:	d101      	bne.n	80011a2 <HAL_ADC_Init+0x49e>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_ADC_Init+0x4a0>
 80011a2:	2300      	movs	r3, #0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d12d      	bne.n	8001204 <HAL_ADC_Init+0x500>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011a8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d021      	beq.n	80011f2 <HAL_ADC_Init+0x4ee>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d118      	bne.n	80011ec <HAL_ADC_Init+0x4e8>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d112      	bne.n	80011ec <HAL_ADC_Init+0x4e8>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e011      	b.n	80011ee <HAL_ADC_Init+0x4ea>
 80011ca:	bf00      	nop
 80011cc:	0800ed90 	.word	0x0800ed90
 80011d0:	20000000 	.word	0x20000000
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	50000100 	.word	0x50000100
 80011dc:	50000300 	.word	0x50000300
 80011e0:	50000700 	.word	0x50000700
 80011e4:	50000400 	.word	0x50000400
 80011e8:	50000500 	.word	0x50000500
 80011ec:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <HAL_ADC_Init+0x500>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	431a      	orrs	r2, r3
 8001200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001202:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e5b      	ldrb	r3, [r3, #25]
 8001208:	035b      	lsls	r3, r3, #13
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800120e:	2a01      	cmp	r2, #1
 8001210:	d002      	beq.n	8001218 <HAL_ADC_Init+0x514>
 8001212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001216:	e000      	b.n	800121a <HAL_ADC_Init+0x516>
 8001218:	2200      	movs	r2, #0
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4313      	orrs	r3, r2
 8001228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800122a:	4313      	orrs	r3, r2
 800122c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d11b      	bne.n	8001270 <HAL_ADC_Init+0x56c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <HAL_ADC_Init+0x550>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	3b01      	subs	r3, #1
 8001246:	045a      	lsls	r2, r3, #17
 8001248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800124a:	4313      	orrs	r3, r2
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	663b      	str	r3, [r7, #96]	; 0x60
 8001252:	e00d      	b.n	8001270 <HAL_ADC_Init+0x56c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800125c:	f043 0220 	orr.w	r2, r3, #32
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	2b01      	cmp	r3, #1
 8001276:	d02c      	beq.n	80012d2 <HAL_ADC_Init+0x5ce>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a43      	ldr	r2, [pc, #268]	; (800138c <HAL_ADC_Init+0x688>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d004      	beq.n	800128c <HAL_ADC_Init+0x588>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a42      	ldr	r2, [pc, #264]	; (8001390 <HAL_ADC_Init+0x68c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d11a      	bne.n	80012c2 <HAL_ADC_Init+0x5be>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001294:	d012      	beq.n	80012bc <HAL_ADC_Init+0x5b8>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800129e:	d00a      	beq.n	80012b6 <HAL_ADC_Init+0x5b2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80012a8:	d002      	beq.n	80012b0 <HAL_ADC_Init+0x5ac>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	e00a      	b.n	80012c6 <HAL_ADC_Init+0x5c2>
 80012b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b4:	e007      	b.n	80012c6 <HAL_ADC_Init+0x5c2>
 80012b6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012ba:	e004      	b.n	80012c6 <HAL_ADC_Init+0x5c2>
 80012bc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012c0:	e001      	b.n	80012c6 <HAL_ADC_Init+0x5c2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012ca:	4313      	orrs	r3, r2
 80012cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ce:	4313      	orrs	r3, r2
 80012d0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d114      	bne.n	800130a <HAL_ADC_Init+0x606>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012ee:	f023 0302 	bic.w	r3, r3, #2
 80012f2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7e1b      	ldrb	r3, [r3, #24]
 80012f8:	039a      	lsls	r2, r3, #14
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4313      	orrs	r3, r2
 8001304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001306:	4313      	orrs	r3, r2
 8001308:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_ADC_Init+0x690>)
 8001312:	4013      	ands	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800131a:	430b      	orrs	r3, r1
 800131c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10c      	bne.n	8001340 <HAL_ADC_Init+0x63c>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f023 010f 	bic.w	r1, r3, #15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
 800133e:	e007      	b.n	8001350 <HAL_ADC_Init+0x64c>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020f 	bic.w	r2, r2, #15
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f023 0303 	bic.w	r3, r3, #3
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
 8001366:	e00a      	b.n	800137e <HAL_ADC_Init+0x67a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f023 0312 	bic.w	r3, r3, #18
 8001370:	f043 0210 	orr.w	r2, r3, #16
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001378:	2301      	movs	r3, #1
 800137a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800137e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001382:	4618      	mov	r0, r3
 8001384:	3768      	adds	r7, #104	; 0x68
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	50000400 	.word	0x50000400
 8001390:	50000500 	.word	0x50000500
 8001394:	fff0c007 	.word	0xfff0c007

08001398 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ac:	d013      	beq.n	80013d6 <HAL_ADC_Start+0x3e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a8d      	ldr	r2, [pc, #564]	; (80015e8 <HAL_ADC_Start+0x250>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00e      	beq.n	80013d6 <HAL_ADC_Start+0x3e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a8b      	ldr	r2, [pc, #556]	; (80015ec <HAL_ADC_Start+0x254>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d009      	beq.n	80013d6 <HAL_ADC_Start+0x3e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <HAL_ADC_Start+0x258>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d004      	beq.n	80013d6 <HAL_ADC_Start+0x3e>
 80013cc:	f240 41df 	movw	r1, #1247	; 0x4df
 80013d0:	4888      	ldr	r0, [pc, #544]	; (80015f4 <HAL_ADC_Start+0x25c>)
 80013d2:	f7ff f9ea 	bl	80007aa <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f040 80f9 	bne.w	80015d8 <HAL_ADC_Start+0x240>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_Start+0x5c>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e0f4      	b.n	80015de <HAL_ADC_Start+0x246>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f002 f93b 	bl	8003678 <ADC_Enable>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f040 80e0 	bne.w	80015ce <HAL_ADC_Start+0x236>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800142a:	d004      	beq.n	8001436 <HAL_ADC_Start+0x9e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a6d      	ldr	r2, [pc, #436]	; (80015e8 <HAL_ADC_Start+0x250>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d106      	bne.n	8001444 <HAL_ADC_Start+0xac>
 8001436:	4b70      	ldr	r3, [pc, #448]	; (80015f8 <HAL_ADC_Start+0x260>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	2b00      	cmp	r3, #0
 8001440:	d010      	beq.n	8001464 <HAL_ADC_Start+0xcc>
 8001442:	e005      	b.n	8001450 <HAL_ADC_Start+0xb8>
 8001444:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_ADC_Start+0x264>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <HAL_ADC_Start+0xcc>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001458:	d004      	beq.n	8001464 <HAL_ADC_Start+0xcc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a63      	ldr	r2, [pc, #396]	; (80015ec <HAL_ADC_Start+0x254>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d115      	bne.n	8001490 <HAL_ADC_Start+0xf8>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d036      	beq.n	80014ec <HAL_ADC_Start+0x154>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001486:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800148e:	e02d      	b.n	80014ec <HAL_ADC_Start+0x154>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a4:	d004      	beq.n	80014b0 <HAL_ADC_Start+0x118>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <HAL_ADC_Start+0x250>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d10a      	bne.n	80014c6 <HAL_ADC_Start+0x12e>
 80014b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	e008      	b.n	80014d8 <HAL_ADC_Start+0x140>
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_ADC_Start+0x254>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf14      	ite	ne
 80014d2:	2301      	movne	r3, #1
 80014d4:	2300      	moveq	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <HAL_ADC_Start+0x154>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f8:	d106      	bne.n	8001508 <HAL_ADC_Start+0x170>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f023 0206 	bic.w	r2, r3, #6
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
 8001506:	e002      	b.n	800150e <HAL_ADC_Start+0x176>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	221c      	movs	r2, #28
 800151c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Start+0x19a>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2e      	ldr	r2, [pc, #184]	; (80015e8 <HAL_ADC_Start+0x250>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d106      	bne.n	8001540 <HAL_ADC_Start+0x1a8>
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_ADC_Start+0x260>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03e      	beq.n	80015bc <HAL_ADC_Start+0x224>
 800153e:	e005      	b.n	800154c <HAL_ADC_Start+0x1b4>
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_ADC_Start+0x264>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2b00      	cmp	r3, #0
 800154a:	d037      	beq.n	80015bc <HAL_ADC_Start+0x224>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001554:	d004      	beq.n	8001560 <HAL_ADC_Start+0x1c8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <HAL_ADC_Start+0x250>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d106      	bne.n	800156e <HAL_ADC_Start+0x1d6>
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_ADC_Start+0x260>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b05      	cmp	r3, #5
 800156a:	d027      	beq.n	80015bc <HAL_ADC_Start+0x224>
 800156c:	e005      	b.n	800157a <HAL_ADC_Start+0x1e2>
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_ADC_Start+0x264>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2b05      	cmp	r3, #5
 8001578:	d020      	beq.n	80015bc <HAL_ADC_Start+0x224>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001582:	d004      	beq.n	800158e <HAL_ADC_Start+0x1f6>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_ADC_Start+0x250>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d106      	bne.n	800159c <HAL_ADC_Start+0x204>
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_ADC_Start+0x260>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2b09      	cmp	r3, #9
 8001598:	d010      	beq.n	80015bc <HAL_ADC_Start+0x224>
 800159a:	e005      	b.n	80015a8 <HAL_ADC_Start+0x210>
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_ADC_Start+0x264>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	d009      	beq.n	80015bc <HAL_ADC_Start+0x224>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b0:	d004      	beq.n	80015bc <HAL_ADC_Start+0x224>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_ADC_Start+0x254>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d10f      	bne.n	80015dc <HAL_ADC_Start+0x244>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0204 	orr.w	r2, r2, #4
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	e006      	b.n	80015dc <HAL_ADC_Start+0x244>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015d6:	e001      	b.n	80015dc <HAL_ADC_Start+0x244>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015d8:	2302      	movs	r3, #2
 80015da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	50000100 	.word	0x50000100
 80015ec:	50000400 	.word	0x50000400
 80015f0:	50000500 	.word	0x50000500
 80015f4:	0800ed90 	.word	0x0800ed90
 80015f8:	50000300 	.word	0x50000300
 80015fc:	50000700 	.word	0x50000700

08001600 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001616:	d013      	beq.n	8001640 <HAL_ADC_PollForConversion+0x40>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a81      	ldr	r2, [pc, #516]	; (8001824 <HAL_ADC_PollForConversion+0x224>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00e      	beq.n	8001640 <HAL_ADC_PollForConversion+0x40>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a80      	ldr	r2, [pc, #512]	; (8001828 <HAL_ADC_PollForConversion+0x228>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_ADC_PollForConversion+0x40>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a7e      	ldr	r2, [pc, #504]	; (800182c <HAL_ADC_PollForConversion+0x22c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_ADC_PollForConversion+0x40>
 8001636:	f240 6119 	movw	r1, #1561	; 0x619
 800163a:	487d      	ldr	r0, [pc, #500]	; (8001830 <HAL_ADC_PollForConversion+0x230>)
 800163c:	f7ff f8b5 	bl	80007aa <assert_failed>

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d102      	bne.n	800164e <HAL_ADC_PollForConversion+0x4e>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001648:	2308      	movs	r3, #8
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e03a      	b.n	80016c4 <HAL_ADC_PollForConversion+0xc4>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001656:	d004      	beq.n	8001662 <HAL_ADC_PollForConversion+0x62>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a71      	ldr	r2, [pc, #452]	; (8001824 <HAL_ADC_PollForConversion+0x224>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_ADC_PollForConversion+0x66>
 8001662:	4b74      	ldr	r3, [pc, #464]	; (8001834 <HAL_ADC_PollForConversion+0x234>)
 8001664:	e000      	b.n	8001668 <HAL_ADC_PollForConversion+0x68>
 8001666:	4b74      	ldr	r3, [pc, #464]	; (8001838 <HAL_ADC_PollForConversion+0x238>)
 8001668:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b00      	cmp	r3, #0
 8001674:	d112      	bne.n	800169c <HAL_ADC_PollForConversion+0x9c>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b01      	cmp	r3, #1
 8001682:	d11d      	bne.n	80016c0 <HAL_ADC_PollForConversion+0xc0>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f043 0220 	orr.w	r2, r3, #32
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0bf      	b.n	800181c <HAL_ADC_PollForConversion+0x21c>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <HAL_ADC_PollForConversion+0xc0>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0ad      	b.n	800181c <HAL_ADC_PollForConversion+0x21c>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80016c0:	230c      	movs	r3, #12
 80016c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_PollForConversion+0xd8>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a54      	ldr	r2, [pc, #336]	; (8001824 <HAL_ADC_PollForConversion+0x224>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d106      	bne.n	80016e6 <HAL_ADC_PollForConversion+0xe6>
 80016d8:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_ADC_PollForConversion+0x234>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d010      	beq.n	8001706 <HAL_ADC_PollForConversion+0x106>
 80016e4:	e005      	b.n	80016f2 <HAL_ADC_PollForConversion+0xf2>
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <HAL_ADC_PollForConversion+0x238>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_ADC_PollForConversion+0x106>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fa:	d004      	beq.n	8001706 <HAL_ADC_PollForConversion+0x106>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a49      	ldr	r2, [pc, #292]	; (8001828 <HAL_ADC_PollForConversion+0x228>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d104      	bne.n	8001710 <HAL_ADC_PollForConversion+0x110>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e00f      	b.n	8001730 <HAL_ADC_PollForConversion+0x130>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001718:	d004      	beq.n	8001724 <HAL_ADC_PollForConversion+0x124>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a41      	ldr	r2, [pc, #260]	; (8001824 <HAL_ADC_PollForConversion+0x224>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d102      	bne.n	800172a <HAL_ADC_PollForConversion+0x12a>
 8001724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001728:	e000      	b.n	800172c <HAL_ADC_PollForConversion+0x12c>
 800172a:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <HAL_ADC_PollForConversion+0x228>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001730:	f7ff fabe 	bl	8000cb0 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001736:	e021      	b.n	800177c <HAL_ADC_PollForConversion+0x17c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800173e:	d01d      	beq.n	800177c <HAL_ADC_PollForConversion+0x17c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_ADC_PollForConversion+0x156>
 8001746:	f7ff fab3 	bl	8000cb0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d212      	bcs.n	800177c <HAL_ADC_PollForConversion+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10b      	bne.n	800177c <HAL_ADC_PollForConversion+0x17c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f043 0204 	orr.w	r2, r3, #4
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e04f      	b.n	800181c <HAL_ADC_PollForConversion+0x21c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0d6      	beq.n	8001738 <HAL_ADC_PollForConversion+0x138>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d131      	bne.n	8001808 <HAL_ADC_PollForConversion+0x208>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d12c      	bne.n	8001808 <HAL_ADC_PollForConversion+0x208>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d125      	bne.n	8001808 <HAL_ADC_PollForConversion+0x208>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d112      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x1f0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d112      	bne.n	8001808 <HAL_ADC_PollForConversion+0x208>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
 80017ee:	e00b      	b.n	8001808 <HAL_ADC_PollForConversion+0x208>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f043 0220 	orr.w	r2, r3, #32
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <HAL_ADC_PollForConversion+0x21a>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	50000100 	.word	0x50000100
 8001828:	50000400 	.word	0x50000400
 800182c:	50000500 	.word	0x50000500
 8001830:	0800ed90 	.word	0x0800ed90
 8001834:	50000300 	.word	0x50000300
 8001838:	50000700 	.word	0x50000700

0800183c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800184c:	d013      	beq.n	8001876 <HAL_ADC_GetValue+0x3a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_ADC_GetValue+0x48>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d00e      	beq.n	8001876 <HAL_ADC_GetValue+0x3a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_ADC_GetValue+0x4c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d009      	beq.n	8001876 <HAL_ADC_GetValue+0x3a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_ADC_GetValue+0x50>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d004      	beq.n	8001876 <HAL_ADC_GetValue+0x3a>
 800186c:	f640 3108 	movw	r1, #2824	; 0xb08
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <HAL_ADC_GetValue+0x54>)
 8001872:	f7fe ff9a 	bl	80007aa <assert_failed>

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	50000100 	.word	0x50000100
 8001888:	50000400 	.word	0x50000400
 800188c:	50000500 	.word	0x50000500
 8001890:	0800ed90 	.word	0x0800ed90

08001894 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b0:	d013      	beq.n	80018da <HAL_ADC_IRQHandler+0x46>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a77      	ldr	r2, [pc, #476]	; (8001a94 <HAL_ADC_IRQHandler+0x200>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00e      	beq.n	80018da <HAL_ADC_IRQHandler+0x46>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <HAL_ADC_IRQHandler+0x204>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d009      	beq.n	80018da <HAL_ADC_IRQHandler+0x46>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a74      	ldr	r2, [pc, #464]	; (8001a9c <HAL_ADC_IRQHandler+0x208>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d004      	beq.n	80018da <HAL_ADC_IRQHandler+0x46>
 80018d0:	f640 3147 	movw	r1, #2887	; 0xb47
 80018d4:	4872      	ldr	r0, [pc, #456]	; (8001aa0 <HAL_ADC_IRQHandler+0x20c>)
 80018d6:	f7fe ff68 	bl	80007aa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7e5b      	ldrb	r3, [r3, #25]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_ADC_IRQHandler+0x60>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e5b      	ldrb	r3, [r3, #25]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d004      	beq.n	80018f4 <HAL_ADC_IRQHandler+0x60>
 80018ea:	f640 3148 	movw	r1, #2888	; 0xb48
 80018ee:	486c      	ldr	r0, [pc, #432]	; (8001aa0 <HAL_ADC_IRQHandler+0x20c>)
 80018f0:	f7fe ff5b 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d008      	beq.n	800190e <HAL_ADC_IRQHandler+0x7a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d004      	beq.n	800190e <HAL_ADC_IRQHandler+0x7a>
 8001904:	f640 3149 	movw	r1, #2889	; 0xb49
 8001908:	4865      	ldr	r0, [pc, #404]	; (8001aa0 <HAL_ADC_IRQHandler+0x20c>)
 800190a:	f7fe ff4e 	bl	80007aa <assert_failed>
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b04      	cmp	r3, #4
 800191a:	d106      	bne.n	800192a <HAL_ADC_IRQHandler+0x96>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b04      	cmp	r3, #4
 8001928:	d00f      	beq.n	800194a <HAL_ADC_IRQHandler+0xb6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001934:	2b08      	cmp	r3, #8
 8001936:	f040 80cc 	bne.w	8001ad2 <HAL_ADC_IRQHandler+0x23e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b08      	cmp	r3, #8
 8001946:	f040 80c4 	bne.w	8001ad2 <HAL_ADC_IRQHandler+0x23e>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	d105      	bne.n	8001962 <HAL_ADC_IRQHandler+0xce>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800196a:	d004      	beq.n	8001976 <HAL_ADC_IRQHandler+0xe2>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <HAL_ADC_IRQHandler+0x200>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d106      	bne.n	8001984 <HAL_ADC_IRQHandler+0xf0>
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_ADC_IRQHandler+0x210>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03e      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x16c>
 8001982:	e005      	b.n	8001990 <HAL_ADC_IRQHandler+0xfc>
 8001984:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <HAL_ADC_IRQHandler+0x214>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2b00      	cmp	r3, #0
 800198e:	d037      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x16c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_IRQHandler+0x110>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a3d      	ldr	r2, [pc, #244]	; (8001a94 <HAL_ADC_IRQHandler+0x200>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x11e>
 80019a4:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_ADC_IRQHandler+0x210>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d027      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x16c>
 80019b0:	e005      	b.n	80019be <HAL_ADC_IRQHandler+0x12a>
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_ADC_IRQHandler+0x214>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d020      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x16c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c6:	d004      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x13e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a31      	ldr	r2, [pc, #196]	; (8001a94 <HAL_ADC_IRQHandler+0x200>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d106      	bne.n	80019e0 <HAL_ADC_IRQHandler+0x14c>
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_ADC_IRQHandler+0x210>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2b09      	cmp	r3, #9
 80019dc:	d010      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x16c>
 80019de:	e005      	b.n	80019ec <HAL_ADC_IRQHandler+0x158>
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_ADC_IRQHandler+0x214>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	d009      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x16c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f4:	d004      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x16c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_ADC_IRQHandler+0x204>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d104      	bne.n	8001a0a <HAL_ADC_IRQHandler+0x176>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	e00f      	b.n	8001a2a <HAL_ADC_IRQHandler+0x196>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a12:	d004      	beq.n	8001a1e <HAL_ADC_IRQHandler+0x18a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_ADC_IRQHandler+0x200>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d102      	bne.n	8001a24 <HAL_ADC_IRQHandler+0x190>
 8001a1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a22:	e000      	b.n	8001a26 <HAL_ADC_IRQHandler+0x192>
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_ADC_IRQHandler+0x204>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d145      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x230>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d140      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x230>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d139      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x230>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d126      	bne.n	8001aac <HAL_ADC_IRQHandler+0x218>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020c 	bic.w	r2, r2, #12
 8001a6c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11e      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x230>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
 8001a92:	e017      	b.n	8001ac4 <HAL_ADC_IRQHandler+0x230>
 8001a94:	50000100 	.word	0x50000100
 8001a98:	50000400 	.word	0x50000400
 8001a9c:	50000500 	.word	0x50000500
 8001aa0:	0800ed90 	.word	0x0800ed90
 8001aa4:	50000300 	.word	0x50000300
 8001aa8:	50000700 	.word	0x50000700
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff f8ff 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d106      	bne.n	8001aee <HAL_ADC_IRQHandler+0x25a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	d00f      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x27a>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001af8:	2b40      	cmp	r3, #64	; 0x40
 8001afa:	f040 813c 	bne.w	8001d76 <HAL_ADC_IRQHandler+0x4e2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b08:	2b40      	cmp	r3, #64	; 0x40
 8001b0a:	f040 8134 	bne.w	8001d76 <HAL_ADC_IRQHandler+0x4e2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b22:	d004      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x29a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a85      	ldr	r2, [pc, #532]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d106      	bne.n	8001b3c <HAL_ADC_IRQHandler+0x2a8>
 8001b2e:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <HAL_ADC_IRQHandler+0x4b0>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d03e      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x324>
 8001b3a:	e005      	b.n	8001b48 <HAL_ADC_IRQHandler+0x2b4>
 8001b3c:	4b82      	ldr	r3, [pc, #520]	; (8001d48 <HAL_ADC_IRQHandler+0x4b4>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d037      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x324>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b50:	d004      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x2c8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7a      	ldr	r2, [pc, #488]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d106      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x2d6>
 8001b5c:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <HAL_ADC_IRQHandler+0x4b0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d027      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x324>
 8001b68:	e005      	b.n	8001b76 <HAL_ADC_IRQHandler+0x2e2>
 8001b6a:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <HAL_ADC_IRQHandler+0x4b4>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d020      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x324>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b7e:	d004      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x2f6>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d106      	bne.n	8001b98 <HAL_ADC_IRQHandler+0x304>
 8001b8a:	4b6e      	ldr	r3, [pc, #440]	; (8001d44 <HAL_ADC_IRQHandler+0x4b0>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	d010      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x324>
 8001b96:	e005      	b.n	8001ba4 <HAL_ADC_IRQHandler+0x310>
 8001b98:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <HAL_ADC_IRQHandler+0x4b4>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d009      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x324>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bac:	d004      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x324>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a66      	ldr	r2, [pc, #408]	; (8001d4c <HAL_ADC_IRQHandler+0x4b8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d104      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x32e>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	e00f      	b.n	8001be2 <HAL_ADC_IRQHandler+0x34e>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bca:	d004      	beq.n	8001bd6 <HAL_ADC_IRQHandler+0x342>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a5b      	ldr	r2, [pc, #364]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d102      	bne.n	8001bdc <HAL_ADC_IRQHandler+0x348>
 8001bd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bda:	e000      	b.n	8001bde <HAL_ADC_IRQHandler+0x34a>
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_ADC_IRQHandler+0x4b8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f040 80bb 	bne.w	8001d68 <HAL_ADC_IRQHandler+0x4d4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00d      	beq.n	8001c18 <HAL_ADC_IRQHandler+0x384>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80ae 	bne.w	8001d68 <HAL_ADC_IRQHandler+0x4d4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80a8 	bne.w	8001d68 <HAL_ADC_IRQHandler+0x4d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	f040 80a0 	bne.w	8001d68 <HAL_ADC_IRQHandler+0x4d4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x3a8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a42      	ldr	r2, [pc, #264]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d106      	bne.n	8001c4a <HAL_ADC_IRQHandler+0x3b6>
 8001c3c:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_ADC_IRQHandler+0x4b0>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d03e      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x432>
 8001c48:	e005      	b.n	8001c56 <HAL_ADC_IRQHandler+0x3c2>
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <HAL_ADC_IRQHandler+0x4b4>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d037      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x432>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5e:	d004      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x3d6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a36      	ldr	r2, [pc, #216]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d106      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x3e4>
 8001c6a:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_ADC_IRQHandler+0x4b0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d027      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x432>
 8001c76:	e005      	b.n	8001c84 <HAL_ADC_IRQHandler+0x3f0>
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_ADC_IRQHandler+0x4b4>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d020      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x432>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c8c:	d004      	beq.n	8001c98 <HAL_ADC_IRQHandler+0x404>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0x412>
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_ADC_IRQHandler+0x4b0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	2b07      	cmp	r3, #7
 8001ca2:	d010      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x432>
 8001ca4:	e005      	b.n	8001cb2 <HAL_ADC_IRQHandler+0x41e>
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_ADC_IRQHandler+0x4b4>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	d009      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x432>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cba:	d004      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x432>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <HAL_ADC_IRQHandler+0x4b8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d104      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x43c>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e00f      	b.n	8001cf0 <HAL_ADC_IRQHandler+0x45c>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x450>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_ADC_IRQHandler+0x4ac>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d102      	bne.n	8001cea <HAL_ADC_IRQHandler+0x456>
 8001ce4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ce8:	e000      	b.n	8001cec <HAL_ADC_IRQHandler+0x458>
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_ADC_IRQHandler+0x4b8>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d136      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x4d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d123      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x4bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d16:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d11b      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x4d4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d3c:	e014      	b.n	8001d68 <HAL_ADC_IRQHandler+0x4d4>
 8001d3e:	bf00      	nop
 8001d40:	50000100 	.word	0x50000100
 8001d44:	50000300 	.word	0x50000300
 8001d48:	50000700 	.word	0x50000700
 8001d4c:	50000400 	.word	0x50000400
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f043 0210 	orr.w	r2, r3, #16
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8db 	bl	8001f24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2260      	movs	r2, #96	; 0x60
 8001d74:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d113      	bne.n	8001dac <HAL_ADC_IRQHandler+0x518>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d10c      	bne.n	8001dac <HAL_ADC_IRQHandler+0x518>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe ff9c 	bl	8000cdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dba:	d115      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x554>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dca:	d10d      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x554>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8b7 	bl	8001f4c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df6:	d115      	bne.n	8001e24 <HAL_ADC_IRQHandler+0x590>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e06:	d10d      	bne.n	8001e24 <HAL_ADC_IRQHandler+0x590>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8a3 	bl	8001f60 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e22:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d149      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x632>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d142      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x632>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d102      	bne.n	8001e4e <HAL_ADC_IRQHandler+0x5ba>
    {
      overrun_error = 1U;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e025      	b.n	8001e9a <HAL_ADC_IRQHandler+0x606>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e56:	d004      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x5ce>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <HAL_ADC_IRQHandler+0x684>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_IRQHandler+0x5d2>
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_ADC_IRQHandler+0x688>)
 8001e64:	e000      	b.n	8001e68 <HAL_ADC_IRQHandler+0x5d4>
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_ADC_IRQHandler+0x68c>)
 8001e68:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_ADC_IRQHandler+0x5f6>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10a      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x606>
        {
          overrun_error = 1U;  
 8001e84:	2301      	movs	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e007      	b.n	8001e9a <HAL_ADC_IRQHandler+0x606>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_ADC_IRQHandler+0x606>
        {
          overrun_error = 1U;  
 8001e96:	2301      	movs	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10e      	bne.n	8001ebe <HAL_ADC_IRQHandler+0x62a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe ff19 	bl	8000cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed4:	d11b      	bne.n	8001f0e <HAL_ADC_IRQHandler+0x67a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee4:	d113      	bne.n	8001f0e <HAL_ADC_IRQHandler+0x67a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0208 	orr.w	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f06:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f815 	bl	8001f38 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	50000100 	.word	0x50000100
 8001f1c:	50000300 	.word	0x50000300
 8001f20:	50000700 	.word	0x50000700

08001f24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09a      	sub	sp, #104	; 0x68
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f90:	d013      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x46>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6b      	ldr	r2, [pc, #428]	; (8002144 <HAL_ADC_ConfigChannel+0x1d0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x46>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a69      	ldr	r2, [pc, #420]	; (8002148 <HAL_ADC_ConfigChannel+0x1d4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x46>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a68      	ldr	r2, [pc, #416]	; (800214c <HAL_ADC_ConfigChannel+0x1d8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x46>
 8001fb0:	f241 51b7 	movw	r1, #5559	; 0x15b7
 8001fb4:	4866      	ldr	r0, [pc, #408]	; (8002150 <HAL_ADC_ConfigChannel+0x1dc>)
 8001fb6:	f7fe fbf8 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d040      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d03c      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d038      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d034      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d030      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d02c      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	d028      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d024      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d020      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d01c      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b0b      	cmp	r3, #11
 8002010:	d018      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d014      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b0d      	cmp	r3, #13
 8002020:	d010      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b0e      	cmp	r3, #14
 8002028:	d00c      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b0f      	cmp	r3, #15
 8002030:	d008      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b10      	cmp	r3, #16
 8002038:	d004      	beq.n	8002044 <HAL_ADC_ConfigChannel+0xd0>
 800203a:	f241 51b8 	movw	r1, #5560	; 0x15b8
 800203e:	4844      	ldr	r0, [pc, #272]	; (8002150 <HAL_ADC_ConfigChannel+0x1dc>)
 8002040:	f7fe fbb3 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d01c      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d018      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d014      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d010      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d00c      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b06      	cmp	r3, #6
 800207a:	d008      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b07      	cmp	r3, #7
 8002082:	d004      	beq.n	800208e <HAL_ADC_ConfigChannel+0x11a>
 8002084:	f241 51b9 	movw	r1, #5561	; 0x15b9
 8002088:	4831      	ldr	r0, [pc, #196]	; (8002150 <HAL_ADC_ConfigChannel+0x1dc>)
 800208a:	f7fe fb8e 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x134>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d004      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x134>
 800209e:	f241 51ba 	movw	r1, #5562	; 0x15ba
 80020a2:	482b      	ldr	r0, [pc, #172]	; (8002150 <HAL_ADC_ConfigChannel+0x1dc>)
 80020a4:	f7fe fb81 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d014      	beq.n	80020da <HAL_ADC_ConfigChannel+0x166>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d010      	beq.n	80020da <HAL_ADC_ConfigChannel+0x166>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d00c      	beq.n	80020da <HAL_ADC_ConfigChannel+0x166>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d008      	beq.n	80020da <HAL_ADC_ConfigChannel+0x166>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d004      	beq.n	80020da <HAL_ADC_ConfigChannel+0x166>
 80020d0:	f241 51bb 	movw	r1, #5563	; 0x15bb
 80020d4:	481e      	ldr	r0, [pc, #120]	; (8002150 <HAL_ADC_ConfigChannel+0x1dc>)
 80020d6:	f7fe fb68 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0318 	and.w	r3, r3, #24
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d104      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x17e>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f0:	d330      	bcc.n	8002154 <HAL_ADC_ConfigChannel+0x1e0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0318 	and.w	r3, r3, #24
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d104      	bne.n	800210a <HAL_ADC_ConfigChannel+0x196>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002108:	d324      	bcc.n	8002154 <HAL_ADC_ConfigChannel+0x1e0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0318 	and.w	r3, r3, #24
 8002114:	2b10      	cmp	r3, #16
 8002116:	d103      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1ac>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	2bff      	cmp	r3, #255	; 0xff
 800211e:	d919      	bls.n	8002154 <HAL_ADC_ConfigChannel+0x1e0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0318 	and.w	r3, r3, #24
 800212a:	2b18      	cmp	r3, #24
 800212c:	d103      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x1c2>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b3f      	cmp	r3, #63	; 0x3f
 8002134:	d90e      	bls.n	8002154 <HAL_ADC_ConfigChannel+0x1e0>
 8002136:	f241 51bc 	movw	r1, #5564	; 0x15bc
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <HAL_ADC_ConfigChannel+0x1dc>)
 800213c:	f7fe fb35 	bl	80007aa <assert_failed>
 8002140:	e008      	b.n	8002154 <HAL_ADC_ConfigChannel+0x1e0>
 8002142:	bf00      	nop
 8002144:	50000100 	.word	0x50000100
 8002148:	50000400 	.word	0x50000400
 800214c:	50000500 	.word	0x50000500
 8002150:	0800ed90 	.word	0x0800ed90
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d063      	beq.n	8002224 <HAL_ADC_ConfigChannel+0x2b0>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	f000 809c 	beq.w	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b02      	cmp	r3, #2
 800216c:	f000 8097 	beq.w	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b03      	cmp	r3, #3
 8002176:	f000 8092 	beq.w	800229e <HAL_ADC_ConfigChannel+0x32a>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b04      	cmp	r3, #4
 8002180:	f000 808d 	beq.w	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b05      	cmp	r3, #5
 800218a:	f000 8088 	beq.w	800229e <HAL_ADC_ConfigChannel+0x32a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b06      	cmp	r3, #6
 8002194:	f000 8083 	beq.w	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b07      	cmp	r3, #7
 800219e:	d07e      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d07a      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d076      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b0a      	cmp	r3, #10
 80021b6:	d072      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b0b      	cmp	r3, #11
 80021be:	d06e      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d06a      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b0d      	cmp	r3, #13
 80021ce:	d066      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b0e      	cmp	r3, #14
 80021d6:	d062      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d05e      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d05a      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b11      	cmp	r3, #17
 80021ee:	d056      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b12      	cmp	r3, #18
 80021f6:	d052      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d04e      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b11      	cmp	r3, #17
 8002206:	d04a      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b11      	cmp	r3, #17
 800220e:	d046      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b11      	cmp	r3, #17
 8002216:	d042      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002218:	f241 51c4 	movw	r1, #5572	; 0x15c4
 800221c:	489b      	ldr	r0, [pc, #620]	; (800248c <HAL_ADC_ConfigChannel+0x518>)
 800221e:	f7fe fac4 	bl	80007aa <assert_failed>
 8002222:	e03c      	b.n	800229e <HAL_ADC_ConfigChannel+0x32a>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d038      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d034      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d030      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d02c      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d028      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d024      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b07      	cmp	r3, #7
 800225a:	d020      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d01c      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b09      	cmp	r3, #9
 800226a:	d018      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b0a      	cmp	r3, #10
 8002272:	d014      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b0b      	cmp	r3, #11
 800227a:	d010      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d00c      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b0d      	cmp	r3, #13
 800228a:	d008      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b0e      	cmp	r3, #14
 8002292:	d004      	beq.n	800229e <HAL_ADC_ConfigChannel+0x32a>
 8002294:	f241 51c8 	movw	r1, #5576	; 0x15c8
 8002298:	487c      	ldr	r0, [pc, #496]	; (800248c <HAL_ADC_ConfigChannel+0x518>)
 800229a:	f7fe fa86 	bl	80007aa <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x338>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e2cb      	b.n	8002844 <HAL_ADC_ConfigChannel+0x8d0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 82af 	bne.w	8002822 <HAL_ADC_ConfigChannel+0x8ae>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d81c      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x392>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	461a      	mov	r2, r3
 80022e0:	231f      	movs	r3, #31
 80022e2:	4093      	lsls	r3, r2
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4019      	ands	r1, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
 8002304:	e063      	b.n	80023ce <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b09      	cmp	r3, #9
 800230c:	d81e      	bhi.n	800234c <HAL_ADC_ConfigChannel+0x3d8>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	3b1e      	subs	r3, #30
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	4019      	ands	r1, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	3b1e      	subs	r3, #30
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
 800234a:	e040      	b.n	80023ce <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b0e      	cmp	r3, #14
 8002352:	d81e      	bhi.n	8002392 <HAL_ADC_ConfigChannel+0x41e>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	3b3c      	subs	r3, #60	; 0x3c
 8002368:	221f      	movs	r2, #31
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	4019      	ands	r1, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	3b3c      	subs	r3, #60	; 0x3c
 8002384:	fa00 f203 	lsl.w	r2, r0, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
 8002390:	e01d      	b.n	80023ce <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	3b5a      	subs	r3, #90	; 0x5a
 80023a6:	221f      	movs	r2, #31
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4019      	ands	r1, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	3b5a      	subs	r3, #90	; 0x5a
 80023c2:	fa00 f203 	lsl.w	r2, r0, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 80e6 	bne.w	80025aa <HAL_ADC_ConfigChannel+0x636>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b09      	cmp	r3, #9
 80023e4:	d91c      	bls.n	8002420 <HAL_ADC_ConfigChannel+0x4ac>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6999      	ldr	r1, [r3, #24]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	3b1e      	subs	r3, #30
 80023f8:	2207      	movs	r2, #7
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	4019      	ands	r1, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6898      	ldr	r0, [r3, #8]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	3b1e      	subs	r3, #30
 8002412:	fa00 f203 	lsl.w	r2, r0, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	e019      	b.n	8002454 <HAL_ADC_ConfigChannel+0x4e0>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6959      	ldr	r1, [r3, #20]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	2207      	movs	r2, #7
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	4019      	ands	r1, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6898      	ldr	r0, [r3, #8]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	3b01      	subs	r3, #1
 8002472:	2b03      	cmp	r3, #3
 8002474:	d850      	bhi.n	8002518 <HAL_ADC_ConfigChannel+0x5a4>
 8002476:	a201      	add	r2, pc, #4	; (adr r2, 800247c <HAL_ADC_ConfigChannel+0x508>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	08002491 	.word	0x08002491
 8002480:	080024b3 	.word	0x080024b3
 8002484:	080024d5 	.word	0x080024d5
 8002488:	080024f7 	.word	0x080024f7
 800248c:	0800ed90 	.word	0x0800ed90
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002496:	4b9a      	ldr	r3, [pc, #616]	; (8002700 <HAL_ADC_ConfigChannel+0x78c>)
 8002498:	4013      	ands	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	0691      	lsls	r1, r2, #26
 80024a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024a2:	430a      	orrs	r2, r1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024b0:	e07e      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024b8:	4b91      	ldr	r3, [pc, #580]	; (8002700 <HAL_ADC_ConfigChannel+0x78c>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	0691      	lsls	r1, r2, #26
 80024c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c4:	430a      	orrs	r2, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024d2:	e06d      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x63c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <HAL_ADC_ConfigChannel+0x78c>)
 80024dc:	4013      	ands	r3, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	0691      	lsls	r1, r2, #26
 80024e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024e6:	430a      	orrs	r2, r1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024f4:	e05c      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024fc:	4b80      	ldr	r3, [pc, #512]	; (8002700 <HAL_ADC_ConfigChannel+0x78c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	0691      	lsls	r1, r2, #26
 8002506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002508:	430a      	orrs	r2, r1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002514:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002516:	e04b      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x63c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800253a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	069b      	lsls	r3, r3, #26
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x610>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002582:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	429a      	cmp	r2, r3
 8002596:	d10a      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x63a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80025a8:	e001      	b.n	80025ae <HAL_ADC_ConfigChannel+0x63a>
    }

  }
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x63c>
      break;
 80025ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x65c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x65c>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x65e>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 8130 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x8c4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d00f      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x68c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80025fe:	e049      	b.n	8002694 <HAL_ADC_ConfigChannel+0x720>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	409a      	lsls	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b09      	cmp	r3, #9
 8002620:	d91c      	bls.n	800265c <HAL_ADC_ConfigChannel+0x6e8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6999      	ldr	r1, [r3, #24]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	3b1b      	subs	r3, #27
 8002634:	2207      	movs	r2, #7
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	4019      	ands	r1, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6898      	ldr	r0, [r3, #8]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	3b1b      	subs	r3, #27
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	e01b      	b.n	8002694 <HAL_ADC_ConfigChannel+0x720>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6959      	ldr	r1, [r3, #20]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	4019      	ands	r1, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6898      	ldr	r0, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	fa00 f203 	lsl.w	r2, r0, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x734>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_ADC_ConfigChannel+0x790>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x738>
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_ADC_ConfigChannel+0x794>)
 80026aa:	e000      	b.n	80026ae <HAL_ADC_ConfigChannel+0x73a>
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_ADC_ConfigChannel+0x798>)
 80026ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x750>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d015      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80026c8:	2b11      	cmp	r3, #17
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x764>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80026dc:	2b12      	cmp	r3, #18
 80026de:	f040 80ab 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x8c4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80026e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 80a4 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x8c4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f8:	d10a      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x79c>
 80026fa:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_ADC_ConfigChannel+0x790>)
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	e022      	b.n	8002746 <HAL_ADC_ConfigChannel+0x7d2>
 8002700:	83fff000 	.word	0x83fff000
 8002704:	50000100 	.word	0x50000100
 8002708:	50000300 	.word	0x50000300
 800270c:	50000700 	.word	0x50000700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_ADC_ConfigChannel+0x8d8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d103      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x7ae>
 800271a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e011      	b.n	8002746 <HAL_ADC_ConfigChannel+0x7d2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a4a      	ldr	r2, [pc, #296]	; (8002850 <HAL_ADC_ConfigChannel+0x8dc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x7be>
 800272c:	4b49      	ldr	r3, [pc, #292]	; (8002854 <HAL_ADC_ConfigChannel+0x8e0>)
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e009      	b.n	8002746 <HAL_ADC_ConfigChannel+0x7d2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a47      	ldr	r2, [pc, #284]	; (8002854 <HAL_ADC_ConfigChannel+0x8e0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d102      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x7ce>
 800273c:	4b44      	ldr	r3, [pc, #272]	; (8002850 <HAL_ADC_ConfigChannel+0x8dc>)
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e001      	b.n	8002746 <HAL_ADC_ConfigChannel+0x7d2>
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d108      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7f2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7f2>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_ADC_ConfigChannel+0x7f4>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d150      	bne.n	800280e <HAL_ADC_ConfigChannel+0x89a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800276c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <HAL_ADC_ConfigChannel+0x820>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_ADC_ConfigChannel+0x81a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x81a>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_ADC_ConfigChannel+0x81c>
 800278e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002790:	2b00      	cmp	r3, #0
 8002792:	d13c      	bne.n	800280e <HAL_ADC_ConfigChannel+0x89a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d11d      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x864>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a4:	d118      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x864>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80027a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027b2:	4b29      	ldr	r3, [pc, #164]	; (8002858 <HAL_ADC_ConfigChannel+0x8e4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_ADC_ConfigChannel+0x8e8>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	0c9a      	lsrs	r2, r3, #18
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027c8:	e002      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x85c>
          {
            wait_loop_index--;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f9      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x856>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027d6:	e02e      	b.n	8002836 <HAL_ADC_ConfigChannel+0x8c2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b11      	cmp	r3, #17
 80027de:	d10b      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x884>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e8:	d106      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x884>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027f6:	e01e      	b.n	8002836 <HAL_ADC_ConfigChannel+0x8c2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b12      	cmp	r3, #18
 80027fe:	d11a      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x8c2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800280c:	e013      	b.n	8002836 <HAL_ADC_ConfigChannel+0x8c2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002820:	e00a      	b.n	8002838 <HAL_ADC_ConfigChannel+0x8c4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002834:	e000      	b.n	8002838 <HAL_ADC_ConfigChannel+0x8c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002836:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002840:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002844:	4618      	mov	r0, r3
 8002846:	3768      	adds	r7, #104	; 0x68
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	50000100 	.word	0x50000100
 8002850:	50000400 	.word	0x50000400
 8002854:	50000500 	.word	0x50000500
 8002858:	20000000 	.word	0x20000000
 800285c:	431bde83 	.word	0x431bde83

08002860 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b09c      	sub	sp, #112	; 0x70
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002880:	d013      	beq.n	80028aa <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a85      	ldr	r2, [pc, #532]	; (8002a9c <HAL_ADCEx_InjectedConfigChannel+0x23c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_ADCEx_InjectedConfigChannel+0x4a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a83      	ldr	r2, [pc, #524]	; (8002aa0 <HAL_ADCEx_InjectedConfigChannel+0x240>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a82      	ldr	r2, [pc, #520]	; (8002aa4 <HAL_ADCEx_InjectedConfigChannel+0x244>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_ADCEx_InjectedConfigChannel+0x4a>
 80028a0:	f241 718d 	movw	r1, #6029	; 0x178d
 80028a4:	4880      	ldr	r0, [pc, #512]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80028a6:	f7fd ff80 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d01c      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d018      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d014      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d010      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d00c      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d008      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b07      	cmp	r3, #7
 80028e8:	d004      	beq.n	80028f4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 80028ea:	f241 718e 	movw	r1, #6030	; 0x178e
 80028ee:	486e      	ldr	r0, [pc, #440]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80028f0:	f7fd ff5b 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_ADCEx_InjectedConfigChannel+0xae>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d004      	beq.n	800290e <HAL_ADCEx_InjectedConfigChannel+0xae>
 8002904:	f241 718f 	movw	r1, #6031	; 0x178f
 8002908:	4867      	ldr	r0, [pc, #412]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 800290a:	f7fd ff4e 	bl	80007aa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	7f5b      	ldrb	r3, [r3, #29]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_ADCEx_InjectedConfigChannel+0xc8>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	7f5b      	ldrb	r3, [r3, #29]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d004      	beq.n	8002928 <HAL_ADCEx_InjectedConfigChannel+0xc8>
 800291e:	f241 7190 	movw	r1, #6032	; 0x1790
 8002922:	4861      	ldr	r0, [pc, #388]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8002924:	f7fd ff41 	bl	80007aa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	7f9b      	ldrb	r3, [r3, #30]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	7f9b      	ldrb	r3, [r3, #30]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d004      	beq.n	8002942 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 8002938:	f241 7191 	movw	r1, #6033	; 0x1791
 800293c:	485a      	ldr	r0, [pc, #360]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 800293e:	f7fd ff34 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d010      	beq.n	800296c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d00c      	beq.n	800296c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b80      	cmp	r3, #128	; 0x80
 8002958:	d008      	beq.n	800296c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2bc0      	cmp	r3, #192	; 0xc0
 8002960:	d004      	beq.n	800296c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8002962:	f241 7192 	movw	r1, #6034	; 0x1792
 8002966:	4850      	ldr	r0, [pc, #320]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8002968:	f7fd ff1f 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	d055      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	2b34      	cmp	r3, #52	; 0x34
 800297a:	d051      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	2b10      	cmp	r3, #16
 8002982:	d04d      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	2b38      	cmp	r3, #56	; 0x38
 800298a:	d049      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	2b18      	cmp	r3, #24
 8002992:	d045      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a44      	ldr	r2, [pc, #272]	; (8002aac <HAL_ADCEx_InjectedConfigChannel+0x24c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d040      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	2b18      	cmp	r3, #24
 80029a4:	d03c      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2b38      	cmp	r3, #56	; 0x38
 80029ac:	d038      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d034      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d030      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02c      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d028      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d024      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	2b2c      	cmp	r3, #44	; 0x2c
 80029dc:	d020      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	2b30      	cmp	r3, #48	; 0x30
 80029e4:	d01c      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2b14      	cmp	r3, #20
 80029ec:	d018      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	2b1c      	cmp	r3, #28
 80029f4:	d014      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	2b24      	cmp	r3, #36	; 0x24
 80029fc:	d010      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	2b28      	cmp	r3, #40	; 0x28
 8002a04:	d00c      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	2b3c      	cmp	r3, #60	; 0x3c
 8002a0c:	d008      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d004      	beq.n	8002a20 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002a16:	f241 7193 	movw	r1, #6035	; 0x1793
 8002a1a:	4823      	ldr	r0, [pc, #140]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8002a1c:	f7fd fec5 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d014      	beq.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d010      	beq.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d00c      	beq.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d008      	beq.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d004      	beq.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8002a48:	f241 7194 	movw	r1, #6036	; 0x1794
 8002a4c:	4816      	ldr	r0, [pc, #88]	; (8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8002a4e:	f7fd feac 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0318 	and.w	r3, r3, #24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_ADCEx_InjectedConfigChannel+0x20a>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d332      	bcc.n	8002ad0 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0318 	and.w	r3, r3, #24
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d104      	bne.n	8002a82 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a80:	d326      	bcc.n	8002ad0 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0318 	and.w	r3, r3, #24
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2bff      	cmp	r3, #255	; 0xff
 8002a96:	d91b      	bls.n	8002ad0 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8002a98:	e00a      	b.n	8002ab0 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8002a9a:	bf00      	nop
 8002a9c:	50000100 	.word	0x50000100
 8002aa0:	50000400 	.word	0x50000400
 8002aa4:	50000500 	.word	0x50000500
 8002aa8:	0800ed90 	.word	0x0800ed90
 8002aac:	00010008 	.word	0x00010008
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0318 	and.w	r3, r3, #24
 8002aba:	2b18      	cmp	r3, #24
 8002abc:	d103      	bne.n	8002ac6 <HAL_ADCEx_InjectedConfigChannel+0x266>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8002ac4:	d904      	bls.n	8002ad0 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8002ac6:	f241 7195 	movw	r1, #6037	; 0x1795
 8002aca:	4889      	ldr	r0, [pc, #548]	; (8002cf0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8002acc:	f7fd fe6d 	bl	80007aa <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02e      	beq.n	8002b36 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  {
    assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d010      	beq.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d00c      	beq.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d008      	beq.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d004      	beq.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002af8:	f241 7199 	movw	r1, #6041	; 0x1799
 8002afc:	487c      	ldr	r0, [pc, #496]	; (8002cf0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8002afe:	f7fd fe54 	bl	80007aa <assert_failed>
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d904      	bls.n	8002b1c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
 8002b12:	f241 719a 	movw	r1, #6042	; 0x179a
 8002b16:	4876      	ldr	r0, [pc, #472]	; (8002cf0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8002b18:	f7fd fe47 	bl	80007aa <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	7f1b      	ldrb	r3, [r3, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	7f1b      	ldrb	r3, [r3, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d004      	beq.n	8002b36 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 8002b2c:	f241 719b 	movw	r1, #6043	; 0x179b
 8002b30:	486f      	ldr	r0, [pc, #444]	; (8002cf0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8002b32:	f7fd fe3a 	bl	80007aa <assert_failed>
  }
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d063      	beq.n	8002c06 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
  {
    assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f000 809c 	beq.w	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f000 8097 	beq.w	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	f000 8092 	beq.w	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	f000 808d 	beq.w	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	f000 8088 	beq.w	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	f000 8083 	beq.w	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b07      	cmp	r3, #7
 8002b80:	d07e      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d07a      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	d076      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b0a      	cmp	r3, #10
 8002b98:	d072      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b0b      	cmp	r3, #11
 8002ba0:	d06e      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d06a      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b0d      	cmp	r3, #13
 8002bb0:	d066      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b0e      	cmp	r3, #14
 8002bb8:	d062      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d05e      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d05a      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b11      	cmp	r3, #17
 8002bd0:	d056      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b12      	cmp	r3, #18
 8002bd8:	d052      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b0f      	cmp	r3, #15
 8002be0:	d04e      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b11      	cmp	r3, #17
 8002be8:	d04a      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b11      	cmp	r3, #17
 8002bf0:	d046      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b11      	cmp	r3, #17
 8002bf8:	d042      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002bfa:	f241 71a3 	movw	r1, #6051	; 0x17a3
 8002bfe:	483c      	ldr	r0, [pc, #240]	; (8002cf0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8002c00:	f7fd fdd3 	bl	80007aa <assert_failed>
 8002c04:	e03c      	b.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d038      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d034      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d030      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d02c      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d028      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d024      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b07      	cmp	r3, #7
 8002c3c:	d020      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d01c      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b09      	cmp	r3, #9
 8002c4c:	d018      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b0a      	cmp	r3, #10
 8002c54:	d014      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b0b      	cmp	r3, #11
 8002c5c:	d010      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d00c      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b0d      	cmp	r3, #13
 8002c6c:	d008      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b0e      	cmp	r3, #14
 8002c74:	d004      	beq.n	8002c80 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002c76:	f241 71a7 	movw	r1, #6055	; 0x17a7
 8002c7a:	481d      	ldr	r0, [pc, #116]	; (8002cf0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8002c7c:	f7fd fd95 	bl	80007aa <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADCEx_InjectedConfigChannel+0x42e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e36a      	b.n	8003364 <HAL_ADCEx_InjectedConfigChannel+0xb04>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_ADCEx_InjectedConfigChannel+0x446>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d158      	bne.n	8002d58 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d14a      	bne.n	8002d44 <HAL_ADCEx_InjectedConfigChannel+0x4e4>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d032      	beq.n	8002d1c <HAL_ADCEx_InjectedConfigChannel+0x4bc>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	021a      	lsls	r2, r3, #8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	490c      	ldr	r1, [pc, #48]	; (8002cf4 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8002cc2:	428b      	cmp	r3, r1
 8002cc4:	d004      	beq.n	8002cd0 <HAL_ADCEx_InjectedConfigChannel+0x470>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	490b      	ldr	r1, [pc, #44]	; (8002cf8 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8002ccc:	428b      	cmp	r3, r1
 8002cce:	d11b      	bne.n	8002d08 <HAL_ADCEx_InjectedConfigChannel+0x4a8>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d015      	beq.n	8002d04 <HAL_ADCEx_InjectedConfigChannel+0x4a4>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	2b14      	cmp	r3, #20
 8002cde:	d00f      	beq.n	8002d00 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	2b1c      	cmp	r3, #28
 8002ce6:	d009      	beq.n	8002cfc <HAL_ADCEx_InjectedConfigChannel+0x49c>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	e00e      	b.n	8002d0c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8002cee:	bf00      	nop
 8002cf0:	0800ed90 	.word	0x0800ed90
 8002cf4:	50000400 	.word	0x50000400
 8002cf8:	50000500 	.word	0x50000500
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	e005      	b.n	8002d0c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8002d00:	231c      	movs	r3, #28
 8002d02:	e003      	b.n	8002d0c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8002d04:	2334      	movs	r3, #52	; 0x34
 8002d06:	e001      	b.n	8002d0c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	4313      	orrs	r3, r2
 8002d14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d16:	4313      	orrs	r3, r2
 8002d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1a:	e005      	b.n	8002d28 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d24:	4313      	orrs	r3, r2
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d2e:	4b87      	ldr	r3, [pc, #540]	; (8002f4c <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d40:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002d42:	e07f      	b.n	8002e44 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002d56:	e075      	b.n	8002e44 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d140      	bne.n	8002de2 <HAL_ADCEx_InjectedConfigChannel+0x582>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d02d      	beq.n	8002dd2 <HAL_ADCEx_InjectedConfigChannel+0x572>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	1e59      	subs	r1, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4872      	ldr	r0, [pc, #456]	; (8002f50 <HAL_ADCEx_InjectedConfigChannel+0x6f0>)
 8002d86:	4283      	cmp	r3, r0
 8002d88:	d004      	beq.n	8002d94 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4871      	ldr	r0, [pc, #452]	; (8002f54 <HAL_ADCEx_InjectedConfigChannel+0x6f4>)
 8002d90:	4283      	cmp	r3, r0
 8002d92:	d114      	bne.n	8002dbe <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d00e      	beq.n	8002dba <HAL_ADCEx_InjectedConfigChannel+0x55a>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	2b14      	cmp	r3, #20
 8002da2:	d008      	beq.n	8002db6 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	2b1c      	cmp	r3, #28
 8002daa:	d002      	beq.n	8002db2 <HAL_ADCEx_InjectedConfigChannel+0x552>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	e007      	b.n	8002dc2 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8002db2:	2310      	movs	r3, #16
 8002db4:	e005      	b.n	8002dc2 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8002db6:	231c      	movs	r3, #28
 8002db8:	e003      	b.n	8002dc2 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8002dba:	2334      	movs	r3, #52	; 0x34
 8002dbc:	e001      	b.n	8002dc2 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4319      	orrs	r1, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	649a      	str	r2, [r3, #72]	; 0x48
 8002dd0:	e007      	b.n	8002de2 <HAL_ADCEx_InjectedConfigChannel+0x582>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	3302      	adds	r3, #2
 8002df4:	221f      	movs	r2, #31
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4019      	ands	r1, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	3302      	adds	r3, #2
 8002e10:	fa00 f303 	lsl.w	r3, r0, r3
 8002e14:	ea41 0203 	orr.w	r2, r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e34:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d12d      	bne.n	8002eae <HAL_ADCEx_InjectedConfigChannel+0x64e>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7f5b      	ldrb	r3, [r3, #29]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d110      	bne.n	8002e7c <HAL_ADCEx_InjectedConfigChannel+0x61c>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	7f9b      	ldrb	r3, [r3, #30]
 8002e68:	055a      	lsls	r2, r3, #21
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	7f1b      	ldrb	r3, [r3, #28]
 8002e6e:	051b      	lsls	r3, r3, #20
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	e018      	b.n	8002eae <HAL_ADCEx_InjectedConfigChannel+0x64e>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	7f9b      	ldrb	r3, [r3, #30]
 8002e8a:	055a      	lsls	r2, r3, #21
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	7f1b      	ldrb	r3, [r3, #28]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <HAL_ADCEx_InjectedConfigChannel+0x64e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 8110 	bne.w	80030de <HAL_ADCEx_InjectedConfigChannel+0x87e>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_ADCEx_InjectedConfigChannel+0x680>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	7f5b      	ldrb	r3, [r3, #29]
 8002ed4:	065a      	lsls	r2, r3, #25
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	e014      	b.n	8002f0a <HAL_ADCEx_InjectedConfigChannel+0x6aa>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002eee:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	7f5b      	ldrb	r3, [r3, #29]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <HAL_ADCEx_InjectedConfigChannel+0x6aa>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b09      	cmp	r3, #9
 8002f10:	d922      	bls.n	8002f58 <HAL_ADCEx_InjectedConfigChannel+0x6f8>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6999      	ldr	r1, [r3, #24]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	3b1e      	subs	r3, #30
 8002f24:	2207      	movs	r2, #7
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4019      	ands	r1, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6898      	ldr	r0, [r3, #8]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b1e      	subs	r3, #30
 8002f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	619a      	str	r2, [r3, #24]
 8002f4a:	e01f      	b.n	8002f8c <HAL_ADCEx_InjectedConfigChannel+0x72c>
 8002f4c:	82082000 	.word	0x82082000
 8002f50:	50000400 	.word	0x50000400
 8002f54:	50000500 	.word	0x50000500
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6959      	ldr	r1, [r3, #20]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	2207      	movs	r2, #7
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	4019      	ands	r1, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6898      	ldr	r0, [r3, #8]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	fa00 f203 	lsl.w	r2, r0, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d84e      	bhi.n	800304c <HAL_ADCEx_InjectedConfigChannel+0x7ec>
 8002fae:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <HAL_ADCEx_InjectedConfigChannel+0x754>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002fe7 	.word	0x08002fe7
 8002fbc:	08003009 	.word	0x08003009
 8002fc0:	0800302b 	.word	0x0800302b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fca:	4b9a      	ldr	r3, [pc, #616]	; (8003234 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	0691      	lsls	r1, r2, #26
 8002fd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002fe4:	e07e      	b.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fec:	4b91      	ldr	r3, [pc, #580]	; (8003234 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	0691      	lsls	r1, r2, #26
 8002ff6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003004:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003006:	e06d      	b.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x884>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800300e:	4b89      	ldr	r3, [pc, #548]	; (8003234 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 8003010:	4013      	ands	r3, r2
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	0691      	lsls	r1, r2, #26
 8003018:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800301a:	430a      	orrs	r2, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003026:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003028:	e05c      	b.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003030:	4b80      	ldr	r3, [pc, #512]	; (8003234 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 8003032:	4013      	ands	r3, r2
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	0691      	lsls	r1, r2, #26
 800303a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800303c:	430a      	orrs	r2, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003048:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 800304a:	e04b      	b.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	069b      	lsls	r3, r3, #26
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_ADCEx_InjectedConfigChannel+0x810>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800306e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	069b      	lsls	r3, r3, #26
 8003080:	429a      	cmp	r2, r3
 8003082:	d107      	bne.n	8003094 <HAL_ADCEx_InjectedConfigChannel+0x834>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003092:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	069b      	lsls	r3, r3, #26
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d107      	bne.n	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x858>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030b6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	069b      	lsls	r3, r3, #26
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10a      	bne.n	80030e2 <HAL_ADCEx_InjectedConfigChannel+0x882>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80030dc:	e001      	b.n	80030e2 <HAL_ADCEx_InjectedConfigChannel+0x882>
    }
    
  }
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x884>
      break;
 80030e2:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d108      	bne.n	8003104 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8126 	bne.w	8003358 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d00f      	beq.n	8003134 <HAL_ADCEx_InjectedConfigChannel+0x8d4>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2201      	movs	r2, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	400a      	ands	r2, r1
 800312e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003132:	e049      	b.n	80031c8 <HAL_ADCEx_InjectedConfigChannel+0x968>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	409a      	lsls	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b09      	cmp	r3, #9
 8003154:	d91c      	bls.n	8003190 <HAL_ADCEx_InjectedConfigChannel+0x930>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6999      	ldr	r1, [r3, #24]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	3b1b      	subs	r3, #27
 8003168:	2207      	movs	r2, #7
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	4019      	ands	r1, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6898      	ldr	r0, [r3, #8]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	3b1b      	subs	r3, #27
 8003182:	fa00 f203 	lsl.w	r2, r0, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e01b      	b.n	80031c8 <HAL_ADCEx_InjectedConfigChannel+0x968>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6959      	ldr	r1, [r3, #20]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	2207      	movs	r2, #7
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	4019      	ands	r1, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6898      	ldr	r0, [r3, #8]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	fa00 f203 	lsl.w	r2, r0, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d0:	d004      	beq.n	80031dc <HAL_ADCEx_InjectedConfigChannel+0x97c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_ADCEx_InjectedConfigChannel+0x980>
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_ADCEx_InjectedConfigChannel+0x9dc>)
 80031de:	e000      	b.n	80031e2 <HAL_ADCEx_InjectedConfigChannel+0x982>
 80031e0:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_ADCEx_InjectedConfigChannel+0x9e0>)
 80031e2:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d105      	bne.n	80031f8 <HAL_ADCEx_InjectedConfigChannel+0x998>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031fc:	2b11      	cmp	r3, #17
 80031fe:	d105      	bne.n	800320c <HAL_ADCEx_InjectedConfigChannel+0x9ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003210:	2b12      	cmp	r3, #18
 8003212:	f040 80a1 	bne.w	8003358 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 809a 	bne.w	8003358 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322c:	d10a      	bne.n	8003244 <HAL_ADCEx_InjectedConfigChannel+0x9e4>
 800322e:	4b02      	ldr	r3, [pc, #8]	; (8003238 <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e022      	b.n	800327a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8003234:	83fff000 	.word	0x83fff000
 8003238:	50000100 	.word	0x50000100
 800323c:	50000300 	.word	0x50000300
 8003240:	50000700 	.word	0x50000700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a48      	ldr	r2, [pc, #288]	; (800336c <HAL_ADCEx_InjectedConfigChannel+0xb0c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d103      	bne.n	8003256 <HAL_ADCEx_InjectedConfigChannel+0x9f6>
 800324e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	e011      	b.n	800327a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a45      	ldr	r2, [pc, #276]	; (8003370 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d102      	bne.n	8003266 <HAL_ADCEx_InjectedConfigChannel+0xa06>
 8003260:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e009      	b.n	800327a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a42      	ldr	r2, [pc, #264]	; (8003374 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d102      	bne.n	8003276 <HAL_ADCEx_InjectedConfigChannel+0xa16>
 8003270:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e001      	b.n	800327a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_ADCEx_InjectedConfigChannel+0xa3c>
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d150      	bne.n	8003342 <HAL_ADCEx_InjectedConfigChannel+0xae2>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032a0:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_ADCEx_InjectedConfigChannel+0xa68>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_ADCEx_InjectedConfigChannel+0xa64>
 80032c2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13c      	bne.n	8003342 <HAL_ADCEx_InjectedConfigChannel+0xae2>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d11d      	bne.n	800330c <HAL_ADCEx_InjectedConfigChannel+0xaac>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d8:	d118      	bne.n	800330c <HAL_ADCEx_InjectedConfigChannel+0xaac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80032da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_ADCEx_InjectedConfigChannel+0xb18>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	; (800337c <HAL_ADCEx_InjectedConfigChannel+0xb1c>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9a      	lsrs	r2, r3, #18
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80032fc:	e002      	b.n	8003304 <HAL_ADCEx_InjectedConfigChannel+0xaa4>
          {
            wait_loop_index--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3b01      	subs	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f9      	bne.n	80032fe <HAL_ADCEx_InjectedConfigChannel+0xa9e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800330a:	e024      	b.n	8003356 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b11      	cmp	r3, #17
 8003312:	d10b      	bne.n	800332c <HAL_ADCEx_InjectedConfigChannel+0xacc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800331c:	d106      	bne.n	800332c <HAL_ADCEx_InjectedConfigChannel+0xacc>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003328:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800332a:	e014      	b.n	8003356 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b12      	cmp	r3, #18
 8003332:	d110      	bne.n	8003356 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800333c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800333e:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003340:	e009      	b.n	8003356 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003354:	e000      	b.n	8003358 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003356:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003364:	4618      	mov	r0, r3
 8003366:	3770      	adds	r7, #112	; 0x70
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	50000100 	.word	0x50000100
 8003370:	50000400 	.word	0x50000400
 8003374:	50000500 	.word	0x50000500
 8003378:	20000000 	.word	0x20000000
 800337c:	431bde83 	.word	0x431bde83

08003380 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b098      	sub	sp, #96	; 0x60
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003398:	d009      	beq.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a8c      	ldr	r2, [pc, #560]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80033a4:	f641 3194 	movw	r1, #7060	; 0x1b94
 80033a8:	488a      	ldr	r0, [pc, #552]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80033aa:	f7fd f9fe 	bl	80007aa <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d01c      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d018      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d014      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d010      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d00c      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	d008      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	d004      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80033ee:	f641 3195 	movw	r1, #7061	; 0x1b95
 80033f2:	4878      	ldr	r0, [pc, #480]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80033f4:	f7fd f9d9 	bl	80007aa <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d052      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003410:	d009      	beq.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800341a:	d004      	beq.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800341c:	f641 3198 	movw	r1, #7064	; 0x1b98
 8003420:	486c      	ldr	r0, [pc, #432]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8003422:	f7fd f9c2 	bl	80007aa <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03b      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003436:	d036      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003440:	d031      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344a:	d02c      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003454:	d027      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800345e:	d022      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003468:	d01d      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003472:	d018      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347c:	d013      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8003486:	d00e      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003490:	d009      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800349a:	d004      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800349c:	f641 3199 	movw	r1, #7065	; 0x1b99
 80034a0:	484c      	ldr	r0, [pc, #304]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80034a2:	f7fd f982 	bl	80007aa <assert_failed>
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ae:	d102      	bne.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	e01a      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
 80034c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	e011      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a40      	ldr	r2, [pc, #256]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d102      	bne.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	e009      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d102      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	e001      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  {
    /* Return function status */
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0bc      	b.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8003500:	2302      	movs	r3, #2
 8003502:	e0b5      	b.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 8099 	bne.w	800364e <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f040 8092 	bne.w	800364e <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003532:	d004      	beq.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800353e:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x260>)
 8003540:	e000      	b.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8003542:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 8003544:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d04c      	beq.n	80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x268>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800354e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003560:	035b      	lsls	r3, r3, #13
 8003562:	430b      	orrs	r3, r1
 8003564:	431a      	orrs	r2, r3
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x20c>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d168      	bne.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x22e>
 80035ac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d157      	bne.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035ba:	f023 030f 	bic.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	6892      	ldr	r2, [r2, #8]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	431a      	orrs	r2, r3
 80035ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035cc:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ce:	e048      	b.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
 80035d0:	50000400 	.word	0x50000400
 80035d4:	0800ed90 	.word	0x0800ed90
 80035d8:	50000100 	.word	0x50000100
 80035dc:	50000500 	.word	0x50000500
 80035e0:	50000300 	.word	0x50000300
 80035e4:	50000700 	.word	0x50000700
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f2:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d108      	bne.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x296>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d123      	bne.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0x2b8>
 8003636:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003638:	2b00      	cmp	r3, #0
 800363a:	d112      	bne.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800363c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003644:	f023 030f 	bic.w	r3, r3, #15
 8003648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800364a:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800364c:	e009      	b.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003660:	e000      	b.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0x2e4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003662:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800366c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003670:	4618      	mov	r0, r3
 8003672:	3760      	adds	r7, #96	; 0x60
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d108      	bne.n	80036a4 <ADC_Enable+0x2c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <ADC_Enable+0x2c>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <ADC_Enable+0x2e>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d143      	bne.n	8003732 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <ADC_Enable+0xc4>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0210 	orr.w	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e02f      	b.n	8003734 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80036e4:	f7fd fae4 	bl	8000cb0 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036ea:	e01b      	b.n	8003724 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ec:	f7fd fae0 	bl	8000cb0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d914      	bls.n	8003724 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d00d      	beq.n	8003724 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f043 0210 	orr.w	r2, r3, #16
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	f043 0201 	orr.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e007      	b.n	8003734 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d1dc      	bne.n	80036ec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	8000003f 	.word	0x8000003f

08003740 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <ADC_Disable+0x2c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <ADC_Disable+0x2c>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <ADC_Disable+0x2e>
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d047      	beq.n	8003802 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030d 	and.w	r3, r3, #13
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10f      	bne.n	80037a0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0202 	orr.w	r2, r2, #2
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2203      	movs	r2, #3
 8003796:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003798:	f7fd fa8a 	bl	8000cb0 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800379e:	e029      	b.n	80037f4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0210 	orr.w	r2, r3, #16
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e023      	b.n	8003804 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037bc:	f7fd fa78 	bl	8000cb0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d914      	bls.n	80037f4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d10d      	bne.n	80037f4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0210 	orr.w	r2, r3, #16
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e007      	b.n	8003804 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d0dc      	beq.n	80037bc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003828:	4013      	ands	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383e:	4a04      	ldr	r2, [pc, #16]	; (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	60d3      	str	r3, [r2, #12]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <__NVIC_GetPriorityGrouping+0x18>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 0307 	and.w	r3, r3, #7
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	2b00      	cmp	r3, #0
 8003880:	db0b      	blt.n	800389a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	f003 021f 	and.w	r2, r3, #31
 8003888:	4907      	ldr	r1, [pc, #28]	; (80038a8 <__NVIC_EnableIRQ+0x38>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2001      	movs	r0, #1
 8003892:	fa00 f202 	lsl.w	r2, r0, r2
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000e100 	.word	0xe000e100

080038ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	db0a      	blt.n	80038d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	490c      	ldr	r1, [pc, #48]	; (80038f8 <__NVIC_SetPriority+0x4c>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	440b      	add	r3, r1
 80038d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d4:	e00a      	b.n	80038ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4908      	ldr	r1, [pc, #32]	; (80038fc <__NVIC_SetPriority+0x50>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	3b04      	subs	r3, #4
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	440b      	add	r3, r1
 80038ea:	761a      	strb	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000e100 	.word	0xe000e100
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f1c3 0307 	rsb	r3, r3, #7
 800391a:	2b04      	cmp	r3, #4
 800391c:	bf28      	it	cs
 800391e:	2304      	movcs	r3, #4
 8003920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3304      	adds	r3, #4
 8003926:	2b06      	cmp	r3, #6
 8003928:	d902      	bls.n	8003930 <NVIC_EncodePriority+0x30>
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3b03      	subs	r3, #3
 800392e:	e000      	b.n	8003932 <NVIC_EncodePriority+0x32>
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	401a      	ands	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43d9      	mvns	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	4313      	orrs	r3, r2
         );
}
 800395a:	4618      	mov	r0, r3
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003978:	d301      	bcc.n	800397e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800397a:	2301      	movs	r3, #1
 800397c:	e00f      	b.n	800399e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <SysTick_Config+0x40>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003986:	210f      	movs	r1, #15
 8003988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800398c:	f7ff ff8e 	bl	80038ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <SysTick_Config+0x40>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <SysTick_Config+0x40>)
 8003998:	2207      	movs	r2, #7
 800399a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	e000e010 	.word	0xe000e010

080039ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b07      	cmp	r3, #7
 80039b8:	d00f      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d00c      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d009      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d006      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d003      	beq.n	80039da <HAL_NVIC_SetPriorityGrouping+0x2e>
 80039d2:	21ac      	movs	r1, #172	; 0xac
 80039d4:	4804      	ldr	r0, [pc, #16]	; (80039e8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80039d6:	f7fc fee8 	bl	80007aa <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ff16 	bl	800380c <__NVIC_SetPriorityGrouping>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	0800edcc 	.word	0x0800edcc

080039ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d903      	bls.n	8003a0c <HAL_NVIC_SetPriority+0x20>
 8003a04:	21c4      	movs	r1, #196	; 0xc4
 8003a06:	480e      	ldr	r0, [pc, #56]	; (8003a40 <HAL_NVIC_SetPriority+0x54>)
 8003a08:	f7fc fecf 	bl	80007aa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d903      	bls.n	8003a1a <HAL_NVIC_SetPriority+0x2e>
 8003a12:	21c5      	movs	r1, #197	; 0xc5
 8003a14:	480a      	ldr	r0, [pc, #40]	; (8003a40 <HAL_NVIC_SetPriority+0x54>)
 8003a16:	f7fc fec8 	bl	80007aa <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1a:	f7ff ff1b 	bl	8003854 <__NVIC_GetPriorityGrouping>
 8003a1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	6978      	ldr	r0, [r7, #20]
 8003a26:	f7ff ff6b 	bl	8003900 <NVIC_EncodePriority>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff3a 	bl	80038ac <__NVIC_SetPriority>
}
 8003a38:	bf00      	nop
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	0800edcc 	.word	0x0800edcc

08003a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da03      	bge.n	8003a5e <HAL_NVIC_EnableIRQ+0x1a>
 8003a56:	21d8      	movs	r1, #216	; 0xd8
 8003a58:	4805      	ldr	r0, [pc, #20]	; (8003a70 <HAL_NVIC_EnableIRQ+0x2c>)
 8003a5a:	f7fc fea6 	bl	80007aa <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff04 	bl	8003870 <__NVIC_EnableIRQ>
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	0800edcc 	.word	0x0800edcc

08003a74 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff73 	bl	8003968 <SysTick_Config>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aa0:	d017      	beq.n	8003ad2 <HAL_GPIO_Init+0x46>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a36      	ldr	r2, [pc, #216]	; (8003b80 <HAL_GPIO_Init+0xf4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_Init+0x46>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a35      	ldr	r2, [pc, #212]	; (8003b84 <HAL_GPIO_Init+0xf8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <HAL_GPIO_Init+0x46>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <HAL_GPIO_Init+0xfc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_GPIO_Init+0x46>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <HAL_GPIO_Init+0x100>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <HAL_GPIO_Init+0x46>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a32      	ldr	r2, [pc, #200]	; (8003b90 <HAL_GPIO_Init+0x104>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x46>
 8003aca:	21b2      	movs	r1, #178	; 0xb2
 8003acc:	4831      	ldr	r0, [pc, #196]	; (8003b94 <HAL_GPIO_Init+0x108>)
 8003ace:	f7fc fe6c 	bl	80007aa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_GPIO_Init+0x5c>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x64>
 8003ae8:	21b3      	movs	r1, #179	; 0xb3
 8003aea:	482a      	ldr	r0, [pc, #168]	; (8003b94 <HAL_GPIO_Init+0x108>)
 8003aec:	f7fc fe5d 	bl	80007aa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8200 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	f000 81fb 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b11      	cmp	r3, #17
 8003b0a:	f000 81f6 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	f000 81f1 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b12      	cmp	r3, #18
 8003b1e:	f000 81ec 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003b2a:	f000 81e6 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003b36:	f000 81e0 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003b42:	f000 81da 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003b4e:	f000 81d4 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003b5a:	f000 81ce 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003b66:	f000 81c8 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	f000 81c3 	beq.w	8003efa <HAL_GPIO_Init+0x46e>
 8003b74:	21b4      	movs	r1, #180	; 0xb4
 8003b76:	4807      	ldr	r0, [pc, #28]	; (8003b94 <HAL_GPIO_Init+0x108>)
 8003b78:	f7fc fe17 	bl	80007aa <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7c:	e1bd      	b.n	8003efa <HAL_GPIO_Init+0x46e>
 8003b7e:	bf00      	nop
 8003b80:	48000400 	.word	0x48000400
 8003b84:	48000800 	.word	0x48000800
 8003b88:	48000c00 	.word	0x48000c00
 8003b8c:	48001000 	.word	0x48001000
 8003b90:	48001400 	.word	0x48001400
 8003b94:	0800ee08 	.word	0x0800ee08
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 81a2 	beq.w	8003ef4 <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d005      	beq.n	8003bc8 <HAL_GPIO_Init+0x13c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d140      	bne.n	8003c4a <HAL_GPIO_Init+0x1be>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_GPIO_Init+0x15c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x15c>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x15c>
 8003be0:	21c3      	movs	r1, #195	; 0xc3
 8003be2:	488a      	ldr	r0, [pc, #552]	; (8003e0c <HAL_GPIO_Init+0x380>)
 8003be4:	f7fc fde1 	bl	80007aa <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c1e:	2201      	movs	r2, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0201 	and.w	r2, r3, #1
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d027      	beq.n	8003ca6 <HAL_GPIO_Init+0x21a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_GPIO_Init+0x1ea>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d007      	beq.n	8003c76 <HAL_GPIO_Init+0x1ea>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x1ea>
 8003c6e:	21d4      	movs	r1, #212	; 0xd4
 8003c70:	4866      	ldr	r0, [pc, #408]	; (8003e0c <HAL_GPIO_Init+0x380>)
 8003c72:	f7fc fd9a 	bl	80007aa <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2203      	movs	r2, #3
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d14f      	bne.n	8003d52 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cb8:	d017      	beq.n	8003cea <HAL_GPIO_Init+0x25e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_GPIO_Init+0x384>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x25e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a53      	ldr	r2, [pc, #332]	; (8003e14 <HAL_GPIO_Init+0x388>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00f      	beq.n	8003cea <HAL_GPIO_Init+0x25e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_GPIO_Init+0x38c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00b      	beq.n	8003cea <HAL_GPIO_Init+0x25e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a51      	ldr	r2, [pc, #324]	; (8003e1c <HAL_GPIO_Init+0x390>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_Init+0x25e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a50      	ldr	r2, [pc, #320]	; (8003e20 <HAL_GPIO_Init+0x394>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x25e>
 8003ce2:	21e2      	movs	r1, #226	; 0xe2
 8003ce4:	4849      	ldr	r0, [pc, #292]	; (8003e0c <HAL_GPIO_Init+0x380>)
 8003ce6:	f7fc fd60 	bl	80007aa <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d90b      	bls.n	8003d0a <HAL_GPIO_Init+0x27e>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b0e      	cmp	r3, #14
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_Init+0x27e>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_Init+0x27e>
 8003d02:	21e3      	movs	r1, #227	; 0xe3
 8003d04:	4841      	ldr	r0, [pc, #260]	; (8003e0c <HAL_GPIO_Init+0x380>)
 8003d06:	f7fc fd50 	bl	80007aa <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	08da      	lsrs	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	08da      	lsrs	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3208      	adds	r2, #8
 8003d4c:	6939      	ldr	r1, [r7, #16]
 8003d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0203 	and.w	r2, r3, #3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80b0 	beq.w	8003ef4 <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_GPIO_Init+0x398>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_GPIO_Init+0x398>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6193      	str	r3, [r2, #24]
 8003da0:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_GPIO_Init+0x398>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dac:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_GPIO_Init+0x39c>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dd6:	d029      	beq.n	8003e2c <HAL_GPIO_Init+0x3a0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <HAL_GPIO_Init+0x384>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_GPIO_Init+0x37c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <HAL_GPIO_Init+0x388>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00d      	beq.n	8003e04 <HAL_GPIO_Init+0x378>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_GPIO_Init+0x38c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <HAL_GPIO_Init+0x374>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_GPIO_Init+0x390>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_GPIO_Init+0x370>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	e018      	b.n	8003e2e <HAL_GPIO_Init+0x3a2>
 8003dfc:	2305      	movs	r3, #5
 8003dfe:	e016      	b.n	8003e2e <HAL_GPIO_Init+0x3a2>
 8003e00:	2303      	movs	r3, #3
 8003e02:	e014      	b.n	8003e2e <HAL_GPIO_Init+0x3a2>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e012      	b.n	8003e2e <HAL_GPIO_Init+0x3a2>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e010      	b.n	8003e2e <HAL_GPIO_Init+0x3a2>
 8003e0c:	0800ee08 	.word	0x0800ee08
 8003e10:	48000400 	.word	0x48000400
 8003e14:	48000800 	.word	0x48000800
 8003e18:	48000c00 	.word	0x48000c00
 8003e1c:	48001000 	.word	0x48001000
 8003e20:	48001400 	.word	0x48001400
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	f002 0203 	and.w	r2, r2, #3
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	4093      	lsls	r3, r2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e3e:	4935      	ldr	r1, [pc, #212]	; (8003f14 <HAL_GPIO_Init+0x488>)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e4c:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <HAL_GPIO_Init+0x48c>)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f47f ae47 	bne.w	8003b98 <HAL_GPIO_Init+0x10c>
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <HAL_GPIO_WritePin+0x20>
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <HAL_GPIO_WritePin+0x2a>
 8003f3c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003f40:	480d      	ldr	r0, [pc, #52]	; (8003f78 <HAL_GPIO_WritePin+0x5c>)
 8003f42:	f7fc fc32 	bl	80007aa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003f46:	787b      	ldrb	r3, [r7, #1]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_GPIO_WritePin+0x40>
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d004      	beq.n	8003f5c <HAL_GPIO_WritePin+0x40>
 8003f52:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003f56:	4808      	ldr	r0, [pc, #32]	; (8003f78 <HAL_GPIO_WritePin+0x5c>)
 8003f58:	f7fc fc27 	bl	80007aa <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f68:	e002      	b.n	8003f70 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	0800ee08 	.word	0x0800ee08

08003f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0ff      	b.n	800418e <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a81      	ldr	r2, [pc, #516]	; (8004198 <HAL_I2C_Init+0x21c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_I2C_Init+0x30>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7f      	ldr	r2, [pc, #508]	; (800419c <HAL_I2C_Init+0x220>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <HAL_I2C_Init+0x30>
 8003fa2:	f240 2113 	movw	r1, #531	; 0x213
 8003fa6:	487e      	ldr	r0, [pc, #504]	; (80041a0 <HAL_I2C_Init+0x224>)
 8003fa8:	f7fc fbff 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d304      	bcc.n	8003fc0 <HAL_I2C_Init+0x44>
 8003fb6:	f44f 7105 	mov.w	r1, #532	; 0x214
 8003fba:	4879      	ldr	r0, [pc, #484]	; (80041a0 <HAL_I2C_Init+0x224>)
 8003fbc:	f7fc fbf5 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d008      	beq.n	8003fda <HAL_I2C_Init+0x5e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d004      	beq.n	8003fda <HAL_I2C_Init+0x5e>
 8003fd0:	f240 2115 	movw	r1, #533	; 0x215
 8003fd4:	4872      	ldr	r0, [pc, #456]	; (80041a0 <HAL_I2C_Init+0x224>)
 8003fd6:	f7fc fbe8 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_I2C_Init+0x7a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fea:	d004      	beq.n	8003ff6 <HAL_I2C_Init+0x7a>
 8003fec:	f240 2116 	movw	r1, #534	; 0x216
 8003ff0:	486b      	ldr	r0, [pc, #428]	; (80041a0 <HAL_I2C_Init+0x224>)
 8003ff2:	f7fc fbda 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2bff      	cmp	r3, #255	; 0xff
 8003ffc:	d904      	bls.n	8004008 <HAL_I2C_Init+0x8c>
 8003ffe:	f240 2117 	movw	r1, #535	; 0x217
 8004002:	4867      	ldr	r0, [pc, #412]	; (80041a0 <HAL_I2C_Init+0x224>)
 8004004:	f7fc fbd1 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d01c      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d018      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d014      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d010      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d00c      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d008      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b07      	cmp	r3, #7
 8004046:	d004      	beq.n	8004052 <HAL_I2C_Init+0xd6>
 8004048:	f44f 7106 	mov.w	r1, #536	; 0x218
 800404c:	4854      	ldr	r0, [pc, #336]	; (80041a0 <HAL_I2C_Init+0x224>)
 800404e:	f7fc fbac 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_I2C_Init+0xf2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004062:	d004      	beq.n	800406e <HAL_I2C_Init+0xf2>
 8004064:	f240 2119 	movw	r1, #537	; 0x219
 8004068:	484d      	ldr	r0, [pc, #308]	; (80041a0 <HAL_I2C_Init+0x224>)
 800406a:	f7fc fb9e 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_I2C_Init+0x10e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800407e:	d004      	beq.n	800408a <HAL_I2C_Init+0x10e>
 8004080:	f240 211a 	movw	r1, #538	; 0x21a
 8004084:	4846      	ldr	r0, [pc, #280]	; (80041a0 <HAL_I2C_Init+0x224>)
 8004086:	f7fc fb90 	bl	80007aa <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fc fa8e 	bl	80005c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	e006      	b.n	8004100 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d104      	bne.n	8004112 <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40005400 	.word	0x40005400
 800419c:	40005800 	.word	0x40005800
 80041a0:	0800ee44 	.word	0x0800ee44

080041a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2d      	ldr	r2, [pc, #180]	; (8004268 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d008      	beq.n	80041ca <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2b      	ldr	r2, [pc, #172]	; (800426c <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80041c2:	2164      	movs	r1, #100	; 0x64
 80041c4:	482a      	ldr	r0, [pc, #168]	; (8004270 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 80041c6:	f7fc faf0 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d003      	beq.n	80041e0 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 80041d8:	2165      	movs	r1, #101	; 0x65
 80041da:	4825      	ldr	r0, [pc, #148]	; (8004270 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 80041dc:	f7fc fae5 	bl	80007aa <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d138      	bne.n	800425e <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_I2CEx_ConfigAnalogFilter+0x56>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e032      	b.n	8004260 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2224      	movs	r2, #36	; 0x24
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004228:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40005400 	.word	0x40005400
 800426c:	40005800 	.word	0x40005800
 8004270:	0800ee7c 	.word	0x0800ee7c

08004274 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d008      	beq.n	800429a <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8004292:	2192      	movs	r1, #146	; 0x92
 8004294:	4829      	ldr	r0, [pc, #164]	; (800433c <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8004296:	f7fc fa88 	bl	80007aa <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	d903      	bls.n	80042a8 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 80042a0:	2193      	movs	r1, #147	; 0x93
 80042a2:	4826      	ldr	r0, [pc, #152]	; (800433c <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80042a4:	f7fc fa81 	bl	80007aa <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d139      	bne.n	8004328 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e033      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2224      	movs	r2, #36	; 0x24
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40005400 	.word	0x40005400
 8004338:	40005800 	.word	0x40005800
 800433c:	0800ee7c 	.word	0x0800ee7c

08004340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004342:	b08b      	sub	sp, #44	; 0x2c
 8004344:	af06      	add	r7, sp, #24
 8004346:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0d9      	b.n	8004506 <HAL_PCD_Init+0x1c6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6e      	ldr	r2, [pc, #440]	; (8004510 <HAL_PCD_Init+0x1d0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <HAL_PCD_Init+0x24>
 800435c:	2185      	movs	r1, #133	; 0x85
 800435e:	486d      	ldr	r0, [pc, #436]	; (8004514 <HAL_PCD_Init+0x1d4>)
 8004360:	f7fc fa23 	bl	80007aa <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f009 fd75 	bl	800de68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2203      	movs	r2, #3
 8004382:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f005 fd2f 	bl	8009dee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e04c      	b.n	8004430 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	3301      	adds	r3, #1
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	b298      	uxth	r0, r3
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	440b      	add	r3, r1
 80043d2:	3336      	adds	r3, #54	; 0x36
 80043d4:	4602      	mov	r2, r0
 80043d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	440b      	add	r3, r1
 80043e8:	3303      	adds	r3, #3
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	440b      	add	r3, r1
 80043fc:	3338      	adds	r3, #56	; 0x38
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	440b      	add	r3, r1
 8004410:	333c      	adds	r3, #60	; 0x3c
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	440b      	add	r3, r1
 8004424:	3340      	adds	r3, #64	; 0x40
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	3301      	adds	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d3ad      	bcc.n	8004396 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
 800443e:	e044      	b.n	80044ca <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	440b      	add	r3, r1
 80044bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	3301      	adds	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3b5      	bcc.n	8004440 <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	687e      	ldr	r6, [r7, #4]
 80044dc:	466d      	mov	r5, sp
 80044de:	f106 0410 	add.w	r4, r6, #16
 80044e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	1d33      	adds	r3, r6, #4
 80044ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	f005 fc98 	bl	8009e24 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450e:	bf00      	nop
 8004510:	40005c00 	.word	0x40005c00
 8004514:	0800eeb8 	.word	0x0800eeb8

08004518 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_PCD_Start+0x16>
 800452a:	2302      	movs	r3, #2
 800452c:	e016      	b.n	800455c <HAL_PCD_Start+0x44>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f005 fc40 	bl	8009dc0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004540:	2101      	movs	r1, #1
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f009 ff2e 	bl	800e3a4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f007 fe55 	bl	800c1fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f007 fe4e 	bl	800c212 <USB_ReadInterrupts>
 8004576:	4603      	mov	r3, r0
 8004578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004580:	d102      	bne.n	8004588 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 faf6 	bl	8004b74 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f007 fe40 	bl	800c212 <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	d112      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b0:	b292      	uxth	r2, r2
 80045b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f009 fcf7 	bl	800dfaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80045bc:	2100      	movs	r1, #0
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f8c7 	bl	8004752 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f007 fe22 	bl	800c212 <USB_ReadInterrupts>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d8:	d10b      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045ec:	b292      	uxth	r2, r2
 80045ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f007 fe0b 	bl	800c212 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004606:	d10b      	bne.n	8004620 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461a:	b292      	uxth	r2, r2
 800461c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f007 fdf4 	bl	800c212 <USB_ReadInterrupts>
 800462a:	4603      	mov	r3, r0
 800462c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004634:	d126      	bne.n	8004684 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0204 	bic.w	r2, r2, #4
 8004648:	b292      	uxth	r2, r2
 800464a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004656:	b29a      	uxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0208 	bic.w	r2, r2, #8
 8004660:	b292      	uxth	r2, r2
 8004662:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f009 fcd8 	bl	800e01c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004674:	b29a      	uxth	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800467e:	b292      	uxth	r2, r2
 8004680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f007 fdc2 	bl	800c212 <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004698:	d126      	bne.n	80046e8 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0208 	orr.w	r2, r2, #8
 80046ac:	b292      	uxth	r2, r2
 80046ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c4:	b292      	uxth	r2, r2
 80046c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0204 	orr.w	r2, r2, #4
 80046dc:	b292      	uxth	r2, r2
 80046de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f009 fc80 	bl	800dfe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f007 fd90 	bl	800c212 <USB_ReadInterrupts>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fc:	d10e      	bne.n	800471c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004710:	b292      	uxth	r2, r2
 8004712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f009 fc39 	bl	800df8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f007 fd76 	bl	800c212 <USB_ReadInterrupts>
 8004726:	4603      	mov	r3, r0
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004730:	d10b      	bne.n	800474a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004744:	b292      	uxth	r2, r2
 8004746:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_PCD_SetAddress+0x1a>
 8004768:	2302      	movs	r3, #2
 800476a:	e013      	b.n	8004794 <HAL_PCD_SetAddress+0x42>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f007 fd25 	bl	800c1d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	4608      	mov	r0, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	461a      	mov	r2, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	70fb      	strb	r3, [r7, #3]
 80047ae:	460b      	mov	r3, r1
 80047b0:	803b      	strh	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da0e      	bge.n	80047e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	705a      	strb	r2, [r3, #1]
 80047de:	e00e      	b.n	80047fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	f003 0207 	and.w	r2, r3, #7
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800480a:	883a      	ldrh	r2, [r7, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	78ba      	ldrb	r2, [r7, #2]
 8004814:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	785b      	ldrb	r3, [r3, #1]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004828:	78bb      	ldrb	r3, [r7, #2]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d102      	bne.n	8004834 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_PCD_EP_Open+0xa6>
 800483e:	2302      	movs	r3, #2
 8004840:	e00e      	b.n	8004860 <HAL_PCD_EP_Open+0xc4>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	4618      	mov	r0, r3
 8004852:	f005 fb09 	bl	8009e68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800485e:	7afb      	ldrb	r3, [r7, #11]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004878:	2b00      	cmp	r3, #0
 800487a:	da0e      	bge.n	800489a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	705a      	strb	r2, [r3, #1]
 8004898:	e00e      	b.n	80048b8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 0207 	and.w	r2, r3, #7
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4413      	add	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_PCD_EP_Close+0x6a>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e00e      	b.n	80048f0 <HAL_PCD_EP_Close+0x88>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f005 fe55 	bl	800a590 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	460b      	mov	r3, r1
 8004906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004908:	7afb      	ldrb	r3, [r7, #11]
 800490a:	f003 0207 	and.w	r2, r3, #7
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004938:	7afb      	ldrb	r3, [r7, #11]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	b2da      	uxtb	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004944:	7afb      	ldrb	r3, [r7, #11]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	4618      	mov	r0, r3
 8004956:	f006 f808 	bl	800a96a <USB_EPStartXfer>
 800495a:	e005      	b.n	8004968 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	4618      	mov	r0, r3
 8004964:	f006 f801 	bl	800a96a <USB_EPStartXfer>
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 0207 	and.w	r2, r3, #7
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004994:	681b      	ldr	r3, [r3, #0]
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b086      	sub	sp, #24
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	460b      	mov	r3, r1
 80049b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b2:	7afb      	ldrb	r3, [r7, #11]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2201      	movs	r2, #1
 80049ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ee:	7afb      	ldrb	r3, [r7, #11]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049fa:	7afb      	ldrb	r3, [r7, #11]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6979      	ldr	r1, [r7, #20]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f005 ffad 	bl	800a96a <USB_EPStartXfer>
 8004a10:	e005      	b.n	8004a1e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f005 ffa6 	bl	800a96a <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 0207 	and.w	r2, r3, #7
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d901      	bls.n	8004a46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e03e      	b.n	8004ac4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da0e      	bge.n	8004a6c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	705a      	strb	r2, [r3, #1]
 8004a6a:	e00c      	b.n	8004a86 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_PCD_EP_SetStall+0x7e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e00e      	b.n	8004ac4 <HAL_PCD_EP_SetStall+0x9c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f007 fa8e 	bl	800bfd6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	f003 020f 	and.w	r2, r3, #15
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d901      	bls.n	8004aea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e040      	b.n	8004b6c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da0e      	bge.n	8004b10 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	705a      	strb	r2, [r3, #1]
 8004b0e:	e00e      	b.n	8004b2e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	f003 0207 	and.w	r2, r3, #7
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_PCD_EP_ClrStall+0x82>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e00e      	b.n	8004b6c <HAL_PCD_EP_ClrStall+0xa0>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f007 fa8b 	bl	800c078 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b096      	sub	sp, #88	; 0x58
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b7c:	e3a9      	b.n	80052d2 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004b8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004b98:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 8164 	bne.w	8004e6a <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004ba2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d152      	bne.n	8004c54 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	81fb      	strh	r3, [r7, #14]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	89fb      	ldrh	r3, [r7, #14]
 8004bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3328      	adds	r3, #40	; 0x28
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	3302      	adds	r3, #2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	441a      	add	r2, r3
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004c12:	2100      	movs	r1, #0
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f009 f9a0 	bl	800df5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8355 	beq.w	80052d2 <PCD_EP_ISR_Handler+0x75e>
 8004c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8350 	bne.w	80052d2 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b292      	uxth	r2, r2
 8004c46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c52:	e33e      	b.n	80052d2 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004c66:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d034      	beq.n	8004cdc <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	3306      	adds	r3, #6
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004caa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f007 fb04 	bl	800c2be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	823b      	strh	r3, [r7, #16]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	8a3a      	ldrh	r2, [r7, #16]
 8004ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f009 f913 	bl	800df00 <HAL_PCD_SetupStageCallback>
 8004cda:	e2fa      	b.n	80052d2 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cdc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f280 82f6 	bge.w	80052d2 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	83fb      	strh	r3, [r7, #30]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	8bfa      	ldrh	r2, [r7, #30]
 8004cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d00:	b292      	uxth	r2, r2
 8004d02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	3306      	adds	r3, #6
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d019      	beq.n	8004d6c <PCD_EP_ISR_Handler+0x1f8>
 8004d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d46:	6959      	ldr	r1, [r3, #20]
 8004d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f007 fab4 	bl	800c2be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	441a      	add	r2, r3
 8004d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004d64:	2100      	movs	r1, #0
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f009 f8dc 	bl	800df24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 82aa 	bne.w	80052d2 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d112      	bne.n	8004dcc <PCD_EP_ISR_Handler+0x258>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	801a      	strh	r2, [r3, #0]
 8004dca:	e02f      	b.n	8004e2c <PCD_EP_ISR_Handler+0x2b8>
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8004dd2:	d813      	bhi.n	8004dfc <PCD_EP_ISR_Handler+0x288>
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
 8004ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <PCD_EP_ISR_Handler+0x27a>
 8004de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dea:	3301      	adds	r3, #1
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
 8004dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	029b      	lsls	r3, r3, #10
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	e017      	b.n	8004e2c <PCD_EP_ISR_Handler+0x2b8>
 8004dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	647b      	str	r3, [r7, #68]	; 0x44
 8004e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <PCD_EP_ISR_Handler+0x2a2>
 8004e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e12:	3b01      	subs	r3, #1
 8004e14:	647b      	str	r3, [r7, #68]	; 0x44
 8004e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	029b      	lsls	r3, r3, #10
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	827b      	strh	r3, [r7, #18]
 8004e3e:	8a7b      	ldrh	r3, [r7, #18]
 8004e40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e44:	827b      	strh	r3, [r7, #18]
 8004e46:	8a7b      	ldrh	r3, [r7, #18]
 8004e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e4c:	827b      	strh	r3, [r7, #18]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	8a7b      	ldrh	r3, [r7, #18]
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
 8004e68:	e233      	b.n	80052d2 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e7e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f280 80fc 	bge.w	8005080 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004ebe:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed6:	7b1b      	ldrb	r3, [r3, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d125      	bne.n	8004f28 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3306      	adds	r3, #6
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004f08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8092 	beq.w	8005036 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f18:	6959      	ldr	r1, [r3, #20]
 8004f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1c:	88da      	ldrh	r2, [r3, #6]
 8004f1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f22:	f007 f9cc 	bl	800c2be <USB_ReadPMA>
 8004f26:	e086      	b.n	8005036 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	78db      	ldrb	r3, [r3, #3]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d10a      	bne.n	8004f46 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004f30:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004f34:	461a      	mov	r2, r3
 8004f36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9d8 	bl	80052ee <HAL_PCD_EP_DB_Receive>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f44:	e077      	b.n	8005036 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d024      	beq.n	8004fee <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3302      	adds	r3, #2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fcc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004fd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02e      	beq.n	8005036 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fde:	6959      	ldr	r1, [r3, #20]
 8004fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe2:	891a      	ldrh	r2, [r3, #8]
 8004fe4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fe8:	f007 f969 	bl	800c2be <USB_ReadPMA>
 8004fec:	e023      	b.n	8005036 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4413      	add	r3, r2
 8005002:	3306      	adds	r3, #6
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005016:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800501a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	6959      	ldr	r1, [r3, #20]
 800502a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502c:	895a      	ldrh	r2, [r3, #10]
 800502e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005032:	f007 f944 	bl	800c2be <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800503e:	441a      	add	r2, r3
 8005040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005042:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800504c:	441a      	add	r2, r3
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <PCD_EP_ISR_Handler+0x4f2>
 800505a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d206      	bcs.n	8005074 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f008 ff59 	bl	800df24 <HAL_PCD_DataOutStageCallback>
 8005072:	e005      	b.n	8005080 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800507a:	4618      	mov	r0, r3
 800507c:	f005 fc75 	bl	800a96a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005080:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8122 	beq.w	80052d2 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800508e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	441a      	add	r2, r3
 80050ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	78db      	ldrb	r3, [r3, #3]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	f000 809d 	beq.w	8005222 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	2200      	movs	r2, #0
 80050ec:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d046      	beq.n	8005188 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d126      	bne.n	8005150 <PCD_EP_ISR_Handler+0x5dc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	4413      	add	r3, r2
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	011a      	lsls	r2, r3, #4
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	4413      	add	r3, r2
 8005124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005134:	b29a      	uxth	r2, r3
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005148:	b29a      	uxth	r2, r3
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	e061      	b.n	8005214 <PCD_EP_ISR_Handler+0x6a0>
 8005150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d15d      	bne.n	8005214 <PCD_EP_ISR_Handler+0x6a0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	4413      	add	r3, r2
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011a      	lsls	r2, r3, #4
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	4413      	add	r3, r2
 800517a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800517e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	2200      	movs	r2, #0
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	e045      	b.n	8005214 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d126      	bne.n	80051e4 <PCD_EP_ISR_Handler+0x670>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	4413      	add	r3, r2
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
 80051ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	4413      	add	r3, r2
 80051b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051bc:	633b      	str	r3, [r7, #48]	; 0x30
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e017      	b.n	8005214 <PCD_EP_ISR_Handler+0x6a0>
 80051e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d113      	bne.n	8005214 <PCD_EP_ISR_Handler+0x6a0>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fa:	4413      	add	r3, r2
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005206:	4413      	add	r3, r2
 8005208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	2200      	movs	r2, #0
 8005212:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f008 fe9d 	bl	800df5a <HAL_PCD_DataInStageCallback>
 8005220:	e057      	b.n	80052d2 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8005222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d14c      	bne.n	80052c4 <PCD_EP_ISR_Handler+0x750>
 800522a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d146      	bne.n	80052c4 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	3302      	adds	r3, #2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8005262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800526a:	429a      	cmp	r2, r3
 800526c:	d907      	bls.n	800527e <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527a:	619a      	str	r2, [r3, #24]
 800527c:	e002      	b.n	8005284 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	2200      	movs	r2, #0
 8005282:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f008 fe61 	bl	800df5a <HAL_PCD_DataInStageCallback>
 8005298:	e01b      	b.n	80052d2 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052a2:	441a      	add	r2, r3
 80052a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052b0:	441a      	add	r2, r3
 80052b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052bc:	4618      	mov	r0, r3
 80052be:	f005 fb54 	bl	800a96a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80052c2:	e006      	b.n	80052d2 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80052c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80052c8:	461a      	mov	r2, r3
 80052ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f91b 	bl	8005508 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052da:	b29b      	uxth	r3, r3
 80052dc:	b21b      	sxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f6ff ac4d 	blt.w	8004b7e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3758      	adds	r7, #88	; 0x58
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b088      	sub	sp, #32
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	4613      	mov	r3, r2
 80052fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d07e      	beq.n	8005404 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	3302      	adds	r3, #2
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800532e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	8b7b      	ldrh	r3, [r7, #26]
 8005336:	429a      	cmp	r2, r3
 8005338:	d306      	bcc.n	8005348 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	8b7b      	ldrh	r3, [r7, #26]
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	619a      	str	r2, [r3, #24]
 8005346:	e002      	b.n	800534e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d123      	bne.n	800539e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	833b      	strh	r3, [r7, #24]
 8005372:	8b3b      	ldrh	r3, [r7, #24]
 8005374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005378:	833b      	strh	r3, [r7, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	8b3b      	ldrh	r3, [r7, #24]
 800538a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01f      	beq.n	80053e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	82fb      	strh	r3, [r7, #22]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	8afb      	ldrh	r3, [r7, #22]
 80053d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053e8:	8b7b      	ldrh	r3, [r7, #26]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8087 	beq.w	80054fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6959      	ldr	r1, [r3, #20]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	891a      	ldrh	r2, [r3, #8]
 80053fc:	8b7b      	ldrh	r3, [r7, #26]
 80053fe:	f006 ff5e 	bl	800c2be <USB_ReadPMA>
 8005402:	e07c      	b.n	80054fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4413      	add	r3, r2
 8005418:	3306      	adds	r3, #6
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800542c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	8b7b      	ldrh	r3, [r7, #26]
 8005434:	429a      	cmp	r2, r3
 8005436:	d306      	bcc.n	8005446 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	699a      	ldr	r2, [r3, #24]
 800543c:	8b7b      	ldrh	r3, [r7, #26]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	619a      	str	r2, [r3, #24]
 8005444:	e002      	b.n	800544c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d123      	bne.n	800549c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	83fb      	strh	r3, [r7, #30]
 8005470:	8bfb      	ldrh	r3, [r7, #30]
 8005472:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005476:	83fb      	strh	r3, [r7, #30]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	8bfb      	ldrh	r3, [r7, #30]
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d11f      	bne.n	80054e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c0:	83bb      	strh	r3, [r7, #28]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8bbb      	ldrh	r3, [r7, #28]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054e6:	8b7b      	ldrh	r3, [r7, #26]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6959      	ldr	r1, [r3, #20]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	895a      	ldrh	r2, [r3, #10]
 80054f8:	8b7b      	ldrh	r3, [r7, #26]
 80054fa:	f006 fee0 	bl	800c2be <USB_ReadPMA>
    }
  }

  return count;
 80054fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b0a2      	sub	sp, #136	; 0x88
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 81c7 	beq.w	80058b0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552a:	b29b      	uxth	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	3302      	adds	r3, #2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800554a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005556:	429a      	cmp	r2, r3
 8005558:	d907      	bls.n	800556a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	619a      	str	r2, [r3, #24]
 8005568:	e002      	b.n	8005570 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2200      	movs	r2, #0
 800556e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f040 80b9 	bne.w	80056ec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d126      	bne.n	80055d0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005590:	b29b      	uxth	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	4413      	add	r3, r2
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	011a      	lsls	r2, r3, #4
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	4413      	add	r3, r2
 80055a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	801a      	strh	r2, [r3, #0]
 80055ce:	e01a      	b.n	8005606 <HAL_PCD_EP_DB_Transmit+0xfe>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d116      	bne.n	8005606 <HAL_PCD_EP_DB_Transmit+0xfe>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	4413      	add	r3, r2
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	4413      	add	r3, r2
 80055fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	2200      	movs	r2, #0
 8005604:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	623b      	str	r3, [r7, #32]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d126      	bne.n	8005662 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	4413      	add	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	011a      	lsls	r2, r3, #4
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4413      	add	r3, r2
 8005636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005646:	b29a      	uxth	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565a:	b29a      	uxth	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e017      	b.n	8005692 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d113      	bne.n	8005692 <HAL_PCD_EP_DB_Transmit+0x18a>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	4413      	add	r3, r2
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	011a      	lsls	r2, r3, #4
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	4413      	add	r3, r2
 8005686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2200      	movs	r2, #0
 8005690:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f008 fc5e 	bl	800df5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 82d4 	beq.w	8005c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c4:	827b      	strh	r3, [r7, #18]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	441a      	add	r2, r3
 80056d4:	8a7b      	ldrh	r3, [r7, #18]
 80056d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	8013      	strh	r3, [r2, #0]
 80056ea:	e2b2      	b.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d021      	beq.n	800573a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005710:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005740:	2b01      	cmp	r3, #1
 8005742:	f040 8286 	bne.w	8005c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800574e:	441a      	add	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800575c:	441a      	add	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6a1a      	ldr	r2, [r3, #32]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	429a      	cmp	r2, r3
 800576c:	d309      	bcc.n	8005782 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	621a      	str	r2, [r3, #32]
 8005780:	e015      	b.n	80057ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d107      	bne.n	800579a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800578a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800578e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005798:	e009      	b.n	80057ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d155      	bne.n	8005862 <HAL_PCD_EP_DB_Transmit+0x35a>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	4413      	add	r3, r2
 80057cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	011a      	lsls	r2, r3, #4
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	4413      	add	r3, r2
 80057d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d112      	bne.n	800580a <HAL_PCD_EP_DB_Transmit+0x302>
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005802:	b29a      	uxth	r2, r3
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e047      	b.n	800589a <HAL_PCD_EP_DB_Transmit+0x392>
 800580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580c:	2b3e      	cmp	r3, #62	; 0x3e
 800580e:	d811      	bhi.n	8005834 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
 8005816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005822:	3301      	adds	r3, #1
 8005824:	64bb      	str	r3, [r7, #72]	; 0x48
 8005826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005828:	b29b      	uxth	r3, r3
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b29a      	uxth	r2, r3
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	e032      	b.n	800589a <HAL_PCD_EP_DB_Transmit+0x392>
 8005834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	64bb      	str	r3, [r7, #72]	; 0x48
 800583a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <HAL_PCD_EP_DB_Transmit+0x342>
 8005844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005846:	3b01      	subs	r3, #1
 8005848:	64bb      	str	r3, [r7, #72]	; 0x48
 800584a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584c:	b29b      	uxth	r3, r3
 800584e:	029b      	lsls	r3, r3, #10
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e01b      	b.n	800589a <HAL_PCD_EP_DB_Transmit+0x392>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d117      	bne.n	800589a <HAL_PCD_EP_DB_Transmit+0x392>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	643b      	str	r3, [r7, #64]	; 0x40
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005878:	b29b      	uxth	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587e:	4413      	add	r3, r2
 8005880:	643b      	str	r3, [r7, #64]	; 0x40
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	011a      	lsls	r2, r3, #4
 8005888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588a:	4413      	add	r3, r2
 800588c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005894:	b29a      	uxth	r2, r3
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6959      	ldr	r1, [r3, #20]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	891a      	ldrh	r2, [r3, #8]
 80058a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f006 fcc2 	bl	800c232 <USB_WritePMA>
 80058ae:	e1d0      	b.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	3306      	adds	r3, #6
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d307      	bcc.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	619a      	str	r2, [r3, #24]
 80058f6:	e002      	b.n	80058fe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2200      	movs	r2, #0
 80058fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 80c4 	bne.w	8005a90 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d126      	bne.n	800595e <HAL_PCD_EP_DB_Transmit+0x456>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591e:	b29b      	uxth	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	4413      	add	r3, r2
 8005926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	011a      	lsls	r2, r3, #4
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	4413      	add	r3, r2
 8005932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005936:	66bb      	str	r3, [r7, #104]	; 0x68
 8005938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005942:	b29a      	uxth	r2, r3
 8005944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005956:	b29a      	uxth	r2, r3
 8005958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	e01a      	b.n	8005994 <HAL_PCD_EP_DB_Transmit+0x48c>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d116      	bne.n	8005994 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	677b      	str	r3, [r7, #116]	; 0x74
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005974:	b29b      	uxth	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597a:	4413      	add	r3, r2
 800597c:	677b      	str	r3, [r7, #116]	; 0x74
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	011a      	lsls	r2, r3, #4
 8005984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005986:	4413      	add	r3, r2
 8005988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800598c:	673b      	str	r3, [r7, #112]	; 0x70
 800598e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005990:	2200      	movs	r2, #0
 8005992:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	67bb      	str	r3, [r7, #120]	; 0x78
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d12f      	bne.n	8005a02 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059ba:	4413      	add	r3, r2
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	011a      	lsls	r2, r3, #4
 80059c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059ca:	4413      	add	r3, r2
 80059cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	e017      	b.n	8005a32 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d113      	bne.n	8005a32 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a18:	4413      	add	r3, r2
 8005a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	011a      	lsls	r2, r3, #4
 8005a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a2e:	2200      	movs	r2, #0
 8005a30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	4619      	mov	r1, r3
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f008 fa8e 	bl	800df5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 8104 	bne.w	8005c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	441a      	add	r2, r3
 8005a76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8013      	strh	r3, [r2, #0]
 8005a8e:	e0e0      	b.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d121      	bne.n	8005ade <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f040 80b4 	bne.w	8005c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005af2:	441a      	add	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b00:	441a      	add	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6a1a      	ldr	r2, [r3, #32]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d309      	bcc.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	621a      	str	r2, [r3, #32]
 8005b24:	e015      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b3c:	e009      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	667b      	str	r3, [r7, #100]	; 0x64
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d155      	bne.n	8005c0c <HAL_PCD_EP_DB_Transmit+0x704>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b74:	4413      	add	r3, r2
 8005b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	011a      	lsls	r2, r3, #4
 8005b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b80:	4413      	add	r3, r2
 8005b82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d112      	bne.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	e044      	b.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8005bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb8:	d811      	bhi.n	8005bde <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bcc:	3301      	adds	r3, #1
 8005bce:	657b      	str	r3, [r7, #84]	; 0x54
 8005bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	029b      	lsls	r3, r3, #10
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	e02f      	b.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8005bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	657b      	str	r3, [r7, #84]	; 0x54
 8005be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e018      	b.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d114      	bne.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c22:	4413      	add	r3, r2
 8005c24:	667b      	str	r3, [r7, #100]	; 0x64
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	011a      	lsls	r2, r3, #4
 8005c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c2e:	4413      	add	r3, r2
 8005c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c34:	663b      	str	r3, [r7, #96]	; 0x60
 8005c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6959      	ldr	r1, [r3, #20]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	895a      	ldrh	r2, [r3, #10]
 8005c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f006 faf0 	bl	800c232 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6c:	823b      	strh	r3, [r7, #16]
 8005c6e:	8a3b      	ldrh	r3, [r7, #16]
 8005c70:	f083 0310 	eor.w	r3, r3, #16
 8005c74:	823b      	strh	r3, [r7, #16]
 8005c76:	8a3b      	ldrh	r3, [r7, #16]
 8005c78:	f083 0320 	eor.w	r3, r3, #32
 8005c7c:	823b      	strh	r3, [r7, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	441a      	add	r2, r3
 8005c8c:	8a3b      	ldrh	r3, [r7, #16]
 8005c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3788      	adds	r7, #136	; 0x88
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	817b      	strh	r3, [r7, #10]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cca:	897b      	ldrh	r3, [r7, #10]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e009      	b.n	8005cf6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ce2:	897a      	ldrh	r2, [r7, #10]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cf6:	893b      	ldrh	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d107      	bne.n	8005d0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	80da      	strh	r2, [r3, #6]
 8005d0a:	e00b      	b.n	8005d24 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f001 b99a 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d02c      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x90>
 8005d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d122      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x90>
 8005d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d118      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x90>
 8005d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10e      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x90>
 8005da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x90>
 8005dba:	f240 114b 	movw	r1, #331	; 0x14b
 8005dbe:	48ba      	ldr	r0, [pc, #744]	; (80060a8 <HAL_RCC_OscConfig+0x374>)
 8005dc0:	f7fa fcf3 	bl	80007aa <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 819d 	beq.w	8006114 <HAL_RCC_OscConfig+0x3e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d016      	beq.n	8005e18 <HAL_RCC_OscConfig+0xe4>
 8005dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfa:	d00d      	beq.n	8005e18 <HAL_RCC_OscConfig+0xe4>
 8005dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0c:	d004      	beq.n	8005e18 <HAL_RCC_OscConfig+0xe4>
 8005e0e:	f240 1151 	movw	r1, #337	; 0x151
 8005e12:	48a5      	ldr	r0, [pc, #660]	; (80060a8 <HAL_RCC_OscConfig+0x374>)
 8005e14:	f7fa fcc9 	bl	80007aa <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e18:	4ba4      	ldr	r3, [pc, #656]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d00c      	beq.n	8005e3e <HAL_RCC_OscConfig+0x10a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e24:	4ba1      	ldr	r3, [pc, #644]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 030c 	and.w	r3, r3, #12
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d15c      	bne.n	8005eea <HAL_RCC_OscConfig+0x1b6>
 8005e30:	4b9e      	ldr	r3, [pc, #632]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d155      	bne.n	8005eea <HAL_RCC_OscConfig+0x1b6>
 8005e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e42:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005e4a:	fa93 f3a3 	rbit	r3, r3
 8005e4e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e56:	fab3 f383 	clz	r3, r3
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d102      	bne.n	8005e70 <HAL_RCC_OscConfig+0x13c>
 8005e6a:	4b90      	ldr	r3, [pc, #576]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	e015      	b.n	8005e9c <HAL_RCC_OscConfig+0x168>
 8005e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e74:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005e7c:	fa93 f3a3 	rbit	r3, r3
 8005e80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e88:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005e8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005e90:	fa93 f3a3 	rbit	r3, r3
 8005e94:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005e98:	4b84      	ldr	r3, [pc, #528]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ea0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005ea4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005ea8:	fa92 f2a2 	rbit	r2, r2
 8005eac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005eb0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005eb4:	fab2 f282 	clz	r2, r2
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	f042 0220 	orr.w	r2, r2, #32
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	f002 021f 	and.w	r2, r2, #31
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8120 	beq.w	8006112 <HAL_RCC_OscConfig+0x3de>
 8005ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 8117 	bne.w	8006112 <HAL_RCC_OscConfig+0x3de>
      {
        return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f001 b8d2 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efa:	d106      	bne.n	8005f0a <HAL_RCC_OscConfig+0x1d6>
 8005efc:	4b6b      	ldr	r3, [pc, #428]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a6a      	ldr	r2, [pc, #424]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e036      	b.n	8005f78 <HAL_RCC_OscConfig+0x244>
 8005f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x200>
 8005f1a:	4b64      	ldr	r3, [pc, #400]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a63      	ldr	r2, [pc, #396]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b61      	ldr	r3, [pc, #388]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a60      	ldr	r2, [pc, #384]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e021      	b.n	8005f78 <HAL_RCC_OscConfig+0x244>
 8005f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0x22c>
 8005f46:	4b59      	ldr	r3, [pc, #356]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a58      	ldr	r2, [pc, #352]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4b56      	ldr	r3, [pc, #344]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a55      	ldr	r2, [pc, #340]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e00b      	b.n	8005f78 <HAL_RCC_OscConfig+0x244>
 8005f60:	4b52      	ldr	r3, [pc, #328]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a51      	ldr	r2, [pc, #324]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a4e      	ldr	r2, [pc, #312]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f76:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f78:	4b4c      	ldr	r3, [pc, #304]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	f023 020f 	bic.w	r2, r3, #15
 8005f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4947      	ldr	r1, [pc, #284]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d059      	beq.n	8006056 <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa2:	f7fa fe85 	bl	8000cb0 <HAL_GetTick>
 8005fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fac:	f7fa fe80 	bl	8000cb0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b64      	cmp	r3, #100	; 0x64
 8005fba:	d902      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	f001 b866 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
 8005fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fc6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005fce:	fa93 f3a3 	rbit	r3, r3
 8005fd2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005fd6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fda:	fab3 f383 	clz	r3, r3
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d102      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x2c0>
 8005fee:	4b2f      	ldr	r3, [pc, #188]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	e015      	b.n	8006020 <HAL_RCC_OscConfig+0x2ec>
 8005ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ff8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006000:	fa93 f3a3 	rbit	r3, r3
 8006004:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800600c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006010:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006014:	fa93 f3a3 	rbit	r3, r3
 8006018:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800601c:	4b23      	ldr	r3, [pc, #140]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006024:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006028:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800602c:	fa92 f2a2 	rbit	r2, r2
 8006030:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006034:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006038:	fab2 f282 	clz	r2, r2
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	f042 0220 	orr.w	r2, r2, #32
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	f002 021f 	and.w	r2, r2, #31
 8006048:	2101      	movs	r1, #1
 800604a:	fa01 f202 	lsl.w	r2, r1, r2
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ab      	beq.n	8005fac <HAL_RCC_OscConfig+0x278>
 8006054:	e05e      	b.n	8006114 <HAL_RCC_OscConfig+0x3e0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006056:	f7fa fe2b 	bl	8000cb0 <HAL_GetTick>
 800605a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605e:	e00a      	b.n	8006076 <HAL_RCC_OscConfig+0x342>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006060:	f7fa fe26 	bl	8000cb0 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b64      	cmp	r3, #100	; 0x64
 800606e:	d902      	bls.n	8006076 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	f001 b80c 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
 8006076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800607a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006082:	fa93 f3a3 	rbit	r3, r3
 8006086:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800608a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608e:	fab3 f383 	clz	r3, r3
 8006092:	b2db      	uxtb	r3, r3
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d106      	bne.n	80060b0 <HAL_RCC_OscConfig+0x37c>
 80060a2:	4b02      	ldr	r3, [pc, #8]	; (80060ac <HAL_RCC_OscConfig+0x378>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	e019      	b.n	80060dc <HAL_RCC_OscConfig+0x3a8>
 80060a8:	0800eef0 	.word	0x0800eef0
 80060ac:	40021000 	.word	0x40021000
 80060b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80060bc:	fa93 f3a3 	rbit	r3, r3
 80060c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80060c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80060cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80060d0:	fa93 f3a3 	rbit	r3, r3
 80060d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80060d8:	4bc0      	ldr	r3, [pc, #768]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80060e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80060e8:	fa92 f2a2 	rbit	r2, r2
 80060ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80060f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80060f4:	fab2 f282 	clz	r2, r2
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	f042 0220 	orr.w	r2, r2, #32
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	f002 021f 	and.w	r2, r2, #31
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f202 	lsl.w	r2, r1, r2
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1a7      	bne.n	8006060 <HAL_RCC_OscConfig+0x32c>
 8006110:	e000      	b.n	8006114 <HAL_RCC_OscConfig+0x3e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006112:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 81a2 	beq.w	800646e <HAL_RCC_OscConfig+0x73a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800612a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00c      	beq.n	8006154 <HAL_RCC_OscConfig+0x420>
 800613a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800613e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d004      	beq.n	8006154 <HAL_RCC_OscConfig+0x420>
 800614a:	f240 1189 	movw	r1, #393	; 0x189
 800614e:	48a4      	ldr	r0, [pc, #656]	; (80063e0 <HAL_RCC_OscConfig+0x6ac>)
 8006150:	f7fa fb2b 	bl	80007aa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	2b1f      	cmp	r3, #31
 8006162:	d904      	bls.n	800616e <HAL_RCC_OscConfig+0x43a>
 8006164:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8006168:	489d      	ldr	r0, [pc, #628]	; (80063e0 <HAL_RCC_OscConfig+0x6ac>)
 800616a:	f7fa fb1e 	bl	80007aa <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800616e:	4b9b      	ldr	r3, [pc, #620]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <HAL_RCC_OscConfig+0x45e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800617a:	4b98      	ldr	r3, [pc, #608]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f003 030c 	and.w	r3, r3, #12
 8006182:	2b08      	cmp	r3, #8
 8006184:	d172      	bne.n	800626c <HAL_RCC_OscConfig+0x538>
 8006186:	4b95      	ldr	r3, [pc, #596]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d16c      	bne.n	800626c <HAL_RCC_OscConfig+0x538>
 8006192:	2302      	movs	r3, #2
 8006194:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006198:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80061a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a8:	fab3 f383 	clz	r3, r3
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d102      	bne.n	80061c2 <HAL_RCC_OscConfig+0x48e>
 80061bc:	4b87      	ldr	r3, [pc, #540]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	e013      	b.n	80061ea <HAL_RCC_OscConfig+0x4b6>
 80061c2:	2302      	movs	r3, #2
 80061c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80061d4:	2302      	movs	r3, #2
 80061d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80061da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80061de:	fa93 f3a3 	rbit	r3, r3
 80061e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80061e6:	4b7d      	ldr	r3, [pc, #500]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	2202      	movs	r2, #2
 80061ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80061f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80061f4:	fa92 f2a2 	rbit	r2, r2
 80061f8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80061fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006200:	fab2 f282 	clz	r2, r2
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	f042 0220 	orr.w	r2, r2, #32
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	f002 021f 	and.w	r2, r2, #31
 8006210:	2101      	movs	r1, #1
 8006212:	fa01 f202 	lsl.w	r2, r1, r2
 8006216:	4013      	ands	r3, r2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_RCC_OscConfig+0x4fe>
 800621c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d002      	beq.n	8006232 <HAL_RCC_OscConfig+0x4fe>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f000 bf2e 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006232:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800623e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	21f8      	movs	r1, #248	; 0xf8
 8006248:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006250:	fa91 f1a1 	rbit	r1, r1
 8006254:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006258:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800625c:	fab1 f181 	clz	r1, r1
 8006260:	b2c9      	uxtb	r1, r1
 8006262:	408b      	lsls	r3, r1
 8006264:	495d      	ldr	r1, [pc, #372]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626a:	e100      	b.n	800646e <HAL_RCC_OscConfig+0x73a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800626c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8088 	beq.w	800638e <HAL_RCC_OscConfig+0x65a>
 800627e:	2301      	movs	r3, #1
 8006280:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006284:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006288:	fa93 f3a3 	rbit	r3, r3
 800628c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006290:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006294:	fab3 f383 	clz	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800629e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	461a      	mov	r2, r3
 80062a6:	2301      	movs	r3, #1
 80062a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062aa:	f7fa fd01 	bl	8000cb0 <HAL_GetTick>
 80062ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b2:	e00a      	b.n	80062ca <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b4:	f7fa fcfc 	bl	8000cb0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d902      	bls.n	80062ca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	f000 bee2 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
 80062ca:	2302      	movs	r3, #2
 80062cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80062d4:	fa93 f3a3 	rbit	r3, r3
 80062d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80062dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e0:	fab3 f383 	clz	r3, r3
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d102      	bne.n	80062fa <HAL_RCC_OscConfig+0x5c6>
 80062f4:	4b39      	ldr	r3, [pc, #228]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	e013      	b.n	8006322 <HAL_RCC_OscConfig+0x5ee>
 80062fa:	2302      	movs	r3, #2
 80062fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006304:	fa93 f3a3 	rbit	r3, r3
 8006308:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800630c:	2302      	movs	r3, #2
 800630e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006312:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800631e:	4b2f      	ldr	r3, [pc, #188]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	2202      	movs	r2, #2
 8006324:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006328:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800632c:	fa92 f2a2 	rbit	r2, r2
 8006330:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006334:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006338:	fab2 f282 	clz	r2, r2
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	f042 0220 	orr.w	r2, r2, #32
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	f002 021f 	and.w	r2, r2, #31
 8006348:	2101      	movs	r1, #1
 800634a:	fa01 f202 	lsl.w	r2, r1, r2
 800634e:	4013      	ands	r3, r2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0af      	beq.n	80062b4 <HAL_RCC_OscConfig+0x580>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006354:	4b21      	ldr	r3, [pc, #132]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	21f8      	movs	r1, #248	; 0xf8
 800636a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006372:	fa91 f1a1 	rbit	r1, r1
 8006376:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800637a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800637e:	fab1 f181 	clz	r1, r1
 8006382:	b2c9      	uxtb	r1, r1
 8006384:	408b      	lsls	r3, r1
 8006386:	4915      	ldr	r1, [pc, #84]	; (80063dc <HAL_RCC_OscConfig+0x6a8>)
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	e06f      	b.n	800646e <HAL_RCC_OscConfig+0x73a>
 800638e:	2301      	movs	r3, #1
 8006390:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006394:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80063a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a4:	fab3 f383 	clz	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ba:	f7fa fc79 	bl	8000cb0 <HAL_GetTick>
 80063be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c2:	e00f      	b.n	80063e4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c4:	f7fa fc74 	bl	8000cb0 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d907      	bls.n	80063e4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	f000 be5a 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000
 80063e0:	0800eef0 	.word	0x0800eef0
 80063e4:	2302      	movs	r3, #2
 80063e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80063f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063fa:	fab3 f383 	clz	r3, r3
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f043 0301 	orr.w	r3, r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d102      	bne.n	8006414 <HAL_RCC_OscConfig+0x6e0>
 800640e:	4b81      	ldr	r3, [pc, #516]	; (8006614 <HAL_RCC_OscConfig+0x8e0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	e013      	b.n	800643c <HAL_RCC_OscConfig+0x708>
 8006414:	2302      	movs	r3, #2
 8006416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800641e:	fa93 f3a3 	rbit	r3, r3
 8006422:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006426:	2302      	movs	r3, #2
 8006428:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800642c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006430:	fa93 f3a3 	rbit	r3, r3
 8006434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006438:	4b76      	ldr	r3, [pc, #472]	; (8006614 <HAL_RCC_OscConfig+0x8e0>)
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2202      	movs	r2, #2
 800643e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006442:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006446:	fa92 f2a2 	rbit	r2, r2
 800644a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800644e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006452:	fab2 f282 	clz	r2, r2
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	f042 0220 	orr.w	r2, r2, #32
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	f002 021f 	and.w	r2, r2, #31
 8006462:	2101      	movs	r1, #1
 8006464:	fa01 f202 	lsl.w	r2, r1, r2
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1aa      	bne.n	80063c4 <HAL_RCC_OscConfig+0x690>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800646e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 812b 	beq.w	80066da <HAL_RCC_OscConfig+0x9a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <HAL_RCC_OscConfig+0x77a>
 8006494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d004      	beq.n	80064ae <HAL_RCC_OscConfig+0x77a>
 80064a4:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80064a8:	485b      	ldr	r0, [pc, #364]	; (8006618 <HAL_RCC_OscConfig+0x8e4>)
 80064aa:	f7fa f97e 	bl	80007aa <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d079      	beq.n	80065b2 <HAL_RCC_OscConfig+0x87e>
 80064be:	2301      	movs	r3, #1
 80064c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80064c8:	fa93 f3a3 	rbit	r3, r3
 80064cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80064d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d4:	fab3 f383 	clz	r3, r3
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	4b4f      	ldr	r3, [pc, #316]	; (800661c <HAL_RCC_OscConfig+0x8e8>)
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	461a      	mov	r2, r3
 80064e4:	2301      	movs	r3, #1
 80064e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e8:	f7fa fbe2 	bl	8000cb0 <HAL_GetTick>
 80064ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f0:	e00a      	b.n	8006508 <HAL_RCC_OscConfig+0x7d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f2:	f7fa fbdd 	bl	8000cb0 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d902      	bls.n	8006508 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	f000 bdc3 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
 8006508:	2302      	movs	r3, #2
 800650a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006512:	fa93 f3a3 	rbit	r3, r3
 8006516:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800651a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800651e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006522:	2202      	movs	r2, #2
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800652a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	fa93 f2a3 	rbit	r2, r3
 8006534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006546:	2202      	movs	r2, #2
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	fa93 f2a3 	rbit	r2, r3
 8006558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006560:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006562:	4b2c      	ldr	r3, [pc, #176]	; (8006614 <HAL_RCC_OscConfig+0x8e0>)
 8006564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800656a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800656e:	2102      	movs	r1, #2
 8006570:	6019      	str	r1, [r3, #0]
 8006572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006576:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	fa93 f1a3 	rbit	r1, r3
 8006580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006584:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006588:	6019      	str	r1, [r3, #0]
  return result;
 800658a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800658e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	fab3 f383 	clz	r3, r3
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f303 	lsl.w	r3, r1, r3
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0a0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x7be>
 80065b0:	e093      	b.n	80066da <HAL_RCC_OscConfig+0x9a6>
 80065b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	fa93 f2a3 	rbit	r2, r3
 80065cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065d4:	601a      	str	r2, [r3, #0]
  return result;
 80065d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065e0:	fab3 f383 	clz	r3, r3
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <HAL_RCC_OscConfig+0x8e8>)
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	461a      	mov	r2, r3
 80065f0:	2300      	movs	r3, #0
 80065f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f4:	f7fa fb5c 	bl	8000cb0 <HAL_GetTick>
 80065f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065fc:	e010      	b.n	8006620 <HAL_RCC_OscConfig+0x8ec>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065fe:	f7fa fb57 	bl	8000cb0 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d908      	bls.n	8006620 <HAL_RCC_OscConfig+0x8ec>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	f000 bd3d 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
 8006614:	40021000 	.word	0x40021000
 8006618:	0800eef0 	.word	0x0800eef0
 800661c:	10908120 	.word	0x10908120
 8006620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006624:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006628:	2202      	movs	r2, #2
 800662a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006630:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	fa93 f2a3 	rbit	r2, r3
 800663a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800663e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006648:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800664c:	2202      	movs	r2, #2
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006654:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	fa93 f2a3 	rbit	r2, r3
 800665e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006662:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800666c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006670:	2202      	movs	r2, #2
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	fa93 f2a3 	rbit	r2, r3
 8006682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006686:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800668a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800668c:	4bb8      	ldr	r3, [pc, #736]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 800668e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006694:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006698:	2102      	movs	r1, #2
 800669a:	6019      	str	r1, [r3, #0]
 800669c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066a0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	fa93 f1a3 	rbit	r1, r3
 80066aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80066b2:	6019      	str	r1, [r3, #0]
  return result;
 80066b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	fab3 f383 	clz	r3, r3
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2101      	movs	r1, #1
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d191      	bne.n	80065fe <HAL_RCC_OscConfig+0x8ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 81c0 	beq.w	8006a70 <HAL_RCC_OscConfig+0xd3c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066f0:	2300      	movs	r3, #0
 80066f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80066f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d014      	beq.n	8006730 <HAL_RCC_OscConfig+0x9fc>
 8006706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800670a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d00c      	beq.n	8006730 <HAL_RCC_OscConfig+0x9fc>
 8006716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800671a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b05      	cmp	r3, #5
 8006724:	d004      	beq.n	8006730 <HAL_RCC_OscConfig+0x9fc>
 8006726:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800672a:	4892      	ldr	r0, [pc, #584]	; (8006974 <HAL_RCC_OscConfig+0xc40>)
 800672c:	f7fa f83d 	bl	80007aa <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006730:	4b8f      	ldr	r3, [pc, #572]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d116      	bne.n	800676a <HAL_RCC_OscConfig+0xa36>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800673c:	4b8c      	ldr	r3, [pc, #560]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4a8b      	ldr	r2, [pc, #556]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006746:	61d3      	str	r3, [r2, #28]
 8006748:	4b89      	ldr	r3, [pc, #548]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006754:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800675e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006762:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676a:	4b83      	ldr	r3, [pc, #524]	; (8006978 <HAL_RCC_OscConfig+0xc44>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	2b00      	cmp	r3, #0
 8006774:	d11b      	bne.n	80067ae <HAL_RCC_OscConfig+0xa7a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006776:	4b80      	ldr	r3, [pc, #512]	; (8006978 <HAL_RCC_OscConfig+0xc44>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a7f      	ldr	r2, [pc, #508]	; (8006978 <HAL_RCC_OscConfig+0xc44>)
 800677c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006780:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006782:	f7fa fa95 	bl	8000cb0 <HAL_GetTick>
 8006786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678a:	e00a      	b.n	80067a2 <HAL_RCC_OscConfig+0xa6e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800678c:	f7fa fa90 	bl	8000cb0 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b64      	cmp	r3, #100	; 0x64
 800679a:	d902      	bls.n	80067a2 <HAL_RCC_OscConfig+0xa6e>
        {
          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	f000 bc76 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a2:	4b75      	ldr	r3, [pc, #468]	; (8006978 <HAL_RCC_OscConfig+0xc44>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0ee      	beq.n	800678c <HAL_RCC_OscConfig+0xa58>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d106      	bne.n	80067cc <HAL_RCC_OscConfig+0xa98>
 80067be:	4b6c      	ldr	r3, [pc, #432]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	4a6b      	ldr	r2, [pc, #428]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	6213      	str	r3, [r2, #32]
 80067ca:	e035      	b.n	8006838 <HAL_RCC_OscConfig+0xb04>
 80067cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10c      	bne.n	80067f6 <HAL_RCC_OscConfig+0xac2>
 80067dc:	4b64      	ldr	r3, [pc, #400]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	4a63      	ldr	r2, [pc, #396]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	6213      	str	r3, [r2, #32]
 80067e8:	4b61      	ldr	r3, [pc, #388]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	4a60      	ldr	r2, [pc, #384]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 80067ee:	f023 0304 	bic.w	r3, r3, #4
 80067f2:	6213      	str	r3, [r2, #32]
 80067f4:	e020      	b.n	8006838 <HAL_RCC_OscConfig+0xb04>
 80067f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b05      	cmp	r3, #5
 8006804:	d10c      	bne.n	8006820 <HAL_RCC_OscConfig+0xaec>
 8006806:	4b5a      	ldr	r3, [pc, #360]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	4a59      	ldr	r2, [pc, #356]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 800680c:	f043 0304 	orr.w	r3, r3, #4
 8006810:	6213      	str	r3, [r2, #32]
 8006812:	4b57      	ldr	r3, [pc, #348]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	4a56      	ldr	r2, [pc, #344]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	6213      	str	r3, [r2, #32]
 800681e:	e00b      	b.n	8006838 <HAL_RCC_OscConfig+0xb04>
 8006820:	4b53      	ldr	r3, [pc, #332]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	4a52      	ldr	r2, [pc, #328]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	6213      	str	r3, [r2, #32]
 800682c:	4b50      	ldr	r3, [pc, #320]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	4a4f      	ldr	r2, [pc, #316]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006832:	f023 0304 	bic.w	r3, r3, #4
 8006836:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800683c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8082 	beq.w	800694e <HAL_RCC_OscConfig+0xc1a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800684a:	f7fa fa31 	bl	8000cb0 <HAL_GetTick>
 800684e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006852:	e00c      	b.n	800686e <HAL_RCC_OscConfig+0xb3a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006854:	f7fa fa2c 	bl	8000cb0 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	f241 3288 	movw	r2, #5000	; 0x1388
 8006864:	4293      	cmp	r3, r2
 8006866:	d902      	bls.n	800686e <HAL_RCC_OscConfig+0xb3a>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	f000 bc10 	b.w	800708e <HAL_RCC_OscConfig+0x135a>
 800686e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006872:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006876:	2202      	movs	r2, #2
 8006878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800687e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	fa93 f2a3 	rbit	r2, r3
 8006888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800688c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006896:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800689a:	2202      	movs	r2, #2
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	fa93 f2a3 	rbit	r2, r3
 80068ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80068b4:	601a      	str	r2, [r3, #0]
  return result;
 80068b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80068be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c0:	fab3 f383 	clz	r3, r3
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f043 0302 	orr.w	r3, r3, #2
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d102      	bne.n	80068da <HAL_RCC_OscConfig+0xba6>
 80068d4:	4b26      	ldr	r3, [pc, #152]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	e013      	b.n	8006902 <HAL_RCC_OscConfig+0xbce>
 80068da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80068e2:	2202      	movs	r2, #2
 80068e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068ea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	fa93 f2a3 	rbit	r2, r3
 80068f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068f8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <HAL_RCC_OscConfig+0xc3c>)
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006906:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800690a:	2102      	movs	r1, #2
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006912:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	fa92 f1a2 	rbit	r1, r2
 800691c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006920:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006924:	6011      	str	r1, [r2, #0]
  return result;
 8006926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800692a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	fab2 f282 	clz	r2, r2
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	f002 021f 	and.w	r2, r2, #31
 8006940:	2101      	movs	r1, #1
 8006942:	fa01 f202 	lsl.w	r2, r1, r2
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d083      	beq.n	8006854 <HAL_RCC_OscConfig+0xb20>
 800694c:	e086      	b.n	8006a5c <HAL_RCC_OscConfig+0xd28>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694e:	f7fa f9af 	bl	8000cb0 <HAL_GetTick>
 8006952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006956:	e011      	b.n	800697c <HAL_RCC_OscConfig+0xc48>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006958:	f7fa f9aa 	bl	8000cb0 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	f241 3288 	movw	r2, #5000	; 0x1388
 8006968:	4293      	cmp	r3, r2
 800696a:	d907      	bls.n	800697c <HAL_RCC_OscConfig+0xc48>
        {
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e38e      	b.n	800708e <HAL_RCC_OscConfig+0x135a>
 8006970:	40021000 	.word	0x40021000
 8006974:	0800eef0 	.word	0x0800eef0
 8006978:	40007000 	.word	0x40007000
 800697c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006980:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006984:	2202      	movs	r2, #2
 8006986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800698c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	fa93 f2a3 	rbit	r2, r3
 8006996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800699a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069a4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80069a8:	2202      	movs	r2, #2
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069b0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	fa93 f2a3 	rbit	r2, r3
 80069ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80069c2:	601a      	str	r2, [r3, #0]
  return result;
 80069c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80069cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ce:	fab3 f383 	clz	r3, r3
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f043 0302 	orr.w	r3, r3, #2
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d102      	bne.n	80069e8 <HAL_RCC_OscConfig+0xcb4>
 80069e2:	4bbb      	ldr	r3, [pc, #748]	; (8006cd0 <HAL_RCC_OscConfig+0xf9c>)
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	e013      	b.n	8006a10 <HAL_RCC_OscConfig+0xcdc>
 80069e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ec:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80069f0:	2202      	movs	r2, #2
 80069f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069f8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	fa93 f2a3 	rbit	r2, r3
 8006a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a06:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	4bb0      	ldr	r3, [pc, #704]	; (8006cd0 <HAL_RCC_OscConfig+0xf9c>)
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a14:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006a18:	2102      	movs	r1, #2
 8006a1a:	6011      	str	r1, [r2, #0]
 8006a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a20:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	fa92 f1a2 	rbit	r1, r2
 8006a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a2e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006a32:	6011      	str	r1, [r2, #0]
  return result;
 8006a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006a38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	fab2 f282 	clz	r2, r2
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	f002 021f 	and.w	r2, r2, #31
 8006a4e:	2101      	movs	r1, #1
 8006a50:	fa01 f202 	lsl.w	r2, r1, r2
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f47f af7e 	bne.w	8006958 <HAL_RCC_OscConfig+0xc24>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d105      	bne.n	8006a70 <HAL_RCC_OscConfig+0xd3c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a64:	4b9a      	ldr	r3, [pc, #616]	; (8006cd0 <HAL_RCC_OscConfig+0xf9c>)
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	4a99      	ldr	r2, [pc, #612]	; (8006cd0 <HAL_RCC_OscConfig+0xf9c>)
 8006a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d014      	beq.n	8006aaa <HAL_RCC_OscConfig+0xd76>
 8006a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d00c      	beq.n	8006aaa <HAL_RCC_OscConfig+0xd76>
 8006a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d004      	beq.n	8006aaa <HAL_RCC_OscConfig+0xd76>
 8006aa0:	f240 213a 	movw	r1, #570	; 0x23a
 8006aa4:	488b      	ldr	r0, [pc, #556]	; (8006cd4 <HAL_RCC_OscConfig+0xfa0>)
 8006aa6:	f7f9 fe80 	bl	80007aa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 82e8 	beq.w	800708c <HAL_RCC_OscConfig+0x1358>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006abc:	4b84      	ldr	r3, [pc, #528]	; (8006cd0 <HAL_RCC_OscConfig+0xf9c>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f003 030c 	and.w	r3, r3, #12
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	f000 82b6 	beq.w	8007036 <HAL_RCC_OscConfig+0x1302>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	f040 8207 	bne.w	8006eea <HAL_RCC_OscConfig+0x11b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00d      	beq.n	8006b08 <HAL_RCC_OscConfig+0xdd4>
 8006aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afc:	d004      	beq.n	8006b08 <HAL_RCC_OscConfig+0xdd4>
 8006afe:	f240 2143 	movw	r1, #579	; 0x243
 8006b02:	4874      	ldr	r0, [pc, #464]	; (8006cd4 <HAL_RCC_OscConfig+0xfa0>)
 8006b04:	f7f9 fe51 	bl	80007aa <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8006b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8083 	beq.w	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b2a:	d079      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b3c:	d070      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b4e:	d067      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b60:	d05e      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006b72:	d055      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b84:	d04c      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006b96:	d043      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba8:	d03a      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006bba:	d031      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006bcc:	d028      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006bde:	d01f      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006be4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bf0:	d016      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8006c02:	d00d      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8006c14:	d004      	beq.n	8006c20 <HAL_RCC_OscConfig+0xeec>
 8006c16:	f44f 7111 	mov.w	r1, #580	; 0x244
 8006c1a:	482e      	ldr	r0, [pc, #184]	; (8006cd4 <HAL_RCC_OscConfig+0xfa0>)
 8006c1c:	f7f9 fdc5 	bl	80007aa <assert_failed>
 8006c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c32:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	fa93 f2a3 	rbit	r2, r3
 8006c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c40:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006c44:	601a      	str	r2, [r3, #0]
  return result;
 8006c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c4a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006c4e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c50:	fab3 f383 	clz	r3, r3
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	461a      	mov	r2, r3
 8006c62:	2300      	movs	r3, #0
 8006c64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c66:	f7fa f823 	bl	8000cb0 <HAL_GetTick>
 8006c6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c6e:	e009      	b.n	8006c84 <HAL_RCC_OscConfig+0xf50>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c70:	f7fa f81e 	bl	8000cb0 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0xf50>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e204      	b.n	800708e <HAL_RCC_OscConfig+0x135a>
 8006c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c88:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c96:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	fa93 f2a3 	rbit	r2, r3
 8006ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ca4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006ca8:	601a      	str	r2, [r3, #0]
  return result;
 8006caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006cb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cb4:	fab3 f383 	clz	r3, r3
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d107      	bne.n	8006cd8 <HAL_RCC_OscConfig+0xfa4>
 8006cc8:	4b01      	ldr	r3, [pc, #4]	; (8006cd0 <HAL_RCC_OscConfig+0xf9c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	e02c      	b.n	8006d28 <HAL_RCC_OscConfig+0xff4>
 8006cce:	bf00      	nop
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	0800eef0 	.word	0x0800eef0
 8006cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cdc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	fa93 f2a3 	rbit	r2, r3
 8006cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cf8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d02:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d10:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	fa93 f2a3 	rbit	r2, r3
 8006d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d1e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	4bc9      	ldr	r3, [pc, #804]	; (800704c <HAL_RCC_OscConfig+0x1318>)
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d2c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006d30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d34:	6011      	str	r1, [r2, #0]
 8006d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d3a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	fa92 f1a2 	rbit	r1, r2
 8006d44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d48:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006d4c:	6011      	str	r1, [r2, #0]
  return result;
 8006d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006d52:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	fab2 f282 	clz	r2, r2
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	f042 0220 	orr.w	r2, r2, #32
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	f002 021f 	and.w	r2, r2, #31
 8006d68:	2101      	movs	r1, #1
 8006d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f47f af7d 	bne.w	8006c70 <HAL_RCC_OscConfig+0xf3c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d76:	4bb5      	ldr	r3, [pc, #724]	; (800704c <HAL_RCC_OscConfig+0x1318>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	430b      	orrs	r3, r1
 8006d98:	49ac      	ldr	r1, [pc, #688]	; (800704c <HAL_RCC_OscConfig+0x1318>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	604b      	str	r3, [r1, #4]
 8006d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006da2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006da6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006db0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	fa93 f2a3 	rbit	r2, r3
 8006dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dbe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006dc2:	601a      	str	r2, [r3, #0]
  return result;
 8006dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dc8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006dcc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dce:	fab3 f383 	clz	r3, r3
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	461a      	mov	r2, r3
 8006de0:	2301      	movs	r3, #1
 8006de2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de4:	f7f9 ff64 	bl	8000cb0 <HAL_GetTick>
 8006de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dec:	e009      	b.n	8006e02 <HAL_RCC_OscConfig+0x10ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dee:	f7f9 ff5f 	bl	8000cb0 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x10ce>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e145      	b.n	800708e <HAL_RCC_OscConfig+0x135a>
 8006e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	fa93 f2a3 	rbit	r2, r3
 8006e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006e26:	601a      	str	r2, [r3, #0]
  return result;
 8006e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006e30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e32:	fab3 f383 	clz	r3, r3
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d102      	bne.n	8006e4c <HAL_RCC_OscConfig+0x1118>
 8006e46:	4b81      	ldr	r3, [pc, #516]	; (800704c <HAL_RCC_OscConfig+0x1318>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	e027      	b.n	8006e9c <HAL_RCC_OscConfig+0x1168>
 8006e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	fa93 f2a3 	rbit	r2, r3
 8006e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	fa93 f2a3 	rbit	r2, r3
 8006e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	4b6c      	ldr	r3, [pc, #432]	; (800704c <HAL_RCC_OscConfig+0x1318>)
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ea0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006ea4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ea8:	6011      	str	r1, [r2, #0]
 8006eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006eae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	fa92 f1a2 	rbit	r1, r2
 8006eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ebc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006ec0:	6011      	str	r1, [r2, #0]
  return result;
 8006ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ec6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	fab2 f282 	clz	r2, r2
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	f042 0220 	orr.w	r2, r2, #32
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	f002 021f 	and.w	r2, r2, #31
 8006edc:	2101      	movs	r1, #1
 8006ede:	fa01 f202 	lsl.w	r2, r1, r2
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d082      	beq.n	8006dee <HAL_RCC_OscConfig+0x10ba>
 8006ee8:	e0d0      	b.n	800708c <HAL_RCC_OscConfig+0x1358>
 8006eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006ef2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006efc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	fa93 f2a3 	rbit	r2, r3
 8006f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006f0e:	601a      	str	r2, [r3, #0]
  return result;
 8006f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006f18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f1a:	fab3 f383 	clz	r3, r3
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f30:	f7f9 febe 	bl	8000cb0 <HAL_GetTick>
 8006f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f38:	e009      	b.n	8006f4e <HAL_RCC_OscConfig+0x121a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f3a:	f7f9 feb9 	bl	8000cb0 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x121a>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e09f      	b.n	800708e <HAL_RCC_OscConfig+0x135a>
 8006f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	fa93 f2a3 	rbit	r2, r3
 8006f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006f72:	601a      	str	r2, [r3, #0]
  return result;
 8006f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006f7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f7e:	fab3 f383 	clz	r3, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d102      	bne.n	8006f98 <HAL_RCC_OscConfig+0x1264>
 8006f92:	4b2e      	ldr	r3, [pc, #184]	; (800704c <HAL_RCC_OscConfig+0x1318>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	e027      	b.n	8006fe8 <HAL_RCC_OscConfig+0x12b4>
 8006f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006faa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	fa93 f2a3 	rbit	r2, r3
 8006fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fc2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fd0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	fa93 f2a3 	rbit	r2, r3
 8006fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fde:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <HAL_RCC_OscConfig+0x1318>)
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006fec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ff4:	6011      	str	r1, [r2, #0]
 8006ff6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ffa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	fa92 f1a2 	rbit	r1, r2
 8007004:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007008:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800700c:	6011      	str	r1, [r2, #0]
  return result;
 800700e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007012:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	fab2 f282 	clz	r2, r2
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	f042 0220 	orr.w	r2, r2, #32
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	f002 021f 	and.w	r2, r2, #31
 8007028:	2101      	movs	r1, #1
 800702a:	fa01 f202 	lsl.w	r2, r1, r2
 800702e:	4013      	ands	r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d182      	bne.n	8006f3a <HAL_RCC_OscConfig+0x1206>
 8007034:	e02a      	b.n	800708c <HAL_RCC_OscConfig+0x1358>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800703a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d104      	bne.n	8007050 <HAL_RCC_OscConfig+0x131c>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e021      	b.n	800708e <HAL_RCC_OscConfig+0x135a>
 800704a:	bf00      	nop
 800704c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007050:	4b11      	ldr	r3, [pc, #68]	; (8007098 <HAL_RCC_OscConfig+0x1364>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007058:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800705c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007064:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	429a      	cmp	r2, r3
 800706e:	d10b      	bne.n	8007088 <HAL_RCC_OscConfig+0x1354>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007070:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007074:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800707c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_OscConfig+0x1358>
#endif
        {
          return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e000      	b.n	800708e <HAL_RCC_OscConfig+0x135a>
        }
      }
    }
  }

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40021000 	.word	0x40021000

0800709c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b09e      	sub	sp, #120	; 0x78
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e205      	b.n	80074c0 <HAL_RCC_ClockConfig+0x424>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d116      	bne.n	80070ee <HAL_RCC_ClockConfig+0x52>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d110      	bne.n	80070ee <HAL_RCC_ClockConfig+0x52>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <HAL_RCC_ClockConfig+0x52>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <HAL_RCC_ClockConfig+0x52>
 80070e4:	f240 21c3 	movw	r1, #707	; 0x2c3
 80070e8:	489a      	ldr	r0, [pc, #616]	; (8007354 <HAL_RCC_ClockConfig+0x2b8>)
 80070ea:	f7f9 fb5e 	bl	80007aa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_RCC_ClockConfig+0x6e>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d007      	beq.n	800710a <HAL_RCC_ClockConfig+0x6e>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d004      	beq.n	800710a <HAL_RCC_ClockConfig+0x6e>
 8007100:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8007104:	4893      	ldr	r0, [pc, #588]	; (8007354 <HAL_RCC_ClockConfig+0x2b8>)
 8007106:	f7f9 fb50 	bl	80007aa <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800710a:	4b93      	ldr	r3, [pc, #588]	; (8007358 <HAL_RCC_ClockConfig+0x2bc>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d910      	bls.n	800713a <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007118:	4b8f      	ldr	r3, [pc, #572]	; (8007358 <HAL_RCC_ClockConfig+0x2bc>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f023 0207 	bic.w	r2, r3, #7
 8007120:	498d      	ldr	r1, [pc, #564]	; (8007358 <HAL_RCC_ClockConfig+0x2bc>)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007128:	4b8b      	ldr	r3, [pc, #556]	; (8007358 <HAL_RCC_ClockConfig+0x2bc>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d001      	beq.n	800713a <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e1c2      	b.n	80074c0 <HAL_RCC_ClockConfig+0x424>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d031      	beq.n	80071aa <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d024      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d020      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b90      	cmp	r3, #144	; 0x90
 800715c:	d01c      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2ba0      	cmp	r3, #160	; 0xa0
 8007164:	d018      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2bb0      	cmp	r3, #176	; 0xb0
 800716c:	d014      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2bc0      	cmp	r3, #192	; 0xc0
 8007174:	d010      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2bd0      	cmp	r3, #208	; 0xd0
 800717c:	d00c      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	2be0      	cmp	r3, #224	; 0xe0
 8007184:	d008      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2bf0      	cmp	r3, #240	; 0xf0
 800718c:	d004      	beq.n	8007198 <HAL_RCC_ClockConfig+0xfc>
 800718e:	f240 21db 	movw	r1, #731	; 0x2db
 8007192:	4870      	ldr	r0, [pc, #448]	; (8007354 <HAL_RCC_ClockConfig+0x2b8>)
 8007194:	f7f9 fb09 	bl	80007aa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007198:	4b70      	ldr	r3, [pc, #448]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	496d      	ldr	r1, [pc, #436]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 80f5 	beq.w	80073a2 <HAL_RCC_ClockConfig+0x306>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00c      	beq.n	80071da <HAL_RCC_ClockConfig+0x13e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d008      	beq.n	80071da <HAL_RCC_ClockConfig+0x13e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d004      	beq.n	80071da <HAL_RCC_ClockConfig+0x13e>
 80071d0:	f240 21e2 	movw	r1, #738	; 0x2e2
 80071d4:	485f      	ldr	r0, [pc, #380]	; (8007354 <HAL_RCC_ClockConfig+0x2b8>)
 80071d6:	f7f9 fae8 	bl	80007aa <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d13d      	bne.n	800725e <HAL_RCC_ClockConfig+0x1c2>
 80071e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071e6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071ea:	fa93 f3a3 	rbit	r3, r3
 80071ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80071f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	fab3 f383 	clz	r3, r3
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b01      	cmp	r3, #1
 8007204:	d102      	bne.n	800720c <HAL_RCC_ClockConfig+0x170>
 8007206:	4b55      	ldr	r3, [pc, #340]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	e00f      	b.n	800722c <HAL_RCC_ClockConfig+0x190>
 800720c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007210:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007214:	fa93 f3a3 	rbit	r3, r3
 8007218:	667b      	str	r3, [r7, #100]	; 0x64
 800721a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800721e:	663b      	str	r3, [r7, #96]	; 0x60
 8007220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007222:	fa93 f3a3 	rbit	r3, r3
 8007226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007228:	4b4c      	ldr	r3, [pc, #304]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007230:	65ba      	str	r2, [r7, #88]	; 0x58
 8007232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007234:	fa92 f2a2 	rbit	r2, r2
 8007238:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800723a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800723c:	fab2 f282 	clz	r2, r2
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	f042 0220 	orr.w	r2, r2, #32
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	f002 021f 	and.w	r2, r2, #31
 800724c:	2101      	movs	r1, #1
 800724e:	fa01 f202 	lsl.w	r2, r1, r2
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 8083 	bne.w	8007360 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e130      	b.n	80074c0 <HAL_RCC_ClockConfig+0x424>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d13c      	bne.n	80072e0 <HAL_RCC_ClockConfig+0x244>
 8007266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800726a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726e:	fa93 f3a3 	rbit	r3, r3
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007276:	fab3 f383 	clz	r3, r3
 800727a:	b2db      	uxtb	r3, r3
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	d102      	bne.n	8007290 <HAL_RCC_ClockConfig+0x1f4>
 800728a:	4b34      	ldr	r3, [pc, #208]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	e00f      	b.n	80072b0 <HAL_RCC_ClockConfig+0x214>
 8007290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007294:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007298:	fa93 f3a3 	rbit	r3, r3
 800729c:	647b      	str	r3, [r7, #68]	; 0x44
 800729e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072a2:	643b      	str	r3, [r7, #64]	; 0x40
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	fa93 f3a3 	rbit	r3, r3
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ac:	4b2b      	ldr	r3, [pc, #172]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80072b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b8:	fa92 f2a2 	rbit	r2, r2
 80072bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80072be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072c0:	fab2 f282 	clz	r2, r2
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	f042 0220 	orr.w	r2, r2, #32
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	f002 021f 	and.w	r2, r2, #31
 80072d0:	2101      	movs	r1, #1
 80072d2:	fa01 f202 	lsl.w	r2, r1, r2
 80072d6:	4013      	ands	r3, r2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d141      	bne.n	8007360 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e0ef      	b.n	80074c0 <HAL_RCC_ClockConfig+0x424>
 80072e0:	2302      	movs	r3, #2
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	fa93 f3a3 	rbit	r3, r3
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ee:	fab3 f383 	clz	r3, r3
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d102      	bne.n	8007308 <HAL_RCC_ClockConfig+0x26c>
 8007302:	4b16      	ldr	r3, [pc, #88]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	e00d      	b.n	8007324 <HAL_RCC_ClockConfig+0x288>
 8007308:	2302      	movs	r3, #2
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	fa93 f3a3 	rbit	r3, r3
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
 8007314:	2302      	movs	r3, #2
 8007316:	623b      	str	r3, [r7, #32]
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	fa93 f3a3 	rbit	r3, r3
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <HAL_RCC_ClockConfig+0x2c0>)
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	2202      	movs	r2, #2
 8007326:	61ba      	str	r2, [r7, #24]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	fa92 f2a2 	rbit	r2, r2
 800732e:	617a      	str	r2, [r7, #20]
  return result;
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	fab2 f282 	clz	r2, r2
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	f042 0220 	orr.w	r2, r2, #32
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	f002 021f 	and.w	r2, r2, #31
 8007342:	2101      	movs	r1, #1
 8007344:	fa01 f202 	lsl.w	r2, r1, r2
 8007348:	4013      	ands	r3, r2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d108      	bne.n	8007360 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e0b6      	b.n	80074c0 <HAL_RCC_ClockConfig+0x424>
 8007352:	bf00      	nop
 8007354:	0800eef0 	.word	0x0800eef0
 8007358:	40022000 	.word	0x40022000
 800735c:	40021000 	.word	0x40021000
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007360:	4b59      	ldr	r3, [pc, #356]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f023 0203 	bic.w	r2, r3, #3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	4956      	ldr	r1, [pc, #344]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 800736e:	4313      	orrs	r3, r2
 8007370:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007372:	f7f9 fc9d 	bl	8000cb0 <HAL_GetTick>
 8007376:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007378:	e00a      	b.n	8007390 <HAL_RCC_ClockConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800737a:	f7f9 fc99 	bl	8000cb0 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f241 3288 	movw	r2, #5000	; 0x1388
 8007388:	4293      	cmp	r3, r2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_ClockConfig+0x2f4>
      {
        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e097      	b.n	80074c0 <HAL_RCC_ClockConfig+0x424>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007390:	4b4d      	ldr	r3, [pc, #308]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 020c 	and.w	r2, r3, #12
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	429a      	cmp	r2, r3
 80073a0:	d1eb      	bne.n	800737a <HAL_RCC_ClockConfig+0x2de>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073a2:	4b4a      	ldr	r3, [pc, #296]	; (80074cc <HAL_RCC_ClockConfig+0x430>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d210      	bcs.n	80073d2 <HAL_RCC_ClockConfig+0x336>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b0:	4b46      	ldr	r3, [pc, #280]	; (80074cc <HAL_RCC_ClockConfig+0x430>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f023 0207 	bic.w	r2, r3, #7
 80073b8:	4944      	ldr	r1, [pc, #272]	; (80074cc <HAL_RCC_ClockConfig+0x430>)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	4313      	orrs	r3, r2
 80073be:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c0:	4b42      	ldr	r3, [pc, #264]	; (80074cc <HAL_RCC_ClockConfig+0x430>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d001      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x336>
    {
      return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e076      	b.n	80074c0 <HAL_RCC_ClockConfig+0x424>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d025      	beq.n	800742a <HAL_RCC_ClockConfig+0x38e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d018      	beq.n	8007418 <HAL_RCC_ClockConfig+0x37c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ee:	d013      	beq.n	8007418 <HAL_RCC_ClockConfig+0x37c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80073f8:	d00e      	beq.n	8007418 <HAL_RCC_ClockConfig+0x37c>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007402:	d009      	beq.n	8007418 <HAL_RCC_ClockConfig+0x37c>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800740c:	d004      	beq.n	8007418 <HAL_RCC_ClockConfig+0x37c>
 800740e:	f240 311e 	movw	r1, #798	; 0x31e
 8007412:	482f      	ldr	r0, [pc, #188]	; (80074d0 <HAL_RCC_ClockConfig+0x434>)
 8007414:	f7f9 f9c9 	bl	80007aa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007418:	4b2b      	ldr	r3, [pc, #172]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4928      	ldr	r1, [pc, #160]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 8007426:	4313      	orrs	r3, r2
 8007428:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d026      	beq.n	8007484 <HAL_RCC_ClockConfig+0x3e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d018      	beq.n	8007470 <HAL_RCC_ClockConfig+0x3d4>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007446:	d013      	beq.n	8007470 <HAL_RCC_ClockConfig+0x3d4>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007450:	d00e      	beq.n	8007470 <HAL_RCC_ClockConfig+0x3d4>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800745a:	d009      	beq.n	8007470 <HAL_RCC_ClockConfig+0x3d4>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007464:	d004      	beq.n	8007470 <HAL_RCC_ClockConfig+0x3d4>
 8007466:	f240 3125 	movw	r1, #805	; 0x325
 800746a:	4819      	ldr	r0, [pc, #100]	; (80074d0 <HAL_RCC_ClockConfig+0x434>)
 800746c:	f7f9 f99d 	bl	80007aa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007470:	4b15      	ldr	r3, [pc, #84]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	4912      	ldr	r1, [pc, #72]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 8007480:	4313      	orrs	r3, r2
 8007482:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007484:	f000 f82c 	bl	80074e0 <HAL_RCC_GetSysClockFreq>
 8007488:	4601      	mov	r1, r0
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <HAL_RCC_ClockConfig+0x42c>)
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007492:	22f0      	movs	r2, #240	; 0xf0
 8007494:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	fa92 f2a2 	rbit	r2, r2
 800749c:	60fa      	str	r2, [r7, #12]
  return result;
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	fab2 f282 	clz	r2, r2
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	40d3      	lsrs	r3, r2
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <HAL_RCC_ClockConfig+0x438>)
 80074aa:	5cd3      	ldrb	r3, [r2, r3]
 80074ac:	fa21 f303 	lsr.w	r3, r1, r3
 80074b0:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <HAL_RCC_ClockConfig+0x43c>)
 80074b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <HAL_RCC_ClockConfig+0x440>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7f9 fbb5 	bl	8000c28 <HAL_InitTick>
  
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3778      	adds	r7, #120	; 0x78
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40022000 	.word	0x40022000
 80074d0:	0800eef0 	.word	0x0800eef0
 80074d4:	0800f078 	.word	0x0800f078
 80074d8:	20000000 	.word	0x20000000
 80074dc:	20000004 	.word	0x20000004

080074e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b08b      	sub	sp, #44	; 0x2c
 80074e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	2300      	movs	r3, #0
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	2300      	movs	r3, #0
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80074fa:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f003 030c 	and.w	r3, r3, #12
 8007506:	2b04      	cmp	r3, #4
 8007508:	d002      	beq.n	8007510 <HAL_RCC_GetSysClockFreq+0x30>
 800750a:	2b08      	cmp	r3, #8
 800750c:	d003      	beq.n	8007516 <HAL_RCC_GetSysClockFreq+0x36>
 800750e:	e03c      	b.n	800758a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007510:	4b24      	ldr	r3, [pc, #144]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007512:	623b      	str	r3, [r7, #32]
      break;
 8007514:	e03c      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800751c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007520:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	fa92 f2a2 	rbit	r2, r2
 8007528:	607a      	str	r2, [r7, #4]
  return result;
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	fab2 f282 	clz	r2, r2
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	40d3      	lsrs	r3, r2
 8007534:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007536:	5cd3      	ldrb	r3, [r2, r3]
 8007538:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800753a:	4b19      	ldr	r3, [pc, #100]	; (80075a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	220f      	movs	r2, #15
 8007544:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	fa92 f2a2 	rbit	r2, r2
 800754c:	60fa      	str	r2, [r7, #12]
  return result;
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	fab2 f282 	clz	r2, r2
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	40d3      	lsrs	r3, r2
 8007558:	4a14      	ldr	r2, [pc, #80]	; (80075ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800755a:	5cd3      	ldrb	r3, [r2, r3]
 800755c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007568:	4a0e      	ldr	r2, [pc, #56]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
 8007578:	e004      	b.n	8007584 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4a0c      	ldr	r2, [pc, #48]	; (80075b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800757e:	fb02 f303 	mul.w	r3, r2, r3
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	623b      	str	r3, [r7, #32]
      break;
 8007588:	e002      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800758c:	623b      	str	r3, [r7, #32]
      break;
 800758e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007590:	6a3b      	ldr	r3, [r7, #32]
}
 8007592:	4618      	mov	r0, r3
 8007594:	372c      	adds	r7, #44	; 0x2c
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40021000 	.word	0x40021000
 80075a4:	007a1200 	.word	0x007a1200
 80075a8:	0800f088 	.word	0x0800f088
 80075ac:	0800f098 	.word	0x0800f098
 80075b0:	003d0900 	.word	0x003d0900

080075b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b092      	sub	sp, #72	; 0x48
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f5b3 3f4d 	cmp.w	r3, #209920	; 0x33400
 80075d2:	d303      	bcc.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80075d4:	2172      	movs	r1, #114	; 0x72
 80075d6:	485f      	ldr	r0, [pc, #380]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80075d8:	f7f9 f8e7 	bl	80007aa <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80ed 	beq.w	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d012      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fa:	d00d      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007604:	d008      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d003      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007610:	2178      	movs	r1, #120	; 0x78
 8007612:	4850      	ldr	r0, [pc, #320]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8007614:	f7f9 f8c9 	bl	80007aa <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007618:	4b4f      	ldr	r3, [pc, #316]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10e      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007624:	4b4c      	ldr	r3, [pc, #304]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	4a4b      	ldr	r2, [pc, #300]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800762a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800762e:	61d3      	str	r3, [r2, #28]
 8007630:	4b49      	ldr	r3, [pc, #292]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007642:	4b46      	ldr	r3, [pc, #280]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764a:	2b00      	cmp	r3, #0
 800764c:	d118      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800764e:	4b43      	ldr	r3, [pc, #268]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a42      	ldr	r2, [pc, #264]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007658:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800765a:	f7f9 fb29 	bl	8000cb0 <HAL_GetTick>
 800765e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007660:	e008      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007662:	f7f9 fb25 	bl	8000cb0 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b64      	cmp	r3, #100	; 0x64
 800766e:	d901      	bls.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e2bc      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x63a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007674:	4b39      	ldr	r3, [pc, #228]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f0      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800768a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8086 	beq.w	800779e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800769c:	429a      	cmp	r2, r3
 800769e:	d07e      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076a0:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	fa93 f3a3 	rbit	r3, r3
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076ba:	fab3 f383 	clz	r3, r3
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b27      	ldr	r3, [pc, #156]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	461a      	mov	r2, r3
 80076ca:	2301      	movs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	fa93 f3a3 	rbit	r3, r3
 80076da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076de:	fab3 f383 	clz	r3, r3
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	4b1e      	ldr	r3, [pc, #120]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	461a      	mov	r2, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076f2:	4a19      	ldr	r2, [pc, #100]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80076f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80076f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d04d      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007702:	f7f9 fad5 	bl	8000cb0 <HAL_GetTick>
 8007706:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007708:	e00a      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800770a:	f7f9 fad1 	bl	8000cb0 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	f241 3288 	movw	r2, #5000	; 0x1388
 8007718:	4293      	cmp	r3, r2
 800771a:	d901      	bls.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x16c>
          {
            return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e266      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x63a>
 8007720:	2302      	movs	r3, #2
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	fa93 f3a3 	rbit	r3, r3
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
 800772c:	2302      	movs	r3, #2
 800772e:	623b      	str	r3, [r7, #32]
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	fa93 f3a3 	rbit	r3, r3
 8007736:	61fb      	str	r3, [r7, #28]
  return result;
 8007738:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800773a:	fab3 f383 	clz	r3, r3
 800773e:	b2db      	uxtb	r3, r3
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f043 0302 	orr.w	r3, r3, #2
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d10a      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800774e:	4b02      	ldr	r3, [pc, #8]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	e00f      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007754:	0800ef28 	.word	0x0800ef28
 8007758:	40021000 	.word	0x40021000
 800775c:	40007000 	.word	0x40007000
 8007760:	10908100 	.word	0x10908100
 8007764:	2302      	movs	r3, #2
 8007766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	fa93 f3a3 	rbit	r3, r3
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	4b89      	ldr	r3, [pc, #548]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2202      	movs	r2, #2
 8007776:	613a      	str	r2, [r7, #16]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	fa92 f2a2 	rbit	r2, r2
 800777e:	60fa      	str	r2, [r7, #12]
  return result;
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	fab2 f282 	clz	r2, r2
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	f002 021f 	and.w	r2, r2, #31
 8007792:	2101      	movs	r1, #1
 8007794:	fa01 f202 	lsl.w	r2, r1, r2
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0b5      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x156>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800779e:	4b7e      	ldr	r3, [pc, #504]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	497b      	ldr	r1, [pc, #492]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80077b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d105      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b8:	4b77      	ldr	r3, [pc, #476]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	4a76      	ldr	r2, [pc, #472]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01c      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00f      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d00b      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d007      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d003      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80077f0:	21be      	movs	r1, #190	; 0xbe
 80077f2:	486a      	ldr	r0, [pc, #424]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80077f4:	f7f8 ffd9 	bl	80007aa <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077f8:	4b67      	ldr	r3, [pc, #412]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	f023 0203 	bic.w	r2, r3, #3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	4964      	ldr	r1, [pc, #400]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007806:	4313      	orrs	r3, r2
 8007808:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01f      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d012      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007826:	d00d      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007830:	d008      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800783a:	d003      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800783c:	21c9      	movs	r1, #201	; 0xc9
 800783e:	4857      	ldr	r0, [pc, #348]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007840:	f7f8 ffb3 	bl	80007aa <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007844:	4b54      	ldr	r3, [pc, #336]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4951      	ldr	r1, [pc, #324]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007852:	4313      	orrs	r3, r2
 8007854:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d01f      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d012      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007872:	d00d      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800787c:	d008      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007886:	d003      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007888:	21d5      	movs	r1, #213	; 0xd5
 800788a:	4844      	ldr	r0, [pc, #272]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800788c:	f7f8 ff8d 	bl	80007aa <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007890:	4b41      	ldr	r3, [pc, #260]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	493e      	ldr	r1, [pc, #248]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d014      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	2b10      	cmp	r3, #16
 80078bc:	d003      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80078be:	21e0      	movs	r1, #224	; 0xe0
 80078c0:	4836      	ldr	r0, [pc, #216]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078c2:	f7f8 ff72 	bl	80007aa <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078c6:	4b34      	ldr	r3, [pc, #208]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	f023 0210 	bic.w	r2, r3, #16
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	4931      	ldr	r1, [pc, #196]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d015      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ec:	d007      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80078f6:	21ee      	movs	r1, #238	; 0xee
 80078f8:	4828      	ldr	r0, [pc, #160]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078fa:	f7f8 ff56 	bl	80007aa <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80078fe:	4b26      	ldr	r3, [pc, #152]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	4923      	ldr	r1, [pc, #140]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800790c:	4313      	orrs	r3, r2
 800790e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d015      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	2b20      	cmp	r3, #32
 800792a:	d004      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800792c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007930:	481a      	ldr	r0, [pc, #104]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007932:	f7f8 ff3a 	bl	80007aa <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007936:	4b18      	ldr	r3, [pc, #96]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	f023 0220 	bic.w	r2, r3, #32
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	4915      	ldr	r1, [pc, #84]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007944:	4313      	orrs	r3, r2
 8007946:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d025      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d013      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007964:	d00e      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800796e:	d009      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007978:	d004      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800797a:	f240 1123 	movw	r1, #291	; 0x123
 800797e:	4807      	ldr	r0, [pc, #28]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007980:	f7f8 ff13 	bl	80007aa <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	4901      	ldr	r1, [pc, #4]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007992:	4313      	orrs	r3, r2
 8007994:	630b      	str	r3, [r1, #48]	; 0x30
 8007996:	e003      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007998:	40021000 	.word	0x40021000
 800799c:	0800ef28 	.word	0x0800ef28
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d020      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d013      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079bc:	d00e      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079c6:	d009      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079d0:	d004      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80079d2:	f240 112d 	movw	r1, #301	; 0x12d
 80079d6:	4888      	ldr	r0, [pc, #544]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079d8:	f7f8 fee7 	bl	80007aa <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079dc:	4b87      	ldr	r3, [pc, #540]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	4984      	ldr	r1, [pc, #528]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a0a:	d004      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8007a0c:	f240 113d 	movw	r1, #317	; 0x13d
 8007a10:	4879      	ldr	r0, [pc, #484]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a12:	f7f8 feca 	bl	80007aa <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a16:	4b79      	ldr	r3, [pc, #484]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	4976      	ldr	r1, [pc, #472]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d04d      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d040      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a44:	d03b      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8007a4e:	d036      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8007a58:	d031      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8007a62:	d02c      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007a6c:	d027      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8007a76:	d022      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8007a80:	d01d      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8007a8a:	d018      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007a94:	d013      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007a9e:	d00e      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8007aa8:	d009      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007ab2:	d004      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007ab4:	f240 115d 	movw	r1, #349	; 0x15d
 8007ab8:	484f      	ldr	r0, [pc, #316]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007aba:	f7f8 fe76 	bl	80007aa <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007abe:	4b4f      	ldr	r3, [pc, #316]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	494c      	ldr	r1, [pc, #304]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d04d      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d040      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aec:	d03b      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8007af6:	d036      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8007b00:	d031      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8007b0a:	d02c      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007b14:	d027      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8007b1e:	d022      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8007b28:	d01d      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8007b32:	d018      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b3c:	d013      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b42:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8007b46:	d00e      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8007b50:	d009      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8007b5a:	d004      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007b5c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8007b60:	4825      	ldr	r0, [pc, #148]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b62:	f7f8 fe22 	bl	80007aa <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007b66:	4b25      	ldr	r3, [pc, #148]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b72:	4922      	ldr	r1, [pc, #136]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d016      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b94:	d004      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8007b96:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8007b9a:	4817      	ldr	r0, [pc, #92]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b9c:	f7f8 fe05 	bl	80007aa <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ba0:	4b16      	ldr	r3, [pc, #88]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bac:	4913      	ldr	r1, [pc, #76]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d016      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x626>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bce:	d004      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x626>
 8007bd0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8007bd4:	4808      	ldr	r0, [pc, #32]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007bd6:	f7f8 fde8 	bl	80007aa <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	4905      	ldr	r1, [pc, #20]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3748      	adds	r7, #72	; 0x48
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	0800ef28 	.word	0x0800ef28
 8007bfc:	40021000 	.word	0x40021000

08007c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e1e5      	b.n	8007fde <HAL_SPI_Init+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a7b      	ldr	r2, [pc, #492]	; (8007e04 <HAL_SPI_Init+0x204>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00e      	beq.n	8007c3a <HAL_SPI_Init+0x3a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a79      	ldr	r2, [pc, #484]	; (8007e08 <HAL_SPI_Init+0x208>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d009      	beq.n	8007c3a <HAL_SPI_Init+0x3a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a78      	ldr	r2, [pc, #480]	; (8007e0c <HAL_SPI_Init+0x20c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d004      	beq.n	8007c3a <HAL_SPI_Init+0x3a>
 8007c30:	f240 1147 	movw	r1, #327	; 0x147
 8007c34:	4876      	ldr	r0, [pc, #472]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007c36:	f7f8 fdb8 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <HAL_SPI_Init+0x56>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c4a:	d004      	beq.n	8007c56 <HAL_SPI_Init+0x56>
 8007c4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c50:	486f      	ldr	r0, [pc, #444]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007c52:	f7f8 fdaa 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00e      	beq.n	8007c7c <HAL_SPI_Init+0x7c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c66:	d009      	beq.n	8007c7c <HAL_SPI_Init+0x7c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c70:	d004      	beq.n	8007c7c <HAL_SPI_Init+0x7c>
 8007c72:	f240 1149 	movw	r1, #329	; 0x149
 8007c76:	4866      	ldr	r0, [pc, #408]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007c78:	f7f8 fd97 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c84:	d040      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8007c8e:	d03b      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8007c98:	d036      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ca2:	d031      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8007cac:	d02c      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007cb6:	d027      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8007cc0:	d022      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cca:	d01d      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cd4:	d018      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007cde:	d013      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007ce8:	d00e      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf2:	d009      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfc:	d004      	beq.n	8007d08 <HAL_SPI_Init+0x108>
 8007cfe:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007d02:	4843      	ldr	r0, [pc, #268]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007d04:	f7f8 fd51 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d10:	d00d      	beq.n	8007d2e <HAL_SPI_Init+0x12e>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <HAL_SPI_Init+0x12e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d22:	d004      	beq.n	8007d2e <HAL_SPI_Init+0x12e>
 8007d24:	f240 114b 	movw	r1, #331	; 0x14b
 8007d28:	4839      	ldr	r0, [pc, #228]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007d2a:	f7f8 fd3e 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	2b08      	cmp	r3, #8
 8007d34:	d008      	beq.n	8007d48 <HAL_SPI_Init+0x148>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <HAL_SPI_Init+0x148>
 8007d3e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007d42:	4833      	ldr	r0, [pc, #204]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007d44:	f7f8 fd31 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d020      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d01c      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d018      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	2b18      	cmp	r3, #24
 8007d66:	d014      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d010      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	2b28      	cmp	r3, #40	; 0x28
 8007d76:	d00c      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d008      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	2b38      	cmp	r3, #56	; 0x38
 8007d86:	d004      	beq.n	8007d92 <HAL_SPI_Init+0x192>
 8007d88:	f240 114d 	movw	r1, #333	; 0x14d
 8007d8c:	4820      	ldr	r0, [pc, #128]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007d8e:	f7f8 fd0c 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d008      	beq.n	8007dac <HAL_SPI_Init+0x1ac>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	2b80      	cmp	r3, #128	; 0x80
 8007da0:	d004      	beq.n	8007dac <HAL_SPI_Init+0x1ac>
 8007da2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8007da6:	481a      	ldr	r0, [pc, #104]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007da8:	f7f8 fcff 	bl	80007aa <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <HAL_SPI_Init+0x1c6>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d004      	beq.n	8007dc6 <HAL_SPI_Init+0x1c6>
 8007dbc:	f240 114f 	movw	r1, #335	; 0x14f
 8007dc0:	4813      	ldr	r0, [pc, #76]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007dc2:	f7f8 fcf2 	bl	80007aa <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d151      	bne.n	8007e72 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d008      	beq.n	8007de8 <HAL_SPI_Init+0x1e8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d004      	beq.n	8007de8 <HAL_SPI_Init+0x1e8>
 8007dde:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007de2:	480b      	ldr	r0, [pc, #44]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007de4:	f7f8 fce1 	bl	80007aa <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d011      	beq.n	8007e14 <HAL_SPI_Init+0x214>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d00d      	beq.n	8007e14 <HAL_SPI_Init+0x214>
 8007df8:	f240 1153 	movw	r1, #339	; 0x153
 8007dfc:	4804      	ldr	r0, [pc, #16]	; (8007e10 <HAL_SPI_Init+0x210>)
 8007dfe:	f7f8 fcd4 	bl	80007aa <assert_failed>
 8007e02:	e007      	b.n	8007e14 <HAL_SPI_Init+0x214>
 8007e04:	40013000 	.word	0x40013000
 8007e08:	40003800 	.word	0x40003800
 8007e0c:	40003c00 	.word	0x40003c00
 8007e10:	0800ef84 	.word	0x0800ef84

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e1c:	d125      	bne.n	8007e6a <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d050      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	d04c      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	2b10      	cmp	r3, #16
 8007e34:	d048      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	2b18      	cmp	r3, #24
 8007e3c:	d044      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	d040      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	2b28      	cmp	r3, #40	; 0x28
 8007e4c:	d03c      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	2b30      	cmp	r3, #48	; 0x30
 8007e54:	d038      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	2b38      	cmp	r3, #56	; 0x38
 8007e5c:	d034      	beq.n	8007ec8 <HAL_SPI_Init+0x2c8>
 8007e5e:	f240 1157 	movw	r1, #343	; 0x157
 8007e62:	4861      	ldr	r0, [pc, #388]	; (8007fe8 <HAL_SPI_Init+0x3e8>)
 8007e64:	f7f8 fca1 	bl	80007aa <assert_failed>
 8007e68:	e02e      	b.n	8007ec8 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	61da      	str	r2, [r3, #28]
 8007e70:	e02a      	b.n	8007ec8 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d020      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d01c      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d018      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	2b18      	cmp	r3, #24
 8007e90:	d014      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d010      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	2b28      	cmp	r3, #40	; 0x28
 8007ea0:	d00c      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	2b30      	cmp	r3, #48	; 0x30
 8007ea8:	d008      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	2b38      	cmp	r3, #56	; 0x38
 8007eb0:	d004      	beq.n	8007ebc <HAL_SPI_Init+0x2bc>
 8007eb2:	f240 1161 	movw	r1, #353	; 0x161
 8007eb6:	484c      	ldr	r0, [pc, #304]	; (8007fe8 <HAL_SPI_Init+0x3e8>)
 8007eb8:	f7f8 fc77 	bl	80007aa <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7f8 fcaa 	bl	800083c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f08:	d902      	bls.n	8007f10 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	e002      	b.n	8007f16 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f1e:	d007      	beq.n	8007f30 <HAL_SPI_Init+0x330>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f28:	d002      	beq.n	8007f30 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	ea42 0103 	orr.w	r1, r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	0c1b      	lsrs	r3, r3, #16
 8007f8c:	f003 0204 	and.w	r2, r3, #4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007fac:	ea42 0103 	orr.w	r1, r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	0800ef84 	.word	0x0800ef84

08007fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e0b9      	b.n	8008172 <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a5e      	ldr	r2, [pc, #376]	; (800817c <HAL_TIM_Base_Init+0x190>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d031      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008010:	d02c      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a5a      	ldr	r2, [pc, #360]	; (8008180 <HAL_TIM_Base_Init+0x194>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d027      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a58      	ldr	r2, [pc, #352]	; (8008184 <HAL_TIM_Base_Init+0x198>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d022      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a57      	ldr	r2, [pc, #348]	; (8008188 <HAL_TIM_Base_Init+0x19c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d01d      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a55      	ldr	r2, [pc, #340]	; (800818c <HAL_TIM_Base_Init+0x1a0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d018      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a54      	ldr	r2, [pc, #336]	; (8008190 <HAL_TIM_Base_Init+0x1a4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d013      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a52      	ldr	r2, [pc, #328]	; (8008194 <HAL_TIM_Base_Init+0x1a8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00e      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a51      	ldr	r2, [pc, #324]	; (8008198 <HAL_TIM_Base_Init+0x1ac>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d009      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a4f      	ldr	r2, [pc, #316]	; (800819c <HAL_TIM_Base_Init+0x1b0>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_TIM_Base_Init+0x80>
 8008062:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8008066:	484e      	ldr	r0, [pc, #312]	; (80081a0 <HAL_TIM_Base_Init+0x1b4>)
 8008068:	f7f8 fb9f 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d014      	beq.n	800809e <HAL_TIM_Base_Init+0xb2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2b10      	cmp	r3, #16
 800807a:	d010      	beq.n	800809e <HAL_TIM_Base_Init+0xb2>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b20      	cmp	r3, #32
 8008082:	d00c      	beq.n	800809e <HAL_TIM_Base_Init+0xb2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	2b40      	cmp	r3, #64	; 0x40
 800808a:	d008      	beq.n	800809e <HAL_TIM_Base_Init+0xb2>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	2b60      	cmp	r3, #96	; 0x60
 8008092:	d004      	beq.n	800809e <HAL_TIM_Base_Init+0xb2>
 8008094:	f240 111b 	movw	r1, #283	; 0x11b
 8008098:	4841      	ldr	r0, [pc, #260]	; (80081a0 <HAL_TIM_Base_Init+0x1b4>)
 800809a:	f7f8 fb86 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00e      	beq.n	80080c4 <HAL_TIM_Base_Init+0xd8>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ae:	d009      	beq.n	80080c4 <HAL_TIM_Base_Init+0xd8>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b8:	d004      	beq.n	80080c4 <HAL_TIM_Base_Init+0xd8>
 80080ba:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80080be:	4838      	ldr	r0, [pc, #224]	; (80081a0 <HAL_TIM_Base_Init+0x1b4>)
 80080c0:	f7f8 fb73 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d008      	beq.n	80080de <HAL_TIM_Base_Init+0xf2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	2b80      	cmp	r3, #128	; 0x80
 80080d2:	d004      	beq.n	80080de <HAL_TIM_Base_Init+0xf2>
 80080d4:	f240 111d 	movw	r1, #285	; 0x11d
 80080d8:	4831      	ldr	r0, [pc, #196]	; (80081a0 <HAL_TIM_Base_Init+0x1b4>)
 80080da:	f7f8 fb66 	bl	80007aa <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f8 fd04 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3304      	adds	r3, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4610      	mov	r0, r2
 800810c:	f001 f812 	bl	8009134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40012c00 	.word	0x40012c00
 8008180:	40000400 	.word	0x40000400
 8008184:	40000800 	.word	0x40000800
 8008188:	40001000 	.word	0x40001000
 800818c:	40001400 	.word	0x40001400
 8008190:	40013400 	.word	0x40013400
 8008194:	40014000 	.word	0x40014000
 8008198:	40014400 	.word	0x40014400
 800819c:	40014800 	.word	0x40014800
 80081a0:	0800efbc 	.word	0x0800efbc

080081a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e0b9      	b.n	800832a <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a5e      	ldr	r2, [pc, #376]	; (8008334 <HAL_TIM_PWM_Init+0x190>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d031      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c8:	d02c      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a5a      	ldr	r2, [pc, #360]	; (8008338 <HAL_TIM_PWM_Init+0x194>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d027      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a58      	ldr	r2, [pc, #352]	; (800833c <HAL_TIM_PWM_Init+0x198>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d022      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a57      	ldr	r2, [pc, #348]	; (8008340 <HAL_TIM_PWM_Init+0x19c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d01d      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a55      	ldr	r2, [pc, #340]	; (8008344 <HAL_TIM_PWM_Init+0x1a0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d018      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a54      	ldr	r2, [pc, #336]	; (8008348 <HAL_TIM_PWM_Init+0x1a4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a52      	ldr	r2, [pc, #328]	; (800834c <HAL_TIM_PWM_Init+0x1a8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a51      	ldr	r2, [pc, #324]	; (8008350 <HAL_TIM_PWM_Init+0x1ac>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d009      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a4f      	ldr	r2, [pc, #316]	; (8008354 <HAL_TIM_PWM_Init+0x1b0>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_TIM_PWM_Init+0x80>
 800821a:	f240 5136 	movw	r1, #1334	; 0x536
 800821e:	484e      	ldr	r0, [pc, #312]	; (8008358 <HAL_TIM_PWM_Init+0x1b4>)
 8008220:	f7f8 fac3 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d014      	beq.n	8008256 <HAL_TIM_PWM_Init+0xb2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	2b10      	cmp	r3, #16
 8008232:	d010      	beq.n	8008256 <HAL_TIM_PWM_Init+0xb2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b20      	cmp	r3, #32
 800823a:	d00c      	beq.n	8008256 <HAL_TIM_PWM_Init+0xb2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2b40      	cmp	r3, #64	; 0x40
 8008242:	d008      	beq.n	8008256 <HAL_TIM_PWM_Init+0xb2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	2b60      	cmp	r3, #96	; 0x60
 800824a:	d004      	beq.n	8008256 <HAL_TIM_PWM_Init+0xb2>
 800824c:	f240 5137 	movw	r1, #1335	; 0x537
 8008250:	4841      	ldr	r0, [pc, #260]	; (8008358 <HAL_TIM_PWM_Init+0x1b4>)
 8008252:	f7f8 faaa 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00e      	beq.n	800827c <HAL_TIM_PWM_Init+0xd8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008266:	d009      	beq.n	800827c <HAL_TIM_PWM_Init+0xd8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008270:	d004      	beq.n	800827c <HAL_TIM_PWM_Init+0xd8>
 8008272:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 8008276:	4838      	ldr	r0, [pc, #224]	; (8008358 <HAL_TIM_PWM_Init+0x1b4>)
 8008278:	f7f8 fa97 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d008      	beq.n	8008296 <HAL_TIM_PWM_Init+0xf2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	2b80      	cmp	r3, #128	; 0x80
 800828a:	d004      	beq.n	8008296 <HAL_TIM_PWM_Init+0xf2>
 800828c:	f240 5139 	movw	r1, #1337	; 0x539
 8008290:	4831      	ldr	r0, [pc, #196]	; (8008358 <HAL_TIM_PWM_Init+0x1b4>)
 8008292:	f7f8 fa8a 	bl	80007aa <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f856 	bl	800835c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f000 ff36 	bl	8009134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40012c00 	.word	0x40012c00
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40001000 	.word	0x40001000
 8008344:	40001400 	.word	0x40001400
 8008348:	40013400 	.word	0x40013400
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800
 8008358:	0800efbc 	.word	0x0800efbc

0800835c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a7a      	ldr	r2, [pc, #488]	; (8008568 <HAL_TIM_PWM_Start+0x1f8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d111      	bne.n	80083a8 <HAL_TIM_PWM_Start+0x38>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d078      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b04      	cmp	r3, #4
 800838e:	d075      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b08      	cmp	r3, #8
 8008394:	d072      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d06f      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b10      	cmp	r3, #16
 80083a0:	d06c      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b14      	cmp	r3, #20
 80083a6:	d069      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b0:	d10b      	bne.n	80083ca <HAL_TIM_PWM_Start+0x5a>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d061      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d05e      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d05b      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b0c      	cmp	r3, #12
 80083c8:	d058      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a67      	ldr	r2, [pc, #412]	; (800856c <HAL_TIM_PWM_Start+0x1fc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d10b      	bne.n	80083ec <HAL_TIM_PWM_Start+0x7c>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d050      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d04d      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d04a      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b0c      	cmp	r3, #12
 80083ea:	d047      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a5f      	ldr	r2, [pc, #380]	; (8008570 <HAL_TIM_PWM_Start+0x200>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d10b      	bne.n	800840e <HAL_TIM_PWM_Start+0x9e>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d03f      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d03c      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d039      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b0c      	cmp	r3, #12
 800840c:	d036      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a58      	ldr	r2, [pc, #352]	; (8008574 <HAL_TIM_PWM_Start+0x204>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d111      	bne.n	800843c <HAL_TIM_PWM_Start+0xcc>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d02e      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b04      	cmp	r3, #4
 8008422:	d02b      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b08      	cmp	r3, #8
 8008428:	d028      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b0c      	cmp	r3, #12
 800842e:	d025      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b10      	cmp	r3, #16
 8008434:	d022      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b14      	cmp	r3, #20
 800843a:	d01f      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a4d      	ldr	r2, [pc, #308]	; (8008578 <HAL_TIM_PWM_Start+0x208>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d105      	bne.n	8008452 <HAL_TIM_PWM_Start+0xe2>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d017      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b04      	cmp	r3, #4
 8008450:	d014      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a49      	ldr	r2, [pc, #292]	; (800857c <HAL_TIM_PWM_Start+0x20c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d102      	bne.n	8008462 <HAL_TIM_PWM_Start+0xf2>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00c      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a46      	ldr	r2, [pc, #280]	; (8008580 <HAL_TIM_PWM_Start+0x210>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d102      	bne.n	8008472 <HAL_TIM_PWM_Start+0x102>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <HAL_TIM_PWM_Start+0x10c>
 8008472:	f240 51bf 	movw	r1, #1471	; 0x5bf
 8008476:	4843      	ldr	r0, [pc, #268]	; (8008584 <HAL_TIM_PWM_Start+0x214>)
 8008478:	f7f8 f997 	bl	80007aa <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <HAL_TIM_PWM_Start+0x126>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b01      	cmp	r3, #1
 800848c:	bf14      	ite	ne
 800848e:	2301      	movne	r3, #1
 8008490:	2300      	moveq	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	e03c      	b.n	8008510 <HAL_TIM_PWM_Start+0x1a0>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b04      	cmp	r3, #4
 800849a:	d109      	bne.n	80084b0 <HAL_TIM_PWM_Start+0x140>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	bf14      	ite	ne
 80084a8:	2301      	movne	r3, #1
 80084aa:	2300      	moveq	r3, #0
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	e02f      	b.n	8008510 <HAL_TIM_PWM_Start+0x1a0>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d109      	bne.n	80084ca <HAL_TIM_PWM_Start+0x15a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b01      	cmp	r3, #1
 80084c0:	bf14      	ite	ne
 80084c2:	2301      	movne	r3, #1
 80084c4:	2300      	moveq	r3, #0
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	e022      	b.n	8008510 <HAL_TIM_PWM_Start+0x1a0>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b0c      	cmp	r3, #12
 80084ce:	d109      	bne.n	80084e4 <HAL_TIM_PWM_Start+0x174>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	bf14      	ite	ne
 80084dc:	2301      	movne	r3, #1
 80084de:	2300      	moveq	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	e015      	b.n	8008510 <HAL_TIM_PWM_Start+0x1a0>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d109      	bne.n	80084fe <HAL_TIM_PWM_Start+0x18e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	bf14      	ite	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	2300      	moveq	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	e008      	b.n	8008510 <HAL_TIM_PWM_Start+0x1a0>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b01      	cmp	r3, #1
 8008508:	bf14      	ite	ne
 800850a:	2301      	movne	r3, #1
 800850c:	2300      	moveq	r3, #0
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <HAL_TIM_PWM_Start+0x1a8>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e0a7      	b.n	8008668 <HAL_TIM_PWM_Start+0x2f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <HAL_TIM_PWM_Start+0x1b8>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008526:	e033      	b.n	8008590 <HAL_TIM_PWM_Start+0x220>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d104      	bne.n	8008538 <HAL_TIM_PWM_Start+0x1c8>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008536:	e02b      	b.n	8008590 <HAL_TIM_PWM_Start+0x220>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b08      	cmp	r3, #8
 800853c:	d104      	bne.n	8008548 <HAL_TIM_PWM_Start+0x1d8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008546:	e023      	b.n	8008590 <HAL_TIM_PWM_Start+0x220>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2b0c      	cmp	r3, #12
 800854c:	d104      	bne.n	8008558 <HAL_TIM_PWM_Start+0x1e8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008556:	e01b      	b.n	8008590 <HAL_TIM_PWM_Start+0x220>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b10      	cmp	r3, #16
 800855c:	d114      	bne.n	8008588 <HAL_TIM_PWM_Start+0x218>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008566:	e013      	b.n	8008590 <HAL_TIM_PWM_Start+0x220>
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40013400 	.word	0x40013400
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800
 8008584:	0800efbc 	.word	0x0800efbc
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2201      	movs	r2, #1
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f001 fa55 	bl	8009a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a33      	ldr	r2, [pc, #204]	; (8008670 <HAL_TIM_PWM_Start+0x300>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d013      	beq.n	80085d0 <HAL_TIM_PWM_Start+0x260>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a31      	ldr	r2, [pc, #196]	; (8008674 <HAL_TIM_PWM_Start+0x304>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00e      	beq.n	80085d0 <HAL_TIM_PWM_Start+0x260>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a30      	ldr	r2, [pc, #192]	; (8008678 <HAL_TIM_PWM_Start+0x308>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d009      	beq.n	80085d0 <HAL_TIM_PWM_Start+0x260>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a2e      	ldr	r2, [pc, #184]	; (800867c <HAL_TIM_PWM_Start+0x30c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d004      	beq.n	80085d0 <HAL_TIM_PWM_Start+0x260>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a2d      	ldr	r2, [pc, #180]	; (8008680 <HAL_TIM_PWM_Start+0x310>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d101      	bne.n	80085d4 <HAL_TIM_PWM_Start+0x264>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <HAL_TIM_PWM_Start+0x266>
 80085d4:	2300      	movs	r3, #0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <HAL_TIM_PWM_Start+0x27a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a20      	ldr	r2, [pc, #128]	; (8008670 <HAL_TIM_PWM_Start+0x300>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d018      	beq.n	8008626 <HAL_TIM_PWM_Start+0x2b6>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fc:	d013      	beq.n	8008626 <HAL_TIM_PWM_Start+0x2b6>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a20      	ldr	r2, [pc, #128]	; (8008684 <HAL_TIM_PWM_Start+0x314>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00e      	beq.n	8008626 <HAL_TIM_PWM_Start+0x2b6>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <HAL_TIM_PWM_Start+0x318>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d009      	beq.n	8008626 <HAL_TIM_PWM_Start+0x2b6>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a17      	ldr	r2, [pc, #92]	; (8008674 <HAL_TIM_PWM_Start+0x304>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <HAL_TIM_PWM_Start+0x2b6>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a15      	ldr	r2, [pc, #84]	; (8008678 <HAL_TIM_PWM_Start+0x308>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d115      	bne.n	8008652 <HAL_TIM_PWM_Start+0x2e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	4b17      	ldr	r3, [pc, #92]	; (800868c <HAL_TIM_PWM_Start+0x31c>)
 800862e:	4013      	ands	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b06      	cmp	r3, #6
 8008636:	d015      	beq.n	8008664 <HAL_TIM_PWM_Start+0x2f4>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863e:	d011      	beq.n	8008664 <HAL_TIM_PWM_Start+0x2f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0201 	orr.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008650:	e008      	b.n	8008664 <HAL_TIM_PWM_Start+0x2f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	e000      	b.n	8008666 <HAL_TIM_PWM_Start+0x2f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	40012c00 	.word	0x40012c00
 8008674:	40013400 	.word	0x40013400
 8008678:	40014000 	.word	0x40014000
 800867c:	40014400 	.word	0x40014400
 8008680:	40014800 	.word	0x40014800
 8008684:	40000400 	.word	0x40000400
 8008688:	40000800 	.word	0x40000800
 800868c:	00010007 	.word	0x00010007

08008690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d016      	beq.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d013      	beq.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d010      	beq.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b0c      	cmp	r3, #12
 80086b6:	d00d      	beq.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d00a      	beq.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b14      	cmp	r3, #20
 80086c2:	d007      	beq.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b3c      	cmp	r3, #60	; 0x3c
 80086c8:	d004      	beq.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80086ca:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80086ce:	4886      	ldr	r0, [pc, #536]	; (80088e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80086d0:	f7f8 f86b 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b60      	cmp	r3, #96	; 0x60
 80086da:	d01c      	beq.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x86>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b70      	cmp	r3, #112	; 0x70
 80086e2:	d018      	beq.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x86>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a80      	ldr	r2, [pc, #512]	; (80088ec <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x86>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a7f      	ldr	r2, [pc, #508]	; (80088f0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00e      	beq.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x86>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a7d      	ldr	r2, [pc, #500]	; (80088f4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d009      	beq.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a7c      	ldr	r2, [pc, #496]	; (80088f8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x86>
 800870c:	f241 01b8 	movw	r1, #4280	; 0x10b8
 8008710:	4875      	ldr	r0, [pc, #468]	; (80088e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8008712:	f7f8 f84a 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d008      	beq.n	8008730 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d004      	beq.n	8008730 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8008726:	f241 01b9 	movw	r1, #4281	; 0x10b9
 800872a:	486f      	ldr	r0, [pc, #444]	; (80088e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800872c:	f7f8 f83d 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <HAL_TIM_PWM_ConfigChannel+0xba>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	2b04      	cmp	r3, #4
 800873e:	d004      	beq.n	800874a <HAL_TIM_PWM_ConfigChannel+0xba>
 8008740:	f241 01ba 	movw	r1, #4282	; 0x10ba
 8008744:	4868      	ldr	r0, [pc, #416]	; (80088e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8008746:	f7f8 f830 	bl	80007aa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8008754:	2302      	movs	r3, #2
 8008756:	e1c3      	b.n	8008ae0 <HAL_TIM_PWM_ConfigChannel+0x450>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b14      	cmp	r3, #20
 8008764:	f200 81b4 	bhi.w	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x440>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	080087c5 	.word	0x080087c5
 8008774:	08008ad1 	.word	0x08008ad1
 8008778:	08008ad1 	.word	0x08008ad1
 800877c:	08008ad1 	.word	0x08008ad1
 8008780:	0800885f 	.word	0x0800885f
 8008784:	08008ad1 	.word	0x08008ad1
 8008788:	08008ad1 	.word	0x08008ad1
 800878c:	08008ad1 	.word	0x08008ad1
 8008790:	08008919 	.word	0x08008919
 8008794:	08008ad1 	.word	0x08008ad1
 8008798:	08008ad1 	.word	0x08008ad1
 800879c:	08008ad1 	.word	0x08008ad1
 80087a0:	08008995 	.word	0x08008995
 80087a4:	08008ad1 	.word	0x08008ad1
 80087a8:	08008ad1 	.word	0x08008ad1
 80087ac:	08008ad1 	.word	0x08008ad1
 80087b0:	08008a13 	.word	0x08008a13
 80087b4:	08008ad1 	.word	0x08008ad1
 80087b8:	08008ad1 	.word	0x08008ad1
 80087bc:	08008ad1 	.word	0x08008ad1
 80087c0:	08008a71 	.word	0x08008a71
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a4c      	ldr	r2, [pc, #304]	; (80088fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d027      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d6:	d022      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a48      	ldr	r2, [pc, #288]	; (8008900 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d01d      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a47      	ldr	r2, [pc, #284]	; (8008904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d018      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a45      	ldr	r2, [pc, #276]	; (8008908 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d013      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a44      	ldr	r2, [pc, #272]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00e      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a42      	ldr	r2, [pc, #264]	; (8008910 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d009      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a41      	ldr	r2, [pc, #260]	; (8008914 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d004      	beq.n	800881e <HAL_TIM_PWM_ConfigChannel+0x18e>
 8008814:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8008818:	4833      	ldr	r0, [pc, #204]	; (80088e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800881a:	f7f7 ffc6 	bl	80007aa <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 fd15 	bl	8009254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	699a      	ldr	r2, [r3, #24]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f042 0208 	orr.w	r2, r2, #8
 8008838:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 0204 	bic.w	r2, r2, #4
 8008848:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6999      	ldr	r1, [r3, #24]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	619a      	str	r2, [r3, #24]
      break;
 800885c:	e13b      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a26      	ldr	r2, [pc, #152]	; (80088fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d01d      	beq.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008870:	d018      	beq.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a22      	ldr	r2, [pc, #136]	; (8008900 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d013      	beq.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a20      	ldr	r2, [pc, #128]	; (8008904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00e      	beq.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a1f      	ldr	r2, [pc, #124]	; (8008908 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d009      	beq.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a1d      	ldr	r2, [pc, #116]	; (800890c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <HAL_TIM_PWM_ConfigChannel+0x214>
 800889a:	f241 01d5 	movw	r1, #4309	; 0x10d5
 800889e:	4812      	ldr	r0, [pc, #72]	; (80088e8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80088a0:	f7f7 ff83 	bl	80007aa <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fd8c 	bl	80093c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6999      	ldr	r1, [r3, #24]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	021a      	lsls	r2, r3, #8
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	619a      	str	r2, [r3, #24]
      break;
 80088e4:	e0f7      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x446>
 80088e6:	bf00      	nop
 80088e8:	0800efbc 	.word	0x0800efbc
 80088ec:	00010040 	.word	0x00010040
 80088f0:	00010050 	.word	0x00010050
 80088f4:	00010060 	.word	0x00010060
 80088f8:	00010070 	.word	0x00010070
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40000400 	.word	0x40000400
 8008904:	40000800 	.word	0x40000800
 8008908:	40013400 	.word	0x40013400
 800890c:	40014000 	.word	0x40014000
 8008910:	40014400 	.word	0x40014400
 8008914:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a72      	ldr	r2, [pc, #456]	; (8008ae8 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d018      	beq.n	8008954 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892a:	d013      	beq.n	8008954 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a6e      	ldr	r2, [pc, #440]	; (8008aec <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00e      	beq.n	8008954 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a6d      	ldr	r2, [pc, #436]	; (8008af0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d009      	beq.n	8008954 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a6b      	ldr	r2, [pc, #428]	; (8008af4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d004      	beq.n	8008954 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800894a:	f241 01e6 	movw	r1, #4326	; 0x10e6
 800894e:	486a      	ldr	r0, [pc, #424]	; (8008af8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 8008950:	f7f7 ff2b 	bl	80007aa <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fde6 	bl	800952c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69da      	ldr	r2, [r3, #28]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0208 	orr.w	r2, r2, #8
 800896e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69da      	ldr	r2, [r3, #28]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0204 	bic.w	r2, r2, #4
 800897e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69d9      	ldr	r1, [r3, #28]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	691a      	ldr	r2, [r3, #16]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	61da      	str	r2, [r3, #28]
      break;
 8008992:	e0a0      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a53      	ldr	r2, [pc, #332]	; (8008ae8 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d018      	beq.n	80089d0 <HAL_TIM_PWM_ConfigChannel+0x340>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a6:	d013      	beq.n	80089d0 <HAL_TIM_PWM_ConfigChannel+0x340>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a4f      	ldr	r2, [pc, #316]	; (8008aec <HAL_TIM_PWM_ConfigChannel+0x45c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00e      	beq.n	80089d0 <HAL_TIM_PWM_ConfigChannel+0x340>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a4e      	ldr	r2, [pc, #312]	; (8008af0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d009      	beq.n	80089d0 <HAL_TIM_PWM_ConfigChannel+0x340>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a4c      	ldr	r2, [pc, #304]	; (8008af4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d004      	beq.n	80089d0 <HAL_TIM_PWM_ConfigChannel+0x340>
 80089c6:	f241 01f7 	movw	r1, #4343	; 0x10f7
 80089ca:	484b      	ldr	r0, [pc, #300]	; (8008af8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 80089cc:	f7f7 feed 	bl	80007aa <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fe5a 	bl	8009690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69da      	ldr	r2, [r3, #28]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	69da      	ldr	r2, [r3, #28]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69d9      	ldr	r1, [r3, #28]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	021a      	lsls	r2, r3, #8
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	61da      	str	r2, [r3, #28]
      break;
 8008a10:	e061      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC5E)
    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a34      	ldr	r2, [pc, #208]	; (8008ae8 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d009      	beq.n	8008a30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a34      	ldr	r2, [pc, #208]	; (8008af4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8008a26:	f241 1109 	movw	r1, #4361	; 0x1109
 8008a2a:	4833      	ldr	r0, [pc, #204]	; (8008af8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 8008a2c:	f7f7 febd 	bl	80007aa <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fea2 	bl	8009780 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0208 	orr.w	r2, r2, #8
 8008a4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0204 	bic.w	r2, r2, #4
 8008a5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a6e:	e032      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC6E)
    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1c      	ldr	r2, [pc, #112]	; (8008ae8 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d009      	beq.n	8008a8e <HAL_TIM_PWM_ConfigChannel+0x3fe>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1d      	ldr	r2, [pc, #116]	; (8008af4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d004      	beq.n	8008a8e <HAL_TIM_PWM_ConfigChannel+0x3fe>
 8008a84:	f241 111c 	movw	r1, #4380	; 0x111c
 8008a88:	481b      	ldr	r0, [pc, #108]	; (8008af8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 8008a8a:	f7f7 fe8e 	bl	80007aa <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fed7 	bl	8009848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ab8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	021a      	lsls	r2, r3, #8
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ace:	e002      	b.n	8008ad6 <HAL_TIM_PWM_ConfigChannel+0x446>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40012c00 	.word	0x40012c00
 8008aec:	40000400 	.word	0x40000400
 8008af0:	40000800 	.word	0x40000800
 8008af4:	40013400 	.word	0x40013400
 8008af8:	0800efbc 	.word	0x0800efbc

08008afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_TIM_ConfigClockSource+0x1c>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e2fc      	b.n	8009112 <HAL_TIM_ConfigClockSource+0x616>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b30:	d029      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b3a:	d024      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d020      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b10      	cmp	r3, #16
 8008b4a:	d01c      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d018      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b30      	cmp	r3, #48	; 0x30
 8008b5a:	d014      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d010      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b50      	cmp	r3, #80	; 0x50
 8008b6a:	d00c      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b60      	cmp	r3, #96	; 0x60
 8008b72:	d008      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b70      	cmp	r3, #112	; 0x70
 8008b7a:	d004      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x8a>
 8008b7c:	f241 516a 	movw	r1, #5482	; 0x156a
 8008b80:	4880      	ldr	r0, [pc, #512]	; (8008d84 <HAL_TIM_ConfigClockSource+0x288>)
 8008b82:	f7f7 fe12 	bl	80007aa <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ba0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb2:	f000 80fb 	beq.w	8008dac <HAL_TIM_ConfigClockSource+0x2b0>
 8008bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bba:	f200 829d 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc2:	d02d      	beq.n	8008c20 <HAL_TIM_ConfigClockSource+0x124>
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc8:	f200 8296 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008bcc:	2b70      	cmp	r3, #112	; 0x70
 8008bce:	d069      	beq.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1a8>
 8008bd0:	2b70      	cmp	r3, #112	; 0x70
 8008bd2:	f200 8291 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008bd6:	2b60      	cmp	r3, #96	; 0x60
 8008bd8:	f000 81aa 	beq.w	8008f30 <HAL_TIM_ConfigClockSource+0x434>
 8008bdc:	2b60      	cmp	r3, #96	; 0x60
 8008bde:	f200 828b 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008be2:	2b50      	cmp	r3, #80	; 0x50
 8008be4:	f000 814e 	beq.w	8008e84 <HAL_TIM_ConfigClockSource+0x388>
 8008be8:	2b50      	cmp	r3, #80	; 0x50
 8008bea:	f200 8285 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008bee:	2b40      	cmp	r3, #64	; 0x40
 8008bf0:	f000 8200 	beq.w	8008ff4 <HAL_TIM_ConfigClockSource+0x4f8>
 8008bf4:	2b40      	cmp	r3, #64	; 0x40
 8008bf6:	f200 827f 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008bfa:	2b30      	cmp	r3, #48	; 0x30
 8008bfc:	f000 8250 	beq.w	80090a0 <HAL_TIM_ConfigClockSource+0x5a4>
 8008c00:	2b30      	cmp	r3, #48	; 0x30
 8008c02:	f200 8279 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	f000 824a 	beq.w	80090a0 <HAL_TIM_ConfigClockSource+0x5a4>
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	f200 8273 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 8244 	beq.w	80090a0 <HAL_TIM_ConfigClockSource+0x5a4>
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	f000 8241 	beq.w	80090a0 <HAL_TIM_ConfigClockSource+0x5a4>
 8008c1e:	e26b      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x5fc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a58      	ldr	r2, [pc, #352]	; (8008d88 <HAL_TIM_ConfigClockSource+0x28c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	f000 8269 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c34:	f000 8263 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a53      	ldr	r2, [pc, #332]	; (8008d8c <HAL_TIM_ConfigClockSource+0x290>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	f000 825d 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a51      	ldr	r2, [pc, #324]	; (8008d90 <HAL_TIM_ConfigClockSource+0x294>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	f000 8257 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a4f      	ldr	r2, [pc, #316]	; (8008d94 <HAL_TIM_ConfigClockSource+0x298>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f000 8251 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a4d      	ldr	r2, [pc, #308]	; (8008d98 <HAL_TIM_ConfigClockSource+0x29c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	f000 824b 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a4b      	ldr	r2, [pc, #300]	; (8008d9c <HAL_TIM_ConfigClockSource+0x2a0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f000 8245 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a49      	ldr	r2, [pc, #292]	; (8008da0 <HAL_TIM_ConfigClockSource+0x2a4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	f000 823f 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a47      	ldr	r2, [pc, #284]	; (8008da4 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	f000 8239 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a45      	ldr	r2, [pc, #276]	; (8008da8 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	f000 8233 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x602>
 8008c98:	f241 5176 	movw	r1, #5494	; 0x1576
 8008c9c:	4839      	ldr	r0, [pc, #228]	; (8008d84 <HAL_TIM_ConfigClockSource+0x288>)
 8008c9e:	f7f7 fd84 	bl	80007aa <assert_failed>
      break;
 8008ca2:	e22c      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x602>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a37      	ldr	r2, [pc, #220]	; (8008d88 <HAL_TIM_ConfigClockSource+0x28c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d018      	beq.n	8008ce0 <HAL_TIM_ConfigClockSource+0x1e4>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb6:	d013      	beq.n	8008ce0 <HAL_TIM_ConfigClockSource+0x1e4>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a33      	ldr	r2, [pc, #204]	; (8008d8c <HAL_TIM_ConfigClockSource+0x290>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_TIM_ConfigClockSource+0x1e4>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a32      	ldr	r2, [pc, #200]	; (8008d90 <HAL_TIM_ConfigClockSource+0x294>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d009      	beq.n	8008ce0 <HAL_TIM_ConfigClockSource+0x1e4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a32      	ldr	r2, [pc, #200]	; (8008d9c <HAL_TIM_ConfigClockSource+0x2a0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d004      	beq.n	8008ce0 <HAL_TIM_ConfigClockSource+0x1e4>
 8008cd6:	f241 517d 	movw	r1, #5501	; 0x157d
 8008cda:	482a      	ldr	r0, [pc, #168]	; (8008d84 <HAL_TIM_ConfigClockSource+0x288>)
 8008cdc:	f7f7 fd65 	bl	80007aa <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d013      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x214>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf0:	d00e      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x214>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cfa:	d009      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x214>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d04:	d004      	beq.n	8008d10 <HAL_TIM_ConfigClockSource+0x214>
 8008d06:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8008d0a:	481e      	ldr	r0, [pc, #120]	; (8008d84 <HAL_TIM_ConfigClockSource+0x288>)
 8008d0c:	f7f7 fd4d 	bl	80007aa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d18:	d014      	beq.n	8008d44 <HAL_TIM_ConfigClockSource+0x248>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d010      	beq.n	8008d44 <HAL_TIM_ConfigClockSource+0x248>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00c      	beq.n	8008d44 <HAL_TIM_ConfigClockSource+0x248>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d008      	beq.n	8008d44 <HAL_TIM_ConfigClockSource+0x248>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2b0a      	cmp	r3, #10
 8008d38:	d004      	beq.n	8008d44 <HAL_TIM_ConfigClockSource+0x248>
 8008d3a:	f241 5181 	movw	r1, #5505	; 0x1581
 8008d3e:	4811      	ldr	r0, [pc, #68]	; (8008d84 <HAL_TIM_ConfigClockSource+0x288>)
 8008d40:	f7f7 fd33 	bl	80007aa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	2b0f      	cmp	r3, #15
 8008d4a:	d904      	bls.n	8008d56 <HAL_TIM_ConfigClockSource+0x25a>
 8008d4c:	f241 5182 	movw	r1, #5506	; 0x1582
 8008d50:	480c      	ldr	r0, [pc, #48]	; (8008d84 <HAL_TIM_ConfigClockSource+0x288>)
 8008d52:	f7f7 fd2a 	bl	80007aa <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6899      	ldr	r1, [r3, #8]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f000 fe4f 	bl	8009a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	609a      	str	r2, [r3, #8]
      break;
 8008d82:	e1bd      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x604>
 8008d84:	0800efbc 	.word	0x0800efbc
 8008d88:	40012c00 	.word	0x40012c00
 8008d8c:	40000400 	.word	0x40000400
 8008d90:	40000800 	.word	0x40000800
 8008d94:	40001000 	.word	0x40001000
 8008d98:	40001400 	.word	0x40001400
 8008d9c:	40013400 	.word	0x40013400
 8008da0:	40014000 	.word	0x40014000
 8008da4:	40014400 	.word	0x40014400
 8008da8:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a8a      	ldr	r2, [pc, #552]	; (8008fdc <HAL_TIM_ConfigClockSource+0x4e0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d018      	beq.n	8008de8 <HAL_TIM_ConfigClockSource+0x2ec>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d013      	beq.n	8008de8 <HAL_TIM_ConfigClockSource+0x2ec>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a86      	ldr	r2, [pc, #536]	; (8008fe0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d00e      	beq.n	8008de8 <HAL_TIM_ConfigClockSource+0x2ec>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a85      	ldr	r2, [pc, #532]	; (8008fe4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d009      	beq.n	8008de8 <HAL_TIM_ConfigClockSource+0x2ec>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a83      	ldr	r2, [pc, #524]	; (8008fe8 <HAL_TIM_ConfigClockSource+0x4ec>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d004      	beq.n	8008de8 <HAL_TIM_ConfigClockSource+0x2ec>
 8008dde:	f241 5195 	movw	r1, #5525	; 0x1595
 8008de2:	4882      	ldr	r0, [pc, #520]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008de4:	f7f7 fce1 	bl	80007aa <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d013      	beq.n	8008e18 <HAL_TIM_ConfigClockSource+0x31c>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df8:	d00e      	beq.n	8008e18 <HAL_TIM_ConfigClockSource+0x31c>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e02:	d009      	beq.n	8008e18 <HAL_TIM_ConfigClockSource+0x31c>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e0c:	d004      	beq.n	8008e18 <HAL_TIM_ConfigClockSource+0x31c>
 8008e0e:	f241 5198 	movw	r1, #5528	; 0x1598
 8008e12:	4876      	ldr	r0, [pc, #472]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008e14:	f7f7 fcc9 	bl	80007aa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e20:	d014      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x350>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d010      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x350>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00c      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x350>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d008      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x350>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2b0a      	cmp	r3, #10
 8008e40:	d004      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x350>
 8008e42:	f241 5199 	movw	r1, #5529	; 0x1599
 8008e46:	4869      	ldr	r0, [pc, #420]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008e48:	f7f7 fcaf 	bl	80007aa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	2b0f      	cmp	r3, #15
 8008e52:	d904      	bls.n	8008e5e <HAL_TIM_ConfigClockSource+0x362>
 8008e54:	f241 519a 	movw	r1, #5530	; 0x159a
 8008e58:	4864      	ldr	r0, [pc, #400]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008e5a:	f7f7 fca6 	bl	80007aa <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	6899      	ldr	r1, [r3, #8]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f000 fdcb 	bl	8009a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e80:	609a      	str	r2, [r3, #8]
      break;
 8008e82:	e13d      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a54      	ldr	r2, [pc, #336]	; (8008fdc <HAL_TIM_ConfigClockSource+0x4e0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d01d      	beq.n	8008eca <HAL_TIM_ConfigClockSource+0x3ce>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e96:	d018      	beq.n	8008eca <HAL_TIM_ConfigClockSource+0x3ce>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a50      	ldr	r2, [pc, #320]	; (8008fe0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d013      	beq.n	8008eca <HAL_TIM_ConfigClockSource+0x3ce>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a4f      	ldr	r2, [pc, #316]	; (8008fe4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00e      	beq.n	8008eca <HAL_TIM_ConfigClockSource+0x3ce>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a4d      	ldr	r2, [pc, #308]	; (8008fe8 <HAL_TIM_ConfigClockSource+0x4ec>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d009      	beq.n	8008eca <HAL_TIM_ConfigClockSource+0x3ce>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a4d      	ldr	r2, [pc, #308]	; (8008ff0 <HAL_TIM_ConfigClockSource+0x4f4>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d004      	beq.n	8008eca <HAL_TIM_ConfigClockSource+0x3ce>
 8008ec0:	f241 51a9 	movw	r1, #5545	; 0x15a9
 8008ec4:	4849      	ldr	r0, [pc, #292]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008ec6:	f7f7 fc70 	bl	80007aa <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ed2:	d014      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0x402>
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d010      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0x402>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00c      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0x402>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d008      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0x402>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	2b0a      	cmp	r3, #10
 8008ef2:	d004      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0x402>
 8008ef4:	f241 51ac 	movw	r1, #5548	; 0x15ac
 8008ef8:	483c      	ldr	r0, [pc, #240]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008efa:	f7f7 fc56 	bl	80007aa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	2b0f      	cmp	r3, #15
 8008f04:	d904      	bls.n	8008f10 <HAL_TIM_ConfigClockSource+0x414>
 8008f06:	f241 51ad 	movw	r1, #5549	; 0x15ad
 8008f0a:	4838      	ldr	r0, [pc, #224]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008f0c:	f7f7 fc4d 	bl	80007aa <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	6859      	ldr	r1, [r3, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f000 fcf9 	bl	8009914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2150      	movs	r1, #80	; 0x50
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fd52 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 8008f2e:	e0e7      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a29      	ldr	r2, [pc, #164]	; (8008fdc <HAL_TIM_ConfigClockSource+0x4e0>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d01d      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x47a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f42:	d018      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x47a>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a25      	ldr	r2, [pc, #148]	; (8008fe0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d013      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x47a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a24      	ldr	r2, [pc, #144]	; (8008fe4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00e      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x47a>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a22      	ldr	r2, [pc, #136]	; (8008fe8 <HAL_TIM_ConfigClockSource+0x4ec>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d009      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x47a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a22      	ldr	r2, [pc, #136]	; (8008ff0 <HAL_TIM_ConfigClockSource+0x4f4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d004      	beq.n	8008f76 <HAL_TIM_ConfigClockSource+0x47a>
 8008f6c:	f241 51b9 	movw	r1, #5561	; 0x15b9
 8008f70:	481e      	ldr	r0, [pc, #120]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008f72:	f7f7 fc1a 	bl	80007aa <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f7e:	d014      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x4ae>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d010      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x4ae>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00c      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x4ae>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d008      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x4ae>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	2b0a      	cmp	r3, #10
 8008f9e:	d004      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x4ae>
 8008fa0:	f241 51bc 	movw	r1, #5564	; 0x15bc
 8008fa4:	4811      	ldr	r0, [pc, #68]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008fa6:	f7f7 fc00 	bl	80007aa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b0f      	cmp	r3, #15
 8008fb0:	d904      	bls.n	8008fbc <HAL_TIM_ConfigClockSource+0x4c0>
 8008fb2:	f241 51bd 	movw	r1, #5565	; 0x15bd
 8008fb6:	480d      	ldr	r0, [pc, #52]	; (8008fec <HAL_TIM_ConfigClockSource+0x4f0>)
 8008fb8:	f7f7 fbf7 	bl	80007aa <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6859      	ldr	r1, [r3, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	f000 fcd2 	bl	8009972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2160      	movs	r1, #96	; 0x60
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fcfc 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 8008fda:	e091      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x604>
 8008fdc:	40012c00 	.word	0x40012c00
 8008fe0:	40000400 	.word	0x40000400
 8008fe4:	40000800 	.word	0x40000800
 8008fe8:	40013400 	.word	0x40013400
 8008fec:	0800efbc 	.word	0x0800efbc
 8008ff0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a48      	ldr	r2, [pc, #288]	; (800911c <HAL_TIM_ConfigClockSource+0x620>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d01d      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x53e>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009006:	d018      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x53e>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a44      	ldr	r2, [pc, #272]	; (8009120 <HAL_TIM_ConfigClockSource+0x624>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d013      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x53e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a43      	ldr	r2, [pc, #268]	; (8009124 <HAL_TIM_ConfigClockSource+0x628>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00e      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x53e>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a41      	ldr	r2, [pc, #260]	; (8009128 <HAL_TIM_ConfigClockSource+0x62c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d009      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x53e>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a40      	ldr	r2, [pc, #256]	; (800912c <HAL_TIM_ConfigClockSource+0x630>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d004      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x53e>
 8009030:	f241 51c9 	movw	r1, #5577	; 0x15c9
 8009034:	483e      	ldr	r0, [pc, #248]	; (8009130 <HAL_TIM_ConfigClockSource+0x634>)
 8009036:	f7f7 fbb8 	bl	80007aa <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009042:	d014      	beq.n	800906e <HAL_TIM_ConfigClockSource+0x572>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d010      	beq.n	800906e <HAL_TIM_ConfigClockSource+0x572>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <HAL_TIM_ConfigClockSource+0x572>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d008      	beq.n	800906e <HAL_TIM_ConfigClockSource+0x572>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2b0a      	cmp	r3, #10
 8009062:	d004      	beq.n	800906e <HAL_TIM_ConfigClockSource+0x572>
 8009064:	f241 51cc 	movw	r1, #5580	; 0x15cc
 8009068:	4831      	ldr	r0, [pc, #196]	; (8009130 <HAL_TIM_ConfigClockSource+0x634>)
 800906a:	f7f7 fb9e 	bl	80007aa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	2b0f      	cmp	r3, #15
 8009074:	d904      	bls.n	8009080 <HAL_TIM_ConfigClockSource+0x584>
 8009076:	f241 51cd 	movw	r1, #5581	; 0x15cd
 800907a:	482d      	ldr	r0, [pc, #180]	; (8009130 <HAL_TIM_ConfigClockSource+0x634>)
 800907c:	f7f7 fb95 	bl	80007aa <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	6859      	ldr	r1, [r3, #4]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	461a      	mov	r2, r3
 800908e:	f000 fc41 	bl	8009914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2140      	movs	r1, #64	; 0x40
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fc9a 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 800909e:	e02f      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x604>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1d      	ldr	r2, [pc, #116]	; (800911c <HAL_TIM_ConfigClockSource+0x620>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d01d      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x5ea>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b2:	d018      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x5ea>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a19      	ldr	r2, [pc, #100]	; (8009120 <HAL_TIM_ConfigClockSource+0x624>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d013      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x5ea>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a18      	ldr	r2, [pc, #96]	; (8009124 <HAL_TIM_ConfigClockSource+0x628>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00e      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x5ea>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a16      	ldr	r2, [pc, #88]	; (8009128 <HAL_TIM_ConfigClockSource+0x62c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d009      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x5ea>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a15      	ldr	r2, [pc, #84]	; (800912c <HAL_TIM_ConfigClockSource+0x630>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d004      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x5ea>
 80090dc:	f241 51dc 	movw	r1, #5596	; 0x15dc
 80090e0:	4813      	ldr	r0, [pc, #76]	; (8009130 <HAL_TIM_ConfigClockSource+0x634>)
 80090e2:	f7f7 fb62 	bl	80007aa <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f000 fc6e 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 80090f6:	e003      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x604>
    }

    default:
      status = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	73fb      	strb	r3, [r7, #15]
      break;
 80090fc:	e000      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x604>
      break;
 80090fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	40012c00 	.word	0x40012c00
 8009120:	40000400 	.word	0x40000400
 8009124:	40000800 	.word	0x40000800
 8009128:	40013400 	.word	0x40013400
 800912c:	40014000 	.word	0x40014000
 8009130:	0800efbc 	.word	0x0800efbc

08009134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a3c      	ldr	r2, [pc, #240]	; (8009238 <TIM_Base_SetConfig+0x104>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00f      	beq.n	800916c <TIM_Base_SetConfig+0x38>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009152:	d00b      	beq.n	800916c <TIM_Base_SetConfig+0x38>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a39      	ldr	r2, [pc, #228]	; (800923c <TIM_Base_SetConfig+0x108>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d007      	beq.n	800916c <TIM_Base_SetConfig+0x38>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a38      	ldr	r2, [pc, #224]	; (8009240 <TIM_Base_SetConfig+0x10c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d003      	beq.n	800916c <TIM_Base_SetConfig+0x38>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a37      	ldr	r2, [pc, #220]	; (8009244 <TIM_Base_SetConfig+0x110>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d108      	bne.n	800917e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2d      	ldr	r2, [pc, #180]	; (8009238 <TIM_Base_SetConfig+0x104>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d01b      	beq.n	80091be <TIM_Base_SetConfig+0x8a>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800918c:	d017      	beq.n	80091be <TIM_Base_SetConfig+0x8a>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a2a      	ldr	r2, [pc, #168]	; (800923c <TIM_Base_SetConfig+0x108>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <TIM_Base_SetConfig+0x8a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a29      	ldr	r2, [pc, #164]	; (8009240 <TIM_Base_SetConfig+0x10c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00f      	beq.n	80091be <TIM_Base_SetConfig+0x8a>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a28      	ldr	r2, [pc, #160]	; (8009244 <TIM_Base_SetConfig+0x110>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00b      	beq.n	80091be <TIM_Base_SetConfig+0x8a>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a27      	ldr	r2, [pc, #156]	; (8009248 <TIM_Base_SetConfig+0x114>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d007      	beq.n	80091be <TIM_Base_SetConfig+0x8a>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a26      	ldr	r2, [pc, #152]	; (800924c <TIM_Base_SetConfig+0x118>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_Base_SetConfig+0x8a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a25      	ldr	r2, [pc, #148]	; (8009250 <TIM_Base_SetConfig+0x11c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d108      	bne.n	80091d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a10      	ldr	r2, [pc, #64]	; (8009238 <TIM_Base_SetConfig+0x104>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d00f      	beq.n	800921c <TIM_Base_SetConfig+0xe8>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a11      	ldr	r2, [pc, #68]	; (8009244 <TIM_Base_SetConfig+0x110>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d00b      	beq.n	800921c <TIM_Base_SetConfig+0xe8>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a10      	ldr	r2, [pc, #64]	; (8009248 <TIM_Base_SetConfig+0x114>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d007      	beq.n	800921c <TIM_Base_SetConfig+0xe8>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a0f      	ldr	r2, [pc, #60]	; (800924c <TIM_Base_SetConfig+0x118>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d003      	beq.n	800921c <TIM_Base_SetConfig+0xe8>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a0e      	ldr	r2, [pc, #56]	; (8009250 <TIM_Base_SetConfig+0x11c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d103      	bne.n	8009224 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	615a      	str	r2, [r3, #20]
}
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40012c00 	.word	0x40012c00
 800923c:	40000400 	.word	0x40000400
 8009240:	40000800 	.word	0x40000800
 8009244:	40013400 	.word	0x40013400
 8009248:	40014000 	.word	0x40014000
 800924c:	40014400 	.word	0x40014400
 8009250:	40014800 	.word	0x40014800

08009254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	f023 0201 	bic.w	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0303 	bic.w	r3, r3, #3
 800928e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f023 0302 	bic.w	r3, r3, #2
 80092a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a40      	ldr	r2, [pc, #256]	; (80093b0 <TIM_OC1_SetConfig+0x15c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00f      	beq.n	80092d4 <TIM_OC1_SetConfig+0x80>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a3f      	ldr	r2, [pc, #252]	; (80093b4 <TIM_OC1_SetConfig+0x160>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00b      	beq.n	80092d4 <TIM_OC1_SetConfig+0x80>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a3e      	ldr	r2, [pc, #248]	; (80093b8 <TIM_OC1_SetConfig+0x164>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d007      	beq.n	80092d4 <TIM_OC1_SetConfig+0x80>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a3d      	ldr	r2, [pc, #244]	; (80093bc <TIM_OC1_SetConfig+0x168>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d003      	beq.n	80092d4 <TIM_OC1_SetConfig+0x80>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a3c      	ldr	r2, [pc, #240]	; (80093c0 <TIM_OC1_SetConfig+0x16c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d119      	bne.n	8009308 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d008      	beq.n	80092ee <TIM_OC1_SetConfig+0x9a>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d004      	beq.n	80092ee <TIM_OC1_SetConfig+0x9a>
 80092e4:	f641 318d 	movw	r1, #7053	; 0x1b8d
 80092e8:	4836      	ldr	r0, [pc, #216]	; (80093c4 <TIM_OC1_SetConfig+0x170>)
 80092ea:	f7f7 fa5e 	bl	80007aa <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f023 0308 	bic.w	r3, r3, #8
 80092f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f023 0304 	bic.w	r3, r3, #4
 8009306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a29      	ldr	r2, [pc, #164]	; (80093b0 <TIM_OC1_SetConfig+0x15c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00f      	beq.n	8009330 <TIM_OC1_SetConfig+0xdc>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a28      	ldr	r2, [pc, #160]	; (80093b4 <TIM_OC1_SetConfig+0x160>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d00b      	beq.n	8009330 <TIM_OC1_SetConfig+0xdc>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <TIM_OC1_SetConfig+0x164>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d007      	beq.n	8009330 <TIM_OC1_SetConfig+0xdc>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a26      	ldr	r2, [pc, #152]	; (80093bc <TIM_OC1_SetConfig+0x168>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d003      	beq.n	8009330 <TIM_OC1_SetConfig+0xdc>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a25      	ldr	r2, [pc, #148]	; (80093c0 <TIM_OC1_SetConfig+0x16c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d12d      	bne.n	800938c <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009338:	d008      	beq.n	800934c <TIM_OC1_SetConfig+0xf8>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <TIM_OC1_SetConfig+0xf8>
 8009342:	f641 319a 	movw	r1, #7066	; 0x1b9a
 8009346:	481f      	ldr	r0, [pc, #124]	; (80093c4 <TIM_OC1_SetConfig+0x170>)
 8009348:	f7f7 fa2f 	bl	80007aa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009354:	d008      	beq.n	8009368 <TIM_OC1_SetConfig+0x114>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d004      	beq.n	8009368 <TIM_OC1_SetConfig+0x114>
 800935e:	f641 319b 	movw	r1, #7067	; 0x1b9b
 8009362:	4818      	ldr	r0, [pc, #96]	; (80093c4 <TIM_OC1_SetConfig+0x170>)
 8009364:	f7f7 fa21 	bl	80007aa <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800936e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4313      	orrs	r3, r2
 8009380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	621a      	str	r2, [r3, #32]
}
 80093a6:	bf00      	nop
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	40012c00 	.word	0x40012c00
 80093b4:	40013400 	.word	0x40013400
 80093b8:	40014000 	.word	0x40014000
 80093bc:	40014400 	.word	0x40014400
 80093c0:	40014800 	.word	0x40014800
 80093c4:	0800efbc 	.word	0x0800efbc

080093c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f023 0210 	bic.w	r2, r3, #16
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f023 0320 	bic.w	r3, r3, #32
 8009416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a3b      	ldr	r2, [pc, #236]	; (8009514 <TIM_OC2_SetConfig+0x14c>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_OC2_SetConfig+0x6c>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a3a      	ldr	r2, [pc, #232]	; (8009518 <TIM_OC2_SetConfig+0x150>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d11a      	bne.n	800946a <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d008      	beq.n	800944e <TIM_OC2_SetConfig+0x86>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	2b08      	cmp	r3, #8
 8009442:	d004      	beq.n	800944e <TIM_OC2_SetConfig+0x86>
 8009444:	f641 31d8 	movw	r1, #7128	; 0x1bd8
 8009448:	4834      	ldr	r0, [pc, #208]	; (800951c <TIM_OC2_SetConfig+0x154>)
 800944a:	f7f7 f9ae 	bl	80007aa <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	011b      	lsls	r3, r3, #4
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009468:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a29      	ldr	r2, [pc, #164]	; (8009514 <TIM_OC2_SetConfig+0x14c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00f      	beq.n	8009492 <TIM_OC2_SetConfig+0xca>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a28      	ldr	r2, [pc, #160]	; (8009518 <TIM_OC2_SetConfig+0x150>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00b      	beq.n	8009492 <TIM_OC2_SetConfig+0xca>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a28      	ldr	r2, [pc, #160]	; (8009520 <TIM_OC2_SetConfig+0x158>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <TIM_OC2_SetConfig+0xca>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a27      	ldr	r2, [pc, #156]	; (8009524 <TIM_OC2_SetConfig+0x15c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_OC2_SetConfig+0xca>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a26      	ldr	r2, [pc, #152]	; (8009528 <TIM_OC2_SetConfig+0x160>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d12f      	bne.n	80094f2 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800949a:	d008      	beq.n	80094ae <TIM_OC2_SetConfig+0xe6>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <TIM_OC2_SetConfig+0xe6>
 80094a4:	f641 31e6 	movw	r1, #7142	; 0x1be6
 80094a8:	481c      	ldr	r0, [pc, #112]	; (800951c <TIM_OC2_SetConfig+0x154>)
 80094aa:	f7f7 f97e 	bl	80007aa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b6:	d008      	beq.n	80094ca <TIM_OC2_SetConfig+0x102>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <TIM_OC2_SetConfig+0x102>
 80094c0:	f641 31e7 	movw	r1, #7143	; 0x1be7
 80094c4:	4815      	ldr	r0, [pc, #84]	; (800951c <TIM_OC2_SetConfig+0x154>)
 80094c6:	f7f7 f970 	bl	80007aa <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094d0:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094d8:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	621a      	str	r2, [r3, #32]
}
 800950c:	bf00      	nop
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	40012c00 	.word	0x40012c00
 8009518:	40013400 	.word	0x40013400
 800951c:	0800efbc 	.word	0x0800efbc
 8009520:	40014000 	.word	0x40014000
 8009524:	40014400 	.word	0x40014400
 8009528:	40014800 	.word	0x40014800

0800952c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800955a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 0303 	bic.w	r3, r3, #3
 8009566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	021b      	lsls	r3, r3, #8
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a3b      	ldr	r2, [pc, #236]	; (8009678 <TIM_OC3_SetConfig+0x14c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_OC3_SetConfig+0x6a>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a3a      	ldr	r2, [pc, #232]	; (800967c <TIM_OC3_SetConfig+0x150>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d11a      	bne.n	80095cc <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d008      	beq.n	80095b0 <TIM_OC3_SetConfig+0x84>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	d004      	beq.n	80095b0 <TIM_OC3_SetConfig+0x84>
 80095a6:	f641 4125 	movw	r1, #7205	; 0x1c25
 80095aa:	4835      	ldr	r0, [pc, #212]	; (8009680 <TIM_OC3_SetConfig+0x154>)
 80095ac:	f7f7 f8fd 	bl	80007aa <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ca:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a2a      	ldr	r2, [pc, #168]	; (8009678 <TIM_OC3_SetConfig+0x14c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00f      	beq.n	80095f4 <TIM_OC3_SetConfig+0xc8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a29      	ldr	r2, [pc, #164]	; (800967c <TIM_OC3_SetConfig+0x150>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d00b      	beq.n	80095f4 <TIM_OC3_SetConfig+0xc8>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a29      	ldr	r2, [pc, #164]	; (8009684 <TIM_OC3_SetConfig+0x158>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d007      	beq.n	80095f4 <TIM_OC3_SetConfig+0xc8>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a28      	ldr	r2, [pc, #160]	; (8009688 <TIM_OC3_SetConfig+0x15c>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d003      	beq.n	80095f4 <TIM_OC3_SetConfig+0xc8>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a27      	ldr	r2, [pc, #156]	; (800968c <TIM_OC3_SetConfig+0x160>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d12f      	bne.n	8009654 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095fc:	d008      	beq.n	8009610 <TIM_OC3_SetConfig+0xe4>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d004      	beq.n	8009610 <TIM_OC3_SetConfig+0xe4>
 8009606:	f641 4133 	movw	r1, #7219	; 0x1c33
 800960a:	481d      	ldr	r0, [pc, #116]	; (8009680 <TIM_OC3_SetConfig+0x154>)
 800960c:	f7f7 f8cd 	bl	80007aa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009618:	d008      	beq.n	800962c <TIM_OC3_SetConfig+0x100>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d004      	beq.n	800962c <TIM_OC3_SetConfig+0x100>
 8009622:	f641 4134 	movw	r1, #7220	; 0x1c34
 8009626:	4816      	ldr	r0, [pc, #88]	; (8009680 <TIM_OC3_SetConfig+0x154>)
 8009628:	f7f7 f8bf 	bl	80007aa <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800963a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	4313      	orrs	r3, r2
 8009646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	011b      	lsls	r3, r3, #4
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	621a      	str	r2, [r3, #32]
}
 800966e:	bf00      	nop
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	40012c00 	.word	0x40012c00
 800967c:	40013400 	.word	0x40013400
 8009680:	0800efbc 	.word	0x0800efbc
 8009684:	40014000 	.word	0x40014000
 8009688:	40014400 	.word	0x40014400
 800968c:	40014800 	.word	0x40014800

08009690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	031b      	lsls	r3, r3, #12
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a1e      	ldr	r2, [pc, #120]	; (8009768 <TIM_OC4_SetConfig+0xd8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d00f      	beq.n	8009714 <TIM_OC4_SetConfig+0x84>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a1d      	ldr	r2, [pc, #116]	; (800976c <TIM_OC4_SetConfig+0xdc>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d00b      	beq.n	8009714 <TIM_OC4_SetConfig+0x84>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a1c      	ldr	r2, [pc, #112]	; (8009770 <TIM_OC4_SetConfig+0xe0>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d007      	beq.n	8009714 <TIM_OC4_SetConfig+0x84>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a1b      	ldr	r2, [pc, #108]	; (8009774 <TIM_OC4_SetConfig+0xe4>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d003      	beq.n	8009714 <TIM_OC4_SetConfig+0x84>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a1a      	ldr	r2, [pc, #104]	; (8009778 <TIM_OC4_SetConfig+0xe8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d117      	bne.n	8009744 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800971c:	d008      	beq.n	8009730 <TIM_OC4_SetConfig+0xa0>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d004      	beq.n	8009730 <TIM_OC4_SetConfig+0xa0>
 8009726:	f641 4174 	movw	r1, #7284	; 0x1c74
 800972a:	4814      	ldr	r0, [pc, #80]	; (800977c <TIM_OC4_SetConfig+0xec>)
 800972c:	f7f7 f83d 	bl	80007aa <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	019b      	lsls	r3, r3, #6
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	4313      	orrs	r3, r2
 8009742:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	621a      	str	r2, [r3, #32]
}
 800975e:	bf00      	nop
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40012c00 	.word	0x40012c00
 800976c:	40013400 	.word	0x40013400
 8009770:	40014000 	.word	0x40014000
 8009774:	40014400 	.word	0x40014400
 8009778:	40014800 	.word	0x40014800
 800977c:	0800efbc 	.word	0x0800efbc

08009780 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80097c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	041b      	lsls	r3, r3, #16
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a17      	ldr	r2, [pc, #92]	; (8009834 <TIM_OC5_SetConfig+0xb4>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00f      	beq.n	80097fa <TIM_OC5_SetConfig+0x7a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a16      	ldr	r2, [pc, #88]	; (8009838 <TIM_OC5_SetConfig+0xb8>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00b      	beq.n	80097fa <TIM_OC5_SetConfig+0x7a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a15      	ldr	r2, [pc, #84]	; (800983c <TIM_OC5_SetConfig+0xbc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d007      	beq.n	80097fa <TIM_OC5_SetConfig+0x7a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a14      	ldr	r2, [pc, #80]	; (8009840 <TIM_OC5_SetConfig+0xc0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d003      	beq.n	80097fa <TIM_OC5_SetConfig+0x7a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a13      	ldr	r2, [pc, #76]	; (8009844 <TIM_OC5_SetConfig+0xc4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d109      	bne.n	800980e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4313      	orrs	r3, r2
 800980c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	621a      	str	r2, [r3, #32]
}
 8009828:	bf00      	nop
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	40012c00 	.word	0x40012c00
 8009838:	40013400 	.word	0x40013400
 800983c:	40014000 	.word	0x40014000
 8009840:	40014400 	.word	0x40014400
 8009844:	40014800 	.word	0x40014800

08009848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800987a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800988e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	051b      	lsls	r3, r3, #20
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4313      	orrs	r3, r2
 800989a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a18      	ldr	r2, [pc, #96]	; (8009900 <TIM_OC6_SetConfig+0xb8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00f      	beq.n	80098c4 <TIM_OC6_SetConfig+0x7c>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a17      	ldr	r2, [pc, #92]	; (8009904 <TIM_OC6_SetConfig+0xbc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00b      	beq.n	80098c4 <TIM_OC6_SetConfig+0x7c>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a16      	ldr	r2, [pc, #88]	; (8009908 <TIM_OC6_SetConfig+0xc0>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d007      	beq.n	80098c4 <TIM_OC6_SetConfig+0x7c>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a15      	ldr	r2, [pc, #84]	; (800990c <TIM_OC6_SetConfig+0xc4>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_OC6_SetConfig+0x7c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a14      	ldr	r2, [pc, #80]	; (8009910 <TIM_OC6_SetConfig+0xc8>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d109      	bne.n	80098d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	029b      	lsls	r3, r3, #10
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	621a      	str	r2, [r3, #32]
}
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	40012c00 	.word	0x40012c00
 8009904:	40013400 	.word	0x40013400
 8009908:	40014000 	.word	0x40014000
 800990c:	40014400 	.word	0x40014400
 8009910:	40014800 	.word	0x40014800

08009914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	f023 0201 	bic.w	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800993e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f023 030a 	bic.w	r3, r3, #10
 8009950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009972:	b480      	push	{r7}
 8009974:	b087      	sub	sp, #28
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	f023 0210 	bic.w	r2, r3, #16
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800999c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	031b      	lsls	r3, r3, #12
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	621a      	str	r2, [r3, #32]
}
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	f043 0307 	orr.w	r3, r3, #7
 80099f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	609a      	str	r2, [r3, #8]
}
 80099fc:	bf00      	nop
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	021a      	lsls	r2, r3, #8
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	609a      	str	r2, [r3, #8]
}
 8009a3c:	bf00      	nop
 8009a3e:	371c      	adds	r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4a2d      	ldr	r2, [pc, #180]	; (8009b0c <TIM_CCxChannelCmd+0xc4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d020      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a62:	d01c      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4a2a      	ldr	r2, [pc, #168]	; (8009b10 <TIM_CCxChannelCmd+0xc8>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d018      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4a29      	ldr	r2, [pc, #164]	; (8009b14 <TIM_CCxChannelCmd+0xcc>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d014      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4a28      	ldr	r2, [pc, #160]	; (8009b18 <TIM_CCxChannelCmd+0xd0>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d010      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a27      	ldr	r2, [pc, #156]	; (8009b1c <TIM_CCxChannelCmd+0xd4>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00c      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4a26      	ldr	r2, [pc, #152]	; (8009b20 <TIM_CCxChannelCmd+0xd8>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d008      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4a25      	ldr	r2, [pc, #148]	; (8009b24 <TIM_CCxChannelCmd+0xdc>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d004      	beq.n	8009a9e <TIM_CCxChannelCmd+0x56>
 8009a94:	f641 61d1 	movw	r1, #7889	; 0x1ed1
 8009a98:	4823      	ldr	r0, [pc, #140]	; (8009b28 <TIM_CCxChannelCmd+0xe0>)
 8009a9a:	f7f6 fe86 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d016      	beq.n	8009ad2 <TIM_CCxChannelCmd+0x8a>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d013      	beq.n	8009ad2 <TIM_CCxChannelCmd+0x8a>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d010      	beq.n	8009ad2 <TIM_CCxChannelCmd+0x8a>
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b0c      	cmp	r3, #12
 8009ab4:	d00d      	beq.n	8009ad2 <TIM_CCxChannelCmd+0x8a>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b10      	cmp	r3, #16
 8009aba:	d00a      	beq.n	8009ad2 <TIM_CCxChannelCmd+0x8a>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b14      	cmp	r3, #20
 8009ac0:	d007      	beq.n	8009ad2 <TIM_CCxChannelCmd+0x8a>
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	2b3c      	cmp	r3, #60	; 0x3c
 8009ac6:	d004      	beq.n	8009ad2 <TIM_CCxChannelCmd+0x8a>
 8009ac8:	f641 61d2 	movw	r1, #7890	; 0x1ed2
 8009acc:	4816      	ldr	r0, [pc, #88]	; (8009b28 <TIM_CCxChannelCmd+0xe0>)
 8009ace:	f7f6 fe6c 	bl	80007aa <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f003 031f 	and.w	r3, r3, #31
 8009ad8:	2201      	movs	r2, #1
 8009ada:	fa02 f303 	lsl.w	r3, r2, r3
 8009ade:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a1a      	ldr	r2, [r3, #32]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	43db      	mvns	r3, r3
 8009ae8:	401a      	ands	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a1a      	ldr	r2, [r3, #32]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f003 031f 	and.w	r3, r3, #31
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	431a      	orrs	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	621a      	str	r2, [r3, #32]
}
 8009b04:	bf00      	nop
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	40012c00 	.word	0x40012c00
 8009b10:	40000400 	.word	0x40000400
 8009b14:	40000800 	.word	0x40000800
 8009b18:	40013400 	.word	0x40013400
 8009b1c:	40014000 	.word	0x40014000
 8009b20:	40014400 	.word	0x40014400
 8009b24:	40014800 	.word	0x40014800
 8009b28:	0800efbc 	.word	0x0800efbc

08009b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a32      	ldr	r2, [pc, #200]	; (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d027      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b48:	d022      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a2e      	ldr	r2, [pc, #184]	; (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d01d      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a2c      	ldr	r2, [pc, #176]	; (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d018      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a2b      	ldr	r2, [pc, #172]	; (8009c10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d013      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a29      	ldr	r2, [pc, #164]	; (8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d00e      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a28      	ldr	r2, [pc, #160]	; (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d009      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a26      	ldr	r2, [pc, #152]	; (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d004      	beq.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009b86:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8009b8a:	4825      	ldr	r0, [pc, #148]	; (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b8c:	f7f6 fe0d 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d020      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b10      	cmp	r3, #16
 8009b9e:	d01c      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	d018      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b30      	cmp	r3, #48	; 0x30
 8009bae:	d014      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b40      	cmp	r3, #64	; 0x40
 8009bb6:	d010      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b50      	cmp	r3, #80	; 0x50
 8009bbe:	d00c      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b60      	cmp	r3, #96	; 0x60
 8009bc6:	d008      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b70      	cmp	r3, #112	; 0x70
 8009bce:	d004      	beq.n	8009bda <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009bd0:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8009bd4:	4812      	ldr	r0, [pc, #72]	; (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009bd6:	f7f6 fde8 	bl	80007aa <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2b80      	cmp	r3, #128	; 0x80
 8009be0:	d008      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d004      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bea:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8009bee:	480c      	ldr	r0, [pc, #48]	; (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009bf0:	f7f6 fddb 	bl	80007aa <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d112      	bne.n	8009c24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009bfe:	2302      	movs	r3, #2
 8009c00:	e0cd      	b.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0x272>
 8009c02:	bf00      	nop
 8009c04:	40012c00 	.word	0x40012c00
 8009c08:	40000400 	.word	0x40000400
 8009c0c:	40000800 	.word	0x40000800
 8009c10:	40001000 	.word	0x40001000
 8009c14:	40001400 	.word	0x40001400
 8009c18:	40013400 	.word	0x40013400
 8009c1c:	40014000 	.word	0x40014000
 8009c20:	0800eff4 	.word	0x0800eff4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a57      	ldr	r2, [pc, #348]	; (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d004      	beq.n	8009c58 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a56      	ldr	r2, [pc, #344]	; (8009dac <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d161      	bne.n	8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d054      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c68:	d04f      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c72:	d04a      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c7c:	d045      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c86:	d040      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009c90:	d03b      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c9a:	d036      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ca4:	d031      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8009cae:	d02c      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cb8:	d027      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8009cc2:	d022      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009ccc:	d01d      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8009cd6:	d018      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009ce0:	d013      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8009cea:	d00e      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8009cf4:	d009      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8009cfe:	d004      	beq.n	8009d0a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009d00:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8009d04:	482a      	ldr	r0, [pc, #168]	; (8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8009d06:	f7f6 fd50 	bl	80007aa <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a1b      	ldr	r2, [pc, #108]	; (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d018      	beq.n	8009d72 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d48:	d013      	beq.n	8009d72 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a19      	ldr	r2, [pc, #100]	; (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00e      	beq.n	8009d72 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d009      	beq.n	8009d72 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a12      	ldr	r2, [pc, #72]	; (8009dac <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d004      	beq.n	8009d72 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a13      	ldr	r2, [pc, #76]	; (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d10c      	bne.n	8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x260>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40012c00 	.word	0x40012c00
 8009dac:	40013400 	.word	0x40013400
 8009db0:	0800eff4 	.word	0x0800eff4
 8009db4:	40000400 	.word	0x40000400
 8009db8:	40000800 	.word	0x40000800
 8009dbc:	40014000 	.word	0x40014000

08009dc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009dd0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009dd4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009df6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009dfa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	43db      	mvns	r3, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009e24:	b084      	sub	sp, #16
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	f107 0014 	add.w	r0, r7, #20
 8009e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	b004      	add	sp, #16
 8009e64:	4770      	bx	lr
	...

08009e68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b09d      	sub	sp, #116	; 0x74
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	78db      	ldrb	r3, [r3, #3]
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d81f      	bhi.n	8009eda <USB_ActivateEndpoint+0x72>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <USB_ActivateEndpoint+0x38>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009eb1 	.word	0x08009eb1
 8009ea4:	08009ecd 	.word	0x08009ecd
 8009ea8:	08009ee3 	.word	0x08009ee3
 8009eac:	08009ebf 	.word	0x08009ebf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009eb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009ebc:	e012      	b.n	8009ee4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009ebe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009ec2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009ec6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009eca:	e00b      	b.n	8009ee4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009ecc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ed4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009ed8:	e004      	b.n	8009ee4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009ee0:	e000      	b.n	8009ee4 <USB_ActivateEndpoint+0x7c>
      break;
 8009ee2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	441a      	add	r2, r3
 8009eee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	b21b      	sxth	r3, r3
 8009f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1e:	b21a      	sxth	r2, r3
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	b21b      	sxth	r3, r3
 8009f26:	4313      	orrs	r3, r2
 8009f28:	b21b      	sxth	r3, r3
 8009f2a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	441a      	add	r2, r3
 8009f38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	7b1b      	ldrb	r3, [r3, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f040 8149 	bne.w	800a1ec <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 8084 	beq.w	800a06c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	461a      	mov	r2, r3
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	4413      	add	r3, r2
 8009f76:	61bb      	str	r3, [r7, #24]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	011a      	lsls	r2, r3, #4
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	88db      	ldrh	r3, [r3, #6]
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	827b      	strh	r3, [r7, #18]
 8009fa6:	8a7b      	ldrh	r3, [r7, #18]
 8009fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01b      	beq.n	8009fe8 <USB_ActivateEndpoint+0x180>
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc6:	823b      	strh	r3, [r7, #16]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	441a      	add	r2, r3
 8009fd2:	8a3b      	ldrh	r3, [r7, #16]
 8009fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	78db      	ldrb	r3, [r3, #3]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d020      	beq.n	800a032 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4413      	add	r3, r2
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a006:	81bb      	strh	r3, [r7, #12]
 800a008:	89bb      	ldrh	r3, [r7, #12]
 800a00a:	f083 0320 	eor.w	r3, r3, #32
 800a00e:	81bb      	strh	r3, [r7, #12]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	441a      	add	r2, r3
 800a01a:	89bb      	ldrh	r3, [r7, #12]
 800a01c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	8013      	strh	r3, [r2, #0]
 800a030:	e2a6      	b.n	800a580 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	b29b      	uxth	r3, r3
 800a040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a048:	81fb      	strh	r3, [r7, #14]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	441a      	add	r2, r3
 800a054:	89fb      	ldrh	r3, [r7, #14]
 800a056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a05a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a05e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a066:	b29b      	uxth	r3, r3
 800a068:	8013      	strh	r3, [r2, #0]
 800a06a:	e289      	b.n	800a580 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	633b      	str	r3, [r7, #48]	; 0x30
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a076:	b29b      	uxth	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	4413      	add	r3, r2
 800a07e:	633b      	str	r3, [r7, #48]	; 0x30
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	011a      	lsls	r2, r3, #4
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	085b      	lsrs	r3, r3, #1
 800a096:	b29b      	uxth	r3, r3
 800a098:	005b      	lsls	r3, r3, #1
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	4413      	add	r3, r2
 800a0b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	011a      	lsls	r2, r3, #4
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	4413      	add	r3, r2
 800a0be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d112      	bne.n	800a0f2 <USB_ActivateEndpoint+0x28a>
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	801a      	strh	r2, [r3, #0]
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	e02f      	b.n	800a152 <USB_ActivateEndpoint+0x2ea>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	2b3e      	cmp	r3, #62	; 0x3e
 800a0f8:	d813      	bhi.n	800a122 <USB_ActivateEndpoint+0x2ba>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	085b      	lsrs	r3, r3, #1
 800a100:	66bb      	str	r3, [r7, #104]	; 0x68
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <USB_ActivateEndpoint+0x2ac>
 800a10e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a110:	3301      	adds	r3, #1
 800a112:	66bb      	str	r3, [r7, #104]	; 0x68
 800a114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a116:	b29b      	uxth	r3, r3
 800a118:	029b      	lsls	r3, r3, #10
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	801a      	strh	r2, [r3, #0]
 800a120:	e017      	b.n	800a152 <USB_ActivateEndpoint+0x2ea>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	095b      	lsrs	r3, r3, #5
 800a128:	66bb      	str	r3, [r7, #104]	; 0x68
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 031f 	and.w	r3, r3, #31
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <USB_ActivateEndpoint+0x2d4>
 800a136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a138:	3b01      	subs	r3, #1
 800a13a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a13c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a13e:	b29b      	uxth	r3, r3
 800a140:	029b      	lsls	r3, r3, #10
 800a142:	b29b      	uxth	r3, r3
 800a144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a160:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d01b      	beq.n	800a1a2 <USB_ActivateEndpoint+0x33a>
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29b      	uxth	r3, r3
 800a178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a180:	843b      	strh	r3, [r7, #32]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	441a      	add	r2, r3
 800a18c:	8c3b      	ldrh	r3, [r7, #32]
 800a18e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a19a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b8:	83fb      	strh	r3, [r7, #30]
 800a1ba:	8bfb      	ldrh	r3, [r7, #30]
 800a1bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1c0:	83fb      	strh	r3, [r7, #30]
 800a1c2:	8bfb      	ldrh	r3, [r7, #30]
 800a1c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1c8:	83fb      	strh	r3, [r7, #30]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	441a      	add	r2, r3
 800a1d4:	8bfb      	ldrh	r3, [r7, #30]
 800a1d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	8013      	strh	r3, [r2, #0]
 800a1ea:	e1c9      	b.n	800a580 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	78db      	ldrb	r3, [r3, #3]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d11e      	bne.n	800a232 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	441a      	add	r2, r3
 800a218:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a21c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a224:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	8013      	strh	r3, [r2, #0]
 800a230:	e01d      	b.n	800a26e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a248:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	441a      	add	r2, r3
 800a256:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a25a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a25e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a278:	b29b      	uxth	r3, r3
 800a27a:	461a      	mov	r2, r3
 800a27c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a27e:	4413      	add	r3, r2
 800a280:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	011a      	lsls	r2, r3, #4
 800a288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a290:	65bb      	str	r3, [r7, #88]	; 0x58
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	891b      	ldrh	r3, [r3, #8]
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	b29b      	uxth	r3, r3
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2a0:	801a      	strh	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	657b      	str	r3, [r7, #84]	; 0x54
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b2:	4413      	add	r3, r2
 800a2b4:	657b      	str	r3, [r7, #84]	; 0x54
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	011a      	lsls	r2, r3, #4
 800a2bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a2c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	895b      	ldrh	r3, [r3, #10]
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 8093 	bne.w	800a406 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a2f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a2f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01b      	beq.n	800a334 <USB_ActivateEndpoint+0x4cc>
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a312:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	441a      	add	r2, r3
 800a31e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a330:	b29b      	uxth	r3, r3
 800a332:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a342:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d01b      	beq.n	800a384 <USB_ActivateEndpoint+0x51c>
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a362:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	441a      	add	r2, r3
 800a36e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a37c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a380:	b29b      	uxth	r3, r3
 800a382:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39a:	873b      	strh	r3, [r7, #56]	; 0x38
 800a39c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a39e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3a2:	873b      	strh	r3, [r7, #56]	; 0x38
 800a3a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a3a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3aa:	873b      	strh	r3, [r7, #56]	; 0x38
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	441a      	add	r2, r3
 800a3b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	441a      	add	r2, r3
 800a3ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a400:	b29b      	uxth	r3, r3
 800a402:	8013      	strh	r3, [r2, #0]
 800a404:	e0bc      	b.n	800a580 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a416:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a41a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d01d      	beq.n	800a45e <USB_ActivateEndpoint+0x5f6>
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a438:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	441a      	add	r2, r3
 800a446:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a44a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a44e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a46e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d01d      	beq.n	800a4b6 <USB_ActivateEndpoint+0x64e>
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	b29b      	uxth	r3, r3
 800a488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a48c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a490:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	441a      	add	r2, r3
 800a49e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a4a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	78db      	ldrb	r3, [r3, #3]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d024      	beq.n	800a508 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4413      	add	r3, r2
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a4d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a4dc:	f083 0320 	eor.w	r3, r3, #32
 800a4e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	441a      	add	r2, r3
 800a4ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a4f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a502:	b29b      	uxth	r3, r3
 800a504:	8013      	strh	r3, [r2, #0]
 800a506:	e01d      	b.n	800a544 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a51a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a51e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	441a      	add	r2, r3
 800a52c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a540:	b29b      	uxth	r3, r3
 800a542:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	b29b      	uxth	r3, r3
 800a552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a55a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	441a      	add	r2, r3
 800a568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a56c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a580:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a584:	4618      	mov	r0, r3
 800a586:	3774      	adds	r7, #116	; 0x74
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a590:	b480      	push	{r7}
 800a592:	b08d      	sub	sp, #52	; 0x34
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	7b1b      	ldrb	r3, [r3, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f040 808e 	bne.w	800a6c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d044      	beq.n	800a636 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	81bb      	strh	r3, [r7, #12]
 800a5ba:	89bb      	ldrh	r3, [r7, #12]
 800a5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d01b      	beq.n	800a5fc <USB_DeactivateEndpoint+0x6c>
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5da:	817b      	strh	r3, [r7, #10]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	441a      	add	r2, r3
 800a5e6:	897b      	ldrh	r3, [r7, #10]
 800a5e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a612:	813b      	strh	r3, [r7, #8]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	441a      	add	r2, r3
 800a61e:	893b      	ldrh	r3, [r7, #8]
 800a620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a630:	b29b      	uxth	r3, r3
 800a632:	8013      	strh	r3, [r2, #0]
 800a634:	e192      	b.n	800a95c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	827b      	strh	r3, [r7, #18]
 800a644:	8a7b      	ldrh	r3, [r7, #18]
 800a646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d01b      	beq.n	800a686 <USB_DeactivateEndpoint+0xf6>
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a664:	823b      	strh	r3, [r7, #16]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	441a      	add	r2, r3
 800a670:	8a3b      	ldrh	r3, [r7, #16]
 800a672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a67a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a682:	b29b      	uxth	r3, r3
 800a684:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69c:	81fb      	strh	r3, [r7, #14]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	441a      	add	r2, r3
 800a6a8:	89fb      	ldrh	r3, [r7, #14]
 800a6aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	8013      	strh	r3, [r2, #0]
 800a6be:	e14d      	b.n	800a95c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f040 80a5 	bne.w	800a814 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	843b      	strh	r3, [r7, #32]
 800a6d8:	8c3b      	ldrh	r3, [r7, #32]
 800a6da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d01b      	beq.n	800a71a <USB_DeactivateEndpoint+0x18a>
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f8:	83fb      	strh	r3, [r7, #30]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	441a      	add	r2, r3
 800a704:	8bfb      	ldrh	r3, [r7, #30]
 800a706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a70a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a70e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a716:	b29b      	uxth	r3, r3
 800a718:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	83bb      	strh	r3, [r7, #28]
 800a728:	8bbb      	ldrh	r3, [r7, #28]
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01b      	beq.n	800a76a <USB_DeactivateEndpoint+0x1da>
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a748:	837b      	strh	r3, [r7, #26]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	441a      	add	r2, r3
 800a754:	8b7b      	ldrh	r3, [r7, #26]
 800a756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a75a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a75e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a762:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a766:	b29b      	uxth	r3, r3
 800a768:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	b29b      	uxth	r3, r3
 800a778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a780:	833b      	strh	r3, [r7, #24]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	441a      	add	r2, r3
 800a78c:	8b3b      	ldrh	r3, [r7, #24]
 800a78e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a79a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7b8:	82fb      	strh	r3, [r7, #22]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	441a      	add	r2, r3
 800a7c4:	8afb      	ldrh	r3, [r7, #22]
 800a7c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7f0:	82bb      	strh	r3, [r7, #20]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	441a      	add	r2, r3
 800a7fc:	8abb      	ldrh	r3, [r7, #20]
 800a7fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a80e:	b29b      	uxth	r3, r3
 800a810:	8013      	strh	r3, [r2, #0]
 800a812:	e0a3      	b.n	800a95c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01b      	beq.n	800a864 <USB_DeactivateEndpoint+0x2d4>
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	b29b      	uxth	r3, r3
 800a83a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a83e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a842:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	441a      	add	r2, r3
 800a84e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a860:	b29b      	uxth	r3, r3
 800a862:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a872:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01b      	beq.n	800a8b4 <USB_DeactivateEndpoint+0x324>
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	b29b      	uxth	r3, r3
 800a88a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a892:	853b      	strh	r3, [r7, #40]	; 0x28
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	441a      	add	r2, r3
 800a89e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	441a      	add	r2, r3
 800a8d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a902:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	441a      	add	r2, r3
 800a90e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a920:	b29b      	uxth	r3, r3
 800a922:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	441a      	add	r2, r3
 800a946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a94c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a958:	b29b      	uxth	r3, r3
 800a95a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3734      	adds	r7, #52	; 0x34
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b0c2      	sub	sp, #264	; 0x108
 800a96e:	af00      	add	r7, sp, #0
 800a970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a978:	6018      	str	r0, [r3, #0]
 800a97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a982:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	785b      	ldrb	r3, [r3, #1]
 800a990:	2b01      	cmp	r3, #1
 800a992:	f040 867b 	bne.w	800b68c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699a      	ldr	r2, [r3, #24]
 800a9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d908      	bls.n	800a9c4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a9c2:	e007      	b.n	800a9d4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	7b1b      	ldrb	r3, [r3, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d13a      	bne.n	800aa5a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6959      	ldr	r1, [r3, #20]
 800a9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	88da      	ldrh	r2, [r3, #6]
 800a9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa0a:	6800      	ldr	r0, [r0, #0]
 800aa0c:	f001 fc11 	bl	800c232 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	613b      	str	r3, [r7, #16]
 800aa1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	4413      	add	r3, r2
 800aa32:	613b      	str	r3, [r7, #16]
 800aa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	011a      	lsls	r2, r3, #4
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	4413      	add	r3, r2
 800aa46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	801a      	strh	r2, [r3, #0]
 800aa56:	f000 bde3 	b.w	800b620 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800aa5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	78db      	ldrb	r3, [r3, #3]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	f040 843a 	bne.w	800b2e0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800aa6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6a1a      	ldr	r2, [r3, #32]
 800aa78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	f240 83b7 	bls.w	800b1f8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aa8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	881b      	ldrh	r3, [r3, #0]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800aab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	441a      	add	r2, r3
 800aace:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aada:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800aae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6a1a      	ldr	r2, [r3, #32]
 800aaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf6:	1ad2      	subs	r2, r2, r3
 800aaf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aafc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 81b3 	beq.w	800ae92 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	633b      	str	r3, [r7, #48]	; 0x30
 800ab38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	785b      	ldrb	r3, [r3, #1]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d16d      	bne.n	800ac24 <USB_EPStartXfer+0x2ba>
 800ab48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	461a      	mov	r2, r3
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	4413      	add	r3, r2
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	011a      	lsls	r2, r3, #4
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab82:	627b      	str	r3, [r7, #36]	; 0x24
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d112      	bne.n	800abb2 <USB_EPStartXfer+0x248>
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	881b      	ldrh	r3, [r3, #0]
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	801a      	strh	r2, [r3, #0]
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abaa:	b29a      	uxth	r2, r3
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	801a      	strh	r2, [r3, #0]
 800abb0:	e05d      	b.n	800ac6e <USB_EPStartXfer+0x304>
 800abb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb6:	2b3e      	cmp	r3, #62	; 0x3e
 800abb8:	d817      	bhi.n	800abea <USB_EPStartXfer+0x280>
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	085b      	lsrs	r3, r3, #1
 800abc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <USB_EPStartXfer+0x270>
 800abd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800abd4:	3301      	adds	r3, #1
 800abd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800abda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800abde:	b29b      	uxth	r3, r3
 800abe0:	029b      	lsls	r3, r3, #10
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	801a      	strh	r2, [r3, #0]
 800abe8:	e041      	b.n	800ac6e <USB_EPStartXfer+0x304>
 800abea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abee:	095b      	lsrs	r3, r3, #5
 800abf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf8:	f003 031f 	and.w	r3, r3, #31
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d104      	bne.n	800ac0a <USB_EPStartXfer+0x2a0>
 800ac00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ac04:	3b01      	subs	r3, #1
 800ac06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	029b      	lsls	r3, r3, #10
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac20:	801a      	strh	r2, [r3, #0]
 800ac22:	e024      	b.n	800ac6e <USB_EPStartXfer+0x304>
 800ac24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	785b      	ldrb	r3, [r3, #1]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d11c      	bne.n	800ac6e <USB_EPStartXfer+0x304>
 800ac34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	4413      	add	r3, r2
 800ac4a:	633b      	str	r3, [r7, #48]	; 0x30
 800ac4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	011a      	lsls	r2, r3, #4
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	895b      	ldrh	r3, [r3, #10]
 800ac7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6959      	ldr	r1, [r3, #20]
 800ac8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac9c:	6800      	ldr	r0, [r0, #0]
 800ac9e:	f001 fac8 	bl	800c232 <USB_WritePMA>
            ep->xfer_buff += len;
 800aca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	695a      	ldr	r2, [r3, #20]
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb2:	441a      	add	r2, r3
 800acb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800acc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6a1a      	ldr	r2, [r3, #32]
 800accc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d90f      	bls.n	800acfc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800acdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6a1a      	ldr	r2, [r3, #32]
 800ace8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acec:	1ad2      	subs	r2, r2, r3
 800acee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	621a      	str	r2, [r3, #32]
 800acfa:	e00e      	b.n	800ad1a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800acfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ad0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2200      	movs	r2, #0
 800ad18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	785b      	ldrb	r3, [r3, #1]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d16d      	bne.n	800ae06 <USB_EPStartXfer+0x49c>
 800ad2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	461a      	mov	r2, r3
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	61bb      	str	r3, [r7, #24]
 800ad4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	011a      	lsls	r2, r3, #4
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad64:	617b      	str	r3, [r7, #20]
 800ad66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d112      	bne.n	800ad94 <USB_EPStartXfer+0x42a>
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	801a      	strh	r2, [r3, #0]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	801a      	strh	r2, [r3, #0]
 800ad92:	e063      	b.n	800ae5c <USB_EPStartXfer+0x4f2>
 800ad94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad98:	2b3e      	cmp	r3, #62	; 0x3e
 800ad9a:	d817      	bhi.n	800adcc <USB_EPStartXfer+0x462>
 800ad9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada0:	085b      	lsrs	r3, r3, #1
 800ada2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ada6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d004      	beq.n	800adbc <USB_EPStartXfer+0x452>
 800adb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adb6:	3301      	adds	r3, #1
 800adb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800adbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	029b      	lsls	r3, r3, #10
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	801a      	strh	r2, [r3, #0]
 800adca:	e047      	b.n	800ae5c <USB_EPStartXfer+0x4f2>
 800adcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add0:	095b      	lsrs	r3, r3, #5
 800add2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800add6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adda:	f003 031f 	and.w	r3, r3, #31
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d104      	bne.n	800adec <USB_EPStartXfer+0x482>
 800ade2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ade6:	3b01      	subs	r3, #1
 800ade8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800adec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	029b      	lsls	r3, r3, #10
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	801a      	strh	r2, [r3, #0]
 800ae04:	e02a      	b.n	800ae5c <USB_EPStartXfer+0x4f2>
 800ae06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	785b      	ldrb	r3, [r3, #1]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d122      	bne.n	800ae5c <USB_EPStartXfer+0x4f2>
 800ae16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	623b      	str	r3, [r7, #32]
 800ae22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	461a      	mov	r2, r3
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	4413      	add	r3, r2
 800ae38:	623b      	str	r3, [r7, #32]
 800ae3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	011a      	lsls	r2, r3, #4
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	891b      	ldrh	r3, [r3, #8]
 800ae68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6959      	ldr	r1, [r3, #20]
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae8a:	6800      	ldr	r0, [r0, #0]
 800ae8c:	f001 f9d1 	bl	800c232 <USB_WritePMA>
 800ae90:	e3c6      	b.n	800b620 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	785b      	ldrb	r3, [r3, #1]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d16d      	bne.n	800af7e <USB_EPStartXfer+0x614>
 800aea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	64bb      	str	r3, [r7, #72]	; 0x48
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	461a      	mov	r2, r3
 800aec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aec2:	4413      	add	r3, r2
 800aec4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	011a      	lsls	r2, r3, #4
 800aed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aed6:	4413      	add	r3, r2
 800aed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aedc:	647b      	str	r3, [r7, #68]	; 0x44
 800aede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d112      	bne.n	800af0c <USB_EPStartXfer+0x5a2>
 800aee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef4:	801a      	strh	r2, [r3, #0]
 800aef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af04:	b29a      	uxth	r2, r3
 800af06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af08:	801a      	strh	r2, [r3, #0]
 800af0a:	e063      	b.n	800afd4 <USB_EPStartXfer+0x66a>
 800af0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af10:	2b3e      	cmp	r3, #62	; 0x3e
 800af12:	d817      	bhi.n	800af44 <USB_EPStartXfer+0x5da>
 800af14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af18:	085b      	lsrs	r3, r3, #1
 800af1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d004      	beq.n	800af34 <USB_EPStartXfer+0x5ca>
 800af2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af2e:	3301      	adds	r3, #1
 800af30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af38:	b29b      	uxth	r3, r3
 800af3a:	029b      	lsls	r3, r3, #10
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af40:	801a      	strh	r2, [r3, #0]
 800af42:	e047      	b.n	800afd4 <USB_EPStartXfer+0x66a>
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	095b      	lsrs	r3, r3, #5
 800af4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af52:	f003 031f 	and.w	r3, r3, #31
 800af56:	2b00      	cmp	r3, #0
 800af58:	d104      	bne.n	800af64 <USB_EPStartXfer+0x5fa>
 800af5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af5e:	3b01      	subs	r3, #1
 800af60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af68:	b29b      	uxth	r3, r3
 800af6a:	029b      	lsls	r3, r3, #10
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af76:	b29a      	uxth	r2, r3
 800af78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af7a:	801a      	strh	r2, [r3, #0]
 800af7c:	e02a      	b.n	800afd4 <USB_EPStartXfer+0x66a>
 800af7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	785b      	ldrb	r3, [r3, #1]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d122      	bne.n	800afd4 <USB_EPStartXfer+0x66a>
 800af8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	653b      	str	r3, [r7, #80]	; 0x50
 800af9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	461a      	mov	r2, r3
 800afac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afae:	4413      	add	r3, r2
 800afb0:	653b      	str	r3, [r7, #80]	; 0x50
 800afb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	011a      	lsls	r2, r3, #4
 800afc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc2:	4413      	add	r3, r2
 800afc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800afc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afce:	b29a      	uxth	r2, r3
 800afd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800afd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	891b      	ldrh	r3, [r3, #8]
 800afe0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	6959      	ldr	r1, [r3, #20]
 800aff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800affa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800affe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b002:	6800      	ldr	r0, [r0, #0]
 800b004:	f001 f915 	bl	800c232 <USB_WritePMA>
            ep->xfer_buff += len;
 800b008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	695a      	ldr	r2, [r3, #20]
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b018:	441a      	add	r2, r3
 800b01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6a1a      	ldr	r2, [r3, #32]
 800b032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d90f      	bls.n	800b062 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6a1a      	ldr	r2, [r3, #32]
 800b04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b052:	1ad2      	subs	r2, r2, r3
 800b054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	621a      	str	r2, [r3, #32]
 800b060:	e00e      	b.n	800b080 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2200      	movs	r2, #0
 800b07e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	643b      	str	r3, [r7, #64]	; 0x40
 800b08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	785b      	ldrb	r3, [r3, #1]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d16d      	bne.n	800b178 <USB_EPStartXfer+0x80e>
 800b09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	4413      	add	r3, r2
 800b0be:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	011a      	lsls	r2, r3, #4
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b0d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d112      	bne.n	800b106 <USB_EPStartXfer+0x79c>
 800b0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ee:	801a      	strh	r2, [r3, #0]
 800b0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f2:	881b      	ldrh	r3, [r3, #0]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b102:	801a      	strh	r2, [r3, #0]
 800b104:	e05d      	b.n	800b1c2 <USB_EPStartXfer+0x858>
 800b106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10a:	2b3e      	cmp	r3, #62	; 0x3e
 800b10c:	d817      	bhi.n	800b13e <USB_EPStartXfer+0x7d4>
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b112:	085b      	lsrs	r3, r3, #1
 800b114:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d004      	beq.n	800b12e <USB_EPStartXfer+0x7c4>
 800b124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b128:	3301      	adds	r3, #1
 800b12a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b132:	b29b      	uxth	r3, r3
 800b134:	029b      	lsls	r3, r3, #10
 800b136:	b29a      	uxth	r2, r3
 800b138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13a:	801a      	strh	r2, [r3, #0]
 800b13c:	e041      	b.n	800b1c2 <USB_EPStartXfer+0x858>
 800b13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b142:	095b      	lsrs	r3, r3, #5
 800b144:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14c:	f003 031f 	and.w	r3, r3, #31
 800b150:	2b00      	cmp	r3, #0
 800b152:	d104      	bne.n	800b15e <USB_EPStartXfer+0x7f4>
 800b154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b158:	3b01      	subs	r3, #1
 800b15a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b162:	b29b      	uxth	r3, r3
 800b164:	029b      	lsls	r3, r3, #10
 800b166:	b29b      	uxth	r3, r3
 800b168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b170:	b29a      	uxth	r2, r3
 800b172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b174:	801a      	strh	r2, [r3, #0]
 800b176:	e024      	b.n	800b1c2 <USB_EPStartXfer+0x858>
 800b178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d11c      	bne.n	800b1c2 <USB_EPStartXfer+0x858>
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b196:	b29b      	uxth	r3, r3
 800b198:	461a      	mov	r2, r3
 800b19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19c:	4413      	add	r3, r2
 800b19e:	643b      	str	r3, [r7, #64]	; 0x40
 800b1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	011a      	lsls	r2, r3, #4
 800b1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	895b      	ldrh	r3, [r3, #10]
 800b1ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6959      	ldr	r1, [r3, #20]
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b1e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b1ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b1f0:	6800      	ldr	r0, [r0, #0]
 800b1f2:	f001 f81e 	bl	800c232 <USB_WritePMA>
 800b1f6:	e213      	b.n	800b620 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6a1b      	ldr	r3, [r3, #32]
 800b204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	b29b      	uxth	r3, r3
 800b226:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b22e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	441a      	add	r2, r3
 800b24c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b25c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b260:	b29b      	uxth	r3, r3
 800b262:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b27e:	b29b      	uxth	r3, r3
 800b280:	461a      	mov	r2, r3
 800b282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b284:	4413      	add	r3, r2
 800b286:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	011a      	lsls	r2, r3, #4
 800b296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b298:	4413      	add	r3, r2
 800b29a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b29e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	891b      	ldrh	r3, [r3, #8]
 800b2b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6959      	ldr	r1, [r3, #20]
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b2d8:	6800      	ldr	r0, [r0, #0]
 800b2da:	f000 ffaa 	bl	800c232 <USB_WritePMA>
 800b2de:	e19f      	b.n	800b620 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6a1a      	ldr	r2, [r3, #32]
 800b2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f0:	1ad2      	subs	r2, r2, r3
 800b2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 80bc 	beq.w	800b49e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	673b      	str	r3, [r7, #112]	; 0x70
 800b332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d16d      	bne.n	800b41e <USB_EPStartXfer+0xab4>
 800b342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b362:	4413      	add	r3, r2
 800b364:	66bb      	str	r3, [r7, #104]	; 0x68
 800b366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b36a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	011a      	lsls	r2, r3, #4
 800b374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b376:	4413      	add	r3, r2
 800b378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b37c:	667b      	str	r3, [r7, #100]	; 0x64
 800b37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b382:	2b00      	cmp	r3, #0
 800b384:	d112      	bne.n	800b3ac <USB_EPStartXfer+0xa42>
 800b386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b390:	b29a      	uxth	r2, r3
 800b392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b394:	801a      	strh	r2, [r3, #0]
 800b396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3a8:	801a      	strh	r2, [r3, #0]
 800b3aa:	e05d      	b.n	800b468 <USB_EPStartXfer+0xafe>
 800b3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b0:	2b3e      	cmp	r3, #62	; 0x3e
 800b3b2:	d817      	bhi.n	800b3e4 <USB_EPStartXfer+0xa7a>
 800b3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b8:	085b      	lsrs	r3, r3, #1
 800b3ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <USB_EPStartXfer+0xa6a>
 800b3ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	029b      	lsls	r3, r3, #10
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3e0:	801a      	strh	r2, [r3, #0]
 800b3e2:	e041      	b.n	800b468 <USB_EPStartXfer+0xafe>
 800b3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e8:	095b      	lsrs	r3, r3, #5
 800b3ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f2:	f003 031f 	and.w	r3, r3, #31
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d104      	bne.n	800b404 <USB_EPStartXfer+0xa9a>
 800b3fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b3fe:	3b01      	subs	r3, #1
 800b400:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b408:	b29b      	uxth	r3, r3
 800b40a:	029b      	lsls	r3, r3, #10
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b416:	b29a      	uxth	r2, r3
 800b418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b41a:	801a      	strh	r2, [r3, #0]
 800b41c:	e024      	b.n	800b468 <USB_EPStartXfer+0xafe>
 800b41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	785b      	ldrb	r3, [r3, #1]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d11c      	bne.n	800b468 <USB_EPStartXfer+0xafe>
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	461a      	mov	r2, r3
 800b440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b442:	4413      	add	r3, r2
 800b444:	673b      	str	r3, [r7, #112]	; 0x70
 800b446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	011a      	lsls	r2, r3, #4
 800b454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b456:	4413      	add	r3, r2
 800b458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b45c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b462:	b29a      	uxth	r2, r3
 800b464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b466:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	895b      	ldrh	r3, [r3, #10]
 800b474:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6959      	ldr	r1, [r3, #20]
 800b484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b488:	b29b      	uxth	r3, r3
 800b48a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b48e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b492:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b496:	6800      	ldr	r0, [r0, #0]
 800b498:	f000 fecb 	bl	800c232 <USB_WritePMA>
 800b49c:	e0c0      	b.n	800b620 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	785b      	ldrb	r3, [r3, #1]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d16d      	bne.n	800b58a <USB_EPStartXfer+0xc20>
 800b4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4ce:	4413      	add	r3, r2
 800b4d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	011a      	lsls	r2, r3, #4
 800b4e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d112      	bne.n	800b518 <USB_EPStartXfer+0xbae>
 800b4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b500:	801a      	strh	r2, [r3, #0]
 800b502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	b29b      	uxth	r3, r3
 800b508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b50c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b510:	b29a      	uxth	r2, r3
 800b512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	e069      	b.n	800b5ec <USB_EPStartXfer+0xc82>
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51c:	2b3e      	cmp	r3, #62	; 0x3e
 800b51e:	d817      	bhi.n	800b550 <USB_EPStartXfer+0xbe6>
 800b520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b524:	085b      	lsrs	r3, r3, #1
 800b526:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d004      	beq.n	800b540 <USB_EPStartXfer+0xbd6>
 800b536:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b53a:	3301      	adds	r3, #1
 800b53c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b544:	b29b      	uxth	r3, r3
 800b546:	029b      	lsls	r3, r3, #10
 800b548:	b29a      	uxth	r2, r3
 800b54a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b54c:	801a      	strh	r2, [r3, #0]
 800b54e:	e04d      	b.n	800b5ec <USB_EPStartXfer+0xc82>
 800b550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b554:	095b      	lsrs	r3, r3, #5
 800b556:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55e:	f003 031f 	and.w	r3, r3, #31
 800b562:	2b00      	cmp	r3, #0
 800b564:	d104      	bne.n	800b570 <USB_EPStartXfer+0xc06>
 800b566:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b56a:	3b01      	subs	r3, #1
 800b56c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b570:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b574:	b29b      	uxth	r3, r3
 800b576:	029b      	lsls	r3, r3, #10
 800b578:	b29b      	uxth	r3, r3
 800b57a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b57e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b582:	b29a      	uxth	r2, r3
 800b584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b586:	801a      	strh	r2, [r3, #0]
 800b588:	e030      	b.n	800b5ec <USB_EPStartXfer+0xc82>
 800b58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	785b      	ldrb	r3, [r3, #1]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d128      	bne.n	800b5ec <USB_EPStartXfer+0xc82>
 800b59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5be:	4413      	add	r3, r2
 800b5c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	011a      	lsls	r2, r3, #4
 800b5d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b5dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	891b      	ldrh	r3, [r3, #8]
 800b5f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6959      	ldr	r1, [r3, #20]
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b612:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b616:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b61a:	6800      	ldr	r0, [r0, #0]
 800b61c:	f000 fe09 	bl	800c232 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b646:	817b      	strh	r3, [r7, #10]
 800b648:	897b      	ldrh	r3, [r7, #10]
 800b64a:	f083 0310 	eor.w	r3, r3, #16
 800b64e:	817b      	strh	r3, [r7, #10]
 800b650:	897b      	ldrh	r3, [r7, #10]
 800b652:	f083 0320 	eor.w	r3, r3, #32
 800b656:	817b      	strh	r3, [r7, #10]
 800b658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	441a      	add	r2, r3
 800b672:	897b      	ldrh	r3, [r7, #10]
 800b674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b67c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b684:	b29b      	uxth	r3, r3
 800b686:	8013      	strh	r3, [r2, #0]
 800b688:	f000 bc9f 	b.w	800bfca <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	7b1b      	ldrb	r3, [r3, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f040 80ae 	bne.w	800b7fa <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	699a      	ldr	r2, [r3, #24]
 800b6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d917      	bls.n	800b6ea <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	699a      	ldr	r2, [r3, #24]
 800b6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6da:	1ad2      	subs	r2, r2, r3
 800b6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	619a      	str	r2, [r3, #24]
 800b6e8:	e00e      	b.n	800b708 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2200      	movs	r2, #0
 800b706:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b724:	b29b      	uxth	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b72c:	4413      	add	r3, r2
 800b72e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	011a      	lsls	r2, r3, #4
 800b740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b744:	4413      	add	r3, r2
 800b746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b74a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b752:	2b00      	cmp	r3, #0
 800b754:	d116      	bne.n	800b784 <USB_EPStartXfer+0xe1a>
 800b756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b762:	b29a      	uxth	r2, r3
 800b764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b768:	801a      	strh	r2, [r3, #0]
 800b76a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	b29b      	uxth	r3, r3
 800b772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b780:	801a      	strh	r2, [r3, #0]
 800b782:	e3e8      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
 800b784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b788:	2b3e      	cmp	r3, #62	; 0x3e
 800b78a:	d818      	bhi.n	800b7be <USB_EPStartXfer+0xe54>
 800b78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b790:	085b      	lsrs	r3, r3, #1
 800b792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <USB_EPStartXfer+0xe42>
 800b7a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	029b      	lsls	r3, r3, #10
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7ba:	801a      	strh	r2, [r3, #0]
 800b7bc:	e3cb      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	095b      	lsrs	r3, r3, #5
 800b7c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7cc:	f003 031f 	and.w	r3, r3, #31
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d104      	bne.n	800b7de <USB_EPStartXfer+0xe74>
 800b7d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	029b      	lsls	r3, r3, #10
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7f6:	801a      	strh	r2, [r3, #0]
 800b7f8:	e3ad      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	78db      	ldrb	r3, [r3, #3]
 800b806:	2b02      	cmp	r3, #2
 800b808:	f040 8200 	bne.w	800bc0c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	785b      	ldrb	r3, [r3, #1]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f040 8091 	bne.w	800b940 <USB_EPStartXfer+0xfd6>
 800b81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	461a      	mov	r2, r3
 800b83e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b842:	4413      	add	r3, r2
 800b844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	011a      	lsls	r2, r3, #4
 800b856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b85a:	4413      	add	r3, r2
 800b85c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d116      	bne.n	800b8a2 <USB_EPStartXfer+0xf38>
 800b874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b878:	881b      	ldrh	r3, [r3, #0]
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b880:	b29a      	uxth	r2, r3
 800b882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b886:	801a      	strh	r2, [r3, #0]
 800b888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b898:	b29a      	uxth	r2, r3
 800b89a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b89e:	801a      	strh	r2, [r3, #0]
 800b8a0:	e083      	b.n	800b9aa <USB_EPStartXfer+0x1040>
 800b8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	2b3e      	cmp	r3, #62	; 0x3e
 800b8b0:	d820      	bhi.n	800b8f4 <USB_EPStartXfer+0xf8a>
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	085b      	lsrs	r3, r3, #1
 800b8c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	f003 0301 	and.w	r3, r3, #1
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d004      	beq.n	800b8e2 <USB_EPStartXfer+0xf78>
 800b8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8dc:	3301      	adds	r3, #1
 800b8de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	029b      	lsls	r3, r3, #10
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8f0:	801a      	strh	r2, [r3, #0]
 800b8f2:	e05a      	b.n	800b9aa <USB_EPStartXfer+0x1040>
 800b8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	095b      	lsrs	r3, r3, #5
 800b902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	f003 031f 	and.w	r3, r3, #31
 800b916:	2b00      	cmp	r3, #0
 800b918:	d104      	bne.n	800b924 <USB_EPStartXfer+0xfba>
 800b91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b91e:	3b01      	subs	r3, #1
 800b920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b928:	b29b      	uxth	r3, r3
 800b92a:	029b      	lsls	r3, r3, #10
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b936:	b29a      	uxth	r2, r3
 800b938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b93c:	801a      	strh	r2, [r3, #0]
 800b93e:	e034      	b.n	800b9aa <USB_EPStartXfer+0x1040>
 800b940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d12c      	bne.n	800b9aa <USB_EPStartXfer+0x1040>
 800b950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	461a      	mov	r2, r3
 800b970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b974:	4413      	add	r3, r2
 800b976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	011a      	lsls	r2, r3, #4
 800b988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b98c:	4413      	add	r3, r2
 800b98e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9a8:	801a      	strh	r2, [r3, #0]
 800b9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	785b      	ldrb	r3, [r3, #1]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f040 8091 	bne.w	800baec <USB_EPStartXfer+0x1182>
 800b9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	011a      	lsls	r2, r3, #4
 800ba02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba06:	4413      	add	r3, r2
 800ba08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d116      	bne.n	800ba4e <USB_EPStartXfer+0x10e4>
 800ba20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba32:	801a      	strh	r2, [r3, #0]
 800ba34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba4a:	801a      	strh	r2, [r3, #0]
 800ba4c:	e07c      	b.n	800bb48 <USB_EPStartXfer+0x11de>
 800ba4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	2b3e      	cmp	r3, #62	; 0x3e
 800ba5c:	d820      	bhi.n	800baa0 <USB_EPStartXfer+0x1136>
 800ba5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	085b      	lsrs	r3, r3, #1
 800ba6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d004      	beq.n	800ba8e <USB_EPStartXfer+0x1124>
 800ba84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba88:	3301      	adds	r3, #1
 800ba8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	029b      	lsls	r3, r3, #10
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba9c:	801a      	strh	r2, [r3, #0]
 800ba9e:	e053      	b.n	800bb48 <USB_EPStartXfer+0x11de>
 800baa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	095b      	lsrs	r3, r3, #5
 800baae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	f003 031f 	and.w	r3, r3, #31
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d104      	bne.n	800bad0 <USB_EPStartXfer+0x1166>
 800bac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baca:	3b01      	subs	r3, #1
 800bacc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	029b      	lsls	r3, r3, #10
 800bad8:	b29b      	uxth	r3, r3
 800bada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bae8:	801a      	strh	r2, [r3, #0]
 800baea:	e02d      	b.n	800bb48 <USB_EPStartXfer+0x11de>
 800baec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	785b      	ldrb	r3, [r3, #1]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d125      	bne.n	800bb48 <USB_EPStartXfer+0x11de>
 800bafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb12:	4413      	add	r3, r2
 800bb14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	011a      	lsls	r2, r3, #4
 800bb26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bb48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 81fe 	beq.w	800bf56 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bb5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d005      	beq.n	800bb92 <USB_EPStartXfer+0x1228>
 800bb86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10d      	bne.n	800bbae <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bb92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bb96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f040 81db 	bne.w	800bf56 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bba0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f040 81d4 	bne.w	800bf56 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbd4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800bbd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	441a      	add	r2, r3
 800bbf2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800bbf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	8013      	strh	r3, [r2, #0]
 800bc0a:	e1a4      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bc0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	78db      	ldrb	r3, [r3, #3]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	f040 819a 	bne.w	800bf52 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bc1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	699a      	ldr	r2, [r3, #24]
 800bc2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d917      	bls.n	800bc6a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800bc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800bc4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	699a      	ldr	r2, [r3, #24]
 800bc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5a:	1ad2      	subs	r2, r2, r3
 800bc5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	619a      	str	r2, [r3, #24]
 800bc68:	e00e      	b.n	800bc88 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800bc6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800bc7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2200      	movs	r2, #0
 800bc86:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bc88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	785b      	ldrb	r3, [r3, #1]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d178      	bne.n	800bd8a <USB_EPStartXfer+0x1420>
 800bc98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bcbc:	4413      	add	r3, r2
 800bcbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	011a      	lsls	r2, r3, #4
 800bcd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bcda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d116      	bne.n	800bd14 <USB_EPStartXfer+0x13aa>
 800bce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcf8:	801a      	strh	r2, [r3, #0]
 800bcfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd10:	801a      	strh	r2, [r3, #0]
 800bd12:	e06b      	b.n	800bdec <USB_EPStartXfer+0x1482>
 800bd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd18:	2b3e      	cmp	r3, #62	; 0x3e
 800bd1a:	d818      	bhi.n	800bd4e <USB_EPStartXfer+0x13e4>
 800bd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd20:	085b      	lsrs	r3, r3, #1
 800bd22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d004      	beq.n	800bd3c <USB_EPStartXfer+0x13d2>
 800bd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd36:	3301      	adds	r3, #1
 800bd38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	029b      	lsls	r3, r3, #10
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd4a:	801a      	strh	r2, [r3, #0]
 800bd4c:	e04e      	b.n	800bdec <USB_EPStartXfer+0x1482>
 800bd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd52:	095b      	lsrs	r3, r3, #5
 800bd54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5c:	f003 031f 	and.w	r3, r3, #31
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d104      	bne.n	800bd6e <USB_EPStartXfer+0x1404>
 800bd64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	029b      	lsls	r3, r3, #10
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd86:	801a      	strh	r2, [r3, #0]
 800bd88:	e030      	b.n	800bdec <USB_EPStartXfer+0x1482>
 800bd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	785b      	ldrb	r3, [r3, #1]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d128      	bne.n	800bdec <USB_EPStartXfer+0x1482>
 800bd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	011a      	lsls	r2, r3, #4
 800bdd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bdea:	801a      	strh	r2, [r3, #0]
 800bdec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	785b      	ldrb	r3, [r3, #1]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d178      	bne.n	800befc <USB_EPStartXfer+0x1592>
 800be0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be26:	b29b      	uxth	r3, r3
 800be28:	461a      	mov	r2, r3
 800be2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be2e:	4413      	add	r3, r2
 800be30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	011a      	lsls	r2, r3, #4
 800be42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be46:	4413      	add	r3, r2
 800be48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be54:	2b00      	cmp	r3, #0
 800be56:	d116      	bne.n	800be86 <USB_EPStartXfer+0x151c>
 800be58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be5c:	881b      	ldrh	r3, [r3, #0]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be64:	b29a      	uxth	r2, r3
 800be66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be6a:	801a      	strh	r2, [r3, #0]
 800be6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	b29b      	uxth	r3, r3
 800be74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be82:	801a      	strh	r2, [r3, #0]
 800be84:	e067      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
 800be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be8a:	2b3e      	cmp	r3, #62	; 0x3e
 800be8c:	d818      	bhi.n	800bec0 <USB_EPStartXfer+0x1556>
 800be8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d004      	beq.n	800beae <USB_EPStartXfer+0x1544>
 800bea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bea8:	3301      	adds	r3, #1
 800beaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800beae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	029b      	lsls	r3, r3, #10
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bebc:	801a      	strh	r2, [r3, #0]
 800bebe:	e04a      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec4:	095b      	lsrs	r3, r3, #5
 800bec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800beca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bece:	f003 031f 	and.w	r3, r3, #31
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d104      	bne.n	800bee0 <USB_EPStartXfer+0x1576>
 800bed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800beda:	3b01      	subs	r3, #1
 800bedc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	029b      	lsls	r3, r3, #10
 800bee8:	b29b      	uxth	r3, r3
 800beea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bef8:	801a      	strh	r2, [r3, #0]
 800befa:	e02c      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
 800befc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d124      	bne.n	800bf56 <USB_EPStartXfer+0x15ec>
 800bf0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf22:	4413      	add	r3, r2
 800bf24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	011a      	lsls	r2, r3, #4
 800bf36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bf40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf4e:	801a      	strh	r2, [r3, #0]
 800bf50:	e001      	b.n	800bf56 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e03a      	b.n	800bfcc <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bf80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bf84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bf88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bf8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bf90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bf94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bf98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	441a      	add	r2, r3
 800bfb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bfb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b085      	sub	sp, #20
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	785b      	ldrb	r3, [r3, #1]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d020      	beq.n	800c02a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bffe:	81bb      	strh	r3, [r7, #12]
 800c000:	89bb      	ldrh	r3, [r7, #12]
 800c002:	f083 0310 	eor.w	r3, r3, #16
 800c006:	81bb      	strh	r3, [r7, #12]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	441a      	add	r2, r3
 800c012:	89bb      	ldrh	r3, [r7, #12]
 800c014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c01c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c024:	b29b      	uxth	r3, r3
 800c026:	8013      	strh	r3, [r2, #0]
 800c028:	e01f      	b.n	800c06a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	b29b      	uxth	r3, r3
 800c038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c03c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c040:	81fb      	strh	r3, [r7, #14]
 800c042:	89fb      	ldrh	r3, [r7, #14]
 800c044:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c048:	81fb      	strh	r3, [r7, #14]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	441a      	add	r2, r3
 800c054:	89fb      	ldrh	r3, [r7, #14]
 800c056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c05a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c05e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c066:	b29b      	uxth	r3, r3
 800c068:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	7b1b      	ldrb	r3, [r3, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f040 809d 	bne.w	800c1c6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	785b      	ldrb	r3, [r3, #1]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d04c      	beq.n	800c12e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	881b      	ldrh	r3, [r3, #0]
 800c0a0:	823b      	strh	r3, [r7, #16]
 800c0a2:	8a3b      	ldrh	r3, [r7, #16]
 800c0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d01b      	beq.n	800c0e4 <USB_EPClearStall+0x6c>
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0c2:	81fb      	strh	r3, [r7, #14]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	441a      	add	r2, r3
 800c0ce:	89fb      	ldrh	r3, [r7, #14]
 800c0d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	78db      	ldrb	r3, [r3, #3]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d06c      	beq.n	800c1c6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c102:	81bb      	strh	r3, [r7, #12]
 800c104:	89bb      	ldrh	r3, [r7, #12]
 800c106:	f083 0320 	eor.w	r3, r3, #32
 800c10a:	81bb      	strh	r3, [r7, #12]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	441a      	add	r2, r3
 800c116:	89bb      	ldrh	r3, [r7, #12]
 800c118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c11c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c128:	b29b      	uxth	r3, r3
 800c12a:	8013      	strh	r3, [r2, #0]
 800c12c:	e04b      	b.n	800c1c6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	82fb      	strh	r3, [r7, #22]
 800c13c:	8afb      	ldrh	r3, [r7, #22]
 800c13e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d01b      	beq.n	800c17e <USB_EPClearStall+0x106>
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	b29b      	uxth	r3, r3
 800c154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c15c:	82bb      	strh	r3, [r7, #20]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	441a      	add	r2, r3
 800c168:	8abb      	ldrh	r3, [r7, #20]
 800c16a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c16e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c194:	827b      	strh	r3, [r7, #18]
 800c196:	8a7b      	ldrh	r3, [r7, #18]
 800c198:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c19c:	827b      	strh	r3, [r7, #18]
 800c19e:	8a7b      	ldrh	r3, [r7, #18]
 800c1a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c1a4:	827b      	strh	r3, [r7, #18]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	441a      	add	r2, r3
 800c1b0:	8a7b      	ldrh	r3, [r7, #18]
 800c1b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	371c      	adds	r7, #28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d103      	bne.n	800c1ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2280      	movs	r2, #128	; 0x80
 800c1ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c212:	b480      	push	{r7}
 800c214:	b085      	sub	sp, #20
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c220:	b29b      	uxth	r3, r3
 800c222:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c224:	68fb      	ldr	r3, [r7, #12]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c232:	b480      	push	{r7}
 800c234:	b08d      	sub	sp, #52	; 0x34
 800c236:	af00      	add	r7, sp, #0
 800c238:	60f8      	str	r0, [r7, #12]
 800c23a:	60b9      	str	r1, [r7, #8]
 800c23c:	4611      	mov	r1, r2
 800c23e:	461a      	mov	r2, r3
 800c240:	460b      	mov	r3, r1
 800c242:	80fb      	strh	r3, [r7, #6]
 800c244:	4613      	mov	r3, r2
 800c246:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c248:	88bb      	ldrh	r3, [r7, #4]
 800c24a:	3301      	adds	r3, #1
 800c24c:	085b      	lsrs	r3, r3, #1
 800c24e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c258:	88fb      	ldrh	r3, [r7, #6]
 800c25a:	005a      	lsls	r2, r3, #1
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c264:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c26a:	e01e      	b.n	800c2aa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c274:	3301      	adds	r3, #1
 800c276:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	021b      	lsls	r3, r3, #8
 800c280:	b29b      	uxth	r3, r3
 800c282:	461a      	mov	r2, r3
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	4313      	orrs	r3, r2
 800c288:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	3302      	adds	r3, #2
 800c296:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	3302      	adds	r3, #2
 800c29c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1dd      	bne.n	800c26c <USB_WritePMA+0x3a>
  }
}
 800c2b0:	bf00      	nop
 800c2b2:	bf00      	nop
 800c2b4:	3734      	adds	r7, #52	; 0x34
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c2be:	b480      	push	{r7}
 800c2c0:	b08b      	sub	sp, #44	; 0x2c
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	60f8      	str	r0, [r7, #12]
 800c2c6:	60b9      	str	r1, [r7, #8]
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	80fb      	strh	r3, [r7, #6]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c2d4:	88bb      	ldrh	r3, [r7, #4]
 800c2d6:	085b      	lsrs	r3, r3, #1
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2e4:	88fb      	ldrh	r3, [r7, #6]
 800c2e6:	005a      	lsls	r2, r3, #1
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2f0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f6:	e01b      	b.n	800c330 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	3302      	adds	r3, #2
 800c304:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	3301      	adds	r3, #1
 800c312:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	0a1b      	lsrs	r3, r3, #8
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	3301      	adds	r3, #1
 800c322:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	3302      	adds	r3, #2
 800c328:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	3b01      	subs	r3, #1
 800c32e:	627b      	str	r3, [r7, #36]	; 0x24
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1e0      	bne.n	800c2f8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c336:	88bb      	ldrh	r3, [r7, #4]
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d007      	beq.n	800c352 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	b29b      	uxth	r3, r3
 800c348:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	701a      	strb	r2, [r3, #0]
  }
}
 800c352:	bf00      	nop
 800c354:	372c      	adds	r7, #44	; 0x2c
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	460b      	mov	r3, r1
 800c368:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7c1b      	ldrb	r3, [r3, #16]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d115      	bne.n	800c3a2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c37a:	2202      	movs	r2, #2
 800c37c:	2181      	movs	r1, #129	; 0x81
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f001 fecf 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c38a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c38e:	2202      	movs	r2, #2
 800c390:	2101      	movs	r1, #1
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f001 fec5 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800c3a0:	e012      	b.n	800c3c8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c3a2:	2340      	movs	r3, #64	; 0x40
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	2181      	movs	r1, #129	; 0x81
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f001 feba 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c3b4:	2340      	movs	r3, #64	; 0x40
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f001 feb1 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c3c8:	2308      	movs	r3, #8
 800c3ca:	2203      	movs	r2, #3
 800c3cc:	2182      	movs	r1, #130	; 0x82
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f001 fea7 	bl	800e122 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c3da:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c3de:	f001 ffc9 	bl	800e374 <USBD_static_malloc>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	73fb      	strb	r3, [r7, #15]
 800c3f8:	e026      	b.n	800c448 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c400:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2200      	movs	r2, #0
 800c410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2200      	movs	r2, #0
 800c418:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	7c1b      	ldrb	r3, [r3, #16]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d109      	bne.n	800c438 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c42a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c42e:	2101      	movs	r1, #1
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f001 ff68 	bl	800e306 <USBD_LL_PrepareReceive>
 800c436:	e007      	b.n	800c448 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c43e:	2340      	movs	r3, #64	; 0x40
 800c440:	2101      	movs	r1, #1
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f001 ff5f 	bl	800e306 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c448:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	460b      	mov	r3, r1
 800c45c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c462:	2181      	movs	r1, #129	; 0x81
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f001 fe82 	bl	800e16e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c470:	2101      	movs	r1, #1
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 fe7b 	bl	800e16e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c480:	2182      	movs	r1, #130	; 0x82
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 fe73 	bl	800e16e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00e      	beq.n	800c4b6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f001 ff71 	bl	800e390 <USBD_static_free>
    pdev->pClassData = NULL;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d039      	beq.n	800c55e <USBD_CDC_Setup+0x9e>
 800c4ea:	2b20      	cmp	r3, #32
 800c4ec:	d17f      	bne.n	800c5ee <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	88db      	ldrh	r3, [r3, #6]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d029      	beq.n	800c54a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	b25b      	sxtb	r3, r3
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	da11      	bge.n	800c524 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c50c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	88d2      	ldrh	r2, [r2, #6]
 800c512:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c514:	6939      	ldr	r1, [r7, #16]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	88db      	ldrh	r3, [r3, #6]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f001 fa14 	bl	800d94a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c522:	e06b      	b.n	800c5fc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	785a      	ldrb	r2, [r3, #1]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	88db      	ldrh	r3, [r3, #6]
 800c532:	b2da      	uxtb	r2, r3
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c53a:	6939      	ldr	r1, [r7, #16]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	88db      	ldrh	r3, [r3, #6]
 800c540:	461a      	mov	r2, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f001 fa2f 	bl	800d9a6 <USBD_CtlPrepareRx>
      break;
 800c548:	e058      	b.n	800c5fc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	7850      	ldrb	r0, [r2, #1]
 800c556:	2200      	movs	r2, #0
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	4798      	blx	r3
      break;
 800c55c:	e04e      	b.n	800c5fc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	785b      	ldrb	r3, [r3, #1]
 800c562:	2b0b      	cmp	r3, #11
 800c564:	d02e      	beq.n	800c5c4 <USBD_CDC_Setup+0x104>
 800c566:	2b0b      	cmp	r3, #11
 800c568:	dc38      	bgt.n	800c5dc <USBD_CDC_Setup+0x11c>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <USBD_CDC_Setup+0xb4>
 800c56e:	2b0a      	cmp	r3, #10
 800c570:	d014      	beq.n	800c59c <USBD_CDC_Setup+0xdc>
 800c572:	e033      	b.n	800c5dc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d107      	bne.n	800c58e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c57e:	f107 030c 	add.w	r3, r7, #12
 800c582:	2202      	movs	r2, #2
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f001 f9df 	bl	800d94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c58c:	e02e      	b.n	800c5ec <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f001 f96f 	bl	800d874 <USBD_CtlError>
            ret = USBD_FAIL;
 800c596:	2302      	movs	r3, #2
 800c598:	75fb      	strb	r3, [r7, #23]
          break;
 800c59a:	e027      	b.n	800c5ec <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d107      	bne.n	800c5b6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c5a6:	f107 030f 	add.w	r3, r7, #15
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f001 f9cb 	bl	800d94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c5b4:	e01a      	b.n	800c5ec <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f001 f95b 	bl	800d874 <USBD_CtlError>
            ret = USBD_FAIL;
 800c5be:	2302      	movs	r3, #2
 800c5c0:	75fb      	strb	r3, [r7, #23]
          break;
 800c5c2:	e013      	b.n	800c5ec <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ca:	2b03      	cmp	r3, #3
 800c5cc:	d00d      	beq.n	800c5ea <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c5ce:	6839      	ldr	r1, [r7, #0]
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f001 f94f 	bl	800d874 <USBD_CtlError>
            ret = USBD_FAIL;
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c5da:	e006      	b.n	800c5ea <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f001 f948 	bl	800d874 <USBD_CtlError>
          ret = USBD_FAIL;
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	75fb      	strb	r3, [r7, #23]
          break;
 800c5e8:	e000      	b.n	800c5ec <USBD_CDC_Setup+0x12c>
          break;
 800c5ea:	bf00      	nop
      }
      break;
 800c5ec:	e006      	b.n	800c5fc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f001 f93f 	bl	800d874 <USBD_CtlError>
      ret = USBD_FAIL;
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c5fa:	bf00      	nop
  }

  return ret;
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b084      	sub	sp, #16
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	460b      	mov	r3, r1
 800c610:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c618:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c620:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d03a      	beq.n	800c6a2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c62c:	78fa      	ldrb	r2, [r7, #3]
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	4613      	mov	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	440b      	add	r3, r1
 800c63a:	331c      	adds	r3, #28
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d029      	beq.n	800c696 <USBD_CDC_DataIn+0x90>
 800c642:	78fa      	ldrb	r2, [r7, #3]
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	4613      	mov	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	440b      	add	r3, r1
 800c650:	331c      	adds	r3, #28
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	78f9      	ldrb	r1, [r7, #3]
 800c656:	68b8      	ldr	r0, [r7, #8]
 800c658:	460b      	mov	r3, r1
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	440b      	add	r3, r1
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	4403      	add	r3, r0
 800c662:	3338      	adds	r3, #56	; 0x38
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	fbb2 f1f3 	udiv	r1, r2, r3
 800c66a:	fb01 f303 	mul.w	r3, r1, r3
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d110      	bne.n	800c696 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c674:	78fa      	ldrb	r2, [r7, #3]
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	4613      	mov	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	440b      	add	r3, r1
 800c682:	331c      	adds	r3, #28
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c688:	78f9      	ldrb	r1, [r7, #3]
 800c68a:	2300      	movs	r3, #0
 800c68c:	2200      	movs	r2, #0
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f001 fe16 	bl	800e2c0 <USBD_LL_Transmit>
 800c694:	e003      	b.n	800c69e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e000      	b.n	800c6a4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c6a2:	2302      	movs	r3, #2
  }
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f001 fe41 	bl	800e34c <USBD_LL_GetRxDataSize>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00d      	beq.n	800c6f8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4798      	blx	r3

    return USBD_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e000      	b.n	800c6fa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c6f8:	2302      	movs	r3, #2
  }
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b084      	sub	sp, #16
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c710:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d015      	beq.n	800c748 <USBD_CDC_EP0_RxReady+0x46>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c722:	2bff      	cmp	r3, #255	; 0xff
 800c724:	d010      	beq.n	800c748 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c734:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c73c:	b292      	uxth	r2, r2
 800c73e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	22ff      	movs	r2, #255	; 0xff
 800c744:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2243      	movs	r2, #67	; 0x43
 800c760:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c762:	4b03      	ldr	r3, [pc, #12]	; (800c770 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	20000094 	.word	0x20000094

0800c774 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2243      	movs	r2, #67	; 0x43
 800c780:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c782:	4b03      	ldr	r3, [pc, #12]	; (800c790 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	20000050 	.word	0x20000050

0800c794 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2243      	movs	r2, #67	; 0x43
 800c7a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c7a2:	4b03      	ldr	r3, [pc, #12]	; (800c7b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	200000d8 	.word	0x200000d8

0800c7b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	220a      	movs	r2, #10
 800c7c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c7c2:	4b03      	ldr	r3, [pc, #12]	; (800c7d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	2000000c 	.word	0x2000000c

0800c7d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c7de:	2302      	movs	r3, #2
 800c7e0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d005      	beq.n	800c7f4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c802:	b480      	push	{r7}
 800c804:	b087      	sub	sp, #28
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	4613      	mov	r3, r2
 800c80e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c816:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c820:	88fa      	ldrh	r2, [r7, #6]
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	371c      	adds	r7, #28
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c836:	b480      	push	{r7}
 800c838:	b085      	sub	sp, #20
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c846:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr

0800c85e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c874:	2b00      	cmp	r3, #0
 800c876:	d01c      	beq.n	800c8b2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d115      	bne.n	800c8ae <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2201      	movs	r2, #1
 800c886:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	2181      	movs	r1, #129	; 0x81
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f001 fd0b 	bl	800e2c0 <USBD_LL_Transmit>

      return USBD_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e002      	b.n	800c8b4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c8b2:	2302      	movs	r3, #2
  }
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ca:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d017      	beq.n	800c906 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	7c1b      	ldrb	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d109      	bne.n	800c8f2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8e8:	2101      	movs	r1, #1
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f001 fd0b 	bl	800e306 <USBD_LL_PrepareReceive>
 800c8f0:	e007      	b.n	800c902 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8f8:	2340      	movs	r3, #64	; 0x40
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f001 fd02 	bl	800e306 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c902:	2300      	movs	r3, #0
 800c904:	e000      	b.n	800c908 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c906:	2302      	movs	r3, #2
  }
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c924:	2302      	movs	r3, #2
 800c926:	e01a      	b.n	800c95e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	79fa      	ldrb	r2, [r7, #7]
 800c954:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f001 fb6e 	bl	800e038 <USBD_LL_Init>

  return USBD_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c966:	b480      	push	{r7}
 800c968:	b085      	sub	sp, #20
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]
 800c986:	e001      	b.n	800c98c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c988:	2302      	movs	r3, #2
 800c98a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b082      	sub	sp, #8
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f001 fba2 	bl	800e0ec <USBD_LL_Start>

  return USBD_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00c      	beq.n	800c9fc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	78fa      	ldrb	r2, [r7, #3]
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	4798      	blx	r3
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d101      	bne.n	800c9fc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b082      	sub	sp, #8
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	78fa      	ldrb	r2, [r7, #3]
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	4798      	blx	r3

  return USBD_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 fedb 	bl	800d7fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca52:	461a      	mov	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ca60:	f003 031f 	and.w	r3, r3, #31
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d016      	beq.n	800ca96 <USBD_LL_SetupStage+0x6a>
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d81c      	bhi.n	800caa6 <USBD_LL_SetupStage+0x7a>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <USBD_LL_SetupStage+0x4a>
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d008      	beq.n	800ca86 <USBD_LL_SetupStage+0x5a>
 800ca74:	e017      	b.n	800caa6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f9ce 	bl	800ce20 <USBD_StdDevReq>
      break;
 800ca84:	e01a      	b.n	800cabc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fa30 	bl	800cef4 <USBD_StdItfReq>
      break;
 800ca94:	e012      	b.n	800cabc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fa70 	bl	800cf84 <USBD_StdEPReq>
      break;
 800caa4:	e00a      	b.n	800cabc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800caac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 fb79 	bl	800e1ac <USBD_LL_StallEP>
      break;
 800caba:	bf00      	nop
  }

  return USBD_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b086      	sub	sp, #24
 800caca:	af00      	add	r7, sp, #0
 800cacc:	60f8      	str	r0, [r7, #12]
 800cace:	460b      	mov	r3, r1
 800cad0:	607a      	str	r2, [r7, #4]
 800cad2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cad4:	7afb      	ldrb	r3, [r7, #11]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d14b      	bne.n	800cb72 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cae0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d134      	bne.n	800cb56 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	68da      	ldr	r2, [r3, #12]
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d919      	bls.n	800cb2c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	68da      	ldr	r2, [r3, #12]
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	1ad2      	subs	r2, r2, r3
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	68da      	ldr	r2, [r3, #12]
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d203      	bcs.n	800cb1a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	e002      	b.n	800cb20 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	461a      	mov	r2, r3
 800cb22:	6879      	ldr	r1, [r7, #4]
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f000 ff5c 	bl	800d9e2 <USBD_CtlContinueRx>
 800cb2a:	e038      	b.n	800cb9e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb32:	691b      	ldr	r3, [r3, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00a      	beq.n	800cb4e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cb3e:	2b03      	cmp	r3, #3
 800cb40:	d105      	bne.n	800cb4e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f000 ff59 	bl	800da06 <USBD_CtlSendStatus>
 800cb54:	e023      	b.n	800cb9e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb5c:	2b05      	cmp	r3, #5
 800cb5e:	d11e      	bne.n	800cb9e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cb68:	2100      	movs	r1, #0
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f001 fb1e 	bl	800e1ac <USBD_LL_StallEP>
 800cb70:	e015      	b.n	800cb9e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00d      	beq.n	800cb9a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d108      	bne.n	800cb9a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb8e:	699b      	ldr	r3, [r3, #24]
 800cb90:	7afa      	ldrb	r2, [r7, #11]
 800cb92:	4611      	mov	r1, r2
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	4798      	blx	r3
 800cb98:	e001      	b.n	800cb9e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	e000      	b.n	800cba0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3718      	adds	r7, #24
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	607a      	str	r2, [r7, #4]
 800cbb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cbb6:	7afb      	ldrb	r3, [r7, #11]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d17f      	bne.n	800ccbc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3314      	adds	r3, #20
 800cbc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d15c      	bne.n	800cc86 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	68da      	ldr	r2, [r3, #12]
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d915      	bls.n	800cc04 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	68da      	ldr	r2, [r3, #12]
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	1ad2      	subs	r2, r2, r3
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	461a      	mov	r2, r3
 800cbee:	6879      	ldr	r1, [r7, #4]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f000 fec6 	bl	800d982 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f001 fb82 	bl	800e306 <USBD_LL_PrepareReceive>
 800cc02:	e04e      	b.n	800cca2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	697a      	ldr	r2, [r7, #20]
 800cc0a:	6912      	ldr	r2, [r2, #16]
 800cc0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc10:	fb01 f202 	mul.w	r2, r1, r2
 800cc14:	1a9b      	subs	r3, r3, r2
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d11c      	bne.n	800cc54 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	689a      	ldr	r2, [r3, #8]
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d316      	bcc.n	800cc54 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d20f      	bcs.n	800cc54 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc34:	2200      	movs	r2, #0
 800cc36:	2100      	movs	r1, #0
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f000 fea2 	bl	800d982 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc46:	2300      	movs	r3, #0
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f001 fb5a 	bl	800e306 <USBD_LL_PrepareReceive>
 800cc52:	e026      	b.n	800cca2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d105      	bne.n	800cc76 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cc76:	2180      	movs	r1, #128	; 0x80
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f001 fa97 	bl	800e1ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 fed4 	bl	800da2c <USBD_CtlReceiveStatus>
 800cc84:	e00d      	b.n	800cca2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	d004      	beq.n	800cc9a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d103      	bne.n	800cca2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cc9a:	2180      	movs	r1, #128	; 0x80
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f001 fa85 	bl	800e1ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d11d      	bne.n	800cce8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7ff fe80 	bl	800c9b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ccba:	e015      	b.n	800cce8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00d      	beq.n	800cce4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ccce:	2b03      	cmp	r3, #3
 800ccd0:	d108      	bne.n	800cce4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccd8:	695b      	ldr	r3, [r3, #20]
 800ccda:	7afa      	ldrb	r2, [r7, #11]
 800ccdc:	4611      	mov	r1, r2
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	4798      	blx	r3
 800cce2:	e001      	b.n	800cce8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cce4:	2302      	movs	r3, #2
 800cce6:	e000      	b.n	800ccea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3718      	adds	r7, #24
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccfa:	2340      	movs	r3, #64	; 0x40
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2100      	movs	r1, #0
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f001 fa0e 	bl	800e122 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2240      	movs	r2, #64	; 0x40
 800cd12:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd16:	2340      	movs	r3, #64	; 0x40
 800cd18:	2200      	movs	r2, #0
 800cd1a:	2180      	movs	r1, #128	; 0x80
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f001 fa00 	bl	800e122 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2240      	movs	r2, #64	; 0x40
 800cd2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d009      	beq.n	800cd6a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	6852      	ldr	r2, [r2, #4]
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	4611      	mov	r1, r2
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	4798      	blx	r3
  }

  return USBD_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	78fa      	ldrb	r2, [r7, #3]
 800cd84:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2204      	movs	r2, #4
 800cdac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	d105      	bne.n	800cddc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b082      	sub	sp, #8
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d10b      	bne.n	800ce14 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce02:	69db      	ldr	r3, [r3, #28]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce0e:	69db      	ldr	r3, [r3, #28]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce36:	2b40      	cmp	r3, #64	; 0x40
 800ce38:	d005      	beq.n	800ce46 <USBD_StdDevReq+0x26>
 800ce3a:	2b40      	cmp	r3, #64	; 0x40
 800ce3c:	d84f      	bhi.n	800cede <USBD_StdDevReq+0xbe>
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d009      	beq.n	800ce56 <USBD_StdDevReq+0x36>
 800ce42:	2b20      	cmp	r3, #32
 800ce44:	d14b      	bne.n	800cede <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	4798      	blx	r3
      break;
 800ce54:	e048      	b.n	800cee8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	785b      	ldrb	r3, [r3, #1]
 800ce5a:	2b09      	cmp	r3, #9
 800ce5c:	d839      	bhi.n	800ced2 <USBD_StdDevReq+0xb2>
 800ce5e:	a201      	add	r2, pc, #4	; (adr r2, 800ce64 <USBD_StdDevReq+0x44>)
 800ce60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce64:	0800ceb5 	.word	0x0800ceb5
 800ce68:	0800cec9 	.word	0x0800cec9
 800ce6c:	0800ced3 	.word	0x0800ced3
 800ce70:	0800cebf 	.word	0x0800cebf
 800ce74:	0800ced3 	.word	0x0800ced3
 800ce78:	0800ce97 	.word	0x0800ce97
 800ce7c:	0800ce8d 	.word	0x0800ce8d
 800ce80:	0800ced3 	.word	0x0800ced3
 800ce84:	0800ceab 	.word	0x0800ceab
 800ce88:	0800cea1 	.word	0x0800cea1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 f9dc 	bl	800d24c <USBD_GetDescriptor>
          break;
 800ce94:	e022      	b.n	800cedc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fb3f 	bl	800d51c <USBD_SetAddress>
          break;
 800ce9e:	e01d      	b.n	800cedc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fb7e 	bl	800d5a4 <USBD_SetConfig>
          break;
 800cea8:	e018      	b.n	800cedc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fc07 	bl	800d6c0 <USBD_GetConfig>
          break;
 800ceb2:	e013      	b.n	800cedc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ceb4:	6839      	ldr	r1, [r7, #0]
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 fc37 	bl	800d72a <USBD_GetStatus>
          break;
 800cebc:	e00e      	b.n	800cedc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fc65 	bl	800d790 <USBD_SetFeature>
          break;
 800cec6:	e009      	b.n	800cedc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fc74 	bl	800d7b8 <USBD_ClrFeature>
          break;
 800ced0:	e004      	b.n	800cedc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fccd 	bl	800d874 <USBD_CtlError>
          break;
 800ceda:	bf00      	nop
      }
      break;
 800cedc:	e004      	b.n	800cee8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800cede:	6839      	ldr	r1, [r7, #0]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 fcc7 	bl	800d874 <USBD_CtlError>
      break;
 800cee6:	bf00      	nop
  }

  return ret;
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop

0800cef4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf0a:	2b40      	cmp	r3, #64	; 0x40
 800cf0c:	d005      	beq.n	800cf1a <USBD_StdItfReq+0x26>
 800cf0e:	2b40      	cmp	r3, #64	; 0x40
 800cf10:	d82e      	bhi.n	800cf70 <USBD_StdItfReq+0x7c>
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d001      	beq.n	800cf1a <USBD_StdItfReq+0x26>
 800cf16:	2b20      	cmp	r3, #32
 800cf18:	d12a      	bne.n	800cf70 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf20:	3b01      	subs	r3, #1
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d81d      	bhi.n	800cf62 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	889b      	ldrh	r3, [r3, #4]
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d813      	bhi.n	800cf58 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	4798      	blx	r3
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	88db      	ldrh	r3, [r3, #6]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d110      	bne.n	800cf6c <USBD_StdItfReq+0x78>
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10d      	bne.n	800cf6c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fd58 	bl	800da06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cf56:	e009      	b.n	800cf6c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fc8a 	bl	800d874 <USBD_CtlError>
          break;
 800cf60:	e004      	b.n	800cf6c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fc85 	bl	800d874 <USBD_CtlError>
          break;
 800cf6a:	e000      	b.n	800cf6e <USBD_StdItfReq+0x7a>
          break;
 800cf6c:	bf00      	nop
      }
      break;
 800cf6e:	e004      	b.n	800cf7a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fc7e 	bl	800d874 <USBD_CtlError>
      break;
 800cf78:	bf00      	nop
  }

  return USBD_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	889b      	ldrh	r3, [r3, #4]
 800cf96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfa0:	2b40      	cmp	r3, #64	; 0x40
 800cfa2:	d007      	beq.n	800cfb4 <USBD_StdEPReq+0x30>
 800cfa4:	2b40      	cmp	r3, #64	; 0x40
 800cfa6:	f200 8146 	bhi.w	800d236 <USBD_StdEPReq+0x2b2>
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00a      	beq.n	800cfc4 <USBD_StdEPReq+0x40>
 800cfae:	2b20      	cmp	r3, #32
 800cfb0:	f040 8141 	bne.w	800d236 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	4798      	blx	r3
      break;
 800cfc2:	e13d      	b.n	800d240 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfcc:	2b20      	cmp	r3, #32
 800cfce:	d10a      	bne.n	800cfe6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
 800cfde:	4603      	mov	r3, r0
 800cfe0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800cfe2:	7bfb      	ldrb	r3, [r7, #15]
 800cfe4:	e12d      	b.n	800d242 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	785b      	ldrb	r3, [r3, #1]
 800cfea:	2b03      	cmp	r3, #3
 800cfec:	d007      	beq.n	800cffe <USBD_StdEPReq+0x7a>
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	f300 811b 	bgt.w	800d22a <USBD_StdEPReq+0x2a6>
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d072      	beq.n	800d0de <USBD_StdEPReq+0x15a>
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d03a      	beq.n	800d072 <USBD_StdEPReq+0xee>
 800cffc:	e115      	b.n	800d22a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d004:	2b02      	cmp	r3, #2
 800d006:	d002      	beq.n	800d00e <USBD_StdEPReq+0x8a>
 800d008:	2b03      	cmp	r3, #3
 800d00a:	d015      	beq.n	800d038 <USBD_StdEPReq+0xb4>
 800d00c:	e02b      	b.n	800d066 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00c      	beq.n	800d02e <USBD_StdEPReq+0xaa>
 800d014:	7bbb      	ldrb	r3, [r7, #14]
 800d016:	2b80      	cmp	r3, #128	; 0x80
 800d018:	d009      	beq.n	800d02e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f001 f8c4 	bl	800e1ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d024:	2180      	movs	r1, #128	; 0x80
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f001 f8c0 	bl	800e1ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d02c:	e020      	b.n	800d070 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fc1f 	bl	800d874 <USBD_CtlError>
              break;
 800d036:	e01b      	b.n	800d070 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	885b      	ldrh	r3, [r3, #2]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10e      	bne.n	800d05e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00b      	beq.n	800d05e <USBD_StdEPReq+0xda>
 800d046:	7bbb      	ldrb	r3, [r7, #14]
 800d048:	2b80      	cmp	r3, #128	; 0x80
 800d04a:	d008      	beq.n	800d05e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	88db      	ldrh	r3, [r3, #6]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d104      	bne.n	800d05e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d054:	7bbb      	ldrb	r3, [r7, #14]
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f001 f8a7 	bl	800e1ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fcd1 	bl	800da06 <USBD_CtlSendStatus>

              break;
 800d064:	e004      	b.n	800d070 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 fc03 	bl	800d874 <USBD_CtlError>
              break;
 800d06e:	bf00      	nop
          }
          break;
 800d070:	e0e0      	b.n	800d234 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d002      	beq.n	800d082 <USBD_StdEPReq+0xfe>
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d015      	beq.n	800d0ac <USBD_StdEPReq+0x128>
 800d080:	e026      	b.n	800d0d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d082:	7bbb      	ldrb	r3, [r7, #14]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00c      	beq.n	800d0a2 <USBD_StdEPReq+0x11e>
 800d088:	7bbb      	ldrb	r3, [r7, #14]
 800d08a:	2b80      	cmp	r3, #128	; 0x80
 800d08c:	d009      	beq.n	800d0a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f001 f88a 	bl	800e1ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d098:	2180      	movs	r1, #128	; 0x80
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f001 f886 	bl	800e1ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0a0:	e01c      	b.n	800d0dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 fbe5 	bl	800d874 <USBD_CtlError>
              break;
 800d0aa:	e017      	b.n	800d0dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	885b      	ldrh	r3, [r3, #2]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d112      	bne.n	800d0da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d0b4:	7bbb      	ldrb	r3, [r7, #14]
 800d0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f001 f891 	bl	800e1ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fc9c 	bl	800da06 <USBD_CtlSendStatus>
              }
              break;
 800d0ce:	e004      	b.n	800d0da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d0d0:	6839      	ldr	r1, [r7, #0]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fbce 	bl	800d874 <USBD_CtlError>
              break;
 800d0d8:	e000      	b.n	800d0dc <USBD_StdEPReq+0x158>
              break;
 800d0da:	bf00      	nop
          }
          break;
 800d0dc:	e0aa      	b.n	800d234 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d002      	beq.n	800d0ee <USBD_StdEPReq+0x16a>
 800d0e8:	2b03      	cmp	r3, #3
 800d0ea:	d032      	beq.n	800d152 <USBD_StdEPReq+0x1ce>
 800d0ec:	e097      	b.n	800d21e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d007      	beq.n	800d104 <USBD_StdEPReq+0x180>
 800d0f4:	7bbb      	ldrb	r3, [r7, #14]
 800d0f6:	2b80      	cmp	r3, #128	; 0x80
 800d0f8:	d004      	beq.n	800d104 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fbb9 	bl	800d874 <USBD_CtlError>
                break;
 800d102:	e091      	b.n	800d228 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	da0b      	bge.n	800d124 <USBD_StdEPReq+0x1a0>
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
 800d10e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d112:	4613      	mov	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	3310      	adds	r3, #16
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	4413      	add	r3, r2
 800d120:	3304      	adds	r3, #4
 800d122:	e00b      	b.n	800d13c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d124:	7bbb      	ldrb	r3, [r7, #14]
 800d126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d12a:	4613      	mov	r3, r2
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	4413      	add	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	4413      	add	r3, r2
 800d13a:	3304      	adds	r3, #4
 800d13c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2200      	movs	r2, #0
 800d142:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	2202      	movs	r2, #2
 800d148:	4619      	mov	r1, r3
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fbfd 	bl	800d94a <USBD_CtlSendData>
              break;
 800d150:	e06a      	b.n	800d228 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d152:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d156:	2b00      	cmp	r3, #0
 800d158:	da11      	bge.n	800d17e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	f003 020f 	and.w	r2, r3, #15
 800d160:	6879      	ldr	r1, [r7, #4]
 800d162:	4613      	mov	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	440b      	add	r3, r1
 800d16c:	3318      	adds	r3, #24
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d117      	bne.n	800d1a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fb7c 	bl	800d874 <USBD_CtlError>
                  break;
 800d17c:	e054      	b.n	800d228 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d17e:	7bbb      	ldrb	r3, [r7, #14]
 800d180:	f003 020f 	and.w	r2, r3, #15
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	4613      	mov	r3, r2
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	4413      	add	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	440b      	add	r3, r1
 800d190:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d104      	bne.n	800d1a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 fb69 	bl	800d874 <USBD_CtlError>
                  break;
 800d1a2:	e041      	b.n	800d228 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	da0b      	bge.n	800d1c4 <USBD_StdEPReq+0x240>
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	3310      	adds	r3, #16
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	4413      	add	r3, r2
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	e00b      	b.n	800d1dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	4413      	add	r3, r2
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	4413      	add	r3, r2
 800d1da:	3304      	adds	r3, #4
 800d1dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d1de:	7bbb      	ldrb	r3, [r7, #14]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d002      	beq.n	800d1ea <USBD_StdEPReq+0x266>
 800d1e4:	7bbb      	ldrb	r3, [r7, #14]
 800d1e6:	2b80      	cmp	r3, #128	; 0x80
 800d1e8:	d103      	bne.n	800d1f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	e00e      	b.n	800d210 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f001 f816 	bl	800e228 <USBD_LL_IsStallEP>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d003      	beq.n	800d20a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2201      	movs	r2, #1
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	e002      	b.n	800d210 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	2200      	movs	r2, #0
 800d20e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2202      	movs	r2, #2
 800d214:	4619      	mov	r1, r3
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fb97 	bl	800d94a <USBD_CtlSendData>
              break;
 800d21c:	e004      	b.n	800d228 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fb27 	bl	800d874 <USBD_CtlError>
              break;
 800d226:	bf00      	nop
          }
          break;
 800d228:	e004      	b.n	800d234 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fb21 	bl	800d874 <USBD_CtlError>
          break;
 800d232:	bf00      	nop
      }
      break;
 800d234:	e004      	b.n	800d240 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d236:	6839      	ldr	r1, [r7, #0]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fb1b 	bl	800d874 <USBD_CtlError>
      break;
 800d23e:	bf00      	nop
  }

  return ret;
 800d240:	7bfb      	ldrb	r3, [r7, #15]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d25e:	2300      	movs	r3, #0
 800d260:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	885b      	ldrh	r3, [r3, #2]
 800d266:	0a1b      	lsrs	r3, r3, #8
 800d268:	b29b      	uxth	r3, r3
 800d26a:	3b01      	subs	r3, #1
 800d26c:	2b06      	cmp	r3, #6
 800d26e:	f200 8128 	bhi.w	800d4c2 <USBD_GetDescriptor+0x276>
 800d272:	a201      	add	r2, pc, #4	; (adr r2, 800d278 <USBD_GetDescriptor+0x2c>)
 800d274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d278:	0800d295 	.word	0x0800d295
 800d27c:	0800d2ad 	.word	0x0800d2ad
 800d280:	0800d2ed 	.word	0x0800d2ed
 800d284:	0800d4c3 	.word	0x0800d4c3
 800d288:	0800d4c3 	.word	0x0800d4c3
 800d28c:	0800d463 	.word	0x0800d463
 800d290:	0800d48f 	.word	0x0800d48f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	7c12      	ldrb	r2, [r2, #16]
 800d2a0:	f107 0108 	add.w	r1, r7, #8
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	4798      	blx	r3
 800d2a8:	60f8      	str	r0, [r7, #12]
      break;
 800d2aa:	e112      	b.n	800d4d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	7c1b      	ldrb	r3, [r3, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10d      	bne.n	800d2d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2bc:	f107 0208 	add.w	r2, r7, #8
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	4798      	blx	r3
 800d2c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d2ce:	e100      	b.n	800d4d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	f107 0208 	add.w	r2, r7, #8
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4798      	blx	r3
 800d2e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	701a      	strb	r2, [r3, #0]
      break;
 800d2ea:	e0f2      	b.n	800d4d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	885b      	ldrh	r3, [r3, #2]
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b05      	cmp	r3, #5
 800d2f4:	f200 80ac 	bhi.w	800d450 <USBD_GetDescriptor+0x204>
 800d2f8:	a201      	add	r2, pc, #4	; (adr r2, 800d300 <USBD_GetDescriptor+0xb4>)
 800d2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2fe:	bf00      	nop
 800d300:	0800d319 	.word	0x0800d319
 800d304:	0800d34d 	.word	0x0800d34d
 800d308:	0800d381 	.word	0x0800d381
 800d30c:	0800d3b5 	.word	0x0800d3b5
 800d310:	0800d3e9 	.word	0x0800d3e9
 800d314:	0800d41d 	.word	0x0800d41d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00b      	beq.n	800d33c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	7c12      	ldrb	r2, [r2, #16]
 800d330:	f107 0108 	add.w	r1, r7, #8
 800d334:	4610      	mov	r0, r2
 800d336:	4798      	blx	r3
 800d338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d33a:	e091      	b.n	800d460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fa98 	bl	800d874 <USBD_CtlError>
            err++;
 800d344:	7afb      	ldrb	r3, [r7, #11]
 800d346:	3301      	adds	r3, #1
 800d348:	72fb      	strb	r3, [r7, #11]
          break;
 800d34a:	e089      	b.n	800d460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	7c12      	ldrb	r2, [r2, #16]
 800d364:	f107 0108 	add.w	r1, r7, #8
 800d368:	4610      	mov	r0, r2
 800d36a:	4798      	blx	r3
 800d36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d36e:	e077      	b.n	800d460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fa7e 	bl	800d874 <USBD_CtlError>
            err++;
 800d378:	7afb      	ldrb	r3, [r7, #11]
 800d37a:	3301      	adds	r3, #1
 800d37c:	72fb      	strb	r3, [r7, #11]
          break;
 800d37e:	e06f      	b.n	800d460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00b      	beq.n	800d3a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	7c12      	ldrb	r2, [r2, #16]
 800d398:	f107 0108 	add.w	r1, r7, #8
 800d39c:	4610      	mov	r0, r2
 800d39e:	4798      	blx	r3
 800d3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3a2:	e05d      	b.n	800d460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fa64 	bl	800d874 <USBD_CtlError>
            err++;
 800d3ac:	7afb      	ldrb	r3, [r7, #11]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d3b2:	e055      	b.n	800d460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00b      	beq.n	800d3d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	7c12      	ldrb	r2, [r2, #16]
 800d3cc:	f107 0108 	add.w	r1, r7, #8
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	4798      	blx	r3
 800d3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3d6:	e043      	b.n	800d460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fa4a 	bl	800d874 <USBD_CtlError>
            err++;
 800d3e0:	7afb      	ldrb	r3, [r7, #11]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d3e6:	e03b      	b.n	800d460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d3ee:	695b      	ldr	r3, [r3, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00b      	beq.n	800d40c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	7c12      	ldrb	r2, [r2, #16]
 800d400:	f107 0108 	add.w	r1, r7, #8
 800d404:	4610      	mov	r0, r2
 800d406:	4798      	blx	r3
 800d408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d40a:	e029      	b.n	800d460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fa30 	bl	800d874 <USBD_CtlError>
            err++;
 800d414:	7afb      	ldrb	r3, [r7, #11]
 800d416:	3301      	adds	r3, #1
 800d418:	72fb      	strb	r3, [r7, #11]
          break;
 800d41a:	e021      	b.n	800d460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00b      	beq.n	800d440 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d42e:	699b      	ldr	r3, [r3, #24]
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	7c12      	ldrb	r2, [r2, #16]
 800d434:	f107 0108 	add.w	r1, r7, #8
 800d438:	4610      	mov	r0, r2
 800d43a:	4798      	blx	r3
 800d43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d43e:	e00f      	b.n	800d460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d440:	6839      	ldr	r1, [r7, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fa16 	bl	800d874 <USBD_CtlError>
            err++;
 800d448:	7afb      	ldrb	r3, [r7, #11]
 800d44a:	3301      	adds	r3, #1
 800d44c:	72fb      	strb	r3, [r7, #11]
          break;
 800d44e:	e007      	b.n	800d460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fa0e 	bl	800d874 <USBD_CtlError>
          err++;
 800d458:	7afb      	ldrb	r3, [r7, #11]
 800d45a:	3301      	adds	r3, #1
 800d45c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d45e:	e038      	b.n	800d4d2 <USBD_GetDescriptor+0x286>
 800d460:	e037      	b.n	800d4d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	7c1b      	ldrb	r3, [r3, #16]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d109      	bne.n	800d47e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d472:	f107 0208 	add.w	r2, r7, #8
 800d476:	4610      	mov	r0, r2
 800d478:	4798      	blx	r3
 800d47a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d47c:	e029      	b.n	800d4d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f9f7 	bl	800d874 <USBD_CtlError>
        err++;
 800d486:	7afb      	ldrb	r3, [r7, #11]
 800d488:	3301      	adds	r3, #1
 800d48a:	72fb      	strb	r3, [r7, #11]
      break;
 800d48c:	e021      	b.n	800d4d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	7c1b      	ldrb	r3, [r3, #16]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10d      	bne.n	800d4b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	f107 0208 	add.w	r2, r7, #8
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	4798      	blx	r3
 800d4a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	2207      	movs	r2, #7
 800d4ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4b0:	e00f      	b.n	800d4d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d4b2:	6839      	ldr	r1, [r7, #0]
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 f9dd 	bl	800d874 <USBD_CtlError>
        err++;
 800d4ba:	7afb      	ldrb	r3, [r7, #11]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	72fb      	strb	r3, [r7, #11]
      break;
 800d4c0:	e007      	b.n	800d4d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f9d5 	bl	800d874 <USBD_CtlError>
      err++;
 800d4ca:	7afb      	ldrb	r3, [r7, #11]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d4d0:	bf00      	nop
  }

  if (err != 0U)
 800d4d2:	7afb      	ldrb	r3, [r7, #11]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d11c      	bne.n	800d512 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d4d8:	893b      	ldrh	r3, [r7, #8]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d011      	beq.n	800d502 <USBD_GetDescriptor+0x2b6>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	88db      	ldrh	r3, [r3, #6]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00d      	beq.n	800d502 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	88da      	ldrh	r2, [r3, #6]
 800d4ea:	893b      	ldrh	r3, [r7, #8]
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	bf28      	it	cs
 800d4f0:	4613      	movcs	r3, r2
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4f6:	893b      	ldrh	r3, [r7, #8]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	68f9      	ldr	r1, [r7, #12]
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fa24 	bl	800d94a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	88db      	ldrh	r3, [r3, #6]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d104      	bne.n	800d514 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fa7b 	bl	800da06 <USBD_CtlSendStatus>
 800d510:	e000      	b.n	800d514 <USBD_GetDescriptor+0x2c8>
    return;
 800d512:	bf00      	nop
    }
  }
}
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop

0800d51c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	889b      	ldrh	r3, [r3, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d130      	bne.n	800d590 <USBD_SetAddress+0x74>
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	88db      	ldrh	r3, [r3, #6]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d12c      	bne.n	800d590 <USBD_SetAddress+0x74>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	885b      	ldrh	r3, [r3, #2]
 800d53a:	2b7f      	cmp	r3, #127	; 0x7f
 800d53c:	d828      	bhi.n	800d590 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	885b      	ldrh	r3, [r3, #2]
 800d542:	b2db      	uxtb	r3, r3
 800d544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d548:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d550:	2b03      	cmp	r3, #3
 800d552:	d104      	bne.n	800d55e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f98c 	bl	800d874 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d55c:	e01d      	b.n	800d59a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	7bfa      	ldrb	r2, [r7, #15]
 800d562:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d566:	7bfb      	ldrb	r3, [r7, #15]
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 fe89 	bl	800e282 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fa48 	bl	800da06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d004      	beq.n	800d586 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2202      	movs	r2, #2
 800d580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d584:	e009      	b.n	800d59a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d58e:	e004      	b.n	800d59a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d590:	6839      	ldr	r1, [r7, #0]
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 f96e 	bl	800d874 <USBD_CtlError>
  }
}
 800d598:	bf00      	nop
 800d59a:	bf00      	nop
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
	...

0800d5a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	885b      	ldrh	r3, [r3, #2]
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	4b41      	ldr	r3, [pc, #260]	; (800d6bc <USBD_SetConfig+0x118>)
 800d5b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d5b8:	4b40      	ldr	r3, [pc, #256]	; (800d6bc <USBD_SetConfig+0x118>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d904      	bls.n	800d5ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d5c0:	6839      	ldr	r1, [r7, #0]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 f956 	bl	800d874 <USBD_CtlError>
 800d5c8:	e075      	b.n	800d6b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d002      	beq.n	800d5da <USBD_SetConfig+0x36>
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	d023      	beq.n	800d620 <USBD_SetConfig+0x7c>
 800d5d8:	e062      	b.n	800d6a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d5da:	4b38      	ldr	r3, [pc, #224]	; (800d6bc <USBD_SetConfig+0x118>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d01a      	beq.n	800d618 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d5e2:	4b36      	ldr	r3, [pc, #216]	; (800d6bc <USBD_SetConfig+0x118>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2203      	movs	r2, #3
 800d5f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d5f4:	4b31      	ldr	r3, [pc, #196]	; (800d6bc <USBD_SetConfig+0x118>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7ff f9e4 	bl	800c9c8 <USBD_SetClassConfig>
 800d600:	4603      	mov	r3, r0
 800d602:	2b02      	cmp	r3, #2
 800d604:	d104      	bne.n	800d610 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f933 	bl	800d874 <USBD_CtlError>
            return;
 800d60e:	e052      	b.n	800d6b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f9f8 	bl	800da06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d616:	e04e      	b.n	800d6b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 f9f4 	bl	800da06 <USBD_CtlSendStatus>
        break;
 800d61e:	e04a      	b.n	800d6b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d620:	4b26      	ldr	r3, [pc, #152]	; (800d6bc <USBD_SetConfig+0x118>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d112      	bne.n	800d64e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2202      	movs	r2, #2
 800d62c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800d630:	4b22      	ldr	r3, [pc, #136]	; (800d6bc <USBD_SetConfig+0x118>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	461a      	mov	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d63a:	4b20      	ldr	r3, [pc, #128]	; (800d6bc <USBD_SetConfig+0x118>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff f9e0 	bl	800ca06 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f9dd 	bl	800da06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d64c:	e033      	b.n	800d6b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d64e:	4b1b      	ldr	r3, [pc, #108]	; (800d6bc <USBD_SetConfig+0x118>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	461a      	mov	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d01d      	beq.n	800d698 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	b2db      	uxtb	r3, r3
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff f9ce 	bl	800ca06 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d66a:	4b14      	ldr	r3, [pc, #80]	; (800d6bc <USBD_SetConfig+0x118>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d674:	4b11      	ldr	r3, [pc, #68]	; (800d6bc <USBD_SetConfig+0x118>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff f9a4 	bl	800c9c8 <USBD_SetClassConfig>
 800d680:	4603      	mov	r3, r0
 800d682:	2b02      	cmp	r3, #2
 800d684:	d104      	bne.n	800d690 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d686:	6839      	ldr	r1, [r7, #0]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f8f3 	bl	800d874 <USBD_CtlError>
            return;
 800d68e:	e012      	b.n	800d6b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f9b8 	bl	800da06 <USBD_CtlSendStatus>
        break;
 800d696:	e00e      	b.n	800d6b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 f9b4 	bl	800da06 <USBD_CtlSendStatus>
        break;
 800d69e:	e00a      	b.n	800d6b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d6a0:	6839      	ldr	r1, [r7, #0]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f8e6 	bl	800d874 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d6a8:	4b04      	ldr	r3, [pc, #16]	; (800d6bc <USBD_SetConfig+0x118>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff f9a9 	bl	800ca06 <USBD_ClrClassConfig>
        break;
 800d6b4:	bf00      	nop
    }
  }
}
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20000350 	.word	0x20000350

0800d6c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	88db      	ldrh	r3, [r3, #6]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d004      	beq.n	800d6dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f8cd 	bl	800d874 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d6da:	e022      	b.n	800d722 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	dc02      	bgt.n	800d6ec <USBD_GetConfig+0x2c>
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	dc03      	bgt.n	800d6f2 <USBD_GetConfig+0x32>
 800d6ea:	e015      	b.n	800d718 <USBD_GetConfig+0x58>
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d00b      	beq.n	800d708 <USBD_GetConfig+0x48>
 800d6f0:	e012      	b.n	800d718 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3308      	adds	r3, #8
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 f922 	bl	800d94a <USBD_CtlSendData>
        break;
 800d706:	e00c      	b.n	800d722 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	3304      	adds	r3, #4
 800d70c:	2201      	movs	r2, #1
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f91a 	bl	800d94a <USBD_CtlSendData>
        break;
 800d716:	e004      	b.n	800d722 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f8aa 	bl	800d874 <USBD_CtlError>
        break;
 800d720:	bf00      	nop
}
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d73a:	3b01      	subs	r3, #1
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d81e      	bhi.n	800d77e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	88db      	ldrh	r3, [r3, #6]
 800d744:	2b02      	cmp	r3, #2
 800d746:	d004      	beq.n	800d752 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 f892 	bl	800d874 <USBD_CtlError>
        break;
 800d750:	e01a      	b.n	800d788 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	f043 0202 	orr.w	r2, r3, #2
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	330c      	adds	r3, #12
 800d772:	2202      	movs	r2, #2
 800d774:	4619      	mov	r1, r3
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f8e7 	bl	800d94a <USBD_CtlSendData>
      break;
 800d77c:	e004      	b.n	800d788 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 f877 	bl	800d874 <USBD_CtlError>
      break;
 800d786:	bf00      	nop
  }
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	885b      	ldrh	r3, [r3, #2]
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d106      	bne.n	800d7b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f92b 	bl	800da06 <USBD_CtlSendStatus>
  }
}
 800d7b0:	bf00      	nop
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d80b      	bhi.n	800d7e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	885b      	ldrh	r3, [r3, #2]
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d10c      	bne.n	800d7f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f911 	bl	800da06 <USBD_CtlSendStatus>
      }
      break;
 800d7e4:	e004      	b.n	800d7f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f843 	bl	800d874 <USBD_CtlError>
      break;
 800d7ee:	e000      	b.n	800d7f2 <USBD_ClrFeature+0x3a>
      break;
 800d7f0:	bf00      	nop
  }
}
 800d7f2:	bf00      	nop
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	781a      	ldrb	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	785a      	ldrb	r2, [r3, #1]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	3302      	adds	r3, #2
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	3303      	adds	r3, #3
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	b29b      	uxth	r3, r3
 800d824:	021b      	lsls	r3, r3, #8
 800d826:	b29b      	uxth	r3, r3
 800d828:	4413      	add	r3, r2
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	3304      	adds	r3, #4
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	b29a      	uxth	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	3305      	adds	r3, #5
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	021b      	lsls	r3, r3, #8
 800d842:	b29b      	uxth	r3, r3
 800d844:	4413      	add	r3, r2
 800d846:	b29a      	uxth	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	3306      	adds	r3, #6
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	b29a      	uxth	r2, r3
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	3307      	adds	r3, #7
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	021b      	lsls	r3, r3, #8
 800d85e:	b29b      	uxth	r3, r3
 800d860:	4413      	add	r3, r2
 800d862:	b29a      	uxth	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	80da      	strh	r2, [r3, #6]

}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d87e:	2180      	movs	r1, #128	; 0x80
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fc93 	bl	800e1ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d886:	2100      	movs	r1, #0
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fc8f 	bl	800e1ac <USBD_LL_StallEP>
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b086      	sub	sp, #24
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d032      	beq.n	800d912 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 f834 	bl	800d91a <USBD_GetLen>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d8c0:	7dfb      	ldrb	r3, [r7, #23]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	75fa      	strb	r2, [r7, #23]
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	7812      	ldrb	r2, [r2, #0]
 800d8d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
 800d8d4:	1c5a      	adds	r2, r3, #1
 800d8d6:	75fa      	strb	r2, [r7, #23]
 800d8d8:	461a      	mov	r2, r3
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	4413      	add	r3, r2
 800d8de:	2203      	movs	r2, #3
 800d8e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d8e2:	e012      	b.n	800d90a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	60fa      	str	r2, [r7, #12]
 800d8ea:	7dfa      	ldrb	r2, [r7, #23]
 800d8ec:	1c51      	adds	r1, r2, #1
 800d8ee:	75f9      	strb	r1, [r7, #23]
 800d8f0:	4611      	mov	r1, r2
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	440a      	add	r2, r1
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d8fa:	7dfb      	ldrb	r3, [r7, #23]
 800d8fc:	1c5a      	adds	r2, r3, #1
 800d8fe:	75fa      	strb	r2, [r7, #23]
 800d900:	461a      	mov	r2, r3
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	4413      	add	r3, r2
 800d906:	2200      	movs	r2, #0
 800d908:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1e8      	bne.n	800d8e4 <USBD_GetString+0x4e>
    }
  }
}
 800d912:	bf00      	nop
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b085      	sub	sp, #20
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d922:	2300      	movs	r3, #0
 800d924:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d926:	e005      	b.n	800d934 <USBD_GetLen+0x1a>
  {
    len++;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
 800d92a:	3301      	adds	r3, #1
 800d92c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3301      	adds	r3, #1
 800d932:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1f5      	bne.n	800d928 <USBD_GetLen+0xe>
  }

  return len;
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3714      	adds	r7, #20
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b084      	sub	sp, #16
 800d94e:	af00      	add	r7, sp, #0
 800d950:	60f8      	str	r0, [r7, #12]
 800d952:	60b9      	str	r1, [r7, #8]
 800d954:	4613      	mov	r3, r2
 800d956:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2202      	movs	r2, #2
 800d95c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d960:	88fa      	ldrh	r2, [r7, #6]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d966:	88fa      	ldrh	r2, [r7, #6]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d96c:	88fb      	ldrh	r3, [r7, #6]
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	2100      	movs	r1, #0
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f000 fca4 	bl	800e2c0 <USBD_LL_Transmit>

  return USBD_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b084      	sub	sp, #16
 800d986:	af00      	add	r7, sp, #0
 800d988:	60f8      	str	r0, [r7, #12]
 800d98a:	60b9      	str	r1, [r7, #8]
 800d98c:	4613      	mov	r3, r2
 800d98e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d990:	88fb      	ldrh	r3, [r7, #6]
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	2100      	movs	r1, #0
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f000 fc92 	bl	800e2c0 <USBD_LL_Transmit>

  return USBD_OK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b084      	sub	sp, #16
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	60f8      	str	r0, [r7, #12]
 800d9ae:	60b9      	str	r1, [r7, #8]
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2203      	movs	r2, #3
 800d9b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d9bc:	88fa      	ldrh	r2, [r7, #6]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d9c4:	88fa      	ldrh	r2, [r7, #6]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d9cc:	88fb      	ldrh	r3, [r7, #6]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f000 fc97 	bl	800e306 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	60b9      	str	r1, [r7, #8]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d9f0:	88fb      	ldrh	r3, [r7, #6]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f000 fc85 	bl	800e306 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2204      	movs	r2, #4
 800da12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da16:	2300      	movs	r3, #0
 800da18:	2200      	movs	r2, #0
 800da1a:	2100      	movs	r1, #0
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 fc4f 	bl	800e2c0 <USBD_LL_Transmit>

  return USBD_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2205      	movs	r2, #5
 800da38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da3c:	2300      	movs	r3, #0
 800da3e:	2200      	movs	r2, #0
 800da40:	2100      	movs	r1, #0
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fc5f 	bl	800e306 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da58:	2200      	movs	r2, #0
 800da5a:	4912      	ldr	r1, [pc, #72]	; (800daa4 <MX_USB_DEVICE_Init+0x50>)
 800da5c:	4812      	ldr	r0, [pc, #72]	; (800daa8 <MX_USB_DEVICE_Init+0x54>)
 800da5e:	f7fe ff57 	bl	800c910 <USBD_Init>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d001      	beq.n	800da6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800da68:	f7f2 fe9a 	bl	80007a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800da6c:	490f      	ldr	r1, [pc, #60]	; (800daac <MX_USB_DEVICE_Init+0x58>)
 800da6e:	480e      	ldr	r0, [pc, #56]	; (800daa8 <MX_USB_DEVICE_Init+0x54>)
 800da70:	f7fe ff79 	bl	800c966 <USBD_RegisterClass>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800da7a:	f7f2 fe91 	bl	80007a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800da7e:	490c      	ldr	r1, [pc, #48]	; (800dab0 <MX_USB_DEVICE_Init+0x5c>)
 800da80:	4809      	ldr	r0, [pc, #36]	; (800daa8 <MX_USB_DEVICE_Init+0x54>)
 800da82:	f7fe fea7 	bl	800c7d4 <USBD_CDC_RegisterInterface>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800da8c:	f7f2 fe88 	bl	80007a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800da90:	4805      	ldr	r0, [pc, #20]	; (800daa8 <MX_USB_DEVICE_Init+0x54>)
 800da92:	f7fe ff82 	bl	800c99a <USBD_Start>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800da9c:	f7f2 fe80 	bl	80007a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800daa0:	bf00      	nop
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	2000012c 	.word	0x2000012c
 800daa8:	20000354 	.word	0x20000354
 800daac:	20000018 	.word	0x20000018
 800dab0:	2000011c 	.word	0x2000011c

0800dab4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dab8:	2200      	movs	r2, #0
 800daba:	4905      	ldr	r1, [pc, #20]	; (800dad0 <CDC_Init_FS+0x1c>)
 800dabc:	4805      	ldr	r0, [pc, #20]	; (800dad4 <CDC_Init_FS+0x20>)
 800dabe:	f7fe fea0 	bl	800c802 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dac2:	4905      	ldr	r1, [pc, #20]	; (800dad8 <CDC_Init_FS+0x24>)
 800dac4:	4803      	ldr	r0, [pc, #12]	; (800dad4 <CDC_Init_FS+0x20>)
 800dac6:	f7fe feb6 	bl	800c836 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800daca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dacc:	4618      	mov	r0, r3
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	20000a00 	.word	0x20000a00
 800dad4:	20000354 	.word	0x20000354
 800dad8:	20000618 	.word	0x20000618

0800dadc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dadc:	b480      	push	{r7}
 800dade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dae0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	4603      	mov	r3, r0
 800daf4:	6039      	str	r1, [r7, #0]
 800daf6:	71fb      	strb	r3, [r7, #7]
 800daf8:	4613      	mov	r3, r2
 800dafa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	2b23      	cmp	r3, #35	; 0x23
 800db00:	d84a      	bhi.n	800db98 <CDC_Control_FS+0xac>
 800db02:	a201      	add	r2, pc, #4	; (adr r2, 800db08 <CDC_Control_FS+0x1c>)
 800db04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db08:	0800db99 	.word	0x0800db99
 800db0c:	0800db99 	.word	0x0800db99
 800db10:	0800db99 	.word	0x0800db99
 800db14:	0800db99 	.word	0x0800db99
 800db18:	0800db99 	.word	0x0800db99
 800db1c:	0800db99 	.word	0x0800db99
 800db20:	0800db99 	.word	0x0800db99
 800db24:	0800db99 	.word	0x0800db99
 800db28:	0800db99 	.word	0x0800db99
 800db2c:	0800db99 	.word	0x0800db99
 800db30:	0800db99 	.word	0x0800db99
 800db34:	0800db99 	.word	0x0800db99
 800db38:	0800db99 	.word	0x0800db99
 800db3c:	0800db99 	.word	0x0800db99
 800db40:	0800db99 	.word	0x0800db99
 800db44:	0800db99 	.word	0x0800db99
 800db48:	0800db99 	.word	0x0800db99
 800db4c:	0800db99 	.word	0x0800db99
 800db50:	0800db99 	.word	0x0800db99
 800db54:	0800db99 	.word	0x0800db99
 800db58:	0800db99 	.word	0x0800db99
 800db5c:	0800db99 	.word	0x0800db99
 800db60:	0800db99 	.word	0x0800db99
 800db64:	0800db99 	.word	0x0800db99
 800db68:	0800db99 	.word	0x0800db99
 800db6c:	0800db99 	.word	0x0800db99
 800db70:	0800db99 	.word	0x0800db99
 800db74:	0800db99 	.word	0x0800db99
 800db78:	0800db99 	.word	0x0800db99
 800db7c:	0800db99 	.word	0x0800db99
 800db80:	0800db99 	.word	0x0800db99
 800db84:	0800db99 	.word	0x0800db99
 800db88:	0800db99 	.word	0x0800db99
 800db8c:	0800db99 	.word	0x0800db99
 800db90:	0800db99 	.word	0x0800db99
 800db94:	0800db99 	.word	0x0800db99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800db98:	bf00      	nop
  }

  return (USBD_OK);
 800db9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dbb2:	6879      	ldr	r1, [r7, #4]
 800dbb4:	480f      	ldr	r0, [pc, #60]	; (800dbf4 <CDC_Receive_FS+0x4c>)
 800dbb6:	f7fe fe3e 	bl	800c836 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dbba:	480e      	ldr	r0, [pc, #56]	; (800dbf4 <CDC_Receive_FS+0x4c>)
 800dbbc:	f7fe fe7e 	bl	800c8bc <USBD_CDC_ReceivePacket>
  if(Buf[0] == '1'){
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b31      	cmp	r3, #49	; 0x31
 800dbc6:	d106      	bne.n	800dbd6 <CDC_Receive_FS+0x2e>
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbce:	480a      	ldr	r0, [pc, #40]	; (800dbf8 <CDC_Receive_FS+0x50>)
 800dbd0:	f7f6 f9a4 	bl	8003f1c <HAL_GPIO_WritePin>
 800dbd4:	e009      	b.n	800dbea <CDC_Receive_FS+0x42>
  }
  else if(Buf[0] == '0'){
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	2b30      	cmp	r3, #48	; 0x30
 800dbdc:	d105      	bne.n	800dbea <CDC_Receive_FS+0x42>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbe4:	4804      	ldr	r0, [pc, #16]	; (800dbf8 <CDC_Receive_FS+0x50>)
 800dbe6:	f7f6 f999 	bl	8003f1c <HAL_GPIO_WritePin>
  }
  return (USBD_OK);
 800dbea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	20000354 	.word	0x20000354
 800dbf8:	48001000 	.word	0x48001000

0800dbfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc0c:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <CDC_Transmit_FS+0x48>)
 800dc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e00b      	b.n	800dc3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc22:	887b      	ldrh	r3, [r7, #2]
 800dc24:	461a      	mov	r2, r3
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	4806      	ldr	r0, [pc, #24]	; (800dc44 <CDC_Transmit_FS+0x48>)
 800dc2a:	f7fe fdea 	bl	800c802 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dc2e:	4805      	ldr	r0, [pc, #20]	; (800dc44 <CDC_Transmit_FS+0x48>)
 800dc30:	f7fe fe15 	bl	800c85e <USBD_CDC_TransmitPacket>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20000354 	.word	0x20000354

0800dc48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	4603      	mov	r3, r0
 800dc50:	6039      	str	r1, [r7, #0]
 800dc52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	2212      	movs	r2, #18
 800dc58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dc5a:	4b03      	ldr	r3, [pc, #12]	; (800dc68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	20000148 	.word	0x20000148

0800dc6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	6039      	str	r1, [r7, #0]
 800dc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2204      	movs	r2, #4
 800dc7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dc7e:	4b03      	ldr	r3, [pc, #12]	; (800dc8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	2000015c 	.word	0x2000015c

0800dc90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	6039      	str	r1, [r7, #0]
 800dc9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc9c:	79fb      	ldrb	r3, [r7, #7]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d105      	bne.n	800dcae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	4907      	ldr	r1, [pc, #28]	; (800dcc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dca6:	4808      	ldr	r0, [pc, #32]	; (800dcc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dca8:	f7ff fdf5 	bl	800d896 <USBD_GetString>
 800dcac:	e004      	b.n	800dcb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcae:	683a      	ldr	r2, [r7, #0]
 800dcb0:	4904      	ldr	r1, [pc, #16]	; (800dcc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcb2:	4805      	ldr	r0, [pc, #20]	; (800dcc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcb4:	f7ff fdef 	bl	800d896 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcb8:	4b02      	ldr	r3, [pc, #8]	; (800dcc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20000de8 	.word	0x20000de8
 800dcc8:	0800f030 	.word	0x0800f030

0800dccc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	6039      	str	r1, [r7, #0]
 800dcd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	4904      	ldr	r1, [pc, #16]	; (800dcec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dcdc:	4804      	ldr	r0, [pc, #16]	; (800dcf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dcde:	f7ff fdda 	bl	800d896 <USBD_GetString>
  return USBD_StrDesc;
 800dce2:	4b02      	ldr	r3, [pc, #8]	; (800dcec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	20000de8 	.word	0x20000de8
 800dcf0:	0800f048 	.word	0x0800f048

0800dcf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	6039      	str	r1, [r7, #0]
 800dcfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	221a      	movs	r2, #26
 800dd04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd06:	f000 f843 	bl	800dd90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd0a:	4b02      	ldr	r3, [pc, #8]	; (800dd14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	20000160 	.word	0x20000160

0800dd18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	4603      	mov	r3, r0
 800dd20:	6039      	str	r1, [r7, #0]
 800dd22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd24:	79fb      	ldrb	r3, [r7, #7]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d105      	bne.n	800dd36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	4907      	ldr	r1, [pc, #28]	; (800dd4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd2e:	4808      	ldr	r0, [pc, #32]	; (800dd50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd30:	f7ff fdb1 	bl	800d896 <USBD_GetString>
 800dd34:	e004      	b.n	800dd40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	4904      	ldr	r1, [pc, #16]	; (800dd4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd3a:	4805      	ldr	r0, [pc, #20]	; (800dd50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd3c:	f7ff fdab 	bl	800d896 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd40:	4b02      	ldr	r3, [pc, #8]	; (800dd4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	20000de8 	.word	0x20000de8
 800dd50:	0800f05c 	.word	0x0800f05c

0800dd54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	6039      	str	r1, [r7, #0]
 800dd5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd60:	79fb      	ldrb	r3, [r7, #7]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d105      	bne.n	800dd72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	4907      	ldr	r1, [pc, #28]	; (800dd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd6a:	4808      	ldr	r0, [pc, #32]	; (800dd8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd6c:	f7ff fd93 	bl	800d896 <USBD_GetString>
 800dd70:	e004      	b.n	800dd7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	4904      	ldr	r1, [pc, #16]	; (800dd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd76:	4805      	ldr	r0, [pc, #20]	; (800dd8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd78:	f7ff fd8d 	bl	800d896 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd7c:	4b02      	ldr	r3, [pc, #8]	; (800dd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	20000de8 	.word	0x20000de8
 800dd8c:	0800f068 	.word	0x0800f068

0800dd90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dd96:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <Get_SerialNum+0x44>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dd9c:	4b0e      	ldr	r3, [pc, #56]	; (800ddd8 <Get_SerialNum+0x48>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dda2:	4b0e      	ldr	r3, [pc, #56]	; (800dddc <Get_SerialNum+0x4c>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4413      	add	r3, r2
 800ddae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d009      	beq.n	800ddca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ddb6:	2208      	movs	r2, #8
 800ddb8:	4909      	ldr	r1, [pc, #36]	; (800dde0 <Get_SerialNum+0x50>)
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 f814 	bl	800dde8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ddc0:	2204      	movs	r2, #4
 800ddc2:	4908      	ldr	r1, [pc, #32]	; (800dde4 <Get_SerialNum+0x54>)
 800ddc4:	68b8      	ldr	r0, [r7, #8]
 800ddc6:	f000 f80f 	bl	800dde8 <IntToUnicode>
  }
}
 800ddca:	bf00      	nop
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	1ffff7ac 	.word	0x1ffff7ac
 800ddd8:	1ffff7b0 	.word	0x1ffff7b0
 800dddc:	1ffff7b4 	.word	0x1ffff7b4
 800dde0:	20000162 	.word	0x20000162
 800dde4:	20000172 	.word	0x20000172

0800dde8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b087      	sub	sp, #28
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	75fb      	strb	r3, [r7, #23]
 800ddfe:	e027      	b.n	800de50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	0f1b      	lsrs	r3, r3, #28
 800de04:	2b09      	cmp	r3, #9
 800de06:	d80b      	bhi.n	800de20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	0f1b      	lsrs	r3, r3, #28
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	005b      	lsls	r3, r3, #1
 800de12:	4619      	mov	r1, r3
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	440b      	add	r3, r1
 800de18:	3230      	adds	r2, #48	; 0x30
 800de1a:	b2d2      	uxtb	r2, r2
 800de1c:	701a      	strb	r2, [r3, #0]
 800de1e:	e00a      	b.n	800de36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	0f1b      	lsrs	r3, r3, #28
 800de24:	b2da      	uxtb	r2, r3
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	4619      	mov	r1, r3
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	440b      	add	r3, r1
 800de30:	3237      	adds	r2, #55	; 0x37
 800de32:	b2d2      	uxtb	r2, r2
 800de34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	011b      	lsls	r3, r3, #4
 800de3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	3301      	adds	r3, #1
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	4413      	add	r3, r2
 800de46:	2200      	movs	r2, #0
 800de48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	3301      	adds	r3, #1
 800de4e:	75fb      	strb	r3, [r7, #23]
 800de50:	7dfa      	ldrb	r2, [r7, #23]
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	429a      	cmp	r2, r3
 800de56:	d3d3      	bcc.n	800de00 <IntToUnicode+0x18>
  }
}
 800de58:	bf00      	nop
 800de5a:	bf00      	nop
 800de5c:	371c      	adds	r7, #28
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
	...

0800de68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b08a      	sub	sp, #40	; 0x28
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de70:	f107 0314 	add.w	r3, r7, #20
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]
 800de78:	605a      	str	r2, [r3, #4]
 800de7a:	609a      	str	r2, [r3, #8]
 800de7c:	60da      	str	r2, [r3, #12]
 800de7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a1c      	ldr	r2, [pc, #112]	; (800def8 <HAL_PCD_MspInit+0x90>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d131      	bne.n	800deee <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de8a:	4b1c      	ldr	r3, [pc, #112]	; (800defc <HAL_PCD_MspInit+0x94>)
 800de8c:	695b      	ldr	r3, [r3, #20]
 800de8e:	4a1b      	ldr	r2, [pc, #108]	; (800defc <HAL_PCD_MspInit+0x94>)
 800de90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de94:	6153      	str	r3, [r2, #20]
 800de96:	4b19      	ldr	r3, [pc, #100]	; (800defc <HAL_PCD_MspInit+0x94>)
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de9e:	613b      	str	r3, [r7, #16]
 800dea0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800dea2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dea8:	2302      	movs	r3, #2
 800deaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deac:	2300      	movs	r3, #0
 800deae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800deb0:	2303      	movs	r3, #3
 800deb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800deb4:	230e      	movs	r3, #14
 800deb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800deb8:	f107 0314 	add.w	r3, r7, #20
 800debc:	4619      	mov	r1, r3
 800debe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dec2:	f7f5 fde3 	bl	8003a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dec6:	4b0d      	ldr	r3, [pc, #52]	; (800defc <HAL_PCD_MspInit+0x94>)
 800dec8:	69db      	ldr	r3, [r3, #28]
 800deca:	4a0c      	ldr	r2, [pc, #48]	; (800defc <HAL_PCD_MspInit+0x94>)
 800decc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ded0:	61d3      	str	r3, [r2, #28]
 800ded2:	4b0a      	ldr	r3, [pc, #40]	; (800defc <HAL_PCD_MspInit+0x94>)
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800dede:	2200      	movs	r2, #0
 800dee0:	2100      	movs	r1, #0
 800dee2:	2014      	movs	r0, #20
 800dee4:	f7f5 fd82 	bl	80039ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800dee8:	2014      	movs	r0, #20
 800deea:	f7f5 fdab 	bl	8003a44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800deee:	bf00      	nop
 800def0:	3728      	adds	r7, #40	; 0x28
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	40005c00 	.word	0x40005c00
 800defc:	40021000 	.word	0x40021000

0800df00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800df14:	4619      	mov	r1, r3
 800df16:	4610      	mov	r0, r2
 800df18:	f7fe fd88 	bl	800ca2c <USBD_LL_SetupStage>
}
 800df1c:	bf00      	nop
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800df36:	78fa      	ldrb	r2, [r7, #3]
 800df38:	6879      	ldr	r1, [r7, #4]
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	440b      	add	r3, r1
 800df44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	4619      	mov	r1, r3
 800df4e:	f7fe fdba 	bl	800cac6 <USBD_LL_DataOutStage>
}
 800df52:	bf00      	nop
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b082      	sub	sp, #8
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	460b      	mov	r3, r1
 800df64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800df6c:	78fa      	ldrb	r2, [r7, #3]
 800df6e:	6879      	ldr	r1, [r7, #4]
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	440b      	add	r3, r1
 800df7a:	333c      	adds	r3, #60	; 0x3c
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	78fb      	ldrb	r3, [r7, #3]
 800df80:	4619      	mov	r1, r3
 800df82:	f7fe fe11 	bl	800cba8 <USBD_LL_DataInStage>
}
 800df86:	bf00      	nop
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b082      	sub	sp, #8
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe ff24 	bl	800cdea <USBD_LL_SOF>
}
 800dfa2:	bf00      	nop
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d001      	beq.n	800dfc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dfbe:	f7f2 fbef 	bl	80007a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800dfc8:	7bfa      	ldrb	r2, [r7, #15]
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fe fed1 	bl	800cd74 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fe fe8a 	bl	800ccf2 <USBD_LL_Reset>
}
 800dfde:	bf00      	nop
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
	...

0800dfe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe fecc 	bl	800cd94 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e004:	4b04      	ldr	r3, [pc, #16]	; (800e018 <HAL_PCD_SuspendCallback+0x30>)
 800e006:	691b      	ldr	r3, [r3, #16]
 800e008:	4a03      	ldr	r2, [pc, #12]	; (800e018 <HAL_PCD_SuspendCallback+0x30>)
 800e00a:	f043 0306 	orr.w	r3, r3, #6
 800e00e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	e000ed00 	.word	0xe000ed00

0800e01c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe fec7 	bl	800cdbe <USBD_LL_Resume>
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e040:	4a28      	ldr	r2, [pc, #160]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a26      	ldr	r2, [pc, #152]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e04c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e050:	4b24      	ldr	r3, [pc, #144]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e052:	4a25      	ldr	r2, [pc, #148]	; (800e0e8 <USBD_LL_Init+0xb0>)
 800e054:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e056:	4b23      	ldr	r3, [pc, #140]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e058:	2208      	movs	r2, #8
 800e05a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e05c:	4b21      	ldr	r3, [pc, #132]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e05e:	2202      	movs	r2, #2
 800e060:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e062:	4b20      	ldr	r3, [pc, #128]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e064:	2202      	movs	r2, #2
 800e066:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e068:	4b1e      	ldr	r3, [pc, #120]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e06e:	4b1d      	ldr	r3, [pc, #116]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e070:	2200      	movs	r2, #0
 800e072:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e074:	481b      	ldr	r0, [pc, #108]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e076:	f7f6 f963 	bl	8004340 <HAL_PCD_Init>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d001      	beq.n	800e084 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e080:	f7f2 fb8e 	bl	80007a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e08a:	2318      	movs	r3, #24
 800e08c:	2200      	movs	r2, #0
 800e08e:	2100      	movs	r1, #0
 800e090:	f7f7 fe0c 	bl	8005cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e09a:	2358      	movs	r3, #88	; 0x58
 800e09c:	2200      	movs	r2, #0
 800e09e:	2180      	movs	r1, #128	; 0x80
 800e0a0:	f7f7 fe04 	bl	8005cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e0aa:	23c0      	movs	r3, #192	; 0xc0
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2181      	movs	r1, #129	; 0x81
 800e0b0:	f7f7 fdfc 	bl	8005cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e0ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	f7f7 fdf3 	bl	8005cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2182      	movs	r1, #130	; 0x82
 800e0d4:	f7f7 fdea 	bl	8005cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20000fe8 	.word	0x20000fe8
 800e0e8:	40005c00 	.word	0x40005c00

0800e0ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e102:	4618      	mov	r0, r3
 800e104:	f7f6 fa08 	bl	8004518 <HAL_PCD_Start>
 800e108:	4603      	mov	r3, r0
 800e10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 f954 	bl	800e3bc <USBD_Get_USB_Status>
 800e114:	4603      	mov	r3, r0
 800e116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e118:	7bbb      	ldrb	r3, [r7, #14]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b084      	sub	sp, #16
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	4608      	mov	r0, r1
 800e12c:	4611      	mov	r1, r2
 800e12e:	461a      	mov	r2, r3
 800e130:	4603      	mov	r3, r0
 800e132:	70fb      	strb	r3, [r7, #3]
 800e134:	460b      	mov	r3, r1
 800e136:	70bb      	strb	r3, [r7, #2]
 800e138:	4613      	mov	r3, r2
 800e13a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e14a:	78bb      	ldrb	r3, [r7, #2]
 800e14c:	883a      	ldrh	r2, [r7, #0]
 800e14e:	78f9      	ldrb	r1, [r7, #3]
 800e150:	f7f6 fb24 	bl	800479c <HAL_PCD_EP_Open>
 800e154:	4603      	mov	r3, r0
 800e156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e158:	7bfb      	ldrb	r3, [r7, #15]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f000 f92e 	bl	800e3bc <USBD_Get_USB_Status>
 800e160:	4603      	mov	r3, r0
 800e162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e164:	7bbb      	ldrb	r3, [r7, #14]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	460b      	mov	r3, r1
 800e178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e188:	78fa      	ldrb	r2, [r7, #3]
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7f6 fb6b 	bl	8004868 <HAL_PCD_EP_Close>
 800e192:	4603      	mov	r3, r0
 800e194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e196:	7bfb      	ldrb	r3, [r7, #15]
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 f90f 	bl	800e3bc <USBD_Get_USB_Status>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1c6:	78fa      	ldrb	r2, [r7, #3]
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7f6 fc2c 	bl	8004a28 <HAL_PCD_EP_SetStall>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 f8f0 	bl	800e3bc <USBD_Get_USB_Status>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b084      	sub	sp, #16
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e204:	78fa      	ldrb	r2, [r7, #3]
 800e206:	4611      	mov	r1, r2
 800e208:	4618      	mov	r0, r3
 800e20a:	f7f6 fc5f 	bl	8004acc <HAL_PCD_EP_ClrStall>
 800e20e:	4603      	mov	r3, r0
 800e210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e212:	7bfb      	ldrb	r3, [r7, #15]
 800e214:	4618      	mov	r0, r3
 800e216:	f000 f8d1 	bl	800e3bc <USBD_Get_USB_Status>
 800e21a:	4603      	mov	r3, r0
 800e21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e23a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e23c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e240:	2b00      	cmp	r3, #0
 800e242:	da0c      	bge.n	800e25e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e244:	78fb      	ldrb	r3, [r7, #3]
 800e246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e24a:	68f9      	ldr	r1, [r7, #12]
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	4613      	mov	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4413      	add	r3, r2
 800e254:	00db      	lsls	r3, r3, #3
 800e256:	440b      	add	r3, r1
 800e258:	3302      	adds	r3, #2
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	e00b      	b.n	800e276 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e25e:	78fb      	ldrb	r3, [r7, #3]
 800e260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e264:	68f9      	ldr	r1, [r7, #12]
 800e266:	4613      	mov	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	440b      	add	r3, r1
 800e270:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e274:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b084      	sub	sp, #16
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	460b      	mov	r3, r1
 800e28c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e28e:	2300      	movs	r3, #0
 800e290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e29c:	78fa      	ldrb	r2, [r7, #3]
 800e29e:	4611      	mov	r1, r2
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7f6 fa56 	bl	8004752 <HAL_PCD_SetAddress>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f000 f885 	bl	800e3bc <USBD_Get_USB_Status>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	607a      	str	r2, [r7, #4]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	72fb      	strb	r3, [r7, #11]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e2e2:	893b      	ldrh	r3, [r7, #8]
 800e2e4:	7af9      	ldrb	r1, [r7, #11]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	f7f6 fb5b 	bl	80049a2 <HAL_PCD_EP_Transmit>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2f0:	7dfb      	ldrb	r3, [r7, #23]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f000 f862 	bl	800e3bc <USBD_Get_USB_Status>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b086      	sub	sp, #24
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	60f8      	str	r0, [r7, #12]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	461a      	mov	r2, r3
 800e312:	460b      	mov	r3, r1
 800e314:	72fb      	strb	r3, [r7, #11]
 800e316:	4613      	mov	r3, r2
 800e318:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e328:	893b      	ldrh	r3, [r7, #8]
 800e32a:	7af9      	ldrb	r1, [r7, #11]
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	f7f6 fae3 	bl	80048f8 <HAL_PCD_EP_Receive>
 800e332:	4603      	mov	r3, r0
 800e334:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e336:	7dfb      	ldrb	r3, [r7, #23]
 800e338:	4618      	mov	r0, r3
 800e33a:	f000 f83f 	bl	800e3bc <USBD_Get_USB_Status>
 800e33e:	4603      	mov	r3, r0
 800e340:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e342:	7dbb      	ldrb	r3, [r7, #22]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3718      	adds	r7, #24
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e35e:	78fa      	ldrb	r2, [r7, #3]
 800e360:	4611      	mov	r1, r2
 800e362:	4618      	mov	r0, r3
 800e364:	f7f6 fb05 	bl	8004972 <HAL_PCD_EP_GetRxCount>
 800e368:	4603      	mov	r3, r0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
	...

0800e374 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e37c:	4b03      	ldr	r3, [pc, #12]	; (800e38c <USBD_static_malloc+0x18>)
}
 800e37e:	4618      	mov	r0, r3
 800e380:	370c      	adds	r7, #12
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	200012d4 	.word	0x200012d4

0800e390 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]

}
 800e398:	bf00      	nop
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3ca:	79fb      	ldrb	r3, [r7, #7]
 800e3cc:	2b03      	cmp	r3, #3
 800e3ce:	d817      	bhi.n	800e400 <USBD_Get_USB_Status+0x44>
 800e3d0:	a201      	add	r2, pc, #4	; (adr r2, 800e3d8 <USBD_Get_USB_Status+0x1c>)
 800e3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d6:	bf00      	nop
 800e3d8:	0800e3e9 	.word	0x0800e3e9
 800e3dc:	0800e3ef 	.word	0x0800e3ef
 800e3e0:	0800e3f5 	.word	0x0800e3f5
 800e3e4:	0800e3fb 	.word	0x0800e3fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ec:	e00b      	b.n	800e406 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e3f2:	e008      	b.n	800e406 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3f8:	e005      	b.n	800e406 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3fa:	2302      	movs	r3, #2
 800e3fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e3fe:	e002      	b.n	800e406 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e400:	2302      	movs	r3, #2
 800e402:	73fb      	strb	r3, [r7, #15]
    break;
 800e404:	bf00      	nop
  }
  return usb_status;
 800e406:	7bfb      	ldrb	r3, [r7, #15]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <__errno>:
 800e414:	4b01      	ldr	r3, [pc, #4]	; (800e41c <__errno+0x8>)
 800e416:	6818      	ldr	r0, [r3, #0]
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	2000017c 	.word	0x2000017c

0800e420 <__libc_init_array>:
 800e420:	b570      	push	{r4, r5, r6, lr}
 800e422:	4d0d      	ldr	r5, [pc, #52]	; (800e458 <__libc_init_array+0x38>)
 800e424:	4c0d      	ldr	r4, [pc, #52]	; (800e45c <__libc_init_array+0x3c>)
 800e426:	1b64      	subs	r4, r4, r5
 800e428:	10a4      	asrs	r4, r4, #2
 800e42a:	2600      	movs	r6, #0
 800e42c:	42a6      	cmp	r6, r4
 800e42e:	d109      	bne.n	800e444 <__libc_init_array+0x24>
 800e430:	4d0b      	ldr	r5, [pc, #44]	; (800e460 <__libc_init_array+0x40>)
 800e432:	4c0c      	ldr	r4, [pc, #48]	; (800e464 <__libc_init_array+0x44>)
 800e434:	f000 fc9e 	bl	800ed74 <_init>
 800e438:	1b64      	subs	r4, r4, r5
 800e43a:	10a4      	asrs	r4, r4, #2
 800e43c:	2600      	movs	r6, #0
 800e43e:	42a6      	cmp	r6, r4
 800e440:	d105      	bne.n	800e44e <__libc_init_array+0x2e>
 800e442:	bd70      	pop	{r4, r5, r6, pc}
 800e444:	f855 3b04 	ldr.w	r3, [r5], #4
 800e448:	4798      	blx	r3
 800e44a:	3601      	adds	r6, #1
 800e44c:	e7ee      	b.n	800e42c <__libc_init_array+0xc>
 800e44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e452:	4798      	blx	r3
 800e454:	3601      	adds	r6, #1
 800e456:	e7f2      	b.n	800e43e <__libc_init_array+0x1e>
 800e458:	0800f0dc 	.word	0x0800f0dc
 800e45c:	0800f0dc 	.word	0x0800f0dc
 800e460:	0800f0dc 	.word	0x0800f0dc
 800e464:	0800f0e0 	.word	0x0800f0e0

0800e468 <malloc>:
 800e468:	4b02      	ldr	r3, [pc, #8]	; (800e474 <malloc+0xc>)
 800e46a:	4601      	mov	r1, r0
 800e46c:	6818      	ldr	r0, [r3, #0]
 800e46e:	f000 b87f 	b.w	800e570 <_malloc_r>
 800e472:	bf00      	nop
 800e474:	2000017c 	.word	0x2000017c

0800e478 <free>:
 800e478:	4b02      	ldr	r3, [pc, #8]	; (800e484 <free+0xc>)
 800e47a:	4601      	mov	r1, r0
 800e47c:	6818      	ldr	r0, [r3, #0]
 800e47e:	f000 b80b 	b.w	800e498 <_free_r>
 800e482:	bf00      	nop
 800e484:	2000017c 	.word	0x2000017c

0800e488 <memset>:
 800e488:	4402      	add	r2, r0
 800e48a:	4603      	mov	r3, r0
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d100      	bne.n	800e492 <memset+0xa>
 800e490:	4770      	bx	lr
 800e492:	f803 1b01 	strb.w	r1, [r3], #1
 800e496:	e7f9      	b.n	800e48c <memset+0x4>

0800e498 <_free_r>:
 800e498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e49a:	2900      	cmp	r1, #0
 800e49c:	d044      	beq.n	800e528 <_free_r+0x90>
 800e49e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a2:	9001      	str	r0, [sp, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f1a1 0404 	sub.w	r4, r1, #4
 800e4aa:	bfb8      	it	lt
 800e4ac:	18e4      	addlt	r4, r4, r3
 800e4ae:	f000 f903 	bl	800e6b8 <__malloc_lock>
 800e4b2:	4a1e      	ldr	r2, [pc, #120]	; (800e52c <_free_r+0x94>)
 800e4b4:	9801      	ldr	r0, [sp, #4]
 800e4b6:	6813      	ldr	r3, [r2, #0]
 800e4b8:	b933      	cbnz	r3, 800e4c8 <_free_r+0x30>
 800e4ba:	6063      	str	r3, [r4, #4]
 800e4bc:	6014      	str	r4, [r2, #0]
 800e4be:	b003      	add	sp, #12
 800e4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4c4:	f000 b8fe 	b.w	800e6c4 <__malloc_unlock>
 800e4c8:	42a3      	cmp	r3, r4
 800e4ca:	d908      	bls.n	800e4de <_free_r+0x46>
 800e4cc:	6825      	ldr	r5, [r4, #0]
 800e4ce:	1961      	adds	r1, r4, r5
 800e4d0:	428b      	cmp	r3, r1
 800e4d2:	bf01      	itttt	eq
 800e4d4:	6819      	ldreq	r1, [r3, #0]
 800e4d6:	685b      	ldreq	r3, [r3, #4]
 800e4d8:	1949      	addeq	r1, r1, r5
 800e4da:	6021      	streq	r1, [r4, #0]
 800e4dc:	e7ed      	b.n	800e4ba <_free_r+0x22>
 800e4de:	461a      	mov	r2, r3
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	b10b      	cbz	r3, 800e4e8 <_free_r+0x50>
 800e4e4:	42a3      	cmp	r3, r4
 800e4e6:	d9fa      	bls.n	800e4de <_free_r+0x46>
 800e4e8:	6811      	ldr	r1, [r2, #0]
 800e4ea:	1855      	adds	r5, r2, r1
 800e4ec:	42a5      	cmp	r5, r4
 800e4ee:	d10b      	bne.n	800e508 <_free_r+0x70>
 800e4f0:	6824      	ldr	r4, [r4, #0]
 800e4f2:	4421      	add	r1, r4
 800e4f4:	1854      	adds	r4, r2, r1
 800e4f6:	42a3      	cmp	r3, r4
 800e4f8:	6011      	str	r1, [r2, #0]
 800e4fa:	d1e0      	bne.n	800e4be <_free_r+0x26>
 800e4fc:	681c      	ldr	r4, [r3, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	6053      	str	r3, [r2, #4]
 800e502:	4421      	add	r1, r4
 800e504:	6011      	str	r1, [r2, #0]
 800e506:	e7da      	b.n	800e4be <_free_r+0x26>
 800e508:	d902      	bls.n	800e510 <_free_r+0x78>
 800e50a:	230c      	movs	r3, #12
 800e50c:	6003      	str	r3, [r0, #0]
 800e50e:	e7d6      	b.n	800e4be <_free_r+0x26>
 800e510:	6825      	ldr	r5, [r4, #0]
 800e512:	1961      	adds	r1, r4, r5
 800e514:	428b      	cmp	r3, r1
 800e516:	bf04      	itt	eq
 800e518:	6819      	ldreq	r1, [r3, #0]
 800e51a:	685b      	ldreq	r3, [r3, #4]
 800e51c:	6063      	str	r3, [r4, #4]
 800e51e:	bf04      	itt	eq
 800e520:	1949      	addeq	r1, r1, r5
 800e522:	6021      	streq	r1, [r4, #0]
 800e524:	6054      	str	r4, [r2, #4]
 800e526:	e7ca      	b.n	800e4be <_free_r+0x26>
 800e528:	b003      	add	sp, #12
 800e52a:	bd30      	pop	{r4, r5, pc}
 800e52c:	200014f4 	.word	0x200014f4

0800e530 <sbrk_aligned>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	4e0e      	ldr	r6, [pc, #56]	; (800e56c <sbrk_aligned+0x3c>)
 800e534:	460c      	mov	r4, r1
 800e536:	6831      	ldr	r1, [r6, #0]
 800e538:	4605      	mov	r5, r0
 800e53a:	b911      	cbnz	r1, 800e542 <sbrk_aligned+0x12>
 800e53c:	f000 f88c 	bl	800e658 <_sbrk_r>
 800e540:	6030      	str	r0, [r6, #0]
 800e542:	4621      	mov	r1, r4
 800e544:	4628      	mov	r0, r5
 800e546:	f000 f887 	bl	800e658 <_sbrk_r>
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	d00a      	beq.n	800e564 <sbrk_aligned+0x34>
 800e54e:	1cc4      	adds	r4, r0, #3
 800e550:	f024 0403 	bic.w	r4, r4, #3
 800e554:	42a0      	cmp	r0, r4
 800e556:	d007      	beq.n	800e568 <sbrk_aligned+0x38>
 800e558:	1a21      	subs	r1, r4, r0
 800e55a:	4628      	mov	r0, r5
 800e55c:	f000 f87c 	bl	800e658 <_sbrk_r>
 800e560:	3001      	adds	r0, #1
 800e562:	d101      	bne.n	800e568 <sbrk_aligned+0x38>
 800e564:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e568:	4620      	mov	r0, r4
 800e56a:	bd70      	pop	{r4, r5, r6, pc}
 800e56c:	200014f8 	.word	0x200014f8

0800e570 <_malloc_r>:
 800e570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e574:	1ccd      	adds	r5, r1, #3
 800e576:	f025 0503 	bic.w	r5, r5, #3
 800e57a:	3508      	adds	r5, #8
 800e57c:	2d0c      	cmp	r5, #12
 800e57e:	bf38      	it	cc
 800e580:	250c      	movcc	r5, #12
 800e582:	2d00      	cmp	r5, #0
 800e584:	4607      	mov	r7, r0
 800e586:	db01      	blt.n	800e58c <_malloc_r+0x1c>
 800e588:	42a9      	cmp	r1, r5
 800e58a:	d905      	bls.n	800e598 <_malloc_r+0x28>
 800e58c:	230c      	movs	r3, #12
 800e58e:	603b      	str	r3, [r7, #0]
 800e590:	2600      	movs	r6, #0
 800e592:	4630      	mov	r0, r6
 800e594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e598:	4e2e      	ldr	r6, [pc, #184]	; (800e654 <_malloc_r+0xe4>)
 800e59a:	f000 f88d 	bl	800e6b8 <__malloc_lock>
 800e59e:	6833      	ldr	r3, [r6, #0]
 800e5a0:	461c      	mov	r4, r3
 800e5a2:	bb34      	cbnz	r4, 800e5f2 <_malloc_r+0x82>
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	f7ff ffc2 	bl	800e530 <sbrk_aligned>
 800e5ac:	1c43      	adds	r3, r0, #1
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	d14d      	bne.n	800e64e <_malloc_r+0xde>
 800e5b2:	6834      	ldr	r4, [r6, #0]
 800e5b4:	4626      	mov	r6, r4
 800e5b6:	2e00      	cmp	r6, #0
 800e5b8:	d140      	bne.n	800e63c <_malloc_r+0xcc>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	4631      	mov	r1, r6
 800e5be:	4638      	mov	r0, r7
 800e5c0:	eb04 0803 	add.w	r8, r4, r3
 800e5c4:	f000 f848 	bl	800e658 <_sbrk_r>
 800e5c8:	4580      	cmp	r8, r0
 800e5ca:	d13a      	bne.n	800e642 <_malloc_r+0xd2>
 800e5cc:	6821      	ldr	r1, [r4, #0]
 800e5ce:	3503      	adds	r5, #3
 800e5d0:	1a6d      	subs	r5, r5, r1
 800e5d2:	f025 0503 	bic.w	r5, r5, #3
 800e5d6:	3508      	adds	r5, #8
 800e5d8:	2d0c      	cmp	r5, #12
 800e5da:	bf38      	it	cc
 800e5dc:	250c      	movcc	r5, #12
 800e5de:	4629      	mov	r1, r5
 800e5e0:	4638      	mov	r0, r7
 800e5e2:	f7ff ffa5 	bl	800e530 <sbrk_aligned>
 800e5e6:	3001      	adds	r0, #1
 800e5e8:	d02b      	beq.n	800e642 <_malloc_r+0xd2>
 800e5ea:	6823      	ldr	r3, [r4, #0]
 800e5ec:	442b      	add	r3, r5
 800e5ee:	6023      	str	r3, [r4, #0]
 800e5f0:	e00e      	b.n	800e610 <_malloc_r+0xa0>
 800e5f2:	6822      	ldr	r2, [r4, #0]
 800e5f4:	1b52      	subs	r2, r2, r5
 800e5f6:	d41e      	bmi.n	800e636 <_malloc_r+0xc6>
 800e5f8:	2a0b      	cmp	r2, #11
 800e5fa:	d916      	bls.n	800e62a <_malloc_r+0xba>
 800e5fc:	1961      	adds	r1, r4, r5
 800e5fe:	42a3      	cmp	r3, r4
 800e600:	6025      	str	r5, [r4, #0]
 800e602:	bf18      	it	ne
 800e604:	6059      	strne	r1, [r3, #4]
 800e606:	6863      	ldr	r3, [r4, #4]
 800e608:	bf08      	it	eq
 800e60a:	6031      	streq	r1, [r6, #0]
 800e60c:	5162      	str	r2, [r4, r5]
 800e60e:	604b      	str	r3, [r1, #4]
 800e610:	4638      	mov	r0, r7
 800e612:	f104 060b 	add.w	r6, r4, #11
 800e616:	f000 f855 	bl	800e6c4 <__malloc_unlock>
 800e61a:	f026 0607 	bic.w	r6, r6, #7
 800e61e:	1d23      	adds	r3, r4, #4
 800e620:	1af2      	subs	r2, r6, r3
 800e622:	d0b6      	beq.n	800e592 <_malloc_r+0x22>
 800e624:	1b9b      	subs	r3, r3, r6
 800e626:	50a3      	str	r3, [r4, r2]
 800e628:	e7b3      	b.n	800e592 <_malloc_r+0x22>
 800e62a:	6862      	ldr	r2, [r4, #4]
 800e62c:	42a3      	cmp	r3, r4
 800e62e:	bf0c      	ite	eq
 800e630:	6032      	streq	r2, [r6, #0]
 800e632:	605a      	strne	r2, [r3, #4]
 800e634:	e7ec      	b.n	800e610 <_malloc_r+0xa0>
 800e636:	4623      	mov	r3, r4
 800e638:	6864      	ldr	r4, [r4, #4]
 800e63a:	e7b2      	b.n	800e5a2 <_malloc_r+0x32>
 800e63c:	4634      	mov	r4, r6
 800e63e:	6876      	ldr	r6, [r6, #4]
 800e640:	e7b9      	b.n	800e5b6 <_malloc_r+0x46>
 800e642:	230c      	movs	r3, #12
 800e644:	603b      	str	r3, [r7, #0]
 800e646:	4638      	mov	r0, r7
 800e648:	f000 f83c 	bl	800e6c4 <__malloc_unlock>
 800e64c:	e7a1      	b.n	800e592 <_malloc_r+0x22>
 800e64e:	6025      	str	r5, [r4, #0]
 800e650:	e7de      	b.n	800e610 <_malloc_r+0xa0>
 800e652:	bf00      	nop
 800e654:	200014f4 	.word	0x200014f4

0800e658 <_sbrk_r>:
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4d06      	ldr	r5, [pc, #24]	; (800e674 <_sbrk_r+0x1c>)
 800e65c:	2300      	movs	r3, #0
 800e65e:	4604      	mov	r4, r0
 800e660:	4608      	mov	r0, r1
 800e662:	602b      	str	r3, [r5, #0]
 800e664:	f7f2 f98e 	bl	8000984 <_sbrk>
 800e668:	1c43      	adds	r3, r0, #1
 800e66a:	d102      	bne.n	800e672 <_sbrk_r+0x1a>
 800e66c:	682b      	ldr	r3, [r5, #0]
 800e66e:	b103      	cbz	r3, 800e672 <_sbrk_r+0x1a>
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	bd38      	pop	{r3, r4, r5, pc}
 800e674:	200014fc 	.word	0x200014fc

0800e678 <siprintf>:
 800e678:	b40e      	push	{r1, r2, r3}
 800e67a:	b500      	push	{lr}
 800e67c:	b09c      	sub	sp, #112	; 0x70
 800e67e:	ab1d      	add	r3, sp, #116	; 0x74
 800e680:	9002      	str	r0, [sp, #8]
 800e682:	9006      	str	r0, [sp, #24]
 800e684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e688:	4809      	ldr	r0, [pc, #36]	; (800e6b0 <siprintf+0x38>)
 800e68a:	9107      	str	r1, [sp, #28]
 800e68c:	9104      	str	r1, [sp, #16]
 800e68e:	4909      	ldr	r1, [pc, #36]	; (800e6b4 <siprintf+0x3c>)
 800e690:	f853 2b04 	ldr.w	r2, [r3], #4
 800e694:	9105      	str	r1, [sp, #20]
 800e696:	6800      	ldr	r0, [r0, #0]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	a902      	add	r1, sp, #8
 800e69c:	f000 f874 	bl	800e788 <_svfiprintf_r>
 800e6a0:	9b02      	ldr	r3, [sp, #8]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	701a      	strb	r2, [r3, #0]
 800e6a6:	b01c      	add	sp, #112	; 0x70
 800e6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6ac:	b003      	add	sp, #12
 800e6ae:	4770      	bx	lr
 800e6b0:	2000017c 	.word	0x2000017c
 800e6b4:	ffff0208 	.word	0xffff0208

0800e6b8 <__malloc_lock>:
 800e6b8:	4801      	ldr	r0, [pc, #4]	; (800e6c0 <__malloc_lock+0x8>)
 800e6ba:	f000 baf9 	b.w	800ecb0 <__retarget_lock_acquire_recursive>
 800e6be:	bf00      	nop
 800e6c0:	20001500 	.word	0x20001500

0800e6c4 <__malloc_unlock>:
 800e6c4:	4801      	ldr	r0, [pc, #4]	; (800e6cc <__malloc_unlock+0x8>)
 800e6c6:	f000 baf4 	b.w	800ecb2 <__retarget_lock_release_recursive>
 800e6ca:	bf00      	nop
 800e6cc:	20001500 	.word	0x20001500

0800e6d0 <__ssputs_r>:
 800e6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d4:	688e      	ldr	r6, [r1, #8]
 800e6d6:	429e      	cmp	r6, r3
 800e6d8:	4682      	mov	sl, r0
 800e6da:	460c      	mov	r4, r1
 800e6dc:	4690      	mov	r8, r2
 800e6de:	461f      	mov	r7, r3
 800e6e0:	d838      	bhi.n	800e754 <__ssputs_r+0x84>
 800e6e2:	898a      	ldrh	r2, [r1, #12]
 800e6e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6e8:	d032      	beq.n	800e750 <__ssputs_r+0x80>
 800e6ea:	6825      	ldr	r5, [r4, #0]
 800e6ec:	6909      	ldr	r1, [r1, #16]
 800e6ee:	eba5 0901 	sub.w	r9, r5, r1
 800e6f2:	6965      	ldr	r5, [r4, #20]
 800e6f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	444b      	add	r3, r9
 800e700:	106d      	asrs	r5, r5, #1
 800e702:	429d      	cmp	r5, r3
 800e704:	bf38      	it	cc
 800e706:	461d      	movcc	r5, r3
 800e708:	0553      	lsls	r3, r2, #21
 800e70a:	d531      	bpl.n	800e770 <__ssputs_r+0xa0>
 800e70c:	4629      	mov	r1, r5
 800e70e:	f7ff ff2f 	bl	800e570 <_malloc_r>
 800e712:	4606      	mov	r6, r0
 800e714:	b950      	cbnz	r0, 800e72c <__ssputs_r+0x5c>
 800e716:	230c      	movs	r3, #12
 800e718:	f8ca 3000 	str.w	r3, [sl]
 800e71c:	89a3      	ldrh	r3, [r4, #12]
 800e71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e722:	81a3      	strh	r3, [r4, #12]
 800e724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e72c:	6921      	ldr	r1, [r4, #16]
 800e72e:	464a      	mov	r2, r9
 800e730:	f000 fac0 	bl	800ecb4 <memcpy>
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e73a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e73e:	81a3      	strh	r3, [r4, #12]
 800e740:	6126      	str	r6, [r4, #16]
 800e742:	6165      	str	r5, [r4, #20]
 800e744:	444e      	add	r6, r9
 800e746:	eba5 0509 	sub.w	r5, r5, r9
 800e74a:	6026      	str	r6, [r4, #0]
 800e74c:	60a5      	str	r5, [r4, #8]
 800e74e:	463e      	mov	r6, r7
 800e750:	42be      	cmp	r6, r7
 800e752:	d900      	bls.n	800e756 <__ssputs_r+0x86>
 800e754:	463e      	mov	r6, r7
 800e756:	6820      	ldr	r0, [r4, #0]
 800e758:	4632      	mov	r2, r6
 800e75a:	4641      	mov	r1, r8
 800e75c:	f000 fab8 	bl	800ecd0 <memmove>
 800e760:	68a3      	ldr	r3, [r4, #8]
 800e762:	1b9b      	subs	r3, r3, r6
 800e764:	60a3      	str	r3, [r4, #8]
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	4433      	add	r3, r6
 800e76a:	6023      	str	r3, [r4, #0]
 800e76c:	2000      	movs	r0, #0
 800e76e:	e7db      	b.n	800e728 <__ssputs_r+0x58>
 800e770:	462a      	mov	r2, r5
 800e772:	f000 fac7 	bl	800ed04 <_realloc_r>
 800e776:	4606      	mov	r6, r0
 800e778:	2800      	cmp	r0, #0
 800e77a:	d1e1      	bne.n	800e740 <__ssputs_r+0x70>
 800e77c:	6921      	ldr	r1, [r4, #16]
 800e77e:	4650      	mov	r0, sl
 800e780:	f7ff fe8a 	bl	800e498 <_free_r>
 800e784:	e7c7      	b.n	800e716 <__ssputs_r+0x46>
	...

0800e788 <_svfiprintf_r>:
 800e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78c:	4698      	mov	r8, r3
 800e78e:	898b      	ldrh	r3, [r1, #12]
 800e790:	061b      	lsls	r3, r3, #24
 800e792:	b09d      	sub	sp, #116	; 0x74
 800e794:	4607      	mov	r7, r0
 800e796:	460d      	mov	r5, r1
 800e798:	4614      	mov	r4, r2
 800e79a:	d50e      	bpl.n	800e7ba <_svfiprintf_r+0x32>
 800e79c:	690b      	ldr	r3, [r1, #16]
 800e79e:	b963      	cbnz	r3, 800e7ba <_svfiprintf_r+0x32>
 800e7a0:	2140      	movs	r1, #64	; 0x40
 800e7a2:	f7ff fee5 	bl	800e570 <_malloc_r>
 800e7a6:	6028      	str	r0, [r5, #0]
 800e7a8:	6128      	str	r0, [r5, #16]
 800e7aa:	b920      	cbnz	r0, 800e7b6 <_svfiprintf_r+0x2e>
 800e7ac:	230c      	movs	r3, #12
 800e7ae:	603b      	str	r3, [r7, #0]
 800e7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7b4:	e0d1      	b.n	800e95a <_svfiprintf_r+0x1d2>
 800e7b6:	2340      	movs	r3, #64	; 0x40
 800e7b8:	616b      	str	r3, [r5, #20]
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e7be:	2320      	movs	r3, #32
 800e7c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7c8:	2330      	movs	r3, #48	; 0x30
 800e7ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e974 <_svfiprintf_r+0x1ec>
 800e7ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7d2:	f04f 0901 	mov.w	r9, #1
 800e7d6:	4623      	mov	r3, r4
 800e7d8:	469a      	mov	sl, r3
 800e7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7de:	b10a      	cbz	r2, 800e7e4 <_svfiprintf_r+0x5c>
 800e7e0:	2a25      	cmp	r2, #37	; 0x25
 800e7e2:	d1f9      	bne.n	800e7d8 <_svfiprintf_r+0x50>
 800e7e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e7e8:	d00b      	beq.n	800e802 <_svfiprintf_r+0x7a>
 800e7ea:	465b      	mov	r3, fp
 800e7ec:	4622      	mov	r2, r4
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	4638      	mov	r0, r7
 800e7f2:	f7ff ff6d 	bl	800e6d0 <__ssputs_r>
 800e7f6:	3001      	adds	r0, #1
 800e7f8:	f000 80aa 	beq.w	800e950 <_svfiprintf_r+0x1c8>
 800e7fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7fe:	445a      	add	r2, fp
 800e800:	9209      	str	r2, [sp, #36]	; 0x24
 800e802:	f89a 3000 	ldrb.w	r3, [sl]
 800e806:	2b00      	cmp	r3, #0
 800e808:	f000 80a2 	beq.w	800e950 <_svfiprintf_r+0x1c8>
 800e80c:	2300      	movs	r3, #0
 800e80e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e816:	f10a 0a01 	add.w	sl, sl, #1
 800e81a:	9304      	str	r3, [sp, #16]
 800e81c:	9307      	str	r3, [sp, #28]
 800e81e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e822:	931a      	str	r3, [sp, #104]	; 0x68
 800e824:	4654      	mov	r4, sl
 800e826:	2205      	movs	r2, #5
 800e828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e82c:	4851      	ldr	r0, [pc, #324]	; (800e974 <_svfiprintf_r+0x1ec>)
 800e82e:	f7f1 fcd7 	bl	80001e0 <memchr>
 800e832:	9a04      	ldr	r2, [sp, #16]
 800e834:	b9d8      	cbnz	r0, 800e86e <_svfiprintf_r+0xe6>
 800e836:	06d0      	lsls	r0, r2, #27
 800e838:	bf44      	itt	mi
 800e83a:	2320      	movmi	r3, #32
 800e83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e840:	0711      	lsls	r1, r2, #28
 800e842:	bf44      	itt	mi
 800e844:	232b      	movmi	r3, #43	; 0x2b
 800e846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e84a:	f89a 3000 	ldrb.w	r3, [sl]
 800e84e:	2b2a      	cmp	r3, #42	; 0x2a
 800e850:	d015      	beq.n	800e87e <_svfiprintf_r+0xf6>
 800e852:	9a07      	ldr	r2, [sp, #28]
 800e854:	4654      	mov	r4, sl
 800e856:	2000      	movs	r0, #0
 800e858:	f04f 0c0a 	mov.w	ip, #10
 800e85c:	4621      	mov	r1, r4
 800e85e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e862:	3b30      	subs	r3, #48	; 0x30
 800e864:	2b09      	cmp	r3, #9
 800e866:	d94e      	bls.n	800e906 <_svfiprintf_r+0x17e>
 800e868:	b1b0      	cbz	r0, 800e898 <_svfiprintf_r+0x110>
 800e86a:	9207      	str	r2, [sp, #28]
 800e86c:	e014      	b.n	800e898 <_svfiprintf_r+0x110>
 800e86e:	eba0 0308 	sub.w	r3, r0, r8
 800e872:	fa09 f303 	lsl.w	r3, r9, r3
 800e876:	4313      	orrs	r3, r2
 800e878:	9304      	str	r3, [sp, #16]
 800e87a:	46a2      	mov	sl, r4
 800e87c:	e7d2      	b.n	800e824 <_svfiprintf_r+0x9c>
 800e87e:	9b03      	ldr	r3, [sp, #12]
 800e880:	1d19      	adds	r1, r3, #4
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	9103      	str	r1, [sp, #12]
 800e886:	2b00      	cmp	r3, #0
 800e888:	bfbb      	ittet	lt
 800e88a:	425b      	neglt	r3, r3
 800e88c:	f042 0202 	orrlt.w	r2, r2, #2
 800e890:	9307      	strge	r3, [sp, #28]
 800e892:	9307      	strlt	r3, [sp, #28]
 800e894:	bfb8      	it	lt
 800e896:	9204      	strlt	r2, [sp, #16]
 800e898:	7823      	ldrb	r3, [r4, #0]
 800e89a:	2b2e      	cmp	r3, #46	; 0x2e
 800e89c:	d10c      	bne.n	800e8b8 <_svfiprintf_r+0x130>
 800e89e:	7863      	ldrb	r3, [r4, #1]
 800e8a0:	2b2a      	cmp	r3, #42	; 0x2a
 800e8a2:	d135      	bne.n	800e910 <_svfiprintf_r+0x188>
 800e8a4:	9b03      	ldr	r3, [sp, #12]
 800e8a6:	1d1a      	adds	r2, r3, #4
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	9203      	str	r2, [sp, #12]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	bfb8      	it	lt
 800e8b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e8b4:	3402      	adds	r4, #2
 800e8b6:	9305      	str	r3, [sp, #20]
 800e8b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e984 <_svfiprintf_r+0x1fc>
 800e8bc:	7821      	ldrb	r1, [r4, #0]
 800e8be:	2203      	movs	r2, #3
 800e8c0:	4650      	mov	r0, sl
 800e8c2:	f7f1 fc8d 	bl	80001e0 <memchr>
 800e8c6:	b140      	cbz	r0, 800e8da <_svfiprintf_r+0x152>
 800e8c8:	2340      	movs	r3, #64	; 0x40
 800e8ca:	eba0 000a 	sub.w	r0, r0, sl
 800e8ce:	fa03 f000 	lsl.w	r0, r3, r0
 800e8d2:	9b04      	ldr	r3, [sp, #16]
 800e8d4:	4303      	orrs	r3, r0
 800e8d6:	3401      	adds	r4, #1
 800e8d8:	9304      	str	r3, [sp, #16]
 800e8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8de:	4826      	ldr	r0, [pc, #152]	; (800e978 <_svfiprintf_r+0x1f0>)
 800e8e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8e4:	2206      	movs	r2, #6
 800e8e6:	f7f1 fc7b 	bl	80001e0 <memchr>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d038      	beq.n	800e960 <_svfiprintf_r+0x1d8>
 800e8ee:	4b23      	ldr	r3, [pc, #140]	; (800e97c <_svfiprintf_r+0x1f4>)
 800e8f0:	bb1b      	cbnz	r3, 800e93a <_svfiprintf_r+0x1b2>
 800e8f2:	9b03      	ldr	r3, [sp, #12]
 800e8f4:	3307      	adds	r3, #7
 800e8f6:	f023 0307 	bic.w	r3, r3, #7
 800e8fa:	3308      	adds	r3, #8
 800e8fc:	9303      	str	r3, [sp, #12]
 800e8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e900:	4433      	add	r3, r6
 800e902:	9309      	str	r3, [sp, #36]	; 0x24
 800e904:	e767      	b.n	800e7d6 <_svfiprintf_r+0x4e>
 800e906:	fb0c 3202 	mla	r2, ip, r2, r3
 800e90a:	460c      	mov	r4, r1
 800e90c:	2001      	movs	r0, #1
 800e90e:	e7a5      	b.n	800e85c <_svfiprintf_r+0xd4>
 800e910:	2300      	movs	r3, #0
 800e912:	3401      	adds	r4, #1
 800e914:	9305      	str	r3, [sp, #20]
 800e916:	4619      	mov	r1, r3
 800e918:	f04f 0c0a 	mov.w	ip, #10
 800e91c:	4620      	mov	r0, r4
 800e91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e922:	3a30      	subs	r2, #48	; 0x30
 800e924:	2a09      	cmp	r2, #9
 800e926:	d903      	bls.n	800e930 <_svfiprintf_r+0x1a8>
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d0c5      	beq.n	800e8b8 <_svfiprintf_r+0x130>
 800e92c:	9105      	str	r1, [sp, #20]
 800e92e:	e7c3      	b.n	800e8b8 <_svfiprintf_r+0x130>
 800e930:	fb0c 2101 	mla	r1, ip, r1, r2
 800e934:	4604      	mov	r4, r0
 800e936:	2301      	movs	r3, #1
 800e938:	e7f0      	b.n	800e91c <_svfiprintf_r+0x194>
 800e93a:	ab03      	add	r3, sp, #12
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	462a      	mov	r2, r5
 800e940:	4b0f      	ldr	r3, [pc, #60]	; (800e980 <_svfiprintf_r+0x1f8>)
 800e942:	a904      	add	r1, sp, #16
 800e944:	4638      	mov	r0, r7
 800e946:	f3af 8000 	nop.w
 800e94a:	1c42      	adds	r2, r0, #1
 800e94c:	4606      	mov	r6, r0
 800e94e:	d1d6      	bne.n	800e8fe <_svfiprintf_r+0x176>
 800e950:	89ab      	ldrh	r3, [r5, #12]
 800e952:	065b      	lsls	r3, r3, #25
 800e954:	f53f af2c 	bmi.w	800e7b0 <_svfiprintf_r+0x28>
 800e958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e95a:	b01d      	add	sp, #116	; 0x74
 800e95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e960:	ab03      	add	r3, sp, #12
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	462a      	mov	r2, r5
 800e966:	4b06      	ldr	r3, [pc, #24]	; (800e980 <_svfiprintf_r+0x1f8>)
 800e968:	a904      	add	r1, sp, #16
 800e96a:	4638      	mov	r0, r7
 800e96c:	f000 f87a 	bl	800ea64 <_printf_i>
 800e970:	e7eb      	b.n	800e94a <_svfiprintf_r+0x1c2>
 800e972:	bf00      	nop
 800e974:	0800f0a8 	.word	0x0800f0a8
 800e978:	0800f0b2 	.word	0x0800f0b2
 800e97c:	00000000 	.word	0x00000000
 800e980:	0800e6d1 	.word	0x0800e6d1
 800e984:	0800f0ae 	.word	0x0800f0ae

0800e988 <_printf_common>:
 800e988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e98c:	4616      	mov	r6, r2
 800e98e:	4699      	mov	r9, r3
 800e990:	688a      	ldr	r2, [r1, #8]
 800e992:	690b      	ldr	r3, [r1, #16]
 800e994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e998:	4293      	cmp	r3, r2
 800e99a:	bfb8      	it	lt
 800e99c:	4613      	movlt	r3, r2
 800e99e:	6033      	str	r3, [r6, #0]
 800e9a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e9a4:	4607      	mov	r7, r0
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	b10a      	cbz	r2, 800e9ae <_printf_common+0x26>
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	6033      	str	r3, [r6, #0]
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	0699      	lsls	r1, r3, #26
 800e9b2:	bf42      	ittt	mi
 800e9b4:	6833      	ldrmi	r3, [r6, #0]
 800e9b6:	3302      	addmi	r3, #2
 800e9b8:	6033      	strmi	r3, [r6, #0]
 800e9ba:	6825      	ldr	r5, [r4, #0]
 800e9bc:	f015 0506 	ands.w	r5, r5, #6
 800e9c0:	d106      	bne.n	800e9d0 <_printf_common+0x48>
 800e9c2:	f104 0a19 	add.w	sl, r4, #25
 800e9c6:	68e3      	ldr	r3, [r4, #12]
 800e9c8:	6832      	ldr	r2, [r6, #0]
 800e9ca:	1a9b      	subs	r3, r3, r2
 800e9cc:	42ab      	cmp	r3, r5
 800e9ce:	dc26      	bgt.n	800ea1e <_printf_common+0x96>
 800e9d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9d4:	1e13      	subs	r3, r2, #0
 800e9d6:	6822      	ldr	r2, [r4, #0]
 800e9d8:	bf18      	it	ne
 800e9da:	2301      	movne	r3, #1
 800e9dc:	0692      	lsls	r2, r2, #26
 800e9de:	d42b      	bmi.n	800ea38 <_printf_common+0xb0>
 800e9e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9e4:	4649      	mov	r1, r9
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	47c0      	blx	r8
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	d01e      	beq.n	800ea2c <_printf_common+0xa4>
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	68e5      	ldr	r5, [r4, #12]
 800e9f2:	6832      	ldr	r2, [r6, #0]
 800e9f4:	f003 0306 	and.w	r3, r3, #6
 800e9f8:	2b04      	cmp	r3, #4
 800e9fa:	bf08      	it	eq
 800e9fc:	1aad      	subeq	r5, r5, r2
 800e9fe:	68a3      	ldr	r3, [r4, #8]
 800ea00:	6922      	ldr	r2, [r4, #16]
 800ea02:	bf0c      	ite	eq
 800ea04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea08:	2500      	movne	r5, #0
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	bfc4      	itt	gt
 800ea0e:	1a9b      	subgt	r3, r3, r2
 800ea10:	18ed      	addgt	r5, r5, r3
 800ea12:	2600      	movs	r6, #0
 800ea14:	341a      	adds	r4, #26
 800ea16:	42b5      	cmp	r5, r6
 800ea18:	d11a      	bne.n	800ea50 <_printf_common+0xc8>
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	e008      	b.n	800ea30 <_printf_common+0xa8>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	4652      	mov	r2, sl
 800ea22:	4649      	mov	r1, r9
 800ea24:	4638      	mov	r0, r7
 800ea26:	47c0      	blx	r8
 800ea28:	3001      	adds	r0, #1
 800ea2a:	d103      	bne.n	800ea34 <_printf_common+0xac>
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea34:	3501      	adds	r5, #1
 800ea36:	e7c6      	b.n	800e9c6 <_printf_common+0x3e>
 800ea38:	18e1      	adds	r1, r4, r3
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	2030      	movs	r0, #48	; 0x30
 800ea3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea42:	4422      	add	r2, r4
 800ea44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea4c:	3302      	adds	r3, #2
 800ea4e:	e7c7      	b.n	800e9e0 <_printf_common+0x58>
 800ea50:	2301      	movs	r3, #1
 800ea52:	4622      	mov	r2, r4
 800ea54:	4649      	mov	r1, r9
 800ea56:	4638      	mov	r0, r7
 800ea58:	47c0      	blx	r8
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	d0e6      	beq.n	800ea2c <_printf_common+0xa4>
 800ea5e:	3601      	adds	r6, #1
 800ea60:	e7d9      	b.n	800ea16 <_printf_common+0x8e>
	...

0800ea64 <_printf_i>:
 800ea64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea68:	7e0f      	ldrb	r7, [r1, #24]
 800ea6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea6c:	2f78      	cmp	r7, #120	; 0x78
 800ea6e:	4691      	mov	r9, r2
 800ea70:	4680      	mov	r8, r0
 800ea72:	460c      	mov	r4, r1
 800ea74:	469a      	mov	sl, r3
 800ea76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea7a:	d807      	bhi.n	800ea8c <_printf_i+0x28>
 800ea7c:	2f62      	cmp	r7, #98	; 0x62
 800ea7e:	d80a      	bhi.n	800ea96 <_printf_i+0x32>
 800ea80:	2f00      	cmp	r7, #0
 800ea82:	f000 80d8 	beq.w	800ec36 <_printf_i+0x1d2>
 800ea86:	2f58      	cmp	r7, #88	; 0x58
 800ea88:	f000 80a3 	beq.w	800ebd2 <_printf_i+0x16e>
 800ea8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea94:	e03a      	b.n	800eb0c <_printf_i+0xa8>
 800ea96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea9a:	2b15      	cmp	r3, #21
 800ea9c:	d8f6      	bhi.n	800ea8c <_printf_i+0x28>
 800ea9e:	a101      	add	r1, pc, #4	; (adr r1, 800eaa4 <_printf_i+0x40>)
 800eaa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eaa4:	0800eafd 	.word	0x0800eafd
 800eaa8:	0800eb11 	.word	0x0800eb11
 800eaac:	0800ea8d 	.word	0x0800ea8d
 800eab0:	0800ea8d 	.word	0x0800ea8d
 800eab4:	0800ea8d 	.word	0x0800ea8d
 800eab8:	0800ea8d 	.word	0x0800ea8d
 800eabc:	0800eb11 	.word	0x0800eb11
 800eac0:	0800ea8d 	.word	0x0800ea8d
 800eac4:	0800ea8d 	.word	0x0800ea8d
 800eac8:	0800ea8d 	.word	0x0800ea8d
 800eacc:	0800ea8d 	.word	0x0800ea8d
 800ead0:	0800ec1d 	.word	0x0800ec1d
 800ead4:	0800eb41 	.word	0x0800eb41
 800ead8:	0800ebff 	.word	0x0800ebff
 800eadc:	0800ea8d 	.word	0x0800ea8d
 800eae0:	0800ea8d 	.word	0x0800ea8d
 800eae4:	0800ec3f 	.word	0x0800ec3f
 800eae8:	0800ea8d 	.word	0x0800ea8d
 800eaec:	0800eb41 	.word	0x0800eb41
 800eaf0:	0800ea8d 	.word	0x0800ea8d
 800eaf4:	0800ea8d 	.word	0x0800ea8d
 800eaf8:	0800ec07 	.word	0x0800ec07
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	1d1a      	adds	r2, r3, #4
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	602a      	str	r2, [r5, #0]
 800eb04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	e0a3      	b.n	800ec58 <_printf_i+0x1f4>
 800eb10:	6820      	ldr	r0, [r4, #0]
 800eb12:	6829      	ldr	r1, [r5, #0]
 800eb14:	0606      	lsls	r6, r0, #24
 800eb16:	f101 0304 	add.w	r3, r1, #4
 800eb1a:	d50a      	bpl.n	800eb32 <_printf_i+0xce>
 800eb1c:	680e      	ldr	r6, [r1, #0]
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	2e00      	cmp	r6, #0
 800eb22:	da03      	bge.n	800eb2c <_printf_i+0xc8>
 800eb24:	232d      	movs	r3, #45	; 0x2d
 800eb26:	4276      	negs	r6, r6
 800eb28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb2c:	485e      	ldr	r0, [pc, #376]	; (800eca8 <_printf_i+0x244>)
 800eb2e:	230a      	movs	r3, #10
 800eb30:	e019      	b.n	800eb66 <_printf_i+0x102>
 800eb32:	680e      	ldr	r6, [r1, #0]
 800eb34:	602b      	str	r3, [r5, #0]
 800eb36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb3a:	bf18      	it	ne
 800eb3c:	b236      	sxthne	r6, r6
 800eb3e:	e7ef      	b.n	800eb20 <_printf_i+0xbc>
 800eb40:	682b      	ldr	r3, [r5, #0]
 800eb42:	6820      	ldr	r0, [r4, #0]
 800eb44:	1d19      	adds	r1, r3, #4
 800eb46:	6029      	str	r1, [r5, #0]
 800eb48:	0601      	lsls	r1, r0, #24
 800eb4a:	d501      	bpl.n	800eb50 <_printf_i+0xec>
 800eb4c:	681e      	ldr	r6, [r3, #0]
 800eb4e:	e002      	b.n	800eb56 <_printf_i+0xf2>
 800eb50:	0646      	lsls	r6, r0, #25
 800eb52:	d5fb      	bpl.n	800eb4c <_printf_i+0xe8>
 800eb54:	881e      	ldrh	r6, [r3, #0]
 800eb56:	4854      	ldr	r0, [pc, #336]	; (800eca8 <_printf_i+0x244>)
 800eb58:	2f6f      	cmp	r7, #111	; 0x6f
 800eb5a:	bf0c      	ite	eq
 800eb5c:	2308      	moveq	r3, #8
 800eb5e:	230a      	movne	r3, #10
 800eb60:	2100      	movs	r1, #0
 800eb62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb66:	6865      	ldr	r5, [r4, #4]
 800eb68:	60a5      	str	r5, [r4, #8]
 800eb6a:	2d00      	cmp	r5, #0
 800eb6c:	bfa2      	ittt	ge
 800eb6e:	6821      	ldrge	r1, [r4, #0]
 800eb70:	f021 0104 	bicge.w	r1, r1, #4
 800eb74:	6021      	strge	r1, [r4, #0]
 800eb76:	b90e      	cbnz	r6, 800eb7c <_printf_i+0x118>
 800eb78:	2d00      	cmp	r5, #0
 800eb7a:	d04d      	beq.n	800ec18 <_printf_i+0x1b4>
 800eb7c:	4615      	mov	r5, r2
 800eb7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb82:	fb03 6711 	mls	r7, r3, r1, r6
 800eb86:	5dc7      	ldrb	r7, [r0, r7]
 800eb88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb8c:	4637      	mov	r7, r6
 800eb8e:	42bb      	cmp	r3, r7
 800eb90:	460e      	mov	r6, r1
 800eb92:	d9f4      	bls.n	800eb7e <_printf_i+0x11a>
 800eb94:	2b08      	cmp	r3, #8
 800eb96:	d10b      	bne.n	800ebb0 <_printf_i+0x14c>
 800eb98:	6823      	ldr	r3, [r4, #0]
 800eb9a:	07de      	lsls	r6, r3, #31
 800eb9c:	d508      	bpl.n	800ebb0 <_printf_i+0x14c>
 800eb9e:	6923      	ldr	r3, [r4, #16]
 800eba0:	6861      	ldr	r1, [r4, #4]
 800eba2:	4299      	cmp	r1, r3
 800eba4:	bfde      	ittt	le
 800eba6:	2330      	movle	r3, #48	; 0x30
 800eba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ebac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ebb0:	1b52      	subs	r2, r2, r5
 800ebb2:	6122      	str	r2, [r4, #16]
 800ebb4:	f8cd a000 	str.w	sl, [sp]
 800ebb8:	464b      	mov	r3, r9
 800ebba:	aa03      	add	r2, sp, #12
 800ebbc:	4621      	mov	r1, r4
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	f7ff fee2 	bl	800e988 <_printf_common>
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d14c      	bne.n	800ec62 <_printf_i+0x1fe>
 800ebc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebcc:	b004      	add	sp, #16
 800ebce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd2:	4835      	ldr	r0, [pc, #212]	; (800eca8 <_printf_i+0x244>)
 800ebd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ebd8:	6829      	ldr	r1, [r5, #0]
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebe0:	6029      	str	r1, [r5, #0]
 800ebe2:	061d      	lsls	r5, r3, #24
 800ebe4:	d514      	bpl.n	800ec10 <_printf_i+0x1ac>
 800ebe6:	07df      	lsls	r7, r3, #31
 800ebe8:	bf44      	itt	mi
 800ebea:	f043 0320 	orrmi.w	r3, r3, #32
 800ebee:	6023      	strmi	r3, [r4, #0]
 800ebf0:	b91e      	cbnz	r6, 800ebfa <_printf_i+0x196>
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	f023 0320 	bic.w	r3, r3, #32
 800ebf8:	6023      	str	r3, [r4, #0]
 800ebfa:	2310      	movs	r3, #16
 800ebfc:	e7b0      	b.n	800eb60 <_printf_i+0xfc>
 800ebfe:	6823      	ldr	r3, [r4, #0]
 800ec00:	f043 0320 	orr.w	r3, r3, #32
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	2378      	movs	r3, #120	; 0x78
 800ec08:	4828      	ldr	r0, [pc, #160]	; (800ecac <_printf_i+0x248>)
 800ec0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec0e:	e7e3      	b.n	800ebd8 <_printf_i+0x174>
 800ec10:	0659      	lsls	r1, r3, #25
 800ec12:	bf48      	it	mi
 800ec14:	b2b6      	uxthmi	r6, r6
 800ec16:	e7e6      	b.n	800ebe6 <_printf_i+0x182>
 800ec18:	4615      	mov	r5, r2
 800ec1a:	e7bb      	b.n	800eb94 <_printf_i+0x130>
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	6826      	ldr	r6, [r4, #0]
 800ec20:	6961      	ldr	r1, [r4, #20]
 800ec22:	1d18      	adds	r0, r3, #4
 800ec24:	6028      	str	r0, [r5, #0]
 800ec26:	0635      	lsls	r5, r6, #24
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	d501      	bpl.n	800ec30 <_printf_i+0x1cc>
 800ec2c:	6019      	str	r1, [r3, #0]
 800ec2e:	e002      	b.n	800ec36 <_printf_i+0x1d2>
 800ec30:	0670      	lsls	r0, r6, #25
 800ec32:	d5fb      	bpl.n	800ec2c <_printf_i+0x1c8>
 800ec34:	8019      	strh	r1, [r3, #0]
 800ec36:	2300      	movs	r3, #0
 800ec38:	6123      	str	r3, [r4, #16]
 800ec3a:	4615      	mov	r5, r2
 800ec3c:	e7ba      	b.n	800ebb4 <_printf_i+0x150>
 800ec3e:	682b      	ldr	r3, [r5, #0]
 800ec40:	1d1a      	adds	r2, r3, #4
 800ec42:	602a      	str	r2, [r5, #0]
 800ec44:	681d      	ldr	r5, [r3, #0]
 800ec46:	6862      	ldr	r2, [r4, #4]
 800ec48:	2100      	movs	r1, #0
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f7f1 fac8 	bl	80001e0 <memchr>
 800ec50:	b108      	cbz	r0, 800ec56 <_printf_i+0x1f2>
 800ec52:	1b40      	subs	r0, r0, r5
 800ec54:	6060      	str	r0, [r4, #4]
 800ec56:	6863      	ldr	r3, [r4, #4]
 800ec58:	6123      	str	r3, [r4, #16]
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec60:	e7a8      	b.n	800ebb4 <_printf_i+0x150>
 800ec62:	6923      	ldr	r3, [r4, #16]
 800ec64:	462a      	mov	r2, r5
 800ec66:	4649      	mov	r1, r9
 800ec68:	4640      	mov	r0, r8
 800ec6a:	47d0      	blx	sl
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	d0ab      	beq.n	800ebc8 <_printf_i+0x164>
 800ec70:	6823      	ldr	r3, [r4, #0]
 800ec72:	079b      	lsls	r3, r3, #30
 800ec74:	d413      	bmi.n	800ec9e <_printf_i+0x23a>
 800ec76:	68e0      	ldr	r0, [r4, #12]
 800ec78:	9b03      	ldr	r3, [sp, #12]
 800ec7a:	4298      	cmp	r0, r3
 800ec7c:	bfb8      	it	lt
 800ec7e:	4618      	movlt	r0, r3
 800ec80:	e7a4      	b.n	800ebcc <_printf_i+0x168>
 800ec82:	2301      	movs	r3, #1
 800ec84:	4632      	mov	r2, r6
 800ec86:	4649      	mov	r1, r9
 800ec88:	4640      	mov	r0, r8
 800ec8a:	47d0      	blx	sl
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	d09b      	beq.n	800ebc8 <_printf_i+0x164>
 800ec90:	3501      	adds	r5, #1
 800ec92:	68e3      	ldr	r3, [r4, #12]
 800ec94:	9903      	ldr	r1, [sp, #12]
 800ec96:	1a5b      	subs	r3, r3, r1
 800ec98:	42ab      	cmp	r3, r5
 800ec9a:	dcf2      	bgt.n	800ec82 <_printf_i+0x21e>
 800ec9c:	e7eb      	b.n	800ec76 <_printf_i+0x212>
 800ec9e:	2500      	movs	r5, #0
 800eca0:	f104 0619 	add.w	r6, r4, #25
 800eca4:	e7f5      	b.n	800ec92 <_printf_i+0x22e>
 800eca6:	bf00      	nop
 800eca8:	0800f0b9 	.word	0x0800f0b9
 800ecac:	0800f0ca 	.word	0x0800f0ca

0800ecb0 <__retarget_lock_acquire_recursive>:
 800ecb0:	4770      	bx	lr

0800ecb2 <__retarget_lock_release_recursive>:
 800ecb2:	4770      	bx	lr

0800ecb4 <memcpy>:
 800ecb4:	440a      	add	r2, r1
 800ecb6:	4291      	cmp	r1, r2
 800ecb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ecbc:	d100      	bne.n	800ecc0 <memcpy+0xc>
 800ecbe:	4770      	bx	lr
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecca:	4291      	cmp	r1, r2
 800eccc:	d1f9      	bne.n	800ecc2 <memcpy+0xe>
 800ecce:	bd10      	pop	{r4, pc}

0800ecd0 <memmove>:
 800ecd0:	4288      	cmp	r0, r1
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	eb01 0402 	add.w	r4, r1, r2
 800ecd8:	d902      	bls.n	800ece0 <memmove+0x10>
 800ecda:	4284      	cmp	r4, r0
 800ecdc:	4623      	mov	r3, r4
 800ecde:	d807      	bhi.n	800ecf0 <memmove+0x20>
 800ece0:	1e43      	subs	r3, r0, #1
 800ece2:	42a1      	cmp	r1, r4
 800ece4:	d008      	beq.n	800ecf8 <memmove+0x28>
 800ece6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecee:	e7f8      	b.n	800ece2 <memmove+0x12>
 800ecf0:	4402      	add	r2, r0
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	428a      	cmp	r2, r1
 800ecf6:	d100      	bne.n	800ecfa <memmove+0x2a>
 800ecf8:	bd10      	pop	{r4, pc}
 800ecfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed02:	e7f7      	b.n	800ecf4 <memmove+0x24>

0800ed04 <_realloc_r>:
 800ed04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed08:	4680      	mov	r8, r0
 800ed0a:	4614      	mov	r4, r2
 800ed0c:	460e      	mov	r6, r1
 800ed0e:	b921      	cbnz	r1, 800ed1a <_realloc_r+0x16>
 800ed10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed14:	4611      	mov	r1, r2
 800ed16:	f7ff bc2b 	b.w	800e570 <_malloc_r>
 800ed1a:	b92a      	cbnz	r2, 800ed28 <_realloc_r+0x24>
 800ed1c:	f7ff fbbc 	bl	800e498 <_free_r>
 800ed20:	4625      	mov	r5, r4
 800ed22:	4628      	mov	r0, r5
 800ed24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed28:	f000 f81b 	bl	800ed62 <_malloc_usable_size_r>
 800ed2c:	4284      	cmp	r4, r0
 800ed2e:	4607      	mov	r7, r0
 800ed30:	d802      	bhi.n	800ed38 <_realloc_r+0x34>
 800ed32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed36:	d812      	bhi.n	800ed5e <_realloc_r+0x5a>
 800ed38:	4621      	mov	r1, r4
 800ed3a:	4640      	mov	r0, r8
 800ed3c:	f7ff fc18 	bl	800e570 <_malloc_r>
 800ed40:	4605      	mov	r5, r0
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d0ed      	beq.n	800ed22 <_realloc_r+0x1e>
 800ed46:	42bc      	cmp	r4, r7
 800ed48:	4622      	mov	r2, r4
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	bf28      	it	cs
 800ed4e:	463a      	movcs	r2, r7
 800ed50:	f7ff ffb0 	bl	800ecb4 <memcpy>
 800ed54:	4631      	mov	r1, r6
 800ed56:	4640      	mov	r0, r8
 800ed58:	f7ff fb9e 	bl	800e498 <_free_r>
 800ed5c:	e7e1      	b.n	800ed22 <_realloc_r+0x1e>
 800ed5e:	4635      	mov	r5, r6
 800ed60:	e7df      	b.n	800ed22 <_realloc_r+0x1e>

0800ed62 <_malloc_usable_size_r>:
 800ed62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed66:	1f18      	subs	r0, r3, #4
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	bfbc      	itt	lt
 800ed6c:	580b      	ldrlt	r3, [r1, r0]
 800ed6e:	18c0      	addlt	r0, r0, r3
 800ed70:	4770      	bx	lr
	...

0800ed74 <_init>:
 800ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed76:	bf00      	nop
 800ed78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7a:	bc08      	pop	{r3}
 800ed7c:	469e      	mov	lr, r3
 800ed7e:	4770      	bx	lr

0800ed80 <_fini>:
 800ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed82:	bf00      	nop
 800ed84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed86:	bc08      	pop	{r3}
 800ed88:	469e      	mov	lr, r3
 800ed8a:	4770      	bx	lr
