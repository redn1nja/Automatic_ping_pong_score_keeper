
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000006a8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000718  20000718  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001642b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033cd  00000000  00000000  000364cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  0003ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020319  00000000  00000000  0003be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c8a  00000000  00000000  0005c139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb00b  00000000  00000000  00074dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012fdce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000557c  00000000  00000000  0012fe20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052e0 	.word	0x080052e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052e0 	.word	0x080052e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	; 0x30
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 031c 	add.w	r3, r7, #28
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000286:	4b57      	ldr	r3, [pc, #348]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a56      	ldr	r2, [pc, #344]	; (80003e4 <MX_GPIO_Init+0x174>)
 800028c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b54      	ldr	r3, [pc, #336]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800029a:	61bb      	str	r3, [r7, #24]
 800029c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029e:	4b51      	ldr	r3, [pc, #324]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a50      	ldr	r2, [pc, #320]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b4e      	ldr	r3, [pc, #312]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002b2:	617b      	str	r3, [r7, #20]
 80002b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002b6:	4b4b      	ldr	r3, [pc, #300]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a4a      	ldr	r2, [pc, #296]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b48      	ldr	r3, [pc, #288]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a44      	ldr	r2, [pc, #272]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b42      	ldr	r3, [pc, #264]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e6:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002f0:	6153      	str	r3, [r2, #20]
 80002f2:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fe:	4b39      	ldr	r3, [pc, #228]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a38      	ldr	r2, [pc, #224]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b36      	ldr	r3, [pc, #216]	; (80003e4 <MX_GPIO_Init+0x174>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000316:	2200      	movs	r2, #0
 8000318:	f64f 7108 	movw	r1, #65288	; 0xff08
 800031c:	4832      	ldr	r0, [pc, #200]	; (80003e8 <MX_GPIO_Init+0x178>)
 800031e:	f001 fc99 	bl	8001c54 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000328:	4830      	ldr	r0, [pc, #192]	; (80003ec <MX_GPIO_Init+0x17c>)
 800032a:	f001 fc93 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800032e:	2337      	movs	r3, #55	; 0x37
 8000330:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000332:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800033c:	f107 031c 	add.w	r3, r7, #28
 8000340:	4619      	mov	r1, r3
 8000342:	4829      	ldr	r0, [pc, #164]	; (80003e8 <MX_GPIO_Init+0x178>)
 8000344:	f001 faf4 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000348:	f64f 7308 	movw	r3, #65288	; 0xff08
 800034c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2300      	movs	r3, #0
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800035a:	f107 031c 	add.w	r3, r7, #28
 800035e:	4619      	mov	r1, r3
 8000360:	4821      	ldr	r0, [pc, #132]	; (80003e8 <MX_GPIO_Init+0x178>)
 8000362:	f001 fae5 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000366:	2301      	movs	r3, #1
 8000368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036a:	2300      	movs	r3, #0
 800036c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 031c 	add.w	r3, r7, #28
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f001 fad8 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8000380:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000392:	f107 031c 	add.w	r3, r7, #28
 8000396:	4619      	mov	r1, r3
 8000398:	4814      	ldr	r0, [pc, #80]	; (80003ec <MX_GPIO_Init+0x17c>)
 800039a:	f001 fac9 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OPPOSITEHIT_BTN_Pin|TABLEHIT_BTN_Pin;
 800039e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80003a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ae:	f107 031c 	add.w	r3, r7, #28
 80003b2:	4619      	mov	r1, r3
 80003b4:	480e      	ldr	r0, [pc, #56]	; (80003f0 <MX_GPIO_Init+0x180>)
 80003b6:	f001 fabb 	bl	8001930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	2017      	movs	r0, #23
 80003c0:	f001 fa7f 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003c4:	2017      	movs	r0, #23
 80003c6:	f001 fa98 	bl	80018fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f001 fa77 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003d4:	2028      	movs	r0, #40	; 0x28
 80003d6:	f001 fa90 	bl	80018fa <HAL_NVIC_EnableIRQ>

}
 80003da:	bf00      	nop
 80003dc:	3730      	adds	r7, #48	; 0x30
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	48001000 	.word	0x48001000
 80003ec:	48000400 	.word	0x48000400
 80003f0:	48000c00 	.word	0x48000c00

080003f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_I2C1_Init+0x74>)
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <MX_I2C1_Init+0x78>)
 80003fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_I2C1_Init+0x74>)
 8000400:	4a1b      	ldr	r2, [pc, #108]	; (8000470 <MX_I2C1_Init+0x7c>)
 8000402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_I2C1_Init+0x74>)
 800040c:	2201      	movs	r2, #1
 800040e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_I2C1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_I2C1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_I2C1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042e:	480e      	ldr	r0, [pc, #56]	; (8000468 <MX_I2C1_Init+0x74>)
 8000430:	f001 fc40 	bl	8001cb4 <HAL_I2C_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043a:	f000 fdd5 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043e:	2100      	movs	r1, #0
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <MX_I2C1_Init+0x74>)
 8000442:	f001 fcc6 	bl	8001dd2 <HAL_I2CEx_ConfigAnalogFilter>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800044c:	f000 fdcc 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000450:	2100      	movs	r1, #0
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_I2C1_Init+0x74>)
 8000454:	f001 fd08 	bl	8001e68 <HAL_I2CEx_ConfigDigitalFilter>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800045e:	f000 fdc3 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000008c 	.word	0x2000008c
 800046c:	40005400 	.word	0x40005400
 8000470:	2000090e 	.word	0x2000090e

08000474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <HAL_I2C_MspInit+0x7c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d127      	bne.n	80004e6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a16      	ldr	r2, [pc, #88]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 800049c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80004ae:	23c0      	movs	r3, #192	; 0xc0
 80004b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b2:	2312      	movs	r3, #18
 80004b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ba:	2303      	movs	r3, #3
 80004bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004be:	2304      	movs	r3, #4
 80004c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <HAL_I2C_MspInit+0x84>)
 80004ca:	f001 fa31 	bl	8001930 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004e6:	bf00      	nop
 80004e8:	3728      	adds	r7, #40	; 0x28
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40005400 	.word	0x40005400
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000400 	.word	0x48000400

080004fc <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fbdb 	bl	8000cc2 <LCD5110_refresh_ll>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68b9      	ldr	r1, [r7, #8]
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f000 f880 	bl	8000630 <LCD5110_wset_cursor>
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f95f 	bl	8000806 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	2100      	movs	r1, #0
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ffe1 	bl	8000514 <LCD5110_set_cursor>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68b9      	ldr	r1, [r7, #8]
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f000 f893 	bl	800069c <LCD5110_wprint>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b08b      	sub	sp, #44	; 0x2c
 8000584:	af04      	add	r7, sp, #16
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4613      	mov	r3, r2
 800058e:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000592:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db41      	blt.n	800061e <LCD5110_wputchar+0x9e>
 800059a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800059c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db3c      	blt.n	800061e <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80005a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005aa:	461a      	mov	r2, r3
 80005ac:	2306      	movs	r3, #6
 80005ae:	4413      	add	r3, r2
 80005b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005b2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d833      	bhi.n	8000622 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 80005ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2308      	movs	r3, #8
 80005c4:	4413      	add	r3, r2
 80005c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005c8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d828      	bhi.n	8000622 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <LCD5110_wputchar+0xac>)
 80005d2:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 80005d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	18d0      	adds	r0, r2, r3
 80005e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	18d1      	adds	r1, r2, r3
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2206      	movs	r2, #6
 80005f0:	fb02 f303 	mul.w	r3, r2, r3
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	441a      	add	r2, r3
 80005f8:	2306      	movs	r3, #6
 80005fa:	461e      	mov	r6, r3
 80005fc:	2308      	movs	r3, #8
 80005fe:	461c      	mov	r4, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461d      	mov	r5, r3
 800060e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	9501      	str	r5, [sp, #4]
 8000614:	9400      	str	r4, [sp, #0]
 8000616:	4633      	mov	r3, r6
 8000618:	f000 f950 	bl	80008bc <LCD5110_drawBitmap>
 800061c:	e002      	b.n	8000624 <LCD5110_wputchar+0xa4>
		return;
 800061e:	bf00      	nop
 8000620:	e000      	b.n	8000624 <LCD5110_wputchar+0xa4>
		return;
 8000622:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8000624:	371c      	adds	r7, #28
 8000626:	46bd      	mov	sp, r7
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	bf00      	nop
 800062c:	08005318 	.word	0x08005318

08000630 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	b21a      	sxth	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	b21a      	sxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	815a      	strh	r2, [r3, #10]
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800066a:	b29a      	uxth	r2, r3
 800066c:	2308      	movs	r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	b29b      	uxth	r3, r3
 8000674:	3301      	adds	r3, #1
 8000676:	b29b      	uxth	r3, r3
 8000678:	b21a      	sxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2202      	movs	r2, #2
 8000682:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b1b      	ldrb	r3, [r3, #12]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f7ff ff35 	bl	80004fc <LCD5110_refresh>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 80006aa:	e053      	b.n	8000754 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b0a      	cmp	r3, #10
 80006b2:	d010      	beq.n	80006d6 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006ba:	4618      	mov	r0, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80006c2:	4619      	mov	r1, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f7ff ff55 	bl	8000580 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	2306      	movs	r3, #6
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2306      	movs	r3, #6
 80006f6:	4413      	add	r3, r2
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80006fe:	4293      	cmp	r3, r2
 8000700:	d904      	bls.n	800070c <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000708:	2b0a      	cmp	r3, #10
 800070a:	d103      	bne.n	8000714 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0a      	cmp	r3, #10
 8000712:	d111      	bne.n	8000738 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff9f 	bl	800065a <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <LCD5110_wprint+0xcc>)
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <LCD5110_wprint+0x9c>
				++str;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800073e:	461a      	mov	r2, r3
 8000740:	2308      	movs	r3, #8
 8000742:	4413      	add	r3, r2
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800074a:	4293      	cmp	r3, r2
 800074c:	d807      	bhi.n	800075e <LCD5110_wprint+0xc2>
			break;
		str++;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1a7      	bne.n	80006ac <LCD5110_wprint+0x10>

	}
}
 800075c:	e000      	b.n	8000760 <LCD5110_wprint+0xc4>
			break;
 800075e:	bf00      	nop
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08005958 	.word	0x08005958

0800076c <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 800076c:	b40c      	push	{r2, r3}
 800076e:	b580      	push	{r7, lr}
 8000770:	b09e      	sub	sp, #120	; 0x78
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 8000778:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800077c:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 800077e:	f107 0010 	add.w	r0, r7, #16
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000788:	2164      	movs	r1, #100	; 0x64
 800078a:	f004 f94d 	bl	8004a28 <vsniprintf>
 800078e:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	6839      	ldr	r1, [r7, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fede 	bl	800055a <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fea7 	bl	80004fc <LCD5110_refresh>

	va_end(vargs);

	return res;
 80007ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3778      	adds	r7, #120	; 0x78
 80007b4:	46bd      	mov	sp, r7
 80007b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ba:	b002      	add	sp, #8
 80007bc:	4770      	bx	lr

080007be <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 80007be:	b480      	push	{r7}
 80007c0:	b087      	sub	sp, #28
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	10db      	asrs	r3, r3, #3
 80007ce:	2254      	movs	r2, #84	; 0x54
 80007d0:	fb03 f202 	mul.w	r2, r3, r2
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f003 0307 	and.w	r3, r3, #7
 80007e0:	2201      	movs	r2, #1
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	753b      	strb	r3, [r7, #20]

	return res;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	461a      	mov	r2, r3
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e008      	b.n	8000826 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4413      	add	r3, r2
 800081a:	331c      	adds	r3, #28
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3301      	adds	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800082c:	dbf2      	blt.n	8000814 <LCD5110_clrscr+0xe>
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db31      	blt.n	80008b4 <LCD5110_putpix+0x78>
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2e      	blt.n	80008b4 <LCD5110_putpix+0x78>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b53      	cmp	r3, #83	; 0x53
 800085a:	dc2b      	bgt.n	80008b4 <LCD5110_putpix+0x78>
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2b2f      	cmp	r3, #47	; 0x2f
 8000860:	dc28      	bgt.n	80008b4 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ffa7 	bl	80007be <xy_to_pix>

	if (color)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00c      	beq.n	8000890 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	4413      	add	r3, r2
 800087c:	7f19      	ldrb	r1, [r3, #28]
 800087e:	7d3a      	ldrb	r2, [r7, #20]
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	430a      	orrs	r2, r1
 8000884:	b2d1      	uxtb	r1, r2
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	4413      	add	r3, r2
 800088a:	460a      	mov	r2, r1
 800088c:	771a      	strb	r2, [r3, #28]
 800088e:	e012      	b.n	80008b6 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	7f1b      	ldrb	r3, [r3, #28]
 8000898:	b25a      	sxtb	r2, r3
 800089a:	7d3b      	ldrb	r3, [r7, #20]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	4013      	ands	r3, r2
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	b2d1      	uxtb	r1, r2
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	771a      	strb	r2, [r3, #28]
 80008b2:	e000      	b.n	80008b6 <LCD5110_putpix+0x7a>
		return;
 80008b4:	bf00      	nop
}
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	e042      	b.n	8000956 <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	e038      	b.n	8000948 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da00      	bge.n	80008de <LCD5110_drawBitmap+0x22>
 80008dc:	3307      	adds	r3, #7
 80008de:	10db      	asrs	r3, r3, #3
 80008e0:	461a      	mov	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	fb03 f202 	mul.w	r2, r3, r2
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	4413      	add	r3, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	425a      	negs	r2, r3
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	f002 0207 	and.w	r2, r2, #7
 8000902:	bf58      	it	pl
 8000904:	4253      	negpl	r3, r2
 8000906:	2201      	movs	r2, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	b25a      	sxtb	r2, r3
 800090e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000912:	4013      	ands	r3, r2
 8000914:	b25b      	sxtb	r3, r3
 8000916:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	18d0      	adds	r0, r2, r3
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	18d1      	adds	r1, r2, r3
 8000924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <LCD5110_drawBitmap+0x7e>
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf0c      	ite	eq
 8000930:	2301      	moveq	r3, #1
 8000932:	2300      	movne	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	e000      	b.n	800093c <LCD5110_drawBitmap+0x80>
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093e:	f7ff ff7d 	bl	800083c <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	3301      	adds	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094c:	429a      	cmp	r2, r3
 800094e:	dbc2      	blt.n	80008d6 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	3301      	adds	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	dbb8      	blt.n	80008d0 <LCD5110_drawBitmap+0x14>
		}
	}
}
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	1df9      	adds	r1, r7, #7
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	2201      	movs	r2, #1
 8000980:	f003 f81b 	bl	80039ba <HAL_SPI_Transmit>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	460b      	mov	r3, r1
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	897a      	ldrh	r2, [r7, #10]
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	68f9      	ldr	r1, [r7, #12]
 80009a8:	f003 f807 	bl	80039ba <HAL_SPI_Transmit>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6898      	ldr	r0, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	889b      	ldrh	r3, [r3, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f001 f943 	bl	8001c54 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6998      	ldr	r0, [r3, #24]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	8a9b      	ldrh	r3, [r3, #20]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	f001 f933 	bl	8001c54 <HAL_GPIO_WritePin>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6998      	ldr	r0, [r3, #24]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	8a9b      	ldrh	r3, [r3, #20]
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f001 f923 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6918      	ldr	r0, [r3, #16]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f001 f913 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6918      	ldr	r0, [r3, #16]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	899b      	ldrh	r3, [r3, #12]
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f001 f903 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	6039      	str	r1, [r7, #0]
 8000a60:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f023 0320 	bic.w	r3, r3, #32
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	dd01      	ble.n	8000a70 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e008      	b.n	8000a82 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff74 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	6039      	str	r1, [r7, #0]
 8000a94:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f023 030d 	bic.w	r3, r3, #13
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e005      	b.n	8000ab0 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	6839      	ldr	r1, [r7, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da01      	bge.n	8000ad0 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e008      	b.n	8000ae2 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff44 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	6039      	str	r1, [r7, #0]
 8000af4:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d901      	bls.n	8000b00 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8000afc:	2304      	movs	r3, #4
 8000afe:	e008      	b.n	8000b12 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff2c 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	6039      	str	r1, [r7, #0]
 8000b24:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d901      	bls.n	8000b30 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	e008      	b.n	8000b42 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	6839      	ldr	r1, [r7, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff14 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	6039      	str	r1, [r7, #0]
 8000b54:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8000b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db03      	blt.n	8000b66 <LCD5110_set_X_base+0x1c>
 8000b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b62:	2b53      	cmp	r3, #83	; 0x53
 8000b64:	dd01      	ble.n	8000b6a <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8000b66:	2307      	movs	r3, #7
 8000b68:	e00a      	b.n	8000b80 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	6839      	ldr	r1, [r7, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fef5 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8000b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db03      	blt.n	8000ba4 <LCD5110_set_Y_base+0x1c>
 8000b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	dd01      	ble.n	8000ba8 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	e00a      	b.n	8000bbe <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	6839      	ldr	r1, [r7, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fed6 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	603a      	str	r2, [r7, #0]
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8000bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bda:	6839      	ldr	r1, [r7, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffb4 	bl	8000b4a <LCD5110_set_X_base>
 8000be2:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <LCD5110_set_XY_base+0x28>
		return res;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	e00c      	b.n	8000c08 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8000bee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bf2:	6839      	ldr	r1, [r7, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffc7 	bl	8000b88 <LCD5110_set_Y_base>
 8000bfa:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <LCD5110_set_XY_base+0x40>
		return res;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	e000      	b.n	8000c08 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4603      	mov	r3, r0
 8000c48:	70fb      	strb	r3, [r7, #3]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70bb      	strb	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffdc 	bl	8000c10 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff feac 	bl	80009b6 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fee9 	bl	8000a36 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8000c68:	bf00      	nop
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1fa      	bne.n	8000c6a <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fece 	bl	8000a16 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff febb 	bl	80009f6 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fee7 	bl	8000a56 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff13 	bl	8000ab8 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8000c92:	787b      	ldrb	r3, [r7, #1]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff27 	bl	8000aea <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8000c9c:	7e3b      	ldrb	r3, [r7, #24]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff3a 	bl	8000b1a <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fed4 	bl	8000a56 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fee9 	bl	8000a8a <LCD5110_set_mode_base>

	return LCD5110_OK;
 8000cb8:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fe73 	bl	80009b6 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fe90 	bl	80009f6 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff ff73 	bl	8000bc6 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fe78 	bl	80009d6 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	331c      	adds	r3, #28
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe4c 	bl	800098e <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <print_score>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
LCD5110_display lcd1;
void print_score(LCD5110_display* lcd_conf) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	LCD5110_clear_scr(lcd_conf);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fc15 	bl	8000538 <LCD5110_clear_scr>
	LCD5110_set_cursor(1, 22, lcd_conf);
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	2116      	movs	r1, #22
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff fbfe 	bl	8000514 <LCD5110_set_cursor>
	LCD5110_printf(lcd_conf, BLACK, "L:%u", l_score);
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <print_score+0x50>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <print_score+0x54>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fd22 	bl	800076c <LCD5110_printf>
	LCD5110_set_cursor(70, 22, lcd_conf);
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	2116      	movs	r1, #22
 8000d2c:	2046      	movs	r0, #70	; 0x46
 8000d2e:	f7ff fbf1 	bl	8000514 <LCD5110_set_cursor>
	LCD5110_printf(lcd_conf, BLACK, "R:%u", r_score);
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <print_score+0x58>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <print_score+0x5c>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fd15 	bl	800076c <LCD5110_printf>
	LCD5110_refresh(lcd_conf);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fbda 	bl	80004fc <LCD5110_refresh>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000d9 	.word	0x200000d9
 8000d54:	080052f8 	.word	0x080052f8
 8000d58:	200000da 	.word	0x200000da
 8000d5c:	08005300 	.word	0x08005300

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d66:	f000 fc47 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f873 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f7ff fa7f 	bl	8000270 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d72:	f7ff fb3f 	bl	80003f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d76:	f000 f93f 	bl	8000ff8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d7a:	f000 fbad 	bl	80014d8 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000d7e:	f000 f979 	bl	8001074 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d82:	f000 fb17 	bl	80013b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hw_conf.spi_handle = &hspi2;
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <main+0xd8>)
 8000d88:	4a2c      	ldr	r2, [pc, #176]	; (8000e3c <main+0xdc>)
 8000d8a:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD_CS_Pin;
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <main+0xd8>)
 8000d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d92:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD_CS_GPIO_Port;
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <main+0xd8>)
 8000d96:	4a2a      	ldr	r2, [pc, #168]	; (8000e40 <main+0xe0>)
 8000d98:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD_RST_Pin;
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <main+0xd8>)
 8000d9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da0:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD_RST_GPIO_Port;
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <main+0xd8>)
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <main+0xe0>)
 8000da6:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD_DC_Pin;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <main+0xd8>)
 8000daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dae:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD_DC_GPIO_Port;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <main+0xd8>)
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <main+0xe0>)
 8000db4:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <main+0xd8>)
 8000db8:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <main+0xe4>)
 8000dba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000dbe:	4614      	mov	r4, r2
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	6861      	ldr	r1, [r4, #4]
 8000dc4:	68a2      	ldr	r2, [r4, #8]
 8000dc6:	c307      	stmia	r3!, {r0, r1, r2}
 8000dc8:	89a2      	ldrh	r2, [r4, #12]
 8000dca:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8000dcc:	2303      	movs	r3, #3
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	2240      	movs	r2, #64	; 0x40
 8000dd4:	210c      	movs	r1, #12
 8000dd6:	4818      	ldr	r0, [pc, #96]	; (8000e38 <main+0xd8>)
 8000dd8:	f7ff ff2e 	bl	8000c38 <LCD5110_init>

  LCD5110_set_cursor(0, 23, &lcd1);
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <main+0xd8>)
 8000dde:	2117      	movs	r1, #23
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fb97 	bl	8000514 <LCD5110_set_cursor>
  LCD5110_print("Hello world!\n", BLACK, &lcd1);
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <main+0xd8>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	4817      	ldr	r0, [pc, #92]	; (8000e48 <main+0xe8>)
 8000dec:	f7ff fbb5 	bl	800055a <LCD5110_print>
  print_score(&lcd1);
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <main+0xd8>)
 8000df2:	f7ff ff85 	bl	8000d00 <print_score>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  while (l_score < 22) {
 8000df6:	e018      	b.n	8000e2a <main+0xca>
		  while (r_score < 22) {
			  print_score(&lcd1);
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <main+0xd8>)
 8000dfa:	f7ff ff81 	bl	8000d00 <print_score>
			  r_score++;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <main+0xec>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <main+0xec>)
 8000e0a:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(250);
 8000e0c:	20fa      	movs	r0, #250	; 0xfa
 8000e0e:	f000 fc59 	bl	80016c4 <HAL_Delay>
		  while (r_score < 22) {
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <main+0xec>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b15      	cmp	r3, #21
 8000e1a:	d9ed      	bls.n	8000df8 <main+0x98>
		  }
		  l_score++;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <main+0xf0>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <main+0xf0>)
 8000e28:	701a      	strb	r2, [r3, #0]
	  while (l_score < 22) {
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <main+0xf0>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b15      	cmp	r3, #21
 8000e32:	d9ee      	bls.n	8000e12 <main+0xb2>
 8000e34:	e7f9      	b.n	8000e2a <main+0xca>
 8000e36:	bf00      	nop
 8000e38:	200000dc 	.word	0x200000dc
 8000e3c:	20000364 	.word	0x20000364
 8000e40:	48000400 	.word	0x48000400
 8000e44:	08005918 	.word	0x08005918
 8000e48:	08005308 	.word	0x08005308
 8000e4c:	200000da 	.word	0x200000da
 8000e50:	200000d9 	.word	0x200000d9

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b09e      	sub	sp, #120	; 0x78
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e5e:	2228      	movs	r2, #40	; 0x28
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fdac 	bl	80049c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	223c      	movs	r2, #60	; 0x3c
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fd9e 	bl	80049c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e84:	2303      	movs	r3, #3
 8000e86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2310      	movs	r3, #16
 8000e98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ea4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ea8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 f904 	bl	80020bc <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000eba:	f000 f895 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ed4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 f92c 	bl	8003138 <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ee6:	f000 f87f 	bl	8000fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <SystemClock_Config+0xc4>)
 8000eec:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ef2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fb00 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f0a:	f000 f86d 	bl	8000fe8 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3778      	adds	r7, #120	; 0x78
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	00021020 	.word	0x00021020

08000f1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == TABLEHIT_BTN_Pin || GPIO_Pin == OPPOSITEHIT_BTN_Pin) && state == START){
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_EXTI_Callback+0x1a>
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f34:	d10a      	bne.n	8000f4c <HAL_GPIO_EXTI_Callback+0x30>
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <HAL_GPIO_EXTI_Callback+0x30>
		state = R_SERVE;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f48:	f003 f862 	bl	8004010 <HAL_TIM_Base_Start_IT>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000d8 	.word	0x200000d8
 8000f58:	200003cc 	.word	0x200003cc

08000f5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	if(!HAL_GPIO_ReadPin(OPPOSITEHIT_BTN_GPIO_Port, OPPOSITEHIT_BTN_Pin)){
 8000f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f68:	481b      	ldr	r0, [pc, #108]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f6a:	f000 fe5b 	bl	8001c24 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	4818      	ldr	r0, [pc, #96]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f7c:	f000 fe6a 	bl	8001c54 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim1);
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f82:	f003 f845 	bl	8004010 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		state = START;
		HAL_TIM_Base_Stop_IT(&htim1);
	}
}
 8000f86:	e023      	b.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x74>
	else if (!HAL_GPIO_ReadPin(TABLEHIT_BTN_GPIO_Port, TABLEHIT_BTN_Pin)) {
 8000f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8c:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f8e:	f000 fe49 	bl	8001c24 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x50>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fa0:	f000 fe58 	bl	8001c54 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim1);
 8000fa4:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000fa6:	f003 f833 	bl	8004010 <HAL_TIM_Base_Start_IT>
}
 8000faa:	e011      	b.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x74>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fb4:	f000 fe4e 	bl	8001c54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fc0:	f000 fe48 	bl	8001c54 <HAL_GPIO_WritePin>
		state = START;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000fcc:	f003 f88a 	bl	80040e4 <HAL_TIM_Base_Stop_IT>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	48000c00 	.word	0x48000c00
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	200003cc 	.word	0x200003cc
 8000fe4:	200000d8 	.word	0x200000d8

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_SPI1_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_SPI1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_SPI1_Init+0x74>)
 8001004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_SPI1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_SPI1_Init+0x74>)
 8001012:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001016:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_SPI1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_SPI1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_SPI1_Init+0x74>)
 8001026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800102a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_SPI1_Init+0x74>)
 800102e:	2208      	movs	r2, #8
 8001030:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_SPI1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_SPI1_Init+0x74>)
 8001046:	2207      	movs	r2, #7
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_SPI1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_SPI1_Init+0x74>)
 8001052:	2208      	movs	r2, #8
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_SPI1_Init+0x74>)
 8001058:	f002 fc04 	bl	8003864 <HAL_SPI_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001062:	f7ff ffc1 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000300 	.word	0x20000300
 8001070:	40013000 	.word	0x40013000

08001074 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_SPI2_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_SPI2_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_SPI2_Init+0x74>)
 8001080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_SPI2_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_SPI2_Init+0x74>)
 800108e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001092:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_SPI2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_SPI2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010aa:	2210      	movs	r2, #16
 80010ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010c2:	2207      	movs	r2, #7
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_SPI2_Init+0x74>)
 80010d4:	f002 fbc6 	bl	8003864 <HAL_SPI_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010de:	f7ff ff83 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000364 	.word	0x20000364
 80010ec:	40003800 	.word	0x40003800

080010f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <HAL_SPI_MspInit+0x114>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d129      	bne.n	8001166 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a3c      	ldr	r2, [pc, #240]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <HAL_SPI_MspInit+0x118>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a36      	ldr	r2, [pc, #216]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	6153      	str	r3, [r2, #20]
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001142:	23e0      	movs	r3, #224	; 0xe0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001152:	2305      	movs	r3, #5
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f000 fbe6 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001164:	e04a      	b.n	80011fc <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a28      	ldr	r2, [pc, #160]	; (800120c <HAL_SPI_MspInit+0x11c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d145      	bne.n	80011fc <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	61d3      	str	r3, [r2, #28]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_SPI_MspInit+0x118>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_SPI_MspInit+0x118>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_SPI_MspInit+0x118>)
 800118e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001192:	6153      	str	r3, [r2, #20]
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_SPI_MspInit+0x118>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_SPI_MspInit+0x118>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_SPI_MspInit+0x118>)
 80011a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011aa:	6153      	str	r3, [r2, #20]
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_SPI_MspInit+0x118>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ca:	2305      	movs	r3, #5
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <HAL_SPI_MspInit+0x120>)
 80011d6:	f000 fbab 	bl	8001930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ec:	2305      	movs	r3, #5
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <HAL_SPI_MspInit+0x124>)
 80011f8:	f000 fb9a 	bl	8001930 <HAL_GPIO_Init>
}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013000 	.word	0x40013000
 8001208:	40021000 	.word	0x40021000
 800120c:	40003800 	.word	0x40003800
 8001210:	48001400 	.word	0x48001400
 8001214:	48000400 	.word	0x48000400

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x44>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x44>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x44>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x44>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124e:	2007      	movs	r0, #7
 8001250:	f000 fb2c 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 f9ea 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPPOSITEHIT_BTN_Pin);
 80012b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012bc:	f000 fce2 	bl	8001c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80012ca:	f002 ff3a 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200003cc 	.word	0x200003cc

080012d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012de:	f002 ff30 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200003cc 	.word	0x200003cc

080012ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012f2:	f002 ff26 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200003cc 	.word	0x200003cc

08001300 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM1_CC_IRQHandler+0x10>)
 8001306:	f002 ff1c 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200003cc 	.word	0x200003cc

08001314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TABLEHIT_BTN_Pin);
 8001318:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800131c:	f000 fcb2 	bl	8001c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f003 fb0a 	bl	800496c <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000a000 	.word	0x2000a000
 8001384:	00000400 	.word	0x00000400
 8001388:	200003c8 	.word	0x200003c8
 800138c:	20000718 	.word	0x20000718

08001390 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_TIM1_Init+0xa0>)
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <MX_TIM1_Init+0xa4>)
 80013d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_TIM1_Init+0xa0>)
 80013da:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM1_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_TIM1_Init+0xa0>)
 80013e8:	2232      	movs	r2, #50	; 0x32
 80013ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM1_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_TIM1_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM1_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_TIM1_Init+0xa0>)
 8001400:	f002 fdae 	bl	8003f60 <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800140a:	f7ff fded 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4619      	mov	r1, r3
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <MX_TIM1_Init+0xa0>)
 800141c:	f002 ffb0 	bl	8004380 <HAL_TIM_ConfigClockSource>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001426:	f7ff fddf 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM1_Init+0xa0>)
 800143c:	f003 f9bc 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001446:	f7ff fdcf 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200003cc 	.word	0x200003cc
 8001458:	40012c00 	.word	0x40012c00

0800145c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_TIM_Base_MspInit+0x78>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_TIM_Base_MspInit+0x78>)
 8001474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001478:	6193      	str	r3, [r2, #24]
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_TIM_Base_MspInit+0x78>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2018      	movs	r0, #24
 800148c:	f000 fa19 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001490:	2018      	movs	r0, #24
 8001492:	f000 fa32 	bl	80018fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2019      	movs	r0, #25
 800149c:	f000 fa11 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014a0:	2019      	movs	r0, #25
 80014a2:	f000 fa2a 	bl	80018fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201a      	movs	r0, #26
 80014ac:	f000 fa09 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014b0:	201a      	movs	r0, #26
 80014b2:	f000 fa22 	bl	80018fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	201b      	movs	r0, #27
 80014bc:	f000 fa01 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014c0:	201b      	movs	r0, #27
 80014c2:	f000 fa1a 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40012c00 	.word	0x40012c00
 80014d4:	40021000 	.word	0x40021000

080014d8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <MX_USB_PCD_Init+0x40>)
 80014e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014e4:	2208      	movs	r2, #8
 80014e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 8001502:	f000 fcfd 	bl	8001f00 <HAL_PCD_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800150c:	f7ff fd6c 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000418 	.word	0x20000418
 8001518:	40005c00 	.word	0x40005c00

0800151c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_PCD_MspInit+0x80>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d129      	bne.n	8001592 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_PCD_MspInit+0x84>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_PCD_MspInit+0x84>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	6153      	str	r3, [r2, #20]
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_PCD_MspInit+0x84>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001556:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001568:	230e      	movs	r3, #14
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f000 f9db 	bl	8001930 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_PCD_MspInit+0x84>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_PCD_MspInit+0x84>)
 8001580:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_PCD_MspInit+0x84>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40005c00 	.word	0x40005c00
 80015a0:	40021000 	.word	0x40021000

080015a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015aa:	490e      	ldr	r1, [pc, #56]	; (80015e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <LoopForever+0xe>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c0:	4c0b      	ldr	r4, [pc, #44]	; (80015f0 <LoopForever+0x16>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ce:	f7ff fedf 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f003 f9d1 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d6:	f7ff fbc3 	bl	8000d60 <main>

080015da <LoopForever>:

LoopForever:
    b LoopForever
 80015da:	e7fe      	b.n	80015da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015e8:	08005a94 	.word	0x08005a94
  ldr r2, =_sbss
 80015ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015f0:	20000718 	.word	0x20000718

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f94f 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fe00 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f967 	bl	8001916 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f92f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	20000008 	.word	0x20000008
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000704 	.word	0x20000704

080016ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000704 	.word	0x20000704

080016c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff3e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff31 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	e154      	b.n	8001bea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8146 	beq.w	8001be4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d005      	beq.n	8001970 <HAL_GPIO_Init+0x40>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d130      	bne.n	80019d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a6:	2201      	movs	r2, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	f003 0201 	and.w	r2, r3, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d017      	beq.n	8001a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d123      	bne.n	8001a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0203 	and.w	r2, r3, #3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80a0 	beq.w	8001be4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_GPIO_Init+0x2d8>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_GPIO_Init+0x2d8>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b55      	ldr	r3, [pc, #340]	; (8001c08 <HAL_GPIO_Init+0x2d8>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001abc:	4a53      	ldr	r2, [pc, #332]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ae6:	d019      	beq.n	8001b1c <HAL_GPIO_Init+0x1ec>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a49      	ldr	r2, [pc, #292]	; (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_GPIO_Init+0x1e8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a48      	ldr	r2, [pc, #288]	; (8001c14 <HAL_GPIO_Init+0x2e4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00d      	beq.n	8001b14 <HAL_GPIO_Init+0x1e4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0x1e0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <HAL_GPIO_Init+0x2ec>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_GPIO_Init+0x1dc>
 8001b08:	2304      	movs	r3, #4
 8001b0a:	e008      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b0c:	2305      	movs	r3, #5
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b10:	2303      	movs	r3, #3
 8001b12:	e004      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	f002 0203 	and.w	r2, r2, #3
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	4093      	lsls	r3, r2
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b2e:	4937      	ldr	r1, [pc, #220]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b60:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b8a:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f aea3 	bne.w	8001940 <HAL_GPIO_Init+0x10>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	48000800 	.word	0x48000800
 8001c18:	48000c00 	.word	0x48000c00
 8001c1c:	48001000 	.word	0x48001000
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e001      	b.n	8001c46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f93a 	bl	8000f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e081      	b.n	8001dca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fbca 	bl	8000474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2224      	movs	r2, #36	; 0x24
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e006      	b.n	8001d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d104      	bne.n	8001d4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69d9      	ldr	r1, [r3, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1a      	ldr	r2, [r3, #32]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d138      	bne.n	8001e5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e032      	b.n	8001e5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2224      	movs	r2, #36	; 0x24
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e5a:	2302      	movs	r3, #2
  }
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d139      	bne.n	8001ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e033      	b.n	8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b08b      	sub	sp, #44	; 0x2c
 8001f04:	af06      	add	r7, sp, #24
 8001f06:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0d0      	b.n	80020b4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff faf8 	bl	800151c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fcdb 	bl	80048f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e04c      	b.n	8001fde <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3301      	adds	r3, #1
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	b298      	uxth	r0, r3
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3336      	adds	r3, #54	; 0x36
 8001f82:	4602      	mov	r2, r0
 8001f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3303      	adds	r3, #3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	3338      	adds	r3, #56	; 0x38
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	333c      	adds	r3, #60	; 0x3c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3340      	adds	r3, #64	; 0x40
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3ad      	bcc.n	8001f44 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e044      	b.n	8002078 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3301      	adds	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	d3b5      	bcc.n	8001fee <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	687e      	ldr	r6, [r7, #4]
 800208a:	466d      	mov	r5, sp
 800208c:	f106 0410 	add.w	r4, r6, #16
 8002090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	602b      	str	r3, [r5, #0]
 8002098:	1d33      	adds	r3, r6, #4
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f002 fc44 	bl	800492a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f001 b823 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 817d 	beq.w	80023f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020f8:	4bbc      	ldr	r3, [pc, #752]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b04      	cmp	r3, #4
 8002102:	d00c      	beq.n	800211e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002104:	4bb9      	ldr	r3, [pc, #740]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d15c      	bne.n	80021ca <HAL_RCC_OscConfig+0x10e>
 8002110:	4bb6      	ldr	r3, [pc, #728]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d155      	bne.n	80021ca <HAL_RCC_OscConfig+0x10e>
 800211e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002122:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002132:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_RCC_OscConfig+0x94>
 800214a:	4ba8      	ldr	r3, [pc, #672]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e015      	b.n	800217c <HAL_RCC_OscConfig+0xc0>
 8002150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002154:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002168:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800216c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002178:	4b9c      	ldr	r3, [pc, #624]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002180:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002184:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002190:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f002 021f 	and.w	r2, r2, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 811f 	beq.w	80023f0 <HAL_RCC_OscConfig+0x334>
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8116 	bne.w	80023f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f000 bfaf 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x12e>
 80021dc:	4b83      	ldr	r3, [pc, #524]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a82      	ldr	r2, [pc, #520]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e036      	b.n	8002258 <HAL_RCC_OscConfig+0x19c>
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x158>
 80021fa:	4b7c      	ldr	r3, [pc, #496]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7b      	ldr	r2, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b79      	ldr	r3, [pc, #484]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a78      	ldr	r2, [pc, #480]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e021      	b.n	8002258 <HAL_RCC_OscConfig+0x19c>
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x184>
 8002226:	4b71      	ldr	r3, [pc, #452]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a70      	ldr	r2, [pc, #448]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6e      	ldr	r3, [pc, #440]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6d      	ldr	r2, [pc, #436]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0x19c>
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a69      	ldr	r2, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002258:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f023 020f 	bic.w	r2, r3, #15
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	495f      	ldr	r1, [pc, #380]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 800226e:	4313      	orrs	r3, r2
 8002270:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d059      	beq.n	8002336 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fa13 	bl	80016ac <HAL_GetTick>
 8002286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fa0e 	bl	80016ac <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d902      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	f000 bf43 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 80022a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0x218>
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e015      	b.n	8002300 <HAL_RCC_OscConfig+0x244>
 80022d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002304:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002308:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800230c:	fa92 f2a2 	rbit	r2, r2
 8002310:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002314:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f042 0220 	orr.w	r2, r2, #32
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f002 021f 	and.w	r2, r2, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f202 	lsl.w	r2, r1, r2
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ab      	beq.n	800228c <HAL_RCC_OscConfig+0x1d0>
 8002334:	e05d      	b.n	80023f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff f9b9 	bl	80016ac <HAL_GetTick>
 800233a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff f9b4 	bl	80016ac <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d902      	bls.n	8002356 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	f000 bee9 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800236a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_RCC_OscConfig+0x2cc>
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e015      	b.n	80023b4 <HAL_RCC_OscConfig+0x2f8>
 8002388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800238c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800239c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_RCC_OscConfig+0x330>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023b8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80023bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f002 021f 	and.w	r2, r2, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ab      	bne.n	8002340 <HAL_RCC_OscConfig+0x284>
 80023e8:	e003      	b.n	80023f2 <HAL_RCC_OscConfig+0x336>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 817d 	beq.w	8002702 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002408:	4ba6      	ldr	r3, [pc, #664]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002414:	4ba3      	ldr	r3, [pc, #652]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d172      	bne.n	8002506 <HAL_RCC_OscConfig+0x44a>
 8002420:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d16c      	bne.n	8002506 <HAL_RCC_OscConfig+0x44a>
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800243e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_RCC_OscConfig+0x3a0>
 8002456:	4b93      	ldr	r3, [pc, #588]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e013      	b.n	8002484 <HAL_RCC_OscConfig+0x3c8>
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002474:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002480:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2202      	movs	r2, #2
 8002486:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800248a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800248e:	fa92 f2a2 	rbit	r2, r2
 8002492:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002496:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCC_OscConfig+0x410>
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d002      	beq.n	80024cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f000 be2e 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	21f8      	movs	r1, #248	; 0xf8
 80024e2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024ea:	fa91 f1a1 	rbit	r1, r1
 80024ee:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024f6:	fab1 f181 	clz	r1, r1
 80024fa:	b2c9      	uxtb	r1, r1
 80024fc:	408b      	lsls	r3, r1
 80024fe:	4969      	ldr	r1, [pc, #420]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002504:	e0fd      	b.n	8002702 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8088 	beq.w	8002628 <HAL_RCC_OscConfig+0x56c>
 8002518:	2301      	movs	r3, #1
 800251a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800252a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	461a      	mov	r2, r3
 8002540:	2301      	movs	r3, #1
 8002542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f8b2 	bl	80016ac <HAL_GetTick>
 8002548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff f8ad 	bl	80016ac <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	f000 bde2 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002576:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0x4d8>
 800258e:	4b45      	ldr	r3, [pc, #276]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0x500>
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80025b8:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2202      	movs	r2, #2
 80025be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80025c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025c6:	fa92 f2a2 	rbit	r2, r2
 80025ca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f042 0220 	orr.w	r2, r2, #32
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f002 021f 	and.w	r2, r2, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0af      	beq.n	800254e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	21f8      	movs	r1, #248	; 0xf8
 8002604:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800260c:	fa91 f1a1 	rbit	r1, r1
 8002610:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002614:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002618:	fab1 f181 	clz	r1, r1
 800261c:	b2c9      	uxtb	r1, r1
 800261e:	408b      	lsls	r3, r1
 8002620:	4920      	ldr	r1, [pc, #128]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
 8002626:	e06c      	b.n	8002702 <HAL_RCC_OscConfig+0x646>
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800263a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	461a      	mov	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff f82a 	bl	80016ac <HAL_GetTick>
 8002658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff f825 	bl	80016ac <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	f000 bd5a 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d104      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5ec>
 800269e:	4b01      	ldr	r3, [pc, #4]	; (80026a4 <HAL_RCC_OscConfig+0x5e8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e015      	b.n	80026d0 <HAL_RCC_OscConfig+0x614>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026cc:	4bc8      	ldr	r3, [pc, #800]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2202      	movs	r2, #2
 80026d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026da:	fa92 f2a2 	rbit	r2, r2
 80026de:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026e6:	fab2 f282 	clz	r2, r2
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f042 0220 	orr.w	r2, r2, #32
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	f002 021f 	and.w	r2, r2, #31
 80026f6:	2101      	movs	r1, #1
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ad      	bne.n	800265e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8110 	beq.w	8002938 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d079      	beq.n	800281c <HAL_RCC_OscConfig+0x760>
 8002728:	2301      	movs	r3, #1
 800272a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800273a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4bab      	ldr	r3, [pc, #684]	; (80029f4 <HAL_RCC_OscConfig+0x938>)
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	461a      	mov	r2, r3
 800274e:	2301      	movs	r3, #1
 8002750:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe ffab 	bl	80016ac <HAL_GetTick>
 8002756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275c:	f7fe ffa6 	bl	80016ac <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d902      	bls.n	8002772 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f000 bcdb 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 8002772:	2302      	movs	r3, #2
 8002774:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800278c:	2202      	movs	r2, #2
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027cc:	4b88      	ldr	r3, [pc, #544]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 80027ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027d8:	2102      	movs	r1, #2
 80027da:	6019      	str	r1, [r3, #0]
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f1a3 	rbit	r1, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027f2:	6019      	str	r1, [r3, #0]
  return result;
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0a0      	beq.n	800275c <HAL_RCC_OscConfig+0x6a0>
 800281a:	e08d      	b.n	8002938 <HAL_RCC_OscConfig+0x87c>
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800283e:	601a      	str	r2, [r3, #0]
  return result;
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002848:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x938>)
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	461a      	mov	r2, r3
 800285a:	2300      	movs	r3, #0
 800285c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe ff25 	bl	80016ac <HAL_GetTick>
 8002862:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe ff20 	bl	80016ac <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d902      	bls.n	800287e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	f000 bc55 	b.w	8003128 <HAL_RCC_OscConfig+0x106c>
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002886:	2202      	movs	r2, #2
 8002888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	fa93 f2a3 	rbit	r2, r3
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028aa:	2202      	movs	r2, #2
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028ce:	2202      	movs	r2, #2
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 80028ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028f6:	2102      	movs	r1, #2
 80028f8:	6019      	str	r1, [r3, #0]
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f1a3 	rbit	r1, r3
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002910:	6019      	str	r1, [r3, #0]
  return result;
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d197      	bne.n	8002868 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81a1 	beq.w	8002c90 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d116      	bne.n	800298e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296a:	61d3      	str	r3, [r2, #28]
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002986:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_RCC_OscConfig+0x93c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11a      	bne.n	80029d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_RCC_OscConfig+0x93c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <HAL_RCC_OscConfig+0x93c>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fe81 	bl	80016ac <HAL_GetTick>
 80029aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	e009      	b.n	80029c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7fe fe7c 	bl	80016ac <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b64      	cmp	r3, #100	; 0x64
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e3b1      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_RCC_OscConfig+0x93c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ef      	beq.n	80029b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10d      	bne.n	80029fc <HAL_RCC_OscConfig+0x940>
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a02      	ldr	r2, [pc, #8]	; (80029f0 <HAL_RCC_OscConfig+0x934>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e03c      	b.n	8002a68 <HAL_RCC_OscConfig+0x9ac>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	10908120 	.word	0x10908120
 80029f8:	40007000 	.word	0x40007000
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCC_OscConfig+0x96a>
 8002a0c:	4bc1      	ldr	r3, [pc, #772]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4ac0      	ldr	r2, [pc, #768]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
 8002a18:	4bbe      	ldr	r3, [pc, #760]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4abd      	ldr	r2, [pc, #756]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a1e:	f023 0304 	bic.w	r3, r3, #4
 8002a22:	6213      	str	r3, [r2, #32]
 8002a24:	e020      	b.n	8002a68 <HAL_RCC_OscConfig+0x9ac>
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x994>
 8002a36:	4bb7      	ldr	r3, [pc, #732]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4ab6      	ldr	r2, [pc, #728]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4bb4      	ldr	r3, [pc, #720]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4ab3      	ldr	r2, [pc, #716]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0x9ac>
 8002a50:	4bb0      	ldr	r3, [pc, #704]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4aaf      	ldr	r2, [pc, #700]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	4bad      	ldr	r3, [pc, #692]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4aac      	ldr	r2, [pc, #688]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002a62:	f023 0304 	bic.w	r3, r3, #4
 8002a66:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8081 	beq.w	8002b7c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fe17 	bl	80016ac <HAL_GetTick>
 8002a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe fe12 	bl	80016ac <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e345      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ac8:	2202      	movs	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ae2:	601a      	str	r2, [r3, #0]
  return result;
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002aec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0xa4c>
 8002b02:	4b84      	ldr	r3, [pc, #528]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	e013      	b.n	8002b30 <HAL_RCC_OscConfig+0xa74>
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b34:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b38:	2102      	movs	r1, #2
 8002b3a:	6011      	str	r1, [r2, #0]
 8002b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b40:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	fa92 f1a2 	rbit	r1, r2
 8002b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b4e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b52:	6011      	str	r1, [r2, #0]
  return result;
 8002b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b58:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	fab2 f282 	clz	r2, r2
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	f002 021f 	and.w	r2, r2, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f202 	lsl.w	r2, r1, r2
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d084      	beq.n	8002a84 <HAL_RCC_OscConfig+0x9c8>
 8002b7a:	e07f      	b.n	8002c7c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fd96 	bl	80016ac <HAL_GetTick>
 8002b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	e00b      	b.n	8002b9e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fd91 	bl	80016ac <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e2c4      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f2a3 	rbit	r2, r3
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bca:	2202      	movs	r2, #2
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002be4:	601a      	str	r2, [r3, #0]
  return result;
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_OscConfig+0xb4e>
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	e013      	b.n	8002c32 <HAL_RCC_OscConfig+0xb76>
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	6011      	str	r1, [r2, #0]
 8002c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c42:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	fa92 f1a2 	rbit	r1, r2
 8002c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c54:	6011      	str	r1, [r2, #0]
  return result;
 8002c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d184      	bne.n	8002b86 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d105      	bne.n	8002c90 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8242 	beq.w	8003126 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_RCC_OscConfig+0xc58>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	f000 8213 	beq.w	80030d6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	f040 8162 	bne.w	8002f86 <HAL_RCC_OscConfig+0xeca>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ce6:	601a      	str	r2, [r3, #0]
  return result;
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cf0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	461a      	mov	r2, r3
 8002d04:	2300      	movs	r3, #0
 8002d06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe fcd0 	bl	80016ac <HAL_GetTick>
 8002d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d10:	e00c      	b.n	8002d2c <HAL_RCC_OscConfig+0xc70>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fcc8 	bl	80016ac <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1fd      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d50:	601a      	str	r2, [r3, #0]
  return result;
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0xcba>
 8002d70:	4bb0      	ldr	r3, [pc, #704]	; (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e027      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd0a>
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	4b9c      	ldr	r3, [pc, #624]	; (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dca:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002dce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dd2:	6011      	str	r1, [r2, #0]
 8002dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	fa92 f1a2 	rbit	r1, r2
 8002de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dea:	6011      	str	r1, [r2, #0]
  return result;
 8002dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0220 	orr.w	r2, r2, #32
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d182      	bne.n	8002d18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e12:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	497f      	ldr	r1, [pc, #508]	; (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fc14 	bl	80016ac <HAL_GetTick>
 8002e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7fe fc0f 	bl	80016ac <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e144      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ec2:	601a      	str	r2, [r3, #0]
  return result;
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ecc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xe2c>
 8002ee2:	4b54      	ldr	r3, [pc, #336]	; (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e027      	b.n	8002f38 <HAL_RCC_OscConfig+0xe7c>
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f12:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0xf78>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f4a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	fa92 f1a2 	rbit	r1, r2
 8002f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f58:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f5c:	6011      	str	r1, [r2, #0]
  return result;
 8002f5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f002 021f 	and.w	r2, r2, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d082      	beq.n	8002e8a <HAL_RCC_OscConfig+0xdce>
 8002f84:	e0cf      	b.n	8003126 <HAL_RCC_OscConfig+0x106a>
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	fa93 f2a3 	rbit	r2, r3
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002faa:	601a      	str	r2, [r3, #0]
  return result;
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fb6e 	bl	80016ac <HAL_GetTick>
 8002fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	e009      	b.n	8002fea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe fb69 	bl	80016ac <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e09e      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800300e:	601a      	str	r2, [r3, #0]
  return result;
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003018:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d104      	bne.n	8003038 <HAL_RCC_OscConfig+0xf7c>
 800302e:	4b01      	ldr	r3, [pc, #4]	; (8003034 <HAL_RCC_OscConfig+0xf78>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	e029      	b.n	8003088 <HAL_RCC_OscConfig+0xfcc>
 8003034:	40021000 	.word	0x40021000
 8003038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <HAL_RCC_OscConfig+0x1078>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003090:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003094:	6011      	str	r1, [r2, #0]
 8003096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	fa92 f1a2 	rbit	r1, r2
 80030a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030ac:	6011      	str	r1, [r2, #0]
  return result;
 80030ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	fab2 f282 	clz	r2, r2
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f042 0220 	orr.w	r2, r2, #32
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f002 021f 	and.w	r2, r2, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d180      	bne.n	8002fd6 <HAL_RCC_OscConfig+0xf1a>
 80030d4:	e027      	b.n	8003126 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e01e      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_RCC_OscConfig+0x1078>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	429a      	cmp	r2, r3
 8003108:	d10b      	bne.n	8003122 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800310a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800310e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800311e:	429a      	cmp	r2, r3
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b09e      	sub	sp, #120	; 0x78
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e162      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003150:	4b90      	ldr	r3, [pc, #576]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d910      	bls.n	8003180 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b8d      	ldr	r3, [pc, #564]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	498b      	ldr	r1, [pc, #556]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e14a      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b82      	ldr	r3, [pc, #520]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	497f      	ldr	r1, [pc, #508]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80dc 	beq.w	8003364 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d13c      	bne.n	800322e <HAL_RCC_ClockConfig+0xf6>
 80031b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_RCC_ClockConfig+0xa6>
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	e00f      	b.n	80031fe <HAL_RCC_ClockConfig+0xc6>
 80031de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	667b      	str	r3, [r7, #100]	; 0x64
 80031ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f0:	663b      	str	r3, [r7, #96]	; 0x60
 80031f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031fa:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003202:	65ba      	str	r2, [r7, #88]	; 0x58
 8003204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003206:	fa92 f2a2 	rbit	r2, r2
 800320a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800320c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800320e:	fab2 f282 	clz	r2, r2
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f042 0220 	orr.w	r2, r2, #32
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	f002 021f 	and.w	r2, r2, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d17b      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0f3      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d13c      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x178>
 8003236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <HAL_RCC_ClockConfig+0x128>
 800325a:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	e00f      	b.n	8003280 <HAL_RCC_ClockConfig+0x148>
 8003260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	647b      	str	r3, [r7, #68]	; 0x44
 800326e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003272:	643b      	str	r3, [r7, #64]	; 0x40
 8003274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327c:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003284:	63ba      	str	r2, [r7, #56]	; 0x38
 8003286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003288:	fa92 f2a2 	rbit	r2, r2
 800328c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800328e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f002 021f 	and.w	r2, r2, #31
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d13a      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0b2      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
 80032b0:	2302      	movs	r3, #2
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x1a0>
 80032d2:	4b31      	ldr	r3, [pc, #196]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	e00d      	b.n	80032f4 <HAL_RCC_ClockConfig+0x1bc>
 80032d8:	2302      	movs	r3, #2
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	2302      	movs	r3, #2
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	2202      	movs	r2, #2
 80032f6:	61ba      	str	r2, [r7, #24]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	fa92 f2a2 	rbit	r2, r2
 80032fe:	617a      	str	r2, [r7, #20]
  return result;
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	fab2 f282 	clz	r2, r2
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	f042 0220 	orr.w	r2, r2, #32
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	f002 021f 	and.w	r2, r2, #31
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f202 	lsl.w	r2, r1, r2
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e079      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	491a      	ldr	r1, [pc, #104]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7fe f9ba 	bl	80016ac <HAL_GetTick>
 8003338:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fe f9b6 	bl	80016ac <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e061      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_RCC_ClockConfig+0x260>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d214      	bcs.n	800339c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 0207 	bic.w	r2, r3, #7
 800337a:	4906      	ldr	r1, [pc, #24]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <HAL_RCC_ClockConfig+0x25c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e040      	b.n	8003416 <HAL_RCC_ClockConfig+0x2de>
 8003394:	40022000 	.word	0x40022000
 8003398:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	491a      	ldr	r1, [pc, #104]	; (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4912      	ldr	r1, [pc, #72]	; (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033da:	f000 f829 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033de:	4601      	mov	r1, r0
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_RCC_ClockConfig+0x2e8>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e8:	22f0      	movs	r2, #240	; 0xf0
 80033ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	fa92 f2a2 	rbit	r2, r2
 80033f2:	60fa      	str	r2, [r7, #12]
  return result;
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fab2 f282 	clz	r2, r2
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	40d3      	lsrs	r3, r2
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x2ec>)
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	fa21 f303 	lsr.w	r3, r1, r3
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <HAL_RCC_ClockConfig+0x2f0>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <HAL_RCC_ClockConfig+0x2f4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe f908 	bl	8001624 <HAL_InitTick>
  
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3778      	adds	r7, #120	; 0x78
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	08005928 	.word	0x08005928
 8003428:	20000000 	.word	0x20000000
 800342c:	20000004 	.word	0x20000004

08003430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	b08b      	sub	sp, #44	; 0x2c
 8003434:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800344a:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x30>
 800345a:	2b08      	cmp	r3, #8
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x36>
 800345e:	e03c      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003460:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003462:	623b      	str	r3, [r7, #32]
      break;
 8003464:	e03c      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800346c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003470:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	fa92 f2a2 	rbit	r2, r2
 8003478:	607a      	str	r2, [r7, #4]
  return result;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	fab2 f282 	clz	r2, r2
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	40d3      	lsrs	r3, r2
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800348a:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	220f      	movs	r2, #15
 8003494:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	fa92 f2a2 	rbit	r2, r2
 800349c:	60fa      	str	r2, [r7, #12]
  return result;
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	fab2 f282 	clz	r2, r2
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	40d3      	lsrs	r3, r2
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034b8:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	e004      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	623b      	str	r3, [r7, #32]
      break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034dc:	623b      	str	r3, [r7, #32]
      break;
 80034de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e0:	6a3b      	ldr	r3, [r7, #32]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	372c      	adds	r7, #44	; 0x2c
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	007a1200 	.word	0x007a1200
 80034f8:	08005938 	.word	0x08005938
 80034fc:	08005948 	.word	0x08005948
 8003500:	003d0900 	.word	0x003d0900

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b092      	sub	sp, #72	; 0x48
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80d4 	beq.w	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003528:	4b4e      	ldr	r3, [pc, #312]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10e      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	61d3      	str	r3, [r2, #28]
 8003540:	4b48      	ldr	r3, [pc, #288]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b45      	ldr	r3, [pc, #276]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b42      	ldr	r3, [pc, #264]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a41      	ldr	r2, [pc, #260]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7fe f89f 	bl	80016ac <HAL_GetTick>
 800356e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003572:	f7fe f89b 	bl	80016ac <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b64      	cmp	r3, #100	; 0x64
 800357e:	d901      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e169      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003590:	4b34      	ldr	r3, [pc, #208]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003598:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8084 	beq.w	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d07c      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b26      	ldr	r3, [pc, #152]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	461a      	mov	r2, r3
 80035da:	2301      	movs	r3, #1
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	461a      	mov	r2, r3
 80035fe:	2300      	movs	r3, #0
 8003600:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003606:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe f84b 	bl	80016ac <HAL_GetTick>
 8003616:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe f847 	bl	80016ac <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e113      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003630:	2302      	movs	r3, #2
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	2302      	movs	r3, #2
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	61fb      	str	r3, [r7, #28]
  return result;
 8003648:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d108      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800365e:	4b01      	ldr	r3, [pc, #4]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	e00d      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	10908100 	.word	0x10908100
 8003670:	2302      	movs	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	4b78      	ldr	r3, [pc, #480]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2202      	movs	r2, #2
 8003682:	613a      	str	r2, [r7, #16]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	fa92 f2a2 	rbit	r2, r2
 800368a:	60fa      	str	r2, [r7, #12]
  return result;
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f002 021f 	and.w	r2, r2, #31
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0b7      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036aa:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	496a      	ldr	r1, [pc, #424]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c4:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4a65      	ldr	r2, [pc, #404]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036dc:	4b60      	ldr	r3, [pc, #384]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f023 0203 	bic.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	495d      	ldr	r1, [pc, #372]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036fa:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4956      	ldr	r1, [pc, #344]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003718:	4b51      	ldr	r3, [pc, #324]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	494e      	ldr	r1, [pc, #312]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f023 0210 	bic.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4947      	ldr	r1, [pc, #284]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003744:	4313      	orrs	r3, r2
 8003746:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003754:	4b42      	ldr	r3, [pc, #264]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	493f      	ldr	r1, [pc, #252]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f023 0220 	bic.w	r2, r3, #32
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4938      	ldr	r1, [pc, #224]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003790:	4b33      	ldr	r3, [pc, #204]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4930      	ldr	r1, [pc, #192]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	4929      	ldr	r1, [pc, #164]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4921      	ldr	r1, [pc, #132]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	491a      	ldr	r1, [pc, #104]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	4912      	ldr	r1, [pc, #72]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	490b      	ldr	r1, [pc, #44]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3748      	adds	r7, #72	; 0x48
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000

08003864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e09d      	b.n	80039b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	2b00      	cmp	r3, #0
 800387c:	d108      	bne.n	8003890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003886:	d009      	beq.n	800389c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	61da      	str	r2, [r3, #28]
 800388e:	e005      	b.n	800389c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd fc1a 	bl	80010f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038dc:	d902      	bls.n	80038e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e002      	b.n	80038ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038f2:	d007      	beq.n	8003904 <HAL_SPI_Init+0xa0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	ea42 0103 	orr.w	r1, r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	f003 0204 	and.w	r2, r3, #4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003980:	ea42 0103 	orr.w	r1, r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b088      	sub	sp, #32
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_SPI_Transmit+0x22>
 80039d8:	2302      	movs	r3, #2
 80039da:	e158      	b.n	8003c8e <HAL_SPI_Transmit+0x2d4>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039e4:	f7fd fe62 	bl	80016ac <HAL_GetTick>
 80039e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d002      	beq.n	8003a00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039fe:	e13d      	b.n	8003c7c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_Transmit+0x52>
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a10:	e134      	b.n	8003c7c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2203      	movs	r2, #3
 8003a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5c:	d10f      	bne.n	8003a7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d007      	beq.n	8003a9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aa4:	d94b      	bls.n	8003b3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0xfa>
 8003aae:	8afb      	ldrh	r3, [r7, #22]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d13e      	bne.n	8003b32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ad8:	e02b      	b.n	8003b32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d112      	bne.n	8003b0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b0c:	e011      	b.n	8003b32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0e:	f7fd fdcd 	bl	80016ac <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d803      	bhi.n	8003b26 <HAL_SPI_Transmit+0x16c>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d102      	bne.n	8003b2c <HAL_SPI_Transmit+0x172>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b30:	e0a4      	b.n	8003c7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ce      	bne.n	8003ada <HAL_SPI_Transmit+0x120>
 8003b3c:	e07c      	b.n	8003c38 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_Transmit+0x192>
 8003b46:	8afb      	ldrh	r3, [r7, #22]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d170      	bne.n	8003c2e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d912      	bls.n	8003b7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	881a      	ldrh	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	1c9a      	adds	r2, r3, #2
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b02      	subs	r3, #2
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b7a:	e058      	b.n	8003c2e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ba2:	e044      	b.n	8003c2e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d12b      	bne.n	8003c0a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d912      	bls.n	8003be2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b02      	subs	r3, #2
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003be0:	e025      	b.n	8003c2e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	330c      	adds	r3, #12
 8003bec:	7812      	ldrb	r2, [r2, #0]
 8003bee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c08:	e011      	b.n	8003c2e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0a:	f7fd fd4f 	bl	80016ac <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d803      	bhi.n	8003c22 <HAL_SPI_Transmit+0x268>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_Transmit+0x26e>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c2c:	e026      	b.n	8003c7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1b5      	bne.n	8003ba4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f949 	bl	8003ed4 <SPI_EndRxTxTransaction>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e000      	b.n	8003c7c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003c7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ca8:	f7fd fd00 	bl	80016ac <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cb8:	f7fd fcf8 	bl	80016ac <HAL_GetTick>
 8003cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cbe:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	015b      	lsls	r3, r3, #5
 8003cc4:	0d1b      	lsrs	r3, r3, #20
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cce:	e054      	b.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d050      	beq.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cd8:	f7fd fce8 	bl	80016ac <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d902      	bls.n	8003cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d13d      	bne.n	8003d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d06:	d111      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d10:	d004      	beq.n	8003d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d107      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d34:	d10f      	bne.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e017      	b.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d19b      	bne.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000000 	.word	0x20000000

08003da8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dba:	f7fd fc77 	bl	80016ac <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003dca:	f7fd fc6f 	bl	80016ac <HAL_GetTick>
 8003dce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003dd8:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00da      	lsls	r2, r3, #3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	0d1b      	lsrs	r3, r3, #20
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003df0:	e060      	b.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003df8:	d107      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d050      	beq.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e12:	f7fd fc4b 	bl	80016ac <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d902      	bls.n	8003e28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d13d      	bne.n	8003ea4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e40:	d111      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4a:	d004      	beq.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d107      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6e:	d10f      	bne.n	8003e90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e010      	b.n	8003ec6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d196      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3728      	adds	r7, #40	; 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000000 	.word	0x20000000

08003ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff ff5b 	bl	8003da8 <SPI_WaitFifoStateUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e027      	b.n	8003f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2180      	movs	r1, #128	; 0x80
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff fec0 	bl	8003c98 <SPI_WaitFlagStateUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e014      	b.n	8003f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff ff34 	bl	8003da8 <SPI_WaitFifoStateUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e000      	b.n	8003f58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e049      	b.n	8004006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fa68 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	f000 fae0 	bl	8004564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e04a      	b.n	80040be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_TIM_Base_Start_IT+0xbc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x6c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d013      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x6c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x6c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x6c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x6c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d115      	bne.n	80040a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d015      	beq.n	80040ba <HAL_TIM_Base_Start_IT+0xaa>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d011      	beq.n	80040ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a6:	e008      	b.n	80040ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e000      	b.n	80040bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	00010007 	.word	0x00010007

080040e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	f241 1311 	movw	r3, #4369	; 0x1111
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10f      	bne.n	800412c <HAL_TIM_Base_Stop_IT+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	f240 4344 	movw	r3, #1092	; 0x444
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d107      	bne.n	800412c <HAL_TIM_Base_Stop_IT+0x48>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d122      	bne.n	800419e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d11b      	bne.n	800419e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0202 	mvn.w	r2, #2
 800416e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f9ce 	bl	8004526 <HAL_TIM_IC_CaptureCallback>
 800418a:	e005      	b.n	8004198 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f9c0 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9d1 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d122      	bne.n	80041f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d11b      	bne.n	80041f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0204 	mvn.w	r2, #4
 80041c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f9a4 	bl	8004526 <HAL_TIM_IC_CaptureCallback>
 80041de:	e005      	b.n	80041ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f996 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9a7 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d122      	bne.n	8004246 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b08      	cmp	r3, #8
 800420c:	d11b      	bne.n	8004246 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0208 	mvn.w	r2, #8
 8004216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2204      	movs	r2, #4
 800421c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f97a 	bl	8004526 <HAL_TIM_IC_CaptureCallback>
 8004232:	e005      	b.n	8004240 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f96c 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f97d 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b10      	cmp	r3, #16
 8004252:	d122      	bne.n	800429a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b10      	cmp	r3, #16
 8004260:	d11b      	bne.n	800429a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0210 	mvn.w	r2, #16
 800426a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2208      	movs	r2, #8
 8004270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f950 	bl	8004526 <HAL_TIM_IC_CaptureCallback>
 8004286:	e005      	b.n	8004294 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f942 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f953 	bl	800453a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10e      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f06f 0201 	mvn.w	r2, #1
 80042be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fc fe4b 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d10e      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d107      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 faed 	bl	80048cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fae0 	bl	80048e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f901 	bl	800454e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b20      	cmp	r3, #32
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0220 	mvn.w	r2, #32
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 faa0 	bl	80048b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIM_ConfigClockSource+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e0b6      	b.n	800450a <HAL_TIM_ConfigClockSource+0x18a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d8:	d03e      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xd8>
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043de:	f200 8087 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	f000 8086 	beq.w	80044f6 <HAL_TIM_ConfigClockSource+0x176>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d87f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 80043f0:	2b70      	cmp	r3, #112	; 0x70
 80043f2:	d01a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xaa>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d87b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 80043f8:	2b60      	cmp	r3, #96	; 0x60
 80043fa:	d050      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x11e>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d877      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d03c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xfe>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d873      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d058      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x13e>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d86f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004410:	2b30      	cmp	r3, #48	; 0x30
 8004412:	d064      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d867      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 8004424:	2b10      	cmp	r3, #16
 8004426:	d05a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 8004428:	e062      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 f99d 	bl	8004778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800444c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e04f      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f000 f986 	bl	8004778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f8fa 	bl	8004684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	; 0x50
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f953 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 800449c:	e02c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 f919 	bl	80046e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	; 0x60
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f943 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 f8da 	bl	8004684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f933 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f000 f92a 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <TIM_Base_SetConfig+0x104>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00f      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004582:	d00b      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a39      	ldr	r2, [pc, #228]	; (800466c <TIM_Base_SetConfig+0x108>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a38      	ldr	r2, [pc, #224]	; (8004670 <TIM_Base_SetConfig+0x10c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_Base_SetConfig+0x38>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a37      	ldr	r2, [pc, #220]	; (8004674 <TIM_Base_SetConfig+0x110>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2d      	ldr	r2, [pc, #180]	; (8004668 <TIM_Base_SetConfig+0x104>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01b      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d017      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2a      	ldr	r2, [pc, #168]	; (800466c <TIM_Base_SetConfig+0x108>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a29      	ldr	r2, [pc, #164]	; (8004670 <TIM_Base_SetConfig+0x10c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a28      	ldr	r2, [pc, #160]	; (8004674 <TIM_Base_SetConfig+0x110>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a27      	ldr	r2, [pc, #156]	; (8004678 <TIM_Base_SetConfig+0x114>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a26      	ldr	r2, [pc, #152]	; (800467c <TIM_Base_SetConfig+0x118>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_Base_SetConfig+0x8a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a25      	ldr	r2, [pc, #148]	; (8004680 <TIM_Base_SetConfig+0x11c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a10      	ldr	r2, [pc, #64]	; (8004668 <TIM_Base_SetConfig+0x104>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <TIM_Base_SetConfig+0xe8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a11      	ldr	r2, [pc, #68]	; (8004674 <TIM_Base_SetConfig+0x110>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00b      	beq.n	800464c <TIM_Base_SetConfig+0xe8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <TIM_Base_SetConfig+0x114>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_Base_SetConfig+0xe8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a0f      	ldr	r2, [pc, #60]	; (800467c <TIM_Base_SetConfig+0x118>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0xe8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <TIM_Base_SetConfig+0x11c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d103      	bne.n	8004654 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	615a      	str	r2, [r3, #20]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40013400 	.word	0x40013400
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800

08004684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 030a 	bic.w	r3, r3, #10
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b087      	sub	sp, #28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0210 	bic.w	r2, r3, #16
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800470c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	031b      	lsls	r3, r3, #12
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800471e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	f043 0307 	orr.w	r3, r3, #7
 8004764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	431a      	orrs	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e063      	b.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800480a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d018      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d013      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00e      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10c      	bne.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	4313      	orrs	r3, r2
 800487c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40013400 	.word	0x40013400
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40014000 	.word	0x40014000

080048b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004900:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	b29b      	uxth	r3, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	b29b      	uxth	r3, r3
 8004912:	4013      	ands	r3, r2
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800492a:	b084      	sub	sp, #16
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	f107 0014 	add.w	r0, r7, #20
 8004938:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	b004      	add	sp, #16
 800496a:	4770      	bx	lr

0800496c <__errno>:
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <__errno+0x8>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4d0d      	ldr	r5, [pc, #52]	; (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	; (80049b4 <__libc_init_array+0x3c>)
 800497e:	1b64      	subs	r4, r4, r5
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2600      	movs	r6, #0
 8004984:	42a6      	cmp	r6, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4d0b      	ldr	r5, [pc, #44]	; (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	; (80049bc <__libc_init_array+0x44>)
 800498c:	f000 fca8 	bl	80052e0 <_init>
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2600      	movs	r6, #0
 8004996:	42a6      	cmp	r6, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a0:	4798      	blx	r3
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049aa:	4798      	blx	r3
 80049ac:	3601      	adds	r6, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	08005a8c 	.word	0x08005a8c
 80049b4:	08005a8c 	.word	0x08005a8c
 80049b8:	08005a8c 	.word	0x08005a8c
 80049bc:	08005a90 	.word	0x08005a90

080049c0 <memset>:
 80049c0:	4402      	add	r2, r0
 80049c2:	4603      	mov	r3, r0
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d100      	bne.n	80049ca <memset+0xa>
 80049c8:	4770      	bx	lr
 80049ca:	f803 1b01 	strb.w	r1, [r3], #1
 80049ce:	e7f9      	b.n	80049c4 <memset+0x4>

080049d0 <_vsniprintf_r>:
 80049d0:	b530      	push	{r4, r5, lr}
 80049d2:	4614      	mov	r4, r2
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	b09b      	sub	sp, #108	; 0x6c
 80049d8:	4605      	mov	r5, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	da05      	bge.n	80049ea <_vsniprintf_r+0x1a>
 80049de:	238b      	movs	r3, #139	; 0x8b
 80049e0:	6003      	str	r3, [r0, #0]
 80049e2:	f04f 30ff 	mov.w	r0, #4294967295
 80049e6:	b01b      	add	sp, #108	; 0x6c
 80049e8:	bd30      	pop	{r4, r5, pc}
 80049ea:	f44f 7302 	mov.w	r3, #520	; 0x208
 80049ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80049f2:	bf14      	ite	ne
 80049f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80049f8:	4623      	moveq	r3, r4
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	9305      	str	r3, [sp, #20]
 80049fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a02:	9100      	str	r1, [sp, #0]
 8004a04:	9104      	str	r1, [sp, #16]
 8004a06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004a0a:	4669      	mov	r1, sp
 8004a0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a0e:	f000 f875 	bl	8004afc <_svfiprintf_r>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	bfbc      	itt	lt
 8004a16:	238b      	movlt	r3, #139	; 0x8b
 8004a18:	602b      	strlt	r3, [r5, #0]
 8004a1a:	2c00      	cmp	r4, #0
 8004a1c:	d0e3      	beq.n	80049e6 <_vsniprintf_r+0x16>
 8004a1e:	9b00      	ldr	r3, [sp, #0]
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e7df      	b.n	80049e6 <_vsniprintf_r+0x16>
	...

08004a28 <vsniprintf>:
 8004a28:	b507      	push	{r0, r1, r2, lr}
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	460a      	mov	r2, r1
 8004a30:	4601      	mov	r1, r0
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <vsniprintf+0x18>)
 8004a34:	6800      	ldr	r0, [r0, #0]
 8004a36:	f7ff ffcb 	bl	80049d0 <_vsniprintf_r>
 8004a3a:	b003      	add	sp, #12
 8004a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <__ssputs_r>:
 8004a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	688e      	ldr	r6, [r1, #8]
 8004a4a:	429e      	cmp	r6, r3
 8004a4c:	4682      	mov	sl, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	4690      	mov	r8, r2
 8004a52:	461f      	mov	r7, r3
 8004a54:	d838      	bhi.n	8004ac8 <__ssputs_r+0x84>
 8004a56:	898a      	ldrh	r2, [r1, #12]
 8004a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a5c:	d032      	beq.n	8004ac4 <__ssputs_r+0x80>
 8004a5e:	6825      	ldr	r5, [r4, #0]
 8004a60:	6909      	ldr	r1, [r1, #16]
 8004a62:	eba5 0901 	sub.w	r9, r5, r1
 8004a66:	6965      	ldr	r5, [r4, #20]
 8004a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a70:	3301      	adds	r3, #1
 8004a72:	444b      	add	r3, r9
 8004a74:	106d      	asrs	r5, r5, #1
 8004a76:	429d      	cmp	r5, r3
 8004a78:	bf38      	it	cc
 8004a7a:	461d      	movcc	r5, r3
 8004a7c:	0553      	lsls	r3, r2, #21
 8004a7e:	d531      	bpl.n	8004ae4 <__ssputs_r+0xa0>
 8004a80:	4629      	mov	r1, r5
 8004a82:	f000 fb63 	bl	800514c <_malloc_r>
 8004a86:	4606      	mov	r6, r0
 8004a88:	b950      	cbnz	r0, 8004aa0 <__ssputs_r+0x5c>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	f8ca 3000 	str.w	r3, [sl]
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a96:	81a3      	strh	r3, [r4, #12]
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa0:	6921      	ldr	r1, [r4, #16]
 8004aa2:	464a      	mov	r2, r9
 8004aa4:	f000 fabe 	bl	8005024 <memcpy>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	6126      	str	r6, [r4, #16]
 8004ab6:	6165      	str	r5, [r4, #20]
 8004ab8:	444e      	add	r6, r9
 8004aba:	eba5 0509 	sub.w	r5, r5, r9
 8004abe:	6026      	str	r6, [r4, #0]
 8004ac0:	60a5      	str	r5, [r4, #8]
 8004ac2:	463e      	mov	r6, r7
 8004ac4:	42be      	cmp	r6, r7
 8004ac6:	d900      	bls.n	8004aca <__ssputs_r+0x86>
 8004ac8:	463e      	mov	r6, r7
 8004aca:	6820      	ldr	r0, [r4, #0]
 8004acc:	4632      	mov	r2, r6
 8004ace:	4641      	mov	r1, r8
 8004ad0:	f000 fab6 	bl	8005040 <memmove>
 8004ad4:	68a3      	ldr	r3, [r4, #8]
 8004ad6:	1b9b      	subs	r3, r3, r6
 8004ad8:	60a3      	str	r3, [r4, #8]
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	4433      	add	r3, r6
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e7db      	b.n	8004a9c <__ssputs_r+0x58>
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	f000 fba5 	bl	8005234 <_realloc_r>
 8004aea:	4606      	mov	r6, r0
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d1e1      	bne.n	8004ab4 <__ssputs_r+0x70>
 8004af0:	6921      	ldr	r1, [r4, #16]
 8004af2:	4650      	mov	r0, sl
 8004af4:	f000 fabe 	bl	8005074 <_free_r>
 8004af8:	e7c7      	b.n	8004a8a <__ssputs_r+0x46>
	...

08004afc <_svfiprintf_r>:
 8004afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b00:	4698      	mov	r8, r3
 8004b02:	898b      	ldrh	r3, [r1, #12]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	b09d      	sub	sp, #116	; 0x74
 8004b08:	4607      	mov	r7, r0
 8004b0a:	460d      	mov	r5, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	d50e      	bpl.n	8004b2e <_svfiprintf_r+0x32>
 8004b10:	690b      	ldr	r3, [r1, #16]
 8004b12:	b963      	cbnz	r3, 8004b2e <_svfiprintf_r+0x32>
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	f000 fb19 	bl	800514c <_malloc_r>
 8004b1a:	6028      	str	r0, [r5, #0]
 8004b1c:	6128      	str	r0, [r5, #16]
 8004b1e:	b920      	cbnz	r0, 8004b2a <_svfiprintf_r+0x2e>
 8004b20:	230c      	movs	r3, #12
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	e0d1      	b.n	8004cce <_svfiprintf_r+0x1d2>
 8004b2a:	2340      	movs	r3, #64	; 0x40
 8004b2c:	616b      	str	r3, [r5, #20]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9309      	str	r3, [sp, #36]	; 0x24
 8004b32:	2320      	movs	r3, #32
 8004b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b3c:	2330      	movs	r3, #48	; 0x30
 8004b3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ce8 <_svfiprintf_r+0x1ec>
 8004b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b46:	f04f 0901 	mov.w	r9, #1
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	469a      	mov	sl, r3
 8004b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b52:	b10a      	cbz	r2, 8004b58 <_svfiprintf_r+0x5c>
 8004b54:	2a25      	cmp	r2, #37	; 0x25
 8004b56:	d1f9      	bne.n	8004b4c <_svfiprintf_r+0x50>
 8004b58:	ebba 0b04 	subs.w	fp, sl, r4
 8004b5c:	d00b      	beq.n	8004b76 <_svfiprintf_r+0x7a>
 8004b5e:	465b      	mov	r3, fp
 8004b60:	4622      	mov	r2, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	4638      	mov	r0, r7
 8004b66:	f7ff ff6d 	bl	8004a44 <__ssputs_r>
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f000 80aa 	beq.w	8004cc4 <_svfiprintf_r+0x1c8>
 8004b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b72:	445a      	add	r2, fp
 8004b74:	9209      	str	r2, [sp, #36]	; 0x24
 8004b76:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80a2 	beq.w	8004cc4 <_svfiprintf_r+0x1c8>
 8004b80:	2300      	movs	r3, #0
 8004b82:	f04f 32ff 	mov.w	r2, #4294967295
 8004b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b8a:	f10a 0a01 	add.w	sl, sl, #1
 8004b8e:	9304      	str	r3, [sp, #16]
 8004b90:	9307      	str	r3, [sp, #28]
 8004b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b96:	931a      	str	r3, [sp, #104]	; 0x68
 8004b98:	4654      	mov	r4, sl
 8004b9a:	2205      	movs	r2, #5
 8004b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba0:	4851      	ldr	r0, [pc, #324]	; (8004ce8 <_svfiprintf_r+0x1ec>)
 8004ba2:	f7fb fb15 	bl	80001d0 <memchr>
 8004ba6:	9a04      	ldr	r2, [sp, #16]
 8004ba8:	b9d8      	cbnz	r0, 8004be2 <_svfiprintf_r+0xe6>
 8004baa:	06d0      	lsls	r0, r2, #27
 8004bac:	bf44      	itt	mi
 8004bae:	2320      	movmi	r3, #32
 8004bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb4:	0711      	lsls	r1, r2, #28
 8004bb6:	bf44      	itt	mi
 8004bb8:	232b      	movmi	r3, #43	; 0x2b
 8004bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc4:	d015      	beq.n	8004bf2 <_svfiprintf_r+0xf6>
 8004bc6:	9a07      	ldr	r2, [sp, #28]
 8004bc8:	4654      	mov	r4, sl
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f04f 0c0a 	mov.w	ip, #10
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd6:	3b30      	subs	r3, #48	; 0x30
 8004bd8:	2b09      	cmp	r3, #9
 8004bda:	d94e      	bls.n	8004c7a <_svfiprintf_r+0x17e>
 8004bdc:	b1b0      	cbz	r0, 8004c0c <_svfiprintf_r+0x110>
 8004bde:	9207      	str	r2, [sp, #28]
 8004be0:	e014      	b.n	8004c0c <_svfiprintf_r+0x110>
 8004be2:	eba0 0308 	sub.w	r3, r0, r8
 8004be6:	fa09 f303 	lsl.w	r3, r9, r3
 8004bea:	4313      	orrs	r3, r2
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	46a2      	mov	sl, r4
 8004bf0:	e7d2      	b.n	8004b98 <_svfiprintf_r+0x9c>
 8004bf2:	9b03      	ldr	r3, [sp, #12]
 8004bf4:	1d19      	adds	r1, r3, #4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	9103      	str	r1, [sp, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bfbb      	ittet	lt
 8004bfe:	425b      	neglt	r3, r3
 8004c00:	f042 0202 	orrlt.w	r2, r2, #2
 8004c04:	9307      	strge	r3, [sp, #28]
 8004c06:	9307      	strlt	r3, [sp, #28]
 8004c08:	bfb8      	it	lt
 8004c0a:	9204      	strlt	r2, [sp, #16]
 8004c0c:	7823      	ldrb	r3, [r4, #0]
 8004c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c10:	d10c      	bne.n	8004c2c <_svfiprintf_r+0x130>
 8004c12:	7863      	ldrb	r3, [r4, #1]
 8004c14:	2b2a      	cmp	r3, #42	; 0x2a
 8004c16:	d135      	bne.n	8004c84 <_svfiprintf_r+0x188>
 8004c18:	9b03      	ldr	r3, [sp, #12]
 8004c1a:	1d1a      	adds	r2, r3, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	9203      	str	r2, [sp, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bfb8      	it	lt
 8004c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c28:	3402      	adds	r4, #2
 8004c2a:	9305      	str	r3, [sp, #20]
 8004c2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cf8 <_svfiprintf_r+0x1fc>
 8004c30:	7821      	ldrb	r1, [r4, #0]
 8004c32:	2203      	movs	r2, #3
 8004c34:	4650      	mov	r0, sl
 8004c36:	f7fb facb 	bl	80001d0 <memchr>
 8004c3a:	b140      	cbz	r0, 8004c4e <_svfiprintf_r+0x152>
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	eba0 000a 	sub.w	r0, r0, sl
 8004c42:	fa03 f000 	lsl.w	r0, r3, r0
 8004c46:	9b04      	ldr	r3, [sp, #16]
 8004c48:	4303      	orrs	r3, r0
 8004c4a:	3401      	adds	r4, #1
 8004c4c:	9304      	str	r3, [sp, #16]
 8004c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c52:	4826      	ldr	r0, [pc, #152]	; (8004cec <_svfiprintf_r+0x1f0>)
 8004c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c58:	2206      	movs	r2, #6
 8004c5a:	f7fb fab9 	bl	80001d0 <memchr>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d038      	beq.n	8004cd4 <_svfiprintf_r+0x1d8>
 8004c62:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <_svfiprintf_r+0x1f4>)
 8004c64:	bb1b      	cbnz	r3, 8004cae <_svfiprintf_r+0x1b2>
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	3307      	adds	r3, #7
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	3308      	adds	r3, #8
 8004c70:	9303      	str	r3, [sp, #12]
 8004c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c74:	4433      	add	r3, r6
 8004c76:	9309      	str	r3, [sp, #36]	; 0x24
 8004c78:	e767      	b.n	8004b4a <_svfiprintf_r+0x4e>
 8004c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c7e:	460c      	mov	r4, r1
 8004c80:	2001      	movs	r0, #1
 8004c82:	e7a5      	b.n	8004bd0 <_svfiprintf_r+0xd4>
 8004c84:	2300      	movs	r3, #0
 8004c86:	3401      	adds	r4, #1
 8004c88:	9305      	str	r3, [sp, #20]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f04f 0c0a 	mov.w	ip, #10
 8004c90:	4620      	mov	r0, r4
 8004c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c96:	3a30      	subs	r2, #48	; 0x30
 8004c98:	2a09      	cmp	r2, #9
 8004c9a:	d903      	bls.n	8004ca4 <_svfiprintf_r+0x1a8>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0c5      	beq.n	8004c2c <_svfiprintf_r+0x130>
 8004ca0:	9105      	str	r1, [sp, #20]
 8004ca2:	e7c3      	b.n	8004c2c <_svfiprintf_r+0x130>
 8004ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ca8:	4604      	mov	r4, r0
 8004caa:	2301      	movs	r3, #1
 8004cac:	e7f0      	b.n	8004c90 <_svfiprintf_r+0x194>
 8004cae:	ab03      	add	r3, sp, #12
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	462a      	mov	r2, r5
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <_svfiprintf_r+0x1f8>)
 8004cb6:	a904      	add	r1, sp, #16
 8004cb8:	4638      	mov	r0, r7
 8004cba:	f3af 8000 	nop.w
 8004cbe:	1c42      	adds	r2, r0, #1
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	d1d6      	bne.n	8004c72 <_svfiprintf_r+0x176>
 8004cc4:	89ab      	ldrh	r3, [r5, #12]
 8004cc6:	065b      	lsls	r3, r3, #25
 8004cc8:	f53f af2c 	bmi.w	8004b24 <_svfiprintf_r+0x28>
 8004ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cce:	b01d      	add	sp, #116	; 0x74
 8004cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd4:	ab03      	add	r3, sp, #12
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <_svfiprintf_r+0x1f8>)
 8004cdc:	a904      	add	r1, sp, #16
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f000 f87a 	bl	8004dd8 <_printf_i>
 8004ce4:	e7eb      	b.n	8004cbe <_svfiprintf_r+0x1c2>
 8004ce6:	bf00      	nop
 8004ce8:	08005a59 	.word	0x08005a59
 8004cec:	08005a63 	.word	0x08005a63
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	08004a45 	.word	0x08004a45
 8004cf8:	08005a5f 	.word	0x08005a5f

08004cfc <_printf_common>:
 8004cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	4616      	mov	r6, r2
 8004d02:	4699      	mov	r9, r3
 8004d04:	688a      	ldr	r2, [r1, #8]
 8004d06:	690b      	ldr	r3, [r1, #16]
 8004d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bfb8      	it	lt
 8004d10:	4613      	movlt	r3, r2
 8004d12:	6033      	str	r3, [r6, #0]
 8004d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d18:	4607      	mov	r7, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	b10a      	cbz	r2, 8004d22 <_printf_common+0x26>
 8004d1e:	3301      	adds	r3, #1
 8004d20:	6033      	str	r3, [r6, #0]
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	0699      	lsls	r1, r3, #26
 8004d26:	bf42      	ittt	mi
 8004d28:	6833      	ldrmi	r3, [r6, #0]
 8004d2a:	3302      	addmi	r3, #2
 8004d2c:	6033      	strmi	r3, [r6, #0]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	f015 0506 	ands.w	r5, r5, #6
 8004d34:	d106      	bne.n	8004d44 <_printf_common+0x48>
 8004d36:	f104 0a19 	add.w	sl, r4, #25
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	6832      	ldr	r2, [r6, #0]
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dc26      	bgt.n	8004d92 <_printf_common+0x96>
 8004d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d48:	1e13      	subs	r3, r2, #0
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	bf18      	it	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	0692      	lsls	r2, r2, #26
 8004d52:	d42b      	bmi.n	8004dac <_printf_common+0xb0>
 8004d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	47c0      	blx	r8
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d01e      	beq.n	8004da0 <_printf_common+0xa4>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	68e5      	ldr	r5, [r4, #12]
 8004d66:	6832      	ldr	r2, [r6, #0]
 8004d68:	f003 0306 	and.w	r3, r3, #6
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	bf08      	it	eq
 8004d70:	1aad      	subeq	r5, r5, r2
 8004d72:	68a3      	ldr	r3, [r4, #8]
 8004d74:	6922      	ldr	r2, [r4, #16]
 8004d76:	bf0c      	ite	eq
 8004d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d7c:	2500      	movne	r5, #0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bfc4      	itt	gt
 8004d82:	1a9b      	subgt	r3, r3, r2
 8004d84:	18ed      	addgt	r5, r5, r3
 8004d86:	2600      	movs	r6, #0
 8004d88:	341a      	adds	r4, #26
 8004d8a:	42b5      	cmp	r5, r6
 8004d8c:	d11a      	bne.n	8004dc4 <_printf_common+0xc8>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e008      	b.n	8004da4 <_printf_common+0xa8>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4652      	mov	r2, sl
 8004d96:	4649      	mov	r1, r9
 8004d98:	4638      	mov	r0, r7
 8004d9a:	47c0      	blx	r8
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d103      	bne.n	8004da8 <_printf_common+0xac>
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	3501      	adds	r5, #1
 8004daa:	e7c6      	b.n	8004d3a <_printf_common+0x3e>
 8004dac:	18e1      	adds	r1, r4, r3
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	2030      	movs	r0, #48	; 0x30
 8004db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004db6:	4422      	add	r2, r4
 8004db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	e7c7      	b.n	8004d54 <_printf_common+0x58>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4638      	mov	r0, r7
 8004dcc:	47c0      	blx	r8
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d0e6      	beq.n	8004da0 <_printf_common+0xa4>
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7d9      	b.n	8004d8a <_printf_common+0x8e>
	...

08004dd8 <_printf_i>:
 8004dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	7e0f      	ldrb	r7, [r1, #24]
 8004dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004de0:	2f78      	cmp	r7, #120	; 0x78
 8004de2:	4691      	mov	r9, r2
 8004de4:	4680      	mov	r8, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	469a      	mov	sl, r3
 8004dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dee:	d807      	bhi.n	8004e00 <_printf_i+0x28>
 8004df0:	2f62      	cmp	r7, #98	; 0x62
 8004df2:	d80a      	bhi.n	8004e0a <_printf_i+0x32>
 8004df4:	2f00      	cmp	r7, #0
 8004df6:	f000 80d8 	beq.w	8004faa <_printf_i+0x1d2>
 8004dfa:	2f58      	cmp	r7, #88	; 0x58
 8004dfc:	f000 80a3 	beq.w	8004f46 <_printf_i+0x16e>
 8004e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e08:	e03a      	b.n	8004e80 <_printf_i+0xa8>
 8004e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e0e:	2b15      	cmp	r3, #21
 8004e10:	d8f6      	bhi.n	8004e00 <_printf_i+0x28>
 8004e12:	a101      	add	r1, pc, #4	; (adr r1, 8004e18 <_printf_i+0x40>)
 8004e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e85 	.word	0x08004e85
 8004e20:	08004e01 	.word	0x08004e01
 8004e24:	08004e01 	.word	0x08004e01
 8004e28:	08004e01 	.word	0x08004e01
 8004e2c:	08004e01 	.word	0x08004e01
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	08004e01 	.word	0x08004e01
 8004e38:	08004e01 	.word	0x08004e01
 8004e3c:	08004e01 	.word	0x08004e01
 8004e40:	08004e01 	.word	0x08004e01
 8004e44:	08004f91 	.word	0x08004f91
 8004e48:	08004eb5 	.word	0x08004eb5
 8004e4c:	08004f73 	.word	0x08004f73
 8004e50:	08004e01 	.word	0x08004e01
 8004e54:	08004e01 	.word	0x08004e01
 8004e58:	08004fb3 	.word	0x08004fb3
 8004e5c:	08004e01 	.word	0x08004e01
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004e01 	.word	0x08004e01
 8004e68:	08004e01 	.word	0x08004e01
 8004e6c:	08004f7b 	.word	0x08004f7b
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	602a      	str	r2, [r5, #0]
 8004e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0a3      	b.n	8004fcc <_printf_i+0x1f4>
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	6829      	ldr	r1, [r5, #0]
 8004e88:	0606      	lsls	r6, r0, #24
 8004e8a:	f101 0304 	add.w	r3, r1, #4
 8004e8e:	d50a      	bpl.n	8004ea6 <_printf_i+0xce>
 8004e90:	680e      	ldr	r6, [r1, #0]
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	2e00      	cmp	r6, #0
 8004e96:	da03      	bge.n	8004ea0 <_printf_i+0xc8>
 8004e98:	232d      	movs	r3, #45	; 0x2d
 8004e9a:	4276      	negs	r6, r6
 8004e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea0:	485e      	ldr	r0, [pc, #376]	; (800501c <_printf_i+0x244>)
 8004ea2:	230a      	movs	r3, #10
 8004ea4:	e019      	b.n	8004eda <_printf_i+0x102>
 8004ea6:	680e      	ldr	r6, [r1, #0]
 8004ea8:	602b      	str	r3, [r5, #0]
 8004eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eae:	bf18      	it	ne
 8004eb0:	b236      	sxthne	r6, r6
 8004eb2:	e7ef      	b.n	8004e94 <_printf_i+0xbc>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	6820      	ldr	r0, [r4, #0]
 8004eb8:	1d19      	adds	r1, r3, #4
 8004eba:	6029      	str	r1, [r5, #0]
 8004ebc:	0601      	lsls	r1, r0, #24
 8004ebe:	d501      	bpl.n	8004ec4 <_printf_i+0xec>
 8004ec0:	681e      	ldr	r6, [r3, #0]
 8004ec2:	e002      	b.n	8004eca <_printf_i+0xf2>
 8004ec4:	0646      	lsls	r6, r0, #25
 8004ec6:	d5fb      	bpl.n	8004ec0 <_printf_i+0xe8>
 8004ec8:	881e      	ldrh	r6, [r3, #0]
 8004eca:	4854      	ldr	r0, [pc, #336]	; (800501c <_printf_i+0x244>)
 8004ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ece:	bf0c      	ite	eq
 8004ed0:	2308      	moveq	r3, #8
 8004ed2:	230a      	movne	r3, #10
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eda:	6865      	ldr	r5, [r4, #4]
 8004edc:	60a5      	str	r5, [r4, #8]
 8004ede:	2d00      	cmp	r5, #0
 8004ee0:	bfa2      	ittt	ge
 8004ee2:	6821      	ldrge	r1, [r4, #0]
 8004ee4:	f021 0104 	bicge.w	r1, r1, #4
 8004ee8:	6021      	strge	r1, [r4, #0]
 8004eea:	b90e      	cbnz	r6, 8004ef0 <_printf_i+0x118>
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d04d      	beq.n	8004f8c <_printf_i+0x1b4>
 8004ef0:	4615      	mov	r5, r2
 8004ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8004efa:	5dc7      	ldrb	r7, [r0, r7]
 8004efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f00:	4637      	mov	r7, r6
 8004f02:	42bb      	cmp	r3, r7
 8004f04:	460e      	mov	r6, r1
 8004f06:	d9f4      	bls.n	8004ef2 <_printf_i+0x11a>
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d10b      	bne.n	8004f24 <_printf_i+0x14c>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	07de      	lsls	r6, r3, #31
 8004f10:	d508      	bpl.n	8004f24 <_printf_i+0x14c>
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	6861      	ldr	r1, [r4, #4]
 8004f16:	4299      	cmp	r1, r3
 8004f18:	bfde      	ittt	le
 8004f1a:	2330      	movle	r3, #48	; 0x30
 8004f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f24:	1b52      	subs	r2, r2, r5
 8004f26:	6122      	str	r2, [r4, #16]
 8004f28:	f8cd a000 	str.w	sl, [sp]
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	aa03      	add	r2, sp, #12
 8004f30:	4621      	mov	r1, r4
 8004f32:	4640      	mov	r0, r8
 8004f34:	f7ff fee2 	bl	8004cfc <_printf_common>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d14c      	bne.n	8004fd6 <_printf_i+0x1fe>
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	b004      	add	sp, #16
 8004f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f46:	4835      	ldr	r0, [pc, #212]	; (800501c <_printf_i+0x244>)
 8004f48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f4c:	6829      	ldr	r1, [r5, #0]
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f54:	6029      	str	r1, [r5, #0]
 8004f56:	061d      	lsls	r5, r3, #24
 8004f58:	d514      	bpl.n	8004f84 <_printf_i+0x1ac>
 8004f5a:	07df      	lsls	r7, r3, #31
 8004f5c:	bf44      	itt	mi
 8004f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f62:	6023      	strmi	r3, [r4, #0]
 8004f64:	b91e      	cbnz	r6, 8004f6e <_printf_i+0x196>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f023 0320 	bic.w	r3, r3, #32
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	2310      	movs	r3, #16
 8004f70:	e7b0      	b.n	8004ed4 <_printf_i+0xfc>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	f043 0320 	orr.w	r3, r3, #32
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	2378      	movs	r3, #120	; 0x78
 8004f7c:	4828      	ldr	r0, [pc, #160]	; (8005020 <_printf_i+0x248>)
 8004f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f82:	e7e3      	b.n	8004f4c <_printf_i+0x174>
 8004f84:	0659      	lsls	r1, r3, #25
 8004f86:	bf48      	it	mi
 8004f88:	b2b6      	uxthmi	r6, r6
 8004f8a:	e7e6      	b.n	8004f5a <_printf_i+0x182>
 8004f8c:	4615      	mov	r5, r2
 8004f8e:	e7bb      	b.n	8004f08 <_printf_i+0x130>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	6826      	ldr	r6, [r4, #0]
 8004f94:	6961      	ldr	r1, [r4, #20]
 8004f96:	1d18      	adds	r0, r3, #4
 8004f98:	6028      	str	r0, [r5, #0]
 8004f9a:	0635      	lsls	r5, r6, #24
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_i+0x1cc>
 8004fa0:	6019      	str	r1, [r3, #0]
 8004fa2:	e002      	b.n	8004faa <_printf_i+0x1d2>
 8004fa4:	0670      	lsls	r0, r6, #25
 8004fa6:	d5fb      	bpl.n	8004fa0 <_printf_i+0x1c8>
 8004fa8:	8019      	strh	r1, [r3, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	6123      	str	r3, [r4, #16]
 8004fae:	4615      	mov	r5, r2
 8004fb0:	e7ba      	b.n	8004f28 <_printf_i+0x150>
 8004fb2:	682b      	ldr	r3, [r5, #0]
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	602a      	str	r2, [r5, #0]
 8004fb8:	681d      	ldr	r5, [r3, #0]
 8004fba:	6862      	ldr	r2, [r4, #4]
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f7fb f906 	bl	80001d0 <memchr>
 8004fc4:	b108      	cbz	r0, 8004fca <_printf_i+0x1f2>
 8004fc6:	1b40      	subs	r0, r0, r5
 8004fc8:	6060      	str	r0, [r4, #4]
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	6123      	str	r3, [r4, #16]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd4:	e7a8      	b.n	8004f28 <_printf_i+0x150>
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4649      	mov	r1, r9
 8004fdc:	4640      	mov	r0, r8
 8004fde:	47d0      	blx	sl
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d0ab      	beq.n	8004f3c <_printf_i+0x164>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	079b      	lsls	r3, r3, #30
 8004fe8:	d413      	bmi.n	8005012 <_printf_i+0x23a>
 8004fea:	68e0      	ldr	r0, [r4, #12]
 8004fec:	9b03      	ldr	r3, [sp, #12]
 8004fee:	4298      	cmp	r0, r3
 8004ff0:	bfb8      	it	lt
 8004ff2:	4618      	movlt	r0, r3
 8004ff4:	e7a4      	b.n	8004f40 <_printf_i+0x168>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	47d0      	blx	sl
 8005000:	3001      	adds	r0, #1
 8005002:	d09b      	beq.n	8004f3c <_printf_i+0x164>
 8005004:	3501      	adds	r5, #1
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	9903      	ldr	r1, [sp, #12]
 800500a:	1a5b      	subs	r3, r3, r1
 800500c:	42ab      	cmp	r3, r5
 800500e:	dcf2      	bgt.n	8004ff6 <_printf_i+0x21e>
 8005010:	e7eb      	b.n	8004fea <_printf_i+0x212>
 8005012:	2500      	movs	r5, #0
 8005014:	f104 0619 	add.w	r6, r4, #25
 8005018:	e7f5      	b.n	8005006 <_printf_i+0x22e>
 800501a:	bf00      	nop
 800501c:	08005a6a 	.word	0x08005a6a
 8005020:	08005a7b 	.word	0x08005a7b

08005024 <memcpy>:
 8005024:	440a      	add	r2, r1
 8005026:	4291      	cmp	r1, r2
 8005028:	f100 33ff 	add.w	r3, r0, #4294967295
 800502c:	d100      	bne.n	8005030 <memcpy+0xc>
 800502e:	4770      	bx	lr
 8005030:	b510      	push	{r4, lr}
 8005032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503a:	4291      	cmp	r1, r2
 800503c:	d1f9      	bne.n	8005032 <memcpy+0xe>
 800503e:	bd10      	pop	{r4, pc}

08005040 <memmove>:
 8005040:	4288      	cmp	r0, r1
 8005042:	b510      	push	{r4, lr}
 8005044:	eb01 0402 	add.w	r4, r1, r2
 8005048:	d902      	bls.n	8005050 <memmove+0x10>
 800504a:	4284      	cmp	r4, r0
 800504c:	4623      	mov	r3, r4
 800504e:	d807      	bhi.n	8005060 <memmove+0x20>
 8005050:	1e43      	subs	r3, r0, #1
 8005052:	42a1      	cmp	r1, r4
 8005054:	d008      	beq.n	8005068 <memmove+0x28>
 8005056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800505a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800505e:	e7f8      	b.n	8005052 <memmove+0x12>
 8005060:	4402      	add	r2, r0
 8005062:	4601      	mov	r1, r0
 8005064:	428a      	cmp	r2, r1
 8005066:	d100      	bne.n	800506a <memmove+0x2a>
 8005068:	bd10      	pop	{r4, pc}
 800506a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800506e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005072:	e7f7      	b.n	8005064 <memmove+0x24>

08005074 <_free_r>:
 8005074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005076:	2900      	cmp	r1, #0
 8005078:	d044      	beq.n	8005104 <_free_r+0x90>
 800507a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800507e:	9001      	str	r0, [sp, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f1a1 0404 	sub.w	r4, r1, #4
 8005086:	bfb8      	it	lt
 8005088:	18e4      	addlt	r4, r4, r3
 800508a:	f000 f913 	bl	80052b4 <__malloc_lock>
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <_free_r+0x94>)
 8005090:	9801      	ldr	r0, [sp, #4]
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	b933      	cbnz	r3, 80050a4 <_free_r+0x30>
 8005096:	6063      	str	r3, [r4, #4]
 8005098:	6014      	str	r4, [r2, #0]
 800509a:	b003      	add	sp, #12
 800509c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050a0:	f000 b90e 	b.w	80052c0 <__malloc_unlock>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d908      	bls.n	80050ba <_free_r+0x46>
 80050a8:	6825      	ldr	r5, [r4, #0]
 80050aa:	1961      	adds	r1, r4, r5
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf01      	itttt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	1949      	addeq	r1, r1, r5
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	e7ed      	b.n	8005096 <_free_r+0x22>
 80050ba:	461a      	mov	r2, r3
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b10b      	cbz	r3, 80050c4 <_free_r+0x50>
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d9fa      	bls.n	80050ba <_free_r+0x46>
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	1855      	adds	r5, r2, r1
 80050c8:	42a5      	cmp	r5, r4
 80050ca:	d10b      	bne.n	80050e4 <_free_r+0x70>
 80050cc:	6824      	ldr	r4, [r4, #0]
 80050ce:	4421      	add	r1, r4
 80050d0:	1854      	adds	r4, r2, r1
 80050d2:	42a3      	cmp	r3, r4
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	d1e0      	bne.n	800509a <_free_r+0x26>
 80050d8:	681c      	ldr	r4, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	6053      	str	r3, [r2, #4]
 80050de:	4421      	add	r1, r4
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	e7da      	b.n	800509a <_free_r+0x26>
 80050e4:	d902      	bls.n	80050ec <_free_r+0x78>
 80050e6:	230c      	movs	r3, #12
 80050e8:	6003      	str	r3, [r0, #0]
 80050ea:	e7d6      	b.n	800509a <_free_r+0x26>
 80050ec:	6825      	ldr	r5, [r4, #0]
 80050ee:	1961      	adds	r1, r4, r5
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf04      	itt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	6063      	str	r3, [r4, #4]
 80050fa:	bf04      	itt	eq
 80050fc:	1949      	addeq	r1, r1, r5
 80050fe:	6021      	streq	r1, [r4, #0]
 8005100:	6054      	str	r4, [r2, #4]
 8005102:	e7ca      	b.n	800509a <_free_r+0x26>
 8005104:	b003      	add	sp, #12
 8005106:	bd30      	pop	{r4, r5, pc}
 8005108:	20000708 	.word	0x20000708

0800510c <sbrk_aligned>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4e0e      	ldr	r6, [pc, #56]	; (8005148 <sbrk_aligned+0x3c>)
 8005110:	460c      	mov	r4, r1
 8005112:	6831      	ldr	r1, [r6, #0]
 8005114:	4605      	mov	r5, r0
 8005116:	b911      	cbnz	r1, 800511e <sbrk_aligned+0x12>
 8005118:	f000 f8bc 	bl	8005294 <_sbrk_r>
 800511c:	6030      	str	r0, [r6, #0]
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f8b7 	bl	8005294 <_sbrk_r>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d00a      	beq.n	8005140 <sbrk_aligned+0x34>
 800512a:	1cc4      	adds	r4, r0, #3
 800512c:	f024 0403 	bic.w	r4, r4, #3
 8005130:	42a0      	cmp	r0, r4
 8005132:	d007      	beq.n	8005144 <sbrk_aligned+0x38>
 8005134:	1a21      	subs	r1, r4, r0
 8005136:	4628      	mov	r0, r5
 8005138:	f000 f8ac 	bl	8005294 <_sbrk_r>
 800513c:	3001      	adds	r0, #1
 800513e:	d101      	bne.n	8005144 <sbrk_aligned+0x38>
 8005140:	f04f 34ff 	mov.w	r4, #4294967295
 8005144:	4620      	mov	r0, r4
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	2000070c 	.word	0x2000070c

0800514c <_malloc_r>:
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005150:	1ccd      	adds	r5, r1, #3
 8005152:	f025 0503 	bic.w	r5, r5, #3
 8005156:	3508      	adds	r5, #8
 8005158:	2d0c      	cmp	r5, #12
 800515a:	bf38      	it	cc
 800515c:	250c      	movcc	r5, #12
 800515e:	2d00      	cmp	r5, #0
 8005160:	4607      	mov	r7, r0
 8005162:	db01      	blt.n	8005168 <_malloc_r+0x1c>
 8005164:	42a9      	cmp	r1, r5
 8005166:	d905      	bls.n	8005174 <_malloc_r+0x28>
 8005168:	230c      	movs	r3, #12
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	2600      	movs	r6, #0
 800516e:	4630      	mov	r0, r6
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	4e2e      	ldr	r6, [pc, #184]	; (8005230 <_malloc_r+0xe4>)
 8005176:	f000 f89d 	bl	80052b4 <__malloc_lock>
 800517a:	6833      	ldr	r3, [r6, #0]
 800517c:	461c      	mov	r4, r3
 800517e:	bb34      	cbnz	r4, 80051ce <_malloc_r+0x82>
 8005180:	4629      	mov	r1, r5
 8005182:	4638      	mov	r0, r7
 8005184:	f7ff ffc2 	bl	800510c <sbrk_aligned>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	4604      	mov	r4, r0
 800518c:	d14d      	bne.n	800522a <_malloc_r+0xde>
 800518e:	6834      	ldr	r4, [r6, #0]
 8005190:	4626      	mov	r6, r4
 8005192:	2e00      	cmp	r6, #0
 8005194:	d140      	bne.n	8005218 <_malloc_r+0xcc>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	4631      	mov	r1, r6
 800519a:	4638      	mov	r0, r7
 800519c:	eb04 0803 	add.w	r8, r4, r3
 80051a0:	f000 f878 	bl	8005294 <_sbrk_r>
 80051a4:	4580      	cmp	r8, r0
 80051a6:	d13a      	bne.n	800521e <_malloc_r+0xd2>
 80051a8:	6821      	ldr	r1, [r4, #0]
 80051aa:	3503      	adds	r5, #3
 80051ac:	1a6d      	subs	r5, r5, r1
 80051ae:	f025 0503 	bic.w	r5, r5, #3
 80051b2:	3508      	adds	r5, #8
 80051b4:	2d0c      	cmp	r5, #12
 80051b6:	bf38      	it	cc
 80051b8:	250c      	movcc	r5, #12
 80051ba:	4629      	mov	r1, r5
 80051bc:	4638      	mov	r0, r7
 80051be:	f7ff ffa5 	bl	800510c <sbrk_aligned>
 80051c2:	3001      	adds	r0, #1
 80051c4:	d02b      	beq.n	800521e <_malloc_r+0xd2>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	442b      	add	r3, r5
 80051ca:	6023      	str	r3, [r4, #0]
 80051cc:	e00e      	b.n	80051ec <_malloc_r+0xa0>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	1b52      	subs	r2, r2, r5
 80051d2:	d41e      	bmi.n	8005212 <_malloc_r+0xc6>
 80051d4:	2a0b      	cmp	r2, #11
 80051d6:	d916      	bls.n	8005206 <_malloc_r+0xba>
 80051d8:	1961      	adds	r1, r4, r5
 80051da:	42a3      	cmp	r3, r4
 80051dc:	6025      	str	r5, [r4, #0]
 80051de:	bf18      	it	ne
 80051e0:	6059      	strne	r1, [r3, #4]
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	bf08      	it	eq
 80051e6:	6031      	streq	r1, [r6, #0]
 80051e8:	5162      	str	r2, [r4, r5]
 80051ea:	604b      	str	r3, [r1, #4]
 80051ec:	4638      	mov	r0, r7
 80051ee:	f104 060b 	add.w	r6, r4, #11
 80051f2:	f000 f865 	bl	80052c0 <__malloc_unlock>
 80051f6:	f026 0607 	bic.w	r6, r6, #7
 80051fa:	1d23      	adds	r3, r4, #4
 80051fc:	1af2      	subs	r2, r6, r3
 80051fe:	d0b6      	beq.n	800516e <_malloc_r+0x22>
 8005200:	1b9b      	subs	r3, r3, r6
 8005202:	50a3      	str	r3, [r4, r2]
 8005204:	e7b3      	b.n	800516e <_malloc_r+0x22>
 8005206:	6862      	ldr	r2, [r4, #4]
 8005208:	42a3      	cmp	r3, r4
 800520a:	bf0c      	ite	eq
 800520c:	6032      	streq	r2, [r6, #0]
 800520e:	605a      	strne	r2, [r3, #4]
 8005210:	e7ec      	b.n	80051ec <_malloc_r+0xa0>
 8005212:	4623      	mov	r3, r4
 8005214:	6864      	ldr	r4, [r4, #4]
 8005216:	e7b2      	b.n	800517e <_malloc_r+0x32>
 8005218:	4634      	mov	r4, r6
 800521a:	6876      	ldr	r6, [r6, #4]
 800521c:	e7b9      	b.n	8005192 <_malloc_r+0x46>
 800521e:	230c      	movs	r3, #12
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4638      	mov	r0, r7
 8005224:	f000 f84c 	bl	80052c0 <__malloc_unlock>
 8005228:	e7a1      	b.n	800516e <_malloc_r+0x22>
 800522a:	6025      	str	r5, [r4, #0]
 800522c:	e7de      	b.n	80051ec <_malloc_r+0xa0>
 800522e:	bf00      	nop
 8005230:	20000708 	.word	0x20000708

08005234 <_realloc_r>:
 8005234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	4680      	mov	r8, r0
 800523a:	4614      	mov	r4, r2
 800523c:	460e      	mov	r6, r1
 800523e:	b921      	cbnz	r1, 800524a <_realloc_r+0x16>
 8005240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005244:	4611      	mov	r1, r2
 8005246:	f7ff bf81 	b.w	800514c <_malloc_r>
 800524a:	b92a      	cbnz	r2, 8005258 <_realloc_r+0x24>
 800524c:	f7ff ff12 	bl	8005074 <_free_r>
 8005250:	4625      	mov	r5, r4
 8005252:	4628      	mov	r0, r5
 8005254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005258:	f000 f838 	bl	80052cc <_malloc_usable_size_r>
 800525c:	4284      	cmp	r4, r0
 800525e:	4607      	mov	r7, r0
 8005260:	d802      	bhi.n	8005268 <_realloc_r+0x34>
 8005262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005266:	d812      	bhi.n	800528e <_realloc_r+0x5a>
 8005268:	4621      	mov	r1, r4
 800526a:	4640      	mov	r0, r8
 800526c:	f7ff ff6e 	bl	800514c <_malloc_r>
 8005270:	4605      	mov	r5, r0
 8005272:	2800      	cmp	r0, #0
 8005274:	d0ed      	beq.n	8005252 <_realloc_r+0x1e>
 8005276:	42bc      	cmp	r4, r7
 8005278:	4622      	mov	r2, r4
 800527a:	4631      	mov	r1, r6
 800527c:	bf28      	it	cs
 800527e:	463a      	movcs	r2, r7
 8005280:	f7ff fed0 	bl	8005024 <memcpy>
 8005284:	4631      	mov	r1, r6
 8005286:	4640      	mov	r0, r8
 8005288:	f7ff fef4 	bl	8005074 <_free_r>
 800528c:	e7e1      	b.n	8005252 <_realloc_r+0x1e>
 800528e:	4635      	mov	r5, r6
 8005290:	e7df      	b.n	8005252 <_realloc_r+0x1e>
	...

08005294 <_sbrk_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_sbrk_r+0x1c>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fc f840 	bl	8001324 <_sbrk>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_sbrk_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_sbrk_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20000710 	.word	0x20000710

080052b4 <__malloc_lock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__malloc_lock+0x8>)
 80052b6:	f000 b811 	b.w	80052dc <__retarget_lock_acquire_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000714 	.word	0x20000714

080052c0 <__malloc_unlock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__malloc_unlock+0x8>)
 80052c2:	f000 b80c 	b.w	80052de <__retarget_lock_release_recursive>
 80052c6:	bf00      	nop
 80052c8:	20000714 	.word	0x20000714

080052cc <_malloc_usable_size_r>:
 80052cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d0:	1f18      	subs	r0, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfbc      	itt	lt
 80052d6:	580b      	ldrlt	r3, [r1, r0]
 80052d8:	18c0      	addlt	r0, r0, r3
 80052da:	4770      	bx	lr

080052dc <__retarget_lock_acquire_recursive>:
 80052dc:	4770      	bx	lr

080052de <__retarget_lock_release_recursive>:
 80052de:	4770      	bx	lr

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
