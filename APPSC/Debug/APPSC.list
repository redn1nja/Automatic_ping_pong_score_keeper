
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003838  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004114  08004114  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004114  08004114  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004114  08004114  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800411c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000644  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000650  20000650  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad0  00000000  00000000  00030630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c48  00000000  00000000  00033ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed2a  00000000  00000000  00034ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122a5  00000000  00000000  00053812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0c86  00000000  00000000  00065ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011673d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003720  00000000  00000000  00116790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039a8 	.word	0x080039a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080039a8 	.word	0x080039a8

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b42      	ldr	r3, [pc, #264]	; (80002e8 <MX_GPIO_Init+0x120>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a41      	ldr	r2, [pc, #260]	; (80002e8 <MX_GPIO_Init+0x120>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b3f      	ldr	r3, [pc, #252]	; (80002e8 <MX_GPIO_Init+0x120>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b3c      	ldr	r3, [pc, #240]	; (80002e8 <MX_GPIO_Init+0x120>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a3b      	ldr	r2, [pc, #236]	; (80002e8 <MX_GPIO_Init+0x120>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b39      	ldr	r3, [pc, #228]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b36      	ldr	r3, [pc, #216]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a35      	ldr	r2, [pc, #212]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b33      	ldr	r3, [pc, #204]	; (80002e8 <MX_GPIO_Init+0x120>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b30      	ldr	r3, [pc, #192]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a2f      	ldr	r2, [pc, #188]	; (80002e8 <MX_GPIO_Init+0x120>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b2d      	ldr	r3, [pc, #180]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b2a      	ldr	r3, [pc, #168]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a29      	ldr	r2, [pc, #164]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <MX_GPIO_Init+0x120>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	; 0xff08
 800025c:	4823      	ldr	r0, [pc, #140]	; (80002ec <MX_GPIO_Init+0x124>)
 800025e:	f001 f9cd 	bl	80015fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000268:	4821      	ldr	r0, [pc, #132]	; (80002f0 <MX_GPIO_Init+0x128>)
 800026a:	f001 f9c7 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800026e:	2337      	movs	r3, #55	; 0x37
 8000270:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000272:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4619      	mov	r1, r3
 8000282:	481a      	ldr	r0, [pc, #104]	; (80002ec <MX_GPIO_Init+0x124>)
 8000284:	f001 f840 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000288:	f64f 7308 	movw	r3, #65288	; 0xff08
 800028c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4619      	mov	r1, r3
 80002a0:	4812      	ldr	r0, [pc, #72]	; (80002ec <MX_GPIO_Init+0x124>)
 80002a2:	f001 f831 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002a6:	2301      	movs	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	4619      	mov	r1, r3
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f001 f824 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80002c0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80002c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	2300      	movs	r3, #0
 80002d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_GPIO_Init+0x128>)
 80002da:	f001 f815 	bl	8001308 <HAL_GPIO_Init>

}
 80002de:	bf00      	nop
 80002e0:	3728      	adds	r7, #40	; 0x28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	48001000 	.word	0x48001000
 80002f0:	48000400 	.word	0x48000400

080002f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_I2C1_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	; (800036c <MX_I2C1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_I2C1_Init+0x74>)
 8000300:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <MX_I2C1_Init+0x7c>)
 8000302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <MX_I2C1_Init+0x74>)
 800030c:	2201      	movs	r2, #1
 800030e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_I2C1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032e:	480e      	ldr	r0, [pc, #56]	; (8000368 <MX_I2C1_Init+0x74>)
 8000330:	f001 f97c 	bl	800162c <HAL_I2C_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800033a:	f000 fc91 	bl	8000c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033e:	2100      	movs	r1, #0
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <MX_I2C1_Init+0x74>)
 8000342:	f001 fa02 	bl	800174a <HAL_I2CEx_ConfigAnalogFilter>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800034c:	f000 fc88 	bl	8000c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000350:	2100      	movs	r1, #0
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_I2C1_Init+0x74>)
 8000354:	f001 fa44 	bl	80017e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035e:	f000 fc7f 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000028 	.word	0x20000028
 800036c:	40005400 	.word	0x40005400
 8000370:	2000090e 	.word	0x2000090e

08000374 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	; 0x28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <HAL_I2C_MspInit+0x7c>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d127      	bne.n	80003e6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <HAL_I2C_MspInit+0x80>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <HAL_I2C_MspInit+0x80>)
 800039c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <HAL_I2C_MspInit+0x80>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80003ae:	23c0      	movs	r3, #192	; 0xc0
 80003b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003b2:	2312      	movs	r3, #18
 80003b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ba:	2303      	movs	r3, #3
 80003bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003be:	2304      	movs	r3, #4
 80003c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <HAL_I2C_MspInit+0x84>)
 80003ca:	f000 ff9d 	bl	8001308 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_I2C_MspInit+0x80>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <HAL_I2C_MspInit+0x80>)
 80003d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_I2C_MspInit+0x80>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003e6:	bf00      	nop
 80003e8:	3728      	adds	r7, #40	; 0x28
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40005400 	.word	0x40005400
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000400 	.word	0x48000400

080003fc <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fb5d 	bl	8000ac6 <LCD5110_refresh_ll>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f000 f87c 	bl	8000528 <LCD5110_wprint>
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b08b      	sub	sp, #44	; 0x2c
 800043c:	af04      	add	r7, sp, #16
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	4613      	mov	r3, r2
 8000446:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800044a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800044e:	2b00      	cmp	r3, #0
 8000450:	db41      	blt.n	80004d6 <LCD5110_wputchar+0x9e>
 8000452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000454:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000458:	2b00      	cmp	r3, #0
 800045a:	db3c      	blt.n	80004d6 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800045c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800045e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000462:	461a      	mov	r2, r3
 8000464:	2306      	movs	r3, #6
 8000466:	4413      	add	r3, r2
 8000468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800046a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800046e:	4293      	cmp	r3, r2
 8000470:	d833      	bhi.n	80004da <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000474:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000478:	461a      	mov	r2, r3
 800047a:	2308      	movs	r3, #8
 800047c:	4413      	add	r3, r2
 800047e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000480:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000484:	4293      	cmp	r3, r2
 8000486:	d828      	bhi.n	80004da <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <LCD5110_wputchar+0xac>)
 800048a:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 800048c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800048e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000492:	461a      	mov	r2, r3
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	18d0      	adds	r0, r2, r3
 8000498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800049a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800049e:	461a      	mov	r2, r3
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	18d1      	adds	r1, r2, r3
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2206      	movs	r2, #6
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	441a      	add	r2, r3
 80004b0:	2306      	movs	r3, #6
 80004b2:	461e      	mov	r6, r3
 80004b4:	2308      	movs	r3, #8
 80004b6:	461c      	mov	r4, r3
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	bf0c      	ite	eq
 80004be:	2301      	moveq	r3, #1
 80004c0:	2300      	movne	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	461d      	mov	r5, r3
 80004c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004c8:	9302      	str	r3, [sp, #8]
 80004ca:	9501      	str	r5, [sp, #4]
 80004cc:	9400      	str	r4, [sp, #0]
 80004ce:	4633      	mov	r3, r6
 80004d0:	f000 f8f6 	bl	80006c0 <LCD5110_drawBitmap>
 80004d4:	e002      	b.n	80004dc <LCD5110_wputchar+0xa4>
		return;
 80004d6:	bf00      	nop
 80004d8:	e000      	b.n	80004dc <LCD5110_wputchar+0xa4>
		return;
 80004da:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 80004dc:	371c      	adds	r7, #28
 80004de:	46bd      	mov	sp, r7
 80004e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e2:	bf00      	nop
 80004e4:	080039d0 	.word	0x080039d0

080004e8 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	2308      	movs	r3, #8
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	4413      	add	r3, r2
 8000500:	b29b      	uxth	r3, r3
 8000502:	3301      	adds	r3, #1
 8000504:	b29b      	uxth	r3, r3
 8000506:	b21a      	sxth	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2202      	movs	r2, #2
 8000510:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7b1b      	ldrb	r3, [r3, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 800051a:	6838      	ldr	r0, [r7, #0]
 800051c:	f7ff ff6e 	bl	80003fc <LCD5110_refresh>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000536:	e053      	b.n	80005e0 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b0a      	cmp	r3, #10
 800053e:	d010      	beq.n	8000562 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000546:	4618      	mov	r0, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800054e:	4619      	mov	r1, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	f7ff ff6b 	bl	8000438 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000568:	b29a      	uxth	r2, r3
 800056a:	2306      	movs	r3, #6
 800056c:	b29b      	uxth	r3, r3
 800056e:	4413      	add	r3, r2
 8000570:	b29b      	uxth	r3, r3
 8000572:	b21a      	sxth	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800057e:	461a      	mov	r2, r3
 8000580:	2306      	movs	r3, #6
 8000582:	4413      	add	r3, r2
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800058a:	4293      	cmp	r3, r2
 800058c:	d904      	bls.n	8000598 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000594:	2b0a      	cmp	r3, #10
 8000596:	d103      	bne.n	80005a0 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b0a      	cmp	r3, #10
 800059e:	d111      	bne.n	80005c4 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 80005a0:	6839      	ldr	r1, [r7, #0]
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ffa0 	bl	80004e8 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3301      	adds	r3, #1
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <LCD5110_wprint+0xcc>)
 80005b2:	4413      	add	r3, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <LCD5110_wprint+0x9c>
				++str;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80005ca:	461a      	mov	r2, r3
 80005cc:	2308      	movs	r3, #8
 80005ce:	4413      	add	r3, r2
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d807      	bhi.n	80005ea <LCD5110_wprint+0xc2>
			break;
		str++;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1a7      	bne.n	8000538 <LCD5110_wprint+0x10>

	}
}
 80005e8:	e000      	b.n	80005ec <LCD5110_wprint+0xc4>
			break;
 80005ea:	bf00      	nop
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08004010 	.word	0x08004010

080005f8 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	10db      	asrs	r3, r3, #3
 8000608:	2254      	movs	r2, #84	; 0x54
 800060a:	fb03 f202 	mul.w	r2, r3, r2
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	2201      	movs	r2, #1
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	753b      	strb	r3, [r7, #20]

	return res;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	461a      	mov	r2, r3
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000630:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db31      	blt.n	80006b8 <LCD5110_putpix+0x78>
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	2b00      	cmp	r3, #0
 8000658:	db2e      	blt.n	80006b8 <LCD5110_putpix+0x78>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b53      	cmp	r3, #83	; 0x53
 800065e:	dc2b      	bgt.n	80006b8 <LCD5110_putpix+0x78>
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b2f      	cmp	r3, #47	; 0x2f
 8000664:	dc28      	bgt.n	80006b8 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffc2 	bl	80005f8 <xy_to_pix>

	if (color)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00c      	beq.n	8000694 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	4413      	add	r3, r2
 8000680:	7f19      	ldrb	r1, [r3, #28]
 8000682:	7d3a      	ldrb	r2, [r7, #20]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	430a      	orrs	r2, r1
 8000688:	b2d1      	uxtb	r1, r2
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	460a      	mov	r2, r1
 8000690:	771a      	strb	r2, [r3, #28]
 8000692:	e012      	b.n	80006ba <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	4413      	add	r3, r2
 800069a:	7f1b      	ldrb	r3, [r3, #28]
 800069c:	b25a      	sxtb	r2, r3
 800069e:	7d3b      	ldrb	r3, [r7, #20]
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4013      	ands	r3, r2
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	b2d1      	uxtb	r1, r2
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	460a      	mov	r2, r1
 80006b4:	771a      	strb	r2, [r3, #28]
 80006b6:	e000      	b.n	80006ba <LCD5110_putpix+0x7a>
		return;
 80006b8:	bf00      	nop
}
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	e042      	b.n	800075a <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	e038      	b.n	800074c <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da00      	bge.n	80006e2 <LCD5110_drawBitmap+0x22>
 80006e0:	3307      	adds	r3, #7
 80006e2:	10db      	asrs	r3, r3, #3
 80006e4:	461a      	mov	r2, r3
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	fb03 f202 	mul.w	r2, r3, r2
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	4413      	add	r3, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	425a      	negs	r2, r3
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	f002 0207 	and.w	r2, r2, #7
 8000706:	bf58      	it	pl
 8000708:	4253      	negpl	r3, r2
 800070a:	2201      	movs	r2, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	b25a      	sxtb	r2, r3
 8000712:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000716:	4013      	ands	r3, r2
 8000718:	b25b      	sxtb	r3, r3
 800071a:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	18d0      	adds	r0, r2, r3
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	18d1      	adds	r1, r2, r3
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	2b00      	cmp	r3, #0
 800072c:	d007      	beq.n	800073e <LCD5110_drawBitmap+0x7e>
 800072e:	7dfb      	ldrb	r3, [r7, #23]
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	e000      	b.n	8000740 <LCD5110_drawBitmap+0x80>
 800073e:	7dfa      	ldrb	r2, [r7, #23]
 8000740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000742:	f7ff ff7d 	bl	8000640 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	3301      	adds	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	429a      	cmp	r2, r3
 8000752:	dbc2      	blt.n	80006da <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3301      	adds	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	dbb8      	blt.n	80006d4 <LCD5110_drawBitmap+0x14>
		}
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	1df9      	adds	r1, r7, #7
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	2201      	movs	r2, #1
 8000784:	f002 fdd5 	bl	8003332 <HAL_SPI_Transmit>
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	460b      	mov	r3, r1
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	897a      	ldrh	r2, [r7, #10]
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	68f9      	ldr	r1, [r7, #12]
 80007ac:	f002 fdc1 	bl	8003332 <HAL_SPI_Transmit>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6898      	ldr	r0, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	889b      	ldrh	r3, [r3, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	f000 ff15 	bl	80015fc <HAL_GPIO_WritePin>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6998      	ldr	r0, [r3, #24]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	8a9b      	ldrh	r3, [r3, #20]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	f000 ff05 	bl	80015fc <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6998      	ldr	r0, [r3, #24]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	8a9b      	ldrh	r3, [r3, #20]
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	f000 fef5 	bl	80015fc <HAL_GPIO_WritePin>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6918      	ldr	r0, [r3, #16]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	2201      	movs	r2, #1
 800082c:	4619      	mov	r1, r3
 800082e:	f000 fee5 	bl	80015fc <HAL_GPIO_WritePin>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6918      	ldr	r0, [r3, #16]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	f000 fed5 	bl	80015fc <HAL_GPIO_WritePin>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	6039      	str	r1, [r7, #0]
 8000864:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f023 0320 	bic.w	r3, r3, #32
 800086c:	2b07      	cmp	r3, #7
 800086e:	dd01      	ble.n	8000874 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000870:	2301      	movs	r3, #1
 8000872:	e008      	b.n	8000886 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f043 0320 	orr.w	r3, r3, #32
 800087a:	b2db      	uxtb	r3, r3
 800087c:	6839      	ldr	r1, [r7, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff74 	bl	800076c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	6039      	str	r1, [r7, #0]
 8000898:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f023 030d 	bic.w	r3, r3, #13
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 80008a4:	2302      	movs	r3, #2
 80008a6:	e005      	b.n	80008b4 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	6839      	ldr	r1, [r7, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff5d 	bl	800076c <send_byte_to_LCD5110>
	return LCD5110_OK;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	da01      	bge.n	80008d4 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 80008d0:	2303      	movs	r3, #3
 80008d2:	e008      	b.n	80008e6 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff44 	bl	800076c <send_byte_to_LCD5110>
	return LCD5110_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	6039      	str	r1, [r7, #0]
 80008f8:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d901      	bls.n	8000904 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8000900:	2304      	movs	r3, #4
 8000902:	e008      	b.n	8000916 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	b2db      	uxtb	r3, r3
 800090c:	6839      	ldr	r1, [r7, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff2c 	bl	800076c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	6039      	str	r1, [r7, #0]
 8000928:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b07      	cmp	r3, #7
 800092e:	d901      	bls.n	8000934 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000930:	2305      	movs	r3, #5
 8000932:	e008      	b.n	8000946 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	b2db      	uxtb	r3, r3
 800093c:	6839      	ldr	r1, [r7, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff14 	bl	800076c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	6039      	str	r1, [r7, #0]
 8000958:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 800095a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db03      	blt.n	800096a <LCD5110_set_X_base+0x1c>
 8000962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000966:	2b53      	cmp	r3, #83	; 0x53
 8000968:	dd01      	ble.n	800096e <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 800096a:	2307      	movs	r3, #7
 800096c:	e00a      	b.n	8000984 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000976:	b25b      	sxtb	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	6839      	ldr	r1, [r7, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fef5 	bl	800076c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8000998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db03      	blt.n	80009a8 <LCD5110_set_Y_base+0x1c>
 80009a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	dd01      	ble.n	80009ac <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 80009a8:	2307      	movs	r3, #7
 80009aa:	e00a      	b.n	80009c2 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fed6 	bl	800076c <send_byte_to_LCD5110>
	return LCD5110_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	603a      	str	r2, [r7, #0]
 80009d4:	80fb      	strh	r3, [r7, #6]
 80009d6:	460b      	mov	r3, r1
 80009d8:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 80009da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffb4 	bl	800094e <LCD5110_set_X_base>
 80009e6:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <LCD5110_set_XY_base+0x28>
		return res;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	e00c      	b.n	8000a0c <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 80009f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ffc7 	bl	800098c <LCD5110_set_Y_base>
 80009fe:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <LCD5110_set_XY_base+0x40>
		return res;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	e000      	b.n	8000a0c <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	70fb      	strb	r3, [r7, #3]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	70bb      	strb	r3, [r7, #2]
 8000a52:	4613      	mov	r3, r2
 8000a54:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffdc 	bl	8000a14 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff feac 	bl	80007ba <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fee9 	bl	800083a <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8000a68:	2364      	movs	r3, #100	; 0x64
 8000a6a:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8000a6c:	bf00      	nop
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1fa      	bne.n	8000a6e <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fece 	bl	800081a <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff febb 	bl	80007fa <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fee7 	bl	800085a <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8000a8c:	78bb      	ldrb	r3, [r7, #2]
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff13 	bl	80008bc <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8000a96:	787b      	ldrb	r3, [r7, #1]
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff27 	bl	80008ee <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8000aa0:	7e3b      	ldrb	r3, [r7, #24]
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff3a 	bl	800091e <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fed4 	bl	800085a <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fee9 	bl	800088e <LCD5110_set_mode_base>

	return LCD5110_OK;
 8000abc:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fe73 	bl	80007ba <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe90 	bl	80007fa <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	2100      	movs	r1, #0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff ff73 	bl	80009ca <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fe78 	bl	80007da <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	331c      	adds	r3, #28
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fe4c 	bl	8000792 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f000 fab1 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0e:	f000 f845 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b12:	f7ff fb59 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b16:	f7ff fbed 	bl	80002f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b1a:	f000 f8a9 	bl	8000c70 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000b1e:	f000 fa17 	bl	8000f50 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000b22:	f000 f8e3 	bl	8000cec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hw_conf.spi_handle = &hspi2;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <main+0x84>)
 8000b28:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <main+0x88>)
 8000b2a:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD_CS_Pin;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <main+0x84>)
 8000b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b32:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD_CS_GPIO_Port;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <main+0x84>)
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <main+0x8c>)
 8000b38:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD_RST_Pin;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <main+0x84>)
 8000b3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b40:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD_RST_GPIO_Port;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <main+0x84>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <main+0x8c>)
 8000b46:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD_DC_Pin;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <main+0x84>)
 8000b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4e:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD_DC_GPIO_Port;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <main+0x84>)
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <main+0x8c>)
 8000b54:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <main+0x84>)
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <main+0x90>)
 8000b5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000b5e:	4614      	mov	r4, r2
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	6861      	ldr	r1, [r4, #4]
 8000b64:	68a2      	ldr	r2, [r4, #8]
 8000b66:	c307      	stmia	r3!, {r0, r1, r2}
 8000b68:	89a2      	ldrh	r2, [r4, #12]
 8000b6a:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2302      	movs	r3, #2
 8000b72:	2240      	movs	r2, #64	; 0x40
 8000b74:	210c      	movs	r1, #12
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <main+0x84>)
 8000b78:	f7ff ff60 	bl	8000a3c <LCD5110_init>

  LCD5110_print("Hello world!\n", BLACK, &lcd1);
 8000b7c:	4a02      	ldr	r2, [pc, #8]	; (8000b88 <main+0x84>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <main+0x94>)
 8000b82:	f7ff fc47 	bl	8000414 <LCD5110_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8000b86:	e7fe      	b.n	8000b86 <main+0x82>
 8000b88:	20000074 	.word	0x20000074
 8000b8c:	200002fc 	.word	0x200002fc
 8000b90:	48000400 	.word	0x48000400
 8000b94:	08003fd0 	.word	0x08003fd0
 8000b98:	080039c0 	.word	0x080039c0

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	; 0x78
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ba6:	2228      	movs	r2, #40	; 0x28
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fef4 	bl	8003998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	223c      	movs	r2, #60	; 0x3c
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fee6 	bl	8003998 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bde:	2310      	movs	r3, #16
 8000be0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bf0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 ff1c 	bl	8001a34 <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c02:	f000 f82d 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	230f      	movs	r3, #15
 8000c08:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 ff44 	bl	8002ab0 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c2e:	f000 f817 	bl	8000c60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <SystemClock_Config+0xc0>)
 8000c34:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 f91a 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c4e:	f000 f807 	bl	8000c60 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3778      	adds	r7, #120	; 0x78
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	00020020 	.word	0x00020020

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <MX_SPI1_Init+0x78>)
 8000c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cca:	2208      	movs	r2, #8
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cd0:	f002 fa84 	bl	80031dc <HAL_SPI_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cda:	f7ff ffc1 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000298 	.word	0x20000298
 8000ce8:	40013000 	.word	0x40013000

08000cec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_SPI2_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d22:	2210      	movs	r2, #16
 8000d24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d4c:	f002 fa46 	bl	80031dc <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f7ff ff83 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200002fc 	.word	0x200002fc
 8000d64:	40003800 	.word	0x40003800

08000d68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <HAL_SPI_MspInit+0x114>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d129      	bne.n	8000dde <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a3c      	ldr	r2, [pc, #240]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000dba:	23e0      	movs	r3, #224	; 0xe0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fa96 	bl	8001308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ddc:	e04a      	b.n	8000e74 <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <HAL_SPI_MspInit+0x11c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d145      	bne.n	8000e74 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de8:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	61d3      	str	r3, [r2, #28]
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000e06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e0a:	6153      	str	r3, [r2, #20]
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e22:	6153      	str	r3, [r2, #20]
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_SPI_MspInit+0x118>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e42:	2305      	movs	r3, #5
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480e      	ldr	r0, [pc, #56]	; (8000e88 <HAL_SPI_MspInit+0x120>)
 8000e4e:	f000 fa5b 	bl	8001308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e64:	2305      	movs	r3, #5
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <HAL_SPI_MspInit+0x124>)
 8000e70:	f000 fa4a 	bl	8001308 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	; 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40003800 	.word	0x40003800
 8000e88:	48001400 	.word	0x48001400
 8000e8c:	48000400 	.word	0x48000400

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 f9ea 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8ea 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_USB_PCD_Init+0x3c>)
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <MX_USB_PCD_Init+0x40>)
 8000f58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USB_PCD_Init+0x3c>)
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_USB_PCD_Init+0x3c>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USB_PCD_Init+0x3c>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_USB_PCD_Init+0x3c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USB_PCD_Init+0x3c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_USB_PCD_Init+0x3c>)
 8000f7a:	f000 fc7d 	bl	8001878 <HAL_PCD_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f84:	f7ff fe6c 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000360 	.word	0x20000360
 8000f90:	40005c00 	.word	0x40005c00

08000f94 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_PCD_MspInit+0x80>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d129      	bne.n	800100a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_PCD_MspInit+0x84>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_PCD_MspInit+0x84>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_PCD_MspInit+0x84>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000fce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000fe0:	230e      	movs	r3, #14
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f000 f98b 	bl	8001308 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_PCD_MspInit+0x84>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_PCD_MspInit+0x84>)
 8000ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_PCD_MspInit+0x84>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40005c00 	.word	0x40005c00
 8001018:	40021000 	.word	0x40021000

0800101c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001046:	f7ff ff71 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f002 fc81 	bl	8003950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104e:	f7ff fd59 	bl	8000b04 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001054:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001060:	0800411c 	.word	0x0800411c
  ldr r2, =_sbss
 8001064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001068:	20000650 	.word	0x20000650

0800106c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_2_IRQHandler>
	...

08001070 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x28>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x28>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f90d 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff ff00 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f917 	bl	80012ee <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f8ed 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	2000064c 	.word	0x2000064c

08001124 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;  
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000064c 	.word	0x2000064c

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff47 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff5c 	bl	8001184 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb0 	bl	800125c <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	e154      	b.n	80015c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8146 	beq.w	80015bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d005      	beq.n	8001348 <HAL_GPIO_Init+0x40>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d017      	beq.n	80013e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d123      	bne.n	800143a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	6939      	ldr	r1, [r7, #16]
 8001436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0203 	and.w	r2, r3, #3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80a0 	beq.w	80015bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147c:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <HAL_GPIO_Init+0x2d8>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a57      	ldr	r2, [pc, #348]	; (80015e0 <HAL_GPIO_Init+0x2d8>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <HAL_GPIO_Init+0x2d8>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001494:	4a53      	ldr	r2, [pc, #332]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014be:	d019      	beq.n	80014f4 <HAL_GPIO_Init+0x1ec>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <HAL_GPIO_Init+0x2e0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d013      	beq.n	80014f0 <HAL_GPIO_Init+0x1e8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_GPIO_Init+0x2e4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d00d      	beq.n	80014ec <HAL_GPIO_Init+0x1e4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d007      	beq.n	80014e8 <HAL_GPIO_Init+0x1e0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d101      	bne.n	80014e4 <HAL_GPIO_Init+0x1dc>
 80014e0:	2304      	movs	r3, #4
 80014e2:	e008      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014e4:	2305      	movs	r3, #5
 80014e6:	e006      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e004      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014f4:	2300      	movs	r3, #0
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	f002 0203 	and.w	r2, r2, #3
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	4093      	lsls	r3, r2
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001506:	4937      	ldr	r1, [pc, #220]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001514:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001538:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001562:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f47f aea3 	bne.w	8001318 <HAL_GPIO_Init+0x10>
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	48000400 	.word	0x48000400
 80015ec:	48000800 	.word	0x48000800
 80015f0:	48000c00 	.word	0x48000c00
 80015f4:	48001000 	.word	0x48001000
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001618:	e002      	b.n	8001620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e081      	b.n	8001742 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d106      	bne.n	8001658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe fe8e 	bl	8000374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2224      	movs	r2, #36	; 0x24
 800165c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800167c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800168c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	e006      	b.n	80016b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d104      	bne.n	80016c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69d9      	ldr	r1, [r3, #28]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b20      	cmp	r3, #32
 800175e:	d138      	bne.n	80017d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800176a:	2302      	movs	r3, #2
 800176c:	e032      	b.n	80017d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2224      	movs	r2, #36	; 0x24
 800177a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0201 	bic.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800179c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
  }
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d139      	bne.n	800186a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001800:	2302      	movs	r3, #2
 8001802:	e033      	b.n	800186c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001832:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800186a:	2302      	movs	r3, #2
  }
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b08b      	sub	sp, #44	; 0x2c
 800187c:	af06      	add	r7, sp, #24
 800187e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0d0      	b.n	8001a2c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fb78 	bl	8000f94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 f811 	bl	80038d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e04c      	b.n	8001956 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	3301      	adds	r3, #1
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	b298      	uxth	r0, r3
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	3336      	adds	r3, #54	; 0x36
 80018fa:	4602      	mov	r2, r0
 80018fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	3303      	adds	r3, #3
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	3338      	adds	r3, #56	; 0x38
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	333c      	adds	r3, #60	; 0x3c
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3340      	adds	r3, #64	; 0x40
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	3301      	adds	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d3ad      	bcc.n	80018bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e044      	b.n	80019f0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	3301      	adds	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3b5      	bcc.n	8001966 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	687e      	ldr	r6, [r7, #4]
 8001a02:	466d      	mov	r5, sp
 8001a04:	f106 0410 	add.w	r4, r6, #16
 8001a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	1d33      	adds	r3, r6, #4
 8001a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f001 ff7a 	bl	800390e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f001 b823 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 817d 	beq.w	8001d6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a70:	4bbc      	ldr	r3, [pc, #752]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7c:	4bb9      	ldr	r3, [pc, #740]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d15c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x10e>
 8001a88:	4bb6      	ldr	r3, [pc, #728]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d155      	bne.n	8001b42 <HAL_RCC_OscConfig+0x10e>
 8001a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aaa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x94>
 8001ac2:	4ba8      	ldr	r3, [pc, #672]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	e015      	b.n	8001af4 <HAL_RCC_OscConfig+0xc0>
 8001ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001acc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ae4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001af0:	4b9c      	ldr	r3, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001afc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b00:	fa92 f2a2 	rbit	r2, r2
 8001b04:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b0c:	fab2 f282 	clz	r2, r2
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f002 021f 	and.w	r2, r2, #31
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 811f 	beq.w	8001d68 <HAL_RCC_OscConfig+0x334>
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 8116 	bne.w	8001d68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f000 bfaf 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12e>
 8001b54:	4b83      	ldr	r3, [pc, #524]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a82      	ldr	r2, [pc, #520]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e036      	b.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x158>
 8001b72:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7b      	ldr	r2, [pc, #492]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a78      	ldr	r2, [pc, #480]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e021      	b.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x184>
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a70      	ldr	r2, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6d      	ldr	r2, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
 8001bb8:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a69      	ldr	r2, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a66      	ldr	r2, [pc, #408]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	f023 020f 	bic.w	r2, r3, #15
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	495f      	ldr	r1, [pc, #380]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d059      	beq.n	8001cae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fa93 	bl	8001124 <HAL_GetTick>
 8001bfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fa8e 	bl	8001124 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d902      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f000 bf43 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x218>
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e015      	b.n	8001c78 <HAL_RCC_OscConfig+0x244>
 8001c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c84:	fa92 f2a2 	rbit	r2, r2
 8001c88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ab      	beq.n	8001c04 <HAL_RCC_OscConfig+0x1d0>
 8001cac:	e05d      	b.n	8001d6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff fa39 	bl	8001124 <HAL_GetTick>
 8001cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fa34 	bl	8001124 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	; 0x64
 8001cc6:	d902      	bls.n	8001cce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f000 bee9 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ce2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2cc>
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_OscConfig+0x2f8>
 8001d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d30:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d34:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d38:	fa92 f2a2 	rbit	r2, r2
 8001d3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ab      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x284>
 8001d60:	e003      	b.n	8001d6a <HAL_RCC_OscConfig+0x336>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 817d 	beq.w	800207a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d80:	4ba6      	ldr	r3, [pc, #664]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d8c:	4ba3      	ldr	r3, [pc, #652]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d172      	bne.n	8001e7e <HAL_RCC_OscConfig+0x44a>
 8001d98:	4ba0      	ldr	r3, [pc, #640]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d16c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x44a>
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001db6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x3a0>
 8001dce:	4b93      	ldr	r3, [pc, #588]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c8>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001df8:	4b88      	ldr	r3, [pc, #544]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f042 0220 	orr.w	r2, r2, #32
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f002 021f 	and.w	r2, r2, #31
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCC_OscConfig+0x410>
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f000 be2e 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b75      	ldr	r3, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	21f8      	movs	r1, #248	; 0xf8
 8001e5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e62:	fa91 f1a1 	rbit	r1, r1
 8001e66:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e6e:	fab1 f181 	clz	r1, r1
 8001e72:	b2c9      	uxtb	r1, r1
 8001e74:	408b      	lsls	r3, r1
 8001e76:	4969      	ldr	r1, [pc, #420]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7c:	e0fd      	b.n	800207a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8088 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x56c>
 8001e90:	2301      	movs	r3, #1
 8001e92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ea2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f932 	bl	8001124 <HAL_GetTick>
 8001ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff f92d 	bl	8001124 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d902      	bls.n	8001edc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f000 bde2 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4d8>
 8001f06:	4b45      	ldr	r3, [pc, #276]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e013      	b.n	8001f34 <HAL_RCC_OscConfig+0x500>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f30:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2202      	movs	r2, #2
 8001f36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0af      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	21f8      	movs	r1, #248	; 0xf8
 8001f7c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f84:	fa91 f1a1 	rbit	r1, r1
 8001f88:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f90:	fab1 f181 	clz	r1, r1
 8001f94:	b2c9      	uxtb	r1, r1
 8001f96:	408b      	lsls	r3, r1
 8001f98:	4920      	ldr	r1, [pc, #128]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
 8001f9e:	e06c      	b.n	800207a <HAL_RCC_OscConfig+0x646>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f8aa 	bl	8001124 <HAL_GetTick>
 8001fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f8a5 	bl	8001124 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d902      	bls.n	8001fec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f000 bd5a 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <HAL_RCC_OscConfig+0x5ec>
 8002016:	4b01      	ldr	r3, [pc, #4]	; (800201c <HAL_RCC_OscConfig+0x5e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e015      	b.n	8002048 <HAL_RCC_OscConfig+0x614>
 800201c:	40021000 	.word	0x40021000
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002038:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002044:	4bc8      	ldr	r3, [pc, #800]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2202      	movs	r2, #2
 800204a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800204e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800205a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800205e:	fab2 f282 	clz	r2, r2
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f042 0220 	orr.w	r2, r2, #32
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f002 021f 	and.w	r2, r2, #31
 800206e:	2101      	movs	r1, #1
 8002070:	fa01 f202 	lsl.w	r2, r1, r2
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ad      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8110 	beq.w	80022b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d079      	beq.n	8002194 <HAL_RCC_OscConfig+0x760>
 80020a0:	2301      	movs	r3, #1
 80020a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4bab      	ldr	r3, [pc, #684]	; (800236c <HAL_RCC_OscConfig+0x938>)
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	461a      	mov	r2, r3
 80020c6:	2301      	movs	r3, #1
 80020c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff f82b 	bl	8001124 <HAL_GetTick>
 80020ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff f826 	bl	8001124 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d902      	bls.n	80020ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f000 bcdb 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002104:	2202      	movs	r2, #2
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002128:	2202      	movs	r2, #2
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002142:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002144:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 8002146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002150:	2102      	movs	r1, #2
 8002152:	6019      	str	r1, [r3, #0]
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f1a3 	rbit	r1, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800216a:	6019      	str	r1, [r3, #0]
  return result;
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0a0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x6a0>
 8002192:	e08d      	b.n	80022b0 <HAL_RCC_OscConfig+0x87c>
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021b6:	601a      	str	r2, [r3, #0]
  return result;
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x938>)
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	461a      	mov	r2, r3
 80021d2:	2300      	movs	r3, #0
 80021d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe ffa5 	bl	8001124 <HAL_GetTick>
 80021da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e0:	f7fe ffa0 	bl	8001124 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d902      	bls.n	80021f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	f000 bc55 	b.w	8002aa0 <HAL_RCC_OscConfig+0x106c>
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021fe:	2202      	movs	r2, #2
 8002200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002222:	2202      	movs	r2, #2
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002246:	2202      	movs	r2, #2
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002260:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 8002264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800226e:	2102      	movs	r1, #2
 8002270:	6019      	str	r1, [r3, #0]
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f1a3 	rbit	r1, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002288:	6019      	str	r1, [r3, #0]
  return result;
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d197      	bne.n	80021e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 81a1 	beq.w	8002608 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d116      	bne.n	8002306 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	61d3      	str	r3, [r2, #28]
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11a      	bne.n	8002348 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe ff01 	bl	8001124 <HAL_GetTick>
 8002322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	e009      	b.n	800233c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe fefc 	bl	8001124 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e3b1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_OscConfig+0x93c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_OscConfig+0x940>
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a02      	ldr	r2, [pc, #8]	; (8002368 <HAL_RCC_OscConfig+0x934>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e03c      	b.n	80023e0 <HAL_RCC_OscConfig+0x9ac>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	10908120 	.word	0x10908120
 8002370:	40007000 	.word	0x40007000
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x96a>
 8002384:	4bc1      	ldr	r3, [pc, #772]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4ac0      	ldr	r2, [pc, #768]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	4bbe      	ldr	r3, [pc, #760]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4abd      	ldr	r2, [pc, #756]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002396:	f023 0304 	bic.w	r3, r3, #4
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e020      	b.n	80023e0 <HAL_RCC_OscConfig+0x9ac>
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x994>
 80023ae:	4bb7      	ldr	r3, [pc, #732]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4ab6      	ldr	r2, [pc, #728]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4bb4      	ldr	r3, [pc, #720]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4ab3      	ldr	r2, [pc, #716]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0x9ac>
 80023c8:	4bb0      	ldr	r3, [pc, #704]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4aaf      	ldr	r2, [pc, #700]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	4bad      	ldr	r3, [pc, #692]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4aac      	ldr	r2, [pc, #688]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8081 	beq.w	80024f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fe97 	bl	8001124 <HAL_GetTick>
 80023f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe fe92 	bl	8001124 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e345      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800241c:	2202      	movs	r2, #2
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800245a:	601a      	str	r2, [r3, #0]
  return result;
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002464:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0xa4c>
 800247a:	4b84      	ldr	r3, [pc, #528]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	e013      	b.n	80024a8 <HAL_RCC_OscConfig+0xa74>
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	4b79      	ldr	r3, [pc, #484]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024b0:	2102      	movs	r1, #2
 80024b2:	6011      	str	r1, [r2, #0]
 80024b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	fa92 f1a2 	rbit	r1, r2
 80024c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024ca:	6011      	str	r1, [r2, #0]
  return result;
 80024cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d084      	beq.n	80023fc <HAL_RCC_OscConfig+0x9c8>
 80024f2:	e07f      	b.n	80025f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fe16 	bl	8001124 <HAL_GetTick>
 80024f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fe11 	bl	8001124 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e2c4      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f2a3 	rbit	r2, r3
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002542:	2202      	movs	r2, #2
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002566:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0xb4e>
 800257c:	4b43      	ldr	r3, [pc, #268]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	e013      	b.n	80025aa <HAL_RCC_OscConfig+0xb76>
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025b2:	2102      	movs	r1, #2
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fa92 f1a2 	rbit	r1, r2
 80025c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d184      	bne.n	80024fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002606:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8242 	beq.w	8002a9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCC_OscConfig+0xc58>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	f000 8213 	beq.w	8002a4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b02      	cmp	r3, #2
 8002636:	f040 8162 	bne.w	80028fe <HAL_RCC_OscConfig+0xeca>
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002642:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800265e:	601a      	str	r2, [r3, #0]
  return result;
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002668:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	461a      	mov	r2, r3
 800267c:	2300      	movs	r3, #0
 800267e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fd50 	bl	8001124 <HAL_GetTick>
 8002684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e00c      	b.n	80026a4 <HAL_RCC_OscConfig+0xc70>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fd48 	bl	8001124 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1fd      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026c8:	601a      	str	r2, [r3, #0]
  return result;
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_OscConfig+0xcba>
 80026e8:	4bb0      	ldr	r3, [pc, #704]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e027      	b.n	800273e <HAL_RCC_OscConfig+0xd0a>
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800271c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	4b9c      	ldr	r3, [pc, #624]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002742:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002746:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800274a:	6011      	str	r1, [r2, #0]
 800274c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002750:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fa92 f1a2 	rbit	r1, r2
 800275a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002762:	6011      	str	r1, [r2, #0]
  return result;
 8002764:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002768:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f042 0220 	orr.w	r2, r2, #32
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 021f 	and.w	r2, r2, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d182      	bne.n	8002690 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278a:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	430b      	orrs	r3, r1
 80027ac:	497f      	ldr	r1, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fc94 	bl	8001124 <HAL_GetTick>
 80027fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002800:	e009      	b.n	8002816 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fc8f 	bl	8001124 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e144      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800281e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800283a:	601a      	str	r2, [r3, #0]
  return result;
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002844:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_OscConfig+0xe2c>
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e027      	b.n	80028b0 <HAL_RCC_OscConfig+0xe7c>
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028bc:	6011      	str	r1, [r2, #0]
 80028be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	fa92 f1a2 	rbit	r1, r2
 80028cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028d4:	6011      	str	r1, [r2, #0]
  return result;
 80028d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f002 021f 	and.w	r2, r2, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d082      	beq.n	8002802 <HAL_RCC_OscConfig+0xdce>
 80028fc:	e0cf      	b.n	8002a9e <HAL_RCC_OscConfig+0x106a>
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002906:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fa93 f2a3 	rbit	r2, r3
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002922:	601a      	str	r2, [r3, #0]
  return result;
 8002924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002928:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800292c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002938:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	461a      	mov	r2, r3
 8002940:	2300      	movs	r3, #0
 8002942:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fbee 	bl	8001124 <HAL_GetTick>
 8002948:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	e009      	b.n	8002962 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fbe9 	bl	8001124 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e09e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800296a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800296e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002974:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002986:	601a      	str	r2, [r3, #0]
  return result;
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002990:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d104      	bne.n	80029b0 <HAL_RCC_OscConfig+0xf7c>
 80029a6:	4b01      	ldr	r3, [pc, #4]	; (80029ac <HAL_RCC_OscConfig+0xf78>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e029      	b.n	8002a00 <HAL_RCC_OscConfig+0xfcc>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x1078>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a04:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a0c:	6011      	str	r1, [r2, #0]
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fa92 f1a2 	rbit	r1, r2
 8002a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a24:	6011      	str	r1, [r2, #0]
  return result;
 8002a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f042 0220 	orr.w	r2, r2, #32
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f002 021f 	and.w	r2, r2, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d180      	bne.n	800294e <HAL_RCC_OscConfig+0xf1a>
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e01e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_RCC_OscConfig+0x1078>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d10b      	bne.n	8002a9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b09e      	sub	sp, #120	; 0x78
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e162      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d910      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	498b      	ldr	r1, [pc, #556]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e14a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b82      	ldr	r3, [pc, #520]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	497f      	ldr	r1, [pc, #508]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80dc 	beq.w	8002cdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d13c      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xf6>
 8002b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xa6>
 8002b50:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e00f      	b.n	8002b76 <HAL_RCC_ClockConfig+0xc6>
 8002b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	667b      	str	r3, [r7, #100]	; 0x64
 8002b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b68:	663b      	str	r3, [r7, #96]	; 0x60
 8002b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b7e:	fa92 f2a2 	rbit	r2, r2
 8002b82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b86:	fab2 f282 	clz	r2, r2
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f042 0220 	orr.w	r2, r2, #32
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f002 021f 	and.w	r2, r2, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d17b      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0f3      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d13c      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x178>
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x128>
 8002bd2:	4b4f      	ldr	r3, [pc, #316]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x148>
 8002bd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
 8002be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
 8002bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c00:	fa92 f2a2 	rbit	r2, r2
 8002c04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f042 0220 	orr.w	r2, r2, #32
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d13a      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b2      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x1a0>
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e00d      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1bc>
 8002c50:	2302      	movs	r3, #2
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	61ba      	str	r2, [r7, #24]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	fa92 f2a2 	rbit	r2, r2
 8002c76:	617a      	str	r2, [r7, #20]
  return result;
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e079      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	491a      	ldr	r1, [pc, #104]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fa3a 	bl	8001124 <HAL_GetTick>
 8002cb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fa36 	bl	8001124 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e061      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_RCC_ClockConfig+0x260>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d214      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 0207 	bic.w	r2, r3, #7
 8002cf2:	4906      	ldr	r1, [pc, #24]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e040      	b.n	8002d8e <HAL_RCC_ClockConfig+0x2de>
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	491a      	ldr	r1, [pc, #104]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4912      	ldr	r1, [pc, #72]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d52:	f000 f829 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d56:	4601      	mov	r1, r0
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	22f0      	movs	r2, #240	; 0xf0
 8002d62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	40d3      	lsrs	r3, r2
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x2ec>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_RCC_ClockConfig+0x2f0>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_RCC_ClockConfig+0x2f4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe f988 	bl	800109c <HAL_InitTick>
  
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3778      	adds	r7, #120	; 0x78
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08003fe0 	.word	0x08003fe0
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000004 	.word	0x20000004

08002da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b08b      	sub	sp, #44	; 0x2c
 8002dac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x36>
 8002dd6:	e03c      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dda:	623b      	str	r3, [r7, #32]
      break;
 8002ddc:	e03c      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002de4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002de8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	fa92 f2a2 	rbit	r2, r2
 8002df0:	607a      	str	r2, [r7, #4]
  return result;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	fab2 f282 	clz	r2, r2
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	40d3      	lsrs	r3, r2
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	fa92 f2a2 	rbit	r2, r2
 8002e14:	60fa      	str	r2, [r7, #12]
  return result;
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	40d3      	lsrs	r3, r2
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e004      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	623b      	str	r3, [r7, #32]
      break;
 8002e50:	e002      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e54:	623b      	str	r3, [r7, #32]
      break;
 8002e56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e58:	6a3b      	ldr	r3, [r7, #32]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	372c      	adds	r7, #44	; 0x2c
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	007a1200 	.word	0x007a1200
 8002e70:	08003ff0 	.word	0x08003ff0
 8002e74:	08004000 	.word	0x08004000
 8002e78:	003d0900 	.word	0x003d0900

08002e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b092      	sub	sp, #72	; 0x48
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80d4 	beq.w	8003048 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea0:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10e      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b4b      	ldr	r3, [pc, #300]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]
 8002eb8:	4b48      	ldr	r3, [pc, #288]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a41      	ldr	r2, [pc, #260]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f91f 	bl	8001124 <HAL_GetTick>
 8002ee6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fe f91b 	bl	8001124 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e169      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8084 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d07c      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	461a      	mov	r2, r3
 8002f52:	2301      	movs	r3, #1
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	461a      	mov	r2, r3
 8002f76:	2300      	movs	r3, #0
 8002f78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f7a:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d04b      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe f8cb 	bl	8001124 <HAL_GetTick>
 8002f8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe f8c7 	bl	8001124 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e113      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	61fb      	str	r3, [r7, #28]
  return result;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d108      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002fd6:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	e00d      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	10908100 	.word	0x10908100
 8002fe8:	2302      	movs	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	613a      	str	r2, [r7, #16]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	fa92 f2a2 	rbit	r2, r2
 8003002:	60fa      	str	r2, [r7, #12]
  return result;
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	fab2 f282 	clz	r2, r2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f002 021f 	and.w	r2, r2, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f202 	lsl.w	r2, r1, r2
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0b7      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003022:	4b6d      	ldr	r3, [pc, #436]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	496a      	ldr	r1, [pc, #424]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003034:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4a65      	ldr	r2, [pc, #404]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003046:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003054:	4b60      	ldr	r3, [pc, #384]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f023 0203 	bic.w	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	495d      	ldr	r1, [pc, #372]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003072:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4956      	ldr	r1, [pc, #344]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003080:	4313      	orrs	r3, r2
 8003082:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003090:	4b51      	ldr	r3, [pc, #324]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	494e      	ldr	r1, [pc, #312]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ae:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f023 0210 	bic.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	4947      	ldr	r1, [pc, #284]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	493f      	ldr	r1, [pc, #252]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f023 0220 	bic.w	r2, r3, #32
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4938      	ldr	r1, [pc, #224]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003108:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	4930      	ldr	r1, [pc, #192]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003116:	4313      	orrs	r3, r2
 8003118:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	4929      	ldr	r1, [pc, #164]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	4921      	ldr	r1, [pc, #132]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	491a      	ldr	r1, [pc, #104]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	4912      	ldr	r1, [pc, #72]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	490b      	ldr	r1, [pc, #44]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3748      	adds	r7, #72	; 0x48
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e09d      	b.n	800332a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031fe:	d009      	beq.n	8003214 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
 8003206:	e005      	b.n	8003214 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fd9a 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003254:	d902      	bls.n	800325c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e002      	b.n	8003262 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800325c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003260:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800326a:	d007      	beq.n	800327c <HAL_SPI_Init+0xa0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003274:	d002      	beq.n	800327c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	ea42 0103 	orr.w	r1, r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	f003 0204 	and.w	r2, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032f8:	ea42 0103 	orr.w	r1, r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003318:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b088      	sub	sp, #32
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_SPI_Transmit+0x22>
 8003350:	2302      	movs	r3, #2
 8003352:	e158      	b.n	8003606 <HAL_SPI_Transmit+0x2d4>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800335c:	f7fd fee2 	bl	8001124 <HAL_GetTick>
 8003360:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d002      	beq.n	8003378 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003376:	e13d      	b.n	80035f4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Transmit+0x52>
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003388:	e134      	b.n	80035f4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d10f      	bne.n	80033f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d007      	beq.n	8003414 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800341c:	d94b      	bls.n	80034b6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_SPI_Transmit+0xfa>
 8003426:	8afb      	ldrh	r3, [r7, #22]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d13e      	bne.n	80034aa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003450:	e02b      	b.n	80034aa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d112      	bne.n	8003486 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003484:	e011      	b.n	80034aa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003486:	f7fd fe4d 	bl	8001124 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d803      	bhi.n	800349e <HAL_SPI_Transmit+0x16c>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d102      	bne.n	80034a4 <HAL_SPI_Transmit+0x172>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034a8:	e0a4      	b.n	80035f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ce      	bne.n	8003452 <HAL_SPI_Transmit+0x120>
 80034b4:	e07c      	b.n	80035b0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_SPI_Transmit+0x192>
 80034be:	8afb      	ldrh	r3, [r7, #22]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d170      	bne.n	80035a6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d912      	bls.n	80034f4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	881a      	ldrh	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	1c9a      	adds	r2, r3, #2
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b02      	subs	r3, #2
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034f2:	e058      	b.n	80035a6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	7812      	ldrb	r2, [r2, #0]
 8003500:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800351a:	e044      	b.n	80035a6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d12b      	bne.n	8003582 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d912      	bls.n	800355a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b02      	subs	r3, #2
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003558:	e025      	b.n	80035a6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003580:	e011      	b.n	80035a6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003582:	f7fd fdcf 	bl	8001124 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d803      	bhi.n	800359a <HAL_SPI_Transmit+0x268>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d102      	bne.n	80035a0 <HAL_SPI_Transmit+0x26e>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035a4:	e026      	b.n	80035f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1b5      	bne.n	800351c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	6839      	ldr	r1, [r7, #0]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f949 	bl	800384c <SPI_EndRxTxTransaction>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e000      	b.n	80035f4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80035f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003604:	7ffb      	ldrb	r3, [r7, #31]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003620:	f7fd fd80 	bl	8001124 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4413      	add	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003630:	f7fd fd78 	bl	8001124 <HAL_GetTick>
 8003634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	015b      	lsls	r3, r3, #5
 800363c:	0d1b      	lsrs	r3, r3, #20
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	fb02 f303 	mul.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003646:	e054      	b.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d050      	beq.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003650:	f7fd fd68 	bl	8001124 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	429a      	cmp	r2, r3
 800365e:	d902      	bls.n	8003666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d13d      	bne.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367e:	d111      	bne.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003688:	d004      	beq.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d107      	bne.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ac:	d10f      	bne.n	80036ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e017      	b.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	429a      	cmp	r2, r3
 800370e:	d19b      	bne.n	8003648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000000 	.word	0x20000000

08003720 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003732:	f7fd fcf7 	bl	8001124 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4413      	add	r3, r2
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003742:	f7fd fcef 	bl	8001124 <HAL_GetTick>
 8003746:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003750:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00da      	lsls	r2, r3, #3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	0d1b      	lsrs	r3, r3, #20
 8003760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003768:	e060      	b.n	800382c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003770:	d107      	bne.n	8003782 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d104      	bne.n	8003782 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003780:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d050      	beq.n	800382c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800378a:	f7fd fccb 	bl	8001124 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003796:	429a      	cmp	r2, r3
 8003798:	d902      	bls.n	80037a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d13d      	bne.n	800381c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b8:	d111      	bne.n	80037de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c2:	d004      	beq.n	80037ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037cc:	d107      	bne.n	80037de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e6:	d10f      	bne.n	8003808 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003806:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e010      	b.n	800383e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	3b01      	subs	r3, #1
 800382a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d196      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3728      	adds	r7, #40	; 0x28
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000000 	.word	0x20000000

0800384c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff ff5b 	bl	8003720 <SPI_WaitFifoStateUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e027      	b.n	80038d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2200      	movs	r2, #0
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7ff fec0 	bl	8003610 <SPI_WaitFlagStateUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e014      	b.n	80038d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7ff ff34 	bl	8003720 <SPI_WaitFifoStateUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e000      	b.n	80038d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4013      	ands	r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800390e:	b084      	sub	sp, #16
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	f107 0014 	add.w	r0, r7, #20
 800391c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	b004      	add	sp, #16
 800394e:	4770      	bx	lr

08003950 <__libc_init_array>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	4d0d      	ldr	r5, [pc, #52]	; (8003988 <__libc_init_array+0x38>)
 8003954:	4c0d      	ldr	r4, [pc, #52]	; (800398c <__libc_init_array+0x3c>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	2600      	movs	r6, #0
 800395c:	42a6      	cmp	r6, r4
 800395e:	d109      	bne.n	8003974 <__libc_init_array+0x24>
 8003960:	4d0b      	ldr	r5, [pc, #44]	; (8003990 <__libc_init_array+0x40>)
 8003962:	4c0c      	ldr	r4, [pc, #48]	; (8003994 <__libc_init_array+0x44>)
 8003964:	f000 f820 	bl	80039a8 <_init>
 8003968:	1b64      	subs	r4, r4, r5
 800396a:	10a4      	asrs	r4, r4, #2
 800396c:	2600      	movs	r6, #0
 800396e:	42a6      	cmp	r6, r4
 8003970:	d105      	bne.n	800397e <__libc_init_array+0x2e>
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	f855 3b04 	ldr.w	r3, [r5], #4
 8003978:	4798      	blx	r3
 800397a:	3601      	adds	r6, #1
 800397c:	e7ee      	b.n	800395c <__libc_init_array+0xc>
 800397e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003982:	4798      	blx	r3
 8003984:	3601      	adds	r6, #1
 8003986:	e7f2      	b.n	800396e <__libc_init_array+0x1e>
 8003988:	08004114 	.word	0x08004114
 800398c:	08004114 	.word	0x08004114
 8003990:	08004114 	.word	0x08004114
 8003994:	08004118 	.word	0x08004118

08003998 <memset>:
 8003998:	4402      	add	r2, r0
 800399a:	4603      	mov	r3, r0
 800399c:	4293      	cmp	r3, r2
 800399e:	d100      	bne.n	80039a2 <memset+0xa>
 80039a0:	4770      	bx	lr
 80039a2:	f803 1b01 	strb.w	r1, [r3], #1
 80039a6:	e7f9      	b.n	800399c <memset+0x4>

080039a8 <_init>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr

080039b4 <_fini>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr
