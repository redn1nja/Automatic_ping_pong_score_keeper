
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800dd08  0800dd08  0001dd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e020  0800e020  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e020  0800e020  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e020  0800e020  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e020  0800e020  0001e020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e024  0800e024  0001e024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800e028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001310  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000148c  2000148c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001abfa  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417c  00000000  00000000  0003ada6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  0003ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001498  00000000  00000000  000405b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d10  00000000  00000000  00041a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023a97  00000000  00000000  00064760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3338  00000000  00000000  000881f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b52f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d28  00000000  00000000  0014b580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800dcf0 	.word	0x0800dcf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800dcf0 	.word	0x0800dcf0

080001c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]
 80001ea:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f00d fd74 	bl	800dce0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001f8:	4b40      	ldr	r3, [pc, #256]	; (80002fc <MX_ADC1_Init+0x134>)
 80001fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000200:	4b3e      	ldr	r3, [pc, #248]	; (80002fc <MX_ADC1_Init+0x134>)
 8000202:	2200      	movs	r2, #0
 8000204:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000206:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <MX_ADC1_Init+0x134>)
 8000208:	2200      	movs	r2, #0
 800020a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800020c:	4b3b      	ldr	r3, [pc, #236]	; (80002fc <MX_ADC1_Init+0x134>)
 800020e:	2200      	movs	r2, #0
 8000210:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000212:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <MX_ADC1_Init+0x134>)
 8000214:	2200      	movs	r2, #0
 8000216:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000218:	4b38      	ldr	r3, [pc, #224]	; (80002fc <MX_ADC1_Init+0x134>)
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000220:	4b36      	ldr	r3, [pc, #216]	; (80002fc <MX_ADC1_Init+0x134>)
 8000222:	2200      	movs	r2, #0
 8000224:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000226:	4b35      	ldr	r3, [pc, #212]	; (80002fc <MX_ADC1_Init+0x134>)
 8000228:	2201      	movs	r2, #1
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800022c:	4b33      	ldr	r3, [pc, #204]	; (80002fc <MX_ADC1_Init+0x134>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000232:	4b32      	ldr	r3, [pc, #200]	; (80002fc <MX_ADC1_Init+0x134>)
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <MX_ADC1_Init+0x134>)
 800023a:	2200      	movs	r2, #0
 800023c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000240:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <MX_ADC1_Init+0x134>)
 8000242:	2204      	movs	r2, #4
 8000244:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000246:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <MX_ADC1_Init+0x134>)
 8000248:	2200      	movs	r2, #0
 800024a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800024c:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <MX_ADC1_Init+0x134>)
 800024e:	2200      	movs	r2, #0
 8000250:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000252:	482a      	ldr	r0, [pc, #168]	; (80002fc <MX_ADC1_Init+0x134>)
 8000254:	f000 fc80 	bl	8000b58 <HAL_ADC_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800025e:	f000 fa27 	bl	80006b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000262:	2300      	movs	r3, #0
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000266:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800026a:	4619      	mov	r1, r3
 800026c:	4823      	ldr	r0, [pc, #140]	; (80002fc <MX_ADC1_Init+0x134>)
 800026e:	f002 fcdf 	bl	8002c30 <HAL_ADCEx_MultiModeConfigChannel>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000278:	f000 fa1a 	bl	80006b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800027c:	2306      	movs	r3, #6
 800027e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000284:	2300      	movs	r3, #0
 8000286:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000288:	2300      	movs	r3, #0
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800028c:	2300      	movs	r3, #0
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Offset = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000298:	4619      	mov	r1, r3
 800029a:	4818      	ldr	r0, [pc, #96]	; (80002fc <MX_ADC1_Init+0x134>)
 800029c:	f001 fac2 	bl	8001824 <HAL_ADC_ConfigChannel>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80002a6:	f000 fa03 	bl	80006b0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80002aa:	2306      	movs	r3, #6
 80002ac:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80002be:	2340      	movs	r3, #64	; 0x40
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80002c2:	2301      	movs	r3, #1
 80002c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_ADC1_Init+0x134>)
 80002e6:	f001 ff13 	bl	8002110 <HAL_ADCEx_InjectedConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80002f0:	f000 f9de 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	3750      	adds	r7, #80	; 0x50
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000198 	.word	0x20000198

08000300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08a      	sub	sp, #40	; 0x28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000320:	d123      	bne.n	800036a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a13      	ldr	r2, [pc, #76]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	6153      	str	r3, [r2, #20]
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	613b      	str	r3, [r7, #16]
 8000338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <HAL_ADC_MspInit+0x74>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <HAL_ADC_MspInit+0x74>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000356:	2303      	movs	r3, #3
 8000358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	4619      	mov	r1, r3
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <HAL_ADC_MspInit+0x78>)
 8000366:	f002 ffe9 	bl	800333c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	; 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000
 8000378:	48000800 	.word	0x48000800

0800037c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000392:	4b37      	ldr	r3, [pc, #220]	; (8000470 <MX_GPIO_Init+0xf4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a36      	ldr	r2, [pc, #216]	; (8000470 <MX_GPIO_Init+0xf4>)
 8000398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b34      	ldr	r3, [pc, #208]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003a6:	613b      	str	r3, [r7, #16]
 80003a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003aa:	4b31      	ldr	r3, [pc, #196]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a30      	ldr	r2, [pc, #192]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b2e      	ldr	r3, [pc, #184]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a2a      	ldr	r2, [pc, #168]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b28      	ldr	r3, [pc, #160]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a24      	ldr	r2, [pc, #144]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <MX_GPIO_Init+0xf4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800040a:	2200      	movs	r2, #0
 800040c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000410:	4818      	ldr	r0, [pc, #96]	; (8000474 <MX_GPIO_Init+0xf8>)
 8000412:	f003 f9db 	bl	80037cc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000416:	2337      	movs	r3, #55	; 0x37
 8000418:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800041a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800041e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4619      	mov	r1, r3
 800042a:	4812      	ldr	r0, [pc, #72]	; (8000474 <MX_GPIO_Init+0xf8>)
 800042c:	f002 ff86 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000430:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000434:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	4619      	mov	r1, r3
 8000448:	480a      	ldr	r0, [pc, #40]	; (8000474 <MX_GPIO_Init+0xf8>)
 800044a:	f002 ff77 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800044e:	2301      	movs	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	4619      	mov	r1, r3
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f002 ff6a 	bl	800333c <HAL_GPIO_Init>

}
 8000468:	bf00      	nop
 800046a:	3728      	adds	r7, #40	; 0x28
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	48001000 	.word	0x48001000

08000478 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_I2C1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_I2C1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_I2C1_Init+0x74>)
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <MX_I2C1_Init+0x7c>)
 8000486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_I2C1_Init+0x74>)
 8000490:	2201      	movs	r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_I2C1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b2:	480e      	ldr	r0, [pc, #56]	; (80004ec <MX_I2C1_Init+0x74>)
 80004b4:	f003 f9ba 	bl	800382c <HAL_I2C_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004be:	f000 f8f7 	bl	80006b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c2:	2100      	movs	r1, #0
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <MX_I2C1_Init+0x74>)
 80004c6:	f003 fac5 	bl	8003a54 <HAL_I2CEx_ConfigAnalogFilter>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d0:	f000 f8ee 	bl	80006b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d4:	2100      	movs	r1, #0
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_I2C1_Init+0x74>)
 80004d8:	f003 fb24 	bl	8003b24 <HAL_I2CEx_ConfigDigitalFilter>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f8e5 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200001e8 	.word	0x200001e8
 80004f0:	40005400 	.word	0x40005400
 80004f4:	2000090e 	.word	0x2000090e

080004f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a17      	ldr	r2, [pc, #92]	; (8000574 <HAL_I2C_MspInit+0x7c>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d127      	bne.n	800056a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <HAL_I2C_MspInit+0x80>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000532:	23c0      	movs	r3, #192	; 0xc0
 8000534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000536:	2312      	movs	r3, #18
 8000538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800053a:	2301      	movs	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053e:	2303      	movs	r3, #3
 8000540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000542:	2304      	movs	r3, #4
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <HAL_I2C_MspInit+0x84>)
 800054e:	f002 fef5 	bl	800333c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_I2C_MspInit+0x80>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800056a:	bf00      	nop
 800056c:	3728      	adds	r7, #40	; 0x28
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40005400 	.word	0x40005400
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t maxym = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fa7f 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f82b 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f7ff fef3 	bl	800037c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000596:	f7ff ff6f 	bl	8000478 <MX_I2C1_Init>
  MX_SPI1_Init();
 800059a:	f000 f899 	bl	80006d0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800059e:	f00c feb1 	bl	800d304 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80005a2:	f7ff fe11 	bl	80001c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005a6:	f000 f97d 	bl	80008a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005aa:	2100      	movs	r1, #0
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x60>)
 80005ae:	f007 fb37 	bl	8007c20 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80005b2:	2100      	movs	r1, #0
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x64>)
 80005b6:	f001 f897 	bl	80016e8 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <main+0x64>)
 80005bc:	f000 fe16 	bl	80011ec <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 80005c0:	2101      	movs	r1, #1
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <main+0x64>)
 80005c4:	f000 ff46 	bl	8001454 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	maxym = HAL_ADC_GetValue(&hadc1);
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x64>)
 80005ca:	f001 f861 	bl	8001690 <HAL_ADC_GetValue>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	80fb      	strh	r3, [r7, #6]

	CDC_Transmit_FS(&maxym, 2);
 80005d4:	1dbb      	adds	r3, r7, #6
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f00c ff51 	bl	800d480 <CDC_Transmit_FS>
  {
 80005de:	e7ec      	b.n	80005ba <main+0x3a>
 80005e0:	20000298 	.word	0x20000298
 80005e4:	20000198 	.word	0x20000198

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09e      	sub	sp, #120	; 0x78
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005f2:	2228      	movs	r2, #40	; 0x28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00d fb72 	bl	800dce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	223c      	movs	r2, #60	; 0x3c
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00d fb64 	bl	800dce0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000618:	2303      	movs	r3, #3
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000638:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000642:	4618      	mov	r0, r3
 8000644:	f004 ffce 	bl	80055e4 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800064e:	f000 f82f 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f96c 	bl	800694c <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f819 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <SystemClock_Config+0xc4>)
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fbe6 	bl	8006e64 <HAL_RCCEx_PeriphCLKConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800069e:	f000 f807 	bl	80006b0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3778      	adds	r7, #120	; 0x78
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	000200a0 	.word	0x000200a0

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>

080006ba <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_SPI1_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_SPI1_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_SPI1_Init+0x74>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_SPI1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_SPI1_Init+0x74>)
 80006ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_SPI1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_SPI1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_SPI1_Init+0x74>)
 80006fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000702:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_SPI1_Init+0x74>)
 8000706:	2208      	movs	r2, #8
 8000708:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_SPI1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_SPI1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_SPI1_Init+0x74>)
 800071e:	2207      	movs	r2, #7
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_SPI1_Init+0x74>)
 800072a:	2208      	movs	r2, #8
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_SPI1_Init+0x74>)
 8000730:	f006 febe 	bl	80074b0 <HAL_SPI_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f7ff ffb9 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000234 	.word	0x20000234
 8000748:	40013000 	.word	0x40013000

0800074c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_SPI_MspInit+0x7c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d128      	bne.n	80007c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_SPI_MspInit+0x80>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <HAL_SPI_MspInit+0x80>)
 8000774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_SPI_MspInit+0x80>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_SPI_MspInit+0x80>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <HAL_SPI_MspInit+0x80>)
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_SPI_MspInit+0x80>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800079e:	23e0      	movs	r3, #224	; 0xe0
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ae:	2305      	movs	r3, #5
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f002 fdbe 	bl	800333c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40013000 	.word	0x40013000
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x44>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x44>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x44>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x44>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x44>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000806:	2007      	movs	r0, #7
 8000808:	f002 fd28 	bl	800325c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f958 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000872:	f003 facf 	bl	8003e14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000f80 	.word	0x20000f80

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08e      	sub	sp, #56	; 0x38
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <MX_TIM2_Init+0xe8>)
 80008d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_TIM2_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_TIM2_Init+0xe8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_TIM2_Init+0xe8>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_TIM2_Init+0xe8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_TIM2_Init+0xe8>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fe:	4823      	ldr	r0, [pc, #140]	; (800098c <MX_TIM2_Init+0xe8>)
 8000900:	f006 ffcc 	bl	800789c <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800090a:	f7ff fed1 	bl	80006b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000918:	4619      	mov	r1, r3
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <MX_TIM2_Init+0xe8>)
 800091c:	f007 fd46 	bl	80083ac <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000926:	f7ff fec3 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_TIM2_Init+0xe8>)
 800092c:	f007 f892 	bl	8007a54 <HAL_TIM_PWM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000936:	f7ff febb 	bl	80006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4810      	ldr	r0, [pc, #64]	; (800098c <MX_TIM2_Init+0xe8>)
 800094a:	f008 fd47 	bl	80093dc <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000954:	f7ff feac 	bl	80006b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <MX_TIM2_Init+0xe8>)
 8000970:	f007 fae6 	bl	8007f40 <HAL_TIM_PWM_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800097a:	f7ff fe99 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800097e:	4803      	ldr	r0, [pc, #12]	; (800098c <MX_TIM2_Init+0xe8>)
 8000980:	f000 f824 	bl	80009cc <HAL_TIM_MspPostInit>

}
 8000984:	bf00      	nop
 8000986:	3738      	adds	r7, #56	; 0x38
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000298 	.word	0x20000298

08000990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009a0:	d10b      	bne.n	80009ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_TIM_Base_MspInit+0x38>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_TIM_Base_MspInit+0x38>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_TIM_Base_MspInit+0x38>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ec:	d11d      	bne.n	8000a2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_TIM_MspPostInit+0x68>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_TIM_MspPostInit+0x68>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_TIM_MspPostInit+0x68>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f002 fc89 	bl	800333c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a62:	f7ff ff0d 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f00d f917 	bl	800dc98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fd89 	bl	8000580 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a70:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000a7c:	0800e028 	.word	0x0800e028
  ldr r2, =_sbss
 8000a80:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000a84:	2000148c 	.word	0x2000148c

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f002 fbdd 	bl	800325c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe92 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fc24 	bl	8003324 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af4:	f002 fbd2 	bl	800329c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200002e4 	.word	0x200002e4

08000b40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200002e4 	.word	0x200002e4

08000b58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e32e      	b.n	80011d6 <HAL_ADC_Init+0x67e>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b80:	d012      	beq.n	8000ba8 <HAL_ADC_Init+0x50>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a8b      	ldr	r2, [pc, #556]	; (8000db4 <HAL_ADC_Init+0x25c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d00d      	beq.n	8000ba8 <HAL_ADC_Init+0x50>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a89      	ldr	r2, [pc, #548]	; (8000db8 <HAL_ADC_Init+0x260>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d008      	beq.n	8000ba8 <HAL_ADC_Init+0x50>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a88      	ldr	r2, [pc, #544]	; (8000dbc <HAL_ADC_Init+0x264>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d003      	beq.n	8000ba8 <HAL_ADC_Init+0x50>
 8000ba0:	21f9      	movs	r1, #249	; 0xf9
 8000ba2:	4887      	ldr	r0, [pc, #540]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000ba4:	f7ff fd89 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d012      	beq.n	8000bd6 <HAL_ADC_Init+0x7e>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb8:	d00d      	beq.n	8000bd6 <HAL_ADC_Init+0x7e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bc2:	d008      	beq.n	8000bd6 <HAL_ADC_Init+0x7e>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000bcc:	d003      	beq.n	8000bd6 <HAL_ADC_Init+0x7e>
 8000bce:	21fa      	movs	r1, #250	; 0xfa
 8000bd0:	487b      	ldr	r0, [pc, #492]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000bd2:	f7ff fd72 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00f      	beq.n	8000bfe <HAL_ADC_Init+0xa6>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d00b      	beq.n	8000bfe <HAL_ADC_Init+0xa6>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b10      	cmp	r3, #16
 8000bec:	d007      	beq.n	8000bfe <HAL_ADC_Init+0xa6>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b18      	cmp	r3, #24
 8000bf4:	d003      	beq.n	8000bfe <HAL_ADC_Init+0xa6>
 8000bf6:	21fb      	movs	r1, #251	; 0xfb
 8000bf8:	4871      	ldr	r0, [pc, #452]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000bfa:	f7ff fd5e 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <HAL_ADC_Init+0xbe>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	2b20      	cmp	r3, #32
 8000c0c:	d003      	beq.n	8000c16 <HAL_ADC_Init+0xbe>
 8000c0e:	21fc      	movs	r1, #252	; 0xfc
 8000c10:	486b      	ldr	r0, [pc, #428]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000c12:	f7ff fd52 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <HAL_ADC_Init+0xd6>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d003      	beq.n	8000c2e <HAL_ADC_Init+0xd6>
 8000c26:	21fd      	movs	r1, #253	; 0xfd
 8000c28:	4865      	ldr	r0, [pc, #404]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000c2a:	f7ff fd46 	bl	80006ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7e5b      	ldrb	r3, [r3, #25]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <HAL_ADC_Init+0xee>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7e5b      	ldrb	r3, [r3, #25]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d003      	beq.n	8000c46 <HAL_ADC_Init+0xee>
 8000c3e:	21fe      	movs	r1, #254	; 0xfe
 8000c40:	485f      	ldr	r0, [pc, #380]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000c42:	f7ff fd3a 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d012      	beq.n	8000c74 <HAL_ADC_Init+0x11c>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c56:	d00d      	beq.n	8000c74 <HAL_ADC_Init+0x11c>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c60:	d008      	beq.n	8000c74 <HAL_ADC_Init+0x11c>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000c6a:	d003      	beq.n	8000c74 <HAL_ADC_Init+0x11c>
 8000c6c:	21ff      	movs	r1, #255	; 0xff
 8000c6e:	4854      	ldr	r0, [pc, #336]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000c70:	f7ff fd23 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d070      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	2b40      	cmp	r3, #64	; 0x40
 8000c82:	d06c      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	2bc0      	cmp	r3, #192	; 0xc0
 8000c8a:	d068      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8000c94:	d063      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c9e:	d05e      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8000ca8:	d059      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000cb2:	d054      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8000cbc:	d04f      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	2b40      	cmp	r3, #64	; 0x40
 8000cc4:	d04b      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d047      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000cd6:	d042      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8000ce0:	d03d      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8000ce8:	d039      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000cf2:	d034      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	2b80      	cmp	r3, #128	; 0x80
 8000cfa:	d030      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000d04:	d02b      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000d0e:	d026      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000d18:	d021      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d22:	d01c      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d2c:	d017      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000d36:	d012      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d40:	d00d      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000d4a:	d008      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d004      	beq.n	8000d5e <HAL_ADC_Init+0x206>
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000d5a:	f7ff fcae 	bl	80006ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <HAL_ADC_Init+0x224>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d004      	beq.n	8000d7c <HAL_ADC_Init+0x224>
 8000d72:	f240 1101 	movw	r1, #257	; 0x101
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000d78:	f7ff fc9f 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d008      	beq.n	8000d96 <HAL_ADC_Init+0x23e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d004      	beq.n	8000d96 <HAL_ADC_Init+0x23e>
 8000d8c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000d92:	f7ff fc92 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d012      	beq.n	8000dc4 <HAL_ADC_Init+0x26c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00e      	beq.n	8000dc4 <HAL_ADC_Init+0x26c>
 8000da6:	f240 1103 	movw	r1, #259	; 0x103
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_ADC_Init+0x268>)
 8000dac:	f7ff fc85 	bl	80006ba <assert_failed>
 8000db0:	e008      	b.n	8000dc4 <HAL_ADC_Init+0x26c>
 8000db2:	bf00      	nop
 8000db4:	50000100 	.word	0x50000100
 8000db8:	50000400 	.word	0x50000400
 8000dbc:	50000500 	.word	0x50000500
 8000dc0:	0800dd08 	.word	0x0800dd08
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e1b      	ldrb	r3, [r3, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <HAL_ADC_Init+0x286>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7e1b      	ldrb	r3, [r3, #24]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d004      	beq.n	8000dde <HAL_ADC_Init+0x286>
 8000dd4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000dd8:	4891      	ldr	r0, [pc, #580]	; (8001020 <HAL_ADC_Init+0x4c8>)
 8000dda:	f7ff fc6e 	bl	80006ba <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d02d      	beq.n	8000e42 <HAL_ADC_Init+0x2ea>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_ADC_Init+0x29e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	d904      	bls.n	8000e00 <HAL_ADC_Init+0x2a8>
 8000df6:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000dfa:	4889      	ldr	r0, [pc, #548]	; (8001020 <HAL_ADC_Init+0x4c8>)
 8000dfc:	f7ff fc5d 	bl	80006ba <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <HAL_ADC_Init+0x2c6>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d004      	beq.n	8000e1e <HAL_ADC_Init+0x2c6>
 8000e14:	f240 1109 	movw	r1, #265	; 0x109
 8000e18:	4881      	ldr	r0, [pc, #516]	; (8001020 <HAL_ADC_Init+0x4c8>)
 8000e1a:	f7ff fc4e 	bl	80006ba <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00c      	beq.n	8000e42 <HAL_ADC_Init+0x2ea>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_ADC_Init+0x2e0>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d904      	bls.n	8000e42 <HAL_ADC_Init+0x2ea>
 8000e38:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000e3c:	4878      	ldr	r0, [pc, #480]	; (8001020 <HAL_ADC_Init+0x4c8>)
 8000e3e:	f7ff fc3c 	bl	80006ba <assert_failed>
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d176      	bne.n	8000f3c <HAL_ADC_Init+0x3e4>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d152      	bne.n	8000efc <HAL_ADC_Init+0x3a4>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fa45 	bl	8000300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d13b      	bne.n	8000efc <HAL_ADC_Init+0x3a4>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f002 f8b3 	bl	8002ff0 <ADC_Disable>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d12f      	bne.n	8000efc <HAL_ADC_Init+0x3a4>
 8000e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <HAL_ADC_Init+0x3a4>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eac:	f023 0302 	bic.w	r3, r3, #2
 8000eb0:	f043 0202 	orr.w	r2, r3, #2
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ec6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ed6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed8:	4b52      	ldr	r3, [pc, #328]	; (8001024 <HAL_ADC_Init+0x4cc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a52      	ldr	r2, [pc, #328]	; (8001028 <HAL_ADC_Init+0x4d0>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9a      	lsrs	r2, r3, #18
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eee:	e002      	b.n	8000ef6 <HAL_ADC_Init+0x39e>
          {
            wait_loop_index--;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f9      	bne.n	8000ef0 <HAL_ADC_Init+0x398>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d007      	beq.n	8000f1a <HAL_ADC_Init+0x3c2>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f18:	d110      	bne.n	8000f3c <HAL_ADC_Init+0x3e4>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f023 0312 	bic.w	r3, r3, #18
 8000f22:	f043 0210 	orr.w	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f040 8139 	bne.w	80011bc <HAL_ADC_Init+0x664>
 8000f4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f040 8134 	bne.w	80011bc <HAL_ADC_Init+0x664>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 812c 	bne.w	80011bc <HAL_ADC_Init+0x664>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f6c:	f043 0202 	orr.w	r2, r3, #2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f7c:	d004      	beq.n	8000f88 <HAL_ADC_Init+0x430>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <HAL_ADC_Init+0x4d4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_ADC_Init+0x434>
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <HAL_ADC_Init+0x4d8>)
 8000f8a:	e000      	b.n	8000f8e <HAL_ADC_Init+0x436>
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <HAL_ADC_Init+0x4dc>)
 8000f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f98:	d102      	bne.n	8000fa0 <HAL_ADC_Init+0x448>
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <HAL_ADC_Init+0x4d4>)
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e01a      	b.n	8000fd6 <HAL_ADC_Init+0x47e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <HAL_ADC_Init+0x4d4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d103      	bne.n	8000fb2 <HAL_ADC_Init+0x45a>
 8000faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e011      	b.n	8000fd6 <HAL_ADC_Init+0x47e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a20      	ldr	r2, [pc, #128]	; (8001038 <HAL_ADC_Init+0x4e0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d102      	bne.n	8000fc2 <HAL_ADC_Init+0x46a>
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HAL_ADC_Init+0x4e4>)
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e009      	b.n	8000fd6 <HAL_ADC_Init+0x47e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_ADC_Init+0x4e4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d102      	bne.n	8000fd2 <HAL_ADC_Init+0x47a>
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_ADC_Init+0x4e0>)
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e001      	b.n	8000fd6 <HAL_ADC_Init+0x47e>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d108      	bne.n	8000ff6 <HAL_ADC_Init+0x49e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_ADC_Init+0x49e>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_ADC_Init+0x4a0>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d12d      	bne.n	8001058 <HAL_ADC_Init+0x500>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d021      	beq.n	8001046 <HAL_ADC_Init+0x4ee>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d118      	bne.n	8001040 <HAL_ADC_Init+0x4e8>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d112      	bne.n	8001040 <HAL_ADC_Init+0x4e8>
 800101a:	2301      	movs	r3, #1
 800101c:	e011      	b.n	8001042 <HAL_ADC_Init+0x4ea>
 800101e:	bf00      	nop
 8001020:	0800dd08 	.word	0x0800dd08
 8001024:	20000000 	.word	0x20000000
 8001028:	431bde83 	.word	0x431bde83
 800102c:	50000100 	.word	0x50000100
 8001030:	50000300 	.word	0x50000300
 8001034:	50000700 	.word	0x50000700
 8001038:	50000400 	.word	0x50000400
 800103c:	50000500 	.word	0x50000500
 8001040:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001042:	2b00      	cmp	r3, #0
 8001044:	d108      	bne.n	8001058 <HAL_ADC_Init+0x500>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	431a      	orrs	r2, r3
 8001054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001056:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7e5b      	ldrb	r3, [r3, #25]
 800105c:	035b      	lsls	r3, r3, #13
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001062:	2a01      	cmp	r2, #1
 8001064:	d002      	beq.n	800106c <HAL_ADC_Init+0x514>
 8001066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106a:	e000      	b.n	800106e <HAL_ADC_Init+0x516>
 800106c:	2200      	movs	r2, #0
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	4313      	orrs	r3, r2
 800107c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800107e:	4313      	orrs	r3, r2
 8001080:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d11b      	bne.n	80010c4 <HAL_ADC_Init+0x56c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e5b      	ldrb	r3, [r3, #25]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d109      	bne.n	80010a8 <HAL_ADC_Init+0x550>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	3b01      	subs	r3, #1
 800109a:	045a      	lsls	r2, r3, #17
 800109c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800109e:	4313      	orrs	r3, r2
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
 80010a6:	e00d      	b.n	80010c4 <HAL_ADC_Init+0x56c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80010b0:	f043 0220 	orr.w	r2, r3, #32
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f043 0201 	orr.w	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d02c      	beq.n	8001126 <HAL_ADC_Init+0x5ce>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a43      	ldr	r2, [pc, #268]	; (80011e0 <HAL_ADC_Init+0x688>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d004      	beq.n	80010e0 <HAL_ADC_Init+0x588>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <HAL_ADC_Init+0x68c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d11a      	bne.n	8001116 <HAL_ADC_Init+0x5be>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80010e8:	d012      	beq.n	8001110 <HAL_ADC_Init+0x5b8>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f2:	d00a      	beq.n	800110a <HAL_ADC_Init+0x5b2>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80010fc:	d002      	beq.n	8001104 <HAL_ADC_Init+0x5ac>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	e00a      	b.n	800111a <HAL_ADC_Init+0x5c2>
 8001104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001108:	e007      	b.n	800111a <HAL_ADC_Init+0x5c2>
 800110a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800110e:	e004      	b.n	800111a <HAL_ADC_Init+0x5c2>
 8001110:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001114:	e001      	b.n	800111a <HAL_ADC_Init+0x5c2>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800111e:	4313      	orrs	r3, r2
 8001120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001122:	4313      	orrs	r3, r2
 8001124:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b00      	cmp	r3, #0
 8001132:	d114      	bne.n	800115e <HAL_ADC_Init+0x606>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001142:	f023 0302 	bic.w	r3, r3, #2
 8001146:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7e1b      	ldrb	r3, [r3, #24]
 800114c:	039a      	lsls	r2, r3, #14
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4313      	orrs	r3, r2
 8001158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800115a:	4313      	orrs	r3, r2
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_ADC_Init+0x690>)
 8001166:	4013      	ands	r3, r2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800116e:	430b      	orrs	r3, r1
 8001170:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d10c      	bne.n	8001194 <HAL_ADC_Init+0x63c>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f023 010f 	bic.w	r1, r3, #15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
 8001192:	e007      	b.n	80011a4 <HAL_ADC_Init+0x64c>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 020f 	bic.w	r2, r2, #15
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
 80011ba:	e00a      	b.n	80011d2 <HAL_ADC_Init+0x67a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f023 0312 	bic.w	r3, r3, #18
 80011c4:	f043 0210 	orr.w	r2, r3, #16
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3768      	adds	r7, #104	; 0x68
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	50000400 	.word	0x50000400
 80011e4:	50000500 	.word	0x50000500
 80011e8:	fff0c007 	.word	0xfff0c007

080011ec <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001200:	d013      	beq.n	800122a <HAL_ADC_Start+0x3e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a8d      	ldr	r2, [pc, #564]	; (800143c <HAL_ADC_Start+0x250>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00e      	beq.n	800122a <HAL_ADC_Start+0x3e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a8b      	ldr	r2, [pc, #556]	; (8001440 <HAL_ADC_Start+0x254>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d009      	beq.n	800122a <HAL_ADC_Start+0x3e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <HAL_ADC_Start+0x258>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d004      	beq.n	800122a <HAL_ADC_Start+0x3e>
 8001220:	f240 41df 	movw	r1, #1247	; 0x4df
 8001224:	4888      	ldr	r0, [pc, #544]	; (8001448 <HAL_ADC_Start+0x25c>)
 8001226:	f7ff fa48 	bl	80006ba <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	f040 80f9 	bne.w	800142c <HAL_ADC_Start+0x240>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_Start+0x5c>
 8001244:	2302      	movs	r3, #2
 8001246:	e0f4      	b.n	8001432 <HAL_ADC_Start+0x246>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f001 fe69 	bl	8002f28 <ADC_Enable>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b00      	cmp	r3, #0
 800125e:	f040 80e0 	bne.w	8001422 <HAL_ADC_Start+0x236>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800127e:	d004      	beq.n	800128a <HAL_ADC_Start+0x9e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a6d      	ldr	r2, [pc, #436]	; (800143c <HAL_ADC_Start+0x250>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d106      	bne.n	8001298 <HAL_ADC_Start+0xac>
 800128a:	4b70      	ldr	r3, [pc, #448]	; (800144c <HAL_ADC_Start+0x260>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	2b00      	cmp	r3, #0
 8001294:	d010      	beq.n	80012b8 <HAL_ADC_Start+0xcc>
 8001296:	e005      	b.n	80012a4 <HAL_ADC_Start+0xb8>
 8001298:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <HAL_ADC_Start+0x264>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d009      	beq.n	80012b8 <HAL_ADC_Start+0xcc>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ac:	d004      	beq.n	80012b8 <HAL_ADC_Start+0xcc>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a63      	ldr	r2, [pc, #396]	; (8001440 <HAL_ADC_Start+0x254>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d115      	bne.n	80012e4 <HAL_ADC_Start+0xf8>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d036      	beq.n	8001340 <HAL_ADC_Start+0x154>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012e2:	e02d      	b.n	8001340 <HAL_ADC_Start+0x154>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f8:	d004      	beq.n	8001304 <HAL_ADC_Start+0x118>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_ADC_Start+0x250>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d10a      	bne.n	800131a <HAL_ADC_Start+0x12e>
 8001304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf14      	ite	ne
 8001312:	2301      	movne	r3, #1
 8001314:	2300      	moveq	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	e008      	b.n	800132c <HAL_ADC_Start+0x140>
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <HAL_ADC_Start+0x254>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Start+0x154>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134c:	d106      	bne.n	800135c <HAL_ADC_Start+0x170>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f023 0206 	bic.w	r2, r3, #6
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
 800135a:	e002      	b.n	8001362 <HAL_ADC_Start+0x176>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	221c      	movs	r2, #28
 8001370:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137a:	d004      	beq.n	8001386 <HAL_ADC_Start+0x19a>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_ADC_Start+0x250>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d106      	bne.n	8001394 <HAL_ADC_Start+0x1a8>
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_ADC_Start+0x260>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03e      	beq.n	8001410 <HAL_ADC_Start+0x224>
 8001392:	e005      	b.n	80013a0 <HAL_ADC_Start+0x1b4>
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_ADC_Start+0x264>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	2b00      	cmp	r3, #0
 800139e:	d037      	beq.n	8001410 <HAL_ADC_Start+0x224>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a8:	d004      	beq.n	80013b4 <HAL_ADC_Start+0x1c8>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_ADC_Start+0x250>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d106      	bne.n	80013c2 <HAL_ADC_Start+0x1d6>
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <HAL_ADC_Start+0x260>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d027      	beq.n	8001410 <HAL_ADC_Start+0x224>
 80013c0:	e005      	b.n	80013ce <HAL_ADC_Start+0x1e2>
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_ADC_Start+0x264>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d020      	beq.n	8001410 <HAL_ADC_Start+0x224>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d6:	d004      	beq.n	80013e2 <HAL_ADC_Start+0x1f6>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_ADC_Start+0x250>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d106      	bne.n	80013f0 <HAL_ADC_Start+0x204>
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_ADC_Start+0x260>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	2b09      	cmp	r3, #9
 80013ec:	d010      	beq.n	8001410 <HAL_ADC_Start+0x224>
 80013ee:	e005      	b.n	80013fc <HAL_ADC_Start+0x210>
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_ADC_Start+0x264>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	2b09      	cmp	r3, #9
 80013fa:	d009      	beq.n	8001410 <HAL_ADC_Start+0x224>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001404:	d004      	beq.n	8001410 <HAL_ADC_Start+0x224>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_ADC_Start+0x254>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d10f      	bne.n	8001430 <HAL_ADC_Start+0x244>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0204 	orr.w	r2, r2, #4
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	e006      	b.n	8001430 <HAL_ADC_Start+0x244>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800142a:	e001      	b.n	8001430 <HAL_ADC_Start+0x244>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800142c:	2302      	movs	r3, #2
 800142e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	50000100 	.word	0x50000100
 8001440:	50000400 	.word	0x50000400
 8001444:	50000500 	.word	0x50000500
 8001448:	0800dd08 	.word	0x0800dd08
 800144c:	50000300 	.word	0x50000300
 8001450:	50000700 	.word	0x50000700

08001454 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146a:	d013      	beq.n	8001494 <HAL_ADC_PollForConversion+0x40>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a81      	ldr	r2, [pc, #516]	; (8001678 <HAL_ADC_PollForConversion+0x224>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00e      	beq.n	8001494 <HAL_ADC_PollForConversion+0x40>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a80      	ldr	r2, [pc, #512]	; (800167c <HAL_ADC_PollForConversion+0x228>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d009      	beq.n	8001494 <HAL_ADC_PollForConversion+0x40>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a7e      	ldr	r2, [pc, #504]	; (8001680 <HAL_ADC_PollForConversion+0x22c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d004      	beq.n	8001494 <HAL_ADC_PollForConversion+0x40>
 800148a:	f240 6119 	movw	r1, #1561	; 0x619
 800148e:	487d      	ldr	r0, [pc, #500]	; (8001684 <HAL_ADC_PollForConversion+0x230>)
 8001490:	f7ff f913 	bl	80006ba <assert_failed>

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	2b08      	cmp	r3, #8
 800149a:	d102      	bne.n	80014a2 <HAL_ADC_PollForConversion+0x4e>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800149c:	2308      	movs	r3, #8
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e03a      	b.n	8001518 <HAL_ADC_PollForConversion+0xc4>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014aa:	d004      	beq.n	80014b6 <HAL_ADC_PollForConversion+0x62>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a71      	ldr	r2, [pc, #452]	; (8001678 <HAL_ADC_PollForConversion+0x224>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_PollForConversion+0x66>
 80014b6:	4b74      	ldr	r3, [pc, #464]	; (8001688 <HAL_ADC_PollForConversion+0x234>)
 80014b8:	e000      	b.n	80014bc <HAL_ADC_PollForConversion+0x68>
 80014ba:	4b74      	ldr	r3, [pc, #464]	; (800168c <HAL_ADC_PollForConversion+0x238>)
 80014bc:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d112      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x9c>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d11d      	bne.n	8001514 <HAL_ADC_PollForConversion+0xc0>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f043 0220 	orr.w	r2, r3, #32
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0bf      	b.n	8001670 <HAL_ADC_PollForConversion+0x21c>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <HAL_ADC_PollForConversion+0xc0>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0ad      	b.n	8001670 <HAL_ADC_PollForConversion+0x21c>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001514:	230c      	movs	r3, #12
 8001516:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001520:	d004      	beq.n	800152c <HAL_ADC_PollForConversion+0xd8>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_ADC_PollForConversion+0x224>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d106      	bne.n	800153a <HAL_ADC_PollForConversion+0xe6>
 800152c:	4b56      	ldr	r3, [pc, #344]	; (8001688 <HAL_ADC_PollForConversion+0x234>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	2b00      	cmp	r3, #0
 8001536:	d010      	beq.n	800155a <HAL_ADC_PollForConversion+0x106>
 8001538:	e005      	b.n	8001546 <HAL_ADC_PollForConversion+0xf2>
 800153a:	4b54      	ldr	r3, [pc, #336]	; (800168c <HAL_ADC_PollForConversion+0x238>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_ADC_PollForConversion+0x106>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154e:	d004      	beq.n	800155a <HAL_ADC_PollForConversion+0x106>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <HAL_ADC_PollForConversion+0x228>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d104      	bne.n	8001564 <HAL_ADC_PollForConversion+0x110>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	e00f      	b.n	8001584 <HAL_ADC_PollForConversion+0x130>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800156c:	d004      	beq.n	8001578 <HAL_ADC_PollForConversion+0x124>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a41      	ldr	r2, [pc, #260]	; (8001678 <HAL_ADC_PollForConversion+0x224>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d102      	bne.n	800157e <HAL_ADC_PollForConversion+0x12a>
 8001578:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800157c:	e000      	b.n	8001580 <HAL_ADC_PollForConversion+0x12c>
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_ADC_PollForConversion+0x228>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001584:	f7ff fadc 	bl	8000b40 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800158a:	e021      	b.n	80015d0 <HAL_ADC_PollForConversion+0x17c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001592:	d01d      	beq.n	80015d0 <HAL_ADC_PollForConversion+0x17c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_ADC_PollForConversion+0x156>
 800159a:	f7ff fad1 	bl	8000b40 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d212      	bcs.n	80015d0 <HAL_ADC_PollForConversion+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_PollForConversion+0x17c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e04f      	b.n	8001670 <HAL_ADC_PollForConversion+0x21c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0d6      	beq.n	800158c <HAL_ADC_PollForConversion+0x138>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d131      	bne.n	800165c <HAL_ADC_PollForConversion+0x208>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d12c      	bne.n	800165c <HAL_ADC_PollForConversion+0x208>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b08      	cmp	r3, #8
 800160e:	d125      	bne.n	800165c <HAL_ADC_PollForConversion+0x208>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d112      	bne.n	8001644 <HAL_ADC_PollForConversion+0x1f0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d112      	bne.n	800165c <HAL_ADC_PollForConversion+0x208>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
 8001642:	e00b      	b.n	800165c <HAL_ADC_PollForConversion+0x208>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f043 0220 	orr.w	r2, r3, #32
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <HAL_ADC_PollForConversion+0x21a>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	50000100 	.word	0x50000100
 800167c:	50000400 	.word	0x50000400
 8001680:	50000500 	.word	0x50000500
 8001684:	0800dd08 	.word	0x0800dd08
 8001688:	50000300 	.word	0x50000300
 800168c:	50000700 	.word	0x50000700

08001690 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a0:	d013      	beq.n	80016ca <HAL_ADC_GetValue+0x3a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <HAL_ADC_GetValue+0x48>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00e      	beq.n	80016ca <HAL_ADC_GetValue+0x3a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_ADC_GetValue+0x4c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d009      	beq.n	80016ca <HAL_ADC_GetValue+0x3a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_ADC_GetValue+0x50>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d004      	beq.n	80016ca <HAL_ADC_GetValue+0x3a>
 80016c0:	f640 3108 	movw	r1, #2824	; 0xb08
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <HAL_ADC_GetValue+0x54>)
 80016c6:	f7fe fff8 	bl	80006ba <assert_failed>

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	50000100 	.word	0x50000100
 80016dc:	50000400 	.word	0x50000400
 80016e0:	50000500 	.word	0x50000500
 80016e4:	0800dd08 	.word	0x0800dd08

080016e8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fe:	d013      	beq.n	8001728 <HAL_ADCEx_Calibration_Start+0x40>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a43      	ldr	r2, [pc, #268]	; (8001814 <HAL_ADCEx_Calibration_Start+0x12c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00e      	beq.n	8001728 <HAL_ADCEx_Calibration_Start+0x40>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a42      	ldr	r2, [pc, #264]	; (8001818 <HAL_ADCEx_Calibration_Start+0x130>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d009      	beq.n	8001728 <HAL_ADCEx_Calibration_Start+0x40>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a40      	ldr	r2, [pc, #256]	; (800181c <HAL_ADCEx_Calibration_Start+0x134>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d004      	beq.n	8001728 <HAL_ADCEx_Calibration_Start+0x40>
 800171e:	f640 510e 	movw	r1, #3342	; 0xd0e
 8001722:	483f      	ldr	r0, [pc, #252]	; (8001820 <HAL_ADCEx_Calibration_Start+0x138>)
 8001724:	f7fe ffc9 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_ADCEx_Calibration_Start+0x56>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d004      	beq.n	800173e <HAL_ADCEx_Calibration_Start+0x56>
 8001734:	f640 510f 	movw	r1, #3343	; 0xd0f
 8001738:	4839      	ldr	r0, [pc, #228]	; (8001820 <HAL_ADCEx_Calibration_Start+0x138>)
 800173a:	f7fe ffbe 	bl	80006ba <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_ADCEx_Calibration_Start+0x64>
 8001748:	2302      	movs	r3, #2
 800174a:	e05f      	b.n	800180c <HAL_ADCEx_Calibration_Start+0x124>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f001 fc4b 	bl	8002ff0 <ADC_Disable>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d14e      	bne.n	8001802 <HAL_ADCEx_Calibration_Start+0x11a>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001778:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <HAL_ADCEx_Calibration_Start+0xa8>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800178e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800179e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80017a0:	f7ff f9ce 	bl	8000b40 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017a6:	e01c      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0xfa>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017a8:	f7ff f9ca 	bl	8000b40 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b0a      	cmp	r3, #10
 80017b4:	d915      	bls.n	80017e2 <HAL_ADCEx_Calibration_Start+0xfa>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017c4:	d10d      	bne.n	80017e2 <HAL_ADCEx_Calibration_Start+0xfa>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f023 0312 	bic.w	r3, r3, #18
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e014      	b.n	800180c <HAL_ADCEx_Calibration_Start+0x124>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017f0:	d0da      	beq.n	80017a8 <HAL_ADCEx_Calibration_Start+0xc0>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	50000100 	.word	0x50000100
 8001818:	50000400 	.word	0x50000400
 800181c:	50000500 	.word	0x50000500
 8001820:	0800dd08 	.word	0x0800dd08

08001824 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b09a      	sub	sp, #104	; 0x68
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001840:	d013      	beq.n	800186a <HAL_ADC_ConfigChannel+0x46>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6b      	ldr	r2, [pc, #428]	; (80019f4 <HAL_ADC_ConfigChannel+0x1d0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00e      	beq.n	800186a <HAL_ADC_ConfigChannel+0x46>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <HAL_ADC_ConfigChannel+0x1d4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d009      	beq.n	800186a <HAL_ADC_ConfigChannel+0x46>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a68      	ldr	r2, [pc, #416]	; (80019fc <HAL_ADC_ConfigChannel+0x1d8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d004      	beq.n	800186a <HAL_ADC_ConfigChannel+0x46>
 8001860:	f241 51b7 	movw	r1, #5559	; 0x15b7
 8001864:	4866      	ldr	r0, [pc, #408]	; (8001a00 <HAL_ADC_ConfigChannel+0x1dc>)
 8001866:	f7fe ff28 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d040      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d03c      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d038      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b04      	cmp	r3, #4
 8001888:	d034      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b05      	cmp	r3, #5
 8001890:	d030      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b06      	cmp	r3, #6
 8001898:	d02c      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b07      	cmp	r3, #7
 80018a0:	d028      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d024      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	d020      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d01c      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b0b      	cmp	r3, #11
 80018c0:	d018      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d014      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b0d      	cmp	r3, #13
 80018d0:	d010      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b0e      	cmp	r3, #14
 80018d8:	d00c      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	d008      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d004      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xd0>
 80018ea:	f241 51b8 	movw	r1, #5560	; 0x15b8
 80018ee:	4844      	ldr	r0, [pc, #272]	; (8001a00 <HAL_ADC_ConfigChannel+0x1dc>)
 80018f0:	f7fe fee3 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d01c      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d018      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d014      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d010      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d00c      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b06      	cmp	r3, #6
 800192a:	d008      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b07      	cmp	r3, #7
 8001932:	d004      	beq.n	800193e <HAL_ADC_ConfigChannel+0x11a>
 8001934:	f241 51b9 	movw	r1, #5561	; 0x15b9
 8001938:	4831      	ldr	r0, [pc, #196]	; (8001a00 <HAL_ADC_ConfigChannel+0x1dc>)
 800193a:	f7fe febe 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <HAL_ADC_ConfigChannel+0x134>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d004      	beq.n	8001958 <HAL_ADC_ConfigChannel+0x134>
 800194e:	f241 51ba 	movw	r1, #5562	; 0x15ba
 8001952:	482b      	ldr	r0, [pc, #172]	; (8001a00 <HAL_ADC_ConfigChannel+0x1dc>)
 8001954:	f7fe feb1 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d014      	beq.n	800198a <HAL_ADC_ConfigChannel+0x166>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d010      	beq.n	800198a <HAL_ADC_ConfigChannel+0x166>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d00c      	beq.n	800198a <HAL_ADC_ConfigChannel+0x166>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d008      	beq.n	800198a <HAL_ADC_ConfigChannel+0x166>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d004      	beq.n	800198a <HAL_ADC_ConfigChannel+0x166>
 8001980:	f241 51bb 	movw	r1, #5563	; 0x15bb
 8001984:	481e      	ldr	r0, [pc, #120]	; (8001a00 <HAL_ADC_ConfigChannel+0x1dc>)
 8001986:	f7fe fe98 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0318 	and.w	r3, r3, #24
 8001994:	2b00      	cmp	r3, #0
 8001996:	d104      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x17e>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a0:	d330      	bcc.n	8001a04 <HAL_ADC_ConfigChannel+0x1e0>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0318 	and.w	r3, r3, #24
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d104      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x196>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b8:	d324      	bcc.n	8001a04 <HAL_ADC_ConfigChannel+0x1e0>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0318 	and.w	r3, r3, #24
 80019c4:	2b10      	cmp	r3, #16
 80019c6:	d103      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x1ac>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2bff      	cmp	r3, #255	; 0xff
 80019ce:	d919      	bls.n	8001a04 <HAL_ADC_ConfigChannel+0x1e0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0318 	and.w	r3, r3, #24
 80019da:	2b18      	cmp	r3, #24
 80019dc:	d103      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x1c2>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2b3f      	cmp	r3, #63	; 0x3f
 80019e4:	d90e      	bls.n	8001a04 <HAL_ADC_ConfigChannel+0x1e0>
 80019e6:	f241 51bc 	movw	r1, #5564	; 0x15bc
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <HAL_ADC_ConfigChannel+0x1dc>)
 80019ec:	f7fe fe65 	bl	80006ba <assert_failed>
 80019f0:	e008      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x1e0>
 80019f2:	bf00      	nop
 80019f4:	50000100 	.word	0x50000100
 80019f8:	50000400 	.word	0x50000400
 80019fc:	50000500 	.word	0x50000500
 8001a00:	0800dd08 	.word	0x0800dd08
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d063      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x2b0>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	f000 809c 	beq.w	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	f000 8097 	beq.w	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	f000 8092 	beq.w	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	f000 808d 	beq.w	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	f000 8088 	beq.w	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	f000 8083 	beq.w	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b07      	cmp	r3, #7
 8001a4e:	d07e      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d07a      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b09      	cmp	r3, #9
 8001a5e:	d076      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b0a      	cmp	r3, #10
 8001a66:	d072      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b0b      	cmp	r3, #11
 8001a6e:	d06e      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d06a      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b0d      	cmp	r3, #13
 8001a7e:	d066      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b0e      	cmp	r3, #14
 8001a86:	d062      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d05e      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	d05a      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b11      	cmp	r3, #17
 8001a9e:	d056      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d052      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d04e      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d04a      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b11      	cmp	r3, #17
 8001abe:	d046      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b11      	cmp	r3, #17
 8001ac6:	d042      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001ac8:	f241 51c4 	movw	r1, #5572	; 0x15c4
 8001acc:	489b      	ldr	r0, [pc, #620]	; (8001d3c <HAL_ADC_ConfigChannel+0x518>)
 8001ace:	f7fe fdf4 	bl	80006ba <assert_failed>
 8001ad2:	e03c      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d038      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d034      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d030      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d02c      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d028      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d024      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	d020      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d01c      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	d018      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b0a      	cmp	r3, #10
 8001b22:	d014      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b0b      	cmp	r3, #11
 8001b2a:	d010      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d00c      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b0d      	cmp	r3, #13
 8001b3a:	d008      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b0e      	cmp	r3, #14
 8001b42:	d004      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x32a>
 8001b44:	f241 51c8 	movw	r1, #5576	; 0x15c8
 8001b48:	487c      	ldr	r0, [pc, #496]	; (8001d3c <HAL_ADC_ConfigChannel+0x518>)
 8001b4a:	f7fe fdb6 	bl	80006ba <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x338>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e2cb      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x8d0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 82af 	bne.w	80020d2 <HAL_ADC_ConfigChannel+0x8ae>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d81c      	bhi.n	8001bb6 <HAL_ADC_ConfigChannel+0x392>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	461a      	mov	r2, r3
 8001b90:	231f      	movs	r3, #31
 8001b92:	4093      	lsls	r3, r2
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb4:	e063      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b09      	cmp	r3, #9
 8001bbc:	d81e      	bhi.n	8001bfc <HAL_ADC_ConfigChannel+0x3d8>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4019      	ands	r1, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	3b1e      	subs	r3, #30
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bfa:	e040      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b0e      	cmp	r3, #14
 8001c02:	d81e      	bhi.n	8001c42 <HAL_ADC_ConfigChannel+0x41e>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	3b3c      	subs	r3, #60	; 0x3c
 8001c18:	221f      	movs	r2, #31
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4019      	ands	r1, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	3b3c      	subs	r3, #60	; 0x3c
 8001c34:	fa00 f203 	lsl.w	r2, r0, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001c40:	e01d      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	3b5a      	subs	r3, #90	; 0x5a
 8001c56:	221f      	movs	r2, #31
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	3b5a      	subs	r3, #90	; 0x5a
 8001c72:	fa00 f203 	lsl.w	r2, r0, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 80e6 	bne.w	8001e5a <HAL_ADC_ConfigChannel+0x636>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	d91c      	bls.n	8001cd0 <HAL_ADC_ConfigChannel+0x4ac>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6999      	ldr	r1, [r3, #24]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b1e      	subs	r3, #30
 8001ca8:	2207      	movs	r2, #7
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4019      	ands	r1, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6898      	ldr	r0, [r3, #8]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b1e      	subs	r3, #30
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	619a      	str	r2, [r3, #24]
 8001cce:	e019      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x4e0>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6959      	ldr	r1, [r3, #20]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4019      	ands	r1, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6898      	ldr	r0, [r3, #8]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d850      	bhi.n	8001dc8 <HAL_ADC_ConfigChannel+0x5a4>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_ADC_ConfigChannel+0x508>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001d41 	.word	0x08001d41
 8001d30:	08001d63 	.word	0x08001d63
 8001d34:	08001d85 	.word	0x08001d85
 8001d38:	08001da7 	.word	0x08001da7
 8001d3c:	0800dd08 	.word	0x0800dd08
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d46:	4b9a      	ldr	r3, [pc, #616]	; (8001fb0 <HAL_ADC_ConfigChannel+0x78c>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	0691      	lsls	r1, r2, #26
 8001d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d52:	430a      	orrs	r2, r1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d5e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d60:	e07e      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d68:	4b91      	ldr	r3, [pc, #580]	; (8001fb0 <HAL_ADC_ConfigChannel+0x78c>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	0691      	lsls	r1, r2, #26
 8001d72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d74:	430a      	orrs	r2, r1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d80:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d82:	e06d      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x63c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_ADC_ConfigChannel+0x78c>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	0691      	lsls	r1, r2, #26
 8001d94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d96:	430a      	orrs	r2, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001da2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001da4:	e05c      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dac:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <HAL_ADC_ConfigChannel+0x78c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	0691      	lsls	r1, r2, #26
 8001db6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001db8:	430a      	orrs	r2, r1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dc4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dc6:	e04b      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x63c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d107      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	069b      	lsls	r3, r3, #26
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e0e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x610>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e32:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	069b      	lsls	r3, r3, #26
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10a      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x63a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e56:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e58:	e001      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x63a>
    }

  }
 8001e5a:	bf00      	nop
 8001e5c:	e000      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x63c>
      break;
 8001e5e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x65c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x65c>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x65e>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8130 	bne.w	80020e8 <HAL_ADC_ConfigChannel+0x8c4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d00f      	beq.n	8001eb0 <HAL_ADC_ConfigChannel+0x68c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001eae:	e049      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x720>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	d91c      	bls.n	8001f0c <HAL_ADC_ConfigChannel+0x6e8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6999      	ldr	r1, [r3, #24]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b1b      	subs	r3, #27
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	4019      	ands	r1, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6898      	ldr	r0, [r3, #8]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1b      	subs	r3, #27
 8001efe:	fa00 f203 	lsl.w	r2, r0, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	e01b      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x720>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6959      	ldr	r1, [r3, #20]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	2207      	movs	r2, #7
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4019      	ands	r1, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6898      	ldr	r0, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4c:	d004      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x734>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <HAL_ADC_ConfigChannel+0x790>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x738>
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_ADC_ConfigChannel+0x794>)
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x73a>
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_ADC_ConfigChannel+0x798>)
 8001f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x750>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f78:	2b11      	cmp	r3, #17
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x764>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	f040 80ab 	bne.w	80020e8 <HAL_ADC_ConfigChannel+0x8c4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 80a4 	bne.w	80020e8 <HAL_ADC_ConfigChannel+0x8c4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x79c>
 8001faa:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_ADC_ConfigChannel+0x790>)
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e022      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x7d2>
 8001fb0:	83fff000 	.word	0x83fff000
 8001fb4:	50000100 	.word	0x50000100
 8001fb8:	50000300 	.word	0x50000300
 8001fbc:	50000700 	.word	0x50000700
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4d      	ldr	r2, [pc, #308]	; (80020fc <HAL_ADC_ConfigChannel+0x8d8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d103      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x7ae>
 8001fca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e011      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x7d2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_ADC_ConfigChannel+0x8dc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d102      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x7be>
 8001fdc:	4b49      	ldr	r3, [pc, #292]	; (8002104 <HAL_ADC_ConfigChannel+0x8e0>)
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e009      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x7d2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a47      	ldr	r2, [pc, #284]	; (8002104 <HAL_ADC_ConfigChannel+0x8e0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d102      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x7ce>
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_ADC_ConfigChannel+0x8dc>)
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e001      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x7d2>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x7f2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x7f2>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_ADC_ConfigChannel+0x7f4>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d150      	bne.n	80020be <HAL_ADC_ConfigChannel+0x89a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800201c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x820>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_ADC_ConfigChannel+0x81a>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x81a>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_ADC_ConfigChannel+0x81c>
 800203e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002040:	2b00      	cmp	r3, #0
 8002042:	d13c      	bne.n	80020be <HAL_ADC_ConfigChannel+0x89a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b10      	cmp	r3, #16
 800204a:	d11d      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x864>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002054:	d118      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x864>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800205e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002060:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_ADC_ConfigChannel+0x8e4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a29      	ldr	r2, [pc, #164]	; (800210c <HAL_ADC_ConfigChannel+0x8e8>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9a      	lsrs	r2, r3, #18
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002078:	e002      	b.n	8002080 <HAL_ADC_ConfigChannel+0x85c>
          {
            wait_loop_index--;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	3b01      	subs	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <HAL_ADC_ConfigChannel+0x856>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002086:	e02e      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x8c2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b11      	cmp	r3, #17
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x884>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002098:	d106      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x884>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800209a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80020a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020a6:	e01e      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x8c2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b12      	cmp	r3, #18
 80020ae:	d11a      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x8c2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80020b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020bc:	e013      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x8c2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f043 0220 	orr.w	r2, r3, #32
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020d0:	e00a      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x8c4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020e4:	e000      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x8c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020e6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3768      	adds	r7, #104	; 0x68
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	50000100 	.word	0x50000100
 8002100:	50000400 	.word	0x50000400
 8002104:	50000500 	.word	0x50000500
 8002108:	20000000 	.word	0x20000000
 800210c:	431bde83 	.word	0x431bde83

08002110 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09c      	sub	sp, #112	; 0x70
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002130:	d013      	beq.n	800215a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a85      	ldr	r2, [pc, #532]	; (800234c <HAL_ADCEx_InjectedConfigChannel+0x23c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00e      	beq.n	800215a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a83      	ldr	r2, [pc, #524]	; (8002350 <HAL_ADCEx_InjectedConfigChannel+0x240>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a82      	ldr	r2, [pc, #520]	; (8002354 <HAL_ADCEx_InjectedConfigChannel+0x244>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8002150:	f241 718d 	movw	r1, #6029	; 0x178d
 8002154:	4880      	ldr	r0, [pc, #512]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8002156:	f7fe fab0 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d01c      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d018      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d014      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b04      	cmp	r3, #4
 8002180:	d010      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d00c      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d008      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b07      	cmp	r3, #7
 8002198:	d004      	beq.n	80021a4 <HAL_ADCEx_InjectedConfigChannel+0x94>
 800219a:	f241 718e 	movw	r1, #6030	; 0x178e
 800219e:	486e      	ldr	r0, [pc, #440]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80021a0:	f7fe fa8b 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_ADCEx_InjectedConfigChannel+0xae>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d004      	beq.n	80021be <HAL_ADCEx_InjectedConfigChannel+0xae>
 80021b4:	f241 718f 	movw	r1, #6031	; 0x178f
 80021b8:	4867      	ldr	r0, [pc, #412]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80021ba:	f7fe fa7e 	bl	80006ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	7f5b      	ldrb	r3, [r3, #29]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_ADCEx_InjectedConfigChannel+0xc8>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7f5b      	ldrb	r3, [r3, #29]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d004      	beq.n	80021d8 <HAL_ADCEx_InjectedConfigChannel+0xc8>
 80021ce:	f241 7190 	movw	r1, #6032	; 0x1790
 80021d2:	4861      	ldr	r0, [pc, #388]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80021d4:	f7fe fa71 	bl	80006ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7f9b      	ldrb	r3, [r3, #30]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	7f9b      	ldrb	r3, [r3, #30]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d004      	beq.n	80021f2 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 80021e8:	f241 7191 	movw	r1, #6033	; 0x1791
 80021ec:	485a      	ldr	r0, [pc, #360]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80021ee:	f7fe fa64 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d00c      	beq.n	800221c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2b80      	cmp	r3, #128	; 0x80
 8002208:	d008      	beq.n	800221c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2bc0      	cmp	r3, #192	; 0xc0
 8002210:	d004      	beq.n	800221c <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8002212:	f241 7192 	movw	r1, #6034	; 0x1792
 8002216:	4850      	ldr	r0, [pc, #320]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8002218:	f7fe fa4f 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d055      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	2b34      	cmp	r3, #52	; 0x34
 800222a:	d051      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	2b10      	cmp	r3, #16
 8002232:	d04d      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	2b38      	cmp	r3, #56	; 0x38
 800223a:	d049      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	2b18      	cmp	r3, #24
 8002242:	d045      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a44      	ldr	r2, [pc, #272]	; (800235c <HAL_ADCEx_InjectedConfigChannel+0x24c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d040      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2b18      	cmp	r3, #24
 8002254:	d03c      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	2b38      	cmp	r3, #56	; 0x38
 800225c:	d038      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	2b0c      	cmp	r3, #12
 8002264:	d034      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d030      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d02c      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	2b20      	cmp	r3, #32
 800227c:	d028      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	2b08      	cmp	r3, #8
 8002284:	d024      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	2b2c      	cmp	r3, #44	; 0x2c
 800228c:	d020      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2b30      	cmp	r3, #48	; 0x30
 8002294:	d01c      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	2b14      	cmp	r3, #20
 800229c:	d018      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	2b1c      	cmp	r3, #28
 80022a4:	d014      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b24      	cmp	r3, #36	; 0x24
 80022ac:	d010      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	2b28      	cmp	r3, #40	; 0x28
 80022b4:	d00c      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2b3c      	cmp	r3, #60	; 0x3c
 80022bc:	d008      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d004      	beq.n	80022d0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 80022c6:	f241 7193 	movw	r1, #6035	; 0x1793
 80022ca:	4823      	ldr	r0, [pc, #140]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80022cc:	f7fe f9f5 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d014      	beq.n	8002302 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d010      	beq.n	8002302 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d00c      	beq.n	8002302 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d008      	beq.n	8002302 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d004      	beq.n	8002302 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 80022f8:	f241 7194 	movw	r1, #6036	; 0x1794
 80022fc:	4816      	ldr	r0, [pc, #88]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 80022fe:	f7fe f9dc 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0318 	and.w	r3, r3, #24
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_ADCEx_InjectedConfigChannel+0x20a>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002318:	d332      	bcc.n	8002380 <HAL_ADCEx_InjectedConfigChannel+0x270>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0318 	and.w	r3, r3, #24
 8002324:	2b08      	cmp	r3, #8
 8002326:	d104      	bne.n	8002332 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	d326      	bcc.n	8002380 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0318 	and.w	r3, r3, #24
 800233c:	2b10      	cmp	r3, #16
 800233e:	d10f      	bne.n	8002360 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	2bff      	cmp	r3, #255	; 0xff
 8002346:	d91b      	bls.n	8002380 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8002348:	e00a      	b.n	8002360 <HAL_ADCEx_InjectedConfigChannel+0x250>
 800234a:	bf00      	nop
 800234c:	50000100 	.word	0x50000100
 8002350:	50000400 	.word	0x50000400
 8002354:	50000500 	.word	0x50000500
 8002358:	0800dd08 	.word	0x0800dd08
 800235c:	00010008 	.word	0x00010008
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0318 	and.w	r3, r3, #24
 800236a:	2b18      	cmp	r3, #24
 800236c:	d103      	bne.n	8002376 <HAL_ADCEx_InjectedConfigChannel+0x266>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b3f      	cmp	r3, #63	; 0x3f
 8002374:	d904      	bls.n	8002380 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8002376:	f241 7195 	movw	r1, #6037	; 0x1795
 800237a:	4889      	ldr	r0, [pc, #548]	; (80025a0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 800237c:	f7fe f99d 	bl	80006ba <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02e      	beq.n	80023e6 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  {
    assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d010      	beq.n	80023b2 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d00c      	beq.n	80023b2 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d008      	beq.n	80023b2 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d004      	beq.n	80023b2 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 80023a8:	f241 7199 	movw	r1, #6041	; 0x1799
 80023ac:	487c      	ldr	r0, [pc, #496]	; (80025a0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 80023ae:	f7fe f984 	bl	80006ba <assert_failed>
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d904      	bls.n	80023cc <HAL_ADCEx_InjectedConfigChannel+0x2bc>
 80023c2:	f241 719a 	movw	r1, #6042	; 0x179a
 80023c6:	4876      	ldr	r0, [pc, #472]	; (80025a0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 80023c8:	f7fe f977 	bl	80006ba <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	7f1b      	ldrb	r3, [r3, #28]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	7f1b      	ldrb	r3, [r3, #28]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d004      	beq.n	80023e6 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 80023dc:	f241 719b 	movw	r1, #6043	; 0x179b
 80023e0:	486f      	ldr	r0, [pc, #444]	; (80025a0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 80023e2:	f7fe f96a 	bl	80006ba <assert_failed>
  }
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d063      	beq.n	80024b6 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
  {
    assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f000 809c 	beq.w	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	f000 8097 	beq.w	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b03      	cmp	r3, #3
 8002408:	f000 8092 	beq.w	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	f000 808d 	beq.w	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b05      	cmp	r3, #5
 800241c:	f000 8088 	beq.w	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b06      	cmp	r3, #6
 8002426:	f000 8083 	beq.w	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b07      	cmp	r3, #7
 8002430:	d07e      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b08      	cmp	r3, #8
 8002438:	d07a      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b09      	cmp	r3, #9
 8002440:	d076      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b0a      	cmp	r3, #10
 8002448:	d072      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b0b      	cmp	r3, #11
 8002450:	d06e      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d06a      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b0d      	cmp	r3, #13
 8002460:	d066      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b0e      	cmp	r3, #14
 8002468:	d062      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	d05e      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d05a      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b11      	cmp	r3, #17
 8002480:	d056      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b12      	cmp	r3, #18
 8002488:	d052      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	d04e      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b11      	cmp	r3, #17
 8002498:	d04a      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d046      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b11      	cmp	r3, #17
 80024a8:	d042      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024aa:	f241 71a3 	movw	r1, #6051	; 0x17a3
 80024ae:	483c      	ldr	r0, [pc, #240]	; (80025a0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 80024b0:	f7fe f903 	bl	80006ba <assert_failed>
 80024b4:	e03c      	b.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d038      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d034      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d030      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d02c      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d028      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d024      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	d020      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d01c      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b09      	cmp	r3, #9
 80024fc:	d018      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b0a      	cmp	r3, #10
 8002504:	d014      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b0b      	cmp	r3, #11
 800250c:	d010      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d00c      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b0d      	cmp	r3, #13
 800251c:	d008      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b0e      	cmp	r3, #14
 8002524:	d004      	beq.n	8002530 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002526:	f241 71a7 	movw	r1, #6055	; 0x17a7
 800252a:	481d      	ldr	r0, [pc, #116]	; (80025a0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 800252c:	f7fe f8c5 	bl	80006ba <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_ADCEx_InjectedConfigChannel+0x42e>
 800253a:	2302      	movs	r3, #2
 800253c:	e36a      	b.n	8002c14 <HAL_ADCEx_InjectedConfigChannel+0xb04>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_ADCEx_InjectedConfigChannel+0x446>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002552:	2b01      	cmp	r3, #1
 8002554:	d158      	bne.n	8002608 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d14a      	bne.n	80025f4 <HAL_ADCEx_InjectedConfigChannel+0x4e4>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d032      	beq.n	80025cc <HAL_ADCEx_InjectedConfigChannel+0x4bc>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	021a      	lsls	r2, r3, #8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	490c      	ldr	r1, [pc, #48]	; (80025a4 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8002572:	428b      	cmp	r3, r1
 8002574:	d004      	beq.n	8002580 <HAL_ADCEx_InjectedConfigChannel+0x470>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	490b      	ldr	r1, [pc, #44]	; (80025a8 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 800257c:	428b      	cmp	r3, r1
 800257e:	d11b      	bne.n	80025b8 <HAL_ADCEx_InjectedConfigChannel+0x4a8>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d015      	beq.n	80025b4 <HAL_ADCEx_InjectedConfigChannel+0x4a4>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	2b14      	cmp	r3, #20
 800258e:	d00f      	beq.n	80025b0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2b1c      	cmp	r3, #28
 8002596:	d009      	beq.n	80025ac <HAL_ADCEx_InjectedConfigChannel+0x49c>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	e00e      	b.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 800259e:	bf00      	nop
 80025a0:	0800dd08 	.word	0x0800dd08
 80025a4:	50000400 	.word	0x50000400
 80025a8:	50000500 	.word	0x50000500
 80025ac:	2310      	movs	r3, #16
 80025ae:	e005      	b.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 80025b0:	231c      	movs	r3, #28
 80025b2:	e003      	b.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 80025b4:	2334      	movs	r3, #52	; 0x34
 80025b6:	e001      	b.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	431a      	orrs	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	4313      	orrs	r3, r2
 80025c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025c6:	4313      	orrs	r3, r2
 80025c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ca:	e005      	b.n	80025d8 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025d4:	4313      	orrs	r3, r2
 80025d6:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025de:	4b87      	ldr	r3, [pc, #540]	; (80027fc <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025e8:	430b      	orrs	r3, r1
 80025ea:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025f0:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80025f2:	e07f      	b.n	80026f4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002606:	e075      	b.n	80026f4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d140      	bne.n	8002692 <HAL_ADCEx_InjectedConfigChannel+0x582>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d02d      	beq.n	8002682 <HAL_ADCEx_InjectedConfigChannel+0x572>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	1e59      	subs	r1, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4872      	ldr	r0, [pc, #456]	; (8002800 <HAL_ADCEx_InjectedConfigChannel+0x6f0>)
 8002636:	4283      	cmp	r3, r0
 8002638:	d004      	beq.n	8002644 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4871      	ldr	r0, [pc, #452]	; (8002804 <HAL_ADCEx_InjectedConfigChannel+0x6f4>)
 8002640:	4283      	cmp	r3, r0
 8002642:	d114      	bne.n	800266e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d00e      	beq.n	800266a <HAL_ADCEx_InjectedConfigChannel+0x55a>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	2b14      	cmp	r3, #20
 8002652:	d008      	beq.n	8002666 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	2b1c      	cmp	r3, #28
 800265a:	d002      	beq.n	8002662 <HAL_ADCEx_InjectedConfigChannel+0x552>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	e007      	b.n	8002672 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8002662:	2310      	movs	r3, #16
 8002664:	e005      	b.n	8002672 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8002666:	231c      	movs	r3, #28
 8002668:	e003      	b.n	8002672 <HAL_ADCEx_InjectedConfigChannel+0x562>
 800266a:	2334      	movs	r3, #52	; 0x34
 800266c:	e001      	b.n	8002672 <HAL_ADCEx_InjectedConfigChannel+0x562>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4319      	orrs	r1, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	430b      	orrs	r3, r1
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	649a      	str	r2, [r3, #72]	; 0x48
 8002680:	e007      	b.n	8002692 <HAL_ADCEx_InjectedConfigChannel+0x582>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	3b01      	subs	r3, #1
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	3302      	adds	r3, #2
 80026a4:	221f      	movs	r2, #31
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4019      	ands	r1, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	3302      	adds	r3, #2
 80026c0:	fa00 f303 	lsl.w	r3, r0, r3
 80026c4:	ea41 0203 	orr.w	r2, r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026e4:	4b45      	ldr	r3, [pc, #276]	; (80027fc <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d12d      	bne.n	800275e <HAL_ADCEx_InjectedConfigChannel+0x64e>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7f5b      	ldrb	r3, [r3, #29]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d110      	bne.n	800272c <HAL_ADCEx_InjectedConfigChannel+0x61c>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	7f9b      	ldrb	r3, [r3, #30]
 8002718:	055a      	lsls	r2, r3, #21
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7f1b      	ldrb	r3, [r3, #28]
 800271e:	051b      	lsls	r3, r3, #20
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	e018      	b.n	800275e <HAL_ADCEx_InjectedConfigChannel+0x64e>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	7f9b      	ldrb	r3, [r3, #30]
 800273a:	055a      	lsls	r2, r3, #21
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7f1b      	ldrb	r3, [r3, #28]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <HAL_ADCEx_InjectedConfigChannel+0x64e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 8110 	bne.w	800298e <HAL_ADCEx_InjectedConfigChannel+0x87e>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10c      	bne.n	8002790 <HAL_ADCEx_InjectedConfigChannel+0x680>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	7f5b      	ldrb	r3, [r3, #29]
 8002784:	065a      	lsls	r2, r3, #25
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	e014      	b.n	80027ba <HAL_ADCEx_InjectedConfigChannel+0x6aa>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800279e:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	7f5b      	ldrb	r3, [r3, #29]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d108      	bne.n	80027ba <HAL_ADCEx_InjectedConfigChannel+0x6aa>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b09      	cmp	r3, #9
 80027c0:	d922      	bls.n	8002808 <HAL_ADCEx_InjectedConfigChannel+0x6f8>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6999      	ldr	r1, [r3, #24]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	3b1e      	subs	r3, #30
 80027d4:	2207      	movs	r2, #7
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	4019      	ands	r1, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6898      	ldr	r0, [r3, #8]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	3b1e      	subs	r3, #30
 80027ee:	fa00 f203 	lsl.w	r2, r0, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	619a      	str	r2, [r3, #24]
 80027fa:	e01f      	b.n	800283c <HAL_ADCEx_InjectedConfigChannel+0x72c>
 80027fc:	82082000 	.word	0x82082000
 8002800:	50000400 	.word	0x50000400
 8002804:	50000500 	.word	0x50000500
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6959      	ldr	r1, [r3, #20]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	2207      	movs	r2, #7
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	4019      	ands	r1, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6898      	ldr	r0, [r3, #8]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	fa00 f203 	lsl.w	r2, r0, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	3b01      	subs	r3, #1
 800285a:	2b03      	cmp	r3, #3
 800285c:	d84e      	bhi.n	80028fc <HAL_ADCEx_InjectedConfigChannel+0x7ec>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <HAL_ADCEx_InjectedConfigChannel+0x754>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002875 	.word	0x08002875
 8002868:	08002897 	.word	0x08002897
 800286c:	080028b9 	.word	0x080028b9
 8002870:	080028db 	.word	0x080028db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800287a:	4b9a      	ldr	r3, [pc, #616]	; (8002ae4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 800287c:	4013      	ands	r3, r2
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	0691      	lsls	r1, r2, #26
 8002884:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002886:	430a      	orrs	r2, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002892:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002894:	e07e      	b.n	8002994 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800289c:	4b91      	ldr	r3, [pc, #580]	; (8002ae4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 800289e:	4013      	ands	r3, r2
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	0691      	lsls	r1, r2, #26
 80028a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028a8:	430a      	orrs	r2, r1
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80028b6:	e06d      	b.n	8002994 <HAL_ADCEx_InjectedConfigChannel+0x884>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028be:	4b89      	ldr	r3, [pc, #548]	; (8002ae4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	0691      	lsls	r1, r2, #26
 80028c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028ca:	430a      	orrs	r2, r1
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80028d8:	e05c      	b.n	8002994 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028e0:	4b80      	ldr	r3, [pc, #512]	; (8002ae4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	0691      	lsls	r1, r2, #26
 80028ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028ec:	430a      	orrs	r2, r1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80028fa:	e04b      	b.n	8002994 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_ADCEx_InjectedConfigChannel+0x810>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_ADCEx_InjectedConfigChannel+0x834>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002942:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	429a      	cmp	r2, r3
 8002956:	d107      	bne.n	8002968 <HAL_ADCEx_InjectedConfigChannel+0x858>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002966:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	069b      	lsls	r3, r3, #26
 8002978:	429a      	cmp	r2, r3
 800297a:	d10a      	bne.n	8002992 <HAL_ADCEx_InjectedConfigChannel+0x882>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800298a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800298c:	e001      	b.n	8002992 <HAL_ADCEx_InjectedConfigChannel+0x882>
    }
    
  }
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <HAL_ADCEx_InjectedConfigChannel+0x884>
      break;
 8002992:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8126 	bne.w	8002c08 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d00f      	beq.n	80029e4 <HAL_ADCEx_InjectedConfigChannel+0x8d4>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	400a      	ands	r2, r1
 80029de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80029e2:	e049      	b.n	8002a78 <HAL_ADCEx_InjectedConfigChannel+0x968>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	409a      	lsls	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b09      	cmp	r3, #9
 8002a04:	d91c      	bls.n	8002a40 <HAL_ADCEx_InjectedConfigChannel+0x930>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6999      	ldr	r1, [r3, #24]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	3b1b      	subs	r3, #27
 8002a18:	2207      	movs	r2, #7
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4019      	ands	r1, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6898      	ldr	r0, [r3, #8]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b1b      	subs	r3, #27
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	619a      	str	r2, [r3, #24]
 8002a3e:	e01b      	b.n	8002a78 <HAL_ADCEx_InjectedConfigChannel+0x968>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6959      	ldr	r1, [r3, #20]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	2207      	movs	r2, #7
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6898      	ldr	r0, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a80:	d004      	beq.n	8002a8c <HAL_ADCEx_InjectedConfigChannel+0x97c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADCEx_InjectedConfigChannel+0x980>
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_ADCEx_InjectedConfigChannel+0x9dc>)
 8002a8e:	e000      	b.n	8002a92 <HAL_ADCEx_InjectedConfigChannel+0x982>
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_ADCEx_InjectedConfigChannel+0x9e0>)
 8002a92:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADCEx_InjectedConfigChannel+0x998>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002aac:	2b11      	cmp	r3, #17
 8002aae:	d105      	bne.n	8002abc <HAL_ADCEx_InjectedConfigChannel+0x9ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ac0:	2b12      	cmp	r3, #18
 8002ac2:	f040 80a1 	bne.w	8002c08 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 809a 	bne.w	8002c08 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADCEx_InjectedConfigChannel+0x9e4>
 8002ade:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e022      	b.n	8002b2a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8002ae4:	83fff000 	.word	0x83fff000
 8002ae8:	50000100 	.word	0x50000100
 8002aec:	50000300 	.word	0x50000300
 8002af0:	50000700 	.word	0x50000700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_ADCEx_InjectedConfigChannel+0xb0c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d103      	bne.n	8002b06 <HAL_ADCEx_InjectedConfigChannel+0x9f6>
 8002afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	e011      	b.n	8002b2a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a45      	ldr	r2, [pc, #276]	; (8002c20 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d102      	bne.n	8002b16 <HAL_ADCEx_InjectedConfigChannel+0xa06>
 8002b10:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e009      	b.n	8002b2a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d102      	bne.n	8002b26 <HAL_ADCEx_InjectedConfigChannel+0xa16>
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	e001      	b.n	8002b2a <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d108      	bne.n	8002b4a <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_ADCEx_InjectedConfigChannel+0xa3c>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d150      	bne.n	8002bf2 <HAL_ADCEx_InjectedConfigChannel+0xae2>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b50:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_ADCEx_InjectedConfigChannel+0xa68>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0xa64>
 8002b72:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d13c      	bne.n	8002bf2 <HAL_ADCEx_InjectedConfigChannel+0xae2>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d11d      	bne.n	8002bbc <HAL_ADCEx_InjectedConfigChannel+0xaac>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b88:	d118      	bne.n	8002bbc <HAL_ADCEx_InjectedConfigChannel+0xaac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b94:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b96:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_ADCEx_InjectedConfigChannel+0xb18>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <HAL_ADCEx_InjectedConfigChannel+0xb1c>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	0c9a      	lsrs	r2, r3, #18
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002bac:	e002      	b.n	8002bb4 <HAL_ADCEx_InjectedConfigChannel+0xaa4>
          {
            wait_loop_index--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_ADCEx_InjectedConfigChannel+0xa9e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bba:	e024      	b.n	8002c06 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b11      	cmp	r3, #17
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADCEx_InjectedConfigChannel+0xacc>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bcc:	d106      	bne.n	8002bdc <HAL_ADCEx_InjectedConfigChannel+0xacc>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd8:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bda:	e014      	b.n	8002c06 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b12      	cmp	r3, #18
 8002be2:	d110      	bne.n	8002c06 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bee:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bf0:	e009      	b.n	8002c06 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002c04:	e000      	b.n	8002c08 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c06:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3770      	adds	r7, #112	; 0x70
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	50000100 	.word	0x50000100
 8002c20:	50000400 	.word	0x50000400
 8002c24:	50000500 	.word	0x50000500
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b098      	sub	sp, #96	; 0x60
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c48:	d009      	beq.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a8c      	ldr	r2, [pc, #560]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8002c54:	f641 3194 	movw	r1, #7060	; 0x1b94
 8002c58:	488a      	ldr	r0, [pc, #552]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8002c5a:	f7fd fd2e 	bl	80006ba <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d020      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d01c      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d018      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d014      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d010      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b07      	cmp	r3, #7
 8002c94:	d008      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	d004      	beq.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002c9e:	f641 3195 	movw	r1, #7061	; 0x1b95
 8002ca2:	4878      	ldr	r0, [pc, #480]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8002ca4:	f7fd fd09 	bl	80006ba <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d052      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc0:	d009      	beq.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cca:	d004      	beq.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002ccc:	f641 3198 	movw	r1, #7064	; 0x1b98
 8002cd0:	486c      	ldr	r0, [pc, #432]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8002cd2:	f7fd fcf2 	bl	80006ba <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d03b      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce6:	d036      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf0:	d031      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cfa:	d02c      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d04:	d027      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d0e:	d022      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d18:	d01d      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d22:	d018      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2c:	d013      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002d36:	d00e      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002d40:	d009      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002d4a:	d004      	beq.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002d4c:	f641 3199 	movw	r1, #7065	; 0x1b99
 8002d50:	484c      	ldr	r0, [pc, #304]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8002d52:	f7fd fcb2 	bl	80006ba <assert_failed>
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5e:	d102      	bne.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002d60:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	e01a      	b.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a47      	ldr	r2, [pc, #284]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d103      	bne.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x148>
 8002d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	e011      	b.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d102      	bne.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8002d82:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	e009      	b.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d102      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	e001      	b.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  {
    /* Return function status */
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0bc      	b.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0b5      	b.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 8099 	bne.w	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f040 8092 	bne.w	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de2:	d004      	beq.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x260>)
 8002df0:	e000      	b.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 8002df4:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04c      	beq.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x268>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e10:	035b      	lsls	r3, r3, #13
 8002e12:	430b      	orrs	r3, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e18:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d108      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x20c>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d168      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x22e>
 8002e5c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d157      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e6a:	f023 030f 	bic.w	r3, r3, #15
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	6892      	ldr	r2, [r2, #8]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7c:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7e:	e048      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
 8002e80:	50000400 	.word	0x50000400
 8002e84:	0800dd08 	.word	0x0800dd08
 8002e88:	50000100 	.word	0x50000100
 8002e8c:	50000500 	.word	0x50000500
 8002e90:	50000300 	.word	0x50000300
 8002e94:	50000700 	.word	0x50000700
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea2:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d108      	bne.n	8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x296>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d123      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x2b8>
 8002ee6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d112      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ef4:	f023 030f 	bic.w	r3, r3, #15
 8002ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002efa:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002efc:	e009      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f10:	e000      	b.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x2e4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f12:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f20:	4618      	mov	r0, r3
 8002f22:	3760      	adds	r7, #96	; 0x60
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <ADC_Enable+0x2c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <ADC_Enable+0x2c>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <ADC_Enable+0x2e>
 8002f54:	2300      	movs	r3, #0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d143      	bne.n	8002fe2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <ADC_Enable+0xc4>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e02f      	b.n	8002fe4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f94:	f7fd fdd4 	bl	8000b40 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f9a:	e01b      	b.n	8002fd4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f9c:	f7fd fdd0 	bl	8000b40 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d914      	bls.n	8002fd4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d00d      	beq.n	8002fd4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0210 	orr.w	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e007      	b.n	8002fe4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d1dc      	bne.n	8002f9c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	8000003f 	.word	0x8000003f

08002ff0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d108      	bne.n	800301c <ADC_Disable+0x2c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <ADC_Disable+0x2c>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <ADC_Disable+0x2e>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d047      	beq.n	80030b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030d 	and.w	r3, r3, #13
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10f      	bne.n	8003050 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0202 	orr.w	r2, r2, #2
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2203      	movs	r2, #3
 8003046:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003048:	f7fd fd7a 	bl	8000b40 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800304e:	e029      	b.n	80030a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0210 	orr.w	r2, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e023      	b.n	80030b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800306c:	f7fd fd68 	bl	8000b40 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d914      	bls.n	80030a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d10d      	bne.n	80030a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d0dc      	beq.n	800306c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	60d3      	str	r3, [r2, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d301      	bcc.n	800322e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322a:	2301      	movs	r3, #1
 800322c:	e00f      	b.n	800324e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <SysTick_Config+0x40>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003236:	210f      	movs	r1, #15
 8003238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800323c:	f7ff ff8e 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <SysTick_Config+0x40>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SysTick_Config+0x40>)
 8003248:	2207      	movs	r2, #7
 800324a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	e000e010 	.word	0xe000e010

0800325c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b07      	cmp	r3, #7
 8003268:	d00f      	beq.n	800328a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d00c      	beq.n	800328a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d009      	beq.n	800328a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d006      	beq.n	800328a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d003      	beq.n	800328a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003282:	21ac      	movs	r1, #172	; 0xac
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003286:	f7fd fa18 	bl	80006ba <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff16 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	0800dd44 	.word	0x0800dd44

0800329c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d903      	bls.n	80032bc <HAL_NVIC_SetPriority+0x20>
 80032b4:	21c4      	movs	r1, #196	; 0xc4
 80032b6:	480e      	ldr	r0, [pc, #56]	; (80032f0 <HAL_NVIC_SetPriority+0x54>)
 80032b8:	f7fd f9ff 	bl	80006ba <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	d903      	bls.n	80032ca <HAL_NVIC_SetPriority+0x2e>
 80032c2:	21c5      	movs	r1, #197	; 0xc5
 80032c4:	480a      	ldr	r0, [pc, #40]	; (80032f0 <HAL_NVIC_SetPriority+0x54>)
 80032c6:	f7fd f9f8 	bl	80006ba <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ca:	f7ff ff1b 	bl	8003104 <__NVIC_GetPriorityGrouping>
 80032ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	6978      	ldr	r0, [r7, #20]
 80032d6:	f7ff ff6b 	bl	80031b0 <NVIC_EncodePriority>
 80032da:	4602      	mov	r2, r0
 80032dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff3a 	bl	800315c <__NVIC_SetPriority>
}
 80032e8:	bf00      	nop
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	0800dd44 	.word	0x0800dd44

080032f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	da03      	bge.n	800330e <HAL_NVIC_EnableIRQ+0x1a>
 8003306:	21d8      	movs	r1, #216	; 0xd8
 8003308:	4805      	ldr	r0, [pc, #20]	; (8003320 <HAL_NVIC_EnableIRQ+0x2c>)
 800330a:	f7fd f9d6 	bl	80006ba <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ff04 	bl	8003120 <__NVIC_EnableIRQ>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0800dd44 	.word	0x0800dd44

08003324 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff73 	bl	8003218 <SysTick_Config>
 8003332:	4603      	mov	r3, r0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003350:	d017      	beq.n	8003382 <HAL_GPIO_Init+0x46>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a36      	ldr	r2, [pc, #216]	; (8003430 <HAL_GPIO_Init+0xf4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_GPIO_Init+0x46>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <HAL_GPIO_Init+0xf8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00f      	beq.n	8003382 <HAL_GPIO_Init+0x46>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_GPIO_Init+0xfc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <HAL_GPIO_Init+0x46>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a33      	ldr	r2, [pc, #204]	; (800343c <HAL_GPIO_Init+0x100>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x46>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a32      	ldr	r2, [pc, #200]	; (8003440 <HAL_GPIO_Init+0x104>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x46>
 800337a:	21b2      	movs	r1, #178	; 0xb2
 800337c:	4831      	ldr	r0, [pc, #196]	; (8003444 <HAL_GPIO_Init+0x108>)
 800337e:	f7fd f99c 	bl	80006ba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_GPIO_Init+0x5c>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x64>
 8003398:	21b3      	movs	r1, #179	; 0xb3
 800339a:	482a      	ldr	r0, [pc, #168]	; (8003444 <HAL_GPIO_Init+0x108>)
 800339c:	f7fd f98d 	bl	80006ba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8200 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	f000 81fb 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b11      	cmp	r3, #17
 80033ba:	f000 81f6 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f000 81f1 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	f000 81ec 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80033da:	f000 81e6 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80033e6:	f000 81e0 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80033f2:	f000 81da 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80033fe:	f000 81d4 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800340a:	f000 81ce 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003416:	f000 81c8 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b03      	cmp	r3, #3
 8003420:	f000 81c3 	beq.w	80037aa <HAL_GPIO_Init+0x46e>
 8003424:	21b4      	movs	r1, #180	; 0xb4
 8003426:	4807      	ldr	r0, [pc, #28]	; (8003444 <HAL_GPIO_Init+0x108>)
 8003428:	f7fd f947 	bl	80006ba <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342c:	e1bd      	b.n	80037aa <HAL_GPIO_Init+0x46e>
 800342e:	bf00      	nop
 8003430:	48000400 	.word	0x48000400
 8003434:	48000800 	.word	0x48000800
 8003438:	48000c00 	.word	0x48000c00
 800343c:	48001000 	.word	0x48001000
 8003440:	48001400 	.word	0x48001400
 8003444:	0800dd80 	.word	0x0800dd80
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	2101      	movs	r1, #1
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	4013      	ands	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 81a2 	beq.w	80037a4 <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d005      	beq.n	8003478 <HAL_GPIO_Init+0x13c>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d140      	bne.n	80034fa <HAL_GPIO_Init+0x1be>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_GPIO_Init+0x15c>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d007      	beq.n	8003498 <HAL_GPIO_Init+0x15c>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x15c>
 8003490:	21c3      	movs	r1, #195	; 0xc3
 8003492:	488a      	ldr	r0, [pc, #552]	; (80036bc <HAL_GPIO_Init+0x380>)
 8003494:	f7fd f911 	bl	80006ba <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ce:	2201      	movs	r2, #1
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f003 0201 	and.w	r2, r3, #1
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b03      	cmp	r3, #3
 8003504:	d027      	beq.n	8003556 <HAL_GPIO_Init+0x21a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_GPIO_Init+0x1ea>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d007      	beq.n	8003526 <HAL_GPIO_Init+0x1ea>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x1ea>
 800351e:	21d4      	movs	r1, #212	; 0xd4
 8003520:	4866      	ldr	r0, [pc, #408]	; (80036bc <HAL_GPIO_Init+0x380>)
 8003522:	f7fd f8ca 	bl	80006ba <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d14f      	bne.n	8003602 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003568:	d017      	beq.n	800359a <HAL_GPIO_Init+0x25e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a54      	ldr	r2, [pc, #336]	; (80036c0 <HAL_GPIO_Init+0x384>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_GPIO_Init+0x25e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a53      	ldr	r2, [pc, #332]	; (80036c4 <HAL_GPIO_Init+0x388>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <HAL_GPIO_Init+0x25e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_GPIO_Init+0x38c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <HAL_GPIO_Init+0x25e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a51      	ldr	r2, [pc, #324]	; (80036cc <HAL_GPIO_Init+0x390>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x25e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a50      	ldr	r2, [pc, #320]	; (80036d0 <HAL_GPIO_Init+0x394>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x25e>
 8003592:	21e2      	movs	r1, #226	; 0xe2
 8003594:	4849      	ldr	r0, [pc, #292]	; (80036bc <HAL_GPIO_Init+0x380>)
 8003596:	f7fd f890 	bl	80006ba <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d90b      	bls.n	80035ba <HAL_GPIO_Init+0x27e>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b0e      	cmp	r3, #14
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x27e>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x27e>
 80035b2:	21e3      	movs	r1, #227	; 0xe3
 80035b4:	4841      	ldr	r0, [pc, #260]	; (80036bc <HAL_GPIO_Init+0x380>)
 80035b6:	f7fd f880 	bl	80006ba <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	08da      	lsrs	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3208      	adds	r2, #8
 80035c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	220f      	movs	r2, #15
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	6939      	ldr	r1, [r7, #16]
 80035fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0203 	and.w	r2, r3, #3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80b0 	beq.w	80037a4 <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_GPIO_Init+0x398>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	4a22      	ldr	r2, [pc, #136]	; (80036d4 <HAL_GPIO_Init+0x398>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6193      	str	r3, [r2, #24]
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_GPIO_Init+0x398>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800365c:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <HAL_GPIO_Init+0x39c>)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003686:	d029      	beq.n	80036dc <HAL_GPIO_Init+0x3a0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <HAL_GPIO_Init+0x384>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_GPIO_Init+0x37c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <HAL_GPIO_Init+0x388>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00d      	beq.n	80036b4 <HAL_GPIO_Init+0x378>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <HAL_GPIO_Init+0x38c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <HAL_GPIO_Init+0x374>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_GPIO_Init+0x390>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_GPIO_Init+0x370>
 80036a8:	2304      	movs	r3, #4
 80036aa:	e018      	b.n	80036de <HAL_GPIO_Init+0x3a2>
 80036ac:	2305      	movs	r3, #5
 80036ae:	e016      	b.n	80036de <HAL_GPIO_Init+0x3a2>
 80036b0:	2303      	movs	r3, #3
 80036b2:	e014      	b.n	80036de <HAL_GPIO_Init+0x3a2>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e012      	b.n	80036de <HAL_GPIO_Init+0x3a2>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e010      	b.n	80036de <HAL_GPIO_Init+0x3a2>
 80036bc:	0800dd80 	.word	0x0800dd80
 80036c0:	48000400 	.word	0x48000400
 80036c4:	48000800 	.word	0x48000800
 80036c8:	48000c00 	.word	0x48000c00
 80036cc:	48001000 	.word	0x48001000
 80036d0:	48001400 	.word	0x48001400
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010000 	.word	0x40010000
 80036dc:	2300      	movs	r3, #0
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	f002 0203 	and.w	r2, r2, #3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4093      	lsls	r3, r2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ee:	4935      	ldr	r1, [pc, #212]	; (80037c4 <HAL_GPIO_Init+0x488>)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036fc:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003720:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003726:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800374a:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_GPIO_Init+0x48c>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f ae47 	bne.w	8003448 <HAL_GPIO_Init+0x10c>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40010000 	.word	0x40010000
 80037c8:	40010400 	.word	0x40010400

080037cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_GPIO_WritePin+0x20>
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_GPIO_WritePin+0x2a>
 80037ec:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <HAL_GPIO_WritePin+0x5c>)
 80037f2:	f7fc ff62 	bl	80006ba <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80037f6:	787b      	ldrb	r3, [r7, #1]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_GPIO_WritePin+0x40>
 80037fc:	787b      	ldrb	r3, [r7, #1]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d004      	beq.n	800380c <HAL_GPIO_WritePin+0x40>
 8003802:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003806:	4808      	ldr	r0, [pc, #32]	; (8003828 <HAL_GPIO_WritePin+0x5c>)
 8003808:	f7fc ff57 	bl	80006ba <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003818:	e002      	b.n	8003820 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	0800dd80 	.word	0x0800dd80

0800382c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0ff      	b.n	8003a3e <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a81      	ldr	r2, [pc, #516]	; (8003a48 <HAL_I2C_Init+0x21c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_I2C_Init+0x30>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a7f      	ldr	r2, [pc, #508]	; (8003a4c <HAL_I2C_Init+0x220>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_I2C_Init+0x30>
 8003852:	f240 2113 	movw	r1, #531	; 0x213
 8003856:	487e      	ldr	r0, [pc, #504]	; (8003a50 <HAL_I2C_Init+0x224>)
 8003858:	f7fc ff2f 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d304      	bcc.n	8003870 <HAL_I2C_Init+0x44>
 8003866:	f44f 7105 	mov.w	r1, #532	; 0x214
 800386a:	4879      	ldr	r0, [pc, #484]	; (8003a50 <HAL_I2C_Init+0x224>)
 800386c:	f7fc ff25 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d008      	beq.n	800388a <HAL_I2C_Init+0x5e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d004      	beq.n	800388a <HAL_I2C_Init+0x5e>
 8003880:	f240 2115 	movw	r1, #533	; 0x215
 8003884:	4872      	ldr	r0, [pc, #456]	; (8003a50 <HAL_I2C_Init+0x224>)
 8003886:	f7fc ff18 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_I2C_Init+0x7a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389a:	d004      	beq.n	80038a6 <HAL_I2C_Init+0x7a>
 800389c:	f240 2116 	movw	r1, #534	; 0x216
 80038a0:	486b      	ldr	r0, [pc, #428]	; (8003a50 <HAL_I2C_Init+0x224>)
 80038a2:	f7fc ff0a 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	2bff      	cmp	r3, #255	; 0xff
 80038ac:	d904      	bls.n	80038b8 <HAL_I2C_Init+0x8c>
 80038ae:	f240 2117 	movw	r1, #535	; 0x217
 80038b2:	4867      	ldr	r0, [pc, #412]	; (8003a50 <HAL_I2C_Init+0x224>)
 80038b4:	f7fc ff01 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d01c      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d018      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d014      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d010      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d00c      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b06      	cmp	r3, #6
 80038ee:	d008      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	d004      	beq.n	8003902 <HAL_I2C_Init+0xd6>
 80038f8:	f44f 7106 	mov.w	r1, #536	; 0x218
 80038fc:	4854      	ldr	r0, [pc, #336]	; (8003a50 <HAL_I2C_Init+0x224>)
 80038fe:	f7fc fedc 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_I2C_Init+0xf2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003912:	d004      	beq.n	800391e <HAL_I2C_Init+0xf2>
 8003914:	f240 2119 	movw	r1, #537	; 0x219
 8003918:	484d      	ldr	r0, [pc, #308]	; (8003a50 <HAL_I2C_Init+0x224>)
 800391a:	f7fc fece 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_I2C_Init+0x10e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392e:	d004      	beq.n	800393a <HAL_I2C_Init+0x10e>
 8003930:	f240 211a 	movw	r1, #538	; 0x21a
 8003934:	4846      	ldr	r0, [pc, #280]	; (8003a50 <HAL_I2C_Init+0x224>)
 8003936:	f7fc fec0 	bl	80006ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fc fdd2 	bl	80004f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	e006      	b.n	80039b0 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d104      	bne.n	80039c2 <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69d9      	ldr	r1, [r3, #28]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40005400 	.word	0x40005400
 8003a4c:	40005800 	.word	0x40005800
 8003a50:	0800ddbc 	.word	0x0800ddbc

08003a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2d      	ldr	r2, [pc, #180]	; (8003b18 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d008      	beq.n	8003a7a <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2b      	ldr	r2, [pc, #172]	; (8003b1c <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <HAL_I2CEx_ConfigAnalogFilter+0x26>
 8003a72:	2164      	movs	r1, #100	; 0x64
 8003a74:	482a      	ldr	r0, [pc, #168]	; (8003b20 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 8003a76:	f7fc fe20 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a86:	d003      	beq.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8003a88:	2165      	movs	r1, #101	; 0x65
 8003a8a:	4825      	ldr	r0, [pc, #148]	; (8003b20 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 8003a8c:	f7fc fe15 	bl	80006ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d138      	bne.n	8003b0e <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2CEx_ConfigAnalogFilter+0x56>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e032      	b.n	8003b10 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2224      	movs	r2, #36	; 0x24
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40005400 	.word	0x40005400
 8003b1c:	40005800 	.word	0x40005800
 8003b20:	0800ddf4 	.word	0x0800ddf4

08003b24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d008      	beq.n	8003b4a <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2a      	ldr	r2, [pc, #168]	; (8003be8 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8003b42:	2192      	movs	r1, #146	; 0x92
 8003b44:	4829      	ldr	r0, [pc, #164]	; (8003bec <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8003b46:	f7fc fdb8 	bl	80006ba <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d903      	bls.n	8003b58 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8003b50:	2193      	movs	r1, #147	; 0x93
 8003b52:	4826      	ldr	r0, [pc, #152]	; (8003bec <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8003b54:	f7fc fdb1 	bl	80006ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d139      	bne.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e033      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40005400 	.word	0x40005400
 8003be8:	40005800 	.word	0x40005800
 8003bec:	0800ddf4 	.word	0x0800ddf4

08003bf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	b08b      	sub	sp, #44	; 0x2c
 8003bf4:	af06      	add	r7, sp, #24
 8003bf6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0d9      	b.n	8003db6 <HAL_PCD_Init+0x1c6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6e      	ldr	r2, [pc, #440]	; (8003dc0 <HAL_PCD_Init+0x1d0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <HAL_PCD_Init+0x24>
 8003c0c:	2185      	movs	r1, #133	; 0x85
 8003c0e:	486d      	ldr	r0, [pc, #436]	; (8003dc4 <HAL_PCD_Init+0x1d4>)
 8003c10:	f7fc fd53 	bl	80006ba <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f009 fd5f 	bl	800d6ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2203      	movs	r2, #3
 8003c32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f005 fd2f 	bl	800969e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	e04c      	b.n	8003ce0 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	3301      	adds	r3, #1
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	7bfa      	ldrb	r2, [r7, #15]
 8003c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	b298      	uxth	r0, r3
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	3336      	adds	r3, #54	; 0x36
 8003c84:	4602      	mov	r2, r0
 8003c86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	3303      	adds	r3, #3
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	3338      	adds	r3, #56	; 0x38
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	333c      	adds	r3, #60	; 0x3c
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cc6:	7bfa      	ldrb	r2, [r7, #15]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3340      	adds	r3, #64	; 0x40
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3ad      	bcc.n	8003c46 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	e044      	b.n	8003d7a <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	440b      	add	r3, r1
 8003d2a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d48:	7bfa      	ldrb	r2, [r7, #15]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	3301      	adds	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d3b5      	bcc.n	8003cf0 <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	603b      	str	r3, [r7, #0]
 8003d8a:	687e      	ldr	r6, [r7, #4]
 8003d8c:	466d      	mov	r5, sp
 8003d8e:	f106 0410 	add.w	r4, r6, #16
 8003d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	602b      	str	r3, [r5, #0]
 8003d9a:	1d33      	adds	r3, r6, #4
 8003d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9e:	6838      	ldr	r0, [r7, #0]
 8003da0:	f005 fc98 	bl	80096d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40005c00 	.word	0x40005c00
 8003dc4:	0800de30 	.word	0x0800de30

08003dc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_PCD_Start+0x16>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e016      	b.n	8003e0c <HAL_PCD_Start+0x44>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f005 fc40 	bl	8009670 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003df0:	2101      	movs	r1, #1
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f009 ff18 	bl	800dc28 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f007 fe55 	bl	800baac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f007 fe4e 	bl	800bac2 <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	d102      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 faf6 	bl	8004424 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f007 fe40 	bl	800bac2 <USB_ReadInterrupts>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4c:	d112      	bne.n	8003e74 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	b292      	uxth	r2, r2
 8003e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f009 fce1 	bl	800d82e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8c7 	bl	8004002 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f007 fe22 	bl	800bac2 <USB_ReadInterrupts>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e88:	d10b      	bne.n	8003ea2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e9c:	b292      	uxth	r2, r2
 8003e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f007 fe0b 	bl	800bac2 <USB_ReadInterrupts>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f007 fdf4 	bl	800bac2 <USB_ReadInterrupts>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d126      	bne.n	8003f34 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0204 	bic.w	r2, r2, #4
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0208 	bic.w	r2, r2, #8
 8003f10:	b292      	uxth	r2, r2
 8003f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f009 fcc2 	bl	800d8a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f007 fdc2 	bl	800bac2 <USB_ReadInterrupts>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d126      	bne.n	8003f98 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0208 	orr.w	r2, r2, #8
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f74:	b292      	uxth	r2, r2
 8003f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0204 	orr.w	r2, r2, #4
 8003f8c:	b292      	uxth	r2, r2
 8003f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f009 fc6a 	bl	800d86c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f007 fd90 	bl	800bac2 <USB_ReadInterrupts>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fac:	d10e      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fc0:	b292      	uxth	r2, r2
 8003fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f009 fc23 	bl	800d812 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f007 fd76 	bl	800bac2 <USB_ReadInterrupts>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe0:	d10b      	bne.n	8003ffa <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_PCD_SetAddress+0x1a>
 8004018:	2302      	movs	r3, #2
 800401a:	e013      	b.n	8004044 <HAL_PCD_SetAddress+0x42>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f007 fd25 	bl	800ba84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	70fb      	strb	r3, [r7, #3]
 800405e:	460b      	mov	r3, r1
 8004060:	803b      	strh	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800406a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da0e      	bge.n	8004090 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	705a      	strb	r2, [r3, #1]
 800408e:	e00e      	b.n	80040ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ba:	883a      	ldrh	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	78ba      	ldrb	r2, [r7, #2]
 80040c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040d8:	78bb      	ldrb	r3, [r7, #2]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d102      	bne.n	80040e4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_PCD_EP_Open+0xa6>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e00e      	b.n	8004110 <HAL_PCD_EP_Open+0xc4>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	f005 fb09 	bl	8009718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800410e:	7afb      	ldrb	r3, [r7, #11]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004128:	2b00      	cmp	r3, #0
 800412a:	da0e      	bge.n	800414a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	705a      	strb	r2, [r3, #1]
 8004148:	e00e      	b.n	8004168 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	f003 0207 	and.w	r2, r3, #7
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_PCD_EP_Close+0x6a>
 800417e:	2302      	movs	r3, #2
 8004180:	e00e      	b.n	80041a0 <HAL_PCD_EP_Close+0x88>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	4618      	mov	r0, r3
 8004192:	f005 fe55 	bl	8009e40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	460b      	mov	r3, r1
 80041b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	f003 0207 	and.w	r2, r3, #7
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041f4:	7afb      	ldrb	r3, [r7, #11]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	4618      	mov	r0, r3
 8004206:	f006 f808 	bl	800a21a <USB_EPStartXfer>
 800420a:	e005      	b.n	8004218 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	4618      	mov	r0, r3
 8004214:	f006 f801 	bl	800a21a <USB_EPStartXfer>
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 0207 	and.w	r2, r3, #7
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004244:	681b      	ldr	r3, [r3, #0]
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	460b      	mov	r3, r1
 8004260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2201      	movs	r2, #1
 800429c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6979      	ldr	r1, [r7, #20]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f005 ffad 	bl	800a21a <USB_EPStartXfer>
 80042c0:	e005      	b.n	80042ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6979      	ldr	r1, [r7, #20]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f005 ffa6 	bl	800a21a <USB_EPStartXfer>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 0207 	and.w	r2, r3, #7
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d901      	bls.n	80042f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e03e      	b.n	8004374 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	da0e      	bge.n	800431c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	705a      	strb	r2, [r3, #1]
 800431a:	e00c      	b.n	8004336 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_PCD_EP_SetStall+0x7e>
 8004352:	2302      	movs	r3, #2
 8004354:	e00e      	b.n	8004374 <HAL_PCD_EP_SetStall+0x9c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	4618      	mov	r0, r3
 8004366:	f007 fa8e 	bl	800b886 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d901      	bls.n	800439a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e040      	b.n	800441c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0e      	bge.n	80043c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	705a      	strb	r2, [r3, #1]
 80043be:	e00e      	b.n	80043de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 0207 	and.w	r2, r3, #7
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_PCD_EP_ClrStall+0x82>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e00e      	b.n	800441c <HAL_PCD_EP_ClrStall+0xa0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	4618      	mov	r0, r3
 800440e:	f007 fa8b 	bl	800b928 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b096      	sub	sp, #88	; 0x58
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800442c:	e3a9      	b.n	8004b82 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004436:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800443a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004448:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800444c:	2b00      	cmp	r3, #0
 800444e:	f040 8164 	bne.w	800471a <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004452:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d152      	bne.n	8004504 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	81fb      	strh	r3, [r7, #14]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	89fb      	ldrh	r3, [r7, #14]
 8004476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3328      	adds	r3, #40	; 0x28
 8004486:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004490:	b29b      	uxth	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4413      	add	r3, r2
 800449c:	3302      	adds	r3, #2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	441a      	add	r2, r3
 80044be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044c2:	2100      	movs	r1, #0
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f009 f98a 	bl	800d7de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8355 	beq.w	8004b82 <PCD_EP_ISR_Handler+0x75e>
 80044d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f040 8350 	bne.w	8004b82 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b292      	uxth	r2, r2
 80044f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004502:	e33e      	b.n	8004b82 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800450a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004516:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800451a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451e:	2b00      	cmp	r3, #0
 8004520:	d034      	beq.n	800458c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	3306      	adds	r3, #6
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800454a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004560:	b29b      	uxth	r3, r3
 8004562:	f007 fb04 	bl	800bb6e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29a      	uxth	r2, r3
 800456e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004572:	4013      	ands	r3, r2
 8004574:	823b      	strh	r3, [r7, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	8a3a      	ldrh	r2, [r7, #16]
 800457c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004580:	b292      	uxth	r2, r2
 8004582:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f009 f8fd 	bl	800d784 <HAL_PCD_SetupStageCallback>
 800458a:	e2fa      	b.n	8004b82 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800458c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004590:	2b00      	cmp	r3, #0
 8004592:	f280 82f6 	bge.w	8004b82 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29a      	uxth	r2, r3
 800459e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80045a2:	4013      	ands	r3, r2
 80045a4:	83fb      	strh	r3, [r7, #30]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	8bfa      	ldrh	r2, [r7, #30]
 80045ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045b0:	b292      	uxth	r2, r2
 80045b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045bc:	b29b      	uxth	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	3306      	adds	r3, #6
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d019      	beq.n	800461c <PCD_EP_ISR_Handler+0x1f8>
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f6:	6959      	ldr	r1, [r3, #20]
 80045f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80045fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004600:	b29b      	uxth	r3, r3
 8004602:	f007 fab4 	bl	800bb6e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	441a      	add	r2, r3
 8004610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004612:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004614:	2100      	movs	r1, #0
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f009 f8c6 	bl	800d7a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 82aa 	bne.w	8004b82 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	4413      	add	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d112      	bne.n	800467c <PCD_EP_ISR_Handler+0x258>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004660:	b29a      	uxth	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004674:	b29a      	uxth	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e02f      	b.n	80046dc <PCD_EP_ISR_Handler+0x2b8>
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b3e      	cmp	r3, #62	; 0x3e
 8004682:	d813      	bhi.n	80046ac <PCD_EP_ISR_Handler+0x288>
 8004684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	647b      	str	r3, [r7, #68]	; 0x44
 800468c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <PCD_EP_ISR_Handler+0x27a>
 8004698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469a:	3301      	adds	r3, #1
 800469c:	647b      	str	r3, [r7, #68]	; 0x44
 800469e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	e017      	b.n	80046dc <PCD_EP_ISR_Handler+0x2b8>
 80046ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <PCD_EP_ISR_Handler+0x2a2>
 80046c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c2:	3b01      	subs	r3, #1
 80046c4:	647b      	str	r3, [r7, #68]	; 0x44
 80046c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	029b      	lsls	r3, r3, #10
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	827b      	strh	r3, [r7, #18]
 80046ee:	8a7b      	ldrh	r3, [r7, #18]
 80046f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046f4:	827b      	strh	r3, [r7, #18]
 80046f6:	8a7b      	ldrh	r3, [r7, #18]
 80046f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046fc:	827b      	strh	r3, [r7, #18]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	8a7b      	ldrh	r3, [r7, #18]
 8004704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	b29b      	uxth	r3, r3
 8004716:	8013      	strh	r3, [r2, #0]
 8004718:	e233      	b.n	8004b82 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800472e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004732:	2b00      	cmp	r3, #0
 8004734:	f280 80fc 	bge.w	8004930 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29a      	uxth	r2, r3
 800474a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800474e:	4013      	ands	r3, r2
 8004750:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004766:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800476a:	b292      	uxth	r2, r2
 800476c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800476e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004786:	7b1b      	ldrb	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d125      	bne.n	80047d8 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004794:	b29b      	uxth	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	3306      	adds	r3, #6
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80047b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8092 	beq.w	80048e6 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c8:	6959      	ldr	r1, [r3, #20]
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	88da      	ldrh	r2, [r3, #6]
 80047ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047d2:	f007 f9cc 	bl	800bb6e <USB_ReadPMA>
 80047d6:	e086      	b.n	80048e6 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047da:	78db      	ldrb	r3, [r3, #3]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d10a      	bne.n	80047f6 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80047e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047e4:	461a      	mov	r2, r3
 80047e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f9d8 	bl	8004b9e <HAL_PCD_EP_DB_Receive>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047f4:	e077      	b.n	80048e6 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800482a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004832:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d024      	beq.n	800489e <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	3302      	adds	r3, #2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800487c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004880:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02e      	beq.n	80048e6 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488e:	6959      	ldr	r1, [r3, #20]
 8004890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004892:	891a      	ldrh	r2, [r3, #8]
 8004894:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004898:	f007 f969 	bl	800bb6e <USB_ReadPMA>
 800489c:	e023      	b.n	80048e6 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	3306      	adds	r3, #6
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80048ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d8:	6959      	ldr	r1, [r3, #20]
 80048da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048dc:	895a      	ldrh	r2, [r3, #10]
 80048de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048e2:	f007 f944 	bl	800bb6e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048ee:	441a      	add	r2, r3
 80048f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80048f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048fc:	441a      	add	r2, r3
 80048fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004900:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <PCD_EP_ISR_Handler+0x4f2>
 800490a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	429a      	cmp	r2, r3
 8004914:	d206      	bcs.n	8004924 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f008 ff43 	bl	800d7a8 <HAL_PCD_DataOutStageCallback>
 8004922:	e005      	b.n	8004930 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800492a:	4618      	mov	r0, r3
 800492c:	f005 fc75 	bl	800a21a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004930:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8122 	beq.w	8004b82 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800493e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	441a      	add	r2, r3
 800497e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	78db      	ldrb	r3, [r3, #3]
 8004992:	2b02      	cmp	r3, #2
 8004994:	f000 809d 	beq.w	8004ad2 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 8004998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499a:	2200      	movs	r2, #0
 800499c:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800499e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d046      	beq.n	8004a38 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d126      	bne.n	8004a00 <PCD_EP_ISR_Handler+0x5dc>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	4413      	add	r3, r2
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	4413      	add	r3, r2
 80049d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	e061      	b.n	8004ac4 <PCD_EP_ISR_Handler+0x6a0>
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d15d      	bne.n	8004ac4 <PCD_EP_ISR_Handler+0x6a0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	4413      	add	r3, r2
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	011a      	lsls	r2, r3, #4
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	4413      	add	r3, r2
 8004a2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2200      	movs	r2, #0
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	e045      	b.n	8004ac4 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d126      	bne.n	8004a94 <PCD_EP_ISR_Handler+0x670>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5a:	4413      	add	r3, r2
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	011a      	lsls	r2, r3, #4
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	4413      	add	r3, r2
 8004a68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e017      	b.n	8004ac4 <PCD_EP_ISR_Handler+0x6a0>
 8004a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d113      	bne.n	8004ac4 <PCD_EP_ISR_Handler+0x6a0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aaa:	4413      	add	r3, r2
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	011a      	lsls	r2, r3, #4
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f008 fe87 	bl	800d7de <HAL_PCD_DataInStageCallback>
 8004ad0:	e057      	b.n	8004b82 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad4:	78db      	ldrb	r3, [r3, #3]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d14c      	bne.n	8004b74 <PCD_EP_ISR_Handler+0x750>
 8004ada:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d146      	bne.n	8004b74 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	3302      	adds	r3, #2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8004b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d907      	bls.n	8004b2e <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2a:	619a      	str	r2, [r3, #24]
 8004b2c:	e002      	b.n	8004b34 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b30:	2200      	movs	r2, #0
 8004b32:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f008 fe4b 	bl	800d7de <HAL_PCD_DataInStageCallback>
 8004b48:	e01b      	b.n	8004b82 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b52:	441a      	add	r2, r3
 8004b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b56:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b60:	441a      	add	r2, r3
 8004b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b64:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f005 fb54 	bl	800a21a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004b72:	e006      	b.n	8004b82 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004b74:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f91b 	bl	8004db8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f6ff ac4d 	blt.w	800442e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3758      	adds	r7, #88	; 0x58
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b088      	sub	sp, #32
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d07e      	beq.n	8004cb4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	8b7b      	ldrh	r3, [r7, #26]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d306      	bcc.n	8004bf8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	8b7b      	ldrh	r3, [r7, #26]
 8004bf0:	1ad2      	subs	r2, r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	619a      	str	r2, [r3, #24]
 8004bf6:	e002      	b.n	8004bfe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d123      	bne.n	8004c4e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	833b      	strh	r3, [r7, #24]
 8004c22:	8b3b      	ldrh	r3, [r7, #24]
 8004c24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c28:	833b      	strh	r3, [r7, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	8b3b      	ldrh	r3, [r7, #24]
 8004c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01f      	beq.n	8004c98 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	82fb      	strh	r3, [r7, #22]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8afb      	ldrh	r3, [r7, #22]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004c98:	8b7b      	ldrh	r3, [r7, #26]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8087 	beq.w	8004dae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6959      	ldr	r1, [r3, #20]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	891a      	ldrh	r2, [r3, #8]
 8004cac:	8b7b      	ldrh	r3, [r7, #26]
 8004cae:	f006 ff5e 	bl	800bb6e <USB_ReadPMA>
 8004cb2:	e07c      	b.n	8004dae <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3306      	adds	r3, #6
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cdc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	8b7b      	ldrh	r3, [r7, #26]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d306      	bcc.n	8004cf6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	8b7b      	ldrh	r3, [r7, #26]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	619a      	str	r2, [r3, #24]
 8004cf4:	e002      	b.n	8004cfc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d123      	bne.n	8004d4c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	83fb      	strh	r3, [r7, #30]
 8004d20:	8bfb      	ldrh	r3, [r7, #30]
 8004d22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d26:	83fb      	strh	r3, [r7, #30]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	8bfb      	ldrh	r3, [r7, #30]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11f      	bne.n	8004d96 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	83bb      	strh	r3, [r7, #28]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	8bbb      	ldrh	r3, [r7, #28]
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d96:	8b7b      	ldrh	r3, [r7, #26]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6959      	ldr	r1, [r3, #20]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	895a      	ldrh	r2, [r3, #10]
 8004da8:	8b7b      	ldrh	r3, [r7, #26]
 8004daa:	f006 fee0 	bl	800bb6e <USB_ReadPMA>
    }
  }

  return count;
 8004dae:	8b7b      	ldrh	r3, [r7, #26]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b0a2      	sub	sp, #136	; 0x88
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 81c7 	beq.w	8005160 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	3302      	adds	r3, #2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d907      	bls.n	8004e1a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e12:	1ad2      	subs	r2, r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	619a      	str	r2, [r3, #24]
 8004e18:	e002      	b.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 80b9 	bne.w	8004f9c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d126      	bne.n	8004e80 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	4413      	add	r3, r2
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	011a      	lsls	r2, r3, #4
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	4413      	add	r3, r2
 8004e54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	e01a      	b.n	8004eb6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d116      	bne.n	8004eb6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	4413      	add	r3, r2
 8004e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	011a      	lsls	r2, r3, #4
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d126      	bne.n	8004f12 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	4413      	add	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	011a      	lsls	r2, r3, #4
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e017      	b.n	8004f42 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d113      	bne.n	8004f42 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	4413      	add	r3, r2
 8004f2a:	623b      	str	r3, [r7, #32]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	011a      	lsls	r2, r3, #4
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	4413      	add	r3, r2
 8004f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	4619      	mov	r1, r3
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f008 fc48 	bl	800d7de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 82d4 	beq.w	8005502 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f74:	827b      	strh	r3, [r7, #18]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	8a7b      	ldrh	r3, [r7, #18]
 8004f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	8013      	strh	r3, [r2, #0]
 8004f9a:	e2b2      	b.n	8005502 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d021      	beq.n	8004fea <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	f040 8286 	bne.w	8005502 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ffe:	441a      	add	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800500c:	441a      	add	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d309      	bcc.n	8005032 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502a:	1ad2      	subs	r2, r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	621a      	str	r2, [r3, #32]
 8005030:	e015      	b.n	800505e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d107      	bne.n	800504a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800503a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800503e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005048:	e009      	b.n	800505e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d155      	bne.n	8005112 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	4413      	add	r3, r2
 800507c:	63bb      	str	r3, [r7, #56]	; 0x38
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	011a      	lsls	r2, r3, #4
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	4413      	add	r3, r2
 8005088:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
 800508e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005090:	2b00      	cmp	r3, #0
 8005092:	d112      	bne.n	80050ba <HAL_PCD_EP_DB_Transmit+0x302>
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e047      	b.n	800514a <HAL_PCD_EP_DB_Transmit+0x392>
 80050ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050bc:	2b3e      	cmp	r3, #62	; 0x3e
 80050be:	d811      	bhi.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80050c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80050d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d2:	3301      	adds	r3, #1
 80050d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d8:	b29b      	uxth	r3, r3
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	b29a      	uxth	r2, r3
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	801a      	strh	r2, [r3, #0]
 80050e2:	e032      	b.n	800514a <HAL_PCD_EP_DB_Transmit+0x392>
 80050e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <HAL_PCD_EP_DB_Transmit+0x342>
 80050f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f6:	3b01      	subs	r3, #1
 80050f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	029b      	lsls	r3, r3, #10
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e01b      	b.n	800514a <HAL_PCD_EP_DB_Transmit+0x392>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d117      	bne.n	800514a <HAL_PCD_EP_DB_Transmit+0x392>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	643b      	str	r3, [r7, #64]	; 0x40
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512e:	4413      	add	r3, r2
 8005130:	643b      	str	r3, [r7, #64]	; 0x40
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	011a      	lsls	r2, r3, #4
 8005138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513a:	4413      	add	r3, r2
 800513c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005144:	b29a      	uxth	r2, r3
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6959      	ldr	r1, [r3, #20]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	891a      	ldrh	r2, [r3, #8]
 8005156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005158:	b29b      	uxth	r3, r3
 800515a:	f006 fcc2 	bl	800bae2 <USB_WritePMA>
 800515e:	e1d0      	b.n	8005502 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	3306      	adds	r3, #6
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005188:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005194:	429a      	cmp	r2, r3
 8005196:	d307      	bcc.n	80051a8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051a0:	1ad2      	subs	r2, r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	619a      	str	r2, [r3, #24]
 80051a6:	e002      	b.n	80051ae <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 80c4 	bne.w	8005340 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d126      	bne.n	800520e <HAL_PCD_EP_DB_Transmit+0x456>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	4413      	add	r3, r2
 80051d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	011a      	lsls	r2, r3, #4
 80051de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005206:	b29a      	uxth	r2, r3
 8005208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e01a      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0x48c>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d116      	bne.n	8005244 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	677b      	str	r3, [r7, #116]	; 0x74
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522a:	4413      	add	r3, r2
 800522c:	677b      	str	r3, [r7, #116]	; 0x74
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	011a      	lsls	r2, r3, #4
 8005234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005236:	4413      	add	r3, r2
 8005238:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800523c:	673b      	str	r3, [r7, #112]	; 0x70
 800523e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005240:	2200      	movs	r2, #0
 8005242:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	67bb      	str	r3, [r7, #120]	; 0x78
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d12f      	bne.n	80052b2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005262:	b29b      	uxth	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800526a:	4413      	add	r3, r2
 800526c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	011a      	lsls	r2, r3, #4
 8005276:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800527a:	4413      	add	r3, r2
 800527c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005290:	b29a      	uxth	r2, r3
 8005292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	e017      	b.n	80052e2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d113      	bne.n	80052e2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c8:	4413      	add	r3, r2
 80052ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052d4:	4413      	add	r3, r2
 80052d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052de:	2200      	movs	r2, #0
 80052e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f008 fa78 	bl	800d7de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 8104 	bne.w	8005502 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800532a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]
 800533e:	e0e0      	b.n	8005502 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d121      	bne.n	800538e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005364:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800537a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538a:	b29b      	uxth	r3, r3
 800538c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 80b4 	bne.w	8005502 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053a2:	441a      	add	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053b0:	441a      	add	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d309      	bcc.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	621a      	str	r2, [r3, #32]
 80053d4:	e015      	b.n	8005402 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d107      	bne.n	80053ee <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80053de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053ec:	e009      	b.n	8005402 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	667b      	str	r3, [r7, #100]	; 0x64
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d155      	bne.n	80054bc <HAL_PCD_EP_DB_Transmit+0x704>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541e:	b29b      	uxth	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005424:	4413      	add	r3, r2
 8005426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	011a      	lsls	r2, r3, #4
 800542e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005430:	4413      	add	r3, r2
 8005432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005436:	65bb      	str	r3, [r7, #88]	; 0x58
 8005438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543a:	2b00      	cmp	r3, #0
 800543c:	d112      	bne.n	8005464 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800543e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005448:	b29a      	uxth	r2, r3
 800544a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545c:	b29a      	uxth	r2, r3
 800545e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e044      	b.n	80054ee <HAL_PCD_EP_DB_Transmit+0x736>
 8005464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005466:	2b3e      	cmp	r3, #62	; 0x3e
 8005468:	d811      	bhi.n	800548e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800546a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	657b      	str	r3, [r7, #84]	; 0x54
 8005470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800547a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547c:	3301      	adds	r3, #1
 800547e:	657b      	str	r3, [r7, #84]	; 0x54
 8005480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005482:	b29b      	uxth	r3, r3
 8005484:	029b      	lsls	r3, r3, #10
 8005486:	b29a      	uxth	r2, r3
 8005488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e02f      	b.n	80054ee <HAL_PCD_EP_DB_Transmit+0x736>
 800548e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	657b      	str	r3, [r7, #84]	; 0x54
 8005494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2b00      	cmp	r3, #0
 800549c:	d102      	bne.n	80054a4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800549e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a0:	3b01      	subs	r3, #1
 80054a2:	657b      	str	r3, [r7, #84]	; 0x54
 80054a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	029b      	lsls	r3, r3, #10
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	e018      	b.n	80054ee <HAL_PCD_EP_DB_Transmit+0x736>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d114      	bne.n	80054ee <HAL_PCD_EP_DB_Transmit+0x736>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d2:	4413      	add	r3, r2
 80054d4:	667b      	str	r3, [r7, #100]	; 0x64
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	011a      	lsls	r2, r3, #4
 80054dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054de:	4413      	add	r3, r2
 80054e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054e4:	663b      	str	r3, [r7, #96]	; 0x60
 80054e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	6959      	ldr	r1, [r3, #20]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	895a      	ldrh	r2, [r3, #10]
 80054fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f006 faf0 	bl	800bae2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551c:	823b      	strh	r3, [r7, #16]
 800551e:	8a3b      	ldrh	r3, [r7, #16]
 8005520:	f083 0310 	eor.w	r3, r3, #16
 8005524:	823b      	strh	r3, [r7, #16]
 8005526:	8a3b      	ldrh	r3, [r7, #16]
 8005528:	f083 0320 	eor.w	r3, r3, #32
 800552c:	823b      	strh	r3, [r7, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8a3b      	ldrh	r3, [r7, #16]
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3788      	adds	r7, #136	; 0x88
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	817b      	strh	r3, [r7, #10]
 800556a:	4613      	mov	r3, r2
 800556c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800556e:	897b      	ldrh	r3, [r7, #10]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800557a:	897b      	ldrh	r3, [r7, #10]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e009      	b.n	80055a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005592:	897a      	ldrh	r2, [r7, #10]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80055a6:	893b      	ldrh	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2200      	movs	r2, #0
 80055b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	80da      	strh	r2, [r3, #6]
 80055ba:	e00b      	b.n	80055d4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2201      	movs	r2, #1
 80055c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f001 b99a 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800560a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02c      	beq.n	8005674 <HAL_RCC_OscConfig+0x90>
 800561a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d122      	bne.n	8005674 <HAL_RCC_OscConfig+0x90>
 800562e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d118      	bne.n	8005674 <HAL_RCC_OscConfig+0x90>
 8005642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10e      	bne.n	8005674 <HAL_RCC_OscConfig+0x90>
 8005656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_RCC_OscConfig+0x90>
 800566a:	f240 114b 	movw	r1, #331	; 0x14b
 800566e:	48ba      	ldr	r0, [pc, #744]	; (8005958 <HAL_RCC_OscConfig+0x374>)
 8005670:	f7fb f823 	bl	80006ba <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 819d 	beq.w	80059c4 <HAL_RCC_OscConfig+0x3e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800568a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d016      	beq.n	80056c8 <HAL_RCC_OscConfig+0xe4>
 800569a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d00d      	beq.n	80056c8 <HAL_RCC_OscConfig+0xe4>
 80056ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056bc:	d004      	beq.n	80056c8 <HAL_RCC_OscConfig+0xe4>
 80056be:	f240 1151 	movw	r1, #337	; 0x151
 80056c2:	48a5      	ldr	r0, [pc, #660]	; (8005958 <HAL_RCC_OscConfig+0x374>)
 80056c4:	f7fa fff9 	bl	80006ba <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80056c8:	4ba4      	ldr	r3, [pc, #656]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d00c      	beq.n	80056ee <HAL_RCC_OscConfig+0x10a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056d4:	4ba1      	ldr	r3, [pc, #644]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 030c 	and.w	r3, r3, #12
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d15c      	bne.n	800579a <HAL_RCC_OscConfig+0x1b6>
 80056e0:	4b9e      	ldr	r3, [pc, #632]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ec:	d155      	bne.n	800579a <HAL_RCC_OscConfig+0x1b6>
 80056ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005702:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005706:	fab3 f383 	clz	r3, r3
 800570a:	b2db      	uxtb	r3, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	d102      	bne.n	8005720 <HAL_RCC_OscConfig+0x13c>
 800571a:	4b90      	ldr	r3, [pc, #576]	; (800595c <HAL_RCC_OscConfig+0x378>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	e015      	b.n	800574c <HAL_RCC_OscConfig+0x168>
 8005720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005724:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800572c:	fa93 f3a3 	rbit	r3, r3
 8005730:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005738:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800573c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005740:	fa93 f3a3 	rbit	r3, r3
 8005744:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005748:	4b84      	ldr	r3, [pc, #528]	; (800595c <HAL_RCC_OscConfig+0x378>)
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005750:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005754:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005758:	fa92 f2a2 	rbit	r2, r2
 800575c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005760:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005764:	fab2 f282 	clz	r2, r2
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	f042 0220 	orr.w	r2, r2, #32
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	f002 021f 	and.w	r2, r2, #31
 8005774:	2101      	movs	r1, #1
 8005776:	fa01 f202 	lsl.w	r2, r1, r2
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8120 	beq.w	80059c2 <HAL_RCC_OscConfig+0x3de>
 8005782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 8117 	bne.w	80059c2 <HAL_RCC_OscConfig+0x3de>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f001 b8d2 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_OscConfig+0x1d6>
 80057ac:	4b6b      	ldr	r3, [pc, #428]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a6a      	ldr	r2, [pc, #424]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e036      	b.n	8005828 <HAL_RCC_OscConfig+0x244>
 80057ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x200>
 80057ca:	4b64      	ldr	r3, [pc, #400]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a63      	ldr	r2, [pc, #396]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4b61      	ldr	r3, [pc, #388]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a60      	ldr	r2, [pc, #384]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	e021      	b.n	8005828 <HAL_RCC_OscConfig+0x244>
 80057e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0x22c>
 80057f6:	4b59      	ldr	r3, [pc, #356]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a58      	ldr	r2, [pc, #352]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80057fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b56      	ldr	r3, [pc, #344]	; (800595c <HAL_RCC_OscConfig+0x378>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a55      	ldr	r2, [pc, #340]	; (800595c <HAL_RCC_OscConfig+0x378>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e00b      	b.n	8005828 <HAL_RCC_OscConfig+0x244>
 8005810:	4b52      	ldr	r3, [pc, #328]	; (800595c <HAL_RCC_OscConfig+0x378>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a51      	ldr	r2, [pc, #324]	; (800595c <HAL_RCC_OscConfig+0x378>)
 8005816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b4f      	ldr	r3, [pc, #316]	; (800595c <HAL_RCC_OscConfig+0x378>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a4e      	ldr	r2, [pc, #312]	; (800595c <HAL_RCC_OscConfig+0x378>)
 8005822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005826:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005828:	4b4c      	ldr	r3, [pc, #304]	; (800595c <HAL_RCC_OscConfig+0x378>)
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	f023 020f 	bic.w	r2, r3, #15
 8005830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005834:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	4947      	ldr	r1, [pc, #284]	; (800595c <HAL_RCC_OscConfig+0x378>)
 800583e:	4313      	orrs	r3, r2
 8005840:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d059      	beq.n	8005906 <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fb f975 	bl	8000b40 <HAL_GetTick>
 8005856:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	e00a      	b.n	8005872 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800585c:	f7fb f970 	bl	8000b40 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d902      	bls.n	8005872 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	f001 b866 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
 8005872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005876:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800587e:	fa93 f3a3 	rbit	r3, r3
 8005882:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005886:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588a:	fab3 f383 	clz	r3, r3
 800588e:	b2db      	uxtb	r3, r3
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d102      	bne.n	80058a4 <HAL_RCC_OscConfig+0x2c0>
 800589e:	4b2f      	ldr	r3, [pc, #188]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	e015      	b.n	80058d0 <HAL_RCC_OscConfig+0x2ec>
 80058a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80058b0:	fa93 f3a3 	rbit	r3, r3
 80058b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80058b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80058c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80058c4:	fa93 f3a3 	rbit	r3, r3
 80058c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80058cc:	4b23      	ldr	r3, [pc, #140]	; (800595c <HAL_RCC_OscConfig+0x378>)
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80058d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80058dc:	fa92 f2a2 	rbit	r2, r2
 80058e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80058e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80058e8:	fab2 f282 	clz	r2, r2
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	f042 0220 	orr.w	r2, r2, #32
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	f002 021f 	and.w	r2, r2, #31
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f202 	lsl.w	r2, r1, r2
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0ab      	beq.n	800585c <HAL_RCC_OscConfig+0x278>
 8005904:	e05e      	b.n	80059c4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fb f91b 	bl	8000b40 <HAL_GetTick>
 800590a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590e:	e00a      	b.n	8005926 <HAL_RCC_OscConfig+0x342>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005910:	f7fb f916 	bl	8000b40 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b64      	cmp	r3, #100	; 0x64
 800591e:	d902      	bls.n	8005926 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	f001 b80c 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
 8005926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800592a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005932:	fa93 f3a3 	rbit	r3, r3
 8005936:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800593a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	d106      	bne.n	8005960 <HAL_RCC_OscConfig+0x37c>
 8005952:	4b02      	ldr	r3, [pc, #8]	; (800595c <HAL_RCC_OscConfig+0x378>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	e019      	b.n	800598c <HAL_RCC_OscConfig+0x3a8>
 8005958:	0800de68 	.word	0x0800de68
 800595c:	40021000 	.word	0x40021000
 8005960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005964:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005968:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800596c:	fa93 f3a3 	rbit	r3, r3
 8005970:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005978:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800597c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005980:	fa93 f3a3 	rbit	r3, r3
 8005984:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005988:	4bc0      	ldr	r3, [pc, #768]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005990:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005994:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005998:	fa92 f2a2 	rbit	r2, r2
 800599c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80059a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80059a4:	fab2 f282 	clz	r2, r2
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	f042 0220 	orr.w	r2, r2, #32
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	f002 021f 	and.w	r2, r2, #31
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1a7      	bne.n	8005910 <HAL_RCC_OscConfig+0x32c>
 80059c0:	e000      	b.n	80059c4 <HAL_RCC_OscConfig+0x3e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 81a2 	beq.w	8005d1e <HAL_RCC_OscConfig+0x73a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80059da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <HAL_RCC_OscConfig+0x420>
 80059ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d004      	beq.n	8005a04 <HAL_RCC_OscConfig+0x420>
 80059fa:	f240 1189 	movw	r1, #393	; 0x189
 80059fe:	48a4      	ldr	r0, [pc, #656]	; (8005c90 <HAL_RCC_OscConfig+0x6ac>)
 8005a00:	f7fa fe5b 	bl	80006ba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	2b1f      	cmp	r3, #31
 8005a12:	d904      	bls.n	8005a1e <HAL_RCC_OscConfig+0x43a>
 8005a14:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8005a18:	489d      	ldr	r0, [pc, #628]	; (8005c90 <HAL_RCC_OscConfig+0x6ac>)
 8005a1a:	f7fa fe4e 	bl	80006ba <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005a1e:	4b9b      	ldr	r3, [pc, #620]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCC_OscConfig+0x45e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005a2a:	4b98      	ldr	r3, [pc, #608]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d172      	bne.n	8005b1c <HAL_RCC_OscConfig+0x538>
 8005a36:	4b95      	ldr	r3, [pc, #596]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d16c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x538>
 8005a42:	2302      	movs	r3, #2
 8005a44:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a48:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005a4c:	fa93 f3a3 	rbit	r3, r3
 8005a50:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005a54:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a58:	fab3 f383 	clz	r3, r3
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d102      	bne.n	8005a72 <HAL_RCC_OscConfig+0x48e>
 8005a6c:	4b87      	ldr	r3, [pc, #540]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	e013      	b.n	8005a9a <HAL_RCC_OscConfig+0x4b6>
 8005a72:	2302      	movs	r3, #2
 8005a74:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a78:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005a84:	2302      	movs	r3, #2
 8005a86:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005a8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a8e:	fa93 f3a3 	rbit	r3, r3
 8005a92:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005a96:	4b7d      	ldr	r3, [pc, #500]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005aa0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005aa4:	fa92 f2a2 	rbit	r2, r2
 8005aa8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005aac:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005ab0:	fab2 f282 	clz	r2, r2
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	f042 0220 	orr.w	r2, r2, #32
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	f002 021f 	and.w	r2, r2, #31
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x4fe>
 8005acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d002      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x4fe>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f000 bf2e 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae2:	4b6a      	ldr	r3, [pc, #424]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	21f8      	movs	r1, #248	; 0xf8
 8005af8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005b00:	fa91 f1a1 	rbit	r1, r1
 8005b04:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005b08:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005b0c:	fab1 f181 	clz	r1, r1
 8005b10:	b2c9      	uxtb	r1, r1
 8005b12:	408b      	lsls	r3, r1
 8005b14:	495d      	ldr	r1, [pc, #372]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b1a:	e100      	b.n	8005d1e <HAL_RCC_OscConfig+0x73a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8088 	beq.w	8005c3e <HAL_RCC_OscConfig+0x65a>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b38:	fa93 f3a3 	rbit	r3, r3
 8005b3c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005b40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b44:	fab3 f383 	clz	r3, r3
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	461a      	mov	r2, r3
 8005b56:	2301      	movs	r3, #1
 8005b58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5a:	f7fa fff1 	bl	8000b40 <HAL_GetTick>
 8005b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b62:	e00a      	b.n	8005b7a <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b64:	f7fa ffec 	bl	8000b40 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d902      	bls.n	8005b7a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	f000 bee2 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b80:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005b84:	fa93 f3a3 	rbit	r3, r3
 8005b88:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005b8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b90:	fab3 f383 	clz	r3, r3
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d102      	bne.n	8005baa <HAL_RCC_OscConfig+0x5c6>
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	e013      	b.n	8005bd2 <HAL_RCC_OscConfig+0x5ee>
 8005baa:	2302      	movs	r3, #2
 8005bac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005bb4:	fa93 f3a3 	rbit	r3, r3
 8005bb8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005bc2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005bc6:	fa93 f3a3 	rbit	r3, r3
 8005bca:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005bd8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005bdc:	fa92 f2a2 	rbit	r2, r2
 8005be0:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005be4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005be8:	fab2 f282 	clz	r2, r2
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	f042 0220 	orr.w	r2, r2, #32
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	f002 021f 	and.w	r2, r2, #31
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0af      	beq.n	8005b64 <HAL_RCC_OscConfig+0x580>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c04:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	21f8      	movs	r1, #248	; 0xf8
 8005c1a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005c22:	fa91 f1a1 	rbit	r1, r1
 8005c26:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005c2a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005c2e:	fab1 f181 	clz	r1, r1
 8005c32:	b2c9      	uxtb	r1, r1
 8005c34:	408b      	lsls	r3, r1
 8005c36:	4915      	ldr	r1, [pc, #84]	; (8005c8c <HAL_RCC_OscConfig+0x6a8>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	600b      	str	r3, [r1, #0]
 8005c3c:	e06f      	b.n	8005d1e <HAL_RCC_OscConfig+0x73a>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c48:	fa93 f3a3 	rbit	r3, r3
 8005c4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c54:	fab3 f383 	clz	r3, r3
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	461a      	mov	r2, r3
 8005c66:	2300      	movs	r3, #0
 8005c68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6a:	f7fa ff69 	bl	8000b40 <HAL_GetTick>
 8005c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c72:	e00f      	b.n	8005c94 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c74:	f7fa ff64 	bl	8000b40 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d907      	bls.n	8005c94 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	f000 be5a 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	0800de68 	.word	0x0800de68
 8005c94:	2302      	movs	r3, #2
 8005c96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c9e:	fa93 f3a3 	rbit	r3, r3
 8005ca2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005caa:	fab3 f383 	clz	r3, r3
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x6e0>
 8005cbe:	4b81      	ldr	r3, [pc, #516]	; (8005ec4 <HAL_RCC_OscConfig+0x8e0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	e013      	b.n	8005cec <HAL_RCC_OscConfig+0x708>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cce:	fa93 f3a3 	rbit	r3, r3
 8005cd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ce0:	fa93 f3a3 	rbit	r3, r3
 8005ce4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ce8:	4b76      	ldr	r3, [pc, #472]	; (8005ec4 <HAL_RCC_OscConfig+0x8e0>)
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	2202      	movs	r2, #2
 8005cee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005cf2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005cf6:	fa92 f2a2 	rbit	r2, r2
 8005cfa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005cfe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005d02:	fab2 f282 	clz	r2, r2
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	f042 0220 	orr.w	r2, r2, #32
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	f002 021f 	and.w	r2, r2, #31
 8005d12:	2101      	movs	r1, #1
 8005d14:	fa01 f202 	lsl.w	r2, r1, r2
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1aa      	bne.n	8005c74 <HAL_RCC_OscConfig+0x690>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 812b 	beq.w	8005f8a <HAL_RCC_OscConfig+0x9a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <HAL_RCC_OscConfig+0x77a>
 8005d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d004      	beq.n	8005d5e <HAL_RCC_OscConfig+0x77a>
 8005d54:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8005d58:	485b      	ldr	r0, [pc, #364]	; (8005ec8 <HAL_RCC_OscConfig+0x8e4>)
 8005d5a:	f7fa fcae 	bl	80006ba <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d079      	beq.n	8005e62 <HAL_RCC_OscConfig+0x87e>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d84:	fab3 f383 	clz	r3, r3
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4b4f      	ldr	r3, [pc, #316]	; (8005ecc <HAL_RCC_OscConfig+0x8e8>)
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	461a      	mov	r2, r3
 8005d94:	2301      	movs	r3, #1
 8005d96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d98:	f7fa fed2 	bl	8000b40 <HAL_GetTick>
 8005d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005da0:	e00a      	b.n	8005db8 <HAL_RCC_OscConfig+0x7d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da2:	f7fa fecd 	bl	8000b40 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d902      	bls.n	8005db8 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	f000 bdc3 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
 8005db8:	2302      	movs	r3, #2
 8005dba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	fa93 f2a3 	rbit	r2, r3
 8005de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df6:	2202      	movs	r2, #2
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	fa93 f2a3 	rbit	r2, r3
 8005e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e12:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <HAL_RCC_OscConfig+0x8e0>)
 8005e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e1e:	2102      	movs	r1, #2
 8005e20:	6019      	str	r1, [r3, #0]
 8005e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	fa93 f1a3 	rbit	r1, r3
 8005e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e38:	6019      	str	r1, [r3, #0]
  return result;
 8005e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	fab3 f383 	clz	r3, r3
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	2101      	movs	r1, #1
 8005e56:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0a0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x7be>
 8005e60:	e093      	b.n	8005f8a <HAL_RCC_OscConfig+0x9a6>
 8005e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	fa93 f2a3 	rbit	r2, r3
 8005e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e84:	601a      	str	r2, [r3, #0]
  return result;
 8005e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e8e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e90:	fab3 f383 	clz	r3, r3
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_RCC_OscConfig+0x8e8>)
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea4:	f7fa fe4c 	bl	8000b40 <HAL_GetTick>
 8005ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eac:	e010      	b.n	8005ed0 <HAL_RCC_OscConfig+0x8ec>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eae:	f7fa fe47 	bl	8000b40 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d908      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x8ec>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	f000 bd3d 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	0800de68 	.word	0x0800de68
 8005ecc:	10908120 	.word	0x10908120
 8005ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ed8:	2202      	movs	r2, #2
 8005eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	fa93 f2a3 	rbit	r2, r3
 8005eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005efc:	2202      	movs	r2, #2
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	fa93 f2a3 	rbit	r2, r3
 8005f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f20:	2202      	movs	r2, #2
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	fa93 f2a3 	rbit	r2, r3
 8005f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005f3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	4bb8      	ldr	r3, [pc, #736]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8005f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f44:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f48:	2102      	movs	r1, #2
 8005f4a:	6019      	str	r1, [r3, #0]
 8005f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f50:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	fa93 f1a3 	rbit	r1, r3
 8005f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f5e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f62:	6019      	str	r1, [r3, #0]
  return result;
 8005f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	2101      	movs	r1, #1
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d191      	bne.n	8005eae <HAL_RCC_OscConfig+0x8ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 81c0 	beq.w	8006320 <HAL_RCC_OscConfig+0xd3c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d014      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x9fc>
 8005fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d00c      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x9fc>
 8005fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d004      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x9fc>
 8005fd6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8005fda:	4892      	ldr	r0, [pc, #584]	; (8006224 <HAL_RCC_OscConfig+0xc40>)
 8005fdc:	f7fa fb6d 	bl	80006ba <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe0:	4b8f      	ldr	r3, [pc, #572]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d116      	bne.n	800601a <HAL_RCC_OscConfig+0xa36>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fec:	4b8c      	ldr	r3, [pc, #560]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	4a8b      	ldr	r2, [pc, #556]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8005ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	61d3      	str	r3, [r2, #28]
 8005ff8:	4b89      	ldr	r3, [pc, #548]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006004:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006012:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601a:	4b83      	ldr	r3, [pc, #524]	; (8006228 <HAL_RCC_OscConfig+0xc44>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d11b      	bne.n	800605e <HAL_RCC_OscConfig+0xa7a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006026:	4b80      	ldr	r3, [pc, #512]	; (8006228 <HAL_RCC_OscConfig+0xc44>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a7f      	ldr	r2, [pc, #508]	; (8006228 <HAL_RCC_OscConfig+0xc44>)
 800602c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006032:	f7fa fd85 	bl	8000b40 <HAL_GetTick>
 8006036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0xa6e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603c:	f7fa fd80 	bl	8000b40 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b64      	cmp	r3, #100	; 0x64
 800604a:	d902      	bls.n	8006052 <HAL_RCC_OscConfig+0xa6e>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	f000 bc76 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006052:	4b75      	ldr	r3, [pc, #468]	; (8006228 <HAL_RCC_OscConfig+0xc44>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ee      	beq.n	800603c <HAL_RCC_OscConfig+0xa58>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800605e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d106      	bne.n	800607c <HAL_RCC_OscConfig+0xa98>
 800606e:	4b6c      	ldr	r3, [pc, #432]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	4a6b      	ldr	r2, [pc, #428]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8006074:	f043 0301 	orr.w	r3, r3, #1
 8006078:	6213      	str	r3, [r2, #32]
 800607a:	e035      	b.n	80060e8 <HAL_RCC_OscConfig+0xb04>
 800607c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006080:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10c      	bne.n	80060a6 <HAL_RCC_OscConfig+0xac2>
 800608c:	4b64      	ldr	r3, [pc, #400]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	4a63      	ldr	r2, [pc, #396]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	6213      	str	r3, [r2, #32]
 8006098:	4b61      	ldr	r3, [pc, #388]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	4a60      	ldr	r2, [pc, #384]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 800609e:	f023 0304 	bic.w	r3, r3, #4
 80060a2:	6213      	str	r3, [r2, #32]
 80060a4:	e020      	b.n	80060e8 <HAL_RCC_OscConfig+0xb04>
 80060a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	d10c      	bne.n	80060d0 <HAL_RCC_OscConfig+0xaec>
 80060b6:	4b5a      	ldr	r3, [pc, #360]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	4a59      	ldr	r2, [pc, #356]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060bc:	f043 0304 	orr.w	r3, r3, #4
 80060c0:	6213      	str	r3, [r2, #32]
 80060c2:	4b57      	ldr	r3, [pc, #348]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	4a56      	ldr	r2, [pc, #344]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	6213      	str	r3, [r2, #32]
 80060ce:	e00b      	b.n	80060e8 <HAL_RCC_OscConfig+0xb04>
 80060d0:	4b53      	ldr	r3, [pc, #332]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	4a52      	ldr	r2, [pc, #328]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	6213      	str	r3, [r2, #32]
 80060dc:	4b50      	ldr	r3, [pc, #320]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	4a4f      	ldr	r2, [pc, #316]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80060e2:	f023 0304 	bic.w	r3, r3, #4
 80060e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8082 	beq.w	80061fe <HAL_RCC_OscConfig+0xc1a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fa:	f7fa fd21 	bl	8000b40 <HAL_GetTick>
 80060fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006102:	e00c      	b.n	800611e <HAL_RCC_OscConfig+0xb3a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006104:	f7fa fd1c 	bl	8000b40 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d902      	bls.n	800611e <HAL_RCC_OscConfig+0xb3a>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	f000 bc10 	b.w	800693e <HAL_RCC_OscConfig+0x135a>
 800611e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006122:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006126:	2202      	movs	r2, #2
 8006128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	fa93 f2a3 	rbit	r2, r3
 8006138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800613c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006146:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800614a:	2202      	movs	r2, #2
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006152:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	fa93 f2a3 	rbit	r2, r3
 800615c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006160:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006164:	601a      	str	r2, [r3, #0]
  return result;
 8006166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800616a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800616e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006170:	fab3 f383 	clz	r3, r3
 8006174:	b2db      	uxtb	r3, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f043 0302 	orr.w	r3, r3, #2
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d102      	bne.n	800618a <HAL_RCC_OscConfig+0xba6>
 8006184:	4b26      	ldr	r3, [pc, #152]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	e013      	b.n	80061b2 <HAL_RCC_OscConfig+0xbce>
 800618a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006192:	2202      	movs	r2, #2
 8006194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800619a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	fa93 f2a3 	rbit	r2, r3
 80061a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <HAL_RCC_OscConfig+0xc3c>)
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061b6:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80061ba:	2102      	movs	r1, #2
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061c2:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	fa92 f1a2 	rbit	r1, r2
 80061cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80061d4:	6011      	str	r1, [r2, #0]
  return result;
 80061d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	fab2 f282 	clz	r2, r2
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	f002 021f 	and.w	r2, r2, #31
 80061f0:	2101      	movs	r1, #1
 80061f2:	fa01 f202 	lsl.w	r2, r1, r2
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d083      	beq.n	8006104 <HAL_RCC_OscConfig+0xb20>
 80061fc:	e086      	b.n	800630c <HAL_RCC_OscConfig+0xd28>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fe:	f7fa fc9f 	bl	8000b40 <HAL_GetTick>
 8006202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006206:	e011      	b.n	800622c <HAL_RCC_OscConfig+0xc48>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006208:	f7fa fc9a 	bl	8000b40 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	; 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d907      	bls.n	800622c <HAL_RCC_OscConfig+0xc48>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e38e      	b.n	800693e <HAL_RCC_OscConfig+0x135a>
 8006220:	40021000 	.word	0x40021000
 8006224:	0800de68 	.word	0x0800de68
 8006228:	40007000 	.word	0x40007000
 800622c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006230:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006234:	2202      	movs	r2, #2
 8006236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800623c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	fa93 f2a3 	rbit	r2, r3
 8006246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800624a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006254:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006258:	2202      	movs	r2, #2
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006260:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	fa93 f2a3 	rbit	r2, r3
 800626a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800626e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006272:	601a      	str	r2, [r3, #0]
  return result;
 8006274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006278:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800627c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800627e:	fab3 f383 	clz	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d102      	bne.n	8006298 <HAL_RCC_OscConfig+0xcb4>
 8006292:	4bbb      	ldr	r3, [pc, #748]	; (8006580 <HAL_RCC_OscConfig+0xf9c>)
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	e013      	b.n	80062c0 <HAL_RCC_OscConfig+0xcdc>
 8006298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800629c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80062a0:	2202      	movs	r2, #2
 80062a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062a8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	fa93 f2a3 	rbit	r2, r3
 80062b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062b6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	4bb0      	ldr	r3, [pc, #704]	; (8006580 <HAL_RCC_OscConfig+0xf9c>)
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062c4:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80062c8:	2102      	movs	r1, #2
 80062ca:	6011      	str	r1, [r2, #0]
 80062cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062d0:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	fa92 f1a2 	rbit	r1, r2
 80062da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80062e2:	6011      	str	r1, [r2, #0]
  return result;
 80062e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	fab2 f282 	clz	r2, r2
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	f002 021f 	and.w	r2, r2, #31
 80062fe:	2101      	movs	r1, #1
 8006300:	fa01 f202 	lsl.w	r2, r1, r2
 8006304:	4013      	ands	r3, r2
 8006306:	2b00      	cmp	r3, #0
 8006308:	f47f af7e 	bne.w	8006208 <HAL_RCC_OscConfig+0xc24>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800630c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006310:	2b01      	cmp	r3, #1
 8006312:	d105      	bne.n	8006320 <HAL_RCC_OscConfig+0xd3c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006314:	4b9a      	ldr	r3, [pc, #616]	; (8006580 <HAL_RCC_OscConfig+0xf9c>)
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	4a99      	ldr	r2, [pc, #612]	; (8006580 <HAL_RCC_OscConfig+0xf9c>)
 800631a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d014      	beq.n	800635a <HAL_RCC_OscConfig+0xd76>
 8006330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d00c      	beq.n	800635a <HAL_RCC_OscConfig+0xd76>
 8006340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d004      	beq.n	800635a <HAL_RCC_OscConfig+0xd76>
 8006350:	f240 213a 	movw	r1, #570	; 0x23a
 8006354:	488b      	ldr	r0, [pc, #556]	; (8006584 <HAL_RCC_OscConfig+0xfa0>)
 8006356:	f7fa f9b0 	bl	80006ba <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800635a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800635e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 82e8 	beq.w	800693c <HAL_RCC_OscConfig+0x1358>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800636c:	4b84      	ldr	r3, [pc, #528]	; (8006580 <HAL_RCC_OscConfig+0xf9c>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f003 030c 	and.w	r3, r3, #12
 8006374:	2b08      	cmp	r3, #8
 8006376:	f000 82b6 	beq.w	80068e6 <HAL_RCC_OscConfig+0x1302>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800637e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b02      	cmp	r3, #2
 8006388:	f040 8207 	bne.w	800679a <HAL_RCC_OscConfig+0x11b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800638c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00d      	beq.n	80063b8 <HAL_RCC_OscConfig+0xdd4>
 800639c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ac:	d004      	beq.n	80063b8 <HAL_RCC_OscConfig+0xdd4>
 80063ae:	f240 2143 	movw	r1, #579	; 0x243
 80063b2:	4874      	ldr	r0, [pc, #464]	; (8006584 <HAL_RCC_OscConfig+0xfa0>)
 80063b4:	f7fa f981 	bl	80006ba <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80063b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8083 	beq.w	80064d0 <HAL_RCC_OscConfig+0xeec>
 80063ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063da:	d079      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 80063dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063ec:	d070      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 80063ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063fe:	d067      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 8006400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006404:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006410:	d05e      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 8006412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006422:	d055      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 8006424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006434:	d04c      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 8006436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800643a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006446:	d043      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 8006448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800644c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006458:	d03a      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 800645a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800645e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800646a:	d031      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 800646c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800647c:	d028      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 800647e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800648e:	d01f      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 8006490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006494:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064a0:	d016      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 80064a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80064b2:	d00d      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 80064b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80064c4:	d004      	beq.n	80064d0 <HAL_RCC_OscConfig+0xeec>
 80064c6:	f44f 7111 	mov.w	r1, #580	; 0x244
 80064ca:	482e      	ldr	r0, [pc, #184]	; (8006584 <HAL_RCC_OscConfig+0xfa0>)
 80064cc:	f7fa f8f5 	bl	80006ba <assert_failed>
 80064d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064d4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80064d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	fa93 f2a3 	rbit	r2, r3
 80064ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80064f4:	601a      	str	r2, [r3, #0]
  return result;
 80064f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80064fe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006500:	fab3 f383 	clz	r3, r3
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800650a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	461a      	mov	r2, r3
 8006512:	2300      	movs	r3, #0
 8006514:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006516:	f7fa fb13 	bl	8000b40 <HAL_GetTick>
 800651a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800651e:	e009      	b.n	8006534 <HAL_RCC_OscConfig+0xf50>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006520:	f7fa fb0e 	bl	8000b40 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0xf50>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e204      	b.n	800693e <HAL_RCC_OscConfig+0x135a>
 8006534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006538:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800653c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006546:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	fa93 f2a3 	rbit	r2, r3
 8006550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006554:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006558:	601a      	str	r2, [r3, #0]
  return result;
 800655a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006562:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006564:	fab3 f383 	clz	r3, r3
 8006568:	b2db      	uxtb	r3, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	d107      	bne.n	8006588 <HAL_RCC_OscConfig+0xfa4>
 8006578:	4b01      	ldr	r3, [pc, #4]	; (8006580 <HAL_RCC_OscConfig+0xf9c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	e02c      	b.n	80065d8 <HAL_RCC_OscConfig+0xff4>
 800657e:	bf00      	nop
 8006580:	40021000 	.word	0x40021000
 8006584:	0800de68 	.word	0x0800de68
 8006588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800658c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800659a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	fa93 f2a3 	rbit	r2, r3
 80065a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065a8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80065b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065c0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	fa93 f2a3 	rbit	r2, r3
 80065ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	4bc9      	ldr	r3, [pc, #804]	; (80068fc <HAL_RCC_OscConfig+0x1318>)
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80065dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80065e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80065e4:	6011      	str	r1, [r2, #0]
 80065e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80065ea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	fa92 f1a2 	rbit	r1, r2
 80065f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80065f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80065fc:	6011      	str	r1, [r2, #0]
  return result;
 80065fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006602:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	fab2 f282 	clz	r2, r2
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	f042 0220 	orr.w	r2, r2, #32
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	f002 021f 	and.w	r2, r2, #31
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f202 	lsl.w	r2, r1, r2
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	f47f af7d 	bne.w	8006520 <HAL_RCC_OscConfig+0xf3c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006626:	4bb5      	ldr	r3, [pc, #724]	; (80068fc <HAL_RCC_OscConfig+0x1318>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800662e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800663a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800663e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	430b      	orrs	r3, r1
 8006648:	49ac      	ldr	r1, [pc, #688]	; (80068fc <HAL_RCC_OscConfig+0x1318>)
 800664a:	4313      	orrs	r3, r2
 800664c:	604b      	str	r3, [r1, #4]
 800664e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006652:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006656:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800665a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006660:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	fa93 f2a3 	rbit	r2, r3
 800666a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800666e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006672:	601a      	str	r2, [r3, #0]
  return result;
 8006674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006678:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800667c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800667e:	fab3 f383 	clz	r3, r3
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	461a      	mov	r2, r3
 8006690:	2301      	movs	r3, #1
 8006692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fa fa54 	bl	8000b40 <HAL_GetTick>
 8006698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800669c:	e009      	b.n	80066b2 <HAL_RCC_OscConfig+0x10ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800669e:	f7fa fa4f 	bl	8000b40 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x10ce>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e145      	b.n	800693e <HAL_RCC_OscConfig+0x135a>
 80066b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80066ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	fa93 f2a3 	rbit	r2, r3
 80066ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80066d6:	601a      	str	r2, [r3, #0]
  return result;
 80066d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80066e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d102      	bne.n	80066fc <HAL_RCC_OscConfig+0x1118>
 80066f6:	4b81      	ldr	r3, [pc, #516]	; (80068fc <HAL_RCC_OscConfig+0x1318>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	e027      	b.n	800674c <HAL_RCC_OscConfig+0x1168>
 80066fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006700:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800670e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	fa93 f2a3 	rbit	r2, r3
 8006718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800671c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006726:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800672a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006734:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	fa93 f2a3 	rbit	r2, r3
 800673e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006742:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	4b6c      	ldr	r3, [pc, #432]	; (80068fc <HAL_RCC_OscConfig+0x1318>)
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006750:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006754:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800675e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	fa92 f1a2 	rbit	r1, r2
 8006768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800676c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006770:	6011      	str	r1, [r2, #0]
  return result;
 8006772:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006776:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	fab2 f282 	clz	r2, r2
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	f042 0220 	orr.w	r2, r2, #32
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	f002 021f 	and.w	r2, r2, #31
 800678c:	2101      	movs	r1, #1
 800678e:	fa01 f202 	lsl.w	r2, r1, r2
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d082      	beq.n	800669e <HAL_RCC_OscConfig+0x10ba>
 8006798:	e0d0      	b.n	800693c <HAL_RCC_OscConfig+0x1358>
 800679a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800679e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80067a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	fa93 f2a3 	rbit	r2, r3
 80067b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80067be:	601a      	str	r2, [r3, #0]
  return result;
 80067c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80067c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ca:	fab3 f383 	clz	r3, r3
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80067d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	461a      	mov	r2, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fa f9ae 	bl	8000b40 <HAL_GetTick>
 80067e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067e8:	e009      	b.n	80067fe <HAL_RCC_OscConfig+0x121a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ea:	f7fa f9a9 	bl	8000b40 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x121a>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e09f      	b.n	800693e <HAL_RCC_OscConfig+0x135a>
 80067fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006802:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800680a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006810:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	fa93 f2a3 	rbit	r2, r3
 800681a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800681e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006822:	601a      	str	r2, [r3, #0]
  return result;
 8006824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006828:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800682c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800682e:	fab3 f383 	clz	r3, r3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b01      	cmp	r3, #1
 8006840:	d102      	bne.n	8006848 <HAL_RCC_OscConfig+0x1264>
 8006842:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <HAL_RCC_OscConfig+0x1318>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	e027      	b.n	8006898 <HAL_RCC_OscConfig+0x12b4>
 8006848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800684c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800685a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	fa93 f2a3 	rbit	r2, r3
 8006864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006868:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006872:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006880:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	fa93 f2a3 	rbit	r2, r3
 800688a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800688e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	4b19      	ldr	r3, [pc, #100]	; (80068fc <HAL_RCC_OscConfig+0x1318>)
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800689c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80068a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80068a4:	6011      	str	r1, [r2, #0]
 80068a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068aa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	fa92 f1a2 	rbit	r1, r2
 80068b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068b8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80068bc:	6011      	str	r1, [r2, #0]
  return result;
 80068be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068c2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	fab2 f282 	clz	r2, r2
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	f042 0220 	orr.w	r2, r2, #32
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	f002 021f 	and.w	r2, r2, #31
 80068d8:	2101      	movs	r1, #1
 80068da:	fa01 f202 	lsl.w	r2, r1, r2
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d182      	bne.n	80067ea <HAL_RCC_OscConfig+0x1206>
 80068e4:	e02a      	b.n	800693c <HAL_RCC_OscConfig+0x1358>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d104      	bne.n	8006900 <HAL_RCC_OscConfig+0x131c>
      {
        return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e021      	b.n	800693e <HAL_RCC_OscConfig+0x135a>
 80068fa:	bf00      	nop
 80068fc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006900:	4b11      	ldr	r3, [pc, #68]	; (8006948 <HAL_RCC_OscConfig+0x1364>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006908:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800690c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	429a      	cmp	r2, r3
 800691e:	d10b      	bne.n	8006938 <HAL_RCC_OscConfig+0x1354>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006920:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006924:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800692c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006934:	429a      	cmp	r2, r3
 8006936:	d001      	beq.n	800693c <HAL_RCC_OscConfig+0x1358>
#endif
        {
          return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <HAL_RCC_OscConfig+0x135a>
        }
      }
    }
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40021000 	.word	0x40021000

0800694c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b09e      	sub	sp, #120	; 0x78
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e205      	b.n	8006d70 <HAL_RCC_ClockConfig+0x424>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d116      	bne.n	800699e <HAL_RCC_ClockConfig+0x52>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d110      	bne.n	800699e <HAL_RCC_ClockConfig+0x52>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <HAL_RCC_ClockConfig+0x52>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_RCC_ClockConfig+0x52>
 8006994:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006998:	489a      	ldr	r0, [pc, #616]	; (8006c04 <HAL_RCC_ClockConfig+0x2b8>)
 800699a:	f7f9 fe8e 	bl	80006ba <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCC_ClockConfig+0x6e>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d007      	beq.n	80069ba <HAL_RCC_ClockConfig+0x6e>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d004      	beq.n	80069ba <HAL_RCC_ClockConfig+0x6e>
 80069b0:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80069b4:	4893      	ldr	r0, [pc, #588]	; (8006c04 <HAL_RCC_ClockConfig+0x2b8>)
 80069b6:	f7f9 fe80 	bl	80006ba <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069ba:	4b93      	ldr	r3, [pc, #588]	; (8006c08 <HAL_RCC_ClockConfig+0x2bc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d910      	bls.n	80069ea <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c8:	4b8f      	ldr	r3, [pc, #572]	; (8006c08 <HAL_RCC_ClockConfig+0x2bc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 0207 	bic.w	r2, r3, #7
 80069d0:	498d      	ldr	r1, [pc, #564]	; (8006c08 <HAL_RCC_ClockConfig+0x2bc>)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d8:	4b8b      	ldr	r3, [pc, #556]	; (8006c08 <HAL_RCC_ClockConfig+0x2bc>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d001      	beq.n	80069ea <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e1c2      	b.n	8006d70 <HAL_RCC_ClockConfig+0x424>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d031      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d024      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d020      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b90      	cmp	r3, #144	; 0x90
 8006a0c:	d01c      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2ba0      	cmp	r3, #160	; 0xa0
 8006a14:	d018      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2bb0      	cmp	r3, #176	; 0xb0
 8006a1c:	d014      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2bc0      	cmp	r3, #192	; 0xc0
 8006a24:	d010      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2bd0      	cmp	r3, #208	; 0xd0
 8006a2c:	d00c      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2be0      	cmp	r3, #224	; 0xe0
 8006a34:	d008      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2bf0      	cmp	r3, #240	; 0xf0
 8006a3c:	d004      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
 8006a3e:	f240 21db 	movw	r1, #731	; 0x2db
 8006a42:	4870      	ldr	r0, [pc, #448]	; (8006c04 <HAL_RCC_ClockConfig+0x2b8>)
 8006a44:	f7f9 fe39 	bl	80006ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a48:	4b70      	ldr	r3, [pc, #448]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	496d      	ldr	r1, [pc, #436]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80f5 	beq.w	8006c52 <HAL_RCC_ClockConfig+0x306>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x13e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d008      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x13e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d004      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x13e>
 8006a80:	f240 21e2 	movw	r1, #738	; 0x2e2
 8006a84:	485f      	ldr	r0, [pc, #380]	; (8006c04 <HAL_RCC_ClockConfig+0x2b8>)
 8006a86:	f7f9 fe18 	bl	80006ba <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d13d      	bne.n	8006b0e <HAL_RCC_ClockConfig+0x1c2>
 8006a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a96:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a9a:	fa93 f3a3 	rbit	r3, r3
 8006a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa2:	fab3 f383 	clz	r3, r3
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f043 0301 	orr.w	r3, r3, #1
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d102      	bne.n	8006abc <HAL_RCC_ClockConfig+0x170>
 8006ab6:	4b55      	ldr	r3, [pc, #340]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	e00f      	b.n	8006adc <HAL_RCC_ClockConfig+0x190>
 8006abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ac4:	fa93 f3a3 	rbit	r3, r3
 8006ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8006aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ace:	663b      	str	r3, [r7, #96]	; 0x60
 8006ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad2:	fa93 f3a3 	rbit	r3, r3
 8006ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ad8:	4b4c      	ldr	r3, [pc, #304]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ae0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae4:	fa92 f2a2 	rbit	r2, r2
 8006ae8:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006aea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aec:	fab2 f282 	clz	r2, r2
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	f042 0220 	orr.w	r2, r2, #32
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	f002 021f 	and.w	r2, r2, #31
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f202 	lsl.w	r2, r1, r2
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 8083 	bne.w	8006c10 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e130      	b.n	8006d70 <HAL_RCC_ClockConfig+0x424>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d13c      	bne.n	8006b90 <HAL_RCC_ClockConfig+0x244>
 8006b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1e:	fa93 f3a3 	rbit	r3, r3
 8006b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b26:	fab3 f383 	clz	r3, r3
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d102      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x1f4>
 8006b3a:	4b34      	ldr	r3, [pc, #208]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	e00f      	b.n	8006b60 <HAL_RCC_ClockConfig+0x214>
 8006b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b48:	fa93 f3a3 	rbit	r3, r3
 8006b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b52:	643b      	str	r3, [r7, #64]	; 0x40
 8006b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b56:	fa93 f3a3 	rbit	r3, r3
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b64:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b68:	fa92 f2a2 	rbit	r2, r2
 8006b6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b70:	fab2 f282 	clz	r2, r2
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	f042 0220 	orr.w	r2, r2, #32
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	f002 021f 	and.w	r2, r2, #31
 8006b80:	2101      	movs	r1, #1
 8006b82:	fa01 f202 	lsl.w	r2, r1, r2
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d141      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0ef      	b.n	8006d70 <HAL_RCC_ClockConfig+0x424>
 8006b90:	2302      	movs	r3, #2
 8006b92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	fa93 f3a3 	rbit	r3, r3
 8006b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9e:	fab3 f383 	clz	r3, r3
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d102      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x26c>
 8006bb2:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	e00d      	b.n	8006bd4 <HAL_RCC_ClockConfig+0x288>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbe:	fa93 f3a3 	rbit	r3, r3
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	fa93 f3a3 	rbit	r3, r3
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <HAL_RCC_ClockConfig+0x2c0>)
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	61ba      	str	r2, [r7, #24]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	fa92 f2a2 	rbit	r2, r2
 8006bde:	617a      	str	r2, [r7, #20]
  return result;
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	fab2 f282 	clz	r2, r2
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	f042 0220 	orr.w	r2, r2, #32
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	f002 021f 	and.w	r2, r2, #31
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d108      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e0b6      	b.n	8006d70 <HAL_RCC_ClockConfig+0x424>
 8006c02:	bf00      	nop
 8006c04:	0800de68 	.word	0x0800de68
 8006c08:	40022000 	.word	0x40022000
 8006c0c:	40021000 	.word	0x40021000
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c10:	4b59      	ldr	r3, [pc, #356]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f023 0203 	bic.w	r2, r3, #3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4956      	ldr	r1, [pc, #344]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c22:	f7f9 ff8d 	bl	8000b40 <HAL_GetTick>
 8006c26:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c28:	e00a      	b.n	8006c40 <HAL_RCC_ClockConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2a:	f7f9 ff89 	bl	8000b40 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_ClockConfig+0x2f4>
      {
        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e097      	b.n	8006d70 <HAL_RCC_ClockConfig+0x424>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c40:	4b4d      	ldr	r3, [pc, #308]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 020c 	and.w	r2, r3, #12
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d1eb      	bne.n	8006c2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c52:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <HAL_RCC_ClockConfig+0x430>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d210      	bcs.n	8006c82 <HAL_RCC_ClockConfig+0x336>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c60:	4b46      	ldr	r3, [pc, #280]	; (8006d7c <HAL_RCC_ClockConfig+0x430>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f023 0207 	bic.w	r2, r3, #7
 8006c68:	4944      	ldr	r1, [pc, #272]	; (8006d7c <HAL_RCC_ClockConfig+0x430>)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c70:	4b42      	ldr	r3, [pc, #264]	; (8006d7c <HAL_RCC_ClockConfig+0x430>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d001      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x336>
    {
      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e076      	b.n	8006d70 <HAL_RCC_ClockConfig+0x424>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d025      	beq.n	8006cda <HAL_RCC_ClockConfig+0x38e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d018      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x37c>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9e:	d013      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x37c>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x37c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cb2:	d009      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x37c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cbc:	d004      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x37c>
 8006cbe:	f240 311e 	movw	r1, #798	; 0x31e
 8006cc2:	482f      	ldr	r0, [pc, #188]	; (8006d80 <HAL_RCC_ClockConfig+0x434>)
 8006cc4:	f7f9 fcf9 	bl	80006ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4928      	ldr	r1, [pc, #160]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d026      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x3e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x3d4>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf6:	d013      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x3d4>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006d00:	d00e      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x3d4>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d0a:	d009      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x3d4>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d14:	d004      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x3d4>
 8006d16:	f240 3125 	movw	r1, #805	; 0x325
 8006d1a:	4819      	ldr	r0, [pc, #100]	; (8006d80 <HAL_RCC_ClockConfig+0x434>)
 8006d1c:	f7f9 fccd 	bl	80006ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d20:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	4912      	ldr	r1, [pc, #72]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006d34:	f000 f82c 	bl	8006d90 <HAL_RCC_GetSysClockFreq>
 8006d38:	4601      	mov	r1, r0
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <HAL_RCC_ClockConfig+0x42c>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d42:	22f0      	movs	r2, #240	; 0xf0
 8006d44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	fa92 f2a2 	rbit	r2, r2
 8006d4c:	60fa      	str	r2, [r7, #12]
  return result;
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	fab2 f282 	clz	r2, r2
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	40d3      	lsrs	r3, r2
 8006d58:	4a0a      	ldr	r2, [pc, #40]	; (8006d84 <HAL_RCC_ClockConfig+0x438>)
 8006d5a:	5cd3      	ldrb	r3, [r2, r3]
 8006d5c:	fa21 f303 	lsr.w	r3, r1, r3
 8006d60:	4a09      	ldr	r2, [pc, #36]	; (8006d88 <HAL_RCC_ClockConfig+0x43c>)
 8006d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <HAL_RCC_ClockConfig+0x440>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7f9 fea5 	bl	8000ab8 <HAL_InitTick>
  
  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3778      	adds	r7, #120	; 0x78
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	40022000 	.word	0x40022000
 8006d80:	0800de68 	.word	0x0800de68
 8006d84:	0800dff0 	.word	0x0800dff0
 8006d88:	20000000 	.word	0x20000000
 8006d8c:	20000004 	.word	0x20000004

08006d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b08b      	sub	sp, #44	; 0x2c
 8006d94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006daa:	4b29      	ldr	r3, [pc, #164]	; (8006e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f003 030c 	and.w	r3, r3, #12
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d002      	beq.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8006dbe:	e03c      	b.n	8006e3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006dc0:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006dc2:	623b      	str	r3, [r7, #32]
      break;
 8006dc4:	e03c      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006dcc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006dd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	fa92 f2a2 	rbit	r2, r2
 8006dd8:	607a      	str	r2, [r7, #4]
  return result;
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	fab2 f282 	clz	r2, r2
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	40d3      	lsrs	r3, r2
 8006de4:	4a1c      	ldr	r2, [pc, #112]	; (8006e58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006de6:	5cd3      	ldrb	r3, [r2, r3]
 8006de8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006dea:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	220f      	movs	r2, #15
 8006df4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	fa92 f2a2 	rbit	r2, r2
 8006dfc:	60fa      	str	r2, [r7, #12]
  return result;
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	fab2 f282 	clz	r2, r2
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	40d3      	lsrs	r3, r2
 8006e08:	4a14      	ldr	r2, [pc, #80]	; (8006e5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e0a:	5cd3      	ldrb	r3, [r2, r3]
 8006e0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006e18:	4a0e      	ldr	r2, [pc, #56]	; (8006e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
 8006e28:	e004      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	4a0c      	ldr	r2, [pc, #48]	; (8006e60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	623b      	str	r3, [r7, #32]
      break;
 8006e38:	e002      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006e3c:	623b      	str	r3, [r7, #32]
      break;
 8006e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e40:	6a3b      	ldr	r3, [r7, #32]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	372c      	adds	r7, #44	; 0x2c
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40021000 	.word	0x40021000
 8006e54:	007a1200 	.word	0x007a1200
 8006e58:	0800e000 	.word	0x0800e000
 8006e5c:	0800e010 	.word	0x0800e010
 8006e60:	003d0900 	.word	0x003d0900

08006e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b092      	sub	sp, #72	; 0x48
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e74:	2300      	movs	r3, #0
 8006e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f5b3 3f4d 	cmp.w	r3, #209920	; 0x33400
 8006e82:	d303      	bcc.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006e84:	2172      	movs	r1, #114	; 0x72
 8006e86:	485f      	ldr	r0, [pc, #380]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8006e88:	f7f9 fc17 	bl	80006ba <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80ed 	beq.w	8007074 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d012      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eaa:	d00d      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb4:	d008      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ebe:	d003      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ec0:	2178      	movs	r1, #120	; 0x78
 8006ec2:	4850      	ldr	r0, [pc, #320]	; (8007004 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8006ec4:	f7f9 fbf9 	bl	80006ba <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ec8:	4b4f      	ldr	r3, [pc, #316]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ed4:	4b4c      	ldr	r3, [pc, #304]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	4a4b      	ldr	r2, [pc, #300]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ede:	61d3      	str	r3, [r2, #28]
 8006ee0:	4b49      	ldr	r3, [pc, #292]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef2:	4b46      	ldr	r3, [pc, #280]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d118      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006efe:	4b43      	ldr	r3, [pc, #268]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a42      	ldr	r2, [pc, #264]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f0a:	f7f9 fe19 	bl	8000b40 <HAL_GetTick>
 8006f0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f10:	e008      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f12:	f7f9 fe15 	bl	8000b40 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b64      	cmp	r3, #100	; 0x64
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e2bc      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f24:	4b39      	ldr	r3, [pc, #228]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0f0      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f30:	4b35      	ldr	r3, [pc, #212]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8086 	beq.w	800704e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d07e      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f50:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	fa93 f3a3 	rbit	r3, r3
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f6a:	fab3 f383 	clz	r3, r3
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b27      	ldr	r3, [pc, #156]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	fa93 f3a3 	rbit	r3, r3
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f8e:	fab3 f383 	clz	r3, r3
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b1e      	ldr	r3, [pc, #120]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006fa2:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d04d      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb2:	f7f9 fdc5 	bl	8000b40 <HAL_GetTick>
 8006fb6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb8:	e00a      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fba:	f7f9 fdc1 	bl	8000b40 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
          {
            return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e266      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x63a>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	fa93 f3a3 	rbit	r3, r3
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
 8006fdc:	2302      	movs	r3, #2
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	fa93 f3a3 	rbit	r3, r3
 8006fe6:	61fb      	str	r3, [r7, #28]
  return result;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fea:	fab3 f383 	clz	r3, r3
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f043 0302 	orr.w	r3, r3, #2
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d10a      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8006ffe:	4b02      	ldr	r3, [pc, #8]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	e00f      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007004:	0800dea0 	.word	0x0800dea0
 8007008:	40021000 	.word	0x40021000
 800700c:	40007000 	.word	0x40007000
 8007010:	10908100 	.word	0x10908100
 8007014:	2302      	movs	r3, #2
 8007016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	fa93 f3a3 	rbit	r3, r3
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	4b89      	ldr	r3, [pc, #548]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	2202      	movs	r2, #2
 8007026:	613a      	str	r2, [r7, #16]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	fa92 f2a2 	rbit	r2, r2
 800702e:	60fa      	str	r2, [r7, #12]
  return result;
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	fab2 f282 	clz	r2, r2
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	f002 021f 	and.w	r2, r2, #31
 8007042:	2101      	movs	r1, #1
 8007044:	fa01 f202 	lsl.w	r2, r1, r2
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0b5      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x156>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800704e:	4b7e      	ldr	r3, [pc, #504]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	497b      	ldr	r1, [pc, #492]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800705c:	4313      	orrs	r3, r2
 800705e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007060:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007064:	2b01      	cmp	r3, #1
 8007066:	d105      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007068:	4b77      	ldr	r3, [pc, #476]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	4a76      	ldr	r2, [pc, #472]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800706e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007072:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01c      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00f      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d00b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d007      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b03      	cmp	r3, #3
 800709e:	d003      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80070a0:	21be      	movs	r1, #190	; 0xbe
 80070a2:	486a      	ldr	r0, [pc, #424]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070a4:	f7f9 fb09 	bl	80006ba <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070a8:	4b67      	ldr	r3, [pc, #412]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	f023 0203 	bic.w	r2, r3, #3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4964      	ldr	r1, [pc, #400]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01f      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d012      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x290>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d6:	d00d      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x290>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070e0:	d008      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x290>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070ea:	d003      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x290>
 80070ec:	21c9      	movs	r1, #201	; 0xc9
 80070ee:	4857      	ldr	r0, [pc, #348]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070f0:	f7f9 fae3 	bl	80006ba <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070f4:	4b54      	ldr	r3, [pc, #336]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4951      	ldr	r1, [pc, #324]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007102:	4313      	orrs	r3, r2
 8007104:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01f      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d012      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007122:	d00d      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800712c:	d008      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007136:	d003      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007138:	21d5      	movs	r1, #213	; 0xd5
 800713a:	4844      	ldr	r0, [pc, #272]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800713c:	f7f9 fabd 	bl	80006ba <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007140:	4b41      	ldr	r3, [pc, #260]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	493e      	ldr	r1, [pc, #248]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800714e:	4313      	orrs	r3, r2
 8007150:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d014      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	2b10      	cmp	r3, #16
 800716c:	d003      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800716e:	21e0      	movs	r1, #224	; 0xe0
 8007170:	4836      	ldr	r0, [pc, #216]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007172:	f7f9 faa2 	bl	80006ba <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007176:	4b34      	ldr	r3, [pc, #208]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	f023 0210 	bic.w	r2, r3, #16
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	4931      	ldr	r1, [pc, #196]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007184:	4313      	orrs	r3, r2
 8007186:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d015      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800719c:	d007      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80071a6:	21ee      	movs	r1, #238	; 0xee
 80071a8:	4828      	ldr	r0, [pc, #160]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071aa:	f7f9 fa86 	bl	80006ba <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80071ae:	4b26      	ldr	r3, [pc, #152]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	4923      	ldr	r1, [pc, #140]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d015      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d004      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80071dc:	f44f 7181 	mov.w	r1, #258	; 0x102
 80071e0:	481a      	ldr	r0, [pc, #104]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071e2:	f7f9 fa6a 	bl	80006ba <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071e6:	4b18      	ldr	r3, [pc, #96]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	f023 0220 	bic.w	r2, r3, #32
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	4915      	ldr	r1, [pc, #84]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d025      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d013      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007214:	d00e      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800721e:	d009      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007228:	d004      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800722a:	f240 1123 	movw	r1, #291	; 0x123
 800722e:	4807      	ldr	r0, [pc, #28]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007230:	f7f9 fa43 	bl	80006ba <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	4901      	ldr	r1, [pc, #4]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007242:	4313      	orrs	r3, r2
 8007244:	630b      	str	r3, [r1, #48]	; 0x30
 8007246:	e003      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007248:	40021000 	.word	0x40021000
 800724c:	0800dea0 	.word	0x0800dea0
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d020      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800726c:	d00e      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007276:	d009      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007280:	d004      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007282:	f240 112d 	movw	r1, #301	; 0x12d
 8007286:	4888      	ldr	r0, [pc, #544]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007288:	f7f9 fa17 	bl	80006ba <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800728c:	4b87      	ldr	r3, [pc, #540]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	4984      	ldr	r1, [pc, #528]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800729a:	4313      	orrs	r3, r2
 800729c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d016      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072ba:	d004      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
 80072bc:	f240 113d 	movw	r1, #317	; 0x13d
 80072c0:	4879      	ldr	r0, [pc, #484]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80072c2:	f7f9 f9fa 	bl	80006ba <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072c6:	4b79      	ldr	r3, [pc, #484]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	4976      	ldr	r1, [pc, #472]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d04d      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x51c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d040      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f4:	d03b      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80072fe:	d036      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8007308:	d031      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8007312:	d02c      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800731c:	d027      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8007326:	d022      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8007330:	d01d      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800733a:	d018      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007344:	d013      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800734e:	d00e      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8007358:	d009      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007362:	d004      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007364:	f240 115d 	movw	r1, #349	; 0x15d
 8007368:	484f      	ldr	r0, [pc, #316]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800736a:	f7f9 f9a6 	bl	80006ba <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800736e:	4b4f      	ldr	r3, [pc, #316]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	494c      	ldr	r1, [pc, #304]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800737c:	4313      	orrs	r3, r2
 800737e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d04d      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	2b00      	cmp	r3, #0
 8007392:	d040      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739c:	d03b      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80073a6:	d036      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80073b0:	d031      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 80073ba:	d02c      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80073c4:	d027      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 80073ce:	d022      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 80073d8:	d01d      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 80073e2:	d018      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073ec:	d013      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 80073f6:	d00e      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8007400:	d009      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007406:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 800740a:	d004      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800740c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8007410:	4825      	ldr	r0, [pc, #148]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007412:	f7f9 f952 	bl	80006ba <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007416:	4b25      	ldr	r3, [pc, #148]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	4922      	ldr	r1, [pc, #136]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007424:	4313      	orrs	r3, r2
 8007426:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d016      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007444:	d004      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8007446:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800744a:	4817      	ldr	r0, [pc, #92]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800744c:	f7f9 f935 	bl	80006ba <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007450:	4b16      	ldr	r3, [pc, #88]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	4913      	ldr	r1, [pc, #76]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800745e:	4313      	orrs	r3, r2
 8007460:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d016      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007472:	2b00      	cmp	r3, #0
 8007474:	d009      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x626>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800747e:	d004      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x626>
 8007480:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8007484:	4808      	ldr	r0, [pc, #32]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007486:	f7f9 f918 	bl	80006ba <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800748a:	4b08      	ldr	r3, [pc, #32]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	4905      	ldr	r1, [pc, #20]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007498:	4313      	orrs	r3, r2
 800749a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3748      	adds	r7, #72	; 0x48
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	0800dea0 	.word	0x0800dea0
 80074ac:	40021000 	.word	0x40021000

080074b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e1e5      	b.n	800788e <HAL_SPI_Init+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a7b      	ldr	r2, [pc, #492]	; (80076b4 <HAL_SPI_Init+0x204>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00e      	beq.n	80074ea <HAL_SPI_Init+0x3a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a79      	ldr	r2, [pc, #484]	; (80076b8 <HAL_SPI_Init+0x208>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d009      	beq.n	80074ea <HAL_SPI_Init+0x3a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a78      	ldr	r2, [pc, #480]	; (80076bc <HAL_SPI_Init+0x20c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d004      	beq.n	80074ea <HAL_SPI_Init+0x3a>
 80074e0:	f240 1147 	movw	r1, #327	; 0x147
 80074e4:	4876      	ldr	r0, [pc, #472]	; (80076c0 <HAL_SPI_Init+0x210>)
 80074e6:	f7f9 f8e8 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d009      	beq.n	8007506 <HAL_SPI_Init+0x56>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074fa:	d004      	beq.n	8007506 <HAL_SPI_Init+0x56>
 80074fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007500:	486f      	ldr	r0, [pc, #444]	; (80076c0 <HAL_SPI_Init+0x210>)
 8007502:	f7f9 f8da 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <HAL_SPI_Init+0x7c>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007516:	d009      	beq.n	800752c <HAL_SPI_Init+0x7c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007520:	d004      	beq.n	800752c <HAL_SPI_Init+0x7c>
 8007522:	f240 1149 	movw	r1, #329	; 0x149
 8007526:	4866      	ldr	r0, [pc, #408]	; (80076c0 <HAL_SPI_Init+0x210>)
 8007528:	f7f9 f8c7 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007534:	d040      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800753e:	d03b      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8007548:	d036      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007552:	d031      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800755c:	d02c      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007566:	d027      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8007570:	d022      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757a:	d01d      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007584:	d018      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800758e:	d013      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007598:	d00e      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a2:	d009      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ac:	d004      	beq.n	80075b8 <HAL_SPI_Init+0x108>
 80075ae:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80075b2:	4843      	ldr	r0, [pc, #268]	; (80076c0 <HAL_SPI_Init+0x210>)
 80075b4:	f7f9 f881 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c0:	d00d      	beq.n	80075de <HAL_SPI_Init+0x12e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_SPI_Init+0x12e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075d2:	d004      	beq.n	80075de <HAL_SPI_Init+0x12e>
 80075d4:	f240 114b 	movw	r1, #331	; 0x14b
 80075d8:	4839      	ldr	r0, [pc, #228]	; (80076c0 <HAL_SPI_Init+0x210>)
 80075da:	f7f9 f86e 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d008      	beq.n	80075f8 <HAL_SPI_Init+0x148>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <HAL_SPI_Init+0x148>
 80075ee:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80075f2:	4833      	ldr	r0, [pc, #204]	; (80076c0 <HAL_SPI_Init+0x210>)
 80075f4:	f7f9 f861 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d020      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d01c      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d018      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	2b18      	cmp	r3, #24
 8007616:	d014      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	2b20      	cmp	r3, #32
 800761e:	d010      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	2b28      	cmp	r3, #40	; 0x28
 8007626:	d00c      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	2b30      	cmp	r3, #48	; 0x30
 800762e:	d008      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	2b38      	cmp	r3, #56	; 0x38
 8007636:	d004      	beq.n	8007642 <HAL_SPI_Init+0x192>
 8007638:	f240 114d 	movw	r1, #333	; 0x14d
 800763c:	4820      	ldr	r0, [pc, #128]	; (80076c0 <HAL_SPI_Init+0x210>)
 800763e:	f7f9 f83c 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d008      	beq.n	800765c <HAL_SPI_Init+0x1ac>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d004      	beq.n	800765c <HAL_SPI_Init+0x1ac>
 8007652:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8007656:	481a      	ldr	r0, [pc, #104]	; (80076c0 <HAL_SPI_Init+0x210>)
 8007658:	f7f9 f82f 	bl	80006ba <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	d008      	beq.n	8007676 <HAL_SPI_Init+0x1c6>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	2b10      	cmp	r3, #16
 800766a:	d004      	beq.n	8007676 <HAL_SPI_Init+0x1c6>
 800766c:	f240 114f 	movw	r1, #335	; 0x14f
 8007670:	4813      	ldr	r0, [pc, #76]	; (80076c0 <HAL_SPI_Init+0x210>)
 8007672:	f7f9 f822 	bl	80006ba <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d151      	bne.n	8007722 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <HAL_SPI_Init+0x1e8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d004      	beq.n	8007698 <HAL_SPI_Init+0x1e8>
 800768e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007692:	480b      	ldr	r0, [pc, #44]	; (80076c0 <HAL_SPI_Init+0x210>)
 8007694:	f7f9 f811 	bl	80006ba <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d011      	beq.n	80076c4 <HAL_SPI_Init+0x214>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d00d      	beq.n	80076c4 <HAL_SPI_Init+0x214>
 80076a8:	f240 1153 	movw	r1, #339	; 0x153
 80076ac:	4804      	ldr	r0, [pc, #16]	; (80076c0 <HAL_SPI_Init+0x210>)
 80076ae:	f7f9 f804 	bl	80006ba <assert_failed>
 80076b2:	e007      	b.n	80076c4 <HAL_SPI_Init+0x214>
 80076b4:	40013000 	.word	0x40013000
 80076b8:	40003800 	.word	0x40003800
 80076bc:	40003c00 	.word	0x40003c00
 80076c0:	0800defc 	.word	0x0800defc

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076cc:	d125      	bne.n	800771a <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d050      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	2b08      	cmp	r3, #8
 80076dc:	d04c      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d048      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	2b18      	cmp	r3, #24
 80076ec:	d044      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	d040      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	2b28      	cmp	r3, #40	; 0x28
 80076fc:	d03c      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	2b30      	cmp	r3, #48	; 0x30
 8007704:	d038      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	2b38      	cmp	r3, #56	; 0x38
 800770c:	d034      	beq.n	8007778 <HAL_SPI_Init+0x2c8>
 800770e:	f240 1157 	movw	r1, #343	; 0x157
 8007712:	4861      	ldr	r0, [pc, #388]	; (8007898 <HAL_SPI_Init+0x3e8>)
 8007714:	f7f8 ffd1 	bl	80006ba <assert_failed>
 8007718:	e02e      	b.n	8007778 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	61da      	str	r2, [r3, #28]
 8007720:	e02a      	b.n	8007778 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d020      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d01c      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	2b10      	cmp	r3, #16
 8007738:	d018      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	2b18      	cmp	r3, #24
 8007740:	d014      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	2b20      	cmp	r3, #32
 8007748:	d010      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	2b28      	cmp	r3, #40	; 0x28
 8007750:	d00c      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	2b30      	cmp	r3, #48	; 0x30
 8007758:	d008      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	2b38      	cmp	r3, #56	; 0x38
 8007760:	d004      	beq.n	800776c <HAL_SPI_Init+0x2bc>
 8007762:	f240 1161 	movw	r1, #353	; 0x161
 8007766:	484c      	ldr	r0, [pc, #304]	; (8007898 <HAL_SPI_Init+0x3e8>)
 8007768:	f7f8 ffa7 	bl	80006ba <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7f8 ffda 	bl	800074c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077b8:	d902      	bls.n	80077c0 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	e002      	b.n	80077c6 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80077c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80077ce:	d007      	beq.n	80077e0 <HAL_SPI_Init+0x330>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077d8:	d002      	beq.n	80077e0 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	ea42 0103 	orr.w	r1, r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	0c1b      	lsrs	r3, r3, #16
 800783c:	f003 0204 	and.w	r2, r3, #4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800785c:	ea42 0103 	orr.w	r1, r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800787c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	0800defc 	.word	0x0800defc

0800789c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e0b9      	b.n	8007a22 <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a5e      	ldr	r2, [pc, #376]	; (8007a2c <HAL_TIM_Base_Init+0x190>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d031      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c0:	d02c      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a5a      	ldr	r2, [pc, #360]	; (8007a30 <HAL_TIM_Base_Init+0x194>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d027      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a58      	ldr	r2, [pc, #352]	; (8007a34 <HAL_TIM_Base_Init+0x198>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d022      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a57      	ldr	r2, [pc, #348]	; (8007a38 <HAL_TIM_Base_Init+0x19c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d01d      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a55      	ldr	r2, [pc, #340]	; (8007a3c <HAL_TIM_Base_Init+0x1a0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d018      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a54      	ldr	r2, [pc, #336]	; (8007a40 <HAL_TIM_Base_Init+0x1a4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d013      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a52      	ldr	r2, [pc, #328]	; (8007a44 <HAL_TIM_Base_Init+0x1a8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00e      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a51      	ldr	r2, [pc, #324]	; (8007a48 <HAL_TIM_Base_Init+0x1ac>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d009      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a4f      	ldr	r2, [pc, #316]	; (8007a4c <HAL_TIM_Base_Init+0x1b0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d004      	beq.n	800791c <HAL_TIM_Base_Init+0x80>
 8007912:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8007916:	484e      	ldr	r0, [pc, #312]	; (8007a50 <HAL_TIM_Base_Init+0x1b4>)
 8007918:	f7f8 fecf 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d014      	beq.n	800794e <HAL_TIM_Base_Init+0xb2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b10      	cmp	r3, #16
 800792a:	d010      	beq.n	800794e <HAL_TIM_Base_Init+0xb2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b20      	cmp	r3, #32
 8007932:	d00c      	beq.n	800794e <HAL_TIM_Base_Init+0xb2>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b40      	cmp	r3, #64	; 0x40
 800793a:	d008      	beq.n	800794e <HAL_TIM_Base_Init+0xb2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b60      	cmp	r3, #96	; 0x60
 8007942:	d004      	beq.n	800794e <HAL_TIM_Base_Init+0xb2>
 8007944:	f240 111b 	movw	r1, #283	; 0x11b
 8007948:	4841      	ldr	r0, [pc, #260]	; (8007a50 <HAL_TIM_Base_Init+0x1b4>)
 800794a:	f7f8 feb6 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00e      	beq.n	8007974 <HAL_TIM_Base_Init+0xd8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795e:	d009      	beq.n	8007974 <HAL_TIM_Base_Init+0xd8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007968:	d004      	beq.n	8007974 <HAL_TIM_Base_Init+0xd8>
 800796a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800796e:	4838      	ldr	r0, [pc, #224]	; (8007a50 <HAL_TIM_Base_Init+0x1b4>)
 8007970:	f7f8 fea3 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <HAL_TIM_Base_Init+0xf2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b80      	cmp	r3, #128	; 0x80
 8007982:	d004      	beq.n	800798e <HAL_TIM_Base_Init+0xf2>
 8007984:	f240 111d 	movw	r1, #285	; 0x11d
 8007988:	4831      	ldr	r0, [pc, #196]	; (8007a50 <HAL_TIM_Base_Init+0x1b4>)
 800798a:	f7f8 fe96 	bl	80006ba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7f8 fff4 	bl	8000990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f001 f812 	bl	80089e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40012c00 	.word	0x40012c00
 8007a30:	40000400 	.word	0x40000400
 8007a34:	40000800 	.word	0x40000800
 8007a38:	40001000 	.word	0x40001000
 8007a3c:	40001400 	.word	0x40001400
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800
 8007a50:	0800df34 	.word	0x0800df34

08007a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e0b9      	b.n	8007bda <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a5e      	ldr	r2, [pc, #376]	; (8007be4 <HAL_TIM_PWM_Init+0x190>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d031      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a78:	d02c      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a5a      	ldr	r2, [pc, #360]	; (8007be8 <HAL_TIM_PWM_Init+0x194>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d027      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a58      	ldr	r2, [pc, #352]	; (8007bec <HAL_TIM_PWM_Init+0x198>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d022      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a57      	ldr	r2, [pc, #348]	; (8007bf0 <HAL_TIM_PWM_Init+0x19c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01d      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a55      	ldr	r2, [pc, #340]	; (8007bf4 <HAL_TIM_PWM_Init+0x1a0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d018      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a54      	ldr	r2, [pc, #336]	; (8007bf8 <HAL_TIM_PWM_Init+0x1a4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a52      	ldr	r2, [pc, #328]	; (8007bfc <HAL_TIM_PWM_Init+0x1a8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a51      	ldr	r2, [pc, #324]	; (8007c00 <HAL_TIM_PWM_Init+0x1ac>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a4f      	ldr	r2, [pc, #316]	; (8007c04 <HAL_TIM_PWM_Init+0x1b0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <HAL_TIM_PWM_Init+0x80>
 8007aca:	f240 5136 	movw	r1, #1334	; 0x536
 8007ace:	484e      	ldr	r0, [pc, #312]	; (8007c08 <HAL_TIM_PWM_Init+0x1b4>)
 8007ad0:	f7f8 fdf3 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d014      	beq.n	8007b06 <HAL_TIM_PWM_Init+0xb2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d010      	beq.n	8007b06 <HAL_TIM_PWM_Init+0xb2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d00c      	beq.n	8007b06 <HAL_TIM_PWM_Init+0xb2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	2b40      	cmp	r3, #64	; 0x40
 8007af2:	d008      	beq.n	8007b06 <HAL_TIM_PWM_Init+0xb2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b60      	cmp	r3, #96	; 0x60
 8007afa:	d004      	beq.n	8007b06 <HAL_TIM_PWM_Init+0xb2>
 8007afc:	f240 5137 	movw	r1, #1335	; 0x537
 8007b00:	4841      	ldr	r0, [pc, #260]	; (8007c08 <HAL_TIM_PWM_Init+0x1b4>)
 8007b02:	f7f8 fdda 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00e      	beq.n	8007b2c <HAL_TIM_PWM_Init+0xd8>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b16:	d009      	beq.n	8007b2c <HAL_TIM_PWM_Init+0xd8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b20:	d004      	beq.n	8007b2c <HAL_TIM_PWM_Init+0xd8>
 8007b22:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 8007b26:	4838      	ldr	r0, [pc, #224]	; (8007c08 <HAL_TIM_PWM_Init+0x1b4>)
 8007b28:	f7f8 fdc7 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_TIM_PWM_Init+0xf2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_PWM_Init+0xf2>
 8007b3c:	f240 5139 	movw	r1, #1337	; 0x539
 8007b40:	4831      	ldr	r0, [pc, #196]	; (8007c08 <HAL_TIM_PWM_Init+0x1b4>)
 8007b42:	f7f8 fdba 	bl	80006ba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f856 	bl	8007c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 ff36 	bl	80089e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40001000 	.word	0x40001000
 8007bf4:	40001400 	.word	0x40001400
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	0800df34 	.word	0x0800df34

08007c0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a7a      	ldr	r2, [pc, #488]	; (8007e18 <HAL_TIM_PWM_Start+0x1f8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d111      	bne.n	8007c58 <HAL_TIM_PWM_Start+0x38>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d078      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d075      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d072      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b0c      	cmp	r3, #12
 8007c4a:	d06f      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d06c      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b14      	cmp	r3, #20
 8007c56:	d069      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c60:	d10b      	bne.n	8007c7a <HAL_TIM_PWM_Start+0x5a>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d061      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d05e      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d05b      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b0c      	cmp	r3, #12
 8007c78:	d058      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a67      	ldr	r2, [pc, #412]	; (8007e1c <HAL_TIM_PWM_Start+0x1fc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d10b      	bne.n	8007c9c <HAL_TIM_PWM_Start+0x7c>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d050      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d04d      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d04a      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b0c      	cmp	r3, #12
 8007c9a:	d047      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a5f      	ldr	r2, [pc, #380]	; (8007e20 <HAL_TIM_PWM_Start+0x200>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d10b      	bne.n	8007cbe <HAL_TIM_PWM_Start+0x9e>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d03f      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d03c      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d039      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b0c      	cmp	r3, #12
 8007cbc:	d036      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a58      	ldr	r2, [pc, #352]	; (8007e24 <HAL_TIM_PWM_Start+0x204>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d111      	bne.n	8007cec <HAL_TIM_PWM_Start+0xcc>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d02e      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d02b      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d028      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b0c      	cmp	r3, #12
 8007cde:	d025      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d022      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b14      	cmp	r3, #20
 8007cea:	d01f      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a4d      	ldr	r2, [pc, #308]	; (8007e28 <HAL_TIM_PWM_Start+0x208>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d105      	bne.n	8007d02 <HAL_TIM_PWM_Start+0xe2>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d017      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d014      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a49      	ldr	r2, [pc, #292]	; (8007e2c <HAL_TIM_PWM_Start+0x20c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d102      	bne.n	8007d12 <HAL_TIM_PWM_Start+0xf2>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00c      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a46      	ldr	r2, [pc, #280]	; (8007e30 <HAL_TIM_PWM_Start+0x210>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d102      	bne.n	8007d22 <HAL_TIM_PWM_Start+0x102>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d004      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x10c>
 8007d22:	f240 51bf 	movw	r1, #1471	; 0x5bf
 8007d26:	4843      	ldr	r0, [pc, #268]	; (8007e34 <HAL_TIM_PWM_Start+0x214>)
 8007d28:	f7f8 fcc7 	bl	80006ba <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <HAL_TIM_PWM_Start+0x126>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	bf14      	ite	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	2300      	moveq	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	e03c      	b.n	8007dc0 <HAL_TIM_PWM_Start+0x1a0>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d109      	bne.n	8007d60 <HAL_TIM_PWM_Start+0x140>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	bf14      	ite	ne
 8007d58:	2301      	movne	r3, #1
 8007d5a:	2300      	moveq	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e02f      	b.n	8007dc0 <HAL_TIM_PWM_Start+0x1a0>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d109      	bne.n	8007d7a <HAL_TIM_PWM_Start+0x15a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	bf14      	ite	ne
 8007d72:	2301      	movne	r3, #1
 8007d74:	2300      	moveq	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	e022      	b.n	8007dc0 <HAL_TIM_PWM_Start+0x1a0>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b0c      	cmp	r3, #12
 8007d7e:	d109      	bne.n	8007d94 <HAL_TIM_PWM_Start+0x174>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	e015      	b.n	8007dc0 <HAL_TIM_PWM_Start+0x1a0>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d109      	bne.n	8007dae <HAL_TIM_PWM_Start+0x18e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	bf14      	ite	ne
 8007da6:	2301      	movne	r3, #1
 8007da8:	2300      	moveq	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	e008      	b.n	8007dc0 <HAL_TIM_PWM_Start+0x1a0>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	bf14      	ite	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	2300      	moveq	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1a8>
  {
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0a7      	b.n	8007f18 <HAL_TIM_PWM_Start+0x2f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d104      	bne.n	8007dd8 <HAL_TIM_PWM_Start+0x1b8>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dd6:	e033      	b.n	8007e40 <HAL_TIM_PWM_Start+0x220>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d104      	bne.n	8007de8 <HAL_TIM_PWM_Start+0x1c8>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2202      	movs	r2, #2
 8007de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007de6:	e02b      	b.n	8007e40 <HAL_TIM_PWM_Start+0x220>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d104      	bne.n	8007df8 <HAL_TIM_PWM_Start+0x1d8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007df6:	e023      	b.n	8007e40 <HAL_TIM_PWM_Start+0x220>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	d104      	bne.n	8007e08 <HAL_TIM_PWM_Start+0x1e8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e06:	e01b      	b.n	8007e40 <HAL_TIM_PWM_Start+0x220>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d114      	bne.n	8007e38 <HAL_TIM_PWM_Start+0x218>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e16:	e013      	b.n	8007e40 <HAL_TIM_PWM_Start+0x220>
 8007e18:	40012c00 	.word	0x40012c00
 8007e1c:	40000400 	.word	0x40000400
 8007e20:	40000800 	.word	0x40000800
 8007e24:	40013400 	.word	0x40013400
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800
 8007e34:	0800df34 	.word	0x0800df34
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 fa55 	bl	80092f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a33      	ldr	r2, [pc, #204]	; (8007f20 <HAL_TIM_PWM_Start+0x300>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d013      	beq.n	8007e80 <HAL_TIM_PWM_Start+0x260>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a31      	ldr	r2, [pc, #196]	; (8007f24 <HAL_TIM_PWM_Start+0x304>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00e      	beq.n	8007e80 <HAL_TIM_PWM_Start+0x260>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a30      	ldr	r2, [pc, #192]	; (8007f28 <HAL_TIM_PWM_Start+0x308>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d009      	beq.n	8007e80 <HAL_TIM_PWM_Start+0x260>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a2e      	ldr	r2, [pc, #184]	; (8007f2c <HAL_TIM_PWM_Start+0x30c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_TIM_PWM_Start+0x260>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a2d      	ldr	r2, [pc, #180]	; (8007f30 <HAL_TIM_PWM_Start+0x310>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIM_PWM_Start+0x264>
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <HAL_TIM_PWM_Start+0x266>
 8007e84:	2300      	movs	r3, #0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d007      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x27a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a20      	ldr	r2, [pc, #128]	; (8007f20 <HAL_TIM_PWM_Start+0x300>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d018      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eac:	d013      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <HAL_TIM_PWM_Start+0x314>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <HAL_TIM_PWM_Start+0x318>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d009      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <HAL_TIM_PWM_Start+0x304>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d004      	beq.n	8007ed6 <HAL_TIM_PWM_Start+0x2b6>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <HAL_TIM_PWM_Start+0x308>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d115      	bne.n	8007f02 <HAL_TIM_PWM_Start+0x2e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	4b17      	ldr	r3, [pc, #92]	; (8007f3c <HAL_TIM_PWM_Start+0x31c>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	d015      	beq.n	8007f14 <HAL_TIM_PWM_Start+0x2f4>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eee:	d011      	beq.n	8007f14 <HAL_TIM_PWM_Start+0x2f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f00:	e008      	b.n	8007f14 <HAL_TIM_PWM_Start+0x2f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0201 	orr.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	e000      	b.n	8007f16 <HAL_TIM_PWM_Start+0x2f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40012c00 	.word	0x40012c00
 8007f24:	40013400 	.word	0x40013400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800
 8007f34:	40000400 	.word	0x40000400
 8007f38:	40000800 	.word	0x40000800
 8007f3c:	00010007 	.word	0x00010007

08007f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d016      	beq.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d013      	beq.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b08      	cmp	r3, #8
 8007f60:	d010      	beq.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b0c      	cmp	r3, #12
 8007f66:	d00d      	beq.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b10      	cmp	r3, #16
 8007f6c:	d00a      	beq.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b14      	cmp	r3, #20
 8007f72:	d007      	beq.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b3c      	cmp	r3, #60	; 0x3c
 8007f78:	d004      	beq.n	8007f84 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f7a:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8007f7e:	4886      	ldr	r0, [pc, #536]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007f80:	f7f8 fb9b 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b60      	cmp	r3, #96	; 0x60
 8007f8a:	d01c      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b70      	cmp	r3, #112	; 0x70
 8007f92:	d018      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a80      	ldr	r2, [pc, #512]	; (800819c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a7f      	ldr	r2, [pc, #508]	; (80081a0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00e      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a7d      	ldr	r2, [pc, #500]	; (80081a4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d009      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a7c      	ldr	r2, [pc, #496]	; (80081a8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fbc:	f241 01b8 	movw	r1, #4280	; 0x10b8
 8007fc0:	4875      	ldr	r0, [pc, #468]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007fc2:	f7f8 fb7a 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d008      	beq.n	8007fe0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d004      	beq.n	8007fe0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007fd6:	f241 01b9 	movw	r1, #4281	; 0x10b9
 8007fda:	486f      	ldr	r0, [pc, #444]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007fdc:	f7f8 fb6d 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <HAL_TIM_PWM_ConfigChannel+0xba>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d004      	beq.n	8007ffa <HAL_TIM_PWM_ConfigChannel+0xba>
 8007ff0:	f241 01ba 	movw	r1, #4282	; 0x10ba
 8007ff4:	4868      	ldr	r0, [pc, #416]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007ff6:	f7f8 fb60 	bl	80006ba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8008004:	2302      	movs	r3, #2
 8008006:	e1c3      	b.n	8008390 <HAL_TIM_PWM_ConfigChannel+0x450>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b14      	cmp	r3, #20
 8008014:	f200 81b4 	bhi.w	8008380 <HAL_TIM_PWM_ConfigChannel+0x440>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008075 	.word	0x08008075
 8008024:	08008381 	.word	0x08008381
 8008028:	08008381 	.word	0x08008381
 800802c:	08008381 	.word	0x08008381
 8008030:	0800810f 	.word	0x0800810f
 8008034:	08008381 	.word	0x08008381
 8008038:	08008381 	.word	0x08008381
 800803c:	08008381 	.word	0x08008381
 8008040:	080081c9 	.word	0x080081c9
 8008044:	08008381 	.word	0x08008381
 8008048:	08008381 	.word	0x08008381
 800804c:	08008381 	.word	0x08008381
 8008050:	08008245 	.word	0x08008245
 8008054:	08008381 	.word	0x08008381
 8008058:	08008381 	.word	0x08008381
 800805c:	08008381 	.word	0x08008381
 8008060:	080082c3 	.word	0x080082c3
 8008064:	08008381 	.word	0x08008381
 8008068:	08008381 	.word	0x08008381
 800806c:	08008381 	.word	0x08008381
 8008070:	08008321 	.word	0x08008321
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a4c      	ldr	r2, [pc, #304]	; (80081ac <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d027      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008086:	d022      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a48      	ldr	r2, [pc, #288]	; (80081b0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d01d      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a47      	ldr	r2, [pc, #284]	; (80081b4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d018      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a45      	ldr	r2, [pc, #276]	; (80081b8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d013      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a44      	ldr	r2, [pc, #272]	; (80081bc <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00e      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a42      	ldr	r2, [pc, #264]	; (80081c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d009      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a41      	ldr	r2, [pc, #260]	; (80081c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d004      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080c4:	f241 01c4 	movw	r1, #4292	; 0x10c4
 80080c8:	4833      	ldr	r0, [pc, #204]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80080ca:	f7f8 faf6 	bl	80006ba <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fd15 	bl	8008b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0208 	orr.w	r2, r2, #8
 80080e8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699a      	ldr	r2, [r3, #24]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0204 	bic.w	r2, r2, #4
 80080f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6999      	ldr	r1, [r3, #24]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	619a      	str	r2, [r3, #24]
      break;
 800810c:	e13b      	b.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a26      	ldr	r2, [pc, #152]	; (80081ac <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d01d      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008120:	d018      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d013      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x214>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00e      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a1f      	ldr	r2, [pc, #124]	; (80081b8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d009      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x214>
 800814a:	f241 01d5 	movw	r1, #4309	; 0x10d5
 800814e:	4812      	ldr	r0, [pc, #72]	; (8008198 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8008150:	f7f8 fab3 	bl	80006ba <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fd8c 	bl	8008c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800816e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800817e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6999      	ldr	r1, [r3, #24]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	021a      	lsls	r2, r3, #8
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	619a      	str	r2, [r3, #24]
      break;
 8008194:	e0f7      	b.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x446>
 8008196:	bf00      	nop
 8008198:	0800df34 	.word	0x0800df34
 800819c:	00010040 	.word	0x00010040
 80081a0:	00010050 	.word	0x00010050
 80081a4:	00010060 	.word	0x00010060
 80081a8:	00010070 	.word	0x00010070
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40013400 	.word	0x40013400
 80081bc:	40014000 	.word	0x40014000
 80081c0:	40014400 	.word	0x40014400
 80081c4:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a72      	ldr	r2, [pc, #456]	; (8008398 <HAL_TIM_PWM_ConfigChannel+0x458>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d018      	beq.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d013      	beq.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a6e      	ldr	r2, [pc, #440]	; (800839c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00e      	beq.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a6d      	ldr	r2, [pc, #436]	; (80083a0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d009      	beq.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a6b      	ldr	r2, [pc, #428]	; (80083a4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d004      	beq.n	8008204 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081fa:	f241 01e6 	movw	r1, #4326	; 0x10e6
 80081fe:	486a      	ldr	r0, [pc, #424]	; (80083a8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 8008200:	f7f8 fa5b 	bl	80006ba <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fde6 	bl	8008ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69da      	ldr	r2, [r3, #28]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0208 	orr.w	r2, r2, #8
 800821e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69da      	ldr	r2, [r3, #28]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0204 	bic.w	r2, r2, #4
 800822e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69d9      	ldr	r1, [r3, #28]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	61da      	str	r2, [r3, #28]
      break;
 8008242:	e0a0      	b.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a53      	ldr	r2, [pc, #332]	; (8008398 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d018      	beq.n	8008280 <HAL_TIM_PWM_ConfigChannel+0x340>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008256:	d013      	beq.n	8008280 <HAL_TIM_PWM_ConfigChannel+0x340>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a4f      	ldr	r2, [pc, #316]	; (800839c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00e      	beq.n	8008280 <HAL_TIM_PWM_ConfigChannel+0x340>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a4e      	ldr	r2, [pc, #312]	; (80083a0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d009      	beq.n	8008280 <HAL_TIM_PWM_ConfigChannel+0x340>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a4c      	ldr	r2, [pc, #304]	; (80083a4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d004      	beq.n	8008280 <HAL_TIM_PWM_ConfigChannel+0x340>
 8008276:	f241 01f7 	movw	r1, #4343	; 0x10f7
 800827a:	484b      	ldr	r0, [pc, #300]	; (80083a8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800827c:	f7f8 fa1d 	bl	80006ba <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fe5a 	bl	8008f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69da      	ldr	r2, [r3, #28]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800829a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69da      	ldr	r2, [r3, #28]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	69d9      	ldr	r1, [r3, #28]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	021a      	lsls	r2, r3, #8
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	61da      	str	r2, [r3, #28]
      break;
 80082c0:	e061      	b.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC5E)
    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a34      	ldr	r2, [pc, #208]	; (8008398 <HAL_TIM_PWM_ConfigChannel+0x458>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d009      	beq.n	80082e0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a34      	ldr	r2, [pc, #208]	; (80083a4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d004      	beq.n	80082e0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80082d6:	f241 1109 	movw	r1, #4361	; 0x1109
 80082da:	4833      	ldr	r0, [pc, #204]	; (80083a8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 80082dc:	f7f8 f9ed 	bl	80006ba <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fea2 	bl	8009030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0208 	orr.w	r2, r2, #8
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0204 	bic.w	r2, r2, #4
 800830a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800831e:	e032      	b.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC6E)
    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a1c      	ldr	r2, [pc, #112]	; (8008398 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d009      	beq.n	800833e <HAL_TIM_PWM_ConfigChannel+0x3fe>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <HAL_TIM_PWM_ConfigChannel+0x464>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_TIM_PWM_ConfigChannel+0x3fe>
 8008334:	f241 111c 	movw	r1, #4380	; 0x111c
 8008338:	481b      	ldr	r0, [pc, #108]	; (80083a8 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800833a:	f7f8 f9be 	bl	80006ba <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fed7 	bl	80090f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008358:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008368:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	021a      	lsls	r2, r3, #8
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800837e:	e002      	b.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x446>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	75fb      	strb	r3, [r7, #23]
      break;
 8008384:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40012c00 	.word	0x40012c00
 800839c:	40000400 	.word	0x40000400
 80083a0:	40000800 	.word	0x40000800
 80083a4:	40013400 	.word	0x40013400
 80083a8:	0800df34 	.word	0x0800df34

080083ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_TIM_ConfigClockSource+0x1c>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e2fc      	b.n	80089c2 <HAL_TIM_ConfigClockSource+0x616>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e0:	d029      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ea:	d024      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d020      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d01c      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b20      	cmp	r3, #32
 8008402:	d018      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b30      	cmp	r3, #48	; 0x30
 800840a:	d014      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	d010      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b50      	cmp	r3, #80	; 0x50
 800841a:	d00c      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b60      	cmp	r3, #96	; 0x60
 8008422:	d008      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b70      	cmp	r3, #112	; 0x70
 800842a:	d004      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x8a>
 800842c:	f241 516a 	movw	r1, #5482	; 0x156a
 8008430:	4880      	ldr	r0, [pc, #512]	; (8008634 <HAL_TIM_ConfigClockSource+0x288>)
 8008432:	f7f8 f942 	bl	80006ba <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008444:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008448:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008450:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008462:	f000 80fb 	beq.w	800865c <HAL_TIM_ConfigClockSource+0x2b0>
 8008466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846a:	f200 829d 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 800846e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008472:	d02d      	beq.n	80084d0 <HAL_TIM_ConfigClockSource+0x124>
 8008474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008478:	f200 8296 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 800847c:	2b70      	cmp	r3, #112	; 0x70
 800847e:	d069      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x1a8>
 8008480:	2b70      	cmp	r3, #112	; 0x70
 8008482:	f200 8291 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008486:	2b60      	cmp	r3, #96	; 0x60
 8008488:	f000 81aa 	beq.w	80087e0 <HAL_TIM_ConfigClockSource+0x434>
 800848c:	2b60      	cmp	r3, #96	; 0x60
 800848e:	f200 828b 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 8008492:	2b50      	cmp	r3, #80	; 0x50
 8008494:	f000 814e 	beq.w	8008734 <HAL_TIM_ConfigClockSource+0x388>
 8008498:	2b50      	cmp	r3, #80	; 0x50
 800849a:	f200 8285 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	f000 8200 	beq.w	80088a4 <HAL_TIM_ConfigClockSource+0x4f8>
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	f200 827f 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 80084aa:	2b30      	cmp	r3, #48	; 0x30
 80084ac:	f000 8250 	beq.w	8008950 <HAL_TIM_ConfigClockSource+0x5a4>
 80084b0:	2b30      	cmp	r3, #48	; 0x30
 80084b2:	f200 8279 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	f000 824a 	beq.w	8008950 <HAL_TIM_ConfigClockSource+0x5a4>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	f200 8273 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8244 	beq.w	8008950 <HAL_TIM_ConfigClockSource+0x5a4>
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	f000 8241 	beq.w	8008950 <HAL_TIM_ConfigClockSource+0x5a4>
 80084ce:	e26b      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x5fc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a58      	ldr	r2, [pc, #352]	; (8008638 <HAL_TIM_ConfigClockSource+0x28c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f000 8269 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e4:	f000 8263 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a53      	ldr	r2, [pc, #332]	; (800863c <HAL_TIM_ConfigClockSource+0x290>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f000 825d 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a51      	ldr	r2, [pc, #324]	; (8008640 <HAL_TIM_ConfigClockSource+0x294>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f000 8257 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a4f      	ldr	r2, [pc, #316]	; (8008644 <HAL_TIM_ConfigClockSource+0x298>)
 8008506:	4293      	cmp	r3, r2
 8008508:	f000 8251 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a4d      	ldr	r2, [pc, #308]	; (8008648 <HAL_TIM_ConfigClockSource+0x29c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	f000 824b 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a4b      	ldr	r2, [pc, #300]	; (800864c <HAL_TIM_ConfigClockSource+0x2a0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	f000 8245 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a49      	ldr	r2, [pc, #292]	; (8008650 <HAL_TIM_ConfigClockSource+0x2a4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	f000 823f 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a47      	ldr	r2, [pc, #284]	; (8008654 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	f000 8239 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a45      	ldr	r2, [pc, #276]	; (8008658 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008542:	4293      	cmp	r3, r2
 8008544:	f000 8233 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x602>
 8008548:	f241 5176 	movw	r1, #5494	; 0x1576
 800854c:	4839      	ldr	r0, [pc, #228]	; (8008634 <HAL_TIM_ConfigClockSource+0x288>)
 800854e:	f7f8 f8b4 	bl	80006ba <assert_failed>
      break;
 8008552:	e22c      	b.n	80089ae <HAL_TIM_ConfigClockSource+0x602>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a37      	ldr	r2, [pc, #220]	; (8008638 <HAL_TIM_ConfigClockSource+0x28c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d018      	beq.n	8008590 <HAL_TIM_ConfigClockSource+0x1e4>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008566:	d013      	beq.n	8008590 <HAL_TIM_ConfigClockSource+0x1e4>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a33      	ldr	r2, [pc, #204]	; (800863c <HAL_TIM_ConfigClockSource+0x290>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00e      	beq.n	8008590 <HAL_TIM_ConfigClockSource+0x1e4>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a32      	ldr	r2, [pc, #200]	; (8008640 <HAL_TIM_ConfigClockSource+0x294>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d009      	beq.n	8008590 <HAL_TIM_ConfigClockSource+0x1e4>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a32      	ldr	r2, [pc, #200]	; (800864c <HAL_TIM_ConfigClockSource+0x2a0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d004      	beq.n	8008590 <HAL_TIM_ConfigClockSource+0x1e4>
 8008586:	f241 517d 	movw	r1, #5501	; 0x157d
 800858a:	482a      	ldr	r0, [pc, #168]	; (8008634 <HAL_TIM_ConfigClockSource+0x288>)
 800858c:	f7f8 f895 	bl	80006ba <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d013      	beq.n	80085c0 <HAL_TIM_ConfigClockSource+0x214>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a0:	d00e      	beq.n	80085c0 <HAL_TIM_ConfigClockSource+0x214>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085aa:	d009      	beq.n	80085c0 <HAL_TIM_ConfigClockSource+0x214>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085b4:	d004      	beq.n	80085c0 <HAL_TIM_ConfigClockSource+0x214>
 80085b6:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 80085ba:	481e      	ldr	r0, [pc, #120]	; (8008634 <HAL_TIM_ConfigClockSource+0x288>)
 80085bc:	f7f8 f87d 	bl	80006ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c8:	d014      	beq.n	80085f4 <HAL_TIM_ConfigClockSource+0x248>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d010      	beq.n	80085f4 <HAL_TIM_ConfigClockSource+0x248>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00c      	beq.n	80085f4 <HAL_TIM_ConfigClockSource+0x248>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d008      	beq.n	80085f4 <HAL_TIM_ConfigClockSource+0x248>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b0a      	cmp	r3, #10
 80085e8:	d004      	beq.n	80085f4 <HAL_TIM_ConfigClockSource+0x248>
 80085ea:	f241 5181 	movw	r1, #5505	; 0x1581
 80085ee:	4811      	ldr	r0, [pc, #68]	; (8008634 <HAL_TIM_ConfigClockSource+0x288>)
 80085f0:	f7f8 f863 	bl	80006ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b0f      	cmp	r3, #15
 80085fa:	d904      	bls.n	8008606 <HAL_TIM_ConfigClockSource+0x25a>
 80085fc:	f241 5182 	movw	r1, #5506	; 0x1582
 8008600:	480c      	ldr	r0, [pc, #48]	; (8008634 <HAL_TIM_ConfigClockSource+0x288>)
 8008602:	f7f8 f85a 	bl	80006ba <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6899      	ldr	r1, [r3, #8]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f000 fe4f 	bl	80092b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	609a      	str	r2, [r3, #8]
      break;
 8008632:	e1bd      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x604>
 8008634:	0800df34 	.word	0x0800df34
 8008638:	40012c00 	.word	0x40012c00
 800863c:	40000400 	.word	0x40000400
 8008640:	40000800 	.word	0x40000800
 8008644:	40001000 	.word	0x40001000
 8008648:	40001400 	.word	0x40001400
 800864c:	40013400 	.word	0x40013400
 8008650:	40014000 	.word	0x40014000
 8008654:	40014400 	.word	0x40014400
 8008658:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a8a      	ldr	r2, [pc, #552]	; (800888c <HAL_TIM_ConfigClockSource+0x4e0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d018      	beq.n	8008698 <HAL_TIM_ConfigClockSource+0x2ec>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866e:	d013      	beq.n	8008698 <HAL_TIM_ConfigClockSource+0x2ec>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a86      	ldr	r2, [pc, #536]	; (8008890 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00e      	beq.n	8008698 <HAL_TIM_ConfigClockSource+0x2ec>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a85      	ldr	r2, [pc, #532]	; (8008894 <HAL_TIM_ConfigClockSource+0x4e8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d009      	beq.n	8008698 <HAL_TIM_ConfigClockSource+0x2ec>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a83      	ldr	r2, [pc, #524]	; (8008898 <HAL_TIM_ConfigClockSource+0x4ec>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d004      	beq.n	8008698 <HAL_TIM_ConfigClockSource+0x2ec>
 800868e:	f241 5195 	movw	r1, #5525	; 0x1595
 8008692:	4882      	ldr	r0, [pc, #520]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 8008694:	f7f8 f811 	bl	80006ba <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d013      	beq.n	80086c8 <HAL_TIM_ConfigClockSource+0x31c>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d00e      	beq.n	80086c8 <HAL_TIM_ConfigClockSource+0x31c>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b2:	d009      	beq.n	80086c8 <HAL_TIM_ConfigClockSource+0x31c>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086bc:	d004      	beq.n	80086c8 <HAL_TIM_ConfigClockSource+0x31c>
 80086be:	f241 5198 	movw	r1, #5528	; 0x1598
 80086c2:	4876      	ldr	r0, [pc, #472]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 80086c4:	f7f7 fff9 	bl	80006ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d0:	d014      	beq.n	80086fc <HAL_TIM_ConfigClockSource+0x350>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d010      	beq.n	80086fc <HAL_TIM_ConfigClockSource+0x350>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00c      	beq.n	80086fc <HAL_TIM_ConfigClockSource+0x350>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d008      	beq.n	80086fc <HAL_TIM_ConfigClockSource+0x350>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b0a      	cmp	r3, #10
 80086f0:	d004      	beq.n	80086fc <HAL_TIM_ConfigClockSource+0x350>
 80086f2:	f241 5199 	movw	r1, #5529	; 0x1599
 80086f6:	4869      	ldr	r0, [pc, #420]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 80086f8:	f7f7 ffdf 	bl	80006ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	2b0f      	cmp	r3, #15
 8008702:	d904      	bls.n	800870e <HAL_TIM_ConfigClockSource+0x362>
 8008704:	f241 519a 	movw	r1, #5530	; 0x159a
 8008708:	4864      	ldr	r0, [pc, #400]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 800870a:	f7f7 ffd6 	bl	80006ba <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6899      	ldr	r1, [r3, #8]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f000 fdcb 	bl	80092b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008730:	609a      	str	r2, [r3, #8]
      break;
 8008732:	e13d      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a54      	ldr	r2, [pc, #336]	; (800888c <HAL_TIM_ConfigClockSource+0x4e0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d01d      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x3ce>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008746:	d018      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x3ce>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a50      	ldr	r2, [pc, #320]	; (8008890 <HAL_TIM_ConfigClockSource+0x4e4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d013      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x3ce>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a4f      	ldr	r2, [pc, #316]	; (8008894 <HAL_TIM_ConfigClockSource+0x4e8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00e      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x3ce>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a4d      	ldr	r2, [pc, #308]	; (8008898 <HAL_TIM_ConfigClockSource+0x4ec>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d009      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x3ce>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a4d      	ldr	r2, [pc, #308]	; (80088a0 <HAL_TIM_ConfigClockSource+0x4f4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d004      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x3ce>
 8008770:	f241 51a9 	movw	r1, #5545	; 0x15a9
 8008774:	4849      	ldr	r0, [pc, #292]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 8008776:	f7f7 ffa0 	bl	80006ba <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008782:	d014      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x402>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d010      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x402>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00c      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x402>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d008      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x402>
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b0a      	cmp	r3, #10
 80087a2:	d004      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x402>
 80087a4:	f241 51ac 	movw	r1, #5548	; 0x15ac
 80087a8:	483c      	ldr	r0, [pc, #240]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 80087aa:	f7f7 ff86 	bl	80006ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	2b0f      	cmp	r3, #15
 80087b4:	d904      	bls.n	80087c0 <HAL_TIM_ConfigClockSource+0x414>
 80087b6:	f241 51ad 	movw	r1, #5549	; 0x15ad
 80087ba:	4838      	ldr	r0, [pc, #224]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 80087bc:	f7f7 ff7d 	bl	80006ba <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	6859      	ldr	r1, [r3, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	461a      	mov	r2, r3
 80087ce:	f000 fcf9 	bl	80091c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2150      	movs	r1, #80	; 0x50
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 fd52 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 80087de:	e0e7      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a29      	ldr	r2, [pc, #164]	; (800888c <HAL_TIM_ConfigClockSource+0x4e0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01d      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x47a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f2:	d018      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x47a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a25      	ldr	r2, [pc, #148]	; (8008890 <HAL_TIM_ConfigClockSource+0x4e4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d013      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x47a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a24      	ldr	r2, [pc, #144]	; (8008894 <HAL_TIM_ConfigClockSource+0x4e8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d00e      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x47a>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a22      	ldr	r2, [pc, #136]	; (8008898 <HAL_TIM_ConfigClockSource+0x4ec>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d009      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x47a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a22      	ldr	r2, [pc, #136]	; (80088a0 <HAL_TIM_ConfigClockSource+0x4f4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d004      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x47a>
 800881c:	f241 51b9 	movw	r1, #5561	; 0x15b9
 8008820:	481e      	ldr	r0, [pc, #120]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 8008822:	f7f7 ff4a 	bl	80006ba <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800882e:	d014      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x4ae>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d010      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x4ae>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00c      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x4ae>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d008      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x4ae>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	2b0a      	cmp	r3, #10
 800884e:	d004      	beq.n	800885a <HAL_TIM_ConfigClockSource+0x4ae>
 8008850:	f241 51bc 	movw	r1, #5564	; 0x15bc
 8008854:	4811      	ldr	r0, [pc, #68]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 8008856:	f7f7 ff30 	bl	80006ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b0f      	cmp	r3, #15
 8008860:	d904      	bls.n	800886c <HAL_TIM_ConfigClockSource+0x4c0>
 8008862:	f241 51bd 	movw	r1, #5565	; 0x15bd
 8008866:	480d      	ldr	r0, [pc, #52]	; (800889c <HAL_TIM_ConfigClockSource+0x4f0>)
 8008868:	f7f7 ff27 	bl	80006ba <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	6859      	ldr	r1, [r3, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	461a      	mov	r2, r3
 800887a:	f000 fcd2 	bl	8009222 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2160      	movs	r1, #96	; 0x60
 8008884:	4618      	mov	r0, r3
 8008886:	f000 fcfc 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 800888a:	e091      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x604>
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40000400 	.word	0x40000400
 8008894:	40000800 	.word	0x40000800
 8008898:	40013400 	.word	0x40013400
 800889c:	0800df34 	.word	0x0800df34
 80088a0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a48      	ldr	r2, [pc, #288]	; (80089cc <HAL_TIM_ConfigClockSource+0x620>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d01d      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x53e>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b6:	d018      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x53e>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a44      	ldr	r2, [pc, #272]	; (80089d0 <HAL_TIM_ConfigClockSource+0x624>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d013      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x53e>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a43      	ldr	r2, [pc, #268]	; (80089d4 <HAL_TIM_ConfigClockSource+0x628>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d00e      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x53e>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a41      	ldr	r2, [pc, #260]	; (80089d8 <HAL_TIM_ConfigClockSource+0x62c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d009      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x53e>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a40      	ldr	r2, [pc, #256]	; (80089dc <HAL_TIM_ConfigClockSource+0x630>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d004      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x53e>
 80088e0:	f241 51c9 	movw	r1, #5577	; 0x15c9
 80088e4:	483e      	ldr	r0, [pc, #248]	; (80089e0 <HAL_TIM_ConfigClockSource+0x634>)
 80088e6:	f7f7 fee8 	bl	80006ba <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088f2:	d014      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x572>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d010      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x572>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00c      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x572>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2b02      	cmp	r3, #2
 800890a:	d008      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x572>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b0a      	cmp	r3, #10
 8008912:	d004      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x572>
 8008914:	f241 51cc 	movw	r1, #5580	; 0x15cc
 8008918:	4831      	ldr	r0, [pc, #196]	; (80089e0 <HAL_TIM_ConfigClockSource+0x634>)
 800891a:	f7f7 fece 	bl	80006ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2b0f      	cmp	r3, #15
 8008924:	d904      	bls.n	8008930 <HAL_TIM_ConfigClockSource+0x584>
 8008926:	f241 51cd 	movw	r1, #5581	; 0x15cd
 800892a:	482d      	ldr	r0, [pc, #180]	; (80089e0 <HAL_TIM_ConfigClockSource+0x634>)
 800892c:	f7f7 fec5 	bl	80006ba <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	6859      	ldr	r1, [r3, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	461a      	mov	r2, r3
 800893e:	f000 fc41 	bl	80091c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2140      	movs	r1, #64	; 0x40
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fc9a 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 800894e:	e02f      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x604>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a1d      	ldr	r2, [pc, #116]	; (80089cc <HAL_TIM_ConfigClockSource+0x620>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d01d      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x5ea>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008962:	d018      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x5ea>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a19      	ldr	r2, [pc, #100]	; (80089d0 <HAL_TIM_ConfigClockSource+0x624>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x5ea>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <HAL_TIM_ConfigClockSource+0x628>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00e      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x5ea>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <HAL_TIM_ConfigClockSource+0x62c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x5ea>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a15      	ldr	r2, [pc, #84]	; (80089dc <HAL_TIM_ConfigClockSource+0x630>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d004      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x5ea>
 800898c:	f241 51dc 	movw	r1, #5596	; 0x15dc
 8008990:	4813      	ldr	r0, [pc, #76]	; (80089e0 <HAL_TIM_ConfigClockSource+0x634>)
 8008992:	f7f7 fe92 	bl	80006ba <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f000 fc6e 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 80089a6:	e003      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x604>
    }

    default:
      status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	73fb      	strb	r3, [r7, #15]
      break;
 80089ac:	e000      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x604>
      break;
 80089ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40012c00 	.word	0x40012c00
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40013400 	.word	0x40013400
 80089dc:	40014000 	.word	0x40014000
 80089e0:	0800df34 	.word	0x0800df34

080089e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a3c      	ldr	r2, [pc, #240]	; (8008ae8 <TIM_Base_SetConfig+0x104>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00f      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a02:	d00b      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a39      	ldr	r2, [pc, #228]	; (8008aec <TIM_Base_SetConfig+0x108>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d007      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a38      	ldr	r2, [pc, #224]	; (8008af0 <TIM_Base_SetConfig+0x10c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_Base_SetConfig+0x38>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a37      	ldr	r2, [pc, #220]	; (8008af4 <TIM_Base_SetConfig+0x110>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d108      	bne.n	8008a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a2d      	ldr	r2, [pc, #180]	; (8008ae8 <TIM_Base_SetConfig+0x104>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d01b      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3c:	d017      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a2a      	ldr	r2, [pc, #168]	; (8008aec <TIM_Base_SetConfig+0x108>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a29      	ldr	r2, [pc, #164]	; (8008af0 <TIM_Base_SetConfig+0x10c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00f      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a28      	ldr	r2, [pc, #160]	; (8008af4 <TIM_Base_SetConfig+0x110>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00b      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a27      	ldr	r2, [pc, #156]	; (8008af8 <TIM_Base_SetConfig+0x114>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d007      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a26      	ldr	r2, [pc, #152]	; (8008afc <TIM_Base_SetConfig+0x118>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_Base_SetConfig+0x8a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a25      	ldr	r2, [pc, #148]	; (8008b00 <TIM_Base_SetConfig+0x11c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d108      	bne.n	8008a80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a10      	ldr	r2, [pc, #64]	; (8008ae8 <TIM_Base_SetConfig+0x104>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00f      	beq.n	8008acc <TIM_Base_SetConfig+0xe8>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a11      	ldr	r2, [pc, #68]	; (8008af4 <TIM_Base_SetConfig+0x110>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00b      	beq.n	8008acc <TIM_Base_SetConfig+0xe8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a10      	ldr	r2, [pc, #64]	; (8008af8 <TIM_Base_SetConfig+0x114>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_Base_SetConfig+0xe8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a0f      	ldr	r2, [pc, #60]	; (8008afc <TIM_Base_SetConfig+0x118>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_Base_SetConfig+0xe8>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a0e      	ldr	r2, [pc, #56]	; (8008b00 <TIM_Base_SetConfig+0x11c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d103      	bne.n	8008ad4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	691a      	ldr	r2, [r3, #16]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	615a      	str	r2, [r3, #20]
}
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40012c00 	.word	0x40012c00
 8008aec:	40000400 	.word	0x40000400
 8008af0:	40000800 	.word	0x40000800
 8008af4:	40013400 	.word	0x40013400
 8008af8:	40014000 	.word	0x40014000
 8008afc:	40014400 	.word	0x40014400
 8008b00:	40014800 	.word	0x40014800

08008b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f023 0201 	bic.w	r2, r3, #1
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f023 0302 	bic.w	r3, r3, #2
 8008b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a40      	ldr	r2, [pc, #256]	; (8008c60 <TIM_OC1_SetConfig+0x15c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d00f      	beq.n	8008b84 <TIM_OC1_SetConfig+0x80>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a3f      	ldr	r2, [pc, #252]	; (8008c64 <TIM_OC1_SetConfig+0x160>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00b      	beq.n	8008b84 <TIM_OC1_SetConfig+0x80>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a3e      	ldr	r2, [pc, #248]	; (8008c68 <TIM_OC1_SetConfig+0x164>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d007      	beq.n	8008b84 <TIM_OC1_SetConfig+0x80>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a3d      	ldr	r2, [pc, #244]	; (8008c6c <TIM_OC1_SetConfig+0x168>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <TIM_OC1_SetConfig+0x80>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a3c      	ldr	r2, [pc, #240]	; (8008c70 <TIM_OC1_SetConfig+0x16c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d119      	bne.n	8008bb8 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <TIM_OC1_SetConfig+0x9a>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d004      	beq.n	8008b9e <TIM_OC1_SetConfig+0x9a>
 8008b94:	f641 318d 	movw	r1, #7053	; 0x1b8d
 8008b98:	4836      	ldr	r0, [pc, #216]	; (8008c74 <TIM_OC1_SetConfig+0x170>)
 8008b9a:	f7f7 fd8e 	bl	80006ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f023 0308 	bic.w	r3, r3, #8
 8008ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f023 0304 	bic.w	r3, r3, #4
 8008bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a29      	ldr	r2, [pc, #164]	; (8008c60 <TIM_OC1_SetConfig+0x15c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00f      	beq.n	8008be0 <TIM_OC1_SetConfig+0xdc>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a28      	ldr	r2, [pc, #160]	; (8008c64 <TIM_OC1_SetConfig+0x160>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00b      	beq.n	8008be0 <TIM_OC1_SetConfig+0xdc>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a27      	ldr	r2, [pc, #156]	; (8008c68 <TIM_OC1_SetConfig+0x164>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d007      	beq.n	8008be0 <TIM_OC1_SetConfig+0xdc>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a26      	ldr	r2, [pc, #152]	; (8008c6c <TIM_OC1_SetConfig+0x168>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_OC1_SetConfig+0xdc>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a25      	ldr	r2, [pc, #148]	; (8008c70 <TIM_OC1_SetConfig+0x16c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d12d      	bne.n	8008c3c <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be8:	d008      	beq.n	8008bfc <TIM_OC1_SetConfig+0xf8>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d004      	beq.n	8008bfc <TIM_OC1_SetConfig+0xf8>
 8008bf2:	f641 319a 	movw	r1, #7066	; 0x1b9a
 8008bf6:	481f      	ldr	r0, [pc, #124]	; (8008c74 <TIM_OC1_SetConfig+0x170>)
 8008bf8:	f7f7 fd5f 	bl	80006ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c04:	d008      	beq.n	8008c18 <TIM_OC1_SetConfig+0x114>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <TIM_OC1_SetConfig+0x114>
 8008c0e:	f641 319b 	movw	r1, #7067	; 0x1b9b
 8008c12:	4818      	ldr	r0, [pc, #96]	; (8008c74 <TIM_OC1_SetConfig+0x170>)
 8008c14:	f7f7 fd51 	bl	80006ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	40012c00 	.word	0x40012c00
 8008c64:	40013400 	.word	0x40013400
 8008c68:	40014000 	.word	0x40014000
 8008c6c:	40014400 	.word	0x40014400
 8008c70:	40014800 	.word	0x40014800
 8008c74:	0800df34 	.word	0x0800df34

08008c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	f023 0210 	bic.w	r2, r3, #16
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f023 0320 	bic.w	r3, r3, #32
 8008cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a3b      	ldr	r2, [pc, #236]	; (8008dc4 <TIM_OC2_SetConfig+0x14c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d003      	beq.n	8008ce4 <TIM_OC2_SetConfig+0x6c>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a3a      	ldr	r2, [pc, #232]	; (8008dc8 <TIM_OC2_SetConfig+0x150>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d11a      	bne.n	8008d1a <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d008      	beq.n	8008cfe <TIM_OC2_SetConfig+0x86>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d004      	beq.n	8008cfe <TIM_OC2_SetConfig+0x86>
 8008cf4:	f641 31d8 	movw	r1, #7128	; 0x1bd8
 8008cf8:	4834      	ldr	r0, [pc, #208]	; (8008dcc <TIM_OC2_SetConfig+0x154>)
 8008cfa:	f7f7 fcde 	bl	80006ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	011b      	lsls	r3, r3, #4
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d18:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a29      	ldr	r2, [pc, #164]	; (8008dc4 <TIM_OC2_SetConfig+0x14c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00f      	beq.n	8008d42 <TIM_OC2_SetConfig+0xca>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a28      	ldr	r2, [pc, #160]	; (8008dc8 <TIM_OC2_SetConfig+0x150>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00b      	beq.n	8008d42 <TIM_OC2_SetConfig+0xca>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a28      	ldr	r2, [pc, #160]	; (8008dd0 <TIM_OC2_SetConfig+0x158>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <TIM_OC2_SetConfig+0xca>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a27      	ldr	r2, [pc, #156]	; (8008dd4 <TIM_OC2_SetConfig+0x15c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d003      	beq.n	8008d42 <TIM_OC2_SetConfig+0xca>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a26      	ldr	r2, [pc, #152]	; (8008dd8 <TIM_OC2_SetConfig+0x160>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d12f      	bne.n	8008da2 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d4a:	d008      	beq.n	8008d5e <TIM_OC2_SetConfig+0xe6>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <TIM_OC2_SetConfig+0xe6>
 8008d54:	f641 31e6 	movw	r1, #7142	; 0x1be6
 8008d58:	481c      	ldr	r0, [pc, #112]	; (8008dcc <TIM_OC2_SetConfig+0x154>)
 8008d5a:	f7f7 fcae 	bl	80006ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d66:	d008      	beq.n	8008d7a <TIM_OC2_SetConfig+0x102>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d004      	beq.n	8008d7a <TIM_OC2_SetConfig+0x102>
 8008d70:	f641 31e7 	movw	r1, #7143	; 0x1be7
 8008d74:	4815      	ldr	r0, [pc, #84]	; (8008dcc <TIM_OC2_SetConfig+0x154>)
 8008d76:	f7f7 fca0 	bl	80006ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d80:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d88:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	621a      	str	r2, [r3, #32]
}
 8008dbc:	bf00      	nop
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40013400 	.word	0x40013400
 8008dcc:	0800df34 	.word	0x0800df34
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40014400 	.word	0x40014400
 8008dd8:	40014800 	.word	0x40014800

08008ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a3b      	ldr	r2, [pc, #236]	; (8008f28 <TIM_OC3_SetConfig+0x14c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d003      	beq.n	8008e46 <TIM_OC3_SetConfig+0x6a>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a3a      	ldr	r2, [pc, #232]	; (8008f2c <TIM_OC3_SetConfig+0x150>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d11a      	bne.n	8008e7c <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <TIM_OC3_SetConfig+0x84>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d004      	beq.n	8008e60 <TIM_OC3_SetConfig+0x84>
 8008e56:	f641 4125 	movw	r1, #7205	; 0x1c25
 8008e5a:	4835      	ldr	r0, [pc, #212]	; (8008f30 <TIM_OC3_SetConfig+0x154>)
 8008e5c:	f7f7 fc2d 	bl	80006ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e7a:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a2a      	ldr	r2, [pc, #168]	; (8008f28 <TIM_OC3_SetConfig+0x14c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00f      	beq.n	8008ea4 <TIM_OC3_SetConfig+0xc8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a29      	ldr	r2, [pc, #164]	; (8008f2c <TIM_OC3_SetConfig+0x150>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00b      	beq.n	8008ea4 <TIM_OC3_SetConfig+0xc8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a29      	ldr	r2, [pc, #164]	; (8008f34 <TIM_OC3_SetConfig+0x158>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d007      	beq.n	8008ea4 <TIM_OC3_SetConfig+0xc8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a28      	ldr	r2, [pc, #160]	; (8008f38 <TIM_OC3_SetConfig+0x15c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_OC3_SetConfig+0xc8>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a27      	ldr	r2, [pc, #156]	; (8008f3c <TIM_OC3_SetConfig+0x160>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d12f      	bne.n	8008f04 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eac:	d008      	beq.n	8008ec0 <TIM_OC3_SetConfig+0xe4>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <TIM_OC3_SetConfig+0xe4>
 8008eb6:	f641 4133 	movw	r1, #7219	; 0x1c33
 8008eba:	481d      	ldr	r0, [pc, #116]	; (8008f30 <TIM_OC3_SetConfig+0x154>)
 8008ebc:	f7f7 fbfd 	bl	80006ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec8:	d008      	beq.n	8008edc <TIM_OC3_SetConfig+0x100>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d004      	beq.n	8008edc <TIM_OC3_SetConfig+0x100>
 8008ed2:	f641 4134 	movw	r1, #7220	; 0x1c34
 8008ed6:	4816      	ldr	r0, [pc, #88]	; (8008f30 <TIM_OC3_SetConfig+0x154>)
 8008ed8:	f7f7 fbef 	bl	80006ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	011b      	lsls	r3, r3, #4
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	621a      	str	r2, [r3, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	40012c00 	.word	0x40012c00
 8008f2c:	40013400 	.word	0x40013400
 8008f30:	0800df34 	.word	0x0800df34
 8008f34:	40014000 	.word	0x40014000
 8008f38:	40014400 	.word	0x40014400
 8008f3c:	40014800 	.word	0x40014800

08008f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	031b      	lsls	r3, r3, #12
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a1e      	ldr	r2, [pc, #120]	; (8009018 <TIM_OC4_SetConfig+0xd8>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00f      	beq.n	8008fc4 <TIM_OC4_SetConfig+0x84>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a1d      	ldr	r2, [pc, #116]	; (800901c <TIM_OC4_SetConfig+0xdc>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d00b      	beq.n	8008fc4 <TIM_OC4_SetConfig+0x84>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a1c      	ldr	r2, [pc, #112]	; (8009020 <TIM_OC4_SetConfig+0xe0>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d007      	beq.n	8008fc4 <TIM_OC4_SetConfig+0x84>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a1b      	ldr	r2, [pc, #108]	; (8009024 <TIM_OC4_SetConfig+0xe4>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d003      	beq.n	8008fc4 <TIM_OC4_SetConfig+0x84>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a1a      	ldr	r2, [pc, #104]	; (8009028 <TIM_OC4_SetConfig+0xe8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d117      	bne.n	8008ff4 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fcc:	d008      	beq.n	8008fe0 <TIM_OC4_SetConfig+0xa0>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d004      	beq.n	8008fe0 <TIM_OC4_SetConfig+0xa0>
 8008fd6:	f641 4174 	movw	r1, #7284	; 0x1c74
 8008fda:	4814      	ldr	r0, [pc, #80]	; (800902c <TIM_OC4_SetConfig+0xec>)
 8008fdc:	f7f7 fb6d 	bl	80006ba <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	019b      	lsls	r3, r3, #6
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	40012c00 	.word	0x40012c00
 800901c:	40013400 	.word	0x40013400
 8009020:	40014000 	.word	0x40014000
 8009024:	40014400 	.word	0x40014400
 8009028:	40014800 	.word	0x40014800
 800902c:	0800df34 	.word	0x0800df34

08009030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800905e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	041b      	lsls	r3, r3, #16
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <TIM_OC5_SetConfig+0xb4>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00f      	beq.n	80090aa <TIM_OC5_SetConfig+0x7a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <TIM_OC5_SetConfig+0xb8>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00b      	beq.n	80090aa <TIM_OC5_SetConfig+0x7a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a15      	ldr	r2, [pc, #84]	; (80090ec <TIM_OC5_SetConfig+0xbc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d007      	beq.n	80090aa <TIM_OC5_SetConfig+0x7a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a14      	ldr	r2, [pc, #80]	; (80090f0 <TIM_OC5_SetConfig+0xc0>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d003      	beq.n	80090aa <TIM_OC5_SetConfig+0x7a>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a13      	ldr	r2, [pc, #76]	; (80090f4 <TIM_OC5_SetConfig+0xc4>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d109      	bne.n	80090be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	021b      	lsls	r3, r3, #8
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	621a      	str	r2, [r3, #32]
}
 80090d8:	bf00      	nop
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40013400 	.word	0x40013400
 80090ec:	40014000 	.word	0x40014000
 80090f0:	40014400 	.word	0x40014400
 80090f4:	40014800 	.word	0x40014800

080090f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800913e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	051b      	lsls	r3, r3, #20
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	4313      	orrs	r3, r2
 800914a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a18      	ldr	r2, [pc, #96]	; (80091b0 <TIM_OC6_SetConfig+0xb8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00f      	beq.n	8009174 <TIM_OC6_SetConfig+0x7c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a17      	ldr	r2, [pc, #92]	; (80091b4 <TIM_OC6_SetConfig+0xbc>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00b      	beq.n	8009174 <TIM_OC6_SetConfig+0x7c>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a16      	ldr	r2, [pc, #88]	; (80091b8 <TIM_OC6_SetConfig+0xc0>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d007      	beq.n	8009174 <TIM_OC6_SetConfig+0x7c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a15      	ldr	r2, [pc, #84]	; (80091bc <TIM_OC6_SetConfig+0xc4>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <TIM_OC6_SetConfig+0x7c>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a14      	ldr	r2, [pc, #80]	; (80091c0 <TIM_OC6_SetConfig+0xc8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d109      	bne.n	8009188 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800917a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	029b      	lsls	r3, r3, #10
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	621a      	str	r2, [r3, #32]
}
 80091a2:	bf00      	nop
 80091a4:	371c      	adds	r7, #28
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40012c00 	.word	0x40012c00
 80091b4:	40013400 	.word	0x40013400
 80091b8:	40014000 	.word	0x40014000
 80091bc:	40014400 	.word	0x40014400
 80091c0:	40014800 	.word	0x40014800

080091c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f023 0201 	bic.w	r2, r3, #1
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f023 030a 	bic.w	r3, r3, #10
 8009200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	621a      	str	r2, [r3, #32]
}
 8009216:	bf00      	nop
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009222:	b480      	push	{r7}
 8009224:	b087      	sub	sp, #28
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f023 0210 	bic.w	r2, r3, #16
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800924c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	031b      	lsls	r3, r3, #12
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800925e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4313      	orrs	r3, r2
 8009268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	621a      	str	r2, [r3, #32]
}
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009282:	b480      	push	{r7}
 8009284:	b085      	sub	sp, #20
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	f043 0307 	orr.w	r3, r3, #7
 80092a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	609a      	str	r2, [r3, #8]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	021a      	lsls	r2, r3, #8
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	431a      	orrs	r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4313      	orrs	r3, r2
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	609a      	str	r2, [r3, #8]
}
 80092ec:	bf00      	nop
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4a2d      	ldr	r2, [pc, #180]	; (80093bc <TIM_CCxChannelCmd+0xc4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d020      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009312:	d01c      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a2a      	ldr	r2, [pc, #168]	; (80093c0 <TIM_CCxChannelCmd+0xc8>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d018      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a29      	ldr	r2, [pc, #164]	; (80093c4 <TIM_CCxChannelCmd+0xcc>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d014      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a28      	ldr	r2, [pc, #160]	; (80093c8 <TIM_CCxChannelCmd+0xd0>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d010      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4a27      	ldr	r2, [pc, #156]	; (80093cc <TIM_CCxChannelCmd+0xd4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00c      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a26      	ldr	r2, [pc, #152]	; (80093d0 <TIM_CCxChannelCmd+0xd8>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d008      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4a25      	ldr	r2, [pc, #148]	; (80093d4 <TIM_CCxChannelCmd+0xdc>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d004      	beq.n	800934e <TIM_CCxChannelCmd+0x56>
 8009344:	f641 61d1 	movw	r1, #7889	; 0x1ed1
 8009348:	4823      	ldr	r0, [pc, #140]	; (80093d8 <TIM_CCxChannelCmd+0xe0>)
 800934a:	f7f7 f9b6 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d016      	beq.n	8009382 <TIM_CCxChannelCmd+0x8a>
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b04      	cmp	r3, #4
 8009358:	d013      	beq.n	8009382 <TIM_CCxChannelCmd+0x8a>
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2b08      	cmp	r3, #8
 800935e:	d010      	beq.n	8009382 <TIM_CCxChannelCmd+0x8a>
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b0c      	cmp	r3, #12
 8009364:	d00d      	beq.n	8009382 <TIM_CCxChannelCmd+0x8a>
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b10      	cmp	r3, #16
 800936a:	d00a      	beq.n	8009382 <TIM_CCxChannelCmd+0x8a>
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b14      	cmp	r3, #20
 8009370:	d007      	beq.n	8009382 <TIM_CCxChannelCmd+0x8a>
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b3c      	cmp	r3, #60	; 0x3c
 8009376:	d004      	beq.n	8009382 <TIM_CCxChannelCmd+0x8a>
 8009378:	f641 61d2 	movw	r1, #7890	; 0x1ed2
 800937c:	4816      	ldr	r0, [pc, #88]	; (80093d8 <TIM_CCxChannelCmd+0xe0>)
 800937e:	f7f7 f99c 	bl	80006ba <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f003 031f 	and.w	r3, r3, #31
 8009388:	2201      	movs	r2, #1
 800938a:	fa02 f303 	lsl.w	r3, r2, r3
 800938e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a1a      	ldr	r2, [r3, #32]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	43db      	mvns	r3, r3
 8009398:	401a      	ands	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1a      	ldr	r2, [r3, #32]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f003 031f 	and.w	r3, r3, #31
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	fa01 f303 	lsl.w	r3, r1, r3
 80093ae:	431a      	orrs	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	621a      	str	r2, [r3, #32]
}
 80093b4:	bf00      	nop
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40012c00 	.word	0x40012c00
 80093c0:	40000400 	.word	0x40000400
 80093c4:	40000800 	.word	0x40000800
 80093c8:	40013400 	.word	0x40013400
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800
 80093d8:	0800df34 	.word	0x0800df34

080093dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a32      	ldr	r2, [pc, #200]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d027      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f8:	d022      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a2e      	ldr	r2, [pc, #184]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d01d      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a2c      	ldr	r2, [pc, #176]	; (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d018      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a2b      	ldr	r2, [pc, #172]	; (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d013      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a29      	ldr	r2, [pc, #164]	; (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00e      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a28      	ldr	r2, [pc, #160]	; (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d009      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a26      	ldr	r2, [pc, #152]	; (80094cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009436:	f240 71b4 	movw	r1, #1972	; 0x7b4
 800943a:	4825      	ldr	r0, [pc, #148]	; (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800943c:	f7f7 f93d 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d020      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b10      	cmp	r3, #16
 800944e:	d01c      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b20      	cmp	r3, #32
 8009456:	d018      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b30      	cmp	r3, #48	; 0x30
 800945e:	d014      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d010      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b50      	cmp	r3, #80	; 0x50
 800946e:	d00c      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b60      	cmp	r3, #96	; 0x60
 8009476:	d008      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b70      	cmp	r3, #112	; 0x70
 800947e:	d004      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009480:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8009484:	4812      	ldr	r0, [pc, #72]	; (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009486:	f7f7 f918 	bl	80006ba <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	2b80      	cmp	r3, #128	; 0x80
 8009490:	d008      	beq.n	80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d004      	beq.n	80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800949a:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800949e:	480c      	ldr	r0, [pc, #48]	; (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80094a0:	f7f7 f90b 	bl	80006ba <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d112      	bne.n	80094d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e0cd      	b.n	800964e <HAL_TIMEx_MasterConfigSynchronization+0x272>
 80094b2:	bf00      	nop
 80094b4:	40012c00 	.word	0x40012c00
 80094b8:	40000400 	.word	0x40000400
 80094bc:	40000800 	.word	0x40000800
 80094c0:	40001000 	.word	0x40001000
 80094c4:	40001400 	.word	0x40001400
 80094c8:	40013400 	.word	0x40013400
 80094cc:	40014000 	.word	0x40014000
 80094d0:	0800df6c 	.word	0x0800df6c
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a57      	ldr	r2, [pc, #348]	; (8009658 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d004      	beq.n	8009508 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a56      	ldr	r2, [pc, #344]	; (800965c <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d161      	bne.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d054      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009518:	d04f      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009522:	d04a      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800952c:	d045      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009536:	d040      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009540:	d03b      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800954a:	d036      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009554:	d031      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800955e:	d02c      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009568:	d027      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8009572:	d022      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800957c:	d01d      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8009586:	d018      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009590:	d013      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800959a:	d00e      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80095a4:	d009      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80095ae:	d004      	beq.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80095b0:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80095b4:	482a      	ldr	r0, [pc, #168]	; (8009660 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80095b6:	f7f7 f880 	bl	80006ba <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a1b      	ldr	r2, [pc, #108]	; (8009658 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d018      	beq.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f8:	d013      	beq.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a19      	ldr	r2, [pc, #100]	; (8009664 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00e      	beq.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a17      	ldr	r2, [pc, #92]	; (8009668 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d009      	beq.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a12      	ldr	r2, [pc, #72]	; (800965c <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d004      	beq.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a13      	ldr	r2, [pc, #76]	; (800966c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d10c      	bne.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0x260>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	4313      	orrs	r3, r2
 8009632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	40012c00 	.word	0x40012c00
 800965c:	40013400 	.word	0x40013400
 8009660:	0800df6c 	.word	0x0800df6c
 8009664:	40000400 	.word	0x40000400
 8009668:	40000800 	.word	0x40000800
 800966c:	40014000 	.word	0x40014000

08009670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009680:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009684:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	b29a      	uxth	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800969e:	b480      	push	{r7}
 80096a0:	b085      	sub	sp, #20
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80096aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	43db      	mvns	r3, r3
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	4013      	ands	r3, r2
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80096d4:	b084      	sub	sp, #16
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	f107 0014 	add.w	r0, r7, #20
 80096e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	b004      	add	sp, #16
 8009714:	4770      	bx	lr
	...

08009718 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009718:	b480      	push	{r7}
 800971a:	b09d      	sub	sp, #116	; 0x74
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800973a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	78db      	ldrb	r3, [r3, #3]
 8009746:	2b03      	cmp	r3, #3
 8009748:	d81f      	bhi.n	800978a <USB_ActivateEndpoint+0x72>
 800974a:	a201      	add	r2, pc, #4	; (adr r2, 8009750 <USB_ActivateEndpoint+0x38>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	08009761 	.word	0x08009761
 8009754:	0800977d 	.word	0x0800977d
 8009758:	08009793 	.word	0x08009793
 800975c:	0800976f 	.word	0x0800976f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009760:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009768:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800976c:	e012      	b.n	8009794 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800976e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009772:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009776:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800977a:	e00b      	b.n	8009794 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800977c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009784:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009788:	e004      	b.n	8009794 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009790:	e000      	b.n	8009794 <USB_ActivateEndpoint+0x7c>
      break;
 8009792:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	441a      	add	r2, r3
 800979e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80097a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	b21b      	sxth	r3, r3
 80097c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ce:	b21a      	sxth	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	b21b      	sxth	r3, r3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	b21b      	sxth	r3, r3
 80097da:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	441a      	add	r2, r3
 80097e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80097ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	7b1b      	ldrb	r3, [r3, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f040 8149 	bne.w	8009a9c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	785b      	ldrb	r3, [r3, #1]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 8084 	beq.w	800991c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	61bb      	str	r3, [r7, #24]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800981e:	b29b      	uxth	r3, r3
 8009820:	461a      	mov	r2, r3
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	4413      	add	r3, r2
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	011a      	lsls	r2, r3, #4
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	88db      	ldrh	r3, [r3, #6]
 800983c:	085b      	lsrs	r3, r3, #1
 800983e:	b29b      	uxth	r3, r3
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	827b      	strh	r3, [r7, #18]
 8009856:	8a7b      	ldrh	r3, [r7, #18]
 8009858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01b      	beq.n	8009898 <USB_ActivateEndpoint+0x180>
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009876:	823b      	strh	r3, [r7, #16]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	441a      	add	r2, r3
 8009882:	8a3b      	ldrh	r3, [r7, #16]
 8009884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800988c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009894:	b29b      	uxth	r3, r3
 8009896:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	78db      	ldrb	r3, [r3, #3]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d020      	beq.n	80098e2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b6:	81bb      	strh	r3, [r7, #12]
 80098b8:	89bb      	ldrh	r3, [r7, #12]
 80098ba:	f083 0320 	eor.w	r3, r3, #32
 80098be:	81bb      	strh	r3, [r7, #12]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	441a      	add	r2, r3
 80098ca:	89bb      	ldrh	r3, [r7, #12]
 80098cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098dc:	b29b      	uxth	r3, r3
 80098de:	8013      	strh	r3, [r2, #0]
 80098e0:	e2a6      	b.n	8009e30 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098f8:	81fb      	strh	r3, [r7, #14]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	441a      	add	r2, r3
 8009904:	89fb      	ldrh	r3, [r7, #14]
 8009906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800990a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800990e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009916:	b29b      	uxth	r3, r3
 8009918:	8013      	strh	r3, [r2, #0]
 800991a:	e289      	b.n	8009e30 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	633b      	str	r3, [r7, #48]	; 0x30
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009926:	b29b      	uxth	r3, r3
 8009928:	461a      	mov	r2, r3
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	4413      	add	r3, r2
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	011a      	lsls	r2, r3, #4
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	4413      	add	r3, r2
 800993a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800993e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	88db      	ldrh	r3, [r3, #6]
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	b29b      	uxth	r3, r3
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800995a:	b29b      	uxth	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	4413      	add	r3, r2
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	011a      	lsls	r2, r3, #4
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	4413      	add	r3, r2
 800996e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d112      	bne.n	80099a2 <USB_ActivateEndpoint+0x28a>
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	b29b      	uxth	r3, r3
 8009982:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009986:	b29a      	uxth	r2, r3
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999a:	b29a      	uxth	r2, r3
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	e02f      	b.n	8009a02 <USB_ActivateEndpoint+0x2ea>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b3e      	cmp	r3, #62	; 0x3e
 80099a8:	d813      	bhi.n	80099d2 <USB_ActivateEndpoint+0x2ba>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <USB_ActivateEndpoint+0x2ac>
 80099be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099c0:	3301      	adds	r3, #1
 80099c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80099c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	029b      	lsls	r3, r3, #10
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	e017      	b.n	8009a02 <USB_ActivateEndpoint+0x2ea>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <USB_ActivateEndpoint+0x2d4>
 80099e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099e8:	3b01      	subs	r3, #1
 80099ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80099ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	029b      	lsls	r3, r3, #10
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009a10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d01b      	beq.n	8009a52 <USB_ActivateEndpoint+0x33a>
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a30:	843b      	strh	r3, [r7, #32]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	441a      	add	r2, r3
 8009a3c:	8c3b      	ldrh	r3, [r7, #32]
 8009a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a68:	83fb      	strh	r3, [r7, #30]
 8009a6a:	8bfb      	ldrh	r3, [r7, #30]
 8009a6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a70:	83fb      	strh	r3, [r7, #30]
 8009a72:	8bfb      	ldrh	r3, [r7, #30]
 8009a74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a78:	83fb      	strh	r3, [r7, #30]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	441a      	add	r2, r3
 8009a84:	8bfb      	ldrh	r3, [r7, #30]
 8009a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	8013      	strh	r3, [r2, #0]
 8009a9a:	e1c9      	b.n	8009e30 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	78db      	ldrb	r3, [r3, #3]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d11e      	bne.n	8009ae2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	441a      	add	r2, r3
 8009ac8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	8013      	strh	r3, [r2, #0]
 8009ae0:	e01d      	b.n	8009b1e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b2e:	4413      	add	r3, r2
 8009b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	011a      	lsls	r2, r3, #4
 8009b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	891b      	ldrh	r3, [r3, #8]
 8009b46:	085b      	lsrs	r3, r3, #1
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b50:	801a      	strh	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	657b      	str	r3, [r7, #84]	; 0x54
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b62:	4413      	add	r3, r2
 8009b64:	657b      	str	r3, [r7, #84]	; 0x54
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	011a      	lsls	r2, r3, #4
 8009b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009b74:	653b      	str	r3, [r7, #80]	; 0x50
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	895b      	ldrh	r3, [r3, #10]
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b84:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	785b      	ldrb	r3, [r3, #1]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f040 8093 	bne.w	8009cb6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009ba0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01b      	beq.n	8009be4 <USB_ActivateEndpoint+0x4cc>
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	441a      	add	r2, r3
 8009bce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009bf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01b      	beq.n	8009c34 <USB_ActivateEndpoint+0x51c>
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c12:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	441a      	add	r2, r3
 8009c1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c52:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	441a      	add	r2, r3
 8009c66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c92:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	441a      	add	r2, r3
 8009c9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	8013      	strh	r3, [r2, #0]
 8009cb4:	e0bc      	b.n	8009e30 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d01d      	beq.n	8009d0e <USB_ActivateEndpoint+0x5f6>
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	441a      	add	r2, r3
 8009cf6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009d1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d01d      	beq.n	8009d66 <USB_ActivateEndpoint+0x64e>
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d40:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	441a      	add	r2, r3
 8009d4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	78db      	ldrb	r3, [r3, #3]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d024      	beq.n	8009db8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d8c:	f083 0320 	eor.w	r3, r3, #32
 8009d90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	8013      	strh	r3, [r2, #0]
 8009db6:	e01d      	b.n	8009df4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	441a      	add	r2, r3
 8009ddc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	881b      	ldrh	r3, [r3, #0]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	441a      	add	r2, r3
 8009e18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009e30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3774      	adds	r7, #116	; 0x74
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b08d      	sub	sp, #52	; 0x34
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	7b1b      	ldrb	r3, [r3, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f040 808e 	bne.w	8009f70 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d044      	beq.n	8009ee6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	81bb      	strh	r3, [r7, #12]
 8009e6a:	89bb      	ldrh	r3, [r7, #12]
 8009e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d01b      	beq.n	8009eac <USB_DeactivateEndpoint+0x6c>
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8a:	817b      	strh	r3, [r7, #10]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	441a      	add	r2, r3
 8009e96:	897b      	ldrh	r3, [r7, #10]
 8009e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec2:	813b      	strh	r3, [r7, #8]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	441a      	add	r2, r3
 8009ece:	893b      	ldrh	r3, [r7, #8]
 8009ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	8013      	strh	r3, [r2, #0]
 8009ee4:	e192      	b.n	800a20c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	827b      	strh	r3, [r7, #18]
 8009ef4:	8a7b      	ldrh	r3, [r7, #18]
 8009ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01b      	beq.n	8009f36 <USB_DeactivateEndpoint+0xf6>
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f14:	823b      	strh	r3, [r7, #16]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	441a      	add	r2, r3
 8009f20:	8a3b      	ldrh	r3, [r7, #16]
 8009f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4c:	81fb      	strh	r3, [r7, #14]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	89fb      	ldrh	r3, [r7, #14]
 8009f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	8013      	strh	r3, [r2, #0]
 8009f6e:	e14d      	b.n	800a20c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f040 80a5 	bne.w	800a0c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	843b      	strh	r3, [r7, #32]
 8009f88:	8c3b      	ldrh	r3, [r7, #32]
 8009f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d01b      	beq.n	8009fca <USB_DeactivateEndpoint+0x18a>
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa8:	83fb      	strh	r3, [r7, #30]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	441a      	add	r2, r3
 8009fb4:	8bfb      	ldrh	r3, [r7, #30]
 8009fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	83bb      	strh	r3, [r7, #28]
 8009fd8:	8bbb      	ldrh	r3, [r7, #28]
 8009fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d01b      	beq.n	800a01a <USB_DeactivateEndpoint+0x1da>
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff8:	837b      	strh	r3, [r7, #26]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	441a      	add	r2, r3
 800a004:	8b7b      	ldrh	r3, [r7, #26]
 800a006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a00e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a012:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a016:	b29b      	uxth	r3, r3
 800a018:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	b29b      	uxth	r3, r3
 800a028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a02c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a030:	833b      	strh	r3, [r7, #24]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	441a      	add	r2, r3
 800a03c:	8b3b      	ldrh	r3, [r7, #24]
 800a03e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a04a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a04e:	b29b      	uxth	r3, r3
 800a050:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a068:	82fb      	strh	r3, [r7, #22]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	441a      	add	r2, r3
 800a074:	8afb      	ldrh	r3, [r7, #22]
 800a076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a086:	b29b      	uxth	r3, r3
 800a088:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0a0:	82bb      	strh	r3, [r7, #20]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	441a      	add	r2, r3
 800a0ac:	8abb      	ldrh	r3, [r7, #20]
 800a0ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	8013      	strh	r3, [r2, #0]
 800a0c2:	e0a3      	b.n	800a20c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a0d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d01b      	beq.n	800a114 <USB_DeactivateEndpoint+0x2d4>
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	441a      	add	r2, r3
 800a0fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a110:	b29b      	uxth	r3, r3
 800a112:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01b      	beq.n	800a164 <USB_DeactivateEndpoint+0x324>
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	881b      	ldrh	r3, [r3, #0]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a142:	853b      	strh	r3, [r7, #40]	; 0x28
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	441a      	add	r2, r3
 800a14e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a15c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a160:	b29b      	uxth	r3, r3
 800a162:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	441a      	add	r2, r3
 800a186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a18c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a198:	b29b      	uxth	r3, r3
 800a19a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	441a      	add	r2, r3
 800a1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ea:	847b      	strh	r3, [r7, #34]	; 0x22
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	441a      	add	r2, r3
 800a1f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a208:	b29b      	uxth	r3, r3
 800a20a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3734      	adds	r7, #52	; 0x34
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b0c2      	sub	sp, #264	; 0x108
 800a21e:	af00      	add	r7, sp, #0
 800a220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a228:	6018      	str	r0, [r3, #0]
 800a22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a232:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	785b      	ldrb	r3, [r3, #1]
 800a240:	2b01      	cmp	r3, #1
 800a242:	f040 867b 	bne.w	800af3c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d908      	bls.n	800a274 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a272:	e007      	b.n	800a284 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	7b1b      	ldrb	r3, [r3, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d13a      	bne.n	800a30a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6959      	ldr	r1, [r3, #20]
 800a2a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	88da      	ldrh	r2, [r3, #6]
 800a2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a2b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a2ba:	6800      	ldr	r0, [r0, #0]
 800a2bc:	f001 fc11 	bl	800bae2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	613b      	str	r3, [r7, #16]
 800a2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]
 800a2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	011a      	lsls	r2, r3, #4
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a300:	b29a      	uxth	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	801a      	strh	r2, [r3, #0]
 800a306:	f000 bde3 	b.w	800aed0 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	78db      	ldrb	r3, [r3, #3]
 800a316:	2b02      	cmp	r3, #2
 800a318:	f040 843a 	bne.w	800ab90 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6a1a      	ldr	r2, [r3, #32]
 800a328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	429a      	cmp	r2, r3
 800a336:	f240 83b7 	bls.w	800aaa8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	b29b      	uxth	r3, r3
 800a358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a35c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a360:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	441a      	add	r2, r3
 800a37e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a38a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a392:	b29b      	uxth	r3, r3
 800a394:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6a1a      	ldr	r2, [r3, #32]
 800a3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a6:	1ad2      	subs	r2, r2, r3
 800a3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 81b3 	beq.w	800a742 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	633b      	str	r3, [r7, #48]	; 0x30
 800a3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	785b      	ldrb	r3, [r3, #1]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d16d      	bne.n	800a4d4 <USB_EPStartXfer+0x2ba>
 800a3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28
 800a404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a412:	b29b      	uxth	r3, r3
 800a414:	461a      	mov	r2, r3
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	4413      	add	r3, r2
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	011a      	lsls	r2, r3, #4
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	4413      	add	r3, r2
 800a42e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
 800a434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d112      	bne.n	800a462 <USB_EPStartXfer+0x248>
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	b29b      	uxth	r3, r3
 800a442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a446:	b29a      	uxth	r2, r3
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	801a      	strh	r2, [r3, #0]
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	b29b      	uxth	r3, r3
 800a452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	e05d      	b.n	800a51e <USB_EPStartXfer+0x304>
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a466:	2b3e      	cmp	r3, #62	; 0x3e
 800a468:	d817      	bhi.n	800a49a <USB_EPStartXfer+0x280>
 800a46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a46e:	085b      	lsrs	r3, r3, #1
 800a470:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d004      	beq.n	800a48a <USB_EPStartXfer+0x270>
 800a480:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a484:	3301      	adds	r3, #1
 800a486:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a48a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a48e:	b29b      	uxth	r3, r3
 800a490:	029b      	lsls	r3, r3, #10
 800a492:	b29a      	uxth	r2, r3
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	801a      	strh	r2, [r3, #0]
 800a498:	e041      	b.n	800a51e <USB_EPStartXfer+0x304>
 800a49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49e:	095b      	lsrs	r3, r3, #5
 800a4a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a8:	f003 031f 	and.w	r3, r3, #31
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d104      	bne.n	800a4ba <USB_EPStartXfer+0x2a0>
 800a4b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	029b      	lsls	r3, r3, #10
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	801a      	strh	r2, [r3, #0]
 800a4d2:	e024      	b.n	800a51e <USB_EPStartXfer+0x304>
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d11c      	bne.n	800a51e <USB_EPStartXfer+0x304>
 800a4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	4413      	add	r3, r2
 800a4fa:	633b      	str	r3, [r7, #48]	; 0x30
 800a4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	011a      	lsls	r2, r3, #4
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	4413      	add	r3, r2
 800a50e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a512:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a518:	b29a      	uxth	r2, r3
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	895b      	ldrh	r3, [r3, #10]
 800a52a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6959      	ldr	r1, [r3, #20]
 800a53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a53e:	b29b      	uxth	r3, r3
 800a540:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a544:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a548:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a54c:	6800      	ldr	r0, [r0, #0]
 800a54e:	f001 fac8 	bl	800bae2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	695a      	ldr	r2, [r3, #20]
 800a55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a562:	441a      	add	r2, r3
 800a564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6a1a      	ldr	r2, [r3, #32]
 800a57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d90f      	bls.n	800a5ac <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6a1a      	ldr	r2, [r3, #32]
 800a598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59c:	1ad2      	subs	r2, r2, r3
 800a59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	621a      	str	r2, [r3, #32]
 800a5aa:	e00e      	b.n	800a5ca <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	785b      	ldrb	r3, [r3, #1]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d16d      	bne.n	800a6b6 <USB_EPStartXfer+0x49c>
 800a5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	61bb      	str	r3, [r7, #24]
 800a5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	011a      	lsls	r2, r3, #4
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	4413      	add	r3, r2
 800a610:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a614:	617b      	str	r3, [r7, #20]
 800a616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d112      	bne.n	800a644 <USB_EPStartXfer+0x42a>
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	b29b      	uxth	r3, r3
 800a624:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a628:	b29a      	uxth	r2, r3
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	801a      	strh	r2, [r3, #0]
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	b29b      	uxth	r3, r3
 800a634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	801a      	strh	r2, [r3, #0]
 800a642:	e063      	b.n	800a70c <USB_EPStartXfer+0x4f2>
 800a644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a648:	2b3e      	cmp	r3, #62	; 0x3e
 800a64a:	d817      	bhi.n	800a67c <USB_EPStartXfer+0x462>
 800a64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a650:	085b      	lsrs	r3, r3, #1
 800a652:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d004      	beq.n	800a66c <USB_EPStartXfer+0x452>
 800a662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a666:	3301      	adds	r3, #1
 800a668:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a66c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a670:	b29b      	uxth	r3, r3
 800a672:	029b      	lsls	r3, r3, #10
 800a674:	b29a      	uxth	r2, r3
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	801a      	strh	r2, [r3, #0]
 800a67a:	e047      	b.n	800a70c <USB_EPStartXfer+0x4f2>
 800a67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a680:	095b      	lsrs	r3, r3, #5
 800a682:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68a:	f003 031f 	and.w	r3, r3, #31
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d104      	bne.n	800a69c <USB_EPStartXfer+0x482>
 800a692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a696:	3b01      	subs	r3, #1
 800a698:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a69c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	029b      	lsls	r3, r3, #10
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	801a      	strh	r2, [r3, #0]
 800a6b4:	e02a      	b.n	800a70c <USB_EPStartXfer+0x4f2>
 800a6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	785b      	ldrb	r3, [r3, #1]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d122      	bne.n	800a70c <USB_EPStartXfer+0x4f2>
 800a6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	623b      	str	r3, [r7, #32]
 800a6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	623b      	str	r3, [r7, #32]
 800a6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	011a      	lsls	r2, r3, #4
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a700:	61fb      	str	r3, [r7, #28]
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	b29a      	uxth	r2, r3
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	891b      	ldrh	r3, [r3, #8]
 800a718:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6959      	ldr	r1, [r3, #20]
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a732:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a736:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a73a:	6800      	ldr	r0, [r0, #0]
 800a73c:	f001 f9d1 	bl	800bae2 <USB_WritePMA>
 800a740:	e3c6      	b.n	800aed0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d16d      	bne.n	800a82e <USB_EPStartXfer+0x614>
 800a752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a772:	4413      	add	r3, r2
 800a774:	64bb      	str	r3, [r7, #72]	; 0x48
 800a776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	011a      	lsls	r2, r3, #4
 800a784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a786:	4413      	add	r3, r2
 800a788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a78c:	647b      	str	r3, [r7, #68]	; 0x44
 800a78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a792:	2b00      	cmp	r3, #0
 800a794:	d112      	bne.n	800a7bc <USB_EPStartXfer+0x5a2>
 800a796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a4:	801a      	strh	r2, [r3, #0]
 800a7a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b8:	801a      	strh	r2, [r3, #0]
 800a7ba:	e063      	b.n	800a884 <USB_EPStartXfer+0x66a>
 800a7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c0:	2b3e      	cmp	r3, #62	; 0x3e
 800a7c2:	d817      	bhi.n	800a7f4 <USB_EPStartXfer+0x5da>
 800a7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c8:	085b      	lsrs	r3, r3, #1
 800a7ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d004      	beq.n	800a7e4 <USB_EPStartXfer+0x5ca>
 800a7da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7de:	3301      	adds	r3, #1
 800a7e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	029b      	lsls	r3, r3, #10
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f0:	801a      	strh	r2, [r3, #0]
 800a7f2:	e047      	b.n	800a884 <USB_EPStartXfer+0x66a>
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f8:	095b      	lsrs	r3, r3, #5
 800a7fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a802:	f003 031f 	and.w	r3, r3, #31
 800a806:	2b00      	cmp	r3, #0
 800a808:	d104      	bne.n	800a814 <USB_EPStartXfer+0x5fa>
 800a80a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a80e:	3b01      	subs	r3, #1
 800a810:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a814:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a818:	b29b      	uxth	r3, r3
 800a81a:	029b      	lsls	r3, r3, #10
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a826:	b29a      	uxth	r2, r3
 800a828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a82a:	801a      	strh	r2, [r3, #0]
 800a82c:	e02a      	b.n	800a884 <USB_EPStartXfer+0x66a>
 800a82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d122      	bne.n	800a884 <USB_EPStartXfer+0x66a>
 800a83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	653b      	str	r3, [r7, #80]	; 0x50
 800a84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a858:	b29b      	uxth	r3, r3
 800a85a:	461a      	mov	r2, r3
 800a85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a85e:	4413      	add	r3, r2
 800a860:	653b      	str	r3, [r7, #80]	; 0x50
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	011a      	lsls	r2, r3, #4
 800a870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a872:	4413      	add	r3, r2
 800a874:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87e:	b29a      	uxth	r2, r3
 800a880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a882:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	891b      	ldrh	r3, [r3, #8]
 800a890:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6959      	ldr	r1, [r3, #20]
 800a8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a8aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a8ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a8b2:	6800      	ldr	r0, [r0, #0]
 800a8b4:	f001 f915 	bl	800bae2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	695a      	ldr	r2, [r3, #20]
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c8:	441a      	add	r2, r3
 800a8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6a1a      	ldr	r2, [r3, #32]
 800a8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d90f      	bls.n	800a912 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6a1a      	ldr	r2, [r3, #32]
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a902:	1ad2      	subs	r2, r2, r3
 800a904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	621a      	str	r2, [r3, #32]
 800a910:	e00e      	b.n	800a930 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2200      	movs	r2, #0
 800a92e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	643b      	str	r3, [r7, #64]	; 0x40
 800a93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d16d      	bne.n	800aa28 <USB_EPStartXfer+0x80e>
 800a94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	63bb      	str	r3, [r7, #56]	; 0x38
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a966:	b29b      	uxth	r3, r3
 800a968:	461a      	mov	r2, r3
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	4413      	add	r3, r2
 800a96e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	011a      	lsls	r2, r3, #4
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	4413      	add	r3, r2
 800a982:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a986:	637b      	str	r3, [r7, #52]	; 0x34
 800a988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d112      	bne.n	800a9b6 <USB_EPStartXfer+0x79c>
 800a990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	b29b      	uxth	r3, r3
 800a996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99e:	801a      	strh	r2, [r3, #0]
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b2:	801a      	strh	r2, [r3, #0]
 800a9b4:	e05d      	b.n	800aa72 <USB_EPStartXfer+0x858>
 800a9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a9bc:	d817      	bhi.n	800a9ee <USB_EPStartXfer+0x7d4>
 800a9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c2:	085b      	lsrs	r3, r3, #1
 800a9c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <USB_EPStartXfer+0x7c4>
 800a9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d8:	3301      	adds	r3, #1
 800a9da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	029b      	lsls	r3, r3, #10
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	e041      	b.n	800aa72 <USB_EPStartXfer+0x858>
 800a9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f2:	095b      	lsrs	r3, r3, #5
 800a9f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fc:	f003 031f 	and.w	r3, r3, #31
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d104      	bne.n	800aa0e <USB_EPStartXfer+0x7f4>
 800aa04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	029b      	lsls	r3, r3, #10
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	e024      	b.n	800aa72 <USB_EPStartXfer+0x858>
 800aa28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	785b      	ldrb	r3, [r3, #1]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d11c      	bne.n	800aa72 <USB_EPStartXfer+0x858>
 800aa38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa4c:	4413      	add	r3, r2
 800aa4e:	643b      	str	r3, [r7, #64]	; 0x40
 800aa50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	011a      	lsls	r2, r3, #4
 800aa5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa60:	4413      	add	r3, r2
 800aa62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	895b      	ldrh	r3, [r3, #10]
 800aa7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6959      	ldr	r1, [r3, #20]
 800aa8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aaa0:	6800      	ldr	r0, [r0, #0]
 800aaa2:	f001 f81e 	bl	800bae2 <USB_WritePMA>
 800aaa6:	e213      	b.n	800aed0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aaa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aade:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	441a      	add	r2, r3
 800aafc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ab00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ab14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab34:	4413      	add	r3, r2
 800ab36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	011a      	lsls	r2, r3, #4
 800ab46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab48:	4413      	add	r3, r2
 800ab4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	891b      	ldrh	r3, [r3, #8]
 800ab66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6959      	ldr	r1, [r3, #20]
 800ab76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab88:	6800      	ldr	r0, [r0, #0]
 800ab8a:	f000 ffaa 	bl	800bae2 <USB_WritePMA>
 800ab8e:	e19f      	b.n	800aed0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6a1a      	ldr	r2, [r3, #32]
 800ab9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba0:	1ad2      	subs	r2, r2, r3
 800aba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800abae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 80bc 	beq.w	800ad4e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	673b      	str	r3, [r7, #112]	; 0x70
 800abe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	785b      	ldrb	r3, [r3, #1]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d16d      	bne.n	800acce <USB_EPStartXfer+0xab4>
 800abf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	66bb      	str	r3, [r7, #104]	; 0x68
 800abfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	461a      	mov	r2, r3
 800ac10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac12:	4413      	add	r3, r2
 800ac14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	011a      	lsls	r2, r3, #4
 800ac24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac26:	4413      	add	r3, r2
 800ac28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac2c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d112      	bne.n	800ac5c <USB_EPStartXfer+0xa42>
 800ac36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac44:	801a      	strh	r2, [r3, #0]
 800ac46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac58:	801a      	strh	r2, [r3, #0]
 800ac5a:	e05d      	b.n	800ad18 <USB_EPStartXfer+0xafe>
 800ac5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac60:	2b3e      	cmp	r3, #62	; 0x3e
 800ac62:	d817      	bhi.n	800ac94 <USB_EPStartXfer+0xa7a>
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	085b      	lsrs	r3, r3, #1
 800ac6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d004      	beq.n	800ac84 <USB_EPStartXfer+0xa6a>
 800ac7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac7e:	3301      	adds	r3, #1
 800ac80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	029b      	lsls	r3, r3, #10
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac90:	801a      	strh	r2, [r3, #0]
 800ac92:	e041      	b.n	800ad18 <USB_EPStartXfer+0xafe>
 800ac94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac98:	095b      	lsrs	r3, r3, #5
 800ac9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca2:	f003 031f 	and.w	r3, r3, #31
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d104      	bne.n	800acb4 <USB_EPStartXfer+0xa9a>
 800acaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800acae:	3b01      	subs	r3, #1
 800acb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800acb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800acb8:	b29b      	uxth	r3, r3
 800acba:	029b      	lsls	r3, r3, #10
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acca:	801a      	strh	r2, [r3, #0]
 800accc:	e024      	b.n	800ad18 <USB_EPStartXfer+0xafe>
 800acce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d11c      	bne.n	800ad18 <USB_EPStartXfer+0xafe>
 800acde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acec:	b29b      	uxth	r3, r3
 800acee:	461a      	mov	r2, r3
 800acf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acf2:	4413      	add	r3, r2
 800acf4:	673b      	str	r3, [r7, #112]	; 0x70
 800acf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	011a      	lsls	r2, r3, #4
 800ad04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad06:	4413      	add	r3, r2
 800ad08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ad18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	895b      	ldrh	r3, [r3, #10]
 800ad24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6959      	ldr	r1, [r3, #20]
 800ad34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad46:	6800      	ldr	r0, [r0, #0]
 800ad48:	f000 fecb 	bl	800bae2 <USB_WritePMA>
 800ad4c:	e0c0      	b.n	800aed0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	785b      	ldrb	r3, [r3, #1]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d16d      	bne.n	800ae3a <USB_EPStartXfer+0xc20>
 800ad5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad7e:	4413      	add	r3, r2
 800ad80:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	011a      	lsls	r2, r3, #4
 800ad90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad92:	4413      	add	r3, r2
 800ad94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad98:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d112      	bne.n	800adc8 <USB_EPStartXfer+0xbae>
 800ada2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adac:	b29a      	uxth	r2, r3
 800adae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb0:	801a      	strh	r2, [r3, #0]
 800adb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adc4:	801a      	strh	r2, [r3, #0]
 800adc6:	e069      	b.n	800ae9c <USB_EPStartXfer+0xc82>
 800adc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adcc:	2b3e      	cmp	r3, #62	; 0x3e
 800adce:	d817      	bhi.n	800ae00 <USB_EPStartXfer+0xbe6>
 800add0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d004      	beq.n	800adf0 <USB_EPStartXfer+0xbd6>
 800ade6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adea:	3301      	adds	r3, #1
 800adec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	029b      	lsls	r3, r3, #10
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adfc:	801a      	strh	r2, [r3, #0]
 800adfe:	e04d      	b.n	800ae9c <USB_EPStartXfer+0xc82>
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae04:	095b      	lsrs	r3, r3, #5
 800ae06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0e:	f003 031f 	and.w	r3, r3, #31
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d104      	bne.n	800ae20 <USB_EPStartXfer+0xc06>
 800ae16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	029b      	lsls	r3, r3, #10
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	e030      	b.n	800ae9c <USB_EPStartXfer+0xc82>
 800ae3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d128      	bne.n	800ae9c <USB_EPStartXfer+0xc82>
 800ae4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	461a      	mov	r2, r3
 800ae6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae6e:	4413      	add	r3, r2
 800ae70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	011a      	lsls	r2, r3, #4
 800ae82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae86:	4413      	add	r3, r2
 800ae88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	891b      	ldrh	r3, [r3, #8]
 800aea8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aeac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6959      	ldr	r1, [r3, #20]
 800aeb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aec2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aec6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aeca:	6800      	ldr	r0, [r0, #0]
 800aecc:	f000 fe09 	bl	800bae2 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aef6:	817b      	strh	r3, [r7, #10]
 800aef8:	897b      	ldrh	r3, [r7, #10]
 800aefa:	f083 0310 	eor.w	r3, r3, #16
 800aefe:	817b      	strh	r3, [r7, #10]
 800af00:	897b      	ldrh	r3, [r7, #10]
 800af02:	f083 0320 	eor.w	r3, r3, #32
 800af06:	817b      	strh	r3, [r7, #10]
 800af08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	441a      	add	r2, r3
 800af22:	897b      	ldrh	r3, [r7, #10]
 800af24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af34:	b29b      	uxth	r3, r3
 800af36:	8013      	strh	r3, [r2, #0]
 800af38:	f000 bc9f 	b.w	800b87a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800af3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	7b1b      	ldrb	r3, [r3, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f040 80ae 	bne.w	800b0aa <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800af4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	699a      	ldr	r2, [r3, #24]
 800af5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	429a      	cmp	r2, r3
 800af68:	d917      	bls.n	800af9a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800af6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800af7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8a:	1ad2      	subs	r2, r2, r3
 800af8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	619a      	str	r2, [r3, #24]
 800af98:	e00e      	b.n	800afb8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800af9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800afaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2200      	movs	r2, #0
 800afb6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800afb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	461a      	mov	r2, r3
 800afd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afdc:	4413      	add	r3, r2
 800afde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	011a      	lsls	r2, r3, #4
 800aff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aff4:	4413      	add	r3, r2
 800aff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800affa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	2b00      	cmp	r3, #0
 800b004:	d116      	bne.n	800b034 <USB_EPStartXfer+0xe1a>
 800b006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b012:	b29a      	uxth	r2, r3
 800b014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b018:	801a      	strh	r2, [r3, #0]
 800b01a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	b29b      	uxth	r3, r3
 800b022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b030:	801a      	strh	r2, [r3, #0]
 800b032:	e3e8      	b.n	800b806 <USB_EPStartXfer+0x15ec>
 800b034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b038:	2b3e      	cmp	r3, #62	; 0x3e
 800b03a:	d818      	bhi.n	800b06e <USB_EPStartXfer+0xe54>
 800b03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b040:	085b      	lsrs	r3, r3, #1
 800b042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d004      	beq.n	800b05c <USB_EPStartXfer+0xe42>
 800b052:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b056:	3301      	adds	r3, #1
 800b058:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b05c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b060:	b29b      	uxth	r3, r3
 800b062:	029b      	lsls	r3, r3, #10
 800b064:	b29a      	uxth	r2, r3
 800b066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	e3cb      	b.n	800b806 <USB_EPStartXfer+0x15ec>
 800b06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b072:	095b      	lsrs	r3, r3, #5
 800b074:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07c:	f003 031f 	and.w	r3, r3, #31
 800b080:	2b00      	cmp	r3, #0
 800b082:	d104      	bne.n	800b08e <USB_EPStartXfer+0xe74>
 800b084:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b088:	3b01      	subs	r3, #1
 800b08a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b08e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b092:	b29b      	uxth	r3, r3
 800b094:	029b      	lsls	r3, r3, #10
 800b096:	b29b      	uxth	r3, r3
 800b098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0a6:	801a      	strh	r2, [r3, #0]
 800b0a8:	e3ad      	b.n	800b806 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	78db      	ldrb	r3, [r3, #3]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	f040 8200 	bne.w	800b4bc <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f040 8091 	bne.w	800b1f0 <USB_EPStartXfer+0xfd6>
 800b0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	011a      	lsls	r2, r3, #4
 800b106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b10a:	4413      	add	r3, r2
 800b10c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d116      	bne.n	800b152 <USB_EPStartXfer+0xf38>
 800b124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b130:	b29a      	uxth	r2, r3
 800b132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b136:	801a      	strh	r2, [r3, #0]
 800b138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	b29b      	uxth	r3, r3
 800b140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b148:	b29a      	uxth	r2, r3
 800b14a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b14e:	801a      	strh	r2, [r3, #0]
 800b150:	e083      	b.n	800b25a <USB_EPStartXfer+0x1040>
 800b152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	2b3e      	cmp	r3, #62	; 0x3e
 800b160:	d820      	bhi.n	800b1a4 <USB_EPStartXfer+0xf8a>
 800b162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	d004      	beq.n	800b192 <USB_EPStartXfer+0xf78>
 800b188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18c:	3301      	adds	r3, #1
 800b18e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b196:	b29b      	uxth	r3, r3
 800b198:	029b      	lsls	r3, r3, #10
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1a0:	801a      	strh	r2, [r3, #0]
 800b1a2:	e05a      	b.n	800b25a <USB_EPStartXfer+0x1040>
 800b1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	095b      	lsrs	r3, r3, #5
 800b1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 031f 	and.w	r3, r3, #31
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <USB_EPStartXfer+0xfba>
 800b1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	029b      	lsls	r3, r3, #10
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1ec:	801a      	strh	r2, [r3, #0]
 800b1ee:	e034      	b.n	800b25a <USB_EPStartXfer+0x1040>
 800b1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	785b      	ldrb	r3, [r3, #1]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d12c      	bne.n	800b25a <USB_EPStartXfer+0x1040>
 800b200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	461a      	mov	r2, r3
 800b220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b224:	4413      	add	r3, r2
 800b226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	011a      	lsls	r2, r3, #4
 800b238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b23c:	4413      	add	r3, r2
 800b23e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	b29a      	uxth	r2, r3
 800b254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b258:	801a      	strh	r2, [r3, #0]
 800b25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b26c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	785b      	ldrb	r3, [r3, #1]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f040 8091 	bne.w	800b39c <USB_EPStartXfer+0x1182>
 800b27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b296:	b29b      	uxth	r3, r3
 800b298:	461a      	mov	r2, r3
 800b29a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b29e:	4413      	add	r3, r2
 800b2a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	011a      	lsls	r2, r3, #4
 800b2b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b2bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d116      	bne.n	800b2fe <USB_EPStartXfer+0x10e4>
 800b2d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2e2:	801a      	strh	r2, [r3, #0]
 800b2e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2fa:	801a      	strh	r2, [r3, #0]
 800b2fc:	e07c      	b.n	800b3f8 <USB_EPStartXfer+0x11de>
 800b2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	2b3e      	cmp	r3, #62	; 0x3e
 800b30c:	d820      	bhi.n	800b350 <USB_EPStartXfer+0x1136>
 800b30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <USB_EPStartXfer+0x1124>
 800b334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b338:	3301      	adds	r3, #1
 800b33a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b342:	b29b      	uxth	r3, r3
 800b344:	029b      	lsls	r3, r3, #10
 800b346:	b29a      	uxth	r2, r3
 800b348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b34c:	801a      	strh	r2, [r3, #0]
 800b34e:	e053      	b.n	800b3f8 <USB_EPStartXfer+0x11de>
 800b350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	095b      	lsrs	r3, r3, #5
 800b35e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f003 031f 	and.w	r3, r3, #31
 800b372:	2b00      	cmp	r3, #0
 800b374:	d104      	bne.n	800b380 <USB_EPStartXfer+0x1166>
 800b376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b37a:	3b01      	subs	r3, #1
 800b37c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b384:	b29b      	uxth	r3, r3
 800b386:	029b      	lsls	r3, r3, #10
 800b388:	b29b      	uxth	r3, r3
 800b38a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b38e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b392:	b29a      	uxth	r2, r3
 800b394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b398:	801a      	strh	r2, [r3, #0]
 800b39a:	e02d      	b.n	800b3f8 <USB_EPStartXfer+0x11de>
 800b39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	785b      	ldrb	r3, [r3, #1]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d125      	bne.n	800b3f8 <USB_EPStartXfer+0x11de>
 800b3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	011a      	lsls	r2, r3, #4
 800b3d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3da:	4413      	add	r3, r2
 800b3dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b3e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 81fe 	beq.w	800b806 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b40e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b42a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b42e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <USB_EPStartXfer+0x1228>
 800b436:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10d      	bne.n	800b45e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b442:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f040 81db 	bne.w	800b806 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b450:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f040 81d4 	bne.w	800b806 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b484:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	441a      	add	r2, r3
 800b4a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b4a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	8013      	strh	r3, [r2, #0]
 800b4ba:	e1a4      	b.n	800b806 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	78db      	ldrb	r3, [r3, #3]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	f040 819a 	bne.w	800b802 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	699a      	ldr	r2, [r3, #24]
 800b4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d917      	bls.n	800b51a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	699a      	ldr	r2, [r3, #24]
 800b506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50a:	1ad2      	subs	r2, r2, r3
 800b50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	619a      	str	r2, [r3, #24]
 800b518:	e00e      	b.n	800b538 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2200      	movs	r2, #0
 800b536:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b53c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	785b      	ldrb	r3, [r3, #1]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d178      	bne.n	800b63a <USB_EPStartXfer+0x1420>
 800b548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b564:	b29b      	uxth	r3, r3
 800b566:	461a      	mov	r2, r3
 800b568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b56c:	4413      	add	r3, r2
 800b56e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	011a      	lsls	r2, r3, #4
 800b580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b584:	4413      	add	r3, r2
 800b586:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b58a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b592:	2b00      	cmp	r3, #0
 800b594:	d116      	bne.n	800b5c4 <USB_EPStartXfer+0x13aa>
 800b596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5ae:	881b      	ldrh	r3, [r3, #0]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5c0:	801a      	strh	r2, [r3, #0]
 800b5c2:	e06b      	b.n	800b69c <USB_EPStartXfer+0x1482>
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	2b3e      	cmp	r3, #62	; 0x3e
 800b5ca:	d818      	bhi.n	800b5fe <USB_EPStartXfer+0x13e4>
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	085b      	lsrs	r3, r3, #1
 800b5d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d004      	beq.n	800b5ec <USB_EPStartXfer+0x13d2>
 800b5e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	029b      	lsls	r3, r3, #10
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	e04e      	b.n	800b69c <USB_EPStartXfer+0x1482>
 800b5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b602:	095b      	lsrs	r3, r3, #5
 800b604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	f003 031f 	and.w	r3, r3, #31
 800b610:	2b00      	cmp	r3, #0
 800b612:	d104      	bne.n	800b61e <USB_EPStartXfer+0x1404>
 800b614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b618:	3b01      	subs	r3, #1
 800b61a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b61e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b622:	b29b      	uxth	r3, r3
 800b624:	029b      	lsls	r3, r3, #10
 800b626:	b29b      	uxth	r3, r3
 800b628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b62c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b630:	b29a      	uxth	r2, r3
 800b632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b636:	801a      	strh	r2, [r3, #0]
 800b638:	e030      	b.n	800b69c <USB_EPStartXfer+0x1482>
 800b63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	785b      	ldrb	r3, [r3, #1]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d128      	bne.n	800b69c <USB_EPStartXfer+0x1482>
 800b64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b666:	b29b      	uxth	r3, r3
 800b668:	461a      	mov	r2, r3
 800b66a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b66e:	4413      	add	r3, r2
 800b670:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	011a      	lsls	r2, r3, #4
 800b682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b686:	4413      	add	r3, r2
 800b688:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b68c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b694:	b29a      	uxth	r2, r3
 800b696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b69a:	801a      	strh	r2, [r3, #0]
 800b69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d178      	bne.n	800b7ac <USB_EPStartXfer+0x1592>
 800b6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	461a      	mov	r2, r3
 800b6da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6de:	4413      	add	r3, r2
 800b6e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	011a      	lsls	r2, r3, #4
 800b6f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6f6:	4413      	add	r3, r2
 800b6f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b6fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b704:	2b00      	cmp	r3, #0
 800b706:	d116      	bne.n	800b736 <USB_EPStartXfer+0x151c>
 800b708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b714:	b29a      	uxth	r2, r3
 800b716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b71a:	801a      	strh	r2, [r3, #0]
 800b71c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	b29b      	uxth	r3, r3
 800b724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e067      	b.n	800b806 <USB_EPStartXfer+0x15ec>
 800b736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b73a:	2b3e      	cmp	r3, #62	; 0x3e
 800b73c:	d818      	bhi.n	800b770 <USB_EPStartXfer+0x1556>
 800b73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	d004      	beq.n	800b75e <USB_EPStartXfer+0x1544>
 800b754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b758:	3301      	adds	r3, #1
 800b75a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b75e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b762:	b29b      	uxth	r3, r3
 800b764:	029b      	lsls	r3, r3, #10
 800b766:	b29a      	uxth	r2, r3
 800b768:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b76c:	801a      	strh	r2, [r3, #0]
 800b76e:	e04a      	b.n	800b806 <USB_EPStartXfer+0x15ec>
 800b770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b774:	095b      	lsrs	r3, r3, #5
 800b776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77e:	f003 031f 	and.w	r3, r3, #31
 800b782:	2b00      	cmp	r3, #0
 800b784:	d104      	bne.n	800b790 <USB_EPStartXfer+0x1576>
 800b786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b78a:	3b01      	subs	r3, #1
 800b78c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b794:	b29b      	uxth	r3, r3
 800b796:	029b      	lsls	r3, r3, #10
 800b798:	b29b      	uxth	r3, r3
 800b79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7a8:	801a      	strh	r2, [r3, #0]
 800b7aa:	e02c      	b.n	800b806 <USB_EPStartXfer+0x15ec>
 800b7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	785b      	ldrb	r3, [r3, #1]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d124      	bne.n	800b806 <USB_EPStartXfer+0x15ec>
 800b7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	011a      	lsls	r2, r3, #4
 800b7e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b7f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7fe:	801a      	strh	r2, [r3, #0]
 800b800:	e001      	b.n	800b806 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e03a      	b.n	800b87c <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b80a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b830:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b834:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b838:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b83c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b844:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	441a      	add	r2, r3
 800b862:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b86a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b86e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b876:	b29b      	uxth	r3, r3
 800b878:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b886:	b480      	push	{r7}
 800b888:	b085      	sub	sp, #20
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	785b      	ldrb	r3, [r3, #1]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d020      	beq.n	800b8da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ae:	81bb      	strh	r3, [r7, #12]
 800b8b0:	89bb      	ldrh	r3, [r7, #12]
 800b8b2:	f083 0310 	eor.w	r3, r3, #16
 800b8b6:	81bb      	strh	r3, [r7, #12]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	441a      	add	r2, r3
 800b8c2:	89bb      	ldrh	r3, [r7, #12]
 800b8c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	8013      	strh	r3, [r2, #0]
 800b8d8:	e01f      	b.n	800b91a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8f0:	81fb      	strh	r3, [r7, #14]
 800b8f2:	89fb      	ldrh	r3, [r7, #14]
 800b8f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b8f8:	81fb      	strh	r3, [r7, #14]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	441a      	add	r2, r3
 800b904:	89fb      	ldrh	r3, [r7, #14]
 800b906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b90a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b90e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b916:	b29b      	uxth	r3, r3
 800b918:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b928:	b480      	push	{r7}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	7b1b      	ldrb	r3, [r3, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 809d 	bne.w	800ba76 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	785b      	ldrb	r3, [r3, #1]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d04c      	beq.n	800b9de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	823b      	strh	r3, [r7, #16]
 800b952:	8a3b      	ldrh	r3, [r7, #16]
 800b954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01b      	beq.n	800b994 <USB_EPClearStall+0x6c>
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b96e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b972:	81fb      	strh	r3, [r7, #14]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	441a      	add	r2, r3
 800b97e:	89fb      	ldrh	r3, [r7, #14]
 800b980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b98c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b990:	b29b      	uxth	r3, r3
 800b992:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	78db      	ldrb	r3, [r3, #3]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d06c      	beq.n	800ba76 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	881b      	ldrh	r3, [r3, #0]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9b2:	81bb      	strh	r3, [r7, #12]
 800b9b4:	89bb      	ldrh	r3, [r7, #12]
 800b9b6:	f083 0320 	eor.w	r3, r3, #32
 800b9ba:	81bb      	strh	r3, [r7, #12]
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	441a      	add	r2, r3
 800b9c6:	89bb      	ldrh	r3, [r7, #12]
 800b9c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	8013      	strh	r3, [r2, #0]
 800b9dc:	e04b      	b.n	800ba76 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	82fb      	strh	r3, [r7, #22]
 800b9ec:	8afb      	ldrh	r3, [r7, #22]
 800b9ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d01b      	beq.n	800ba2e <USB_EPClearStall+0x106>
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba0c:	82bb      	strh	r3, [r7, #20]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	441a      	add	r2, r3
 800ba18:	8abb      	ldrh	r3, [r7, #20]
 800ba1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4413      	add	r3, r2
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba44:	827b      	strh	r3, [r7, #18]
 800ba46:	8a7b      	ldrh	r3, [r7, #18]
 800ba48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba4c:	827b      	strh	r3, [r7, #18]
 800ba4e:	8a7b      	ldrh	r3, [r7, #18]
 800ba50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba54:	827b      	strh	r3, [r7, #18]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	441a      	add	r2, r3
 800ba60:	8a7b      	ldrh	r3, [r7, #18]
 800ba62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d103      	bne.n	800ba9e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2280      	movs	r2, #128	; 0x80
 800ba9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b085      	sub	sp, #20
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bad4:	68fb      	ldr	r3, [r7, #12]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b08d      	sub	sp, #52	; 0x34
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	4611      	mov	r1, r2
 800baee:	461a      	mov	r2, r3
 800baf0:	460b      	mov	r3, r1
 800baf2:	80fb      	strh	r3, [r7, #6]
 800baf4:	4613      	mov	r3, r2
 800baf6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800baf8:	88bb      	ldrh	r3, [r7, #4]
 800bafa:	3301      	adds	r3, #1
 800bafc:	085b      	lsrs	r3, r3, #1
 800bafe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb08:	88fb      	ldrh	r3, [r7, #6]
 800bb0a:	005a      	lsls	r2, r3, #1
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb14:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb1a:	e01e      	b.n	800bb5a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	3301      	adds	r3, #1
 800bb26:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	021b      	lsls	r3, r3, #8
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	461a      	mov	r2, r3
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	3302      	adds	r3, #2
 800bb46:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	3302      	adds	r3, #2
 800bb4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	3301      	adds	r3, #1
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb56:	3b01      	subs	r3, #1
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1dd      	bne.n	800bb1c <USB_WritePMA+0x3a>
  }
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	3734      	adds	r7, #52	; 0x34
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b08b      	sub	sp, #44	; 0x2c
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	60f8      	str	r0, [r7, #12]
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	4611      	mov	r1, r2
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	80fb      	strh	r3, [r7, #6]
 800bb80:	4613      	mov	r3, r2
 800bb82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bb84:	88bb      	ldrh	r3, [r7, #4]
 800bb86:	085b      	lsrs	r3, r3, #1
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb94:	88fb      	ldrh	r3, [r7, #6]
 800bb96:	005a      	lsls	r2, r3, #1
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bba0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	627b      	str	r3, [r7, #36]	; 0x24
 800bba6:	e01b      	b.n	800bbe0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	3302      	adds	r3, #2
 800bbb4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	0a1b      	lsrs	r3, r3, #8
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	3302      	adds	r3, #2
 800bbd8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1e0      	bne.n	800bba8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bbe6:	88bb      	ldrh	r3, [r7, #4]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d007      	beq.n	800bc02 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	701a      	strb	r2, [r3, #0]
  }
}
 800bc02:	bf00      	nop
 800bc04:	372c      	adds	r7, #44	; 0x2c
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7c1b      	ldrb	r3, [r3, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d115      	bne.n	800bc52 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	2181      	movs	r1, #129	; 0x81
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 feb9 	bl	800d9a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc3e:	2202      	movs	r2, #2
 800bc40:	2101      	movs	r1, #1
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f001 feaf 	bl	800d9a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bc50:	e012      	b.n	800bc78 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc52:	2340      	movs	r3, #64	; 0x40
 800bc54:	2202      	movs	r2, #2
 800bc56:	2181      	movs	r1, #129	; 0x81
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 fea4 	bl	800d9a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc64:	2340      	movs	r3, #64	; 0x40
 800bc66:	2202      	movs	r2, #2
 800bc68:	2101      	movs	r1, #1
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f001 fe9b 	bl	800d9a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc78:	2308      	movs	r3, #8
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	2182      	movs	r1, #130	; 0x82
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f001 fe91 	bl	800d9a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc8a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc8e:	f001 ffb3 	bl	800dbf8 <USBD_static_malloc>
 800bc92:	4602      	mov	r2, r0
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d102      	bne.n	800bcaa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bca4:	2301      	movs	r3, #1
 800bca6:	73fb      	strb	r3, [r7, #15]
 800bca8:	e026      	b.n	800bcf8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	7c1b      	ldrb	r3, [r3, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d109      	bne.n	800bce8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcde:	2101      	movs	r1, #1
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 ff52 	bl	800db8a <USBD_LL_PrepareReceive>
 800bce6:	e007      	b.n	800bcf8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcee:	2340      	movs	r3, #64	; 0x40
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f001 ff49 	bl	800db8a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b084      	sub	sp, #16
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd12:	2181      	movs	r1, #129	; 0x81
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f001 fe6c 	bl	800d9f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd20:	2101      	movs	r1, #1
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f001 fe65 	bl	800d9f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bd30:	2182      	movs	r1, #130	; 0x82
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f001 fe5d 	bl	800d9f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00e      	beq.n	800bd66 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f001 ff5b 	bl	800dc14 <USBD_static_free>
    pdev->pClassData = NULL;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd80:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d039      	beq.n	800be0e <USBD_CDC_Setup+0x9e>
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d17f      	bne.n	800be9e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	88db      	ldrh	r3, [r3, #6]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d029      	beq.n	800bdfa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	b25b      	sxtb	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	da11      	bge.n	800bdd4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bdbc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	88d2      	ldrh	r2, [r2, #6]
 800bdc2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bdc4:	6939      	ldr	r1, [r7, #16]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	88db      	ldrh	r3, [r3, #6]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f001 fa14 	bl	800d1fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bdd2:	e06b      	b.n	800beac <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	785a      	ldrb	r2, [r3, #1]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	88db      	ldrh	r3, [r3, #6]
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bdea:	6939      	ldr	r1, [r7, #16]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	88db      	ldrh	r3, [r3, #6]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f001 fa2f 	bl	800d256 <USBD_CtlPrepareRx>
      break;
 800bdf8:	e058      	b.n	800beac <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	7850      	ldrb	r0, [r2, #1]
 800be06:	2200      	movs	r2, #0
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	4798      	blx	r3
      break;
 800be0c:	e04e      	b.n	800beac <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b0b      	cmp	r3, #11
 800be14:	d02e      	beq.n	800be74 <USBD_CDC_Setup+0x104>
 800be16:	2b0b      	cmp	r3, #11
 800be18:	dc38      	bgt.n	800be8c <USBD_CDC_Setup+0x11c>
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <USBD_CDC_Setup+0xb4>
 800be1e:	2b0a      	cmp	r3, #10
 800be20:	d014      	beq.n	800be4c <USBD_CDC_Setup+0xdc>
 800be22:	e033      	b.n	800be8c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d107      	bne.n	800be3e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	2202      	movs	r2, #2
 800be34:	4619      	mov	r1, r3
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f001 f9df 	bl	800d1fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be3c:	e02e      	b.n	800be9c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f001 f96f 	bl	800d124 <USBD_CtlError>
            ret = USBD_FAIL;
 800be46:	2302      	movs	r3, #2
 800be48:	75fb      	strb	r3, [r7, #23]
          break;
 800be4a:	e027      	b.n	800be9c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be52:	2b03      	cmp	r3, #3
 800be54:	d107      	bne.n	800be66 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800be56:	f107 030f 	add.w	r3, r7, #15
 800be5a:	2201      	movs	r2, #1
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 f9cb 	bl	800d1fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be64:	e01a      	b.n	800be9c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f001 f95b 	bl	800d124 <USBD_CtlError>
            ret = USBD_FAIL;
 800be6e:	2302      	movs	r3, #2
 800be70:	75fb      	strb	r3, [r7, #23]
          break;
 800be72:	e013      	b.n	800be9c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d00d      	beq.n	800be9a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f001 f94f 	bl	800d124 <USBD_CtlError>
            ret = USBD_FAIL;
 800be86:	2302      	movs	r3, #2
 800be88:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be8a:	e006      	b.n	800be9a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f001 f948 	bl	800d124 <USBD_CtlError>
          ret = USBD_FAIL;
 800be94:	2302      	movs	r3, #2
 800be96:	75fb      	strb	r3, [r7, #23]
          break;
 800be98:	e000      	b.n	800be9c <USBD_CDC_Setup+0x12c>
          break;
 800be9a:	bf00      	nop
      }
      break;
 800be9c:	e006      	b.n	800beac <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f001 f93f 	bl	800d124 <USBD_CtlError>
      ret = USBD_FAIL;
 800bea6:	2302      	movs	r3, #2
 800bea8:	75fb      	strb	r3, [r7, #23]
      break;
 800beaa:	bf00      	nop
  }

  return ret;
 800beac:	7dfb      	ldrb	r3, [r7, #23]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	460b      	mov	r3, r1
 800bec0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bed0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d03a      	beq.n	800bf52 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bedc:	78fa      	ldrb	r2, [r7, #3]
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	331c      	adds	r3, #28
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d029      	beq.n	800bf46 <USBD_CDC_DataIn+0x90>
 800bef2:	78fa      	ldrb	r2, [r7, #3]
 800bef4:	6879      	ldr	r1, [r7, #4]
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	440b      	add	r3, r1
 800bf00:	331c      	adds	r3, #28
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	78f9      	ldrb	r1, [r7, #3]
 800bf06:	68b8      	ldr	r0, [r7, #8]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	440b      	add	r3, r1
 800bf0e:	00db      	lsls	r3, r3, #3
 800bf10:	4403      	add	r3, r0
 800bf12:	3338      	adds	r3, #56	; 0x38
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf1a:	fb01 f303 	mul.w	r3, r1, r3
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d110      	bne.n	800bf46 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bf24:	78fa      	ldrb	r2, [r7, #3]
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	440b      	add	r3, r1
 800bf32:	331c      	adds	r3, #28
 800bf34:	2200      	movs	r2, #0
 800bf36:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf38:	78f9      	ldrb	r1, [r7, #3]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f001 fe00 	bl	800db44 <USBD_LL_Transmit>
 800bf44:	e003      	b.n	800bf4e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e000      	b.n	800bf54 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bf52:	2302      	movs	r3, #2
  }
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f001 fe2b 	bl	800dbd0 <USBD_LL_GetRxDataSize>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00d      	beq.n	800bfa8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4798      	blx	r3

    return USBD_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e000      	b.n	800bfaa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bfa8:	2302      	movs	r3, #2
  }
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d015      	beq.n	800bff8 <USBD_CDC_EP0_RxReady+0x46>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfd2:	2bff      	cmp	r3, #255	; 0xff
 800bfd4:	d010      	beq.n	800bff8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bfe4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfec:	b292      	uxth	r2, r2
 800bfee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	22ff      	movs	r2, #255	; 0xff
 800bff4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2243      	movs	r2, #67	; 0x43
 800c010:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c012:	4b03      	ldr	r3, [pc, #12]	; (800c020 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c014:	4618      	mov	r0, r3
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr
 800c020:	20000094 	.word	0x20000094

0800c024 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2243      	movs	r2, #67	; 0x43
 800c030:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c032:	4b03      	ldr	r3, [pc, #12]	; (800c040 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c034:	4618      	mov	r0, r3
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	20000050 	.word	0x20000050

0800c044 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2243      	movs	r2, #67	; 0x43
 800c050:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c052:	4b03      	ldr	r3, [pc, #12]	; (800c060 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c054:	4618      	mov	r0, r3
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	200000d8 	.word	0x200000d8

0800c064 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	220a      	movs	r2, #10
 800c070:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c072:	4b03      	ldr	r3, [pc, #12]	; (800c080 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	2000000c 	.word	0x2000000c

0800c084 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c08e:	2302      	movs	r3, #2
 800c090:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d005      	beq.n	800c0a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3714      	adds	r7, #20
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b087      	sub	sp, #28
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0d0:	88fa      	ldrh	r2, [r7, #6]
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	371c      	adds	r7, #28
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c11c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c124:	2b00      	cmp	r3, #0
 800c126:	d01c      	beq.n	800c162 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d115      	bne.n	800c15e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2201      	movs	r2, #1
 800c136:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c150:	b29b      	uxth	r3, r3
 800c152:	2181      	movs	r1, #129	; 0x81
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 fcf5 	bl	800db44 <USBD_LL_Transmit>

      return USBD_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e002      	b.n	800c164 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c15e:	2301      	movs	r3, #1
 800c160:	e000      	b.n	800c164 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c162:	2302      	movs	r3, #2
  }
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c182:	2b00      	cmp	r3, #0
 800c184:	d017      	beq.n	800c1b6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7c1b      	ldrb	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d109      	bne.n	800c1a2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c194:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c198:	2101      	movs	r1, #1
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f001 fcf5 	bl	800db8a <USBD_LL_PrepareReceive>
 800c1a0:	e007      	b.n	800c1b2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1a8:	2340      	movs	r3, #64	; 0x40
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f001 fcec 	bl	800db8a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e000      	b.n	800c1b8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c1b6:	2302      	movs	r3, #2
  }
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	e01a      	b.n	800c20e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	79fa      	ldrb	r2, [r7, #7]
 800c204:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f001 fb58 	bl	800d8bc <USBD_LL_Init>

  return USBD_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c216:	b480      	push	{r7}
 800c218:	b085      	sub	sp, #20
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d006      	beq.n	800c238 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	683a      	ldr	r2, [r7, #0]
 800c22e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
 800c236:	e001      	b.n	800c23c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c238:	2302      	movs	r3, #2
 800c23a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b082      	sub	sp, #8
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f001 fb8c 	bl	800d970 <USBD_LL_Start>

  return USBD_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c262:	b480      	push	{r7}
 800c264:	b083      	sub	sp, #12
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c284:	2302      	movs	r3, #2
 800c286:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00c      	beq.n	800c2ac <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	78fa      	ldrb	r2, [r7, #3]
 800c29c:	4611      	mov	r1, r2
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	4798      	blx	r3
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	78fa      	ldrb	r2, [r7, #3]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	4798      	blx	r3

  return USBD_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 fedb 	bl	800d0aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c302:	461a      	mov	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c310:	f003 031f 	and.w	r3, r3, #31
 800c314:	2b02      	cmp	r3, #2
 800c316:	d016      	beq.n	800c346 <USBD_LL_SetupStage+0x6a>
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d81c      	bhi.n	800c356 <USBD_LL_SetupStage+0x7a>
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <USBD_LL_SetupStage+0x4a>
 800c320:	2b01      	cmp	r3, #1
 800c322:	d008      	beq.n	800c336 <USBD_LL_SetupStage+0x5a>
 800c324:	e017      	b.n	800c356 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c32c:	4619      	mov	r1, r3
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f9ce 	bl	800c6d0 <USBD_StdDevReq>
      break;
 800c334:	e01a      	b.n	800c36c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fa30 	bl	800c7a4 <USBD_StdItfReq>
      break;
 800c344:	e012      	b.n	800c36c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c34c:	4619      	mov	r1, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fa70 	bl	800c834 <USBD_StdEPReq>
      break;
 800c354:	e00a      	b.n	800c36c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c35c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c360:	b2db      	uxtb	r3, r3
 800c362:	4619      	mov	r1, r3
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f001 fb63 	bl	800da30 <USBD_LL_StallEP>
      break;
 800c36a:	bf00      	nop
  }

  return USBD_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	460b      	mov	r3, r1
 800c380:	607a      	str	r2, [r7, #4]
 800c382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d14b      	bne.n	800c422 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c390:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d134      	bne.n	800c406 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	68da      	ldr	r2, [r3, #12]
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d919      	bls.n	800c3dc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	68da      	ldr	r2, [r3, #12]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	1ad2      	subs	r2, r2, r3
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	68da      	ldr	r2, [r3, #12]
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d203      	bcs.n	800c3ca <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	e002      	b.n	800c3d0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 ff5c 	bl	800d292 <USBD_CtlContinueRx>
 800c3da:	e038      	b.n	800c44e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00a      	beq.n	800c3fe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d105      	bne.n	800c3fe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 ff59 	bl	800d2b6 <USBD_CtlSendStatus>
 800c404:	e023      	b.n	800c44e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c40c:	2b05      	cmp	r3, #5
 800c40e:	d11e      	bne.n	800c44e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c418:	2100      	movs	r1, #0
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f001 fb08 	bl	800da30 <USBD_LL_StallEP>
 800c420:	e015      	b.n	800c44e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c428:	699b      	ldr	r3, [r3, #24]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00d      	beq.n	800c44a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c434:	2b03      	cmp	r3, #3
 800c436:	d108      	bne.n	800c44a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43e:	699b      	ldr	r3, [r3, #24]
 800c440:	7afa      	ldrb	r2, [r7, #11]
 800c442:	4611      	mov	r1, r2
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	4798      	blx	r3
 800c448:	e001      	b.n	800c44e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c44a:	2302      	movs	r3, #2
 800c44c:	e000      	b.n	800c450 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	460b      	mov	r3, r1
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c466:	7afb      	ldrb	r3, [r7, #11]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d17f      	bne.n	800c56c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	3314      	adds	r3, #20
 800c470:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d15c      	bne.n	800c536 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	68da      	ldr	r2, [r3, #12]
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	429a      	cmp	r2, r3
 800c486:	d915      	bls.n	800c4b4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	68da      	ldr	r2, [r3, #12]
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	1ad2      	subs	r2, r2, r3
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	461a      	mov	r2, r3
 800c49e:	6879      	ldr	r1, [r7, #4]
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 fec6 	bl	800d232 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f001 fb6c 	bl	800db8a <USBD_LL_PrepareReceive>
 800c4b2:	e04e      	b.n	800c552 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	6912      	ldr	r2, [r2, #16]
 800c4bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4c0:	fb01 f202 	mul.w	r2, r1, r2
 800c4c4:	1a9b      	subs	r3, r3, r2
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d11c      	bne.n	800c504 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	689a      	ldr	r2, [r3, #8]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d316      	bcc.n	800c504 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	689a      	ldr	r2, [r3, #8]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d20f      	bcs.n	800c504 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 fea2 	bl	800d232 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f001 fb44 	bl	800db8a <USBD_LL_PrepareReceive>
 800c502:	e026      	b.n	800c552 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00a      	beq.n	800c526 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c516:	2b03      	cmp	r3, #3
 800c518:	d105      	bne.n	800c526 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c526:	2180      	movs	r1, #128	; 0x80
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f001 fa81 	bl	800da30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 fed4 	bl	800d2dc <USBD_CtlReceiveStatus>
 800c534:	e00d      	b.n	800c552 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d004      	beq.n	800c54a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c546:	2b00      	cmp	r3, #0
 800c548:	d103      	bne.n	800c552 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c54a:	2180      	movs	r1, #128	; 0x80
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f001 fa6f 	bl	800da30 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d11d      	bne.n	800c598 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7ff fe80 	bl	800c262 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c56a:	e015      	b.n	800c598 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00d      	beq.n	800c594 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d108      	bne.n	800c594 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	7afa      	ldrb	r2, [r7, #11]
 800c58c:	4611      	mov	r1, r2
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	4798      	blx	r3
 800c592:	e001      	b.n	800c598 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c594:	2302      	movs	r3, #2
 800c596:	e000      	b.n	800c59a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5aa:	2340      	movs	r3, #64	; 0x40
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f001 f9f8 	bl	800d9a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2240      	movs	r2, #64	; 0x40
 800c5c2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5c6:	2340      	movs	r3, #64	; 0x40
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2180      	movs	r1, #128	; 0x80
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f001 f9ea 	bl	800d9a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2240      	movs	r2, #64	; 0x40
 800c5dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c602:	2b00      	cmp	r3, #0
 800c604:	d009      	beq.n	800c61a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	6852      	ldr	r2, [r2, #4]
 800c612:	b2d2      	uxtb	r2, r2
 800c614:	4611      	mov	r1, r2
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	4798      	blx	r3
  }

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	78fa      	ldrb	r2, [r7, #3]
 800c634:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2204      	movs	r2, #4
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d105      	bne.n	800c68c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d10b      	bne.n	800c6c4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d005      	beq.n	800c6c4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6be:	69db      	ldr	r3, [r3, #28]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6e6:	2b40      	cmp	r3, #64	; 0x40
 800c6e8:	d005      	beq.n	800c6f6 <USBD_StdDevReq+0x26>
 800c6ea:	2b40      	cmp	r3, #64	; 0x40
 800c6ec:	d84f      	bhi.n	800c78e <USBD_StdDevReq+0xbe>
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d009      	beq.n	800c706 <USBD_StdDevReq+0x36>
 800c6f2:	2b20      	cmp	r3, #32
 800c6f4:	d14b      	bne.n	800c78e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	4798      	blx	r3
      break;
 800c704:	e048      	b.n	800c798 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	785b      	ldrb	r3, [r3, #1]
 800c70a:	2b09      	cmp	r3, #9
 800c70c:	d839      	bhi.n	800c782 <USBD_StdDevReq+0xb2>
 800c70e:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <USBD_StdDevReq+0x44>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c765 	.word	0x0800c765
 800c718:	0800c779 	.word	0x0800c779
 800c71c:	0800c783 	.word	0x0800c783
 800c720:	0800c76f 	.word	0x0800c76f
 800c724:	0800c783 	.word	0x0800c783
 800c728:	0800c747 	.word	0x0800c747
 800c72c:	0800c73d 	.word	0x0800c73d
 800c730:	0800c783 	.word	0x0800c783
 800c734:	0800c75b 	.word	0x0800c75b
 800c738:	0800c751 	.word	0x0800c751
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f9dc 	bl	800cafc <USBD_GetDescriptor>
          break;
 800c744:	e022      	b.n	800c78c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fb3f 	bl	800cdcc <USBD_SetAddress>
          break;
 800c74e:	e01d      	b.n	800c78c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fb7e 	bl	800ce54 <USBD_SetConfig>
          break;
 800c758:	e018      	b.n	800c78c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fc07 	bl	800cf70 <USBD_GetConfig>
          break;
 800c762:	e013      	b.n	800c78c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fc37 	bl	800cfda <USBD_GetStatus>
          break;
 800c76c:	e00e      	b.n	800c78c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fc65 	bl	800d040 <USBD_SetFeature>
          break;
 800c776:	e009      	b.n	800c78c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fc74 	bl	800d068 <USBD_ClrFeature>
          break;
 800c780:	e004      	b.n	800c78c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 fccd 	bl	800d124 <USBD_CtlError>
          break;
 800c78a:	bf00      	nop
      }
      break;
 800c78c:	e004      	b.n	800c798 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fcc7 	bl	800d124 <USBD_CtlError>
      break;
 800c796:	bf00      	nop
  }

  return ret;
 800c798:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop

0800c7a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7ba:	2b40      	cmp	r3, #64	; 0x40
 800c7bc:	d005      	beq.n	800c7ca <USBD_StdItfReq+0x26>
 800c7be:	2b40      	cmp	r3, #64	; 0x40
 800c7c0:	d82e      	bhi.n	800c820 <USBD_StdItfReq+0x7c>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <USBD_StdItfReq+0x26>
 800c7c6:	2b20      	cmp	r3, #32
 800c7c8:	d12a      	bne.n	800c820 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d81d      	bhi.n	800c812 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	889b      	ldrh	r3, [r3, #4]
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d813      	bhi.n	800c808 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	4798      	blx	r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	88db      	ldrh	r3, [r3, #6]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d110      	bne.n	800c81c <USBD_StdItfReq+0x78>
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10d      	bne.n	800c81c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fd58 	bl	800d2b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c806:	e009      	b.n	800c81c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fc8a 	bl	800d124 <USBD_CtlError>
          break;
 800c810:	e004      	b.n	800c81c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fc85 	bl	800d124 <USBD_CtlError>
          break;
 800c81a:	e000      	b.n	800c81e <USBD_StdItfReq+0x7a>
          break;
 800c81c:	bf00      	nop
      }
      break;
 800c81e:	e004      	b.n	800c82a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fc7e 	bl	800d124 <USBD_CtlError>
      break;
 800c828:	bf00      	nop
  }

  return USBD_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	889b      	ldrh	r3, [r3, #4]
 800c846:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c850:	2b40      	cmp	r3, #64	; 0x40
 800c852:	d007      	beq.n	800c864 <USBD_StdEPReq+0x30>
 800c854:	2b40      	cmp	r3, #64	; 0x40
 800c856:	f200 8146 	bhi.w	800cae6 <USBD_StdEPReq+0x2b2>
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00a      	beq.n	800c874 <USBD_StdEPReq+0x40>
 800c85e:	2b20      	cmp	r3, #32
 800c860:	f040 8141 	bne.w	800cae6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	4798      	blx	r3
      break;
 800c872:	e13d      	b.n	800caf0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c87c:	2b20      	cmp	r3, #32
 800c87e:	d10a      	bne.n	800c896 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	4798      	blx	r3
 800c88e:	4603      	mov	r3, r0
 800c890:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c892:	7bfb      	ldrb	r3, [r7, #15]
 800c894:	e12d      	b.n	800caf2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	785b      	ldrb	r3, [r3, #1]
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d007      	beq.n	800c8ae <USBD_StdEPReq+0x7a>
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	f300 811b 	bgt.w	800cada <USBD_StdEPReq+0x2a6>
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d072      	beq.n	800c98e <USBD_StdEPReq+0x15a>
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d03a      	beq.n	800c922 <USBD_StdEPReq+0xee>
 800c8ac:	e115      	b.n	800cada <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d002      	beq.n	800c8be <USBD_StdEPReq+0x8a>
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	d015      	beq.n	800c8e8 <USBD_StdEPReq+0xb4>
 800c8bc:	e02b      	b.n	800c916 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00c      	beq.n	800c8de <USBD_StdEPReq+0xaa>
 800c8c4:	7bbb      	ldrb	r3, [r7, #14]
 800c8c6:	2b80      	cmp	r3, #128	; 0x80
 800c8c8:	d009      	beq.n	800c8de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f001 f8ae 	bl	800da30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c8d4:	2180      	movs	r1, #128	; 0x80
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f001 f8aa 	bl	800da30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8dc:	e020      	b.n	800c920 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fc1f 	bl	800d124 <USBD_CtlError>
              break;
 800c8e6:	e01b      	b.n	800c920 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	885b      	ldrh	r3, [r3, #2]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10e      	bne.n	800c90e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c8f0:	7bbb      	ldrb	r3, [r7, #14]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00b      	beq.n	800c90e <USBD_StdEPReq+0xda>
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
 800c8f8:	2b80      	cmp	r3, #128	; 0x80
 800c8fa:	d008      	beq.n	800c90e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	88db      	ldrh	r3, [r3, #6]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d104      	bne.n	800c90e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	4619      	mov	r1, r3
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f001 f891 	bl	800da30 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fcd1 	bl	800d2b6 <USBD_CtlSendStatus>

              break;
 800c914:	e004      	b.n	800c920 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fc03 	bl	800d124 <USBD_CtlError>
              break;
 800c91e:	bf00      	nop
          }
          break;
 800c920:	e0e0      	b.n	800cae4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d002      	beq.n	800c932 <USBD_StdEPReq+0xfe>
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	d015      	beq.n	800c95c <USBD_StdEPReq+0x128>
 800c930:	e026      	b.n	800c980 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00c      	beq.n	800c952 <USBD_StdEPReq+0x11e>
 800c938:	7bbb      	ldrb	r3, [r7, #14]
 800c93a:	2b80      	cmp	r3, #128	; 0x80
 800c93c:	d009      	beq.n	800c952 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c93e:	7bbb      	ldrb	r3, [r7, #14]
 800c940:	4619      	mov	r1, r3
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f001 f874 	bl	800da30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c948:	2180      	movs	r1, #128	; 0x80
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f001 f870 	bl	800da30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c950:	e01c      	b.n	800c98c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c952:	6839      	ldr	r1, [r7, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fbe5 	bl	800d124 <USBD_CtlError>
              break;
 800c95a:	e017      	b.n	800c98c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	885b      	ldrh	r3, [r3, #2]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d112      	bne.n	800c98a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c964:	7bbb      	ldrb	r3, [r7, #14]
 800c966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d004      	beq.n	800c978 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
 800c970:	4619      	mov	r1, r3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f001 f87b 	bl	800da6e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fc9c 	bl	800d2b6 <USBD_CtlSendStatus>
              }
              break;
 800c97e:	e004      	b.n	800c98a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fbce 	bl	800d124 <USBD_CtlError>
              break;
 800c988:	e000      	b.n	800c98c <USBD_StdEPReq+0x158>
              break;
 800c98a:	bf00      	nop
          }
          break;
 800c98c:	e0aa      	b.n	800cae4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c994:	2b02      	cmp	r3, #2
 800c996:	d002      	beq.n	800c99e <USBD_StdEPReq+0x16a>
 800c998:	2b03      	cmp	r3, #3
 800c99a:	d032      	beq.n	800ca02 <USBD_StdEPReq+0x1ce>
 800c99c:	e097      	b.n	800cace <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d007      	beq.n	800c9b4 <USBD_StdEPReq+0x180>
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	2b80      	cmp	r3, #128	; 0x80
 800c9a8:	d004      	beq.n	800c9b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fbb9 	bl	800d124 <USBD_CtlError>
                break;
 800c9b2:	e091      	b.n	800cad8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da0b      	bge.n	800c9d4 <USBD_StdEPReq+0x1a0>
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	3310      	adds	r3, #16
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	e00b      	b.n	800c9ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9da:	4613      	mov	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fbfd 	bl	800d1fa <USBD_CtlSendData>
              break;
 800ca00:	e06a      	b.n	800cad8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	da11      	bge.n	800ca2e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca0a:	7bbb      	ldrb	r3, [r7, #14]
 800ca0c:	f003 020f 	and.w	r2, r3, #15
 800ca10:	6879      	ldr	r1, [r7, #4]
 800ca12:	4613      	mov	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	440b      	add	r3, r1
 800ca1c:	3318      	adds	r3, #24
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d117      	bne.n	800ca54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fb7c 	bl	800d124 <USBD_CtlError>
                  break;
 800ca2c:	e054      	b.n	800cad8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca2e:	7bbb      	ldrb	r3, [r7, #14]
 800ca30:	f003 020f 	and.w	r2, r3, #15
 800ca34:	6879      	ldr	r1, [r7, #4]
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	440b      	add	r3, r1
 800ca40:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d104      	bne.n	800ca54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fb69 	bl	800d124 <USBD_CtlError>
                  break;
 800ca52:	e041      	b.n	800cad8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	da0b      	bge.n	800ca74 <USBD_StdEPReq+0x240>
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca62:	4613      	mov	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	3310      	adds	r3, #16
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	4413      	add	r3, r2
 800ca70:	3304      	adds	r3, #4
 800ca72:	e00b      	b.n	800ca8c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
 800ca76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	4413      	add	r3, r2
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <USBD_StdEPReq+0x266>
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	2b80      	cmp	r3, #128	; 0x80
 800ca98:	d103      	bne.n	800caa2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	601a      	str	r2, [r3, #0]
 800caa0:	e00e      	b.n	800cac0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 f800 	bl	800daac <USBD_LL_IsStallEP>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2201      	movs	r2, #1
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	e002      	b.n	800cac0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2202      	movs	r2, #2
 800cac4:	4619      	mov	r1, r3
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fb97 	bl	800d1fa <USBD_CtlSendData>
              break;
 800cacc:	e004      	b.n	800cad8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fb27 	bl	800d124 <USBD_CtlError>
              break;
 800cad6:	bf00      	nop
          }
          break;
 800cad8:	e004      	b.n	800cae4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fb21 	bl	800d124 <USBD_CtlError>
          break;
 800cae2:	bf00      	nop
      }
      break;
 800cae4:	e004      	b.n	800caf0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fb1b 	bl	800d124 <USBD_CtlError>
      break;
 800caee:	bf00      	nop
  }

  return ret;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
	...

0800cafc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	885b      	ldrh	r3, [r3, #2]
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	2b06      	cmp	r3, #6
 800cb1e:	f200 8128 	bhi.w	800cd72 <USBD_GetDescriptor+0x276>
 800cb22:	a201      	add	r2, pc, #4	; (adr r2, 800cb28 <USBD_GetDescriptor+0x2c>)
 800cb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb28:	0800cb45 	.word	0x0800cb45
 800cb2c:	0800cb5d 	.word	0x0800cb5d
 800cb30:	0800cb9d 	.word	0x0800cb9d
 800cb34:	0800cd73 	.word	0x0800cd73
 800cb38:	0800cd73 	.word	0x0800cd73
 800cb3c:	0800cd13 	.word	0x0800cd13
 800cb40:	0800cd3f 	.word	0x0800cd3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	7c12      	ldrb	r2, [r2, #16]
 800cb50:	f107 0108 	add.w	r1, r7, #8
 800cb54:	4610      	mov	r0, r2
 800cb56:	4798      	blx	r3
 800cb58:	60f8      	str	r0, [r7, #12]
      break;
 800cb5a:	e112      	b.n	800cd82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7c1b      	ldrb	r3, [r3, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10d      	bne.n	800cb80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6c:	f107 0208 	add.w	r2, r7, #8
 800cb70:	4610      	mov	r0, r2
 800cb72:	4798      	blx	r3
 800cb74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	2202      	movs	r2, #2
 800cb7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cb7e:	e100      	b.n	800cd82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb88:	f107 0208 	add.w	r2, r7, #8
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	4798      	blx	r3
 800cb90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3301      	adds	r3, #1
 800cb96:	2202      	movs	r2, #2
 800cb98:	701a      	strb	r2, [r3, #0]
      break;
 800cb9a:	e0f2      	b.n	800cd82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	885b      	ldrh	r3, [r3, #2]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b05      	cmp	r3, #5
 800cba4:	f200 80ac 	bhi.w	800cd00 <USBD_GetDescriptor+0x204>
 800cba8:	a201      	add	r2, pc, #4	; (adr r2, 800cbb0 <USBD_GetDescriptor+0xb4>)
 800cbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbae:	bf00      	nop
 800cbb0:	0800cbc9 	.word	0x0800cbc9
 800cbb4:	0800cbfd 	.word	0x0800cbfd
 800cbb8:	0800cc31 	.word	0x0800cc31
 800cbbc:	0800cc65 	.word	0x0800cc65
 800cbc0:	0800cc99 	.word	0x0800cc99
 800cbc4:	0800cccd 	.word	0x0800cccd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00b      	beq.n	800cbec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	7c12      	ldrb	r2, [r2, #16]
 800cbe0:	f107 0108 	add.w	r1, r7, #8
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4798      	blx	r3
 800cbe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbea:	e091      	b.n	800cd10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fa98 	bl	800d124 <USBD_CtlError>
            err++;
 800cbf4:	7afb      	ldrb	r3, [r7, #11]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	72fb      	strb	r3, [r7, #11]
          break;
 800cbfa:	e089      	b.n	800cd10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00b      	beq.n	800cc20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	7c12      	ldrb	r2, [r2, #16]
 800cc14:	f107 0108 	add.w	r1, r7, #8
 800cc18:	4610      	mov	r0, r2
 800cc1a:	4798      	blx	r3
 800cc1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc1e:	e077      	b.n	800cd10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fa7e 	bl	800d124 <USBD_CtlError>
            err++;
 800cc28:	7afb      	ldrb	r3, [r7, #11]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc2e:	e06f      	b.n	800cd10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	7c12      	ldrb	r2, [r2, #16]
 800cc48:	f107 0108 	add.w	r1, r7, #8
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	4798      	blx	r3
 800cc50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc52:	e05d      	b.n	800cd10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fa64 	bl	800d124 <USBD_CtlError>
            err++;
 800cc5c:	7afb      	ldrb	r3, [r7, #11]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	72fb      	strb	r3, [r7, #11]
          break;
 800cc62:	e055      	b.n	800cd10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	7c12      	ldrb	r2, [r2, #16]
 800cc7c:	f107 0108 	add.w	r1, r7, #8
 800cc80:	4610      	mov	r0, r2
 800cc82:	4798      	blx	r3
 800cc84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc86:	e043      	b.n	800cd10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fa4a 	bl	800d124 <USBD_CtlError>
            err++;
 800cc90:	7afb      	ldrb	r3, [r7, #11]
 800cc92:	3301      	adds	r3, #1
 800cc94:	72fb      	strb	r3, [r7, #11]
          break;
 800cc96:	e03b      	b.n	800cd10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ccaa:	695b      	ldr	r3, [r3, #20]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	7c12      	ldrb	r2, [r2, #16]
 800ccb0:	f107 0108 	add.w	r1, r7, #8
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	4798      	blx	r3
 800ccb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccba:	e029      	b.n	800cd10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fa30 	bl	800d124 <USBD_CtlError>
            err++;
 800ccc4:	7afb      	ldrb	r3, [r7, #11]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccca:	e021      	b.n	800cd10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00b      	beq.n	800ccf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	7c12      	ldrb	r2, [r2, #16]
 800cce4:	f107 0108 	add.w	r1, r7, #8
 800cce8:	4610      	mov	r0, r2
 800ccea:	4798      	blx	r3
 800ccec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccee:	e00f      	b.n	800cd10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fa16 	bl	800d124 <USBD_CtlError>
            err++;
 800ccf8:	7afb      	ldrb	r3, [r7, #11]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	72fb      	strb	r3, [r7, #11]
          break;
 800ccfe:	e007      	b.n	800cd10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fa0e 	bl	800d124 <USBD_CtlError>
          err++;
 800cd08:	7afb      	ldrb	r3, [r7, #11]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cd0e:	e038      	b.n	800cd82 <USBD_GetDescriptor+0x286>
 800cd10:	e037      	b.n	800cd82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	7c1b      	ldrb	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d109      	bne.n	800cd2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd22:	f107 0208 	add.w	r2, r7, #8
 800cd26:	4610      	mov	r0, r2
 800cd28:	4798      	blx	r3
 800cd2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd2c:	e029      	b.n	800cd82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f9f7 	bl	800d124 <USBD_CtlError>
        err++;
 800cd36:	7afb      	ldrb	r3, [r7, #11]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	72fb      	strb	r3, [r7, #11]
      break;
 800cd3c:	e021      	b.n	800cd82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7c1b      	ldrb	r3, [r3, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10d      	bne.n	800cd62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4e:	f107 0208 	add.w	r2, r7, #8
 800cd52:	4610      	mov	r0, r2
 800cd54:	4798      	blx	r3
 800cd56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	2207      	movs	r2, #7
 800cd5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd60:	e00f      	b.n	800cd82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f9dd 	bl	800d124 <USBD_CtlError>
        err++;
 800cd6a:	7afb      	ldrb	r3, [r7, #11]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	72fb      	strb	r3, [r7, #11]
      break;
 800cd70:	e007      	b.n	800cd82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cd72:	6839      	ldr	r1, [r7, #0]
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f9d5 	bl	800d124 <USBD_CtlError>
      err++;
 800cd7a:	7afb      	ldrb	r3, [r7, #11]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	72fb      	strb	r3, [r7, #11]
      break;
 800cd80:	bf00      	nop
  }

  if (err != 0U)
 800cd82:	7afb      	ldrb	r3, [r7, #11]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d11c      	bne.n	800cdc2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cd88:	893b      	ldrh	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d011      	beq.n	800cdb2 <USBD_GetDescriptor+0x2b6>
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	88db      	ldrh	r3, [r3, #6]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00d      	beq.n	800cdb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	88da      	ldrh	r2, [r3, #6]
 800cd9a:	893b      	ldrh	r3, [r7, #8]
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	bf28      	it	cs
 800cda0:	4613      	movcs	r3, r2
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cda6:	893b      	ldrh	r3, [r7, #8]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	68f9      	ldr	r1, [r7, #12]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fa24 	bl	800d1fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	88db      	ldrh	r3, [r3, #6]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d104      	bne.n	800cdc4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa7b 	bl	800d2b6 <USBD_CtlSendStatus>
 800cdc0:	e000      	b.n	800cdc4 <USBD_GetDescriptor+0x2c8>
    return;
 800cdc2:	bf00      	nop
    }
  }
}
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop

0800cdcc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	889b      	ldrh	r3, [r3, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d130      	bne.n	800ce40 <USBD_SetAddress+0x74>
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	88db      	ldrh	r3, [r3, #6]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d12c      	bne.n	800ce40 <USBD_SetAddress+0x74>
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	885b      	ldrh	r3, [r3, #2]
 800cdea:	2b7f      	cmp	r3, #127	; 0x7f
 800cdec:	d828      	bhi.n	800ce40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	885b      	ldrh	r3, [r3, #2]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce00:	2b03      	cmp	r3, #3
 800ce02:	d104      	bne.n	800ce0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ce04:	6839      	ldr	r1, [r7, #0]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f98c 	bl	800d124 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce0c:	e01d      	b.n	800ce4a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	7bfa      	ldrb	r2, [r7, #15]
 800ce12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fe73 	bl	800db06 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fa48 	bl	800d2b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d004      	beq.n	800ce36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce34:	e009      	b.n	800ce4a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce3e:	e004      	b.n	800ce4a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f96e 	bl	800d124 <USBD_CtlError>
  }
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	885b      	ldrh	r3, [r3, #2]
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	4b41      	ldr	r3, [pc, #260]	; (800cf6c <USBD_SetConfig+0x118>)
 800ce66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce68:	4b40      	ldr	r3, [pc, #256]	; (800cf6c <USBD_SetConfig+0x118>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d904      	bls.n	800ce7a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f956 	bl	800d124 <USBD_CtlError>
 800ce78:	e075      	b.n	800cf66 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d002      	beq.n	800ce8a <USBD_SetConfig+0x36>
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	d023      	beq.n	800ced0 <USBD_SetConfig+0x7c>
 800ce88:	e062      	b.n	800cf50 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ce8a:	4b38      	ldr	r3, [pc, #224]	; (800cf6c <USBD_SetConfig+0x118>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d01a      	beq.n	800cec8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ce92:	4b36      	ldr	r3, [pc, #216]	; (800cf6c <USBD_SetConfig+0x118>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	461a      	mov	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2203      	movs	r2, #3
 800cea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cea4:	4b31      	ldr	r3, [pc, #196]	; (800cf6c <USBD_SetConfig+0x118>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff f9e4 	bl	800c278 <USBD_SetClassConfig>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d104      	bne.n	800cec0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ceb6:	6839      	ldr	r1, [r7, #0]
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 f933 	bl	800d124 <USBD_CtlError>
            return;
 800cebe:	e052      	b.n	800cf66 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f9f8 	bl	800d2b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cec6:	e04e      	b.n	800cf66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f9f4 	bl	800d2b6 <USBD_CtlSendStatus>
        break;
 800cece:	e04a      	b.n	800cf66 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ced0:	4b26      	ldr	r3, [pc, #152]	; (800cf6c <USBD_SetConfig+0x118>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d112      	bne.n	800cefe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800cee0:	4b22      	ldr	r3, [pc, #136]	; (800cf6c <USBD_SetConfig+0x118>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	461a      	mov	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ceea:	4b20      	ldr	r3, [pc, #128]	; (800cf6c <USBD_SetConfig+0x118>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7ff f9e0 	bl	800c2b6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f9dd 	bl	800d2b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cefc:	e033      	b.n	800cf66 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800cefe:	4b1b      	ldr	r3, [pc, #108]	; (800cf6c <USBD_SetConfig+0x118>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d01d      	beq.n	800cf48 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	4619      	mov	r1, r3
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff f9ce 	bl	800c2b6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cf1a:	4b14      	ldr	r3, [pc, #80]	; (800cf6c <USBD_SetConfig+0x118>)
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cf24:	4b11      	ldr	r3, [pc, #68]	; (800cf6c <USBD_SetConfig+0x118>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f7ff f9a4 	bl	800c278 <USBD_SetClassConfig>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d104      	bne.n	800cf40 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f8f3 	bl	800d124 <USBD_CtlError>
            return;
 800cf3e:	e012      	b.n	800cf66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f9b8 	bl	800d2b6 <USBD_CtlSendStatus>
        break;
 800cf46:	e00e      	b.n	800cf66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f9b4 	bl	800d2b6 <USBD_CtlSendStatus>
        break;
 800cf4e:	e00a      	b.n	800cf66 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f8e6 	bl	800d124 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cf58:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <USBD_SetConfig+0x118>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff f9a9 	bl	800c2b6 <USBD_ClrClassConfig>
        break;
 800cf64:	bf00      	nop
    }
  }
}
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	200002e8 	.word	0x200002e8

0800cf70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	88db      	ldrh	r3, [r3, #6]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d004      	beq.n	800cf8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f8cd 	bl	800d124 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cf8a:	e022      	b.n	800cfd2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	dc02      	bgt.n	800cf9c <USBD_GetConfig+0x2c>
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	dc03      	bgt.n	800cfa2 <USBD_GetConfig+0x32>
 800cf9a:	e015      	b.n	800cfc8 <USBD_GetConfig+0x58>
 800cf9c:	2b03      	cmp	r3, #3
 800cf9e:	d00b      	beq.n	800cfb8 <USBD_GetConfig+0x48>
 800cfa0:	e012      	b.n	800cfc8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	3308      	adds	r3, #8
 800cfac:	2201      	movs	r2, #1
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f922 	bl	800d1fa <USBD_CtlSendData>
        break;
 800cfb6:	e00c      	b.n	800cfd2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	3304      	adds	r3, #4
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f91a 	bl	800d1fa <USBD_CtlSendData>
        break;
 800cfc6:	e004      	b.n	800cfd2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cfc8:	6839      	ldr	r1, [r7, #0]
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f8aa 	bl	800d124 <USBD_CtlError>
        break;
 800cfd0:	bf00      	nop
}
 800cfd2:	bf00      	nop
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfea:	3b01      	subs	r3, #1
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d81e      	bhi.n	800d02e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	88db      	ldrh	r3, [r3, #6]
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d004      	beq.n	800d002 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f892 	bl	800d124 <USBD_CtlError>
        break;
 800d000:	e01a      	b.n	800d038 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d005      	beq.n	800d01e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	f043 0202 	orr.w	r2, r3, #2
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	330c      	adds	r3, #12
 800d022:	2202      	movs	r2, #2
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f8e7 	bl	800d1fa <USBD_CtlSendData>
      break;
 800d02c:	e004      	b.n	800d038 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f877 	bl	800d124 <USBD_CtlError>
      break;
 800d036:	bf00      	nop
  }
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	885b      	ldrh	r3, [r3, #2]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d106      	bne.n	800d060 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f92b 	bl	800d2b6 <USBD_CtlSendStatus>
  }
}
 800d060:	bf00      	nop
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d078:	3b01      	subs	r3, #1
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d80b      	bhi.n	800d096 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	885b      	ldrh	r3, [r3, #2]
 800d082:	2b01      	cmp	r3, #1
 800d084:	d10c      	bne.n	800d0a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f911 	bl	800d2b6 <USBD_CtlSendStatus>
      }
      break;
 800d094:	e004      	b.n	800d0a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f843 	bl	800d124 <USBD_CtlError>
      break;
 800d09e:	e000      	b.n	800d0a2 <USBD_ClrFeature+0x3a>
      break;
 800d0a0:	bf00      	nop
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781a      	ldrb	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	785a      	ldrb	r2, [r3, #1]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	3302      	adds	r3, #2
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	3303      	adds	r3, #3
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	021b      	lsls	r3, r3, #8
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	4413      	add	r3, r2
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	3305      	adds	r3, #5
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	021b      	lsls	r3, r3, #8
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	4413      	add	r3, r2
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	3306      	adds	r3, #6
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	b29a      	uxth	r2, r3
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	3307      	adds	r3, #7
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	b29b      	uxth	r3, r3
 800d110:	4413      	add	r3, r2
 800d112:	b29a      	uxth	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	80da      	strh	r2, [r3, #6]

}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d12e:	2180      	movs	r1, #128	; 0x80
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fc7d 	bl	800da30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d136:	2100      	movs	r1, #0
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 fc79 	bl	800da30 <USBD_LL_StallEP>
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b086      	sub	sp, #24
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	60f8      	str	r0, [r7, #12]
 800d14e:	60b9      	str	r1, [r7, #8]
 800d150:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d152:	2300      	movs	r3, #0
 800d154:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d032      	beq.n	800d1c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 f834 	bl	800d1ca <USBD_GetLen>
 800d162:	4603      	mov	r3, r0
 800d164:	3301      	adds	r3, #1
 800d166:	b29b      	uxth	r3, r3
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d170:	7dfb      	ldrb	r3, [r7, #23]
 800d172:	1c5a      	adds	r2, r3, #1
 800d174:	75fa      	strb	r2, [r7, #23]
 800d176:	461a      	mov	r2, r3
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	4413      	add	r3, r2
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	7812      	ldrb	r2, [r2, #0]
 800d180:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	1c5a      	adds	r2, r3, #1
 800d186:	75fa      	strb	r2, [r7, #23]
 800d188:	461a      	mov	r2, r3
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	4413      	add	r3, r2
 800d18e:	2203      	movs	r2, #3
 800d190:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d192:	e012      	b.n	800d1ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	60fa      	str	r2, [r7, #12]
 800d19a:	7dfa      	ldrb	r2, [r7, #23]
 800d19c:	1c51      	adds	r1, r2, #1
 800d19e:	75f9      	strb	r1, [r7, #23]
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	440a      	add	r2, r1
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d1aa:	7dfb      	ldrb	r3, [r7, #23]
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	75fa      	strb	r2, [r7, #23]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e8      	bne.n	800d194 <USBD_GetString+0x4e>
    }
  }
}
 800d1c2:	bf00      	nop
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b085      	sub	sp, #20
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d1d6:	e005      	b.n	800d1e4 <USBD_GetLen+0x1a>
  {
    len++;
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1f5      	bne.n	800d1d8 <USBD_GetLen+0xe>
  }

  return len;
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3714      	adds	r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b084      	sub	sp, #16
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	4613      	mov	r3, r2
 800d206:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2202      	movs	r2, #2
 800d20c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d210:	88fa      	ldrh	r2, [r7, #6]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d216:	88fa      	ldrh	r2, [r7, #6]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d21c:	88fb      	ldrh	r3, [r7, #6]
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	2100      	movs	r1, #0
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fc8e 	bl	800db44 <USBD_LL_Transmit>

  return USBD_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	4613      	mov	r3, r2
 800d23e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d240:	88fb      	ldrh	r3, [r7, #6]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	2100      	movs	r1, #0
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f000 fc7c 	bl	800db44 <USBD_LL_Transmit>

  return USBD_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	4613      	mov	r3, r2
 800d262:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2203      	movs	r2, #3
 800d268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d26c:	88fa      	ldrh	r2, [r7, #6]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d274:	88fa      	ldrh	r2, [r7, #6]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d27c:	88fb      	ldrh	r3, [r7, #6]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	2100      	movs	r1, #0
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f000 fc81 	bl	800db8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b084      	sub	sp, #16
 800d296:	af00      	add	r7, sp, #0
 800d298:	60f8      	str	r0, [r7, #12]
 800d29a:	60b9      	str	r1, [r7, #8]
 800d29c:	4613      	mov	r3, r2
 800d29e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2a0:	88fb      	ldrh	r3, [r7, #6]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 fc6f 	bl	800db8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2204      	movs	r2, #4
 800d2c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fc39 	bl	800db44 <USBD_LL_Transmit>

  return USBD_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2205      	movs	r2, #5
 800d2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fc49 	bl	800db8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d308:	2200      	movs	r2, #0
 800d30a:	4912      	ldr	r1, [pc, #72]	; (800d354 <MX_USB_DEVICE_Init+0x50>)
 800d30c:	4812      	ldr	r0, [pc, #72]	; (800d358 <MX_USB_DEVICE_Init+0x54>)
 800d30e:	f7fe ff57 	bl	800c1c0 <USBD_Init>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d318:	f7f3 f9ca 	bl	80006b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d31c:	490f      	ldr	r1, [pc, #60]	; (800d35c <MX_USB_DEVICE_Init+0x58>)
 800d31e:	480e      	ldr	r0, [pc, #56]	; (800d358 <MX_USB_DEVICE_Init+0x54>)
 800d320:	f7fe ff79 	bl	800c216 <USBD_RegisterClass>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d32a:	f7f3 f9c1 	bl	80006b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d32e:	490c      	ldr	r1, [pc, #48]	; (800d360 <MX_USB_DEVICE_Init+0x5c>)
 800d330:	4809      	ldr	r0, [pc, #36]	; (800d358 <MX_USB_DEVICE_Init+0x54>)
 800d332:	f7fe fea7 	bl	800c084 <USBD_CDC_RegisterInterface>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d33c:	f7f3 f9b8 	bl	80006b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d340:	4805      	ldr	r0, [pc, #20]	; (800d358 <MX_USB_DEVICE_Init+0x54>)
 800d342:	f7fe ff82 	bl	800c24a <USBD_Start>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d34c:	f7f3 f9b0 	bl	80006b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d350:	bf00      	nop
 800d352:	bd80      	pop	{r7, pc}
 800d354:	2000012c 	.word	0x2000012c
 800d358:	200002ec 	.word	0x200002ec
 800d35c:	20000018 	.word	0x20000018
 800d360:	2000011c 	.word	0x2000011c

0800d364 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d368:	2200      	movs	r2, #0
 800d36a:	4905      	ldr	r1, [pc, #20]	; (800d380 <CDC_Init_FS+0x1c>)
 800d36c:	4805      	ldr	r0, [pc, #20]	; (800d384 <CDC_Init_FS+0x20>)
 800d36e:	f7fe fea0 	bl	800c0b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d372:	4905      	ldr	r1, [pc, #20]	; (800d388 <CDC_Init_FS+0x24>)
 800d374:	4803      	ldr	r0, [pc, #12]	; (800d384 <CDC_Init_FS+0x20>)
 800d376:	f7fe feb6 	bl	800c0e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d37a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	20000998 	.word	0x20000998
 800d384:	200002ec 	.word	0x200002ec
 800d388:	200005b0 	.word	0x200005b0

0800d38c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d38c:	b480      	push	{r7}
 800d38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d390:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d392:	4618      	mov	r0, r3
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	6039      	str	r1, [r7, #0]
 800d3a6:	71fb      	strb	r3, [r7, #7]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2b23      	cmp	r3, #35	; 0x23
 800d3b0:	d84a      	bhi.n	800d448 <CDC_Control_FS+0xac>
 800d3b2:	a201      	add	r2, pc, #4	; (adr r2, 800d3b8 <CDC_Control_FS+0x1c>)
 800d3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b8:	0800d449 	.word	0x0800d449
 800d3bc:	0800d449 	.word	0x0800d449
 800d3c0:	0800d449 	.word	0x0800d449
 800d3c4:	0800d449 	.word	0x0800d449
 800d3c8:	0800d449 	.word	0x0800d449
 800d3cc:	0800d449 	.word	0x0800d449
 800d3d0:	0800d449 	.word	0x0800d449
 800d3d4:	0800d449 	.word	0x0800d449
 800d3d8:	0800d449 	.word	0x0800d449
 800d3dc:	0800d449 	.word	0x0800d449
 800d3e0:	0800d449 	.word	0x0800d449
 800d3e4:	0800d449 	.word	0x0800d449
 800d3e8:	0800d449 	.word	0x0800d449
 800d3ec:	0800d449 	.word	0x0800d449
 800d3f0:	0800d449 	.word	0x0800d449
 800d3f4:	0800d449 	.word	0x0800d449
 800d3f8:	0800d449 	.word	0x0800d449
 800d3fc:	0800d449 	.word	0x0800d449
 800d400:	0800d449 	.word	0x0800d449
 800d404:	0800d449 	.word	0x0800d449
 800d408:	0800d449 	.word	0x0800d449
 800d40c:	0800d449 	.word	0x0800d449
 800d410:	0800d449 	.word	0x0800d449
 800d414:	0800d449 	.word	0x0800d449
 800d418:	0800d449 	.word	0x0800d449
 800d41c:	0800d449 	.word	0x0800d449
 800d420:	0800d449 	.word	0x0800d449
 800d424:	0800d449 	.word	0x0800d449
 800d428:	0800d449 	.word	0x0800d449
 800d42c:	0800d449 	.word	0x0800d449
 800d430:	0800d449 	.word	0x0800d449
 800d434:	0800d449 	.word	0x0800d449
 800d438:	0800d449 	.word	0x0800d449
 800d43c:	0800d449 	.word	0x0800d449
 800d440:	0800d449 	.word	0x0800d449
 800d444:	0800d449 	.word	0x0800d449
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d448:	bf00      	nop
  }

  return (USBD_OK);
 800d44a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	4805      	ldr	r0, [pc, #20]	; (800d47c <CDC_Receive_FS+0x24>)
 800d466:	f7fe fe3e 	bl	800c0e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d46a:	4804      	ldr	r0, [pc, #16]	; (800d47c <CDC_Receive_FS+0x24>)
 800d46c:	f7fe fe7e 	bl	800c16c <USBD_CDC_ReceivePacket>
//	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
//  }
//  else if(Buf[0] == '0'){
//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
//  }
  return (USBD_OK);
 800d470:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d472:	4618      	mov	r0, r3
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	200002ec 	.word	0x200002ec

0800d480 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d490:	4b0d      	ldr	r3, [pc, #52]	; (800d4c8 <CDC_Transmit_FS+0x48>)
 800d492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d496:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e00b      	b.n	800d4be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d4a6:	887b      	ldrh	r3, [r7, #2]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	4806      	ldr	r0, [pc, #24]	; (800d4c8 <CDC_Transmit_FS+0x48>)
 800d4ae:	f7fe fe00 	bl	800c0b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d4b2:	4805      	ldr	r0, [pc, #20]	; (800d4c8 <CDC_Transmit_FS+0x48>)
 800d4b4:	f7fe fe2b 	bl	800c10e <USBD_CDC_TransmitPacket>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	200002ec 	.word	0x200002ec

0800d4cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2212      	movs	r2, #18
 800d4dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4de:	4b03      	ldr	r3, [pc, #12]	; (800d4ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	20000148 	.word	0x20000148

0800d4f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	6039      	str	r1, [r7, #0]
 800d4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2204      	movs	r2, #4
 800d500:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d502:	4b03      	ldr	r3, [pc, #12]	; (800d510 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d504:	4618      	mov	r0, r3
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	2000015c 	.word	0x2000015c

0800d514 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	4603      	mov	r3, r0
 800d51c:	6039      	str	r1, [r7, #0]
 800d51e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d520:	79fb      	ldrb	r3, [r7, #7]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d105      	bne.n	800d532 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	4907      	ldr	r1, [pc, #28]	; (800d548 <USBD_FS_ProductStrDescriptor+0x34>)
 800d52a:	4808      	ldr	r0, [pc, #32]	; (800d54c <USBD_FS_ProductStrDescriptor+0x38>)
 800d52c:	f7ff fe0b 	bl	800d146 <USBD_GetString>
 800d530:	e004      	b.n	800d53c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	4904      	ldr	r1, [pc, #16]	; (800d548 <USBD_FS_ProductStrDescriptor+0x34>)
 800d536:	4805      	ldr	r0, [pc, #20]	; (800d54c <USBD_FS_ProductStrDescriptor+0x38>)
 800d538:	f7ff fe05 	bl	800d146 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d53c:	4b02      	ldr	r3, [pc, #8]	; (800d548 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	20000d80 	.word	0x20000d80
 800d54c:	0800dfa8 	.word	0x0800dfa8

0800d550 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	4603      	mov	r3, r0
 800d558:	6039      	str	r1, [r7, #0]
 800d55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	4904      	ldr	r1, [pc, #16]	; (800d570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d560:	4804      	ldr	r0, [pc, #16]	; (800d574 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d562:	f7ff fdf0 	bl	800d146 <USBD_GetString>
  return USBD_StrDesc;
 800d566:	4b02      	ldr	r3, [pc, #8]	; (800d570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	20000d80 	.word	0x20000d80
 800d574:	0800dfc0 	.word	0x0800dfc0

0800d578 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	6039      	str	r1, [r7, #0]
 800d582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	221a      	movs	r2, #26
 800d588:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d58a:	f000 f843 	bl	800d614 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d58e:	4b02      	ldr	r3, [pc, #8]	; (800d598 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d590:	4618      	mov	r0, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	20000160 	.word	0x20000160

0800d59c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	6039      	str	r1, [r7, #0]
 800d5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5a8:	79fb      	ldrb	r3, [r7, #7]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d105      	bne.n	800d5ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5ae:	683a      	ldr	r2, [r7, #0]
 800d5b0:	4907      	ldr	r1, [pc, #28]	; (800d5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5b2:	4808      	ldr	r0, [pc, #32]	; (800d5d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5b4:	f7ff fdc7 	bl	800d146 <USBD_GetString>
 800d5b8:	e004      	b.n	800d5c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	4904      	ldr	r1, [pc, #16]	; (800d5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5be:	4805      	ldr	r0, [pc, #20]	; (800d5d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5c0:	f7ff fdc1 	bl	800d146 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5c4:	4b02      	ldr	r3, [pc, #8]	; (800d5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20000d80 	.word	0x20000d80
 800d5d4:	0800dfd4 	.word	0x0800dfd4

0800d5d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	6039      	str	r1, [r7, #0]
 800d5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5e4:	79fb      	ldrb	r3, [r7, #7]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d105      	bne.n	800d5f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ea:	683a      	ldr	r2, [r7, #0]
 800d5ec:	4907      	ldr	r1, [pc, #28]	; (800d60c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5ee:	4808      	ldr	r0, [pc, #32]	; (800d610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5f0:	f7ff fda9 	bl	800d146 <USBD_GetString>
 800d5f4:	e004      	b.n	800d600 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	4904      	ldr	r1, [pc, #16]	; (800d60c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5fa:	4805      	ldr	r0, [pc, #20]	; (800d610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5fc:	f7ff fda3 	bl	800d146 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d600:	4b02      	ldr	r3, [pc, #8]	; (800d60c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	20000d80 	.word	0x20000d80
 800d610:	0800dfe0 	.word	0x0800dfe0

0800d614 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d61a:	4b0f      	ldr	r3, [pc, #60]	; (800d658 <Get_SerialNum+0x44>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d620:	4b0e      	ldr	r3, [pc, #56]	; (800d65c <Get_SerialNum+0x48>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d626:	4b0e      	ldr	r3, [pc, #56]	; (800d660 <Get_SerialNum+0x4c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4413      	add	r3, r2
 800d632:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d009      	beq.n	800d64e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d63a:	2208      	movs	r2, #8
 800d63c:	4909      	ldr	r1, [pc, #36]	; (800d664 <Get_SerialNum+0x50>)
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 f814 	bl	800d66c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d644:	2204      	movs	r2, #4
 800d646:	4908      	ldr	r1, [pc, #32]	; (800d668 <Get_SerialNum+0x54>)
 800d648:	68b8      	ldr	r0, [r7, #8]
 800d64a:	f000 f80f 	bl	800d66c <IntToUnicode>
  }
}
 800d64e:	bf00      	nop
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	1ffff7ac 	.word	0x1ffff7ac
 800d65c:	1ffff7b0 	.word	0x1ffff7b0
 800d660:	1ffff7b4 	.word	0x1ffff7b4
 800d664:	20000162 	.word	0x20000162
 800d668:	20000172 	.word	0x20000172

0800d66c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d67e:	2300      	movs	r3, #0
 800d680:	75fb      	strb	r3, [r7, #23]
 800d682:	e027      	b.n	800d6d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	0f1b      	lsrs	r3, r3, #28
 800d688:	2b09      	cmp	r3, #9
 800d68a:	d80b      	bhi.n	800d6a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	0f1b      	lsrs	r3, r3, #28
 800d690:	b2da      	uxtb	r2, r3
 800d692:	7dfb      	ldrb	r3, [r7, #23]
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	4619      	mov	r1, r3
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	440b      	add	r3, r1
 800d69c:	3230      	adds	r2, #48	; 0x30
 800d69e:	b2d2      	uxtb	r2, r2
 800d6a0:	701a      	strb	r2, [r3, #0]
 800d6a2:	e00a      	b.n	800d6ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	0f1b      	lsrs	r3, r3, #28
 800d6a8:	b2da      	uxtb	r2, r3
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	440b      	add	r3, r1
 800d6b4:	3237      	adds	r2, #55	; 0x37
 800d6b6:	b2d2      	uxtb	r2, r2
 800d6b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	011b      	lsls	r3, r3, #4
 800d6be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	75fb      	strb	r3, [r7, #23]
 800d6d4:	7dfa      	ldrb	r2, [r7, #23]
 800d6d6:	79fb      	ldrb	r3, [r7, #7]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d3d3      	bcc.n	800d684 <IntToUnicode+0x18>
  }
}
 800d6dc:	bf00      	nop
 800d6de:	bf00      	nop
 800d6e0:	371c      	adds	r7, #28
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
	...

0800d6ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08a      	sub	sp, #40	; 0x28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6f4:	f107 0314 	add.w	r3, r7, #20
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
 800d6fc:	605a      	str	r2, [r3, #4]
 800d6fe:	609a      	str	r2, [r3, #8]
 800d700:	60da      	str	r2, [r3, #12]
 800d702:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a1c      	ldr	r2, [pc, #112]	; (800d77c <HAL_PCD_MspInit+0x90>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d131      	bne.n	800d772 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d70e:	4b1c      	ldr	r3, [pc, #112]	; (800d780 <HAL_PCD_MspInit+0x94>)
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	4a1b      	ldr	r2, [pc, #108]	; (800d780 <HAL_PCD_MspInit+0x94>)
 800d714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d718:	6153      	str	r3, [r2, #20]
 800d71a:	4b19      	ldr	r3, [pc, #100]	; (800d780 <HAL_PCD_MspInit+0x94>)
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d722:	613b      	str	r3, [r7, #16]
 800d724:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800d726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d72a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d72c:	2302      	movs	r3, #2
 800d72e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d730:	2300      	movs	r3, #0
 800d732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d734:	2303      	movs	r3, #3
 800d736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d738:	230e      	movs	r3, #14
 800d73a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d73c:	f107 0314 	add.w	r3, r7, #20
 800d740:	4619      	mov	r1, r3
 800d742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d746:	f7f5 fdf9 	bl	800333c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d74a:	4b0d      	ldr	r3, [pc, #52]	; (800d780 <HAL_PCD_MspInit+0x94>)
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	4a0c      	ldr	r2, [pc, #48]	; (800d780 <HAL_PCD_MspInit+0x94>)
 800d750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d754:	61d3      	str	r3, [r2, #28]
 800d756:	4b0a      	ldr	r3, [pc, #40]	; (800d780 <HAL_PCD_MspInit+0x94>)
 800d758:	69db      	ldr	r3, [r3, #28]
 800d75a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800d762:	2200      	movs	r2, #0
 800d764:	2100      	movs	r1, #0
 800d766:	2014      	movs	r0, #20
 800d768:	f7f5 fd98 	bl	800329c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800d76c:	2014      	movs	r0, #20
 800d76e:	f7f5 fdc1 	bl	80032f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d772:	bf00      	nop
 800d774:	3728      	adds	r7, #40	; 0x28
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	40005c00 	.word	0x40005c00
 800d780:	40021000 	.word	0x40021000

0800d784 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d798:	4619      	mov	r1, r3
 800d79a:	4610      	mov	r0, r2
 800d79c:	f7fe fd9e 	bl	800c2dc <USBD_LL_SetupStage>
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d7ba:	78fa      	ldrb	r2, [r7, #3]
 800d7bc:	6879      	ldr	r1, [r7, #4]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	4413      	add	r3, r2
 800d7c4:	00db      	lsls	r3, r3, #3
 800d7c6:	440b      	add	r3, r1
 800d7c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	78fb      	ldrb	r3, [r7, #3]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	f7fe fdd0 	bl	800c376 <USBD_LL_DataOutStage>
}
 800d7d6:	bf00      	nop
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b082      	sub	sp, #8
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d7f0:	78fa      	ldrb	r2, [r7, #3]
 800d7f2:	6879      	ldr	r1, [r7, #4]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	333c      	adds	r3, #60	; 0x3c
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	78fb      	ldrb	r3, [r7, #3]
 800d804:	4619      	mov	r1, r3
 800d806:	f7fe fe27 	bl	800c458 <USBD_LL_DataInStage>
}
 800d80a:	bf00      	nop
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b082      	sub	sp, #8
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d820:	4618      	mov	r0, r3
 800d822:	f7fe ff3a 	bl	800c69a <USBD_LL_SOF>
}
 800d826:	bf00      	nop
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b084      	sub	sp, #16
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d836:	2301      	movs	r3, #1
 800d838:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d001      	beq.n	800d846 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d842:	f7f2 ff35 	bl	80006b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d84c:	7bfa      	ldrb	r2, [r7, #15]
 800d84e:	4611      	mov	r1, r2
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fee7 	bl	800c624 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fe fea0 	bl	800c5a2 <USBD_LL_Reset>
}
 800d862:	bf00      	nop
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
	...

0800d86c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fe fee2 	bl	800c644 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	699b      	ldr	r3, [r3, #24]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d005      	beq.n	800d894 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d888:	4b04      	ldr	r3, [pc, #16]	; (800d89c <HAL_PCD_SuspendCallback+0x30>)
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	4a03      	ldr	r2, [pc, #12]	; (800d89c <HAL_PCD_SuspendCallback+0x30>)
 800d88e:	f043 0306 	orr.w	r3, r3, #6
 800d892:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d894:	bf00      	nop
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	e000ed00 	.word	0xe000ed00

0800d8a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe fedd 	bl	800c66e <USBD_LL_Resume>
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d8c4:	4a28      	ldr	r2, [pc, #160]	; (800d968 <USBD_LL_Init+0xac>)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a26      	ldr	r2, [pc, #152]	; (800d968 <USBD_LL_Init+0xac>)
 800d8d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d8d4:	4b24      	ldr	r3, [pc, #144]	; (800d968 <USBD_LL_Init+0xac>)
 800d8d6:	4a25      	ldr	r2, [pc, #148]	; (800d96c <USBD_LL_Init+0xb0>)
 800d8d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d8da:	4b23      	ldr	r3, [pc, #140]	; (800d968 <USBD_LL_Init+0xac>)
 800d8dc:	2208      	movs	r2, #8
 800d8de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d8e0:	4b21      	ldr	r3, [pc, #132]	; (800d968 <USBD_LL_Init+0xac>)
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d8e6:	4b20      	ldr	r3, [pc, #128]	; (800d968 <USBD_LL_Init+0xac>)
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d8ec:	4b1e      	ldr	r3, [pc, #120]	; (800d968 <USBD_LL_Init+0xac>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d8f2:	4b1d      	ldr	r3, [pc, #116]	; (800d968 <USBD_LL_Init+0xac>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d8f8:	481b      	ldr	r0, [pc, #108]	; (800d968 <USBD_LL_Init+0xac>)
 800d8fa:	f7f6 f979 	bl	8003bf0 <HAL_PCD_Init>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d904:	f7f2 fed4 	bl	80006b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d90e:	2318      	movs	r3, #24
 800d910:	2200      	movs	r2, #0
 800d912:	2100      	movs	r1, #0
 800d914:	f7f7 fe22 	bl	800555c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d91e:	2358      	movs	r3, #88	; 0x58
 800d920:	2200      	movs	r2, #0
 800d922:	2180      	movs	r1, #128	; 0x80
 800d924:	f7f7 fe1a 	bl	800555c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d92e:	23c0      	movs	r3, #192	; 0xc0
 800d930:	2200      	movs	r2, #0
 800d932:	2181      	movs	r1, #129	; 0x81
 800d934:	f7f7 fe12 	bl	800555c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d93e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d942:	2200      	movs	r2, #0
 800d944:	2101      	movs	r1, #1
 800d946:	f7f7 fe09 	bl	800555c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d950:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d954:	2200      	movs	r2, #0
 800d956:	2182      	movs	r1, #130	; 0x82
 800d958:	f7f7 fe00 	bl	800555c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	20000f80 	.word	0x20000f80
 800d96c:	40005c00 	.word	0x40005c00

0800d970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d986:	4618      	mov	r0, r3
 800d988:	f7f6 fa1e 	bl	8003dc8 <HAL_PCD_Start>
 800d98c:	4603      	mov	r3, r0
 800d98e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d990:	7bfb      	ldrb	r3, [r7, #15]
 800d992:	4618      	mov	r0, r3
 800d994:	f000 f954 	bl	800dc40 <USBD_Get_USB_Status>
 800d998:	4603      	mov	r3, r0
 800d99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b084      	sub	sp, #16
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	70fb      	strb	r3, [r7, #3]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70bb      	strb	r3, [r7, #2]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9ce:	78bb      	ldrb	r3, [r7, #2]
 800d9d0:	883a      	ldrh	r2, [r7, #0]
 800d9d2:	78f9      	ldrb	r1, [r7, #3]
 800d9d4:	f7f6 fb3a 	bl	800404c <HAL_PCD_EP_Open>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 f92e 	bl	800dc40 <USBD_Get_USB_Status>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da02:	2300      	movs	r3, #0
 800da04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da0c:	78fa      	ldrb	r2, [r7, #3]
 800da0e:	4611      	mov	r1, r2
 800da10:	4618      	mov	r0, r3
 800da12:	f7f6 fb81 	bl	8004118 <HAL_PCD_EP_Close>
 800da16:	4603      	mov	r3, r0
 800da18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 f90f 	bl	800dc40 <USBD_Get_USB_Status>
 800da22:	4603      	mov	r3, r0
 800da24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da26:	7bbb      	ldrb	r3, [r7, #14]
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da4a:	78fa      	ldrb	r2, [r7, #3]
 800da4c:	4611      	mov	r1, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	f7f6 fc42 	bl	80042d8 <HAL_PCD_EP_SetStall>
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 f8f0 	bl	800dc40 <USBD_Get_USB_Status>
 800da60:	4603      	mov	r3, r0
 800da62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da64:	7bbb      	ldrb	r3, [r7, #14]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b084      	sub	sp, #16
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	460b      	mov	r3, r1
 800da78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7a:	2300      	movs	r3, #0
 800da7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da88:	78fa      	ldrb	r2, [r7, #3]
 800da8a:	4611      	mov	r1, r2
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f6 fc75 	bl	800437c <HAL_PCD_EP_ClrStall>
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	4618      	mov	r0, r3
 800da9a:	f000 f8d1 	bl	800dc40 <USBD_Get_USB_Status>
 800da9e:	4603      	mov	r3, r0
 800daa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dabe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	da0c      	bge.n	800dae2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dac8:	78fb      	ldrb	r3, [r7, #3]
 800daca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dace:	68f9      	ldr	r1, [r7, #12]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	4613      	mov	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4413      	add	r3, r2
 800dad8:	00db      	lsls	r3, r3, #3
 800dada:	440b      	add	r3, r1
 800dadc:	3302      	adds	r3, #2
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	e00b      	b.n	800dafa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dae2:	78fb      	ldrb	r3, [r7, #3]
 800dae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dae8:	68f9      	ldr	r1, [r7, #12]
 800daea:	4613      	mov	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	4413      	add	r3, r2
 800daf0:	00db      	lsls	r3, r3, #3
 800daf2:	440b      	add	r3, r1
 800daf4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800daf8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b084      	sub	sp, #16
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	460b      	mov	r3, r1
 800db10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db20:	78fa      	ldrb	r2, [r7, #3]
 800db22:	4611      	mov	r1, r2
 800db24:	4618      	mov	r0, r3
 800db26:	f7f6 fa6c 	bl	8004002 <HAL_PCD_SetAddress>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	4618      	mov	r0, r3
 800db32:	f000 f885 	bl	800dc40 <USBD_Get_USB_Status>
 800db36:	4603      	mov	r3, r0
 800db38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	607a      	str	r2, [r7, #4]
 800db4e:	461a      	mov	r2, r3
 800db50:	460b      	mov	r3, r1
 800db52:	72fb      	strb	r3, [r7, #11]
 800db54:	4613      	mov	r3, r2
 800db56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800db66:	893b      	ldrh	r3, [r7, #8]
 800db68:	7af9      	ldrb	r1, [r7, #11]
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	f7f6 fb71 	bl	8004252 <HAL_PCD_EP_Transmit>
 800db70:	4603      	mov	r3, r0
 800db72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f862 	bl	800dc40 <USBD_Get_USB_Status>
 800db7c:	4603      	mov	r3, r0
 800db7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db80:	7dbb      	ldrb	r3, [r7, #22]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b086      	sub	sp, #24
 800db8e:	af00      	add	r7, sp, #0
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	461a      	mov	r2, r3
 800db96:	460b      	mov	r3, r1
 800db98:	72fb      	strb	r3, [r7, #11]
 800db9a:	4613      	mov	r3, r2
 800db9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbac:	893b      	ldrh	r3, [r7, #8]
 800dbae:	7af9      	ldrb	r1, [r7, #11]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	f7f6 faf9 	bl	80041a8 <HAL_PCD_EP_Receive>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 f83f 	bl	800dc40 <USBD_Get_USB_Status>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbe2:	78fa      	ldrb	r2, [r7, #3]
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7f6 fb1b 	bl	8004222 <HAL_PCD_EP_GetRxCount>
 800dbec:	4603      	mov	r3, r0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
	...

0800dbf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc00:	4b03      	ldr	r3, [pc, #12]	; (800dc10 <USBD_static_malloc+0x18>)
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	2000126c 	.word	0x2000126c

0800dc14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]

}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	460b      	mov	r3, r1
 800dc32:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4603      	mov	r3, r0
 800dc48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	d817      	bhi.n	800dc84 <USBD_Get_USB_Status+0x44>
 800dc54:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <USBD_Get_USB_Status+0x1c>)
 800dc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5a:	bf00      	nop
 800dc5c:	0800dc6d 	.word	0x0800dc6d
 800dc60:	0800dc73 	.word	0x0800dc73
 800dc64:	0800dc79 	.word	0x0800dc79
 800dc68:	0800dc7f 	.word	0x0800dc7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc70:	e00b      	b.n	800dc8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc72:	2302      	movs	r3, #2
 800dc74:	73fb      	strb	r3, [r7, #15]
    break;
 800dc76:	e008      	b.n	800dc8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc7c:	e005      	b.n	800dc8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc7e:	2302      	movs	r3, #2
 800dc80:	73fb      	strb	r3, [r7, #15]
    break;
 800dc82:	e002      	b.n	800dc8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc84:	2302      	movs	r3, #2
 800dc86:	73fb      	strb	r3, [r7, #15]
    break;
 800dc88:	bf00      	nop
  }
  return usb_status;
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <__libc_init_array>:
 800dc98:	b570      	push	{r4, r5, r6, lr}
 800dc9a:	4d0d      	ldr	r5, [pc, #52]	; (800dcd0 <__libc_init_array+0x38>)
 800dc9c:	4c0d      	ldr	r4, [pc, #52]	; (800dcd4 <__libc_init_array+0x3c>)
 800dc9e:	1b64      	subs	r4, r4, r5
 800dca0:	10a4      	asrs	r4, r4, #2
 800dca2:	2600      	movs	r6, #0
 800dca4:	42a6      	cmp	r6, r4
 800dca6:	d109      	bne.n	800dcbc <__libc_init_array+0x24>
 800dca8:	4d0b      	ldr	r5, [pc, #44]	; (800dcd8 <__libc_init_array+0x40>)
 800dcaa:	4c0c      	ldr	r4, [pc, #48]	; (800dcdc <__libc_init_array+0x44>)
 800dcac:	f000 f820 	bl	800dcf0 <_init>
 800dcb0:	1b64      	subs	r4, r4, r5
 800dcb2:	10a4      	asrs	r4, r4, #2
 800dcb4:	2600      	movs	r6, #0
 800dcb6:	42a6      	cmp	r6, r4
 800dcb8:	d105      	bne.n	800dcc6 <__libc_init_array+0x2e>
 800dcba:	bd70      	pop	{r4, r5, r6, pc}
 800dcbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc0:	4798      	blx	r3
 800dcc2:	3601      	adds	r6, #1
 800dcc4:	e7ee      	b.n	800dca4 <__libc_init_array+0xc>
 800dcc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcca:	4798      	blx	r3
 800dccc:	3601      	adds	r6, #1
 800dcce:	e7f2      	b.n	800dcb6 <__libc_init_array+0x1e>
 800dcd0:	0800e020 	.word	0x0800e020
 800dcd4:	0800e020 	.word	0x0800e020
 800dcd8:	0800e020 	.word	0x0800e020
 800dcdc:	0800e024 	.word	0x0800e024

0800dce0 <memset>:
 800dce0:	4402      	add	r2, r0
 800dce2:	4603      	mov	r3, r0
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d100      	bne.n	800dcea <memset+0xa>
 800dce8:	4770      	bx	lr
 800dcea:	f803 1b01 	strb.w	r1, [r3], #1
 800dcee:	e7f9      	b.n	800dce4 <memset+0x4>

0800dcf0 <_init>:
 800dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf2:	bf00      	nop
 800dcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf6:	bc08      	pop	{r3}
 800dcf8:	469e      	mov	lr, r3
 800dcfa:	4770      	bx	lr

0800dcfc <_fini>:
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	bf00      	nop
 800dd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd02:	bc08      	pop	{r3}
 800dd04:	469e      	mov	lr, r3
 800dd06:	4770      	bx	lr
