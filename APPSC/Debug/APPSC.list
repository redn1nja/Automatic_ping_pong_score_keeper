
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00032634  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d44  080327d0  080327d0  000427d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037514  08037514  00050740  2**0
                  CONTENTS
  4 .ARM          00000008  08037514  08037514  00047514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803751c  0803751c  00050740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803751c  0803751c  0004751c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037524  08037524  00047524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  08037528  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050740  2**0
                  CONTENTS
 10 .bss          00001d28  20000740  20000740  00050740  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002468  20002468  00050740  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050740  2**0
                  CONTENTS, READONLY
 13 .debug_info   0013a5df  00000000  00000000  00050770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00016341  00000000  00000000  0018ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005f38  00000000  00000000  001a1090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005af8  00000000  00000000  001a6fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037ca9  00000000  00000000  001acac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007f149  00000000  00000000  001e4769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018ee62  00000000  00000000  002638b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003f2714  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001bcd4  00000000  00000000  003f2764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000740 	.word	0x20000740
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080327ac 	.word	0x080327ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000744 	.word	0x20000744
 80001cc:	080327ac 	.word	0x080327ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9dd 	b.w	8001078 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f86b 	bl	8000da8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f85e 	bl	8000da8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f84d 	bl	8000da8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f83f 	bl	8000da8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_d2lz>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2300      	movs	r3, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	460d      	mov	r5, r1
 8000d46:	f7ff fed3 	bl	8000af0 <__aeabi_dcmplt>
 8000d4a:	b928      	cbnz	r0, 8000d58 <__aeabi_d2lz+0x1c>
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	4629      	mov	r1, r5
 8000d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d54:	f000 b80a 	b.w	8000d6c <__aeabi_d2ulz>
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5e:	f000 f805 	bl	8000d6c <__aeabi_d2ulz>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
 8000d6a:	bf00      	nop

08000d6c <__aeabi_d2ulz>:
 8000d6c:	b5d0      	push	{r4, r6, r7, lr}
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__aeabi_d2ulz+0x34>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	4606      	mov	r6, r0
 8000d74:	460f      	mov	r7, r1
 8000d76:	f7ff fc49 	bl	800060c <__aeabi_dmul>
 8000d7a:	f7ff ff1f 	bl	8000bbc <__aeabi_d2uiz>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	f7ff fbca 	bl	8000518 <__aeabi_ui2d>
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <__aeabi_d2ulz+0x38>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f7ff fc40 	bl	800060c <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4630      	mov	r0, r6
 8000d92:	4639      	mov	r1, r7
 8000d94:	f7ff fa82 	bl	800029c <__aeabi_dsub>
 8000d98:	f7ff ff10 	bl	8000bbc <__aeabi_d2uiz>
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000da0:	3df00000 	.word	0x3df00000
 8000da4:	41f00000 	.word	0x41f00000

08000da8 <__udivmoddi4>:
 8000da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dac:	9d08      	ldr	r5, [sp, #32]
 8000dae:	4604      	mov	r4, r0
 8000db0:	468e      	mov	lr, r1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d14d      	bne.n	8000e52 <__udivmoddi4+0xaa>
 8000db6:	428a      	cmp	r2, r1
 8000db8:	4694      	mov	ip, r2
 8000dba:	d969      	bls.n	8000e90 <__udivmoddi4+0xe8>
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	b152      	cbz	r2, 8000dd8 <__udivmoddi4+0x30>
 8000dc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc6:	f1c2 0120 	rsb	r1, r2, #32
 8000dca:	fa20 f101 	lsr.w	r1, r0, r1
 8000dce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd6:	4094      	lsls	r4, r2
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	0c21      	lsrs	r1, r4, #16
 8000dde:	fbbe f6f8 	udiv	r6, lr, r8
 8000de2:	fa1f f78c 	uxth.w	r7, ip
 8000de6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dee:	fb06 f107 	mul.w	r1, r6, r7
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x64>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfe:	f080 811f 	bcs.w	8001040 <__udivmoddi4+0x298>
 8000e02:	4299      	cmp	r1, r3
 8000e04:	f240 811c 	bls.w	8001040 <__udivmoddi4+0x298>
 8000e08:	3e02      	subs	r6, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb00 f707 	mul.w	r7, r0, r7
 8000e20:	42a7      	cmp	r7, r4
 8000e22:	d90a      	bls.n	8000e3a <__udivmoddi4+0x92>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	f080 810a 	bcs.w	8001044 <__udivmoddi4+0x29c>
 8000e30:	42a7      	cmp	r7, r4
 8000e32:	f240 8107 	bls.w	8001044 <__udivmoddi4+0x29c>
 8000e36:	4464      	add	r4, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3e:	1be4      	subs	r4, r4, r7
 8000e40:	2600      	movs	r6, #0
 8000e42:	b11d      	cbz	r5, 8000e4c <__udivmoddi4+0xa4>
 8000e44:	40d4      	lsrs	r4, r2
 8000e46:	2300      	movs	r3, #0
 8000e48:	e9c5 4300 	strd	r4, r3, [r5]
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d909      	bls.n	8000e6a <__udivmoddi4+0xc2>
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	f000 80ef 	beq.w	800103a <__udivmoddi4+0x292>
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e62:	4630      	mov	r0, r6
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	fab3 f683 	clz	r6, r3
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d14a      	bne.n	8000f08 <__udivmoddi4+0x160>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d302      	bcc.n	8000e7c <__udivmoddi4+0xd4>
 8000e76:	4282      	cmp	r2, r0
 8000e78:	f200 80f9 	bhi.w	800106e <__udivmoddi4+0x2c6>
 8000e7c:	1a84      	subs	r4, r0, r2
 8000e7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e82:	2001      	movs	r0, #1
 8000e84:	469e      	mov	lr, r3
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d0e0      	beq.n	8000e4c <__udivmoddi4+0xa4>
 8000e8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8e:	e7dd      	b.n	8000e4c <__udivmoddi4+0xa4>
 8000e90:	b902      	cbnz	r2, 8000e94 <__udivmoddi4+0xec>
 8000e92:	deff      	udf	#255	; 0xff
 8000e94:	fab2 f282 	clz	r2, r2
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	f040 8092 	bne.w	8000fc2 <__udivmoddi4+0x21a>
 8000e9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ea2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea6:	fa1f fe8c 	uxth.w	lr, ip
 8000eaa:	2601      	movs	r6, #1
 8000eac:	0c20      	lsrs	r0, r4, #16
 8000eae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eba:	fb0e f003 	mul.w	r0, lr, r3
 8000ebe:	4288      	cmp	r0, r1
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x12c>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eca:	d202      	bcs.n	8000ed2 <__udivmoddi4+0x12a>
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	f200 80cb 	bhi.w	8001068 <__udivmoddi4+0x2c0>
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000edc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ee0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x156>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef4:	d202      	bcs.n	8000efc <__udivmoddi4+0x154>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	f200 80bb 	bhi.w	8001072 <__udivmoddi4+0x2ca>
 8000efc:	4608      	mov	r0, r1
 8000efe:	eba4 040e 	sub.w	r4, r4, lr
 8000f02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f06:	e79c      	b.n	8000e42 <__udivmoddi4+0x9a>
 8000f08:	f1c6 0720 	rsb	r7, r6, #32
 8000f0c:	40b3      	lsls	r3, r6
 8000f0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f16:	fa20 f407 	lsr.w	r4, r0, r7
 8000f1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	40f9      	lsrs	r1, r7
 8000f22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f26:	fa00 f306 	lsl.w	r3, r0, r6
 8000f2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2e:	0c20      	lsrs	r0, r4, #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fb09 1118 	mls	r1, r9, r8, r1
 8000f38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f40:	4288      	cmp	r0, r1
 8000f42:	fa02 f206 	lsl.w	r2, r2, r6
 8000f46:	d90b      	bls.n	8000f60 <__udivmoddi4+0x1b8>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f50:	f080 8088 	bcs.w	8001064 <__udivmoddi4+0x2bc>
 8000f54:	4288      	cmp	r0, r1
 8000f56:	f240 8085 	bls.w	8001064 <__udivmoddi4+0x2bc>
 8000f5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1a09      	subs	r1, r1, r0
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f68:	fb09 1110 	mls	r1, r9, r0, r1
 8000f6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f74:	458e      	cmp	lr, r1
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x1e2>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f80:	d26c      	bcs.n	800105c <__udivmoddi4+0x2b4>
 8000f82:	458e      	cmp	lr, r1
 8000f84:	d96a      	bls.n	800105c <__udivmoddi4+0x2b4>
 8000f86:	3802      	subs	r0, #2
 8000f88:	4461      	add	r1, ip
 8000f8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f92:	eba1 010e 	sub.w	r1, r1, lr
 8000f96:	42a1      	cmp	r1, r4
 8000f98:	46c8      	mov	r8, r9
 8000f9a:	46a6      	mov	lr, r4
 8000f9c:	d356      	bcc.n	800104c <__udivmoddi4+0x2a4>
 8000f9e:	d053      	beq.n	8001048 <__udivmoddi4+0x2a0>
 8000fa0:	b15d      	cbz	r5, 8000fba <__udivmoddi4+0x212>
 8000fa2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa6:	eb61 010e 	sbc.w	r1, r1, lr
 8000faa:	fa01 f707 	lsl.w	r7, r1, r7
 8000fae:	fa22 f306 	lsr.w	r3, r2, r6
 8000fb2:	40f1      	lsrs	r1, r6
 8000fb4:	431f      	orrs	r7, r3
 8000fb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fba:	2600      	movs	r6, #0
 8000fbc:	4631      	mov	r1, r6
 8000fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc2:	f1c2 0320 	rsb	r3, r2, #32
 8000fc6:	40d8      	lsrs	r0, r3
 8000fc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	4301      	orrs	r1, r0
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa1f fe8c 	uxth.w	lr, ip
 8000fdc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fe0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe4:	0c0b      	lsrs	r3, r1, #16
 8000fe6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fea:	fb00 f60e 	mul.w	r6, r0, lr
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff4:	d908      	bls.n	8001008 <__udivmoddi4+0x260>
 8000ff6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffe:	d22f      	bcs.n	8001060 <__udivmoddi4+0x2b8>
 8001000:	429e      	cmp	r6, r3
 8001002:	d92d      	bls.n	8001060 <__udivmoddi4+0x2b8>
 8001004:	3802      	subs	r0, #2
 8001006:	4463      	add	r3, ip
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	b289      	uxth	r1, r1
 800100c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001010:	fb07 3316 	mls	r3, r7, r6, r3
 8001014:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001018:	fb06 f30e 	mul.w	r3, r6, lr
 800101c:	428b      	cmp	r3, r1
 800101e:	d908      	bls.n	8001032 <__udivmoddi4+0x28a>
 8001020:	eb1c 0101 	adds.w	r1, ip, r1
 8001024:	f106 38ff 	add.w	r8, r6, #4294967295
 8001028:	d216      	bcs.n	8001058 <__udivmoddi4+0x2b0>
 800102a:	428b      	cmp	r3, r1
 800102c:	d914      	bls.n	8001058 <__udivmoddi4+0x2b0>
 800102e:	3e02      	subs	r6, #2
 8001030:	4461      	add	r1, ip
 8001032:	1ac9      	subs	r1, r1, r3
 8001034:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001038:	e738      	b.n	8000eac <__udivmoddi4+0x104>
 800103a:	462e      	mov	r6, r5
 800103c:	4628      	mov	r0, r5
 800103e:	e705      	b.n	8000e4c <__udivmoddi4+0xa4>
 8001040:	4606      	mov	r6, r0
 8001042:	e6e3      	b.n	8000e0c <__udivmoddi4+0x64>
 8001044:	4618      	mov	r0, r3
 8001046:	e6f8      	b.n	8000e3a <__udivmoddi4+0x92>
 8001048:	454b      	cmp	r3, r9
 800104a:	d2a9      	bcs.n	8000fa0 <__udivmoddi4+0x1f8>
 800104c:	ebb9 0802 	subs.w	r8, r9, r2
 8001050:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001054:	3801      	subs	r0, #1
 8001056:	e7a3      	b.n	8000fa0 <__udivmoddi4+0x1f8>
 8001058:	4646      	mov	r6, r8
 800105a:	e7ea      	b.n	8001032 <__udivmoddi4+0x28a>
 800105c:	4620      	mov	r0, r4
 800105e:	e794      	b.n	8000f8a <__udivmoddi4+0x1e2>
 8001060:	4640      	mov	r0, r8
 8001062:	e7d1      	b.n	8001008 <__udivmoddi4+0x260>
 8001064:	46d0      	mov	r8, sl
 8001066:	e77b      	b.n	8000f60 <__udivmoddi4+0x1b8>
 8001068:	3b02      	subs	r3, #2
 800106a:	4461      	add	r1, ip
 800106c:	e732      	b.n	8000ed4 <__udivmoddi4+0x12c>
 800106e:	4630      	mov	r0, r6
 8001070:	e709      	b.n	8000e86 <__udivmoddi4+0xde>
 8001072:	4464      	add	r4, ip
 8001074:	3802      	subs	r0, #2
 8001076:	e742      	b.n	8000efe <__udivmoddi4+0x156>

08001078 <__aeabi_idiv0>:
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001082:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f030 f9fa 	bl	80314a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ac:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c0:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010cc:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010dc:	2201      	movs	r2, #1
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e0:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ec:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001102:	2200      	movs	r2, #0
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001106:	482a      	ldr	r0, [pc, #168]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001108:	f006 fc8c 	bl	8007a24 <HAL_ADC_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001112:	f004 fd01 	bl	8005b18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001116:	2300      	movs	r3, #0
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800111a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001122:	f008 fa6d 	bl	8009600 <HAL_ADCEx_MultiModeConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800112c:	f004 fcf4 	bl	8005b18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001130:	2306      	movs	r3, #6
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2301      	movs	r3, #1
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Offset = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114c:	4619      	mov	r1, r3
 800114e:	4818      	ldr	r0, [pc, #96]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001150:	f007 f850 	bl	80081f4 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800115a:	f004 fcdd 	bl	8005b18 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800115e:	2306      	movs	r3, #6
 8001160:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001162:	2301      	movs	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_ADC1_Init+0x134>)
 800119a:	f007 fca1 	bl	8008ae0 <HAL_ADCEx_InjectedConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80011a4:	f004 fcb8 	bl	8005b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	; 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000075c 	.word	0x2000075c

080011b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d4:	d123      	bne.n	800121e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <HAL_ADC_MspInit+0x78>)
 800121a:	f008 fe63 	bl	8009ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_CRC_Init+0x3c>)
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <MX_CRC_Init+0x40>)
 8001238:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_CRC_Init+0x3c>)
 800123c:	2200      	movs	r2, #0
 800123e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_CRC_Init+0x3c>)
 8001242:	2200      	movs	r2, #0
 8001244:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_CRC_Init+0x3c>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_CRC_Init+0x3c>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_CRC_Init+0x3c>)
 8001254:	2201      	movs	r2, #1
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_CRC_Init+0x3c>)
 800125a:	f008 fcf3 	bl	8009c44 <HAL_CRC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001264:	f004 fc58 	bl	8005b18 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200007ac 	.word	0x200007ac
 8001270:	40023000 	.word	0x40023000

08001274 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_CRC_MspInit+0x38>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10b      	bne.n	800129e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_CRC_MspInit+0x3c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_CRC_MspInit+0x3c>)
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_CRC_MspInit+0x3c>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023000 	.word	0x40023000
 80012b0:	40021000 	.word	0x40021000

080012b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4a36      	ldr	r2, [pc, #216]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6153      	str	r3, [r2, #20]
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_GPIO_Init+0xf4>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001342:	2200      	movs	r2, #0
 8001344:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001348:	4818      	ldr	r0, [pc, #96]	; (80013ac <MX_GPIO_Init+0xf8>)
 800134a:	f009 f813 	bl	800a374 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800134e:	2337      	movs	r3, #55	; 0x37
 8001350:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001352:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <MX_GPIO_Init+0xf8>)
 8001364:	f008 fdbe 	bl	8009ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001368:	f64f 7308 	movw	r3, #65288	; 0xff08
 800136c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <MX_GPIO_Init+0xf8>)
 8001382:	f008 fdaf 	bl	8009ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f008 fda2 	bl	8009ee4 <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48001000 	.word	0x48001000

080013b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_I2C1_Init+0x74>)
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <MX_I2C1_Init+0x78>)
 80013b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_I2C1_Init+0x74>)
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <MX_I2C1_Init+0x7c>)
 80013be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_I2C1_Init+0x74>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_I2C1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_I2C1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_I2C1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_I2C1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ea:	480e      	ldr	r0, [pc, #56]	; (8001424 <MX_I2C1_Init+0x74>)
 80013ec:	f008 fff2 	bl	800a3d4 <HAL_I2C_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013f6:	f004 fb8f 	bl	8005b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <MX_I2C1_Init+0x74>)
 80013fe:	f009 f8fd 	bl	800a5fc <HAL_I2CEx_ConfigAnalogFilter>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001408:	f004 fb86 	bl	8005b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_I2C1_Init+0x74>)
 8001410:	f009 f95c 	bl	800a6cc <HAL_I2CEx_ConfigDigitalFilter>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800141a:	f004 fb7d 	bl	8005b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200007d0 	.word	0x200007d0
 8001428:	40005400 	.word	0x40005400
 800142c:	2000090e 	.word	0x2000090e

08001430 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_I2C_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d127      	bne.n	80014a2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147a:	2304      	movs	r3, #4
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_I2C_MspInit+0x84>)
 8001486:	f008 fd2d 	bl	8009ee4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400

080014b8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80014ee:	2137      	movs	r1, #55	; 0x37
 80014f0:	4817      	ldr	r0, [pc, #92]	; (8001550 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80014f2:	f02f ff37 	bl	8031364 <__assert_func>

	if(align && size)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01f      	beq.n	800153c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01c      	beq.n	800153c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3301      	adds	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4413      	add	r3, r2
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f025 fb45 	bl	8026ba0 <_Z9ei_callocjj>
 8001516:	60f8      	str	r0, [r7, #12]

		if(p)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00e      	beq.n	800153c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	425b      	negs	r3, r3
 800152a:	4013      	ands	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad2      	subs	r2, r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3b02      	subs	r3, #2
 8001538:	b292      	uxth	r2, r2
 800153a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800153c:	697b      	ldr	r3, [r7, #20]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	080327f4 	.word	0x080327f4
 800154c:	08032810 	.word	0x08032810
 8001550:	08032848 	.word	0x08032848

08001554 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001566:	215a      	movs	r1, #90	; 0x5a
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800156a:	f02f fefb 	bl	8031364 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001574:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	425b      	negs	r3, r3
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001580:	68b8      	ldr	r0, [r7, #8]
 8001582:	f025 fb1b 	bl	8026bbc <_Z7ei_freePv>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	080328c8 	.word	0x080328c8
 8001594:	080328cc 	.word	0x080328cc
 8001598:	08032848 	.word	0x08032848

0800159c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4798      	blx	r3
    }
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	731a      	strb	r2, [r3, #12]
 800164c:	e00e      	b.n	800166c <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	2101      	movs	r1, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f025 faa0 	bl	8026ba0 <_Z9ei_callocjj>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7b1b      	ldrb	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f025 fa8c 	bl	8026bbc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	731a      	strb	r2, [r3, #12]
 80016ce:	e00d      	b.n	80016ec <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f025 fa60 	bl	8026ba0 <_Z9ei_callocjj>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7b1b      	ldrb	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f025 fa4c 	bl	8026bbc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>:
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_dequantization_fn How to dequantize the values in this matrix
     * @param a_buffer Optional: a buffer, if set we won't allocate memory ourselves
     */
    ei_quantized_matrix(uint32_t n_rows,
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
                        const char *file = NULL,
                        int line = 0
#endif
                        )
    {
        if (a_buffer) {
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x22>
            buffer = a_buffer;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	731a      	strb	r2, [r3, #12]
 800174e:	e00d      	b.n	800176c <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x3e>
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f025 fa20 	bl	8026ba0 <_Z9ei_callocjj>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
        dequantization_fn = a_dequantization_fn;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	611a      	str	r2, [r3, #16]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(uint8_t), buffer);
            }
#endif
        }
    }
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN2ei19ei_quantized_matrixD1Ev>:

    ~ei_quantized_matrix() {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
            ei_free(buffer);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f025 fa09 	bl	8026bbc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(uint8_t), buffer);
            }
#endif
        }
    }
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	e7fe      	b.n	80017b8 <_ZSt25__throw_bad_function_callv+0x4>

080017ba <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	ed87 0a01 	vstr	s0, [r7, #4]
 80017c4:	ed97 0a01 	vldr	s0, [r7, #4]
 80017c8:	f02d fbf6 	bl	802efb8 <ceilf>
 80017cc:	eef0 7a40 	vmov.f32	s15, s0
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80017e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80017e8:	f02d fd54 	bl	802f294 <expf>
 80017ec:	eef0 7a40 	vmov.f32	s15, s0
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	ed87 0a01 	vstr	s0, [r7, #4]
 8001804:	ed97 0a01 	vldr	s0, [r7, #4]
 8001808:	f02d fc18 	bl	802f03c <floorf>
 800180c:	eef0 7a40 	vmov.f32	s15, s0
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	ed87 0a01 	vstr	s0, [r7, #4]
 8001824:	ed97 0a01 	vldr	s0, [r7, #4]
 8001828:	f02d fc74 	bl	802f114 <roundf>
 800182c:	eef0 7a40 	vmov.f32	s15, s0
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	ed87 0a01 	vstr	s0, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800184e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	db09      	blt.n	8001870 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800185c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001860:	f02d fd7c 	bl	802f35c <sqrtf>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800186e:	e004      	b.n	800187a <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001878:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001880:	eeb0 0a67 	vmov.f32	s0, s15
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <_ZN2ei5numpy4rollEPfji>:
     * @param input_array
     * @param input_array_size
     * @param shift The number of places by which elements are shifted.
     * @returns EIDSP_OK if OK
     */
    static int roll(float *input_array, size_t input_array_size, int shift) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
        if (shift < 0) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	da03      	bge.n	80018a6 <_ZN2ei5numpy4rollEPfji+0x1a>
            shift = input_array_size + shift;
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	607b      	str	r3, [r7, #4]
        }

        if (shift == 0) {
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <_ZN2ei5numpy4rollEPfji+0x24>
            return EIDSP_OK;
 80018ac:	2400      	movs	r4, #0
 80018ae:	e030      	b.n	8001912 <_ZN2ei5numpy4rollEPfji+0x86>
        }

        // so we need to allocate a buffer of the size of shift...
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	f107 0010 	add.w	r0, r7, #16
 80018b6:	2300      	movs	r3, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	f7ff feb7 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <_ZN2ei5numpy4rollEPfji+0x3c>
 80018c4:	4c15      	ldr	r4, [pc, #84]	; (800191c <_ZN2ei5numpy4rollEPfji+0x90>)
 80018c6:	e01f      	b.n	8001908 <_ZN2ei5numpy4rollEPfji+0x7c>

        // we copy from the end of the buffer into the shift buffer
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 80018c8:	6938      	ldr	r0, [r7, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	18d1      	adds	r1, r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	f02f fdb8 	bl	8031450 <memcpy>

        // now we do a memmove to shift the array
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	18d0      	adds	r0, r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	f02f fdba 	bl	803146c <memmove>

        // and copy the shift buffer back to the beginning of the array
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 80018f8:	6939      	ldr	r1, [r7, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	461a      	mov	r2, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f02f fda5 	bl	8031450 <memcpy>

        return EIDSP_OK;
 8001906:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff feb8 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 8001912:	4623      	mov	r3, r4
 8001914:	4618      	mov	r0, r3
 8001916:	3724      	adds	r7, #36	; 0x24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	fffffc16 	.word	0xfffffc16

08001920 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d20f      	bcs.n	800195c <_ZN2ei5numpy3sumEPfj+0x3c>
            res += input_array[ix];
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ed97 7a03 	vldr	s14, [r7, #12]
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	3301      	adds	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	e7eb      	b.n	8001934 <_ZN2ei5numpy3sumEPfj+0x14>
        }
        return res;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	ee07 3a90 	vmov	s15, r3
    }
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>:
     * @param matrix1_cols matrix1 row size
     * @param matrix2 Pointer to matrix2 (NxK)
     * @param out_matrix Pointer to out matrix (MxK)
     * @returns EIDSP_OK if OK
     */
    static inline int dot_by_row(int i, float *row, size_t matrix1_cols,
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
        quantized_matrix_t *matrix2, matrix_t *out_matrix)
    {
        if (matrix1_cols != matrix2->rows) {
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xbc>)
 800198a:	e048      	b.n	8001a1e <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xae>
        }

        for (uint16_t j = 0; j < matrix2->cols; j++) {
 800198c:	2300      	movs	r3, #0
 800198e:	83fb      	strh	r3, [r7, #30]
 8001990:	8bfa      	ldrh	r2, [r7, #30]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	d240      	bcs.n	8001a1c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xac>
            float tmp = 0.0;
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	82fb      	strh	r3, [r7, #22]
 80019a4:	8afb      	ldrh	r3, [r7, #22]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d926      	bls.n	80019fa <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x8a>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	8afb      	ldrh	r3, [r7, #22]
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	6889      	ldr	r1, [r1, #8]
 80019b6:	fb03 f101 	mul.w	r1, r3, r1
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	440b      	add	r3, r1
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	757b      	strb	r3, [r7, #21]
                if (u8) { // this matrix appears to be very sparsely populated
 80019c4:	7d7b      	ldrb	r3, [r7, #21]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d013      	beq.n	80019f2 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x82>
                    tmp += row[k] * quantized_values_one_zero[u8];
 80019ca:	8afb      	ldrh	r3, [r7, #22]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	7d7b      	ldrb	r3, [r7, #21]
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xc0>)
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	edc7 7a06 	vstr	s15, [r7, #24]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 80019f2:	8afb      	ldrh	r3, [r7, #22]
 80019f4:	3301      	adds	r3, #1
 80019f6:	82fb      	strh	r3, [r7, #22]
 80019f8:	e7d4      	b.n	80019a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x34>
                }
            }
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	fb03 f101 	mul.w	r1, r3, r1
 8001a08:	8bfb      	ldrh	r3, [r7, #30]
 8001a0a:	440b      	add	r3, r1
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 8001a14:	8bfb      	ldrh	r3, [r7, #30]
 8001a16:	3301      	adds	r3, #1
 8001a18:	83fb      	strh	r3, [r7, #30]
 8001a1a:	e7b9      	b.n	8001990 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x20>
        }

        return EIDSP_OK;
 8001a1c:	2300      	movs	r3, #0
    }
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	fffffc14 	.word	0xfffffc14
 8001a30:	0803519c 	.word	0x0803519c

08001a34 <_ZN2ei5numpy17quantize_zero_oneEf>:

    /**
     * Quantize a float value between zero and one
     * @param value Float value
     */
    static uint8_t quantize_zero_one(float value) {
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	ed87 0a01 	vstr	s0, [r7, #4]
        const size_t length = sizeof(quantized_values_one_zero) / sizeof(float);
 8001a3e:	23ef      	movs	r3, #239	; 0xef
 8001a40:	613b      	str	r3, [r7, #16]

        // look in the table
        for (size_t ix = 0; ix < length; ix++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	2bee      	cmp	r3, #238	; 0xee
 8001a4a:	d813      	bhi.n	8001a74 <_ZN2ei5numpy17quantize_zero_oneEf+0x40>
            if (quantized_values_one_zero[ix] == value) return ix;
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d102      	bne.n	8001a6c <_ZN2ei5numpy17quantize_zero_oneEf+0x38>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e083      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        for (size_t ix = 0; ix < length; ix++) {
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e7e8      	b.n	8001a46 <_ZN2ei5numpy17quantize_zero_oneEf+0x12>
        }

        // no match?

        if (value < quantized_values_one_zero[0]) {
 8001a74:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001b84 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 8001a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	d508      	bpl.n	8001a98 <_ZN2ei5numpy17quantize_zero_oneEf+0x64>
            return quantized_values_one_zero[0];
 8001a86:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8001b84 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 8001a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8e:	edc7 7a00 	vstr	s15, [r7]
 8001a92:	783b      	ldrb	r3, [r7, #0]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e06d      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }
        if (value > quantized_values_one_zero[length - 1]) {
 8001a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd08      	ble.n	8001abc <_ZN2ei5numpy17quantize_zero_oneEf+0x88>
            return quantized_values_one_zero[length - 1];
 8001aaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab2:	edc7 7a00 	vstr	s15, [r7]
 8001ab6:	783b      	ldrb	r3, [r7, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	e05b      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }

        int lo = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
        int hi = length - 1;
 8001ac0:	23ee      	movs	r3, #238	; 0xee
 8001ac2:	617b      	str	r3, [r7, #20]

        while (lo <= hi) {
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dc35      	bgt.n	8001b38 <_ZN2ei5numpy17quantize_zero_oneEf+0x104>
            int mid = (hi + lo) / 2;
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	0fda      	lsrs	r2, r3, #31
 8001ad4:	4413      	add	r3, r2
 8001ad6:	105b      	asrs	r3, r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]

            if (value < quantized_values_one_zero[mid]) {
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d503      	bpl.n	8001afc <_ZN2ei5numpy17quantize_zero_oneEf+0xc8>
                hi = mid - 1;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e7e3      	b.n	8001ac4 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else if (value > quantized_values_one_zero[mid]) {
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	dd03      	ble.n	8001b1e <_ZN2ei5numpy17quantize_zero_oneEf+0xea>
                lo = mid + 1;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e7d2      	b.n	8001ac4 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else {
                return quantized_values_one_zero[mid];
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2e:	edc7 7a00 	vstr	s15, [r7]
 8001b32:	783b      	ldrb	r3, [r7, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e01d      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
            }
        }

        // lo == hi + 1
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 8001b38:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
            lo :
            hi;
 8001b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d502      	bpl.n	8001b70 <_ZN2ei5numpy17quantize_zero_oneEf+0x13c>
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e001      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	b2db      	uxtb	r3, r3
    }
 8001b74:	4618      	mov	r0, r3
 8001b76:	3724      	adds	r7, #36	; 0x24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	0803519c 	.word	0x0803519c
 8001b84:	00000000 	.word	0x00000000

08001b88 <_ZN2ei5numpy19dequantize_zero_oneEh>:

    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
        return quantized_values_one_zero[value];
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <_ZN2ei5numpy19dequantize_zero_oneEh+0x28>)
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	ee07 3a90 	vmov	s15, r3
    }
 8001ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	0803519c 	.word	0x0803519c

08001bb4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
     * @param output Output matrix of size (M+pad_before+pad_after x N)
     * @param pad_before Number of items to pad before
     * @param pad_after Number of items to pad after
     * @returns 0 if OK
     */
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80bb      	strh	r3, [r7, #4]
        if (output->cols != input->cols) {
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d001      	beq.n	8001bda <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 8001bd8:	e0c5      	b.n	8001d66 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (output->rows != input->rows + pad_before + pad_after) {
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6859      	ldr	r1, [r3, #4]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4419      	add	r1, r3
 8001be6:	88bb      	ldrh	r3, [r7, #4]
 8001be8:	440b      	add	r3, r1
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bee:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 8001bf0:	e0b9      	b.n	8001d66 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (input->rows == 0) {
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x4a>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1c0>)
 8001bfc:	e0b3      	b.n	8001d66 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        uint32_t pad_before_index = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
        bool pad_before_direction_up = true;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db42      	blt.n	8001c9a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            memcpy(output->buffer + (input->cols * ix),
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	69f9      	ldr	r1, [r7, #28]
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_before_index * input->cols),
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * ix),
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f02f fc06 	bl	8031450 <memcpy>

            if (pad_before_index == 0 && !pad_before_direction_up) {
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xac>
 8001c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xac>
                pad_before_direction_up = true;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c5e:	e018      	b.n	8001c92 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d107      	bne.n	8001c7c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
 8001c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
                pad_before_direction_up = false;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c7a:	e00a      	b.n	8001c92 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else if (pad_before_direction_up) {
 8001c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd8>
                pad_before_index++;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3301      	adds	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e002      	b.n	8001c92 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else {
                pad_before_index--;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e7b9      	b.n	8001c0e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x5a>
            }
        }

        memcpy(output->buffer + (input->cols * pad_before),
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	88f9      	ldrh	r1, [r7, #6]
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	18d0      	adds	r0, r2, r3
            input->buffer,
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6819      	ldr	r1, [r3, #0]
            input->rows * input->cols * sizeof(float));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	6892      	ldr	r2, [r2, #8]
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	009b      	lsls	r3, r3, #2
        memcpy(output->buffer + (input->cols * pad_before),
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f02f fbc6 	bl	8031450 <memcpy>

        int32_t pad_after_index = input->rows - 1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
        bool pad_after_direction_up = false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]

        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	da43      	bge.n	8001d64 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b0>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	88f8      	ldrh	r0, [r7, #6]
 8001ce6:	6939      	ldr	r1, [r7, #16]
 8001ce8:	4401      	add	r1, r0
 8001cea:	4608      	mov	r0, r1
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	6849      	ldr	r1, [r1, #4]
 8001cf0:	4401      	add	r1, r0
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_after_index * input->cols),
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001d12:	461a      	mov	r2, r3
 8001d14:	f02f fb9c 	bl	8031450 <memcpy>

            if (pad_after_index == 0 && !pad_after_direction_up) {
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x17c>
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	f083 0301 	eor.w	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x17c>
                pad_after_direction_up = true;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
 8001d2e:	e015      	b.n	8001d5c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d105      	bne.n	8001d48 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x194>
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x194>
                pad_after_direction_up = false;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
 8001d46:	e009      	b.n	8001d5c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else if (pad_after_direction_up) {
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a2>
                pad_after_index++;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e002      	b.n	8001d5c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else {
                pad_after_index--;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e7b7      	b.n	8001cd4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x120>
            }
        }

        return EIDSP_OK;
 8001d64:	2300      	movs	r3, #0
    }
 8001d66:	4618      	mov	r0, r3
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	fffffc14 	.word	0xfffffc14
 8001d74:	fffffc12 	.word	0xfffffc12

08001d78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001d84:	edd7 7a00 	vldr	s15, [r7]
 8001d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d8c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d101      	bne.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001d96:	2300      	movs	r3, #0
 8001d98:	e033      	b.n	8001e02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d204      	bcs.n	8001dae <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d301      	bcc.n	8001db2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001db0:	e027      	b.n	8001e02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	82bb      	strh	r3, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	82fb      	strh	r3, [r7, #22]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	81bb      	strh	r3, [r7, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	81fb      	strh	r3, [r7, #14]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001dde:	f107 020c 	add.w	r2, r7, #12
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4611      	mov	r1, r2
 8001de8:	ed97 0a00 	vldr	s0, [r7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f012 f85c 	bl	8013eaa <arm_mat_scale_f32>
 8001df2:	4603      	mov	r3, r0
 8001df4:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	e000      	b.n	8001e02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001e00:	2300      	movs	r3, #0
    }
 8001e02:	4618      	mov	r0, r3
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	fffffc0c 	.word	0xfffffc0c

08001e10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6892      	ldr	r2, [r2, #8]
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d215      	bcs.n	8001e5e <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	ed93 7a00 	vldr	s14, [r3]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	edd7 7a00 	vldr	s15, [r7]
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e7e0      	b.n	8001e20 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001e5e:	2300      	movs	r3, #0
    }
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>:
     * Calculate the mean over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int mean_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
        if (input_matrix->cols != output_matrix->rows) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001e84:	e043      	b.n	8001f0e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        if (output_matrix->cols != 1) {
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001e90:	e03d      	b.n	8001f0e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t col = 0; col < input_matrix->cols; col++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d235      	bcs.n	8001f0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa0>
            // gathering up the current columnand moving it into sequential memory to use
            // SIMD to calculate the mean would take more time than the simple loop
            // so disable this case. The alternative is to use 2 transposes and on a "big" ARM
            // platform that will take more time

            float sum = 0.0f;
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]

            for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d216      	bcs.n	8001ee2 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x76>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	fb03 f101 	mul.w	r1, r3, r1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	440b      	add	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	edc7 7a04 	vstr	s15, [r7, #16]
            for (size_t row = 0; row < input_matrix->rows; row++) {
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3301      	adds	r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e7e3      	b.n	8001eaa <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x3e>
            }

            output_matrix->buffer[col] = sum / input_matrix->rows;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f00:	edc3 7a00 	vstr	s15, [r3]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e7c4      	b.n	8001e96 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x2a>
        }

        return EIDSP_OK;
 8001f0c:	2300      	movs	r3, #0
    }
 8001f0e:	4618      	mov	r0, r3
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	fffffc14 	.word	0xfffffc14

08001f20 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>:
     * Calculate the standard deviation over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int std_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
#if EIDSP_USE_CMSIS_DSP
        return std_axis0_CMSIS(input_matrix, output_matrix);
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fbc9 	bl	80026c4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
 8001f32:	4603      	mov	r3, r0
            output_matrix->buffer[col] = sqrt(std / input_matrix->rows);
        }

        return EIDSP_OK;
#endif
    }
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001f54:	e029      	b.n	8001faa <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001f60:	e023      	b.n	8001faa <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d21b      	bcs.n	8001fa8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	18d0      	adds	r0, r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	f107 0210 	add.w	r2, r7, #16
 8001f8e:	f012 f83b 	bl	8014008 <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e7de      	b.n	8001f66 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001fa8:	2300      	movs	r3, #0
    }
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	fffffc14 	.word	0xfffffc14

08001fb8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001fd0:	e029      	b.n	8002026 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001fdc:	e023      	b.n	8002026 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d21b      	bcs.n	8002024 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	18d0      	adds	r0, r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6899      	ldr	r1, [r3, #8]
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	f107 0210 	add.w	r2, r7, #16
 800200a:	f011 ffc5 	bl	8013f98 <arm_max_f32>
            output_matrix->buffer[row] = max;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e7de      	b.n	8001fe2 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8002024:	2300      	movs	r3, #0
    }
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	fffffc14 	.word	0xfffffc14

08002034 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b098      	sub	sp, #96	; 0x60
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3301      	adds	r3, #1
 8002048:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002052:	4c65      	ldr	r4, [pc, #404]	; (80021e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8002054:	e0c2      	b.n	80021dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d901      	bls.n	8002062 <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 800205e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002060:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8002062:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002066:	2300      	movs	r3, #0
 8002068:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800206a:	2101      	movs	r1, #1
 800206c:	f7ff fade 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8002076:	4c5d      	ldr	r4, [pc, #372]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8002078:	e0ab      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 800207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002080:	4c5a      	ldr	r4, [pc, #360]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8002082:	e0a6      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8002084:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	f02f f9df 	bl	8031450 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8002092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	18d0      	adds	r0, r2, r3
 800209a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	f02f f9fb 	bl	80314a0 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80020aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d025      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d022      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d01f      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c2:	d01b      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ca:	d017      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80020cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d2:	d013      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020da:	d00f      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e2:	d00b      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80020e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f000 f97a 	bl	80023e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 80020f0:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 80020f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d068      	beq.n	80021ca <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 80020f8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80020fa:	e06a      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 80020fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002100:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fb6e 	bl	80027e4 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002108:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 800210a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8002110:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002112:	e05d      	b.n	80021d0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8002114:	f107 0014 	add.w	r0, r7, #20
 8002118:	2300      	movs	r3, #0
 800211a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800211c:	2101      	movs	r1, #1
 800211e:	f7ff fa85 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8002128:	4c30      	ldr	r4, [pc, #192]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 800212a:	2500      	movs	r5, #0
 800212c:	e045      	b.n	80021ba <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002134:	4c2d      	ldr	r4, [pc, #180]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8002136:	2500      	movs	r5, #0
 8002138:	e03f      	b.n	80021ba <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 800213a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002142:	2300      	movs	r3, #0
 8002144:	f014 fac6 	bl	80166d4 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002158:	3b01      	subs	r3, #1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	440b      	add	r3, r1
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8002164:	2302      	movs	r3, #2
 8002166:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002168:	2301      	movs	r3, #1
 800216a:	65bb      	str	r3, [r7, #88]	; 0x58
 800216c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216e:	3b01      	subs	r3, #1
 8002170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002172:	429a      	cmp	r2, r3
 8002174:	d220      	bcs.n	80021b8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	f107 0210 	add.w	r2, r7, #16
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f011 ff77 	bl	8014078 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 800218a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800218e:	f7ff fb54 	bl	800183a <_ZN2ei5numpy4sqrtEf>
 8002192:	eeb0 7a40 	vmov.f32	s14, s0
 8002196:	edd7 7a04 	vldr	s15, [r7, #16]
 800219a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a6:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	3302      	adds	r3, #2
 80021ae:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b2:	3301      	adds	r3, #1
 80021b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80021b6:	e7d9      	b.n	800216c <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 80021b8:	2501      	movs	r5, #1
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa5f 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 80021c4:	2d01      	cmp	r5, #1
 80021c6:	d103      	bne.n	80021d0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 80021c8:	e000      	b.n	80021cc <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 80021ca:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80021cc:	2400      	movs	r4, #0
 80021ce:	e000      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 80021d0:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 80021d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fa53 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 80021dc:	4623      	mov	r3, r4
 80021de:	4618      	mov	r0, r3
 80021e0:	3760      	adds	r7, #96	; 0x60
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	fffffc11 	.word	0xfffffc11
 80021ec:	fffffc16 	.word	0xfffffc16

080021f0 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80021fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8002210:	e03f      	b.n	8002292 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d104      	bne.n	8002222 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e037      	b.n	8002292 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8002222:	ed97 7a02 	vldr	s14, [r7, #8]
 8002226:	edd7 7a03 	vldr	s15, [r7, #12]
 800222a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3b01      	subs	r3, #1
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800223a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223e:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3b01      	subs	r3, #1
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	d216      	bcs.n	800227e <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225a:	edd7 7a04 	vldr	s15, [r7, #16]
 800225e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	edd7 7a03 	vldr	s15, [r7, #12]
 800226e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002272:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e7e3      	b.n	8002246 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002284:	3b01      	subs	r3, #1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4413      	add	r3, r2
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8002290:	2300      	movs	r3, #0
    }
 8002292:	4618      	mov	r0, r3
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	fffffc10 	.word	0xfffffc10
 80022a4:	00000000 	.word	0x00000000

080022a8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b093      	sub	sp, #76	; 0x4c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6892      	ldr	r2, [r2, #8]
 80022b8:	fb03 f202 	mul.w	r2, r3, r2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80022c4:	2101      	movs	r1, #1
 80022c6:	f7ff f9b1 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 80022ca:	f107 001c 	add.w	r0, r7, #28
 80022ce:	2300      	movs	r3, #0
 80022d0:	2201      	movs	r2, #1
 80022d2:	2101      	movs	r1, #1
 80022d4:	f7ff f9aa 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80022de:	4c40      	ldr	r4, [pc, #256]	; (80023e0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 80022e0:	e06a      	b.n	80023b8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }
        r = min(&temp_matrix, &min_matrix);
 80022e2:	f107 021c 	add.w	r2, r7, #28
 80022e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe25 	bl	8001f3c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
 80022f2:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 80022f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x56>
            EIDSP_ERR(r);
 80022fa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80022fc:	e05c      	b.n	80023b8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }

        matrix_t max_matrix(1, 1);
 80022fe:	f107 000c 	add.w	r0, r7, #12
 8002302:	2300      	movs	r3, #0
 8002304:	2201      	movs	r2, #1
 8002306:	2101      	movs	r1, #1
 8002308:	f7ff f990 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x6e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002312:	4c33      	ldr	r4, [pc, #204]	; (80023e0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 8002314:	e04b      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }
        r = max(&temp_matrix, &max_matrix);
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe49 	bl	8001fb8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
 8002326:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x8a>
            EIDSP_ERR(r);
 800232e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002330:	e03d      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	ed93 7a00 	vldr	s14, [r3]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 8002346:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002348:	f7fe f908 	bl	800055c <__aeabi_f2d>
 800234c:	a322      	add	r3, pc, #136	; (adr r3, 80023d8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe fbcd 	bl	8000af0 <__aeabi_dcmplt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xba>
 800235c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002360:	e005      	b.n	800236e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xc6>
 8002362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002366:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800236a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fd45 	bl	8001e10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8002386:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xea>
            EIDSP_ERR(r);
 800238e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002390:	e00d      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        r = scale(&temp_matrix, row_scale);
 8002392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002396:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fcec 	bl	8001d78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80023a0:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 80023a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x104>
            EIDSP_ERR(r);
 80023a8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80023aa:	e000      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        return EIDSP_OK;
 80023ac:	2400      	movs	r4, #0
        matrix_t max_matrix(1, 1);
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f965 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f960 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 80023c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f95b 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 80023cc:	4623      	mov	r3, r4
 80023ce:	4618      	mov	r0, r3
 80023d0:	374c      	adds	r7, #76	; 0x4c
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80023dc:	3f50624d 	.word	0x3f50624d
 80023e0:	fffffc16 	.word	0xfffffc16

080023e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f024 fbc6 	bl	8026b88 <_Z9ei_mallocj>
 80023fc:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002404:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002406:	e058      	b.n	80024ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	f024 f80f 	bl	8026438 <kiss_fftr_alloc>
 800241a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002422:	69b8      	ldr	r0, [r7, #24]
 8002424:	f024 fbca 	bl	8026bbc <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002428:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800242a:	e046      	b.n	80024ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f024 f921 	bl	8026678 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d234      	bcs.n	80024ac <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	2002      	movs	r0, #2
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	f003 fb7b 	bl	8005b4e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002458:	ec55 4b10 	vmov	r4, r5, d0
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	edd3 7a01 	vldr	s15, [r3, #4]
 8002468:	2002      	movs	r0, #2
 800246a:	eeb0 0a67 	vmov.f32	s0, s15
 800246e:	f003 fb6e 	bl	8005b4e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002472:	ec53 2b10 	vmov	r2, r3, d0
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fd ff11 	bl	80002a0 <__adddf3>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f7fe fbb9 	bl	8000bfc <__aeabi_d2f>
 800248a:	4601      	mov	r1, r0
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	18d4      	adds	r4, r2, r3
 8002494:	ee00 1a10 	vmov	s0, r1
 8002498:	f7ff f9cf 	bl	800183a <_ZN2ei5numpy4sqrtEf>
 800249c:	eef0 7a40 	vmov.f32	s15, s0
 80024a0:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3301      	adds	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e7c6      	b.n	800243a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80024ac:	6978      	ldr	r0, [r7, #20]
 80024ae:	f024 fb85 	bl	8026bbc <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80024b2:	69b8      	ldr	r0, [r7, #24]
 80024b4:	f024 fb82 	bl	8026bbc <_Z7ei_freePv>

        return EIDSP_OK;
 80024b8:	2300      	movs	r3, #0
    }
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bdb0      	pop	{r4, r5, r7, pc}
 80024c2:	bf00      	nop
 80024c4:	fffffc16 	.word	0xfffffc16

080024c8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 80024c8:	b480      	push	{r7}
 80024ca:	b08b      	sub	sp, #44	; 0x2c
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d804      	bhi.n	80024f4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
            return;
 80024f2:	e0e2      	b.n	80026ba <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02f      	beq.n	8002560 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	61ba      	str	r2, [r7, #24]
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ed97 7a08 	vldr	s14, [r7, #32]
 800250e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002512:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1d1a      	adds	r2, r3, #4
 800251a:	61ba      	str	r2, [r7, #24]
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ed97 7a08 	vldr	s14, [r7, #32]
 8002524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002528:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	61ba      	str	r2, [r7, #24]
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ed97 7a08 	vldr	s14, [r7, #32]
 800253a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253e:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	1d1a      	adds	r2, r3, #4
 8002546:	61ba      	str	r2, [r7, #24]
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002554:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3b01      	subs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800255e:	e7cc      	b.n	80024fa <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1d1a      	adds	r2, r3, #4
 8002572:	61ba      	str	r2, [r7, #24]
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ed97 7a08 	vldr	s14, [r7, #32]
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	3b01      	subs	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800258a:	e7ed      	b.n	8002568 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002596:	edd7 6a08 	vldr	s13, [r7, #32]
 800259a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259e:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d057      	beq.n	8002662 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	1d1a      	adds	r2, r3, #4
 80025b6:	61ba      	str	r2, [r7, #24]
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80025c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c4:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d8:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1d1a      	adds	r2, r3, #4
 80025e0:	61ba      	str	r2, [r7, #24]
 80025e2:	ed93 7a00 	vldr	s14, [r3]
 80025e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ee:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1d1a      	adds	r2, r3, #4
 800260a:	61ba      	str	r2, [r7, #24]
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	edd7 7a05 	vldr	s15, [r7, #20]
 8002614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002618:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800261c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002624:	ed97 7a07 	vldr	s14, [r7, #28]
 8002628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262c:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	61ba      	str	r2, [r7, #24]
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	edd7 7a05 	vldr	s15, [r7, #20]
 800263e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002642:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002646:	edd7 7a04 	vldr	s15, [r7, #16]
 800264a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800264e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002656:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3b01      	subs	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002660:	e7a4      	b.n	80025ac <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1d1a      	adds	r2, r3, #4
 8002674:	61ba      	str	r2, [r7, #24]
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	edd7 7a05 	vldr	s15, [r7, #20]
 800267e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002682:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002686:	edd7 7a04 	vldr	s15, [r7, #16]
 800268a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800268e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3b01      	subs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80026a0:	e7e3      	b.n	800266a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80026b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	edc3 7a00 	vstr	s15, [r3]
    }
 80026ba:	372c      	adds	r7, #44	; 0x2c
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
     * @param      input_matrix   The input matrix
     * @param      output_matrix  The output matrix
     *
     * @return     EIDSP error
     */
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
    {
        arm_matrix_instance_f32 arm_in_matrix, arm_transposed_matrix;

        if (input_matrix->cols != output_matrix->rows) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d001      	beq.n	80026de <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026da:	4b40      	ldr	r3, [pc, #256]	; (80027dc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80026dc:	e07a      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        if (output_matrix->cols != 1) {
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80026e8:	e074      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        /* Copy input matrix to arm matrix */
        arm_in_matrix.numRows = input_matrix->rows;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	833b      	strh	r3, [r7, #24]
        arm_in_matrix.numCols = input_matrix->cols;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	837b      	strh	r3, [r7, #26]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	61fb      	str	r3, [r7, #28]
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	b29b      	uxth	r3, r3
 8002706:	823b      	strh	r3, [r7, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	b29b      	uxth	r3, r3
 800270e:	827b      	strh	r3, [r7, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6852      	ldr	r2, [r2, #4]
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f024 fa3d 	bl	8026ba0 <_Z9ei_callocjj>
 8002726:	4603      	mov	r3, r0
 8002728:	617b      	str	r3, [r7, #20]

        if (arm_transposed_matrix.pData == NULL) {
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x70>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x11c>)
 8002732:	e04f      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 8002734:	f107 0210 	add.w	r2, r7, #16
 8002738:	f107 0318 	add.w	r3, r7, #24
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f011 fbe9 	bl	8013f16 <arm_mat_trans_f32>
 8002744:	4603      	mov	r3, r0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ret != EIDSP_OK) {
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            EIDSP_ERR(ret);
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	e040      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002756:	8a3b      	ldrh	r3, [r7, #16]
 8002758:	461a      	mov	r2, r3
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	4293      	cmp	r3, r2
 800275e:	d234      	bcs.n	80027ca <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x106>
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	8a7b      	ldrh	r3, [r7, #18]
 8002764:	4619      	mov	r1, r3
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
                               arm_transposed_matrix.numCols, &var);
 8002770:	8a7a      	ldrh	r2, [r7, #18]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 8002772:	4611      	mov	r1, r2
 8002774:	f107 0208 	add.w	r2, r7, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fea5 	bl	80024c8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	623b      	str	r3, [r7, #32]
    if (in >= 0.0f)
 8002788:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800278c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	db09      	blt.n	80027aa <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xe6>
      *pOut = sqrtf(in);
 8002796:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800279a:	f02c fddf 	bl	802f35c <sqrtf>
 800279e:	eef0 7a40 	vmov.f32	s15, s0
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80027a8:	e004      	b.n	80027b4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xf0>
      *pOut = 0.0f;
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80027b2:	bf00      	nop

            output_matrix->buffer[row] = std;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	3301      	adds	r3, #1
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c8:	e7c5      	b.n	8002756 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        }

        ei_free(arm_transposed_matrix.pData);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f024 f9f5 	bl	8026bbc <_Z7ei_freePv>

        return EIDSP_OK;
 80027d2:	2300      	movs	r3, #0
    }
 80027d4:	4618      	mov	r0, r3
 80027d6:	3730      	adds	r7, #48	; 0x30
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	fffffc14 	.word	0xfffffc14
 80027e0:	fffffc16 	.word	0xfffffc16

080027e4 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF)
        arm_status status;
        switch (n_fft) {
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d120      	bne.n	8002838 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x54>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_256 == 1
            case 256: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
                S->fftLen = 128U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002808:	899a      	ldrh	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 256U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002824:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a08      	ldr	r2, [pc, #32]	; (800284c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x68>)
 800282a:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 800282c:	2300      	movs	r3, #0
 800282e:	72fb      	strb	r3, [r7, #11]
                break;
 8002830:	bf00      	nop
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
 8002832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002836:	e000      	b.n	800283a <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x56>
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x6c>)
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	08035f28 	.word	0x08035f28
 800284c:	08035b28 	.word	0x08035b28
 8002850:	fffffc08 	.word	0xfffffc08

08002854 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002862:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4293      	cmp	r3, r2
 8002870:	d001      	beq.n	8002876 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002874:	e050      	b.n	8002918 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fbd7 	bl	8002034 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002886:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	e042      	b.n	8002918 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d23b      	bcs.n	8002916 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800289e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a8:	ee17 0a90 	vmov	r0, s15
 80028ac:	f7fd fe56 	bl	800055c <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	491a      	ldr	r1, [pc, #104]	; (8002924 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 80028ba:	f7fd ffd1 	bl	8000860 <__aeabi_ddiv>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	ee17 0a90 	vmov	r0, s15
 80028e6:	f7fd fe39 	bl	800055c <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80028ee:	4620      	mov	r0, r4
 80028f0:	4629      	mov	r1, r5
 80028f2:	f7fd fe8b 	bl	800060c <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	18d4      	adds	r4, r2, r3
 8002906:	f7fe f979 	bl	8000bfc <__aeabi_d2f>
 800290a:	4603      	mov	r3, r0
 800290c:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e7bf      	b.n	8002896 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 8002916:	2300      	movs	r3, #0
    }
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bdb0      	pop	{r4, r5, r7, pc}
 8002920:	fffffc14 	.word	0xfffffc14
 8002924:	3ff00000 	.word	0x3ff00000

08002928 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d214      	bcs.n	8002968 <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d105      	bne.n	8002960 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 800295e:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3301      	adds	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e7e6      	b.n	8002936 <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	2edbe6ff 	.word	0x2edbe6ff

08002978 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>:
     * This function handle the issue with zero values if the are exposed
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input)
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    {
        zero_handling(input->buffer, input->rows * input->cols);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	4619      	mov	r1, r3
 8002992:	f7ff ffc9 	bl	8002928 <_ZN2ei5numpy13zero_handlingEPfj>
    }
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     * Converting from frequency to Mel scale
     *
     * @param f The frequency values(or a single frequency) in Hz.
     * @returns The mel scale values(or a single mel).
     */
    static float frequency_to_mel(float f) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	ed87 0a01 	vstr	s0, [r7, #4]
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
 80029aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80029ae:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002ab8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x118>
 80029b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029be:	edc7 7a04 	vstr	s15, [r7, #16]
        int32_t g = (int32_t) * ((int32_t *)&a);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <_ZN2ei8speechpy9functions16frequency_to_melEf+0x11c>)
 80029ce:	4413      	add	r3, r2
 80029d0:	0ddb      	lsrs	r3, r3, #23
 80029d2:	05db      	lsls	r3, r3, #23
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        g = g - e;
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	60fb      	str	r3, [r7, #12]
        float m = (float) * ((float *)&g);
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002ac0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x120>
 80029f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        float f = m - 1.0f;
 80029fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a08:	edc7 7a08 	vstr	s15, [r7, #32]
        float s = f * f;
 8002a0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a14:	edc7 7a07 	vstr	s15, [r7, #28]
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8002a18:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8002ac4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x124>
 8002a1c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a20:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002ac8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x128>
 8002a24:	f02c fb4c 	bl	802f0c0 <fmaf>
 8002a28:	ed87 0a06 	vstr	s0, [r7, #24]
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8002a2c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002acc <_ZN2ei8speechpy9functions16frequency_to_melEf+0x12c>
 8002a30:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a34:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002ad0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x130>
 8002a38:	f02c fb42 	bl	802f0c0 <fmaf>
 8002a3c:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, t);
 8002a40:	ed97 1a05 	vldr	s2, [r7, #20]
 8002a44:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a48:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a4c:	f02c fb38 	bl	802f0c0 <fmaf>
 8002a50:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(r, s, f);
 8002a54:	ed97 1a08 	vldr	s2, [r7, #32]
 8002a58:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a5c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a60:	f02c fb2e 	bl	802f0c0 <fmaf>
 8002a64:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002a68:	ed97 1a06 	vldr	s2, [r7, #24]
 8002a6c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002ad4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x134>
 8002a70:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002a74:	f02c fb24 	bl	802f0c0 <fmaf>
 8002a78:	ed87 0a06 	vstr	s0, [r7, #24]
        return r;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd6c 	bl	800055c <__aeabi_f2d>
 8002a84:	a30a      	add	r3, pc, #40	; (adr r3, 8002ab0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x110>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fdbf 	bl	800060c <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f8b1 	bl	8000bfc <__aeabi_d2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	ee07 3a90 	vmov	s15, r3
#endif
    }
 8002aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa4:	3730      	adds	r7, #48	; 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	f3af 8000 	nop.w
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	40919c00 	.word	0x40919c00
 8002ab8:	442f0000 	.word	0x442f0000
 8002abc:	c0d55555 	.word	0xc0d55555
 8002ac0:	34000000 	.word	0x34000000
 8002ac4:	be8ef46d 	.word	0xbe8ef46d
 8002ac8:	3e6c6078 	.word	0x3e6c6078
 8002acc:	beff712d 	.word	0xbeff712d
 8002ad0:	3ea9e51a 	.word	0x3ea9e51a
 8002ad4:	3f317218 	.word	0x3f317218

08002ad8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	ed87 0a01 	vstr	s0, [r7, #4]
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 8002ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002b14 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x3c>
 8002aea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aee:	eeb0 0a47 	vmov.f32	s0, s14
 8002af2:	f7fe fe72 	bl	80017da <_ZSt3expf>
 8002af6:	eef0 7a40 	vmov.f32	s15, s0
 8002afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b18 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x40>
 8002b06:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	448ce000 	.word	0x448ce000
 8002b18:	442f0000 	.word	0x442f0000

08002b1c <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left
     * @param middle
     * @param right
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b08b      	sub	sp, #44	; 0x2c
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
        EI_DSP_MATRIX(out, 1, x_size);
 8002b2a:	f107 0014 	add.w	r0, r7, #20
 8002b2e:	2300      	movs	r3, #0
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	2101      	movs	r1, #1
 8002b34:	f7fe fd7a 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x26>
 8002b3e:	4c4b      	ldr	r4, [pc, #300]	; (8002c6c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x150>)
 8002b40:	e089      	b.n	8002c56 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x13a>

        for (size_t ix = 0; ix < x_size; ix++) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d27b      	bcs.n	8002c46 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x12a>
            if (x[ix] > left && x[ix] <= middle) {
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	dd2b      	ble.n	8002bc6 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xaa>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	d81b      	bhi.n	8002bc6 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xaa>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4413      	add	r3, r2
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc2:	edc3 7a00 	vstr	s15, [r3]
            }

            if (x[ix] < right && middle <= x[ix]) {
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	ed93 7a00 	vldr	s14, [r3]
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d52b      	bpl.n	8002c3e <_ZN2ei8speechpy9functions8triangleEPfjiii+0x122>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c04:	d81b      	bhi.n	8002c3e <_ZN2ei8speechpy9functions8triangleEPfjiii+0x122>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3a:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	3301      	adds	r3, #1
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	e77f      	b.n	8002b46 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x2a>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 8002c46:	6979      	ldr	r1, [r7, #20]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f02e fbfe 	bl	8031450 <memcpy>

        return EIDSP_OK;
 8002c54:	2400      	movs	r4, #0
        EI_DSP_MATRIX(out, 1, x_size);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fd11 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 8002c60:	4623      	mov	r3, r4
 8002c62:	4618      	mov	r0, r3
 8002c64:	372c      	adds	r7, #44	; 0x2c
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd90      	pop	{r4, r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	fffffc16 	.word	0xfffffc16

08002c70 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
     * @param shift (int): The shift step.
     * @param cof (float): The preemphasising coefficient. 0 equals to no filtering.
     */
    class preemphasis {
public:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6178      	str	r0, [r7, #20]
 8002c78:	6139      	str	r1, [r7, #16]
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c80:	71fb      	strb	r3, [r7, #7]
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	79fa      	ldrb	r2, [r7, #7]
 8002c98:	761a      	strb	r2, [r3, #24]
        {
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f023 ff7d 	bl	8026ba0 <_Z9ei_callocjj>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	60da      	str	r2, [r3, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f023 ff74 	bl	8026ba0 <_Z9ei_callocjj>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	611a      	str	r2, [r3, #16]
            _next_offset_should_be = 0;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	615a      	str	r2, [r3, #20]

            if (shift < 0) {
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da06      	bge.n	8002cd8 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x68>
                _shift = signal->total_length + shift;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	605a      	str	r2, [r3, #4]
            }

            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>

            // we need to get the shift bytes from the end of the buffer...
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 8002ce8:	6938      	ldr	r0, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad1      	subs	r1, r2, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f002 ffaa 	bl	8005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002cfc:	e000      	b.n	8002d00 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x90>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002cfe:	bf00      	nop
        }
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
         * Get preemphasized data from the underlying audio buffer...
         * This retrieves data from the signal then preemphasizes it.
         * @param offset Offset in the audio signal
         * @param length Length of the audio signal
         */
        int get_data(size_t offset, size_t length, float *out_buffer) {
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1e>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x22>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002d2a:	4c76      	ldr	r4, [pc, #472]	; (8002f04 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1f8>)
 8002d2c:	e0e4      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }
            if (offset + length > _signal->total_length) {
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	441a      	add	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d901      	bls.n	8002d42 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x36>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 8002d3e:	4c72      	ldr	r4, [pc, #456]	; (8002f08 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1fc>)
 8002d40:	e0da      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }

            int ret;
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	db14      	blt.n	8002d78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1a99      	subs	r1, r3, r2
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f002 ff72 	bl	8005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0) {
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                    EIDSP_ERR(ret);
 8002d74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002d76:	e0bf      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
                }
            }
            // else we'll use the end_of_signal_buffer; so no need to check

            ret = _signal->get_data(offset, length, out_buffer);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	f002 ff64 	bl	8005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0) {
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x88>
                EIDSP_ERR(ret);
 8002d90:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002d92:	e0b1      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }

            // it might be that everything is already normalized here...
            bool all_between_min_1_and_1 = true;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            // now we have the signal and we can preemphasize
            for (size_t ix = 0; ix < length; ix++) {
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d279      	bcs.n	8002e9a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>
                float now = out_buffer[ix];
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	623b      	str	r3, [r7, #32]

                // under shift? read from end
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	4413      	add	r3, r2
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	6852      	ldr	r2, [r2, #4]
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d218      	bcs.n	8002df2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xe6>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	440b      	add	r3, r1
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dec:	edc3 7a00 	vstr	s15, [r3]
 8002df0:	e012      	b.n	8002e18 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10c>
                }
                // otherwise read from history buffer
                else {
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e14:	edc3 7a00 	vstr	s15, [r3]
                }

                if (_rescale && all_between_min_1_and_1) {
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	7e1b      	ldrb	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
 8002e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01c      	beq.n	8002e62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	d40c      	bmi.n	8002e5c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x150>
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	dd02      	ble.n	8002e62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
                        all_between_min_1_and_1 = false;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    }
                }

                // roll through and overwrite last element
                if (_shift != 1) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d008      	beq.n	8002e7c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x170>
                    numpy::roll(_prev_buffer, _shift, -1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68d8      	ldr	r0, [r3, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f04f 32ff 	mov.w	r2, #4294967295
 8002e76:	4619      	mov	r1, r3
 8002e78:	f7fe fd08 	bl	800188c <_ZN2ei5numpy4rollEPfji>
                }
                _prev_buffer[_shift - 1] = now;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < length; ix++) {
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	3301      	adds	r3, #1
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e98:	e781      	b.n	8002d9e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x92>
            }

            _next_offset_should_be += length;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	441a      	add	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	615a      	str	r2, [r3, #20]

            // rescale from [-1 .. 1] ?
            if (_rescale && !all_between_min_1_and_1) {
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	7e1b      	ldrb	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d023      	beq.n	8002ef6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ea>
 8002eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eb2:	f083 0301 	eor.w	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01c      	beq.n	8002ef6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ea>
                matrix_t scale_matrix(length, 1, out_buffer);
 8002ebc:	f107 0010 	add.w	r0, r7, #16
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	f7fe fbb1 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
                ret = numpy::scale(&scale_matrix, 1.0f / 32768.0f);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002f0c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x200>
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe ff50 	bl	8001d78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0) {
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1da>
                    EIDSP_ERR(ret);
 8002ee0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	e000      	b.n	8002ee8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1dc>
 8002ee6:	2501      	movs	r5, #1
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fbc8 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8002ef2:	2d01      	cmp	r5, #1
 8002ef4:	d100      	bne.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
                }
            }

            return EIDSP_OK;
 8002ef6:	2400      	movs	r4, #0
        }
 8002ef8:	4623      	mov	r3, r4
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bdb0      	pop	{r4, r5, r7, pc}
 8002f02:	bf00      	nop
 8002f04:	fffffc16 	.word	0xfffffc16
 8002f08:	fffffc0e 	.word	0xfffffc0e
 8002f0c:	38000000 	.word	0x38000000

08002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>:

        ~preemphasis() {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
            if (_prev_buffer) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x1a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f023 fe49 	bl	8026bbc <_Z7ei_freePv>
            }
            if (_end_of_signal_buffer) {
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x2c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f023 fe40 	bl	8026bbc <_Z7ei_freePv>
            }
        }
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
    /**
     * frame_length is a float and can thus be off by a little bit, e.g.
     * frame_length = 0.018f actually can yield 0.018000011f
     * thus screwing up our frame calculations here...
     */
    static float ceil_unless_very_close_to_floor(float v) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	ed87 0a01 	vstr	s0, [r7, #4]
        if (v > floor(v) && v - floor(v) < 0.001f) {
 8002f52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f56:	f7fe fc50 	bl	80017fa <_ZSt5floorf>
 8002f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	dd12      	ble.n	8002f92 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 8002f6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f70:	f7fe fc43 	bl	80017fa <_ZSt5floorf>
 8002f74:	eeb0 7a40 	vmov.f32	s14, s0
 8002f78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f80:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002fc4 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x7c>
 8002f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d501      	bpl.n	8002f92 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4c>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x5e>
            v = (floor(v));
 8002f98:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f9c:	f7fe fc2d 	bl	80017fa <_ZSt5floorf>
 8002fa0:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fa4:	e005      	b.n	8002fb2 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x6a>
        }
        else {
            v = (ceil(v));
 8002fa6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002faa:	f7fe fc06 	bl	80017ba <_ZSt4ceilf>
 8002fae:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        return v;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	ee07 3a90 	vmov	s15, r3
    }
 8002fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	3a83126f 	.word	0x3a83126f

08002fc8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>:
                            float sampling_frequency,
                            float frame_length,
                            float frame_stride,
                            bool zero_padding,
                            uint16_t version)
    {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b090      	sub	sp, #64	; 0x40
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6178      	str	r0, [r7, #20]
 8002fd0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002fd4:	edc7 0a03 	vstr	s1, [r7, #12]
 8002fd8:	ed87 1a02 	vstr	s2, [r7, #8]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	71fb      	strb	r3, [r7, #7]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80bb      	strh	r3, [r7, #4]
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00f      	beq.n	800300c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fe5b 	bl	8005cac <_ZNKSt8functionIFijjPfEEcvbEv>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d104      	bne.n	800300c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x48>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x4a>
 8003010:	2300      	movs	r3, #0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x52>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 8003016:	4b75      	ldr	r3, [pc, #468]	; (80031ec <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x224>)
 8003018:	e0e4      	b.n	80031e4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x21c>
        }

        size_t length_signal = info->signal->total_length;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
        int frame_sample_length;
        int length;
        if (version == 1) {
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11f      	bne.n	8003068 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xa0>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 8003028:	ed97 7a04 	vldr	s14, [r7, #16]
 800302c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	f7fe fbef 	bl	800181a <_ZSt5roundf>
 800303c:	eef0 7a40 	vmov.f32	s15, s0
 8003040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003044:	ee17 3a90 	vmov	r3, s15
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 800304a:	ed97 7a04 	vldr	s14, [r7, #16]
 800304e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	f7fe fbde 	bl	800181a <_ZSt5roundf>
 800305e:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 8003062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
 8003066:	e027      	b.n	80030b8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xf0>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 8003068:	ed97 7a04 	vldr	s14, [r7, #16]
 800306c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003074:	eeb0 0a67 	vmov.f32	s0, s15
 8003078:	f7ff ff66 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800307c:	eef0 7a40 	vmov.f32	s15, s0
 8003080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003084:	ee17 3a90 	vmov	r3, s15
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
            float frame_stride_arg = frame_stride;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 800308e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003092:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	f7ff ff53 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80030a2:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 80030a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ae:	ee17 2a90 	vmov	r2, s15
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d02a      	beq.n	8003114 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x14c>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - length) / frame_stride));
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030d4:	eeb0 0a66 	vmov.f32	s0, s13
 80030d8:	f7fe fb6f 	bl	80017ba <_ZSt4ceilf>
 80030dc:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80030e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e4:	ee17 3a90 	vmov	r3, s15
 80030e8:	623b      	str	r3, [r7, #32]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003100:	ee17 2a90 	vmov	r2, s15
 8003104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003106:	4413      	add	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]

            info->signal->total_length = static_cast<size_t>(len_sig);
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]
 8003112:	e02f      	b.n	8003174 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1ac>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - length) / frame_stride));
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003122:	edd7 7a02 	vldr	s15, [r7, #8]
 8003126:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800312a:	eeb0 0a66 	vmov.f32	s0, s13
 800312e:	f7fe fb64 	bl	80017fa <_ZSt5floorf>
 8003132:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313a:	ee17 3a90 	vmov	r3, s15
 800313e:	623b      	str	r3, [r7, #32]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	3b01      	subs	r3, #1
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800314c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 8003162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003166:	ee17 3a90 	vmov	r3, s15
 800316a:	61fb      	str	r3, [r7, #28]

            info->signal->total_length = static_cast<size_t>(len_sig);
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]
        }

        info->frame_ixs.clear();
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3304      	adds	r3, #4
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fda7 	bl	8005ccc <_ZNSt6vectorImSaImEE5clearEv>
        
        int frame_count = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	637b      	str	r3, [r7, #52]	; 0x34

        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 8003182:	2300      	movs	r3, #0
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	461a      	mov	r2, r3
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	4293      	cmp	r3, r2
 800318e:	bf34      	ite	cc
 8003190:	2301      	movcc	r3, #1
 8003192:	2300      	movcs	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d020      	beq.n	80031dc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x214>
            if (++frame_count > numframes) break;
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	3301      	adds	r3, #1
 800319e:	637b      	str	r3, [r7, #52]	; 0x34
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a4:	429a      	cmp	r2, r3
 80031a6:	bfcc      	ite	gt
 80031a8:	2301      	movgt	r3, #1
 80031aa:	2300      	movle	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d113      	bne.n	80031da <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x212>

            info->frame_ixs.push_back(ix);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	1d1a      	adds	r2, r3, #4
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f002 fd91 	bl	8005ce8 <_ZNSt6vectorImSaImEE9push_backEOm>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 80031c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ce:	ee17 2a90 	vmov	r2, s15
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	4413      	add	r3, r2
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
 80031d8:	e7d5      	b.n	8003186 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1be>
            if (++frame_count > numframes) break;
 80031da:	bf00      	nop
        }

        info->frame_length = frame_sample_length;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031e0:	611a      	str	r2, [r3, #16]

        return EIDSP_OK;
 80031e2:	2300      	movs	r3, #0
    }
 80031e4:	4618      	mov	r0, r3
 80031e6:	3740      	adds	r7, #64	; 0x40
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	fffffc15 	.word	0xfffffc15

080031f0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>:
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding,
        uint16_t version)
    {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6178      	str	r0, [r7, #20]
 80031f8:	6139      	str	r1, [r7, #16]
 80031fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80031fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	460b      	mov	r3, r1
 8003208:	71fb      	strb	r3, [r7, #7]
 800320a:	4613      	mov	r3, r2
 800320c:	80bb      	strh	r3, [r7, #4]
        int frame_sample_length;
        int length;
        if (version == 1) {
 800320e:	88bb      	ldrh	r3, [r7, #4]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d125      	bne.n	8003260 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x70>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800321e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	eeb0 0a67 	vmov.f32	s0, s15
 800322a:	f7fe faf6 	bl	800181a <_ZSt5roundf>
 800322e:	eef0 7a40 	vmov.f32	s15, s0
 8003232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003236:	ee17 3a90 	vmov	r3, s15
 800323a:	623b      	str	r3, [r7, #32]
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003246:	edd7 7a02 	vldr	s15, [r7, #8]
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	f7fe fae2 	bl	800181a <_ZSt5roundf>
 8003256:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e02d      	b.n	80032bc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0xcc>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800326a:	edd7 7a03 	vldr	s15, [r7, #12]
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	eeb0 0a67 	vmov.f32	s0, s15
 8003276:	f7ff fe67 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800327a:	eef0 7a40 	vmov.f32	s15, s0
 800327e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003282:	ee17 3a90 	vmov	r3, s15
 8003286:	623b      	str	r3, [r7, #32]
            float frame_stride_arg = frame_stride;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61fb      	str	r3, [r7, #28]
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003296:	edd7 7a07 	vldr	s15, [r7, #28]
 800329a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	f7ff fe51 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80032a6:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 80032aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b2:	ee17 2a90 	vmov	r2, s15
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
        }

        volatile int numframes;

        if (zero_padding) {
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x100>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(signal_size - length) / frame_stride));
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032d8:	eeb0 0a66 	vmov.f32	s0, s13
 80032dc:	f7fe fa6d 	bl	80017ba <_ZSt4ceilf>
 80032e0:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80032e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e8:	ee17 3a90 	vmov	r3, s15
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e015      	b.n	800331c <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x12c>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(signal_size - length) / frame_stride));
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003302:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003306:	eeb0 0a66 	vmov.f32	s0, s13
 800330a:	f7fe fa76 	bl	80017fa <_ZSt5floorf>
 800330e:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003316:	ee17 3a90 	vmov	r3, s15
 800331a:	61bb      	str	r3, [r7, #24]
        }

        return numframes;
 800331c:	69bb      	ldr	r3, [r7, #24]
    }
 800331e:	4618      	mov	r0, r3
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
     * @param scale Scale output to 0..1
     * @returns 0 if OK
     */
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
        bool scale = false)
    {
 8003328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800332c:	b09f      	sub	sp, #124	; 0x7c
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	4608      	mov	r0, r1
 8003334:	4611      	mov	r1, r2
 8003336:	461a      	mov	r2, r3
 8003338:	4603      	mov	r3, r0
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	460b      	mov	r3, r1
 800333e:	707b      	strb	r3, [r7, #1]
 8003340:	4613      	mov	r3, r2
 8003342:	703b      	strb	r3, [r7, #0]
        if (win_size == 0) {
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x26>
            return EIDSP_OK;
 800334a:	2400      	movs	r4, #0
 800334c:	e15d      	b.n	800360a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2e2>
        }

        uint16_t pad_size = (win_size - 1) / 2;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	3b01      	subs	r3, #1
 8003352:	0fda      	lsrs	r2, r3, #31
 8003354:	4413      	add	r3, r2
 8003356:	105b      	asrs	r3, r3, #1
 8003358:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        int ret;
        float *features_buffer_ptr;

        // mean & variance normalization
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003364:	0052      	lsls	r2, r2, #1
 8003366:	1899      	adds	r1, r3, r2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003370:	2300      	movs	r3, #0
 8003372:	f7fe f95b 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x58>
 800337c:	4ca8      	ldr	r4, [pc, #672]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 800337e:	e13f      	b.n	8003600 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        if (!vec_pad.buffer) {
 8003380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x62>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003386:	4ca6      	ldr	r4, [pc, #664]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003388:	e13a      	b.n	8003600 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 800338a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800338e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003392:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fc0c 	bl	8001bb4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 800339c:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x80>
            EIDSP_ERR(ret);
 80033a4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80033a6:	e12b      	b.n	8003600 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 80033a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80033ae:	2300      	movs	r3, #0
 80033b0:	2201      	movs	r2, #1
 80033b2:	f7fe f93b 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x98>
 80033bc:	4c98      	ldr	r4, [pc, #608]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033be:	e11a      	b.n	80035f6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        if (!mean_matrix.buffer) {
 80033c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xa2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80033c6:	4c96      	ldr	r4, [pc, #600]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033c8:	e115      	b.n	80035f6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        }

        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 80033ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80033d0:	2300      	movs	r3, #0
 80033d2:	2201      	movs	r2, #1
 80033d4:	f7fe f92a 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xba>
 80033de:	4c90      	ldr	r4, [pc, #576]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033e0:	e104      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        if (!window_variance.buffer) {
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc4>
            return EIDSP_OUT_OF_MEM;
 80033e8:	4c8d      	ldr	r4, [pc, #564]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033ea:	e0ff      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80033ec:	2300      	movs	r3, #0
 80033ee:	673b      	str	r3, [r7, #112]	; 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d263      	bcs.n	80034c2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 80033fa:	887d      	ldrh	r5, [r7, #2]
 80033fc:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80033fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003402:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	f107 001c 	add.w	r0, r7, #28
 8003410:	4632      	mov	r2, r6
 8003412:	4629      	mov	r1, r5
 8003414:	f7fe f90a 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xfc>
 800341e:	4c80      	ldr	r4, [pc, #512]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003420:	2500      	movs	r5, #0
 8003422:	e042      	b.n	80034aa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            if (!window.buffer) {
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x108>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800342a:	4c7d      	ldr	r4, [pc, #500]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 800342c:	2500      	movs	r5, #0
 800342e:	e03c      	b.n	80034aa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            }

            ret = numpy::mean_axis0(&window, &mean_matrix);
 8003430:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fd16 	bl	8001e6c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>
 8003440:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 8003442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
                EIDSP_ERR(ret);
 8003448:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800344a:	2500      	movs	r5, #0
 800344c:	e02d      	b.n	80034aa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            }

            // subtract the mean for the features
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 800344e:	2300      	movs	r3, #0
 8003450:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003458:	429a      	cmp	r2, r3
 800345a:	d225      	bcs.n	80034a8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x180>
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003466:	fb03 f101 	mul.w	r1, r3, r1
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	440b      	add	r3, r1
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	edd3 7a00 	vldr	s15, [r3]
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800348c:	fb03 f101 	mul.w	r1, r3, r1
 8003490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003492:	440b      	add	r3, r1
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 8003498:	ee77 7a67 	vsub.f32	s15, s14, s15
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 800349c:	edc3 7a00 	vstr	s15, [r3]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 80034a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a2:	3301      	adds	r3, #1
 80034a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a6:	e7d4      	b.n	8003452 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12a>
 80034a8:	2501      	movs	r5, #1
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe f8e7 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 80034b4:	2d01      	cmp	r5, #1
 80034b6:	f040 8099 	bne.w	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80034ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034bc:	3301      	adds	r3, #1
 80034be:	673b      	str	r3, [r7, #112]	; 0x70
 80034c0:	e796      	b.n	80033f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc8>
            }
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 80034c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80034c6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80034ca:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe fb70 	bl	8001bb4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 80034d4:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1b8>
            EIDSP_ERR(ret);
 80034dc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80034de:	e085      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80034e0:	2300      	movs	r3, #0
 80034e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d271      	bcs.n	80035d2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2aa>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 80034ee:	887d      	ldrh	r5, [r7, #2]
 80034f0:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80034f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	f107 000c 	add.w	r0, r7, #12
 8003504:	4632      	mov	r2, r6
 8003506:	4629      	mov	r1, r5
 8003508:	f7fe f890 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1f0>
 8003512:	4c43      	ldr	r4, [pc, #268]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003514:	2500      	movs	r5, #0
 8003516:	e051      	b.n	80035bc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
            if (!window.buffer) {
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1fc>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800351e:	4c40      	ldr	r4, [pc, #256]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003520:	2500      	movs	r5, #0
 8003522:	e04b      	b.n	80035bc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
            }

            if (variance_normalization == true) {
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d147      	bne.n	80035ba <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x292>
                ret = numpy::std_axis0(&window, &window_variance);
 800352a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fcf3 	bl	8001f20 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>
 800353a:	65f8      	str	r0, [r7, #92]	; 0x5c
                if (ret != EIDSP_OK) {
 800353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>
                    EIDSP_ERR(ret);
 8003542:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003544:	2500      	movs	r5, #0
 8003546:	e039      	b.n	80035bc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
                }

                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800354e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 800355a:	2300      	movs	r3, #0
 800355c:	667b      	str	r3, [r7, #100]	; 0x64
 800355e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003560:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003562:	429a      	cmp	r2, r3
 8003564:	d229      	bcs.n	80035ba <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x292>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 8003566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc fff6 	bl	800055c <__aeabi_f2d>
 8003570:	4680      	mov	r8, r0
 8003572:	4689      	mov	r9, r1
                                             (window_variance.buffer[col] + 1e-10);
 8003574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fc ffec 	bl	800055c <__aeabi_f2d>
 8003584:	a324      	add	r3, pc, #144	; (adr r3, 8003618 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f0>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fe89 	bl	80002a0 <__adddf3>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 8003592:	4640      	mov	r0, r8
 8003594:	4649      	mov	r1, r9
 8003596:	f7fd f963 	bl	8000860 <__aeabi_ddiv>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fd fb2b 	bl	8000bfc <__aeabi_d2f>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035aa:	601a      	str	r2, [r3, #0]
                    features_buffer_ptr++;
 80035ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ae:	3304      	adds	r3, #4
 80035b0:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80035b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b4:	3301      	adds	r3, #1
 80035b6:	667b      	str	r3, [r7, #100]	; 0x64
 80035b8:	e7d1      	b.n	800355e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x236>
 80035ba:	2501      	movs	r5, #1
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe f85e 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 80035c6:	2d01      	cmp	r5, #1
 80035c8:	d110      	bne.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80035ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035cc:	3301      	adds	r3, #1
 80035ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d0:	e788      	b.n	80034e4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1bc>
                }
            }
        }

        if (scale) {
 80035d2:	783b      	ldrb	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
            ret = numpy::normalize(features_matrix);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fe fe65 	bl	80022a8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 80035de:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 80035e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
                EIDSP_ERR(ret);
 80035e6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80035e8:	e000      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
            }
        }

        return EIDSP_OK;
 80035ea:	2400      	movs	r4, #0
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 80035ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe f846 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 80035f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe f841 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 8003600:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe f83c 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 800360a:	4623      	mov	r3, r4
 800360c:	4618      	mov	r0, r3
 800360e:	377c      	adds	r7, #124	; 0x7c
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003616:	bf00      	nop
 8003618:	d9d7bdbb 	.word	0xd9d7bdbb
 800361c:	3ddb7cdf 	.word	0x3ddb7cdf
 8003620:	fffffc16 	.word	0xfffffc16
 8003624:	00000000 	.word	0x00000000

08003628 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
    /**
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
        const float noise = static_cast<float>(noise_floor_db * -1);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	425b      	negs	r3, r3
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	425b      	negs	r3, r3
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365e:	edc7 7a08 	vstr	s15, [r7, #32]

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6892      	ldr	r2, [r2, #8]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	429a      	cmp	r2, r3
 8003676:	f080 80a4 	bcs.w	80037c2 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x19a>
            float f = features_matrix->buffer[ix];
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
            if (f < 1e-30) {
 8003688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800368a:	f7fc ff67 	bl	800055c <__aeabi_f2d>
 800368e:	a356      	add	r3, pc, #344	; (adr r3, 80037e8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1c0>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fd fa2c 	bl	8000af0 <__aeabi_dcmplt>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x7a>
                f = 1e-30;
 800369e:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1a8>)
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	61bb      	str	r3, [r7, #24]
        float f = frexpf(fabsf(a), &e);
 80036aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80036ae:	eef0 7ae7 	vabs.f32	s15, s15
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	4618      	mov	r0, r3
 80036b8:	eeb0 0a67 	vmov.f32	s0, s15
 80036bc:	f02b fd04 	bl	802f0c8 <frexpf>
 80036c0:	ed87 0a05 	vstr	s0, [r7, #20]
        float y = 1.23149591368684f;
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1ac>)
 80036c6:	613b      	str	r3, [r7, #16]
        y *= f;
 80036c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80036cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	edc7 7a04 	vstr	s15, [r7, #16]
        y += -4.11852516267426f;
 80036d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036dc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80037d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1b0>
 80036e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036e4:	edc7 7a04 	vstr	s15, [r7, #16]
        y *= f;
 80036e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80036ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f4:	edc7 7a04 	vstr	s15, [r7, #16]
        y += 6.02197014179219f;
 80036f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036fc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80037dc <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1b4>
 8003700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003704:	edc7 7a04 	vstr	s15, [r7, #16]
        y *= f;
 8003708:	ed97 7a04 	vldr	s14, [r7, #16]
 800370c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	edc7 7a04 	vstr	s15, [r7, #16]
        y += -3.13396450166353f;
 8003718:	edd7 7a04 	vldr	s15, [r7, #16]
 800371c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80037e0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1b8>
 8003720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003724:	edc7 7a04 	vstr	s15, [r7, #16]
        y += e;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003732:	ed97 7a04 	vldr	s14, [r7, #16]
 8003736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800373a:	edc7 7a04 	vstr	s15, [r7, #16]
        return y;
 800373e:	edd7 7a04 	vldr	s15, [r7, #16]
        return numpy::log2(a) * 0.3010299956639812f;
 8003742:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80037e4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1bc>
 8003746:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
            f = numpy::log10(f);
 800374a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f *= 10.0f; // scale by 10
 800374e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003752:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800375a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f += noise;
 800375e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003762:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f *= noise_scale;
 800376e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003772:	edd7 7a08 	vldr	s15, [r7, #32]
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            // clip again
            if (f < 0.0f) f = 0.0f;
 800377e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	d503      	bpl.n	8003794 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x16c>
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	e00b      	b.n	80037ac <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x184>
            else if (f > 1.0f) f = 1.0f;
 8003794:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a4:	dd02      	ble.n	80037ac <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x184>
 80037a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
            features_matrix->buffer[ix] = f;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	3301      	adds	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c0:	e751      	b.n	8003666 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x3e>
        }

        return EIDSP_OK;
 80037c2:	2300      	movs	r3, #0
    }
 80037c4:	4618      	mov	r0, r3
 80037c6:	3730      	adds	r7, #48	; 0x30
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	f3af 8000 	nop.w
 80037d0:	0da24260 	.word	0x0da24260
 80037d4:	3f9da1a8 	.word	0x3f9da1a8
 80037d8:	4083caf5 	.word	0x4083caf5
 80037dc:	40c0b3fb 	.word	0x40c0b3fb
 80037e0:	404892e0 	.word	0x404892e0
 80037e4:	3e9a209b 	.word	0x3e9a209b
 80037e8:	feebc2a0 	.word	0xfeebc2a0
 80037ec:	39b4484b 	.word	0x39b4484b

080037f0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	ed2d 8b02 	vpush	{d8}
 80037f6:	b098      	sub	sp, #96	; 0x60
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	460b      	mov	r3, r1
 8003802:	817b      	strh	r3, [r7, #10]
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 8003804:	897b      	ldrh	r3, [r7, #10]
 8003806:	3302      	adds	r3, #2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	647b      	str	r3, [r7, #68]	; 0x44
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	3302      	adds	r3, #2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);
 8003814:	897b      	ldrh	r3, [r7, #10]
 8003816:	3302      	adds	r3, #2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 800381c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800381e:	f023 f9b3 	bl	8026b88 <_Z9ei_mallocj>
 8003822:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mels) {
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800382a:	4ca3      	ldr	r4, [pc, #652]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 800382c:	e1bf      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	429a      	cmp	r2, r3
 8003836:	d104      	bne.n	8003842 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x52>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x56>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003842:	4c9e      	ldr	r4, [pc, #632]	; (8003abc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2cc>)
 8003844:	e1b3      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	461a      	mov	r2, r3
 8003858:	2100      	movs	r1, #0
 800385a:	f02d fe21 	bl	80314a0 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 800385e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003868:	eeb0 0a67 	vmov.f32	s0, s15
 800386c:	f7ff f898 	bl	80029a0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003870:	eeb0 8a40 	vmov.f32	s16, s0
 8003874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eeb0 0a67 	vmov.f32	s0, s15
 8003882:	f7ff f88d 	bl	80029a0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003886:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_freq)),
            functions::frequency_to_mel(static_cast<float>(high_freq)),
            num_filter + 2,
 800388a:	897b      	ldrh	r3, [r7, #10]
 800388c:	3302      	adds	r3, #2
        numpy::linspace(
 800388e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003890:	4618      	mov	r0, r3
 8003892:	eef0 0a67 	vmov.f32	s1, s15
 8003896:	eeb0 0a48 	vmov.f32	s0, s16
 800389a:	f7fe fca9 	bl	80021f0 <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 800389e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038a0:	f023 f972 	bl	8026b88 <_Z9ei_mallocj>
 80038a4:	6378      	str	r0, [r7, #52]	; 0x34
        if (!hertz) {
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xc6>
            ei_dsp_free(mels, mels_mem_size);
 80038ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ae:	f023 f985 	bl	8026bbc <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80038b2:	4c81      	ldr	r4, [pc, #516]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 80038b4:	e17b      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80038bc:	897b      	ldrh	r3, [r7, #10]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038c4:	429a      	cmp	r2, r3
 80038c6:	db74      	blt.n	80039b2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1c2>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 80038c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d0:	4413      	add	r3, r2
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038de:	18d5      	adds	r5, r2, r3
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	f7ff f8f8 	bl	8002ad8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 80038e8:	eef0 7a40 	vmov.f32	s15, s0
 80038ec:	edc5 7a00 	vstr	s15, [r5]
            if (hertz[ix] < low_freq) {
 80038f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f8:	4413      	add	r3, r2
 80038fa:	ed93 7a00 	vldr	s14, [r3]
 80038fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003910:	d50b      	bpl.n	800392a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x13a>
                hertz[ix] = low_freq;
 8003912:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391a:	4413      	add	r3, r2
 800391c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800391e:	ee07 2a90 	vmov	s15, r2
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	edc3 7a00 	vstr	s15, [r3]
            }
            if (hertz[ix] > high_freq) {
 800392a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	4413      	add	r3, r2
 8003934:	ed93 7a00 	vldr	s14, [r3]
 8003938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	dd0b      	ble.n	8003964 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x174>
                hertz[ix] = high_freq;
 800394c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003954:	4413      	add	r3, r2
 8003956:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003958:	ee07 2a90 	vmov	s15, r2
 800395c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003960:	edc3 7a00 	vstr	s15, [r3]

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
 8003964:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003968:	897b      	ldrh	r3, [r7, #10]
 800396a:	3301      	adds	r3, #1
 800396c:	429a      	cmp	r2, r3
 800396e:	d11a      	bne.n	80039a6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1b6>
                hertz[ix] -= 0.001;
 8003970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003978:	4413      	add	r3, r2
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fded 	bl	800055c <__aeabi_f2d>
 8003982:	a34b      	add	r3, pc, #300	; (adr r3, 8003ab0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c0>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc fc88 	bl	800029c <__aeabi_dsub>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399c:	18d5      	adds	r5, r2, r3
 800399e:	f7fd f92d 	bl	8000bfc <__aeabi_d2f>
 80039a2:	4603      	mov	r3, r0
 80039a4:	602b      	str	r3, [r5, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80039a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039aa:	3301      	adds	r3, #1
 80039ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80039b0:	e784      	b.n	80038bc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xcc>
            }
        }
        ei_dsp_free(mels, mels_mem_size);
 80039b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039b4:	f023 f902 	bl	8026bbc <_Z7ei_freePv>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 80039b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039ba:	f023 f8e5 	bl	8026b88 <_Z9ei_mallocj>
 80039be:	6338      	str	r0, [r7, #48]	; 0x30
        if (!freq_index) {
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1e0>
            ei_dsp_free(hertz, hertz_mem_size);
 80039c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039c8:	f023 f8f8 	bl	8026bbc <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80039cc:	4c3a      	ldr	r4, [pc, #232]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 80039ce:	e0ee      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039de:	429a      	cmp	r2, r3
 80039e0:	db2b      	blt.n	8003a3a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x24a>
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3301      	adds	r3, #1
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f6:	4413      	add	r3, r2
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a0e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a12:	f7fd fef2 	bl	80017fa <_ZSt5floorf>
 8003a16:	eef0 7a40 	vmov.f32	s15, s0
 8003a1a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a22:	4413      	add	r3, r2
 8003a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a28:	ee17 2a90 	vmov	r2, s15
 8003a2c:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003a2e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a32:	3301      	adds	r3, #1
 8003a34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003a38:	e7cd      	b.n	80039d6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1e6>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 8003a3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a3c:	f023 f8be 	bl	8026bbc <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
 8003a40:	2300      	movs	r3, #0
 8003a42:	653b      	str	r3, [r7, #80]	; 0x50
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f080 809e 	bcs.w	8003b8a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x39a>
            int left = freq_index[i];
 8003a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a54:	4413      	add	r3, r2
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
            int middle = freq_index[i + 1];
 8003a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	4413      	add	r3, r2
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
            int right = freq_index[i + 2];
 8003a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a70:	4413      	add	r3, r2
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f107 0010 	add.w	r0, r7, #16
 8003a84:	2300      	movs	r3, #0
 8003a86:	2101      	movs	r1, #1
 8003a88:	f7fd fdd0 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2a8>
 8003a92:	4c09      	ldr	r4, [pc, #36]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 8003a94:	2500      	movs	r5, #0
 8003a96:	e06d      	b.n	8003b74 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x384>
            if (!z.buffer) {
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d110      	bne.n	8003ac0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2d0>
                ei_dsp_free(freq_index, freq_index_mem_size);
 8003a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa0:	f023 f88c 	bl	8026bbc <_Z7ei_freePv>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003aa4:	4c04      	ldr	r4, [pc, #16]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 8003aa6:	2500      	movs	r5, #0
 8003aa8:	e064      	b.n	8003b74 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x384>
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w
 8003ab0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ab4:	3f50624d 	.word	0x3f50624d
 8003ab8:	fffffc16 	.word	0xfffffc16
 8003abc:	fffffc14 	.word	0xfffffc14
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	ee07 3a10 	vmov	s14, r3
 8003ad0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	461a      	mov	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	eef0 0a47 	vmov.f32	s1, s14
 8003ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8003aec:	f7fe fb80 	bl	80021f0 <_ZN2ei5numpy8linspaceEffmPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 8003af0:	6938      	ldr	r0, [r7, #16]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	4619      	mov	r1, r3
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b04:	f7ff f80a 	bl	8002b1c <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003b08:	2300      	movs	r3, #0
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dc2c      	bgt.n	8003b72 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x382>
                size_t index = (i * filterbanks->cols) + (left + zx);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b26:	440a      	add	r2, r1
 8003b28:	4413      	add	r3, r2
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48

                if (output_transposed) {
 8003b2c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35a>
                    index = ((left + zx) * filterbanks->rows) + i;
 8003b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	4413      	add	r3, r2
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b46:	4413      	add	r3, r2
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	18d5      	adds	r5, r2, r3
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	f7fd ff67 	bl	8001a34 <_ZN2ei5numpy17quantize_zero_oneEf>
 8003b66:	4603      	mov	r3, r0
 8003b68:	702b      	strb	r3, [r5, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b70:	e7cc      	b.n	8003b0c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31c>
 8003b72:	2501      	movs	r5, #1
 8003b74:	f107 0310 	add.w	r3, r7, #16
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd fd82 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8003b7e:	2d01      	cmp	r5, #1
 8003b80:	d115      	bne.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        for (size_t i = 0; i < num_filter; i++) {
 8003b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b84:	3301      	adds	r3, #1
 8003b86:	653b      	str	r3, [r7, #80]	; 0x50
 8003b88:	e75c      	b.n	8003a44 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x254>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 8003b8a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3b6>
            uint16_t r = filterbanks->rows;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	847b      	strh	r3, [r7, #34]	; 0x22
            filterbanks->rows = filterbanks->cols;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	605a      	str	r2, [r3, #4]
            filterbanks->cols = r;
 8003ba0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	609a      	str	r2, [r3, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 8003ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ba8:	f023 f808 	bl	8026bbc <_Z7ei_freePv>

        return EIDSP_OK;
 8003bac:	2400      	movs	r4, #0
    }
 8003bae:	4623      	mov	r3, r4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3758      	adds	r7, #88	; 0x58
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	ecbd 8b02 	vpop	{d8}
 8003bba:	bdb0      	pop	{r4, r5, r7, pc}

08003bbc <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f002 f8b0 	bl	8005d2a <_ZNSaImED1Ev>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 f893 	bl	8005d0a <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ffeb 	bl	8003bd4 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
typedef struct ei_stack_frames_info {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 f8ad 	bl	8005d74 <_ZNSt6vectorImSaImEED1Ev>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	b0a4      	sub	sp, #144	; 0x90
 8003c28:	af04      	add	r7, sp, #16
 8003c2a:	6178      	str	r0, [r7, #20]
 8003c2c:	6139      	str	r1, [r7, #16]
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c36:	edc7 0a00 	vstr	s1, [r7]
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t fft_length, uint32_t low_frequency, uint32_t high_frequency,
        uint16_t version
        )
    {
        int ret = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (high_frequency == 0) {
 8003c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2a>
            high_frequency = sampling_frequency / 2;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        if (low_frequency == 0) {
 8003c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a>
            low_frequency = 300;
 8003c56:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        stack_frames_info_t stack_frame_info = { 0 };
 8003c5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	653b      	str	r3, [r7, #80]	; 0x50
 8003c72:	2300      	movs	r3, #0
 8003c74:	657b      	str	r3, [r7, #84]	; 0x54
 8003c76:	2300      	movs	r3, #0
 8003c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ffb4 	bl	8003bee <_ZNSt6vectorImSaImEEC1Ev>
        stack_frame_info.signal = signal;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	64fb      	str	r3, [r7, #76]	; 0x4c

        ret = processing::stack_frames(
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c94:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	ed97 1a00 	vldr	s2, [r7]
 8003ca2:	edd7 0a01 	vldr	s1, [r7, #4]
 8003ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f98c 	bl	8002fc8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>
 8003cb0:	66f8      	str	r0, [r7, #108]	; 0x6c
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x98>
            EIDSP_ERR(ret);
 8003cb8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003cba:	e134      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 8003cbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f002 f871 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xbc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cdc:	4c97      	ldr	r4, [pc, #604]	; (8003f3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>)
 8003cde:	e122      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        if (num_filters != out_features->cols) {
 8003ce0:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xcc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cec:	4c93      	ldr	r4, [pc, #588]	; (8003f3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>)
 8003cee:	e11a      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 8003cf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 f857 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d103      	bne.n	8003d0e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xea>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xee>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xf0>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xf8>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d18:	4c88      	ldr	r4, [pc, #544]	; (8003f3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>)
 8003d1a:	e104      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d20b      	bcs.n	8003d4a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x126>
            *(out_features->buffer + i) = 0;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d44:	3301      	adds	r3, #1
 8003d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d48:	e7ea      	b.n	8003d20 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xfc>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 8003d4a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003d58:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8003d5c:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8003d60:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003d64:	2300      	movs	r3, #0
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x31c>)
 8003d6a:	f7fd fce0 	bl	800172e <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x154>
 8003d74:	4c73      	ldr	r4, [pc, #460]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003d76:	e0d1      	b.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
#else
        EI_DSP_MATRIX(filterbanks, num_filters, coefficients);
#endif
        if (!filterbanks.buffer) {
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x15e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003d7e:	4c71      	ldr	r4, [pc, #452]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003d80:	e0cc      	b.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
        }

        ret = feature::filterbanks(
 8003d82:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8003d86:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8003d8a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003d8e:	2301      	movs	r3, #1
 8003d90:	9302      	str	r3, [sp, #8]
 8003d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f7ff fd26 	bl	80037f0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
 8003da4:	66f8      	str	r0, [r7, #108]	; 0x6c
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x18c>
            EIDSP_ERR(ret);
 8003dac:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003dae:	e0b5      	b.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8003db0:	2300      	movs	r3, #0
 8003db2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003db8:	3304      	adds	r3, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 fff5 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bf34      	ite	cc
 8003dc8:	2301      	movcc	r3, #1
 8003dca:	2300      	movcs	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80a0 	beq.w	8003f14 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f0>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 8003dd4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	667b      	str	r3, [r7, #100]	; 0x64

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003de0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003de4:	2300      	movs	r3, #0
 8003de6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003de8:	2101      	movs	r1, #1
 8003dea:	f7fd fc1f 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1d6>
 8003df4:	4c53      	ldr	r4, [pc, #332]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003df6:	2500      	movs	r5, #0
 8003df8:	e081      	b.n	8003efe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2da>
            if (!power_spectrum_frame.buffer) {
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1e2>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003e00:	4c50      	ldr	r4, [pc, #320]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003e02:	2500      	movs	r5, #0
 8003e04:	e07b      	b.n	8003efe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2da>
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8003e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f107 0018 	add.w	r0, r7, #24
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2101      	movs	r1, #1
 8003e12:	f7fd fc0b 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1fe>
 8003e1c:	4c49      	ldr	r4, [pc, #292]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003e1e:	2500      	movs	r5, #0
 8003e20:	e063      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 8003e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e26:	3304      	adds	r3, #4
 8003e28:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 ffcd 	bl	8005dca <_ZNSt6vectorImSaImEE2atEj>
 8003e30:	4603      	mov	r3, r0
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	663b      	str	r3, [r7, #96]	; 0x60
            size_t signal_length = stack_frame_info.frame_length;
 8003e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e38:	677b      	str	r3, [r7, #116]	; 0x74
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 8003e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3e:	441a      	add	r2, r3
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d908      	bls.n	8003e5a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x236>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 8003e48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4c:	441a      	add	r2, r3
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e56:	4413      	add	r3, r2
 8003e58:	677b      	str	r3, [r7, #116]	; 0x74
            }

            ret = stack_frame_info.signal->get_data(
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e64:	f001 fef4 	bl	8005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003e68:	66f8      	str	r0, [r7, #108]	; 0x6c
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x252>
                EIDSP_ERR(ret);
 8003e70:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003e72:	2500      	movs	r5, #0
 8003e74:	e039      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>
            }

            ret = numpy::power_spectrum(
 8003e76:	69b8      	ldr	r0, [r7, #24]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 8003e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
            ret = numpy::power_spectrum(
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e86:	f7fe fce5 	bl	8002854 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8003e8a:	66f8      	str	r0, [r7, #108]	; 0x6c
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x274>
                EIDSP_ERR(ret);
 8003e92:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003e94:	2500      	movs	r5, #0
 8003e96:	e028      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd fd3f 	bl	8001920 <_ZN2ei5numpy3sumEPfj>
 8003ea2:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
            if (energy == 0) {
 8003ea6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003eaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb2:	d101      	bne.n	8003eb8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x294>
                energy = 1e-10;
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x324>)
 8003eb6:	673b      	str	r3, [r7, #112]	; 0x70
            }

            out_energies->buffer[ix] = energy;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ec4:	601a      	str	r2, [r3, #0]

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 8003ec6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ed6:	f7fd fd4b 	bl	8001970 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>
 8003eda:	66f8      	str	r0, [r7, #108]	; 0x6c
                power_spectrum_frame_size,
                &filterbanks,
                out_features
            );

            if (ret != 0) {
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c4>
                EIDSP_ERR(ret);
 8003ee2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	e000      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>
 8003ee8:	2501      	movs	r5, #1
 8003eea:	f107 0318 	add.w	r3, r7, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fbc7 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8003ef4:	2d01      	cmp	r5, #1
 8003ef6:	d001      	beq.n	8003efc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d8>
 8003ef8:	2500      	movs	r5, #0
 8003efa:	e000      	b.n	8003efe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2da>
 8003efc:	2501      	movs	r5, #1
 8003efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fbbd 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8003f08:	2d01      	cmp	r5, #1
 8003f0a:	d107      	bne.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8003f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0e:	3301      	adds	r3, #1
 8003f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f12:	e74f      	b.n	8003db4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x190>
            }
        }

        numpy::zero_handling(out_features);
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7fe fd2f 	bl	8002978 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8003f1a:	2400      	movs	r4, #0
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003f1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd fc31 	bl	8001788 <_ZN2ei19ei_quantized_matrixD1Ev>
        stack_frames_info_t stack_frame_info = { 0 };
 8003f26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fe6c 	bl	8003c08 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
    }
 8003f30:	4623      	mov	r3, r4
 8003f32:	4618      	mov	r0, r3
 8003f34:	3780      	adds	r7, #128	; 0x80
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	fffffc14 	.word	0xfffffc14
 8003f40:	08001b89 	.word	0x08001b89
 8003f44:	fffffc16 	.word	0xfffffc16
 8003f48:	2edbe6ff 	.word	0x2edbe6ff

08003f4c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_filters
     */
    static matrix_size_t calculate_mfe_buffer_size(
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6178      	str	r0, [r7, #20]
 8003f54:	6139      	str	r1, [r7, #16]
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f60:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 8003f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f64:	2200      	movs	r2, #0
 8003f66:	edd7 0a01 	vldr	s1, [r7, #4]
 8003f6a:	ed97 0a02 	vldr	s0, [r7, #8]
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	6938      	ldr	r0, [r7, #16]
 8003f72:	f7ff f93d 	bl	80031f0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>
 8003f76:	61f8      	str	r0, [r7, #28]
            sampling_frequency,
            frame_length,
            frame_stride,
            false,
            version);
        int32_t cols = num_filters;
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	61bb      	str	r3, [r7, #24]

        matrix_size_t size_matrix;
        size_matrix.rows = (uint32_t)rows;
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	601a      	str	r2, [r3, #0]
        size_matrix.cols = (uint32_t)cols;
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8003f88:	bf00      	nop
    }
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd fb21 	bl	80015e4 <_ZNSt14_Function_baseD1Ev>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 ff19 	bl	8005dee <_ZNSt8functionIFijjPfEEC1Ev>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZN2ei11ei_signal_tD1Ev>:
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ffde 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
    return preemphasis->get_data(offset, length, out_ptr);
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x24>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	68f9      	ldr	r1, [r7, #12]
 8003ff6:	f7fe fe89 	bl	8002d0c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000820 	.word	0x20000820

08004008 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    return EIDSP_OK;
#endif
}


__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	b0a5      	sub	sp, #148	; 0x94
 800400c:	af06      	add	r7, sp, #24
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800401e:	461d      	mov	r5, r3
 8004020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004028:	e895 0003 	ldmia.w	r5, {r0, r1}
 800402c:	e884 0003 	stmia.w	r4, {r0, r1}

    if (config.axes != 1) {
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004036:	4c91      	ldr	r4, [pc, #580]	; (800427c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x274>)
 8004038:	e11b      	b.n	8004272 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26a>
    }

    if (signal->total_length == 0) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8004042:	4c8f      	ldr	r4, [pc, #572]	; (8004280 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x278>)
 8004044:	e115      	b.n	8004272 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26a>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 8004046:	edd7 7a00 	vldr	s15, [r7]
 800404a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404e:	ee17 3a90 	vmov	r3, s15
 8004052:	677b      	str	r3, [r7, #116]	; 0x74

    signal_t preemphasized_audio_signal;
 8004054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ffa7 	bl	8003fac <_ZN2ei11ei_signal_tC1Ev>

    // before version 3 we did not have preemphasis
    if (config.implementation_version < 3) {
 800405e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004062:	2b02      	cmp	r3, #2
 8004064:	d80d      	bhi.n	8004082 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7a>
        preemphasis = nullptr;
 8004066:	4b87      	ldr	r3, [pc, #540]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        preemphasized_audio_signal.total_length = signal->total_length;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
        preemphasized_audio_signal.get_data = signal->get_data;
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fee4 	bl	8005e48 <_ZNSt8functionIFijjPfEEaSERKS2_>
 8004080:	e01d      	b.n	80040be <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb6>
    }
    else {
        // preemphasis class to preprocess the audio...
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
 8004082:	201c      	movs	r0, #28
 8004084:	f02a fd14 	bl	802eab0 <_Znwj>
 8004088:	4603      	mov	r3, r0
 800408a:	461c      	mov	r4, r3
 800408c:	2301      	movs	r3, #1
 800408e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8004288 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x280>
 8004092:	2201      	movs	r2, #1
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	4620      	mov	r0, r4
 8004098:	f7fe fdea 	bl	8002c70 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
 800409c:	673c      	str	r4, [r7, #112]	; 0x70
        preemphasis = pre;
 800409e:	4a79      	ldr	r2, [pc, #484]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 80040a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a2:	6013      	str	r3, [r2, #0]

        preemphasized_audio_signal.total_length = signal->total_length;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 80040aa:	4b78      	ldr	r3, [pc, #480]	; (800428c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x284>)
 80040ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80040b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fea5 	bl	8005e08 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFE matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
            preemphasized_audio_signal.total_length, frequency, config.frame_length, config.frame_stride, config.num_filters,
            config.implementation_version);
 80040be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80040c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
            preemphasized_audio_signal.total_length, frequency, config.frame_length, config.frame_stride, config.num_filters,
 80040c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
            config.implementation_version);
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040d0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	eef0 0a47 	vmov.f32	s1, s14
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040e2:	f7ff ff33 	bl	8003f4c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ea:	fb03 f202 	mul.w	r2, r3, r2
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	6889      	ldr	r1, [r1, #8]
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d920      	bls.n	8004140 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4619      	mov	r1, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	461a      	mov	r2, r3
 800410a:	4861      	ldr	r0, [pc, #388]	; (8004290 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x288>)
 800410c:	f001 fbc3 	bl	8005896 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	4619      	mov	r1, r3
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	461a      	mov	r2, r3
 8004118:	485e      	ldr	r0, [pc, #376]	; (8004294 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x28c>)
 800411a:	f001 fbbc 	bl	8005896 <_Z9ei_printfPKcz>
        if (preemphasis) {
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>
            delete preemphasis;
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004128:	681c      	ldr	r4, [r3, #0]
 800412a:	2c00      	cmp	r4, #0
 800412c:	d006      	beq.n	800413c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>
 800412e:	4620      	mov	r0, r4
 8004130:	f7fe feee 	bl	8002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8004134:	211c      	movs	r1, #28
 8004136:	4620      	mov	r0, r4
 8004138:	f02a fcb6 	bl	802eaa8 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800413c:	4c4f      	ldr	r4, [pc, #316]	; (800427c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x274>)
 800413e:	e093      	b.n	8004268 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x260>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]

    // and run the MFE extraction
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	f107 0014 	add.w	r0, r7, #20
 8004154:	2300      	movs	r3, #0
 8004156:	2201      	movs	r2, #1
 8004158:	f7fd fa68 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x15e>
 8004162:	4c4d      	ldr	r4, [pc, #308]	; (8004298 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>)
 8004164:	e07b      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
    if (!energy_matrix.buffer) {
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d110      	bne.n	800418e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x186>
        if (preemphasis) {
 800416c:	4b45      	ldr	r3, [pc, #276]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            delete preemphasis;
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	2c00      	cmp	r4, #0
 800417a:	d006      	beq.n	800418a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
 800417c:	4620      	mov	r0, r4
 800417e:	f7fe fec7 	bl	8002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8004182:	211c      	movs	r1, #28
 8004184:	4620      	mov	r0, r4
 8004186:	f02a fc8f 	bl	802eaa8 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800418a:	4c43      	ldr	r4, [pc, #268]	; (8004298 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>)
 800418c:	e067      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
    }

    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 800418e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004192:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 8004196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 8004198:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 800419a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 800419c:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency, config.implementation_version);
 800419e:	6db9      	ldr	r1, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 80041a0:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency, config.implementation_version);
 80041a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 80041a4:	460e      	mov	r6, r1
 80041a6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80041aa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80041ae:	f107 0014 	add.w	r0, r7, #20
 80041b2:	9104      	str	r1, [sp, #16]
 80041b4:	9603      	str	r6, [sp, #12]
 80041b6:	9502      	str	r5, [sp, #8]
 80041b8:	9201      	str	r2, [sp, #4]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	eef0 0a47 	vmov.f32	s1, s14
 80041c0:	eeb0 0a67 	vmov.f32	s0, s15
 80041c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c6:	4622      	mov	r2, r4
 80041c8:	4601      	mov	r1, r0
 80041ca:	68b8      	ldr	r0, [r7, #8]
 80041cc:	f7ff fd2a 	bl	8003c24 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 80041d0:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (preemphasis) {
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>
        delete preemphasis;
 80041da:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 80041dc:	681c      	ldr	r4, [r3, #0]
 80041de:	2c00      	cmp	r4, #0
 80041e0:	d006      	beq.n	80041f0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7fe fe94 	bl	8002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 80041e8:	211c      	movs	r1, #28
 80041ea:	4620      	mov	r0, r4
 80041ec:	f02a fc5c 	bl	802eaa8 <_ZdlPvj>
    }
    if (ret != EIDSP_OK) {
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fa>
        ei_printf("ERR: MFE failed (%d)\n", ret);
 80041f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80041f8:	4828      	ldr	r0, [pc, #160]	; (800429c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x294>)
 80041fa:	f001 fb4c 	bl	8005896 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80041fe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004200:	e02d      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
    }

    if (config.implementation_version < 3) {
 8004202:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004206:	2b02      	cmp	r3, #2
 8004208:	d810      	bhi.n	800422c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x224>
        // cepstral mean and variance normalization
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
 800420a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420c:	b299      	uxth	r1, r3
 800420e:	2301      	movs	r3, #1
 8004210:	2200      	movs	r2, #0
 8004212:	68b8      	ldr	r0, [r7, #8]
 8004214:	f7ff f888 	bl	8003328 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 8004218:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (ret != EIDSP_OK) {
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d014      	beq.n	800424a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x242>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8004220:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004222:	481f      	ldr	r0, [pc, #124]	; (80042a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>)
 8004224:	f001 fb37 	bl	8005896 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8004228:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800422a:	e018      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
        }
    }
    else {
        // normalization
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
 800422c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422e:	4619      	mov	r1, r3
 8004230:	68b8      	ldr	r0, [r7, #8]
 8004232:	f7ff f9f9 	bl	8003628 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
 8004236:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (ret != EIDSP_OK) {
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x242>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 800423e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004240:	4818      	ldr	r0, [pc, #96]	; (80042a4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x29c>)
 8004242:	f001 fb28 	bl	8005896 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8004246:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004248:	e009      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
        }
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424e:	fb03 f202 	mul.w	r2, r3, r2
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2201      	movs	r2, #1
 800425a:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 800425c:	2400      	movs	r4, #0
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fa0d 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    signal_t preemphasized_audio_signal;
 8004268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff feaa 	bl	8003fc6 <_ZN2ei11ei_signal_tD1Ev>
}
 8004272:	4623      	mov	r3, r4
 8004274:	4618      	mov	r0, r3
 8004276:	377c      	adds	r7, #124	; 0x7c
 8004278:	46bd      	mov	sp, r7
 800427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427c:	fffffc14 	.word	0xfffffc14
 8004280:	fffffc10 	.word	0xfffffc10
 8004284:	20000820 	.word	0x20000820
 8004288:	3f7ae148 	.word	0x3f7ae148
 800428c:	08003fe1 	.word	0x08003fe1
 8004290:	080329a4 	.word	0x080329a4
 8004294:	080329b8 	.word	0x080329b8
 8004298:	fffffc16 	.word	0xfffffc16
 800429c:	08032b9c 	.word	0x08032b9c
 80042a0:	080329ec 	.word	0x080329ec
 80042a4:	08032b3c 	.word	0x08032b3c

080042a8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 80042a8:	b5b0      	push	{r4, r5, r7, lr}
 80042aa:	b098      	sub	sp, #96	; 0x60
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042be:	ca07      	ldmia	r2, {r0, r1, r2}
 80042c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	4967      	ldr	r1, [pc, #412]	; (8004464 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fb ffd1 	bl	8000270 <strcmp>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 80042d8:	2303      	movs	r3, #3
 80042da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80042e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e6:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80042ee:	2300      	movs	r3, #0
 80042f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f080 80ac 	bcs.w	8004456 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d803      	bhi.n	800430e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 8004306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e001      	b.n	8004312 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 800430e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	461a      	mov	r2, r3
 8004318:	f107 0014 	add.w	r0, r7, #20
 800431c:	2300      	movs	r3, #0
 800431e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004320:	f7fd f984 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800432a:	4d4f      	ldr	r5, [pc, #316]	; (8004468 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 800432c:	2400      	movs	r4, #0
 800432e:	e086      	b.n	800443e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004338:	f001 fc8a 	bl	8005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800433c:	2300      	movs	r3, #0
 800433e:	657b      	str	r3, [r7, #84]	; 0x54
 8004340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004344:	429a      	cmp	r2, r3
 8004346:	d275      	bcs.n	8004434 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	edd3 7a00 	vldr	s15, [r3]
 8004354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004358:	ee17 3a90 	vmov	r3, s15
 800435c:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 800435e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	b2db      	uxtb	r3, r3
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800436c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800446c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004374:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	b2db      	uxtb	r3, r3
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004386:	eddf 6a39 	vldr	s13, [pc, #228]	; 800446c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 800438a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800438e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004394:	b2db      	uxtb	r3, r3
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800439e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800446c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80043a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043a6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 80043aa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d11b      	bne.n	80043ea <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b8:	1c59      	adds	r1, r3, #1
 80043ba:	65f9      	str	r1, [r7, #92]	; 0x5c
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043c2:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043d4:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043dc:	1c59      	adds	r1, r3, #1
 80043de:	65f9      	str	r1, [r7, #92]	; 0x5c
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e020      	b.n	800442c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 80043ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80043ee:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004470 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 80043f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80043fa:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004474 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 80043fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004406:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800440a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004478 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 800440e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004416:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442a:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	3301      	adds	r3, #1
 8004430:	657b      	str	r3, [r7, #84]	; 0x54
 8004432:	e785      	b.n	8004340 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 8004434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	2401      	movs	r4, #1
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd f91d 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8004448:	2c01      	cmp	r4, #1
 800444a:	d105      	bne.n	8004458 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800444c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004452:	65bb      	str	r3, [r7, #88]	; 0x58
 8004454:	e74d      	b.n	80042f2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 8004456:	2500      	movs	r5, #0
}
 8004458:	462b      	mov	r3, r5
 800445a:	4618      	mov	r0, r3
 800445c:	3760      	adds	r7, #96	; 0x60
 800445e:	46bd      	mov	sp, r7
 8004460:	bdb0      	pop	{r4, r5, r7, pc}
 8004462:	bf00      	nop
 8004464:	08032bb4 	.word	0x08032bb4
 8004468:	fffffc16 	.word	0xfffffc16
 800446c:	437f0000 	.word	0x437f0000
 8004470:	3e991687 	.word	0x3e991687
 8004474:	3f1645a2 	.word	0x3f1645a2
 8004478:	3de978d5 	.word	0x3de978d5

0800447c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 800447c:	b5b0      	push	{r4, r5, r7, lr}
 800447e:	b0a6      	sub	sp, #152	; 0x98
 8004480:	af00      	add	r7, sp, #0
 8004482:	6178      	str	r0, [r7, #20]
 8004484:	6139      	str	r1, [r7, #16]
 8004486:	60fa      	str	r2, [r7, #12]
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004494:	ca07      	ldmia	r2, {r0, r1, r2}
 8004496:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449c:	49ab      	ldr	r1, [pc, #684]	; (800474c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fb fee6 	bl	8000270 <strcmp>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 80044ae:	2303      	movs	r3, #3
 80044b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 80044ba:	f644 438b 	movw	r3, #19595	; 0x4c8b
 80044be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 80044c2:	f249 6345 	movw	r3, #38469	; 0x9645
 80044c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 80044c8:	f641 532f 	movw	r3, #7471	; 0x1d2f
 80044cc:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80044ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d2:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044e8:	429a      	cmp	r2, r3
 80044ea:	f080 821d 	bcs.w	8004928 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f4:	d803      	bhi.n	80044fe <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 80044f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	e001      	b.n	8004502 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 80044fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004502:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	461a      	mov	r2, r3
 8004508:	f107 0018 	add.w	r0, r7, #24
 800450c:	2300      	movs	r3, #0
 800450e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004510:	f7fd f88c 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800451a:	4d8d      	ldr	r5, [pc, #564]	; (8004750 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 800451c:	2400      	movs	r4, #0
 800451e:	e1f5      	b.n	800490c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004520:	6938      	ldr	r0, [r7, #16]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004526:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800452a:	f001 fb91 	bl	8005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004534:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800453a:	429a      	cmp	r2, r3
 800453c:	f080 81e1 	bcs.w	8004902 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004552:	ee17 3a90 	vmov	r3, s15
 8004556:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8004558:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800455c:	2b03      	cmp	r3, #3
 800455e:	f040 8105 	bne.w	800476c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004568:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004754 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 800456c:	eef4 7a47 	vcmp.f32	s15, s14
 8004570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004574:	d160      	bne.n	8004638 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800457c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004758 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004580:	eef4 7a47 	vcmp.f32	s15, s14
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	d156      	bne.n	8004638 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2db      	uxtb	r3, r3
 8004590:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	b2db      	uxtb	r3, r3
 8004598:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	b2db      	uxtb	r3, r3
 800459e:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80045b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80045c2:	4413      	add	r3, r2
 80045c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c8:	edc7 7a00 	vstr	s15, [r7]
 80045cc:	783a      	ldrb	r2, [r7, #0]
 80045ce:	b252      	sxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80045e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80045f4:	4413      	add	r3, r2
 80045f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fa:	edc7 7a00 	vstr	s15, [r7]
 80045fe:	783a      	ldrb	r2, [r7, #0]
 8004600:	b252      	sxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8004604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004626:	4413      	add	r3, r2
 8004628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462c:	edc7 7a00 	vstr	s15, [r7]
 8004630:	783a      	ldrb	r2, [r7, #0]
 8004632:	b252      	sxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e15e      	b.n	80048f6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	b2db      	uxtb	r3, r3
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004646:	eddf 6a45 	vldr	s13, [pc, #276]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800464a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800464e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	b2db      	uxtb	r3, r3
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004660:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004668:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	b2db      	uxtb	r3, r3
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004678:	eddf 6a38 	vldr	s13, [pc, #224]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800467c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004680:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800468a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800468e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004692:	eeb0 0a66 	vmov.f32	s0, s13
 8004696:	f7fd f8c0 	bl	800181a <_ZSt5roundf>
 800469a:	eeb0 7a40 	vmov.f32	s14, s0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80046a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046b0:	1c59      	adds	r1, r3, #1
 80046b2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80046b6:	4413      	add	r3, r2
 80046b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046bc:	edc7 7a00 	vstr	s15, [r7]
 80046c0:	783a      	ldrb	r2, [r7, #0]
 80046c2:	b252      	sxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80046cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80046d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046d4:	eeb0 0a66 	vmov.f32	s0, s13
 80046d8:	f7fd f89f 	bl	800181a <_ZSt5roundf>
 80046dc:	eeb0 7a40 	vmov.f32	s14, s0
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80046e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80046f8:	4413      	add	r3, r2
 80046fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046fe:	edc7 7a00 	vstr	s15, [r7]
 8004702:	783a      	ldrb	r2, [r7, #0]
 8004704:	b252      	sxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800470e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004712:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004716:	eeb0 0a66 	vmov.f32	s0, s13
 800471a:	f7fd f87e 	bl	800181a <_ZSt5roundf>
 800471e:	eeb0 7a40 	vmov.f32	s14, s0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800473a:	4413      	add	r3, r2
 800473c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004740:	edc7 7a00 	vstr	s15, [r7]
 8004744:	783a      	ldrb	r2, [r7, #0]
 8004746:	b252      	sxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e0d4      	b.n	80048f6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 800474c:	08032bb4 	.word	0x08032bb4
 8004750:	fffffc16 	.word	0xfffffc16
 8004754:	3b808081 	.word	0x3b808081
 8004758:	c3000000 	.word	0xc3000000
 800475c:	437f0000 	.word	0x437f0000
 8004760:	3e991687 	.word	0x3e991687
 8004764:	3f1645a2 	.word	0x3f1645a2
 8004768:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004772:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004754 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004776:	eef4 7a47 	vcmp.f32	s15, s14
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	d15b      	bne.n	8004838 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004786:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004758 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 800478a:	eef4 7a47 	vcmp.f32	s15, s14
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d151      	bne.n	8004838 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 80047aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ac:	f644 428b 	movw	r2, #19595	; 0x4c8b
 80047b0:	fb03 f202 	mul.w	r2, r3, r2
 80047b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b6:	f249 6145 	movw	r1, #38469	; 0x9645
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	441a      	add	r2, r3
 80047c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c2:	f641 512f 	movw	r1, #7471	; 0x1d2f
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 80047d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047d4:	141b      	asrs	r3, r3, #16
 80047d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 80047da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80047ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047f4:	ee17 3a90 	vmov	r3, s15
 80047f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 80047fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004800:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004804:	da04      	bge.n	8004810 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004806:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800480a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800480e:	e006      	b.n	800481e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004814:	2b7f      	cmp	r3, #127	; 0x7f
 8004816:	dd02      	ble.n	800481e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004818:	237f      	movs	r3, #127	; 0x7f
 800481a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004826:	1c59      	adds	r1, r3, #1
 8004828:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800482c:	4413      	add	r3, r2
 800482e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004832:	b252      	sxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e05e      	b.n	80048f6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	b2db      	uxtb	r3, r3
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004846:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800484a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800484e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	b2db      	uxtb	r3, r3
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004860:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004868:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800486c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486e:	b2db      	uxtb	r3, r3
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004878:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800487c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004880:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004884:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004888:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004760 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 800488c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004890:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004894:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004764 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800489c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80048a4:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004768 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 80048a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80048ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80048ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048c2:	eeb0 0a66 	vmov.f32	s0, s13
 80048c6:	f7fc ffa8 	bl	800181a <_ZSt5roundf>
 80048ca:	eeb0 7a40 	vmov.f32	s14, s0
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80048d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80048e0:	1c59      	adds	r1, r3, #1
 80048e2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80048e6:	4413      	add	r3, r2
 80048e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ec:	edc7 7a00 	vstr	s15, [r7]
 80048f0:	783a      	ldrb	r2, [r7, #0]
 80048f2:	b252      	sxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80048f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048fa:	3301      	adds	r3, #1
 80048fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004900:	e618      	b.n	8004534 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
 800490a:	2401      	movs	r4, #1
 800490c:	f107 0318 	add.w	r3, r7, #24
 8004910:	4618      	mov	r0, r3
 8004912:	f7fc feb6 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8004916:	2c01      	cmp	r4, #1
 8004918:	d107      	bne.n	800492a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800491a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800491e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004926:	e5db      	b.n	80044e0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004928:	2500      	movs	r5, #0
}
 800492a:	462b      	mov	r3, r5
 800492c:	4618      	mov	r0, r3
 800492e:	3798      	adds	r7, #152	; 0x98
 8004930:	46bd      	mov	sp, r7
 8004932:	bdb0      	pop	{r4, r5, r7, pc}

08004934 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3310      	adds	r3, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fb24 	bl	8003fac <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	f000 f832 	bl	80049ee <_ZN14SignalWithAxes8get_dataEjjPf>
 800498a:	4603      	mov	r3, r0
        };
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d102      	bne.n	80049b0 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	e01a      	b.n	80049e6 <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	fb03 f202 	mul.w	r2, r3, r2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	621a      	str	r2, [r3, #32]
        };
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f103 0210 	add.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f001 fa4e 	bl	8005e7e <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3310      	adds	r3, #16
    }
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08a      	sub	sp, #40	; 0x28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	6992      	ldr	r2, [r2, #24]
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	68d2      	ldr	r2, [r2, #12]
 8004a20:	6992      	ldr	r2, [r2, #24]
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	623b      	str	r3, [r7, #32]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	4413      	add	r3, r2
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d22b      	bcs.n	8004a94 <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d21d      	bcs.n	8004a86 <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	18d1      	adds	r1, r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	627a      	str	r2, [r7, #36]	; 0x24
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f001 f8ef 	bl	8005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004a72:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	e00b      	b.n	8004a96 <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3301      	adds	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e7dc      	b.n	8004a40 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	4413      	add	r3, r2
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	e7cd      	b.n	8004a30 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 8004a94:	2300      	movs	r3, #0
    }
 8004a96:	4618      	mov	r0, r3
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004aac:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6178      	str	r0, [r7, #20]
 8004ac4:	6139      	str	r1, [r7, #16]
 8004ac6:	60fa      	str	r2, [r7, #12]
 8004ac8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004acc:	edc7 0a01 	vstr	s1, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004ad2:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6178      	str	r0, [r7, #20]
 8004aec:	6139      	str	r1, [r7, #16]
 8004aee:	60fa      	str	r2, [r7, #12]
 8004af0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004af4:	edc7 0a01 	vstr	s1, [r7, #4]
 8004af8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004b02:	461a      	mov	r2, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d23f      	bcs.n	8004b8a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f993 3000 	ldrsb.w	r3, [r3]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b24:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d011      	beq.n	8004b5a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	4813      	ldr	r0, [pc, #76]	; (8004b94 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 8004b48:	f000 fea5 	bl	8005896 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004b4c:	ed97 0a06 	vldr	s0, [r7, #24]
 8004b50:	f021 ff0a 	bl	8026968 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004b54:	4810      	ldr	r0, [pc, #64]	; (8004b98 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 8004b56:	f000 fe9e 	bl	8005896 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	3201      	adds	r2, #1
 8004b6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	3301      	adds	r3, #1
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3301      	adds	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e7b9      	b.n	8004afe <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	08032c30 	.word	0x08032c30
 8004b98:	08032c38 	.word	0x08032c38

08004b9c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d232      	bcs.n	8004c20 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	613b      	str	r3, [r7, #16]

        if (debug) {
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d011      	beq.n	8004bf0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4813      	ldr	r0, [pc, #76]	; (8004c2c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8004bde:	f000 fe5a 	bl	8005896 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004be2:	ed97 0a04 	vldr	s0, [r7, #16]
 8004be6:	f021 febf 	bl	8026968 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004bea:	4811      	ldr	r0, [pc, #68]	; (8004c30 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8004bec:	f000 fe53 	bl	8005896 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	3201      	adds	r2, #1
 8004c04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	3304      	adds	r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e7c6      	b.n	8004bae <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	08032c30 	.word	0x08032c30
 8004c30:	08032c38 	.word	0x08032c38

08004c34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 8004c42:	f021 fe7d 	bl	8026940 <_Z16ei_read_timer_usv>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8004c50:	486e      	ldr	r0, [pc, #440]	; (8004e0c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 8004c52:	f028 ff0b 	bl	802da6c <_Z18trained_model_initPFPvjjE>
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	4619      	mov	r1, r3
 8004c64:	486a      	ldr	r0, [pc, #424]	; (8004e10 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 8004c66:	f000 fe16 	bl	8005896 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004c6a:	f06f 0305 	mvn.w	r3, #5
 8004c6e:	e0c8      	b.n	8004e02 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c76:	2000      	movs	r0, #0
 8004c78:	4798      	blx	r3
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	2000      	movs	r0, #0
 8004c88:	4798      	blx	r3
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d115      	bne.n	8004cc6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4798      	blx	r3
 8004caa:	4602      	mov	r2, r0
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8004cc6:	4b53      	ldr	r3, [pc, #332]	; (8004e14 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8098 	beq.w	8004e00 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d005      	beq.n	8004cec <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	; (8004e18 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 8004ce2:	4a4e      	ldr	r2, [pc, #312]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004ce4:	2159      	movs	r1, #89	; 0x59
 8004ce6:	484e      	ldr	r0, [pc, #312]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004ce8:	f02c fb3c 	bl	8031364 <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d005      	beq.n	8004d08 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8004cfc:	4b49      	ldr	r3, [pc, #292]	; (8004e24 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8004cfe:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d00:	215a      	movs	r1, #90	; 0x5a
 8004d02:	4847      	ldr	r0, [pc, #284]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d04:	f02c fb2e 	bl	8031364 <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d11b      	bne.n	8004d4a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d005      	beq.n	8004d2e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 8004d22:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 8004d24:	4a3d      	ldr	r2, [pc, #244]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d26:	215c      	movs	r1, #92	; 0x5c
 8004d28:	483d      	ldr	r0, [pc, #244]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d2a:	f02c fb1b 	bl	8031364 <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d005      	beq.n	8004d4a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 8004d40:	4a36      	ldr	r2, [pc, #216]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d42:	215d      	movs	r1, #93	; 0x5d
 8004d44:	4836      	ldr	r0, [pc, #216]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d46:	f02c fb0d 	bl	8031364 <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d026      	beq.n	8004da2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d62:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6a:	d005      	beq.n	8004d78 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 8004d6e:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d70:	2160      	movs	r1, #96	; 0x60
 8004d72:	482b      	ldr	r0, [pc, #172]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d74:	f02c faf6 	bl	8031364 <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	d005      	beq.n	8004da2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 8004d96:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d9a:	2161      	movs	r1, #97	; 0x61
 8004d9c:	4820      	ldr	r0, [pc, #128]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d9e:	f02c fae1 	bl	8031364 <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d026      	beq.n	8004dfa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004dba:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	d005      	beq.n	8004dd0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 8004dc6:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004dc8:	2164      	movs	r1, #100	; 0x64
 8004dca:	4815      	ldr	r0, [pc, #84]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004dcc:	f02c faca 	bl	8031364 <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004de4:	eeb4 7a67 	vcmp.f32	s14, s15
 8004de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dec:	d005      	beq.n	8004dfa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8004df0:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004df2:	2165      	movs	r1, #101	; 0x65
 8004df4:	480a      	ldr	r0, [pc, #40]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004df6:	f02c fab5 	bl	8031364 <__assert_func>
        }
        tflite_first_run = false;
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	080014d1 	.word	0x080014d1
 8004e10:	08032c3c 	.word	0x08032c3c
 8004e14:	20000048 	.word	0x20000048
 8004e18:	08032c70 	.word	0x08032c70
 8004e1c:	08032ca4 	.word	0x08032ca4
 8004e20:	08032d40 	.word	0x08032d40
 8004e24:	08032dcc 	.word	0x08032dcc
 8004e28:	08032e00 	.word	0x08032e00
 8004e2c:	08032e3c 	.word	0x08032e3c
 8004e30:	08032e78 	.word	0x08032e78
 8004e34:	08032eb0 	.word	0x08032eb0
 8004e38:	08032ef0 	.word	0x08032ef0
 8004e3c:	08032f28 	.word	0x08032f28

08004e40 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b08c      	sub	sp, #48	; 0x30
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 8004e4c:	f029 f898 	bl	802df80 <_Z20trained_model_invokev>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf14      	ite	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 8004e60:	f06f 0302 	mvn.w	r3, #2
 8004e64:	e0ea      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8004e66:	f021 fd6b 	bl	8026940 <_Z16ei_read_timer_usv>
 8004e6a:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8004e6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e76:	1a84      	subs	r4, r0, r2
 8004e78:	eb61 0503 	sbc.w	r5, r1, r3
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e82:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8004e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e88:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8004e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	f7fb ff02 	bl	8000c9c <__aeabi_ldivmod>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8004ea2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4864      	ldr	r0, [pc, #400]	; (8005044 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 8004eb4:	f000 fcef 	bl	8005896 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d072      	beq.n	8004fae <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d862      	bhi.n	8004f9a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f67 	.word	0x08004f67
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f73 	.word	0x08004f73
 8004ee8:	08004f87 	.word	0x08004f87
 8004eec:	08004f73 	.word	0x08004f73
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8004efe:	7dbb      	ldrb	r3, [r7, #22]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01e      	beq.n	8004f42 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	6899      	ldr	r1, [r3, #8]
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	eef0 0a47 	vmov.f32	s1, s14
 8004f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fdc1 	bl	8004abc <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 8004f40:	e063      	b.n	800500a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	6899      	ldr	r1, [r3, #8]
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	460b      	mov	r3, r1
 8004f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fda0 	bl	8004a9e <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8004f64:	e051      	b.n	800500a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 8004f66:	4838      	ldr	r0, [pc, #224]	; (8005048 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 8004f68:	f000 fc95 	bl	8005896 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004f6c:	f06f 0309 	mvn.w	r3, #9
 8004f70:	e064      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4834      	ldr	r0, [pc, #208]	; (800504c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 8004f7c:	f000 fc8b 	bl	8005896 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004f80:	f06f 0309 	mvn.w	r3, #9
 8004f84:	e05a      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4830      	ldr	r0, [pc, #192]	; (8005050 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8004f90:	f000 fc81 	bl	8005896 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004f94:	f06f 0309 	mvn.w	r3, #9
 8004f98:	e050      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	482c      	ldr	r0, [pc, #176]	; (8005054 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 8004fa4:	f000 fc77 	bl	8005896 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004fa8:	f06f 0309 	mvn.w	r3, #9
 8004fac:	e046      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b09      	cmp	r3, #9
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d018      	beq.n	8004ff4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8004fd8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004fdc:	eef0 0a47 	vmov.f32	s1, s14
 8004fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff fd7c 	bl	8004ae4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ff2:	e00a      	b.n	800500a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004ffc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff fdcc 	bl	8004b9c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 800500a:	4813      	ldr	r0, [pc, #76]	; (8005058 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 800500c:	f028 ffee 	bl	802dfec <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8005010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8005018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800501c:	e00e      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800501e:	f021 fc87 	bl	8026930 <_Z29ei_run_impulse_check_canceledv>
 8005022:	4603      	mov	r3, r0
 8005024:	f113 0f02 	cmn.w	r3, #2
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 8005034:	f06f 0301 	mvn.w	r3, #1
 8005038:	e000      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3728      	adds	r7, #40	; 0x28
 8005040:	46bd      	mov	sp, r7
 8005042:	bdb0      	pop	{r4, r5, r7, pc}
 8005044:	08032f6c 	.word	0x08032f6c
 8005048:	08032f8c 	.word	0x08032f8c
 800504c:	08032fe4 	.word	0x08032fe4
 8005050:	08033034 	.word	0x08033034
 8005054:	08033084 	.word	0x08033084
 8005058:	08001555 	.word	0x08001555

0800505c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800505c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005060:	b09e      	sub	sp, #120	; 0x78
 8005062:	af06      	add	r7, sp, #24
 8005064:	6178      	str	r0, [r7, #20]
 8005066:	6139      	str	r1, [r7, #16]
 8005068:	60fa      	str	r2, [r7, #12]
 800506a:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 800506c:	f021 fc68 	bl	8026940 <_Z16ei_read_timer_usv>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005078:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005080:	f107 0318 	add.w	r3, r7, #24
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fd93 	bl	8005bb2 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 800508c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005090:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005094:	f107 0120 	add.w	r1, r7, #32
 8005098:	f107 0318 	add.w	r3, r7, #24
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4603      	mov	r3, r0
 80050ac:	6978      	ldr	r0, [r7, #20]
 80050ae:	f7ff fdc1 	bl	8004c34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 80050b8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 80050c0:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 80050c4:	e0c5      	b.n	8005252 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 80050c6:	f107 0318 	add.w	r3, r7, #24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fef6 	bl	8005ebc <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 80050d0:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d022      	beq.n	8005120 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 80050da:	2b09      	cmp	r3, #9
 80050dc:	f300 8083 	bgt.w	80051e6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d002      	beq.n	80050ea <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d051      	beq.n	800518c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 80050e8:	e07d      	b.n	80051e6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80050ea:	2300      	movs	r3, #0
 80050ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	6892      	ldr	r2, [r2, #8]
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d27b      	bcs.n	80051f8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800511a:	3301      	adds	r3, #1
 800511c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800511e:	e7e6      	b.n	80050ee <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005120:	2300      	movs	r3, #0
 8005122:	65bb      	str	r3, [r7, #88]	; 0x58
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	6892      	ldr	r2, [r2, #8]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005132:	429a      	cmp	r2, r3
 8005134:	d262      	bcs.n	80051fc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	edd3 7a03 	vldr	s15, [r3, #12]
 800514a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800514e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005152:	eeb0 0a66 	vmov.f32	s0, s13
 8005156:	f7fc fb60 	bl	800181a <_ZSt5roundf>
 800515a:	eeb0 7a40 	vmov.f32	s14, s0
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800516a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005174:	4413      	add	r3, r2
 8005176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517a:	edc7 7a01 	vstr	s15, [r7, #4]
 800517e:	793a      	ldrb	r2, [r7, #4]
 8005180:	b252      	sxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005186:	3301      	adds	r3, #1
 8005188:	65bb      	str	r3, [r7, #88]	; 0x58
 800518a:	e7cb      	b.n	8005124 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800518c:	2300      	movs	r3, #0
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	6892      	ldr	r2, [r2, #8]
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800519e:	429a      	cmp	r2, r3
 80051a0:	d221      	bcs.n	80051e6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80051b6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80051ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80051c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ce:	4413      	add	r3, r2
 80051d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80051d8:	793a      	ldrb	r2, [r7, #4]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80051de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e0:	3301      	adds	r3, #1
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
 80051e4:	e7d4      	b.n	8005190 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	481f      	ldr	r0, [pc, #124]	; (800526c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 80051ee:	f000 fb52 	bl	8005896 <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 80051f2:	f06f 040c 	mvn.w	r4, #12
 80051f6:	e02c      	b.n	8005252 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 80051fc:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 80051fe:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 8005202:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005206:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005208:	7afb      	ldrb	r3, [r7, #11]
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	9303      	str	r3, [sp, #12]
 8005214:	9602      	str	r6, [sp, #8]
 8005216:	9001      	str	r0, [sp, #4]
 8005218:	9100      	str	r1, [sp, #0]
 800521a:	465a      	mov	r2, fp
 800521c:	4663      	mov	r3, ip
 800521e:	6978      	ldr	r0, [r7, #20]
 8005220:	f7ff fe0e 	bl	8004e40 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 800522a:	f021 fb89 	bl	8026940 <_Z16ei_read_timer_usv>
 800522e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005232:	1a84      	subs	r4, r0, r2
 8005234:	eb61 0503 	sbc.w	r5, r1, r3
 8005238:	4622      	mov	r2, r4
 800523a:	462b      	mov	r3, r5
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8005242:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 800524a:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 800524e:	e000      	b.n	8005252 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 8005250:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005252:	f107 0318 	add.w	r3, r7, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fcc0 	bl	8005bdc <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 800525c:	4623      	mov	r3, r4
 800525e:	4618      	mov	r0, r3
 8005260:	3760      	adds	r7, #96	; 0x60
 8005262:	46bd      	mov	sp, r7
 8005264:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005268:	08001555 	.word	0x08001555
 800526c:	080330b8 	.word	0x080330b8

08005270 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 8005270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005274:	b0a1      	sub	sp, #132	; 0x84
 8005276:	af06      	add	r7, sp, #24
 8005278:	6178      	str	r0, [r7, #20]
 800527a:	6139      	str	r1, [r7, #16]
 800527c:	60fa      	str	r2, [r7, #12]
 800527e:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005284:	2100      	movs	r1, #0
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f02c f90a 	bl	80314a0 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 800528c:	4b7b      	ldr	r3, [pc, #492]	; (800547c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005290:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fc89 	bl	8005bb2 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80052a0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80052a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80052a8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80052ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b0:	9302      	str	r3, [sp, #8]
 80052b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4603      	mov	r3, r0
 80052c0:	6978      	ldr	r0, [r7, #20]
 80052c2:	f7ff fcb7 	bl	8004c34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 80052cc:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 80052d4:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 80052d8:	e0c4      	b.n	8005464 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 80052da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b09      	cmp	r3, #9
 80052e0:	d002      	beq.n	80052e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80052e2:	f06f 0408 	mvn.w	r4, #8
 80052e6:	e0bd      	b.n	8005464 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 80052e8:	f021 fb2a 	bl	8026940 <_Z16ei_read_timer_usv>
 80052ec:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f107 0018 	add.w	r0, r7, #24
 80052fc:	2101      	movs	r1, #1
 80052fe:	f7fc f9d6 	bl	80016ae <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 8005302:	4b5f      	ldr	r3, [pc, #380]	; (8005480 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800530c:	f107 0218 	add.w	r2, r7, #24
 8005310:	eeb0 0a67 	vmov.f32	s0, s15
 8005314:	460b      	mov	r3, r1
 8005316:	6939      	ldr	r1, [r7, #16]
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f7ff f8af 	bl	800447c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 800531e:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005328:	4856      	ldr	r0, [pc, #344]	; (8005484 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 800532a:	f000 fab4 	bl	8005896 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 800532e:	f06f 0404 	mvn.w	r4, #4
 8005332:	e092      	b.n	800545a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005334:	f021 fafc 	bl	8026930 <_Z29ei_run_impulse_check_canceledv>
 8005338:	4603      	mov	r3, r0
 800533a:	f113 0f02 	cmn.w	r3, #2
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 800534a:	f06f 0401 	mvn.w	r4, #1
 800534e:	e084      	b.n	800545a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005350:	f021 faf6 	bl	8026940 <_Z16ei_read_timer_usv>
 8005354:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005358:	ebb0 0802 	subs.w	r8, r0, r2
 800535c:	eb61 0903 	sbc.w	r9, r1, r3
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	f7fb fc90 	bl	8000c9c <__aeabi_ldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02d      	beq.n	80053e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005392:	4619      	mov	r1, r3
 8005394:	483c      	ldr	r0, [pc, #240]	; (8005488 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 8005396:	f000 fa7e 	bl	8005896 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800539a:	2300      	movs	r3, #0
 800539c:	667b      	str	r3, [r7, #100]	; 0x64
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d21d      	bcs.n	80053e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	4413      	add	r3, r2
 80053ac:	f993 3000 	ldrsb.w	r3, [r3]
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80053be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80053c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053cc:	eeb0 0a67 	vmov.f32	s0, s15
 80053d0:	f021 faca 	bl	8026968 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80053d4:	482d      	ldr	r0, [pc, #180]	; (800548c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 80053d6:	f000 fa5e 	bl	8005896 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80053da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053dc:	3301      	adds	r3, #1
 80053de:	667b      	str	r3, [r7, #100]	; 0x64
 80053e0:	e7dd      	b.n	800539e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 80053e2:	482b      	ldr	r0, [pc, #172]	; (8005490 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 80053e4:	f000 fa57 	bl	8005896 <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 80053e8:	f021 faaa 	bl	8026940 <_Z16ei_read_timer_usv>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 80053f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80053f8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	607b      	str	r3, [r7, #4]
 80053fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005400:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8005402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fd58 	bl	8005ebc <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800540c:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	9203      	str	r2, [sp, #12]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	9202      	str	r2, [sp, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	9600      	str	r6, [sp, #0]
 8005422:	4642      	mov	r2, r8
 8005424:	464b      	mov	r3, r9
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7ff fd0a 	bl	8004e40 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8005432:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 800543a:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800543e:	e00c      	b.n	800545a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005440:	f021 fa7e 	bl	8026940 <_Z16ei_read_timer_usv>
 8005444:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005448:	1a84      	subs	r4, r0, r2
 800544a:	eb61 0503 	sbc.w	r5, r1, r3
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 8005458:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 800545a:	f107 0318 	add.w	r3, r7, #24
 800545e:	4618      	mov	r0, r3
 8005460:	f7fc f94f 	bl	8001702 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fbb7 	bl	8005bdc <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 800546e:	4623      	mov	r3, r4
 8005470:	4618      	mov	r0, r3
 8005472:	376c      	adds	r7, #108	; 0x6c
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800547a:	bf00      	nop
 800547c:	08001555 	.word	0x08001555
 8005480:	20000034 	.word	0x20000034
 8005484:	080330dc 	.word	0x080330dc
 8005488:	08033104 	.word	0x08033104
 800548c:	08033118 	.word	0x08033118
 8005490:	08032c38 	.word	0x08032c38

08005494 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fdd7 	bl	800505c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 80054b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <run_inference+0x2c>
        return nn_res;
 80054ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054be:	e00e      	b.n	80054de <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80054c0:	f021 fa36 	bl	8026930 <_Z29ei_run_impulse_check_canceledv>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f113 0f02 	cmn.w	r3, #2
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 80054d6:	f06f 0301 	mvn.w	r3, #1
 80054da:	e000      	b.n	80054de <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3310      	adds	r3, #16
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fd67 	bl	8003fc6 <_ZN2ei11ei_signal_tD1Ev>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8005504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005508:	b0a5      	sub	sp, #148	; 0x94
 800550a:	af02      	add	r7, sp, #8
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	70fb      	strb	r3, [r7, #3]
 8005514:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f928 	bl	800576c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f954 	bl	80057e0 <run_classifier_image_quantized>
 8005538:	4603      	mov	r3, r0
 800553a:	461e      	mov	r6, r3
 800553c:	e0ef      	b.n	800571e <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 800553e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f02b ffab 	bl	80314a0 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005552:	2300      	movs	r3, #0
 8005554:	2101      	movs	r1, #1
 8005556:	f7fc f869 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 800555a:	f021 f9f1 	bl	8026940 <_Z16ei_read_timer_usv>
 800555e:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005576:	429a      	cmp	r2, r3
 8005578:	d27c      	bcs.n	8005674 <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800557e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005590:	461d      	mov	r5, r3
 8005592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 800559a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800559c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d905      	bls.n	80055b6 <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 80055aa:	4860      	ldr	r0, [pc, #384]	; (800572c <process_impulse+0x228>)
 80055ac:	f000 f973 	bl	8005896 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 80055b0:	f06f 0604 	mvn.w	r6, #4
 80055b4:	e0ad      	b.n	8005712 <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 80055b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80055c6:	460a      	mov	r2, r1
 80055c8:	2101      	movs	r1, #1
 80055ca:	f7fc f82f 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 80055ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d2:	f107 0014 	add.w	r0, r7, #20
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	460b      	mov	r3, r1
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	f7ff f9a9 	bl	8004934 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 80055e2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff f9d3 	bl	8004994 <_ZN14SignalWithAxes10get_signalEv>
 80055ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80055f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055fa:	eeb0 0a67 	vmov.f32	s0, s15
 80055fe:	4619      	mov	r1, r3
 8005600:	47a0      	blx	r4
 8005602:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8005604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800560a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800560c:	4848      	ldr	r0, [pc, #288]	; (8005730 <process_impulse+0x22c>)
 800560e:	f000 f942 	bl	8005896 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005612:	f06f 0604 	mvn.w	r6, #4
 8005616:	2400      	movs	r4, #0
 8005618:	e015      	b.n	8005646 <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800561a:	f021 f989 	bl	8026930 <_Z29ei_run_impulse_check_canceledv>
 800561e:	4603      	mov	r3, r0
 8005620:	f113 0f02 	cmn.w	r3, #2
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005630:	f06f 0601 	mvn.w	r6, #1
 8005634:	2400      	movs	r4, #0
 8005636:	e006      	b.n	8005646 <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800563e:	4413      	add	r3, r2
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005644:	2401      	movs	r4, #1
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff ff4b 	bl	80054e6 <_ZN14SignalWithAxesD1Ev>
 8005650:	2c01      	cmp	r4, #1
 8005652:	d001      	beq.n	8005658 <process_impulse+0x154>
 8005654:	2400      	movs	r4, #0
 8005656:	e000      	b.n	800565a <process_impulse+0x156>
 8005658:	2401      	movs	r4, #1
 800565a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800565e:	4618      	mov	r0, r3
 8005660:	f7fc f80f 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8005664:	2c01      	cmp	r4, #1
 8005666:	d154      	bne.n	8005712 <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800566c:	3301      	adds	r3, #1
 800566e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005672:	e77c      	b.n	800556e <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005674:	f021 f964 	bl	8026940 <_Z16ei_read_timer_usv>
 8005678:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800567c:	ebb0 0802 	subs.w	r8, r0, r2
 8005680:	eb61 0903 	sbc.w	r9, r1, r3
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	f7fb fafe 	bl	8000c9c <__aeabi_ldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d020      	beq.n	80056f2 <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056b6:	4619      	mov	r1, r3
 80056b8:	481e      	ldr	r0, [pc, #120]	; (8005734 <process_impulse+0x230>)
 80056ba:	f000 f8ec 	bl	8005896 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80056be:	2300      	movs	r3, #0
 80056c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d210      	bcs.n	80056ec <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 80056ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	edd3 7a00 	vldr	s15, [r3]
 80056d6:	eeb0 0a67 	vmov.f32	s0, s15
 80056da:	f021 f945 	bl	8026968 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80056de:	4816      	ldr	r0, [pc, #88]	; (8005738 <process_impulse+0x234>)
 80056e0:	f000 f8d9 	bl	8005896 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80056e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056e6:	3301      	adds	r3, #1
 80056e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056ea:	e7ea      	b.n	80056c2 <process_impulse+0x1be>
        }
        ei_printf("\n");
 80056ec:	4813      	ldr	r0, [pc, #76]	; (800573c <process_impulse+0x238>)
 80056ee:	f000 f8d2 	bl	8005896 <_Z9ei_printfPKcz>
    }

    if (debug) {
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 80056f8:	4811      	ldr	r0, [pc, #68]	; (8005740 <process_impulse+0x23c>)
 80056fa:	f000 f8cc 	bl	8005896 <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fec4 	bl	8005494 <run_inference>
 800570c:	4603      	mov	r3, r0
 800570e:	461e      	mov	r6, r3
 8005710:	e000      	b.n	8005714 <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005712:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005718:	4618      	mov	r0, r3
 800571a:	f7fb ffb2 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>

}
 800571e:	4633      	mov	r3, r6
 8005720:	4618      	mov	r0, r3
 8005722:	378c      	adds	r7, #140	; 0x8c
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800572a:	bf00      	nop
 800572c:	0803311c 	.word	0x0803311c
 8005730:	080330dc 	.word	0x080330dc
 8005734:	08033104 	.word	0x08033104
 8005738:	08033118 	.word	0x08033118
 800573c:	08032c38 	.word	0x08032c38
 8005740:	08033148 	.word	0x08033148

08005744 <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a06      	ldr	r2, [pc, #24]	; (8005768 <ei_construct_impulse+0x24>)
 8005750:	4618      	mov	r0, r3
 8005752:	4611      	mov	r1, r2
 8005754:	23a4      	movs	r3, #164	; 0xa4
 8005756:	461a      	mov	r2, r3
 8005758:	f02b fe7a 	bl	8031450 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 800575c:	bf00      	nop
}
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	0803335c 	.word	0x0803335c

0800576c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005778:	2b02      	cmp	r3, #2
 800577a:	d00a      	beq.n	8005792 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	2b05      	cmp	r3, #5
 8005782:	d006      	beq.n	8005792 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005788:	2b07      	cmp	r3, #7
 800578a:	d002      	beq.n	8005792 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800578c:	f06f 0309 	mvn.w	r3, #9
 8005790:	e01d      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005798:	2b01      	cmp	r3, #1
 800579a:	d102      	bne.n	80057a2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800579c:	f06f 0308 	mvn.w	r3, #8
 80057a0:	e015      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d002      	beq.n	80057b2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80057ac:	f06f 0308 	mvn.w	r3, #8
 80057b0:	e00d      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4a06      	ldr	r2, [pc, #24]	; (80057dc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d002      	beq.n	80057cc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80057c6:	f06f 0308 	mvn.w	r3, #8
 80057ca:	e000      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	080042a9 	.word	0x080042a9

080057e0 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ffbc 	bl	800576c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 80057f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <run_classifier_image_quantized+0x26>
        return verify_res;
 8005800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005804:	e00d      	b.n	8005822 <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800580a:	2100      	movs	r1, #0
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f02b fe47 	bl	80314a0 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fd29 	bl	8005270 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 800581e:	4603      	mov	r3, r0
 8005820:	bf00      	nop

}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b0ae      	sub	sp, #184	; 0xb8
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff81 	bl	8005744 <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	f107 0014 	add.w	r0, r7, #20
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f7ff fe5a 	bl	8005504 <process_impulse>
 8005850:	4603      	mov	r3, r0
}
 8005852:	4618      	mov	r0, r3
 8005854:	37b8      	adds	r7, #184	; 0xb8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN PTD */
static float features[] =
		{1885.3781, 2621.3143, 2386.2738, 2518.3997, 2431.9176, 2507.8625, 2450.8165, 2479.7419, 2471.9349, 2485.3773, 2485.0385, 2464.4878, 2462.8709, 2471.7998, 2449.6698, 2494.5335, 2502.9620, 2482.9162, 2443.3203, 2486.2656, 2501.7580, 2524.7427, 2582.2399, 2514.9058, 2504.5065, 2468.6755, 2531.2172, 2492.1379, 2498.8317, 2516.9022, 2509.2742, 2470.6026, 2505.1213, 2518.6949, 2517.4841, 2525.5654, 2525.3428, 2539.1571, 2519.6324, 2526.2584, 2532.2948, 2537.8981, 2538.9300, 2537.2832, 2537.9397, 2541.1048, 2549.9967, 2549.6641, 2543.8244, 2544.0925, 2553.2190, 2558.6315, 2574.2700, 2573.1071, 2576.4620, 2579.9821, 2583.3200, 2582.4430, 2583.0847, 2595.7684, 2593.8583, 2583.0942, 2596.8924, 2596.4298, 2595.4570, 2599.4650, 2607.0363, 2602.9226, 2597.1584, 2609.6130, 2610.7610, 2618.4764, 2616.3800, 2634.0363, 2624.7649, 2643.6454, 2602.9466, 2590.6834, 2645.9193, 2622.9725, 2644.2343, 2635.1112, 2643.3290, 2656.2478, 2629.9788, 2632.5185, 2657.0350, 2660.3200, 2665.7466, 2667.6980, 2659.2607, 2665.4041, 2675.1639, 2652.2617, 2662.8999, 2670.9071, 2674.2785, 2673.8920, 2681.8246, 2697.0081, 2659.9382, 2707.3006, 2688.7870, 2691.9612, 2686.7279, 2693.0771, 2723.1887, 2701.6300, 2801.5390, 2727.5602, 2743.9021, 2757.8082, 2676.2277, 2786.1303, 2747.5064, 2757.8284, 2765.4000, 2739.7069, 2718.7437, 2741.3288, 2756.3010, 2757.2683, 2749.5426, 2763.7727, 2763.3389, 2747.7314, 2762.4180, 2756.1463, 2759.9780, 2768.0674, 2768.3670, 2773.6812, 2787.2323, 2778.0325, 2775.2731, 2788.0689, 2808.8509, 2777.4630, 2779.4358, 2792.5648, 2791.1004, 2783.9042, 2812.7666, 2804.2394, 2806.4852, 2805.2805, 2807.8846, 2805.5331, 2800.4602, 2813.7637, 2834.1569, 2821.9152, 2816.5539, 2825.0999, 2828.6648, 2935.0022, 2911.8751, 2833.3216, 2989.1403, 2956.4398, 2768.0904, 2711.7631, 2900.1775, 2999.8835, 2748.6684, 2885.5814, 2822.3724, 2630.9776, 2832.8247, 2870.2828, 2874.2900, 2832.8064, 3048.8825, 2844.4920, 2699.4921, 2850.9678, 2958.7655, 2882.2669, 2601.5430, 2833.0584, 2736.4528, 2884.5141, 2926.8442, 2693.7215
		};
void vprint(const char *fmt, va_list argp)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b0b4      	sub	sp, #208	; 0xd0
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8005864:	f107 0308 	add.w	r3, r7, #8
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4618      	mov	r0, r3
 800586e:	f02c fa6d 	bl	8031d4c <vsiprintf>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	bfcc      	ite	gt
 8005878:	2301      	movgt	r3, #1
 800587a:	2300      	movle	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <_Z6vprintPKcSt9__va_list+0x34>
    {
       CDC_Transmit_FS(reinterpret_cast<uint8_t*>(string), sizeof(string)); // send message via UART
 8005882:	f107 0308 	add.w	r3, r7, #8
 8005886:	21c8      	movs	r1, #200	; 0xc8
 8005888:	4618      	mov	r0, r3
 800588a:	f028 fd01 	bl	802e290 <CDC_Transmit_FS>
    }
}
 800588e:	bf00      	nop
 8005890:	37d0      	adds	r7, #208	; 0xd0
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8005896:	b40f      	push	{r0, r1, r2, r3}
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	6938      	ldr	r0, [r7, #16]
 80058a8:	f7ff ffd7 	bl	800585a <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b6:	b004      	add	sp, #16
 80058b8:	4770      	bx	lr
	...

080058bc <_Z16get_feature_datajjPf>:
int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
	 memcpy(out_ptr, features + offset, length * sizeof(float));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a06      	ldr	r2, [pc, #24]	; (80058e8 <_Z16get_feature_datajjPf+0x2c>)
 80058ce:	1899      	adds	r1, r3, r2
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	461a      	mov	r2, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f02b fdba 	bl	8031450 <memcpy>
	 return 0;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	2000004c 	.word	0x2000004c

080058ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b0c8      	sub	sp, #288	; 0x120
 80058f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t maxym = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058f8:	f002 f82e 	bl	8007958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058fc:	f000 f89a 	bl	8005a34 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005900:	f7fb fcd8 	bl	80012b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005904:	f7fb fd54 	bl	80013b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005908:	f001 fd82 	bl	8007410 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800590c:	f028 fc02 	bl	802e114 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8005910:	f7fb fbb4 	bl	800107c <MX_ADC1_Init>
  MX_TIM2_Init();
 8005914:	f001 ff2c 	bl	8007770 <MX_TIM2_Init>
  MX_CRC_Init();
 8005918:	f7fb fc8a 	bl	8001230 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800591c:	2100      	movs	r1, #0
 800591e:	483d      	ldr	r0, [pc, #244]	; (8005a14 <main+0x128>)
 8005920:	f008 ff52 	bl	800e7c8 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8005924:	2100      	movs	r1, #0
 8005926:	483c      	ldr	r0, [pc, #240]	; (8005a18 <main+0x12c>)
 8005928:	f002 fbc6 	bl	80080b8 <HAL_ADCEx_Calibration_Start>
//	HAL_ADC_PollForConversion(&hadc1, 1);
//		// Read The ADC Conversion Result & Map It To PWM DutyCycle
//		maxym = HAL_ADC_GetValue(&hadc1);
//
//	}
	signal_t signal;
 800592c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fb3b 	bl	8003fac <_ZN2ei11ei_signal_tC1Ev>
	signal.total_length = sizeof(features) / sizeof(features[0]);
 8005936:	23b8      	movs	r3, #184	; 0xb8
 8005938:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	signal.get_data = &get_feature_data;
 800593c:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <main+0x130>)
 800593e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005942:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005946:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fa5b 	bl	8005e08 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
	ei_impulse_result_t result = { 0 };
 8005952:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005956:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800595a:	4618      	mov	r0, r3
 800595c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005960:	461a      	mov	r2, r3
 8005962:	2100      	movs	r1, #0
 8005964:	f02b fd9c 	bl	80314a0 <memset>
	EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8005968:	4639      	mov	r1, r7
 800596a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800596e:	2201      	movs	r2, #1
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff5a 	bl	800582a <run_classifier>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	ei_printf("run_classifier returned: %d\n", res);
 800597c:	f997 3119 	ldrsb.w	r3, [r7, #281]	; 0x119
 8005980:	4619      	mov	r1, r3
 8005982:	4827      	ldr	r0, [pc, #156]	; (8005a20 <main+0x134>)
 8005984:	f7ff ff87 	bl	8005896 <_Z9ei_printfPKcz>

	ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8005988:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800598c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005990:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005994:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005998:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800599c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80059a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80059a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059ac:	481d      	ldr	r0, [pc, #116]	; (8005a24 <main+0x138>)
 80059ae:	f7ff ff72 	bl	8005896 <_Z9ei_printfPKcz>
	  result.timing.dsp, result.timing.classification, result.timing.anomaly);

	// print the predictions
	ei_printf("[");
 80059b2:	481d      	ldr	r0, [pc, #116]	; (8005a28 <main+0x13c>)
 80059b4:	f7ff ff6f 	bl	8005896 <_Z9ei_printfPKcz>
	for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80059b8:	2300      	movs	r3, #0
 80059ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d81c      	bhi.n	8005a00 <main+0x114>
	  ei_printf_float(result.classification[ix].value);
 80059c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80059ca:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80059ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059d2:	3301      	adds	r3, #1
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4413      	add	r3, r2
 80059d8:	3304      	adds	r3, #4
 80059da:	edd3 7a00 	vldr	s15, [r3]
 80059de:	eeb0 0a67 	vmov.f32	s0, s15
 80059e2:	f020 ffc1 	bl	8026968 <_Z15ei_printf_floatf>
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
	  ei_printf(", ");
	#else
	  if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 80059e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d002      	beq.n	80059f4 <main+0x108>
		  ei_printf(", ");
 80059ee:	480f      	ldr	r0, [pc, #60]	; (8005a2c <main+0x140>)
 80059f0:	f7ff ff51 	bl	8005896 <_Z9ei_printfPKcz>
	for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80059f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059f8:	3301      	adds	r3, #1
 80059fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059fe:	e7de      	b.n	80059be <main+0xd2>
	#endif
	}
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
	ei_printf_float(result.anomaly);
	#endif
	ei_printf("]\n\n\n");
 8005a00:	480b      	ldr	r0, [pc, #44]	; (8005a30 <main+0x144>)
 8005a02:	f7ff ff48 	bl	8005896 <_Z9ei_printfPKcz>
	signal_t signal;
 8005a06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fadb 	bl	8003fc6 <_ZN2ei11ei_signal_tD1Ev>



//		CDC_Transmit_FS(reinterpret_cast<uint8_t*>(&maxym), 2*200);
  }
 8005a10:	e78c      	b.n	800592c <main+0x40>
 8005a12:	bf00      	nop
 8005a14:	2000088c 	.word	0x2000088c
 8005a18:	2000075c 	.word	0x2000075c
 8005a1c:	080058bd 	.word	0x080058bd
 8005a20:	0803342c 	.word	0x0803342c
 8005a24:	0803344c 	.word	0x0803344c
 8005a28:	08033494 	.word	0x08033494
 8005a2c:	08033498 	.word	0x08033498
 8005a30:	0803349c 	.word	0x0803349c

08005a34 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b09e      	sub	sp, #120	; 0x78
 8005a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a3e:	2228      	movs	r2, #40	; 0x28
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f02b fd2c 	bl	80314a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a58:	463b      	mov	r3, r7
 8005a5a:	223c      	movs	r2, #60	; 0x3c
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f02b fd1e 	bl	80314a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8005a64:	2303      	movs	r3, #3
 8005a66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a72:	2301      	movs	r3, #1
 8005a74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a76:	2310      	movs	r3, #16
 8005a78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a82:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005a84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005a88:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f006 fb7c 	bl	800c18c <HAL_RCC_OscConfig>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf14      	ite	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	2300      	moveq	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8005aa4:	f000 f838 	bl	8005b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005aa8:	230f      	movs	r3, #15
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005aac:	2302      	movs	r3, #2
 8005aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005aba:	2300      	movs	r3, #0
 8005abc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005abe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ac2:	2102      	movs	r1, #2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f007 fd15 	bl	800d4f4 <HAL_RCC_ClockConfig>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8005ada:	f000 f81d 	bl	8005b18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <_Z18SystemClock_Configv+0xe0>)
 8005ae0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8005ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005aec:	2300      	movs	r3, #0
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005af0:	463b      	mov	r3, r7
 8005af2:	4618      	mov	r0, r3
 8005af4:	f007 ff8a 	bl	800da0c <HAL_RCCEx_PeriphCLKConfig>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf14      	ite	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	2300      	moveq	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8005b08:	f000 f806 	bl	8005b18 <Error_Handler>
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	3778      	adds	r7, #120	; 0x78
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	000200a0 	.word	0x000200a0

08005b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b1c:	b672      	cpsid	i
}
 8005b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b20:	e7fe      	b.n	8005b20 <Error_Handler+0x8>

08005b22 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005b4e:	b5b0      	push	{r4, r5, r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b58:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fa fcfe 	bl	800055c <__aeabi_f2d>
 8005b60:	4604      	mov	r4, r0
 8005b62:	460d      	mov	r5, r1
 8005b64:	6838      	ldr	r0, [r7, #0]
 8005b66:	f7fa fce7 	bl	8000538 <__aeabi_i2d>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	ec43 2b11 	vmov	d1, r2, r3
 8005b72:	ec45 4b10 	vmov	d0, r4, r5
 8005b76:	f029 faf1 	bl	802f15c <pow>
 8005b7a:	eeb0 7a40 	vmov.f32	s14, s0
 8005b7e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005b82:	eeb0 0a47 	vmov.f32	s0, s14
 8005b86:	eef0 0a67 	vmov.f32	s1, s15
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bdb0      	pop	{r4, r5, r7, pc}

08005b90 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f9c3 	bl	8005f2e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8005bb2:	b590      	push	{r4, r7, lr}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8005bbe:	68fc      	ldr	r4, [r7, #12]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f9a9 	bl	8005f18 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff ffdf 	bl	8005b90 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd90      	pop	{r4, r7, pc}

08005bdc <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f9b7 	bl	8005f5a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8005bec:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9bc 	bl	8005f74 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	681c      	ldr	r4, [r3, #0]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f9c4 	bl	8005f8e <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8005c06:	4603      	mov	r3, r0
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	47a0      	blx	r4
	__ptr = pointer();
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
      }
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}

08005c1e <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	ed93 7a00 	vldr	s14, [r3]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	edd3 7a00 	vldr	s15, [r3]
 8005c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3c:	d501      	bpl.n	8005c42 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	e000      	b.n	8005c44 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8005c42:	687b      	ldr	r3, [r7, #4]
    }
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8005c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
 8005c5e:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fb fcd1 	bl	800160a <_ZNKSt14_Function_base8_M_emptyEv>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8005c6e:	f7fb fda1 	bl	80017b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68dc      	ldr	r4, [r3, #12]
 8005c76:	68fd      	ldr	r5, [r7, #12]
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f991 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005c82:	4606      	mov	r6, r0
 8005c84:	1d3b      	adds	r3, r7, #4
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f98c 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	463b      	mov	r3, r7
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f992 	bl	8005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005c96:	4603      	mov	r3, r0
 8005c98:	4642      	mov	r2, r8
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47a0      	blx	r4
 8005ca0:	4603      	mov	r3, r0
    }
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005cac <_ZNKSt8functionIFijjPfEEcvbEv>:
      explicit operator bool() const noexcept
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fb fca7 	bl	800160a <_ZNKSt14_Function_base8_M_emptyEv>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f083 0301 	eor.w	r3, r3, #1
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <_ZNSt6vectorImSaImEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f978 	bl	8005fd0 <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm>
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <_ZNSt6vectorImSaImEE9push_backEOm>:
      push_back(value_type&& __x)
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005cf2:	6838      	ldr	r0, [r7, #0]
 8005cf4:	f7ff ff20 	bl	8005b38 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f988 	bl	8006012 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9ab 	bl	800606e <_ZNSaImEC1Ev>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f9b3 	bl	8006086 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f9bb 	bl	80060ae <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f9b1 	bl	80060c4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fd ff29 	bl	8003bbc <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681c      	ldr	r4, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f9af 	bl	80060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005d8c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4629      	mov	r1, r5
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f9b4 	bl	8006100 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff ffd1 	bl	8005d42 <_ZNSt12_Vector_baseImSaImEED1Ev>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bdb0      	pop	{r4, r5, r7, pc}

08005daa <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	109b      	asrs	r3, r3, #2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <_ZNSt6vectorImSaImEE2atEj>:
      at(size_type __n)
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9a0 	bl	800611c <_ZNKSt6vectorImSaImEE14_M_range_checkEj>
	return (*this)[__n];
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9bc 	bl	800615c <_ZNSt6vectorImSaImEEixEj>
 8005de4:	4603      	mov	r3, r0
      }
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fb fbe5 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005e12:	6838      	ldr	r0, [r7, #0]
 8005e14:	f000 f9b2 	bl	800617c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f9b6 	bl	8006194 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8005e28:	f107 0308 	add.w	r3, r7, #8
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f851 	bl	8005ed6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe f8aa 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8005e3e:	687b      	ldr	r3, [r7, #4]
	}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZNSt8functionIFijjPfEEaSERKS2_>:
      operator=(const function& __x)
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f9c5 	bl	80061e8 <_ZNSt8functionIFijjPfEEC1ERKS2_>
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 f836 	bl	8005ed6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005e6a:	f107 0308 	add.w	r3, r7, #8
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe f88f 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
	return *this;
 8005e74:	687b      	ldr	r3, [r7, #4]
      }
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005e88:	6838      	ldr	r0, [r7, #0]
 8005e8a:	f000 f9cf 	bl	800622c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	6811      	ldr	r1, [r2, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f9d4 	bl	8006244 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8005e9c:	f107 0308 	add.w	r3, r7, #8
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f817 	bl	8005ed6 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005ea8:	f107 0308 	add.w	r3, r7, #8
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe f870 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8005eb2:	687b      	ldr	r3, [r7, #4]
	}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f9e6 	bl	8006298 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f9ef 	bl	80062ca <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f103 0208 	add.w	r2, r3, #8
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f000 fa18 	bl	800632e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f103 020c 	add.w	r2, r3, #12
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f000 fa39 	bl	8006382 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005f2e:	b590      	push	{r4, r7, lr}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005f3a:	68fc      	ldr	r4, [r7, #12]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa3f 	bl	80063c0 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005f42:	4602      	mov	r2, r0
 8005f44:	f107 0308 	add.w	r3, r7, #8
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 fa43 	bl	80063d6 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd90      	pop	{r4, r7, pc}

08005f5a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fa4f 	bl	8006408 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fa4f 	bl	8006422 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8005f84:	4603      	mov	r3, r0
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	109b      	asrs	r3, r3, #2
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00e      	beq.n	800600a <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f879 	bl	80060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005ff8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	6838      	ldr	r0, [r7, #0]
 8006000:	f000 f87e 	bl	8006100 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bd90      	pop	{r4, r7, pc}

08006012 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8006012:	b5b0      	push	{r4, r5, r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d011      	beq.n	800604c <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006028:	687c      	ldr	r4, [r7, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685d      	ldr	r5, [r3, #4]
 800602e:	6838      	ldr	r0, [r7, #0]
 8006030:	f000 fa04 	bl	800643c <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	4629      	mov	r1, r5
 800603a:	4620      	mov	r0, r4
 800603c:	f000 fa09 	bl	8006452 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	1d1a      	adds	r2, r3, #4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800604a:	e00c      	b.n	8006066 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa13 	bl	8006478 <_ZNSt6vectorImSaImEE3endEv>
 8006052:	4604      	mov	r4, r0
 8006054:	6838      	ldr	r0, [r7, #0]
 8006056:	f000 f9f1 	bl	800643c <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	4621      	mov	r1, r4
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fa31 	bl	80064c8 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bdb0      	pop	{r4, r5, r7, pc}

0800606e <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fae2 	bl	8006640 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	609a      	str	r2, [r3, #8]
	{ }
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <_ZN9__gnu_cxx13new_allocatorImED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
	if (__p)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 faba 	bl	8006656 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fab0 	bl	8006674 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <_ZNKSt6vectorImSaImEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fe3f 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 800612c:	4602      	mov	r2, r0
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	4293      	cmp	r3, r2
 8006132:	bf2c      	ite	cs
 8006134:	2301      	movcs	r3, #1
 8006136:	2300      	movcc	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fe33 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	4803      	ldr	r0, [pc, #12]	; (8006158 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x3c>)
 800614c:	f028 fccc 	bl	802eae8 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	080334c0 	.word	0x080334c0

0800615c <_ZNSt6vectorImSaImEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
      }
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fb fa11 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fa70 	bl	800668e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00f      	beq.n	80061d4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80061b4:	687c      	ldr	r4, [r7, #4]
 80061b6:	463b      	mov	r3, r7
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fa78 	bl	80066ae <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80061be:	4603      	mov	r3, r0
 80061c0:	4619      	mov	r1, r3
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 fa7e 	bl	80066c4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a05      	ldr	r2, [pc, #20]	; (80061e0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 80061cc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 80061d2:	609a      	str	r2, [r3, #8]
      }
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd90      	pop	{r4, r7, pc}
 80061de:	bf00      	nop
 80061e0:	080066e9 	.word	0x080066e9
 80061e4:	0800672b 	.word	0x0800672b

080061e8 <_ZNSt8functionIFijjPfEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fb f9e7 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80061fa:	6838      	ldr	r0, [r7, #0]
 80061fc:	f7ff fd56 	bl	8005cac <_ZNKSt8functionIFijjPfEEcvbEv>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <_ZNSt8functionIFijjPfEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	2202      	movs	r2, #2
 8006210:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	609a      	str	r2, [r3, #8]
    }
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006244:	b590      	push	{r4, r7, lr}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	f7fb f9b9 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006256:	463b      	mov	r3, r7
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fa85 	bl	8006768 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00f      	beq.n	8006284 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006264:	687c      	ldr	r4, [r7, #4]
 8006266:	463b      	mov	r3, r7
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fa88 	bl	800677e <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800626e:	4603      	mov	r3, r0
 8006270:	4619      	mov	r1, r3
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fa8e 	bl	8006794 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a05      	ldr	r2, [pc, #20]	; (8006290 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 800627c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a04      	ldr	r2, [pc, #16]	; (8006294 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8006282:	609a      	str	r2, [r3, #8]
      }
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	bd90      	pop	{r4, r7, pc}
 800628e:	bf00      	nop
 8006290:	080067b9 	.word	0x080067b9
 8006294:	080067fb 	.word	0x080067fb

08006298 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fac8 	bl	8006838 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 80062a8:	4603      	mov	r3, r0
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ffed 	bl	80062b4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80062da:	4602      	mov	r2, r0
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062e4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80062e8:	6838      	ldr	r0, [r7, #0]
 80062ea:	f7ff ffe3 	bl	80062b4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80062ee:	4602      	mov	r2, r0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062f6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80062fa:	f107 0308 	add.w	r3, r7, #8
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff ffd8 	bl	80062b4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006304:	4602      	mov	r2, r0
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800630c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ffed 	bl	8006318 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800633e:	4603      	mov	r3, r0
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006344:	6838      	ldr	r0, [r7, #0]
 8006346:	f7ff ffe7 	bl	8006318 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800634a:	4603      	mov	r3, r0
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006352:	f107 030c 	add.w	r3, r7, #12
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff ffde 	bl	8006318 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800635c:	4603      	mov	r3, r0
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	601a      	str	r2, [r3, #0]
    }
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff ffed 	bl	800636c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006392:	4603      	mov	r3, r0
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006398:	6838      	ldr	r0, [r7, #0]
 800639a:	f7ff ffe7 	bl	800636c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800639e:	4603      	mov	r3, r0
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff ffde 	bl	800636c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80063b0:	4603      	mov	r3, r0
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	601a      	str	r2, [r3, #0]
    }
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 80063d6:	b5b0      	push	{r4, r5, r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80063e2:	68fc      	ldr	r4, [r7, #12]
 80063e4:	68b8      	ldr	r0, [r7, #8]
 80063e6:	f000 fa34 	bl	8006852 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80063ea:	4605      	mov	r5, r0
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ffe7 	bl	80063c0 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4629      	mov	r1, r5
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 fa35 	bl	8006868 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bdb0      	pop	{r4, r5, r7, pc}

08006408 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fa46 	bl	80068a4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006418:	4603      	mov	r3, r0
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fa45 	bl	80068bc <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8006432:	4603      	mov	r3, r0
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff ffec 	bl	800643c <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8006464:	4603      	mov	r3, r0
 8006466:	461a      	mov	r2, r3
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fa5b 	bl	8006926 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>
	}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1d1a      	adds	r2, r3, #4
 8006484:	f107 030c 	add.w	r3, r7, #12
 8006488:	4611      	mov	r1, r2
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fa61 	bl	8006952 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <_ZNSt6vectorImSaImEE15_S_use_relocateEv>:
      _S_use_relocate()
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 f805 	bl	80064b0 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80064a6:	4603      	mov	r3, r0
      }
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80064b8:	2301      	movs	r3, #1
      }
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80064c8:	b5b0      	push	{r4, r5, r7, lr}
 80064ca:	b08c      	sub	sp, #48	; 0x30
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80064d4:	4a59      	ldr	r2, [pc, #356]	; (800663c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x174>)
 80064d6:	2101      	movs	r1, #1
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fa4a 	bl	8006972 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 80064de:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fa87 	bl	8006a00 <_ZNSt6vectorImSaImEE5beginEv>
 80064f2:	4603      	mov	r3, r0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	f107 0214 	add.w	r2, r7, #20
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fa8d 	bl	8006a20 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8006506:	4603      	mov	r3, r0
 8006508:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa9b 	bl	8006a4a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8006514:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800651a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	18d5      	adds	r5, r2, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ff89 	bl	800643c <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	4629      	mov	r1, r5
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff ff8e 	bl	8006452 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006536:	2300      	movs	r3, #0
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800653a:	f7ff ffae 	bl	800649a <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d027      	beq.n	8006594 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006544:	f107 0308 	add.w	r3, r7, #8
 8006548:	4618      	mov	r0, r3
 800654a:	f000 faa6 	bl	8006a9a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 800654e:	4603      	mov	r3, r0
 8006550:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fdc8 	bl	80060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800655a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4621      	mov	r1, r4
 8006560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006562:	f000 fa86 	bl	8006a72 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8006566:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	3304      	adds	r3, #4
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800656e:	f107 0308 	add.w	r3, r7, #8
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fa91 	bl	8006a9a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006578:	4603      	mov	r3, r0
 800657a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fdb3 	bl	80060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006584:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006588:	6a39      	ldr	r1, [r7, #32]
 800658a:	4620      	mov	r0, r4
 800658c:	f000 fa71 	bl	8006a72 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8006590:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006592:	e026      	b.n	80065e2 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006594:	f107 0308 	add.w	r3, r7, #8
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fa7e 	bl	8006a9a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 800659e:	4603      	mov	r3, r0
 80065a0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fda0 	bl	80060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80065aa:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	4621      	mov	r1, r4
 80065b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065b2:	f000 fa7d 	bl	8006ab0 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 80065b6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	3304      	adds	r3, #4
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80065be:	f107 0308 	add.w	r3, r7, #8
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fa69 	bl	8006a9a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80065c8:	4603      	mov	r3, r0
 80065ca:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fd8b 	bl	80060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80065d4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80065d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d8:	6a39      	ldr	r1, [r7, #32]
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fa68 	bl	8006ab0 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 80065e0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80065e2:	f7ff ff5a 	bl	800649a <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f083 0301 	eor.w	r3, r3, #1
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fd78 	bl	80060ea <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	6a39      	ldr	r1, [r7, #32]
 8006600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006602:	f7ff fd7d 	bl	8006100 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006606:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006612:	461a      	mov	r2, r3
 8006614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006616:	f7ff fd55 	bl	80060c4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006624:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	441a      	add	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	609a      	str	r2, [r3, #8]
    }
 8006632:	bf00      	nop
 8006634:	3730      	adds	r7, #48	; 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bdb0      	pop	{r4, r5, r7, pc}
 800663a:	bf00      	nop
 800663c:	080334a4 	.word	0x080334a4

08006640 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fa3b 	bl	8006ae2 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fa3e 	bl	8006b02 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf14      	ite	ne
 800669c:	2301      	movne	r3, #1
 800669e:	2300      	moveq	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80066ce:	6838      	ldr	r0, [r7, #0]
 80066d0:	f7ff ffed 	bl	80066ae <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80066d4:	4603      	mov	r3, r0
 80066d6:	4622      	mov	r2, r4
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa1c 	bl	8006b18 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd90      	pop	{r4, r7, pc}

080066e8 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fa27 	bl	8006b4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80066fc:	4604      	mov	r4, r0
 80066fe:	68b8      	ldr	r0, [r7, #8]
 8006700:	f7ff fc50 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006704:	4605      	mov	r5, r0
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff fc4c 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800670c:	4606      	mov	r6, r0
 800670e:	6838      	ldr	r0, [r7, #0]
 8006710:	f7ff fc53 	bl	8005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006714:	4603      	mov	r3, r0
 8006716:	4632      	mov	r2, r6
 8006718:	4629      	mov	r1, r5
 800671a:	4620      	mov	r0, r4
 800671c:	f000 fa26 	bl	8006b6c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8006720:	4603      	mov	r3, r0
      }
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800672a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800672a:	b590      	push	{r4, r7, lr}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	4613      	mov	r3, r2
 8006736:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d109      	bne.n	8006752 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fa39 	bl	8006bb6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8006744:	4604      	mov	r4, r0
 8006746:	68b8      	ldr	r0, [r7, #8]
 8006748:	f000 f9ff 	bl	8006b4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800674c:	4603      	mov	r3, r0
 800674e:	6023      	str	r3, [r4, #0]
	    break;
 8006750:	e005      	b.n	800675e <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	461a      	mov	r2, r3
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fa38 	bl	8006bce <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800675e:	2300      	movs	r3, #0
      }
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bd90      	pop	{r4, r7, pc}

08006768 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8006770:	2301      	movs	r3, #1
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006794:	b590      	push	{r4, r7, lr}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800679e:	6838      	ldr	r0, [r7, #0]
 80067a0:	f7ff ffed 	bl	800677e <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80067a4:	4603      	mov	r3, r0
 80067a6:	4622      	mov	r2, r4
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa3a 	bl	8006c24 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd90      	pop	{r4, r7, pc}

080067b8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80067b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fa45 	bl	8006c56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80067cc:	4604      	mov	r4, r0
 80067ce:	68b8      	ldr	r0, [r7, #8]
 80067d0:	f7ff fbe8 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80067d4:	4605      	mov	r5, r0
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fbe4 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80067dc:	4606      	mov	r6, r0
 80067de:	6838      	ldr	r0, [r7, #0]
 80067e0:	f7ff fbeb 	bl	8005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80067e4:	4603      	mov	r3, r0
 80067e6:	4632      	mov	r2, r6
 80067e8:	4629      	mov	r1, r5
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 fa44 	bl	8006c78 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 80067f0:	4603      	mov	r3, r0
      }
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067fa <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80067fa:	b590      	push	{r4, r7, lr}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	4613      	mov	r3, r2
 8006806:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d109      	bne.n	8006822 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 fa57 	bl	8006cc2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8006814:	4604      	mov	r4, r0
 8006816:	68b8      	ldr	r0, [r7, #8]
 8006818:	f000 fa1d 	bl	8006c56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800681c:	4603      	mov	r3, r0
 800681e:	6023      	str	r3, [r4, #0]
	    break;
 8006820:	e005      	b.n	800682e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	461a      	mov	r2, r3
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fa56 	bl	8006cda <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800682e:	2300      	movs	r3, #0
      }
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	bd90      	pop	{r4, r7, pc}

08006838 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fa74 	bl	8006d30 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006848:	4603      	mov	r3, r0
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8006874:	68fc      	ldr	r4, [r7, #12]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff fda2 	bl	80063c0 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800687c:	4603      	mov	r3, r0
 800687e:	4619      	mov	r1, r3
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fa61 	bl	8006d48 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1d1c      	adds	r4, r3, #4
 800688a:	68b8      	ldr	r0, [r7, #8]
 800688c:	f7ff ffe1 	bl	8006852 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006890:	4603      	mov	r3, r0
 8006892:	4619      	mov	r1, r3
 8006894:	4620      	mov	r0, r4
 8006896:	f000 fa6a 	bl	8006d6e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd90      	pop	{r4, r7, pc}

080068a4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa6f 	bl	8006d90 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fa70 	bl	8006dac <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80068cc:	4603      	mov	r3, r0
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d201      	bcs.n	80068f0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	e000      	b.n	80068f2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80068f0:	687b      	ldr	r3, [r7, #4]
    }
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d201      	bcs.n	8006918 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	e000      	b.n	800691a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006918:	687b      	ldr	r3, [r7, #4]
    }
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006926:	b590      	push	{r4, r7, lr}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff fd82 	bl	800643c <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8006938:	4603      	mov	r3, r0
 800693a:	681c      	ldr	r4, [r3, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4619      	mov	r1, r3
 8006940:	2004      	movs	r0, #4
 8006942:	f7fa fdb9 	bl	80014b8 <_ZnwjPv>
 8006946:	4603      	mov	r3, r0
 8006948:	601c      	str	r4, [r3, #0]
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	bd90      	pop	{r4, r7, pc}

08006952 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006972:	b590      	push	{r4, r7, lr}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fa20 	bl	8006dc4 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006984:	4604      	mov	r4, r0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fa0f 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 800698c:	4603      	mov	r3, r0
 800698e:	1ae2      	subs	r2, r4, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	bf34      	ite	cc
 8006996:	2301      	movcc	r3, #1
 8006998:	2300      	movcs	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f028 f89e 	bl	802eae2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff f9ff 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 80069ac:	4604      	mov	r4, r0
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff f9fb 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 80069b4:	4603      	mov	r3, r0
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	f107 0208 	add.w	r2, r7, #8
 80069bc:	f107 0310 	add.w	r3, r7, #16
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff ff87 	bl	80068d6 <_ZSt3maxIjERKT_S2_S2_>
 80069c8:	4603      	mov	r3, r0
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4423      	add	r3, r4
 80069ce:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff f9ea 	bl	8005daa <_ZNKSt6vectorImSaImEE4sizeEv>
 80069d6:	4602      	mov	r2, r0
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4293      	cmp	r3, r2
 80069dc:	d306      	bcc.n	80069ec <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f9f0 	bl	8006dc4 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 80069e4:	4602      	mov	r2, r0
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d904      	bls.n	80069f6 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f9e9 	bl	8006dc4 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 80069f2:	4603      	mov	r3, r0
 80069f4:	e000      	b.n	80069f8 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 80069f6:	697b      	ldr	r3, [r7, #20]
      }
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd90      	pop	{r4, r7, pc}

08006a00 <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	4611      	mov	r1, r2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff9e 	bl	8006952 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f835 	bl	8006a9a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006a30:	4603      	mov	r3, r0
 8006a32:	681c      	ldr	r4, [r3, #0]
 8006a34:	6838      	ldr	r0, [r7, #0]
 8006a36:	f000 f830 	bl	8006a9a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	1ae3      	subs	r3, r4, r3
 8006a40:	109b      	asrs	r3, r3, #2
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd90      	pop	{r4, r7, pc}

08006a4a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f9c1 	bl	8006de6 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8006a64:	4603      	mov	r3, r0
 8006a66:	e000      	b.n	8006a6a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8006a68:	2300      	movs	r3, #0
      }
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006a72:	b590      	push	{r4, r7, lr}
 8006a74:	b087      	sub	sp, #28
 8006a76:	af02      	add	r7, sp, #8
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006a80:	f88d 4000 	strb.w	r4, [sp]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f9ba 	bl	8006e04 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 8006a90:	4603      	mov	r3, r0
      }
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd90      	pop	{r4, r7, pc}

08006a9a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f9b2 	bl	8006e28 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	68b8      	ldr	r0, [r7, #8]
 8006ac8:	f000 f9ae 	bl	8006e28 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006acc:	4601      	mov	r1, r0
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f9b7 	bl	8006e46 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
 8006ad8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd90      	pop	{r4, r7, pc}

08006ae2 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4619      	mov	r1, r3
 8006af4:	68b8      	ldr	r0, [r7, #8]
 8006af6:	f027 ffd7 	bl	802eaa8 <_ZdlPvj>
      }
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006b18:	b590      	push	{r4, r7, lr}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006b24:	68b8      	ldr	r0, [r7, #8]
 8006b26:	f7ff fdc2 	bl	80066ae <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	681c      	ldr	r4, [r3, #0]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7fa fd34 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006b34:	4603      	mov	r3, r0
 8006b36:	4619      	mov	r1, r3
 8006b38:	2004      	movs	r0, #4
 8006b3a:	f7fa fcbd 	bl	80014b8 <_ZnwjPv>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	601c      	str	r4, [r3, #0]
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd90      	pop	{r4, r7, pc}

08006b4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f988 	bl	8006e68 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006b58:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f990 	bl	8006e80 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8006b60:	4603      	mov	r3, r0
 8006b62:	bf00      	nop
	}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af02      	add	r7, sp, #8
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f98a 	bl	8006e96 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006b82:	4604      	mov	r4, r0
 8006b84:	68b8      	ldr	r0, [r7, #8]
 8006b86:	f7ff fa0d 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fa09 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006b92:	4606      	mov	r6, r0
 8006b94:	6838      	ldr	r0, [r7, #0]
 8006b96:	f7ff fa10 	bl	8005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4633      	mov	r3, r6
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	f000 f981 	bl	8006eac <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8006baa:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006bb6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fa fcec 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006bce:	b5b0      	push	{r4, r5, r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d016      	beq.n	8006c10 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	dc19      	bgt.n	8006c1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d002      	beq.n	8006bf0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d00a      	beq.n	8006c04 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8006bee:	e014      	b.n	8006c1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff ffe0 	bl	8006bb6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	68b8      	ldr	r0, [r7, #8]
 8006bfa:	f7ff ffa6 	bl	8006b4a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6023      	str	r3, [r4, #0]
	      break;
 8006c02:	e00a      	b.n	8006c1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006c04:	462a      	mov	r2, r5
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f973 	bl	8006ef4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8006c0e:	e004      	b.n	8006c1a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006c10:	4621      	mov	r1, r4
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f987 	bl	8006f26 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006c18:	bf00      	nop
	  return false;
 8006c1a:	2300      	movs	r3, #0
	}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bdb0      	pop	{r4, r5, r7, pc}

08006c24 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006c24:	b590      	push	{r4, r7, lr}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f7ff fda4 	bl	800677e <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006c36:	4604      	mov	r4, r0
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7fa fcaf 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	4619      	mov	r1, r3
 8006c42:	2004      	movs	r0, #4
 8006c44:	f7fa fc38 	bl	80014b8 <_ZnwjPv>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd90      	pop	{r4, r7, pc}

08006c56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f96d 	bl	8006f3e <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8006c64:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f975 	bl	8006f56 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	bf00      	nop
	}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	b086      	sub	sp, #24
 8006c7e:	af02      	add	r7, sp, #8
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f96f 	bl	8006f6c <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8006c8e:	4604      	mov	r4, r0
 8006c90:	68b8      	ldr	r0, [r7, #8]
 8006c92:	f7ff f987 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006c96:	4605      	mov	r5, r0
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff f983 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	6838      	ldr	r0, [r7, #0]
 8006ca2:	f7ff f98a 	bl	8005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	4633      	mov	r3, r6
 8006cac:	462a      	mov	r2, r5
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	f000 f966 	bl	8006f82 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8006cb6:	4603      	mov	r3, r0
    }
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006cc2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fa fc66 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006cda:	b5b0      	push	{r4, r5, r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d016      	beq.n	8006d1c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	dc19      	bgt.n	8006d26 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d002      	beq.n	8006cfc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d00a      	beq.n	8006d10 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8006cfa:	e014      	b.n	8006d26 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff ffe0 	bl	8006cc2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8006d02:	4604      	mov	r4, r0
 8006d04:	68b8      	ldr	r0, [r7, #8]
 8006d06:	f7ff ffa6 	bl	8006c56 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6023      	str	r3, [r4, #0]
	      break;
 8006d0e:	e00a      	b.n	8006d26 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006d10:	462a      	mov	r2, r5
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f958 	bl	8006fca <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8006d1a:	e004      	b.n	8006d26 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 f96c 	bl	8006ffc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006d24:	bf00      	nop
	  return false;
 8006d26:	2300      	movs	r3, #0
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bdb0      	pop	{r4, r5, r7, pc}

08006d30 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f96b 	bl	8007014 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8006d52:	687c      	ldr	r4, [r7, #4]
 8006d54:	6838      	ldr	r0, [r7, #0]
 8006d56:	f7ff fb33 	bl	80063c0 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 f966 	bl	8007030 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd90      	pop	{r4, r7, pc}

08006d6e <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f7ff fd6a 	bl	8006852 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f958 	bl	8007052 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8006da2:	4603      	mov	r3, r0
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f957 	bl	8007068 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f971 	bl	80070b6 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f953 	bl	8007082 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006df0:	2200      	movs	r2, #0
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f969 	bl	80070cc <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f975 	bl	8007108 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006e1e:	4603      	mov	r3, r0
      }
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006e30:	f107 030c 	add.w	r3, r7, #12
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f983 	bl	8007142 <_ZNSt13move_iteratorIPmEC1ES0_>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
 8006e52:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f984 	bl	8007166 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fa fb9e 	bl	80015b2 <_ZNKSt9_Any_data9_M_accessEv>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	7338      	strb	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	f7ff ffeb 	bl	8006e96 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	681c      	ldr	r4, [r3, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff f86d 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	681d      	ldr	r5, [r3, #0]
 8006ece:	6838      	ldr	r0, [r7, #0]
 8006ed0:	f7ff f868 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	681e      	ldr	r6, [r3, #0]
 8006ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eda:	f7ff f86e 	bl	8005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47a0      	blx	r4
 8006eea:	4603      	mov	r3, r0
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ef4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006f00:	68b8      	ldr	r0, [r7, #8]
 8006f02:	f7ff ffb1 	bl	8006e68 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006f06:	4603      	mov	r3, r0
 8006f08:	681c      	ldr	r4, [r3, #0]
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7fa fb46 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006f10:	4603      	mov	r3, r0
 8006f12:	4619      	mov	r1, r3
 8006f14:	2004      	movs	r0, #4
 8006f16:	f7fa facf 	bl	80014b8 <_ZnwjPv>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	601c      	str	r4, [r3, #0]
	}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd90      	pop	{r4, r7, pc}

08006f26 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f92a 	bl	800718a <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fa fb33 	bl	80015b2 <_ZNKSt9_Any_data9_M_accessEv>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	7338      	strb	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006f90:	68b8      	ldr	r0, [r7, #8]
 8006f92:	f7ff ffeb 	bl	8006f6c <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8006f96:	4606      	mov	r6, r0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff f803 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	681c      	ldr	r4, [r3, #0]
 8006fa2:	6838      	ldr	r0, [r7, #0]
 8006fa4:	f7fe fffe 	bl	8005fa4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	681d      	ldr	r5, [r3, #0]
 8006fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fae:	f7ff f804 	bl	8005fba <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7fd fcd7 	bl	800496e <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fca <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006fca:	b590      	push	{r4, r7, lr}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006fd6:	68b8      	ldr	r0, [r7, #8]
 8006fd8:	f7ff ffb1 	bl	8006f3e <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7fa fadc 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	2004      	movs	r0, #4
 8006fea:	f7fa fa65 	bl	80014b8 <_ZnwjPv>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	6013      	str	r3, [r2, #0]
	}
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd90      	pop	{r4, r7, pc}

08006ffc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f8cb 	bl	80071a2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	4618      	mov	r0, r3
 8007022:	f000 f8ca 	bl	80071ba <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8007026:	4603      	mov	r3, r0
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800703a:	6838      	ldr	r0, [r7, #0]
 800703c:	f7ff f9c0 	bl	80063c0 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007040:	4603      	mov	r3, r0
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f8ac 	bl	80071d0 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8007078:	4603      	mov	r3, r0
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800708a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800708e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8a8 	bl	80071e6 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 8007096:	4603      	mov	r3, r0
 8007098:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800709a:	f107 0208 	add.w	r2, r7, #8
 800709e:	f107 030c 	add.w	r3, r7, #12
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff fc2a 	bl	80068fe <_ZSt3minIjERKT_S2_S2_>
 80070aa:	4603      	mov	r3, r0
 80070ac:	681b      	ldr	r3, [r3, #0]
      }
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f890 	bl	80071fe <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 80070de:	4602      	mov	r2, r0
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4293      	cmp	r3, r2
 80070e4:	bf8c      	ite	hi
 80070e6:	2301      	movhi	r3, #1
 80070e8:	2300      	movls	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80070f0:	f027 fcf1 	bl	802ead6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f027 fcd9 	bl	802eab0 <_Znwj>
 80070fe:	4603      	mov	r3, r0
      }
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007108:	b5b0      	push	{r4, r5, r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f87d 	bl	8007216 <_ZSt12__niter_baseIPmET_S1_>
 800711c:	4604      	mov	r4, r0
 800711e:	68b8      	ldr	r0, [r7, #8]
 8007120:	f000 f879 	bl	8007216 <_ZSt12__niter_baseIPmET_S1_>
 8007124:	4605      	mov	r5, r0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f875 	bl	8007216 <_ZSt12__niter_baseIPmET_S1_>
 800712c:	4602      	mov	r2, r0
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	4629      	mov	r1, r5
 8007132:	4620      	mov	r0, r4
 8007134:	f000 f87a 	bl	800722c <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8007138:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bdb0      	pop	{r4, r5, r7, pc}

08007142 <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800714c:	463b      	mov	r3, r7
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f88a 	bl	8007268 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>
 8007154:	4603      	mov	r3, r0
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007166:	b580      	push	{r7, lr}
 8007168:	b086      	sub	sp, #24
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007172:	2301      	movs	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f87f 	bl	800727e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
 8007180:	4603      	mov	r3, r0
    }
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fa fa02 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8007198:	4603      	mov	r3, r0
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fa f9f6 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f855 	bl	800729e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 80071f4:	4603      	mov	r3, r0
      }
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007206:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <_ZSt12__niter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	109b      	asrs	r3, r3, #2
 8007242:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b00      	cmp	r3, #0
 8007248:	dd06      	ble.n	8007258 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	461a      	mov	r2, r3
 8007250:	68f9      	ldr	r1, [r7, #12]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f02a f90a 	bl	803146c <memmove>
      return __result + __count;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4413      	add	r3, r2
    }
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f811 	bl	80072b6 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8007294:	4603      	mov	r3, r0
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff ffa9 	bl	80071fe <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80072b6:	b590      	push	{r4, r7, lr}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f80f 	bl	80072e6 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80072c8:	4604      	mov	r4, r0
 80072ca:	68b8      	ldr	r0, [r7, #8]
 80072cc:	f000 f80b 	bl	80072e6 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80072d0:	4603      	mov	r3, r0
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4619      	mov	r1, r3
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f816 	bl	8007308 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
 80072dc:	4603      	mov	r3, r0
    }
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd90      	pop	{r4, r7, pc}

080072e6 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80072ee:	1d3b      	adds	r3, r7, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 f82c 	bl	800734e <_ZNKSt13move_iteratorIPmE4baseEv>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 f834 	bl	8007366 <_ZSt12__miter_baseIPmET_S1_>
 80072fe:	4603      	mov	r3, r0
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007308:	b5b0      	push	{r4, r5, r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ff7e 	bl	8007216 <_ZSt12__niter_baseIPmET_S1_>
 800731a:	4604      	mov	r4, r0
 800731c:	68b8      	ldr	r0, [r7, #8]
 800731e:	f7ff ff7a 	bl	8007216 <_ZSt12__niter_baseIPmET_S1_>
 8007322:	4605      	mov	r5, r0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff ff75 	bl	8007216 <_ZSt12__niter_baseIPmET_S1_>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	4629      	mov	r1, r5
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f822 	bl	800737c <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>
 8007338:	4602      	mov	r2, r0
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f82c 	bl	800739c <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 8007344:	4603      	mov	r3, r0
    }
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bdb0      	pop	{r4, r5, r7, pc}

0800734e <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <_ZSt12__miter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f811 	bl	80073b4 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
 8007392:	4603      	mov	r3, r0
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
    { return __res; }
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f805 	bl	80073d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 80073ca:	4603      	mov	r3, r0
    }
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	109b      	asrs	r3, r3, #2
 80073e8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d006      	beq.n	80073fe <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	461a      	mov	r2, r3
 80073f6:	68f9      	ldr	r1, [r7, #12]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f02a f837 	bl	803146c <memmove>
	  return __result + _Num;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4413      	add	r3, r2
	}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <MX_SPI1_Init+0x74>)
 8007416:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <MX_SPI1_Init+0x78>)
 8007418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800741a:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <MX_SPI1_Init+0x74>)
 800741c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007422:	4b18      	ldr	r3, [pc, #96]	; (8007484 <MX_SPI1_Init+0x74>)
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8007428:	4b16      	ldr	r3, [pc, #88]	; (8007484 <MX_SPI1_Init+0x74>)
 800742a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800742e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007430:	4b14      	ldr	r3, [pc, #80]	; (8007484 <MX_SPI1_Init+0x74>)
 8007432:	2200      	movs	r2, #0
 8007434:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <MX_SPI1_Init+0x74>)
 8007438:	2200      	movs	r2, #0
 800743a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <MX_SPI1_Init+0x74>)
 800743e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007442:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <MX_SPI1_Init+0x74>)
 8007446:	2208      	movs	r2, #8
 8007448:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800744a:	4b0e      	ldr	r3, [pc, #56]	; (8007484 <MX_SPI1_Init+0x74>)
 800744c:	2200      	movs	r2, #0
 800744e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <MX_SPI1_Init+0x74>)
 8007452:	2200      	movs	r2, #0
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007456:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <MX_SPI1_Init+0x74>)
 8007458:	2200      	movs	r2, #0
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <MX_SPI1_Init+0x74>)
 800745e:	2207      	movs	r2, #7
 8007460:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007462:	4b08      	ldr	r3, [pc, #32]	; (8007484 <MX_SPI1_Init+0x74>)
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <MX_SPI1_Init+0x74>)
 800746a:	2208      	movs	r2, #8
 800746c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800746e:	4805      	ldr	r0, [pc, #20]	; (8007484 <MX_SPI1_Init+0x74>)
 8007470:	f006 fdf2 	bl	800e058 <HAL_SPI_Init>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800747a:	f7fe fb4d 	bl	8005b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800747e:	bf00      	nop
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000824 	.word	0x20000824
 8007488:	40013000 	.word	0x40013000

0800748c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007494:	f107 0314 	add.w	r3, r7, #20
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	605a      	str	r2, [r3, #4]
 800749e:	609a      	str	r2, [r3, #8]
 80074a0:	60da      	str	r2, [r3, #12]
 80074a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a17      	ldr	r2, [pc, #92]	; (8007508 <HAL_SPI_MspInit+0x7c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d128      	bne.n	8007500 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80074ae:	4b17      	ldr	r3, [pc, #92]	; (800750c <HAL_SPI_MspInit+0x80>)
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	4a16      	ldr	r2, [pc, #88]	; (800750c <HAL_SPI_MspInit+0x80>)
 80074b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074b8:	6193      	str	r3, [r2, #24]
 80074ba:	4b14      	ldr	r3, [pc, #80]	; (800750c <HAL_SPI_MspInit+0x80>)
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c2:	613b      	str	r3, [r7, #16]
 80074c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c6:	4b11      	ldr	r3, [pc, #68]	; (800750c <HAL_SPI_MspInit+0x80>)
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	4a10      	ldr	r2, [pc, #64]	; (800750c <HAL_SPI_MspInit+0x80>)
 80074cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d0:	6153      	str	r3, [r2, #20]
 80074d2:	4b0e      	ldr	r3, [pc, #56]	; (800750c <HAL_SPI_MspInit+0x80>)
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80074de:	23e0      	movs	r3, #224	; 0xe0
 80074e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e2:	2302      	movs	r3, #2
 80074e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074ea:	2303      	movs	r3, #3
 80074ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80074ee:	2305      	movs	r3, #5
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f2:	f107 0314 	add.w	r3, r7, #20
 80074f6:	4619      	mov	r1, r3
 80074f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074fc:	f002 fcf2 	bl	8009ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007500:	bf00      	nop
 8007502:	3728      	adds	r7, #40	; 0x28
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	40013000 	.word	0x40013000
 800750c:	40021000 	.word	0x40021000

08007510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <HAL_MspInit+0x44>)
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <HAL_MspInit+0x44>)
 800751c:	f043 0301 	orr.w	r3, r3, #1
 8007520:	6193      	str	r3, [r2, #24]
 8007522:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <HAL_MspInit+0x44>)
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <HAL_MspInit+0x44>)
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	4a08      	ldr	r2, [pc, #32]	; (8007554 <HAL_MspInit+0x44>)
 8007534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007538:	61d3      	str	r3, [r2, #28]
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <HAL_MspInit+0x44>)
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007546:	2007      	movs	r0, #7
 8007548:	f002 fb0c 	bl	8009b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40021000 	.word	0x40021000

08007558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800755c:	e7fe      	b.n	800755c <NMI_Handler+0x4>

0800755e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800755e:	b480      	push	{r7}
 8007560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007562:	e7fe      	b.n	8007562 <HardFault_Handler+0x4>

08007564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007568:	e7fe      	b.n	8007568 <MemManage_Handler+0x4>

0800756a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800756a:	b480      	push	{r7}
 800756c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800756e:	e7fe      	b.n	800756e <BusFault_Handler+0x4>

08007570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007574:	e7fe      	b.n	8007574 <UsageFault_Handler+0x4>

08007576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007576:	b480      	push	{r7}
 8007578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800757a:	bf00      	nop
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007588:	bf00      	nop
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007592:	b480      	push	{r7}
 8007594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007596:	bf00      	nop
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80075a4:	f000 fa1e 	bl	80079e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075a8:	bf00      	nop
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80075b0:	4802      	ldr	r0, [pc, #8]	; (80075bc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80075b2:	f003 fa03 	bl	800a9bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80075b6:	bf00      	nop
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20001f48 	.word	0x20001f48

080075c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
	return 1;
 80075c4:	2301      	movs	r3, #1
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <_kill>:

int _kill(int pid, int sig)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80075da:	f029 fee9 	bl	80313b0 <__errno>
 80075de:	4603      	mov	r3, r0
 80075e0:	2216      	movs	r2, #22
 80075e2:	601a      	str	r2, [r3, #0]
	return -1;
 80075e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <_exit>:

void _exit (int status)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80075f8:	f04f 31ff 	mov.w	r1, #4294967295
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ffe7 	bl	80075d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007602:	e7fe      	b.n	8007602 <_exit+0x12>

08007604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	e00a      	b.n	800762c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007616:	f3af 8000 	nop.w
 800761a:	4601      	mov	r1, r0
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	60ba      	str	r2, [r7, #8]
 8007622:	b2ca      	uxtb	r2, r1
 8007624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	3301      	adds	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	dbf0      	blt.n	8007616 <_read+0x12>
	}

return len;
 8007634:	687b      	ldr	r3, [r7, #4]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e009      	b.n	8007664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	60ba      	str	r2, [r7, #8]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	3301      	adds	r3, #1
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	dbf1      	blt.n	8007650 <_write+0x12>
	}
	return len;
 800766c:	687b      	ldr	r3, [r7, #4]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <_close>:

int _close(int file)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
	return -1;
 800767e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800769e:	605a      	str	r2, [r3, #4]
	return 0;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <_isatty>:

int _isatty(int file)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
	return 1;
 80076b6:	2301      	movs	r3, #1
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
	return 0;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <_sbrk+0x5c>)
 80076ea:	4b15      	ldr	r3, [pc, #84]	; (8007740 <_sbrk+0x60>)
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076f4:	4b13      	ldr	r3, [pc, #76]	; (8007744 <_sbrk+0x64>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076fc:	4b11      	ldr	r3, [pc, #68]	; (8007744 <_sbrk+0x64>)
 80076fe:	4a12      	ldr	r2, [pc, #72]	; (8007748 <_sbrk+0x68>)
 8007700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <_sbrk+0x64>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4413      	add	r3, r2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	429a      	cmp	r2, r3
 800770e:	d207      	bcs.n	8007720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007710:	f029 fe4e 	bl	80313b0 <__errno>
 8007714:	4603      	mov	r3, r0
 8007716:	220c      	movs	r2, #12
 8007718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	e009      	b.n	8007734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <_sbrk+0x64>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007726:	4b07      	ldr	r3, [pc, #28]	; (8007744 <_sbrk+0x64>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4413      	add	r3, r2
 800772e:	4a05      	ldr	r2, [pc, #20]	; (8007744 <_sbrk+0x64>)
 8007730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	2000a000 	.word	0x2000a000
 8007740:	00000400 	.word	0x00000400
 8007744:	20000888 	.word	0x20000888
 8007748:	20002468 	.word	0x20002468

0800774c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <SystemInit+0x20>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	4a05      	ldr	r2, [pc, #20]	; (800776c <SystemInit+0x20>)
 8007758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800775c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007760:	bf00      	nop
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	e000ed00 	.word	0xe000ed00

08007770 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08e      	sub	sp, #56	; 0x38
 8007774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	605a      	str	r2, [r3, #4]
 8007780:	609a      	str	r2, [r3, #8]
 8007782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007784:	f107 031c 	add.w	r3, r7, #28
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007790:	463b      	mov	r3, r7
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	605a      	str	r2, [r3, #4]
 8007798:	609a      	str	r2, [r3, #8]
 800779a:	60da      	str	r2, [r3, #12]
 800779c:	611a      	str	r2, [r3, #16]
 800779e:	615a      	str	r2, [r3, #20]
 80077a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80077a2:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80077a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80077aa:	4b2b      	ldr	r3, [pc, #172]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077b0:	4b29      	ldr	r3, [pc, #164]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80077b6:	4b28      	ldr	r3, [pc, #160]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077be:	4b26      	ldr	r3, [pc, #152]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80077c4:	4b24      	ldr	r3, [pc, #144]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077c6:	2280      	movs	r2, #128	; 0x80
 80077c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80077ca:	4823      	ldr	r0, [pc, #140]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077cc:	f006 fe3a 	bl	800e444 <HAL_TIM_Base_Init>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80077d6:	f7fe f99f 	bl	8005b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80077e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077e4:	4619      	mov	r1, r3
 80077e6:	481c      	ldr	r0, [pc, #112]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077e8:	f007 fbb4 	bl	800ef54 <HAL_TIM_ConfigClockSource>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80077f2:	f7fe f991 	bl	8005b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80077f6:	4818      	ldr	r0, [pc, #96]	; (8007858 <MX_TIM2_Init+0xe8>)
 80077f8:	f006 ff00 	bl	800e5fc <HAL_TIM_PWM_Init>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8007802:	f7fe f989 	bl	8005b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800780e:	f107 031c 	add.w	r3, r7, #28
 8007812:	4619      	mov	r1, r3
 8007814:	4810      	ldr	r0, [pc, #64]	; (8007858 <MX_TIM2_Init+0xe8>)
 8007816:	f008 fbb5 	bl	800ff84 <HAL_TIMEx_MasterConfigSynchronization>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8007820:	f7fe f97a 	bl	8005b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007824:	2360      	movs	r3, #96	; 0x60
 8007826:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800782c:	2300      	movs	r3, #0
 800782e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007834:	463b      	mov	r3, r7
 8007836:	2200      	movs	r2, #0
 8007838:	4619      	mov	r1, r3
 800783a:	4807      	ldr	r0, [pc, #28]	; (8007858 <MX_TIM2_Init+0xe8>)
 800783c:	f007 f954 	bl	800eae8 <HAL_TIM_PWM_ConfigChannel>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8007846:	f7fe f967 	bl	8005b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800784a:	4803      	ldr	r0, [pc, #12]	; (8007858 <MX_TIM2_Init+0xe8>)
 800784c:	f000 f824 	bl	8007898 <HAL_TIM_MspPostInit>

}
 8007850:	bf00      	nop
 8007852:	3738      	adds	r7, #56	; 0x38
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	2000088c 	.word	0x2000088c

0800785c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786c:	d10b      	bne.n	8007886 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800786e:	4b09      	ldr	r3, [pc, #36]	; (8007894 <HAL_TIM_Base_MspInit+0x38>)
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4a08      	ldr	r2, [pc, #32]	; (8007894 <HAL_TIM_Base_MspInit+0x38>)
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	61d3      	str	r3, [r2, #28]
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <HAL_TIM_Base_MspInit+0x38>)
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40021000 	.word	0x40021000

08007898 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	60da      	str	r2, [r3, #12]
 80078ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b8:	d11d      	bne.n	80078f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ba:	4b11      	ldr	r3, [pc, #68]	; (8007900 <HAL_TIM_MspPostInit+0x68>)
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	4a10      	ldr	r2, [pc, #64]	; (8007900 <HAL_TIM_MspPostInit+0x68>)
 80078c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c4:	6153      	str	r3, [r2, #20]
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <HAL_TIM_MspPostInit+0x68>)
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80078d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d8:	2302      	movs	r3, #2
 80078da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80078e4:	2301      	movs	r3, #1
 80078e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e8:	f107 030c 	add.w	r3, r7, #12
 80078ec:	4619      	mov	r1, r3
 80078ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078f2:	f002 faf7 	bl	8009ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80078f6:	bf00      	nop
 80078f8:	3720      	adds	r7, #32
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40021000 	.word	0x40021000

08007904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800793c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007908:	480d      	ldr	r0, [pc, #52]	; (8007940 <LoopForever+0x6>)
  ldr r1, =_edata
 800790a:	490e      	ldr	r1, [pc, #56]	; (8007944 <LoopForever+0xa>)
  ldr r2, =_sidata
 800790c:	4a0e      	ldr	r2, [pc, #56]	; (8007948 <LoopForever+0xe>)
  movs r3, #0
 800790e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007910:	e002      	b.n	8007918 <LoopCopyDataInit>

08007912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007916:	3304      	adds	r3, #4

08007918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800791a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800791c:	d3f9      	bcc.n	8007912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800791e:	4a0b      	ldr	r2, [pc, #44]	; (800794c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007920:	4c0b      	ldr	r4, [pc, #44]	; (8007950 <LoopForever+0x16>)
  movs r3, #0
 8007922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007924:	e001      	b.n	800792a <LoopFillZerobss>

08007926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007928:	3204      	adds	r2, #4

0800792a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800792a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800792c:	d3fb      	bcc.n	8007926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800792e:	f7ff ff0d 	bl	800774c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007932:	f029 fd55 	bl	80313e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007936:	f7fd ffd9 	bl	80058ec <main>

0800793a <LoopForever>:

LoopForever:
    b LoopForever
 800793a:	e7fe      	b.n	800793a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800793c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8007940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007944:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 8007948:	08037528 	.word	0x08037528
  ldr r2, =_sbss
 800794c:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 8007950:	20002468 	.word	0x20002468

08007954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007954:	e7fe      	b.n	8007954 <ADC1_2_IRQHandler>
	...

08007958 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800795c:	4b08      	ldr	r3, [pc, #32]	; (8007980 <HAL_Init+0x28>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a07      	ldr	r2, [pc, #28]	; (8007980 <HAL_Init+0x28>)
 8007962:	f043 0310 	orr.w	r3, r3, #16
 8007966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007968:	2003      	movs	r0, #3
 800796a:	f002 f8fb 	bl	8009b64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800796e:	2000      	movs	r0, #0
 8007970:	f000 f808 	bl	8007984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007974:	f7ff fdcc 	bl	8007510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40022000 	.word	0x40022000

08007984 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800798c:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <HAL_InitTick+0x54>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	4b12      	ldr	r3, [pc, #72]	; (80079dc <HAL_InitTick+0x58>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	4619      	mov	r1, r3
 8007996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800799a:	fbb3 f3f1 	udiv	r3, r3, r1
 800799e:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a2:	4618      	mov	r0, r3
 80079a4:	f002 f942 	bl	8009c2c <HAL_SYSTICK_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e00e      	b.n	80079d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b0f      	cmp	r3, #15
 80079b6:	d80a      	bhi.n	80079ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079b8:	2200      	movs	r2, #0
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	f002 f8f0 	bl	8009ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80079c4:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <HAL_InitTick+0x5c>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e000      	b.n	80079d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	2000032c 	.word	0x2000032c
 80079dc:	20000334 	.word	0x20000334
 80079e0:	20000330 	.word	0x20000330

080079e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <HAL_IncTick+0x20>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <HAL_IncTick+0x24>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4413      	add	r3, r2
 80079f4:	4a04      	ldr	r2, [pc, #16]	; (8007a08 <HAL_IncTick+0x24>)
 80079f6:	6013      	str	r3, [r2, #0]
}
 80079f8:	bf00      	nop
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000334 	.word	0x20000334
 8007a08:	200008d8 	.word	0x200008d8

08007a0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8007a10:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <HAL_GetTick+0x14>)
 8007a12:	681b      	ldr	r3, [r3, #0]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	200008d8 	.word	0x200008d8

08007a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b09a      	sub	sp, #104	; 0x68
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e32e      	b.n	80080a2 <HAL_ADC_Init+0x67e>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a4c:	d012      	beq.n	8007a74 <HAL_ADC_Init+0x50>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a8b      	ldr	r2, [pc, #556]	; (8007c80 <HAL_ADC_Init+0x25c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00d      	beq.n	8007a74 <HAL_ADC_Init+0x50>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a89      	ldr	r2, [pc, #548]	; (8007c84 <HAL_ADC_Init+0x260>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d008      	beq.n	8007a74 <HAL_ADC_Init+0x50>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a88      	ldr	r2, [pc, #544]	; (8007c88 <HAL_ADC_Init+0x264>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <HAL_ADC_Init+0x50>
 8007a6c:	21f9      	movs	r1, #249	; 0xf9
 8007a6e:	4887      	ldr	r0, [pc, #540]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007a70:	f7fe f857 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d012      	beq.n	8007aa2 <HAL_ADC_Init+0x7e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a84:	d00d      	beq.n	8007aa2 <HAL_ADC_Init+0x7e>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a8e:	d008      	beq.n	8007aa2 <HAL_ADC_Init+0x7e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a98:	d003      	beq.n	8007aa2 <HAL_ADC_Init+0x7e>
 8007a9a:	21fa      	movs	r1, #250	; 0xfa
 8007a9c:	487b      	ldr	r0, [pc, #492]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007a9e:	f7fe f840 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00f      	beq.n	8007aca <HAL_ADC_Init+0xa6>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d00b      	beq.n	8007aca <HAL_ADC_Init+0xa6>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2b10      	cmp	r3, #16
 8007ab8:	d007      	beq.n	8007aca <HAL_ADC_Init+0xa6>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b18      	cmp	r3, #24
 8007ac0:	d003      	beq.n	8007aca <HAL_ADC_Init+0xa6>
 8007ac2:	21fb      	movs	r1, #251	; 0xfb
 8007ac4:	4871      	ldr	r0, [pc, #452]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007ac6:	f7fe f82c 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <HAL_ADC_Init+0xbe>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d003      	beq.n	8007ae2 <HAL_ADC_Init+0xbe>
 8007ada:	21fc      	movs	r1, #252	; 0xfc
 8007adc:	486b      	ldr	r0, [pc, #428]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007ade:	f7fe f820 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <HAL_ADC_Init+0xd6>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d003      	beq.n	8007afa <HAL_ADC_Init+0xd6>
 8007af2:	21fd      	movs	r1, #253	; 0xfd
 8007af4:	4865      	ldr	r0, [pc, #404]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007af6:	f7fe f814 	bl	8005b22 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7e5b      	ldrb	r3, [r3, #25]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d007      	beq.n	8007b12 <HAL_ADC_Init+0xee>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7e5b      	ldrb	r3, [r3, #25]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d003      	beq.n	8007b12 <HAL_ADC_Init+0xee>
 8007b0a:	21fe      	movs	r1, #254	; 0xfe
 8007b0c:	485f      	ldr	r0, [pc, #380]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007b0e:	f7fe f808 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d012      	beq.n	8007b40 <HAL_ADC_Init+0x11c>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b22:	d00d      	beq.n	8007b40 <HAL_ADC_Init+0x11c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2c:	d008      	beq.n	8007b40 <HAL_ADC_Init+0x11c>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b36:	d003      	beq.n	8007b40 <HAL_ADC_Init+0x11c>
 8007b38:	21ff      	movs	r1, #255	; 0xff
 8007b3a:	4854      	ldr	r0, [pc, #336]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007b3c:	f7fd fff1 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d070      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d06c      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	2bc0      	cmp	r3, #192	; 0xc0
 8007b56:	d068      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8007b60:	d063      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007b6a:	d05e      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8007b74:	d059      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007b7e:	d054      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8007b88:	d04f      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d04b      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d047      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007ba2:	d042      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8007bac:	d03d      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8007bb4:	d039      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007bbe:	d034      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	2b80      	cmp	r3, #128	; 0x80
 8007bc6:	d030      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bcc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007bd0:	d02b      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007bda:	d026      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8007be4:	d021      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bee:	d01c      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf8:	d017      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8007c02:	d012      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0c:	d00d      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8007c16:	d008      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d004      	beq.n	8007c2a <HAL_ADC_Init+0x206>
 8007c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c24:	4819      	ldr	r0, [pc, #100]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007c26:	f7fd ff7c 	bl	8005b22 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d009      	beq.n	8007c48 <HAL_ADC_Init+0x224>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d004      	beq.n	8007c48 <HAL_ADC_Init+0x224>
 8007c3e:	f240 1101 	movw	r1, #257	; 0x101
 8007c42:	4812      	ldr	r0, [pc, #72]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007c44:	f7fd ff6d 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d008      	beq.n	8007c62 <HAL_ADC_Init+0x23e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d004      	beq.n	8007c62 <HAL_ADC_Init+0x23e>
 8007c58:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007c5c:	480b      	ldr	r0, [pc, #44]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007c5e:	f7fd ff60 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d012      	beq.n	8007c90 <HAL_ADC_Init+0x26c>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00e      	beq.n	8007c90 <HAL_ADC_Init+0x26c>
 8007c72:	f240 1103 	movw	r1, #259	; 0x103
 8007c76:	4805      	ldr	r0, [pc, #20]	; (8007c8c <HAL_ADC_Init+0x268>)
 8007c78:	f7fd ff53 	bl	8005b22 <assert_failed>
 8007c7c:	e008      	b.n	8007c90 <HAL_ADC_Init+0x26c>
 8007c7e:	bf00      	nop
 8007c80:	50000100 	.word	0x50000100
 8007c84:	50000400 	.word	0x50000400
 8007c88:	50000500 	.word	0x50000500
 8007c8c:	0803350c 	.word	0x0803350c
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7e1b      	ldrb	r3, [r3, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_ADC_Init+0x286>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	7e1b      	ldrb	r3, [r3, #24]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d004      	beq.n	8007caa <HAL_ADC_Init+0x286>
 8007ca0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007ca4:	4891      	ldr	r0, [pc, #580]	; (8007eec <HAL_ADC_Init+0x4c8>)
 8007ca6:	f7fd ff3c 	bl	8005b22 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d02d      	beq.n	8007d0e <HAL_ADC_Init+0x2ea>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_ADC_Init+0x29e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	2b10      	cmp	r3, #16
 8007cc0:	d904      	bls.n	8007ccc <HAL_ADC_Init+0x2a8>
 8007cc2:	f44f 7184 	mov.w	r1, #264	; 0x108
 8007cc6:	4889      	ldr	r0, [pc, #548]	; (8007eec <HAL_ADC_Init+0x4c8>)
 8007cc8:	f7fd ff2b 	bl	8005b22 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <HAL_ADC_Init+0x2c6>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d004      	beq.n	8007cea <HAL_ADC_Init+0x2c6>
 8007ce0:	f240 1109 	movw	r1, #265	; 0x109
 8007ce4:	4881      	ldr	r0, [pc, #516]	; (8007eec <HAL_ADC_Init+0x4c8>)
 8007ce6:	f7fd ff1c 	bl	8005b22 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00c      	beq.n	8007d0e <HAL_ADC_Init+0x2ea>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_ADC_Init+0x2e0>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d904      	bls.n	8007d0e <HAL_ADC_Init+0x2ea>
 8007d04:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8007d08:	4878      	ldr	r0, [pc, #480]	; (8007eec <HAL_ADC_Init+0x4c8>)
 8007d0a:	f7fd ff0a 	bl	8005b22 <assert_failed>
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d176      	bne.n	8007e08 <HAL_ADC_Init+0x3e4>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d152      	bne.n	8007dc8 <HAL_ADC_Init+0x3a4>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7f9 fa39 	bl	80011b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d13b      	bne.n	8007dc8 <HAL_ADC_Init+0x3a4>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fdd1 	bl	80098f8 <ADC_Disable>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d12f      	bne.n	8007dc8 <HAL_ADC_Init+0x3a4>
 8007d68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d12b      	bne.n	8007dc8 <HAL_ADC_Init+0x3a4>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007d78:	f023 0302 	bic.w	r3, r3, #2
 8007d7c:	f043 0202 	orr.w	r2, r3, #2
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d92:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007da2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007da4:	4b52      	ldr	r3, [pc, #328]	; (8007ef0 <HAL_ADC_Init+0x4cc>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a52      	ldr	r2, [pc, #328]	; (8007ef4 <HAL_ADC_Init+0x4d0>)
 8007daa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dae:	0c9a      	lsrs	r2, r3, #18
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007dba:	e002      	b.n	8007dc2 <HAL_ADC_Init+0x39e>
          {
            wait_loop_index--;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1f9      	bne.n	8007dbc <HAL_ADC_Init+0x398>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <HAL_ADC_Init+0x3c2>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de4:	d110      	bne.n	8007e08 <HAL_ADC_Init+0x3e4>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f023 0312 	bic.w	r3, r3, #18
 8007dee:	f043 0210 	orr.w	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfa:	f043 0201 	orr.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f040 8139 	bne.w	8008088 <HAL_ADC_Init+0x664>
 8007e16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f040 8134 	bne.w	8008088 <HAL_ADC_Init+0x664>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 812c 	bne.w	8008088 <HAL_ADC_Init+0x664>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007e38:	f043 0202 	orr.w	r2, r3, #2
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e48:	d004      	beq.n	8007e54 <HAL_ADC_Init+0x430>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a2a      	ldr	r2, [pc, #168]	; (8007ef8 <HAL_ADC_Init+0x4d4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d101      	bne.n	8007e58 <HAL_ADC_Init+0x434>
 8007e54:	4b29      	ldr	r3, [pc, #164]	; (8007efc <HAL_ADC_Init+0x4d8>)
 8007e56:	e000      	b.n	8007e5a <HAL_ADC_Init+0x436>
 8007e58:	4b29      	ldr	r3, [pc, #164]	; (8007f00 <HAL_ADC_Init+0x4dc>)
 8007e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e64:	d102      	bne.n	8007e6c <HAL_ADC_Init+0x448>
 8007e66:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <HAL_ADC_Init+0x4d4>)
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e01a      	b.n	8007ea2 <HAL_ADC_Init+0x47e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a21      	ldr	r2, [pc, #132]	; (8007ef8 <HAL_ADC_Init+0x4d4>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d103      	bne.n	8007e7e <HAL_ADC_Init+0x45a>
 8007e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	e011      	b.n	8007ea2 <HAL_ADC_Init+0x47e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a20      	ldr	r2, [pc, #128]	; (8007f04 <HAL_ADC_Init+0x4e0>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d102      	bne.n	8007e8e <HAL_ADC_Init+0x46a>
 8007e88:	4b1f      	ldr	r3, [pc, #124]	; (8007f08 <HAL_ADC_Init+0x4e4>)
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e009      	b.n	8007ea2 <HAL_ADC_Init+0x47e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <HAL_ADC_Init+0x4e4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d102      	bne.n	8007e9e <HAL_ADC_Init+0x47a>
 8007e98:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <HAL_ADC_Init+0x4e0>)
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	e001      	b.n	8007ea2 <HAL_ADC_Init+0x47e>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 0303 	and.w	r3, r3, #3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d108      	bne.n	8007ec2 <HAL_ADC_Init+0x49e>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_ADC_Init+0x49e>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <HAL_ADC_Init+0x4a0>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d12d      	bne.n	8007f24 <HAL_ADC_Init+0x500>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007ec8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d021      	beq.n	8007f12 <HAL_ADC_Init+0x4ee>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d118      	bne.n	8007f0c <HAL_ADC_Init+0x4e8>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d112      	bne.n	8007f0c <HAL_ADC_Init+0x4e8>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e011      	b.n	8007f0e <HAL_ADC_Init+0x4ea>
 8007eea:	bf00      	nop
 8007eec:	0803350c 	.word	0x0803350c
 8007ef0:	2000032c 	.word	0x2000032c
 8007ef4:	431bde83 	.word	0x431bde83
 8007ef8:	50000100 	.word	0x50000100
 8007efc:	50000300 	.word	0x50000300
 8007f00:	50000700 	.word	0x50000700
 8007f04:	50000400 	.word	0x50000400
 8007f08:	50000500 	.word	0x50000500
 8007f0c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <HAL_ADC_Init+0x500>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8007f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f22:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7e5b      	ldrb	r3, [r3, #25]
 8007f28:	035b      	lsls	r3, r3, #13
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f2e:	2a01      	cmp	r2, #1
 8007f30:	d002      	beq.n	8007f38 <HAL_ADC_Init+0x514>
 8007f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f36:	e000      	b.n	8007f3a <HAL_ADC_Init+0x516>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d11b      	bne.n	8007f90 <HAL_ADC_Init+0x56c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	7e5b      	ldrb	r3, [r3, #25]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <HAL_ADC_Init+0x550>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	3b01      	subs	r3, #1
 8007f66:	045a      	lsls	r2, r3, #17
 8007f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f70:	663b      	str	r3, [r7, #96]	; 0x60
 8007f72:	e00d      	b.n	8007f90 <HAL_ADC_Init+0x56c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007f7c:	f043 0220 	orr.w	r2, r3, #32
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f88:	f043 0201 	orr.w	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d02c      	beq.n	8007ff2 <HAL_ADC_Init+0x5ce>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a43      	ldr	r2, [pc, #268]	; (80080ac <HAL_ADC_Init+0x688>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d004      	beq.n	8007fac <HAL_ADC_Init+0x588>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a42      	ldr	r2, [pc, #264]	; (80080b0 <HAL_ADC_Init+0x68c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d11a      	bne.n	8007fe2 <HAL_ADC_Init+0x5be>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8007fb4:	d012      	beq.n	8007fdc <HAL_ADC_Init+0x5b8>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbe:	d00a      	beq.n	8007fd6 <HAL_ADC_Init+0x5b2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8007fc8:	d002      	beq.n	8007fd0 <HAL_ADC_Init+0x5ac>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	e00a      	b.n	8007fe6 <HAL_ADC_Init+0x5c2>
 8007fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fd4:	e007      	b.n	8007fe6 <HAL_ADC_Init+0x5c2>
 8007fd6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007fda:	e004      	b.n	8007fe6 <HAL_ADC_Init+0x5c2>
 8007fdc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8007fe0:	e001      	b.n	8007fe6 <HAL_ADC_Init+0x5c2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007fea:	4313      	orrs	r3, r2
 8007fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 030c 	and.w	r3, r3, #12
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d114      	bne.n	800802a <HAL_ADC_Init+0x606>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800800e:	f023 0302 	bic.w	r3, r3, #2
 8008012:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7e1b      	ldrb	r3, [r3, #24]
 8008018:	039a      	lsls	r2, r3, #14
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4313      	orrs	r3, r2
 8008024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008026:	4313      	orrs	r3, r2
 8008028:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <HAL_ADC_Init+0x690>)
 8008032:	4013      	ands	r3, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800803a:	430b      	orrs	r3, r1
 800803c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d10c      	bne.n	8008060 <HAL_ADC_Init+0x63c>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	f023 010f 	bic.w	r1, r3, #15
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	1e5a      	subs	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
 800805e:	e007      	b.n	8008070 <HAL_ADC_Init+0x64c>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 020f 	bic.w	r2, r2, #15
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	f023 0303 	bic.w	r3, r3, #3
 800807e:	f043 0201 	orr.w	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
 8008086:	e00a      	b.n	800809e <HAL_ADC_Init+0x67a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	f023 0312 	bic.w	r3, r3, #18
 8008090:	f043 0210 	orr.w	r2, r3, #16
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8008098:	2301      	movs	r3, #1
 800809a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800809e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3768      	adds	r7, #104	; 0x68
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	50000400 	.word	0x50000400
 80080b0:	50000500 	.word	0x50000500
 80080b4:	fff0c007 	.word	0xfff0c007

080080b8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ce:	d013      	beq.n	80080f8 <HAL_ADCEx_Calibration_Start+0x40>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a43      	ldr	r2, [pc, #268]	; (80081e4 <HAL_ADCEx_Calibration_Start+0x12c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00e      	beq.n	80080f8 <HAL_ADCEx_Calibration_Start+0x40>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a42      	ldr	r2, [pc, #264]	; (80081e8 <HAL_ADCEx_Calibration_Start+0x130>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d009      	beq.n	80080f8 <HAL_ADCEx_Calibration_Start+0x40>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a40      	ldr	r2, [pc, #256]	; (80081ec <HAL_ADCEx_Calibration_Start+0x134>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d004      	beq.n	80080f8 <HAL_ADCEx_Calibration_Start+0x40>
 80080ee:	f640 510e 	movw	r1, #3342	; 0xd0e
 80080f2:	483f      	ldr	r0, [pc, #252]	; (80081f0 <HAL_ADCEx_Calibration_Start+0x138>)
 80080f4:	f7fd fd15 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <HAL_ADCEx_Calibration_Start+0x56>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d004      	beq.n	800810e <HAL_ADCEx_Calibration_Start+0x56>
 8008104:	f640 510f 	movw	r1, #3343	; 0xd0f
 8008108:	4839      	ldr	r0, [pc, #228]	; (80081f0 <HAL_ADCEx_Calibration_Start+0x138>)
 800810a:	f7fd fd0a 	bl	8005b22 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_ADCEx_Calibration_Start+0x64>
 8008118:	2302      	movs	r3, #2
 800811a:	e05f      	b.n	80081dc <HAL_ADCEx_Calibration_Start+0x124>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 fbe7 	bl	80098f8 <ADC_Disable>
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d14e      	bne.n	80081d2 <HAL_ADCEx_Calibration_Start+0x11a>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8008148:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d107      	bne.n	8008160 <HAL_ADCEx_Calibration_Start+0xa8>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800815e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800816e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8008170:	f7ff fc4c 	bl	8007a0c <HAL_GetTick>
 8008174:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008176:	e01c      	b.n	80081b2 <HAL_ADCEx_Calibration_Start+0xfa>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008178:	f7ff fc48 	bl	8007a0c <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b0a      	cmp	r3, #10
 8008184:	d915      	bls.n	80081b2 <HAL_ADCEx_Calibration_Start+0xfa>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008194:	d10d      	bne.n	80081b2 <HAL_ADCEx_Calibration_Start+0xfa>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f023 0312 	bic.w	r3, r3, #18
 800819e:	f043 0210 	orr.w	r2, r3, #16
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e014      	b.n	80081dc <HAL_ADCEx_Calibration_Start+0x124>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081c0:	d0da      	beq.n	8008178 <HAL_ADCEx_Calibration_Start+0xc0>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	f043 0201 	orr.w	r2, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	50000100 	.word	0x50000100
 80081e8:	50000400 	.word	0x50000400
 80081ec:	50000500 	.word	0x50000500
 80081f0:	0803350c 	.word	0x0803350c

080081f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b09a      	sub	sp, #104	; 0x68
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008210:	d013      	beq.n	800823a <HAL_ADC_ConfigChannel+0x46>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a6b      	ldr	r2, [pc, #428]	; (80083c4 <HAL_ADC_ConfigChannel+0x1d0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00e      	beq.n	800823a <HAL_ADC_ConfigChannel+0x46>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a69      	ldr	r2, [pc, #420]	; (80083c8 <HAL_ADC_ConfigChannel+0x1d4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d009      	beq.n	800823a <HAL_ADC_ConfigChannel+0x46>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a68      	ldr	r2, [pc, #416]	; (80083cc <HAL_ADC_ConfigChannel+0x1d8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d004      	beq.n	800823a <HAL_ADC_ConfigChannel+0x46>
 8008230:	f241 51b7 	movw	r1, #5559	; 0x15b7
 8008234:	4866      	ldr	r0, [pc, #408]	; (80083d0 <HAL_ADC_ConfigChannel+0x1dc>)
 8008236:	f7fd fc74 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d040      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d03c      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b03      	cmp	r3, #3
 8008250:	d038      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b04      	cmp	r3, #4
 8008258:	d034      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b05      	cmp	r3, #5
 8008260:	d030      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b06      	cmp	r3, #6
 8008268:	d02c      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b07      	cmp	r3, #7
 8008270:	d028      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d024      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b09      	cmp	r3, #9
 8008280:	d020      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b0a      	cmp	r3, #10
 8008288:	d01c      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b0b      	cmp	r3, #11
 8008290:	d018      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b0c      	cmp	r3, #12
 8008298:	d014      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2b0d      	cmp	r3, #13
 80082a0:	d010      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2b0e      	cmp	r3, #14
 80082a8:	d00c      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	2b0f      	cmp	r3, #15
 80082b0:	d008      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b10      	cmp	r3, #16
 80082b8:	d004      	beq.n	80082c4 <HAL_ADC_ConfigChannel+0xd0>
 80082ba:	f241 51b8 	movw	r1, #5560	; 0x15b8
 80082be:	4844      	ldr	r0, [pc, #272]	; (80083d0 <HAL_ADC_ConfigChannel+0x1dc>)
 80082c0:	f7fd fc2f 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d020      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d01c      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d018      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d014      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d010      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d00c      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b06      	cmp	r3, #6
 80082fa:	d008      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2b07      	cmp	r3, #7
 8008302:	d004      	beq.n	800830e <HAL_ADC_ConfigChannel+0x11a>
 8008304:	f241 51b9 	movw	r1, #5561	; 0x15b9
 8008308:	4831      	ldr	r0, [pc, #196]	; (80083d0 <HAL_ADC_ConfigChannel+0x1dc>)
 800830a:	f7fd fc0a 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d008      	beq.n	8008328 <HAL_ADC_ConfigChannel+0x134>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d004      	beq.n	8008328 <HAL_ADC_ConfigChannel+0x134>
 800831e:	f241 51ba 	movw	r1, #5562	; 0x15ba
 8008322:	482b      	ldr	r0, [pc, #172]	; (80083d0 <HAL_ADC_ConfigChannel+0x1dc>)
 8008324:	f7fd fbfd 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d014      	beq.n	800835a <HAL_ADC_ConfigChannel+0x166>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d010      	beq.n	800835a <HAL_ADC_ConfigChannel+0x166>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b02      	cmp	r3, #2
 800833e:	d00c      	beq.n	800835a <HAL_ADC_ConfigChannel+0x166>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b03      	cmp	r3, #3
 8008346:	d008      	beq.n	800835a <HAL_ADC_ConfigChannel+0x166>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b04      	cmp	r3, #4
 800834e:	d004      	beq.n	800835a <HAL_ADC_ConfigChannel+0x166>
 8008350:	f241 51bb 	movw	r1, #5563	; 0x15bb
 8008354:	481e      	ldr	r0, [pc, #120]	; (80083d0 <HAL_ADC_ConfigChannel+0x1dc>)
 8008356:	f7fd fbe4 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0318 	and.w	r3, r3, #24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <HAL_ADC_ConfigChannel+0x17e>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008370:	d330      	bcc.n	80083d4 <HAL_ADC_ConfigChannel+0x1e0>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f003 0318 	and.w	r3, r3, #24
 800837c:	2b08      	cmp	r3, #8
 800837e:	d104      	bne.n	800838a <HAL_ADC_ConfigChannel+0x196>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008388:	d324      	bcc.n	80083d4 <HAL_ADC_ConfigChannel+0x1e0>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f003 0318 	and.w	r3, r3, #24
 8008394:	2b10      	cmp	r3, #16
 8008396:	d103      	bne.n	80083a0 <HAL_ADC_ConfigChannel+0x1ac>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	2bff      	cmp	r3, #255	; 0xff
 800839e:	d919      	bls.n	80083d4 <HAL_ADC_ConfigChannel+0x1e0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f003 0318 	and.w	r3, r3, #24
 80083aa:	2b18      	cmp	r3, #24
 80083ac:	d103      	bne.n	80083b6 <HAL_ADC_ConfigChannel+0x1c2>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	2b3f      	cmp	r3, #63	; 0x3f
 80083b4:	d90e      	bls.n	80083d4 <HAL_ADC_ConfigChannel+0x1e0>
 80083b6:	f241 51bc 	movw	r1, #5564	; 0x15bc
 80083ba:	4805      	ldr	r0, [pc, #20]	; (80083d0 <HAL_ADC_ConfigChannel+0x1dc>)
 80083bc:	f7fd fbb1 	bl	8005b22 <assert_failed>
 80083c0:	e008      	b.n	80083d4 <HAL_ADC_ConfigChannel+0x1e0>
 80083c2:	bf00      	nop
 80083c4:	50000100 	.word	0x50000100
 80083c8:	50000400 	.word	0x50000400
 80083cc:	50000500 	.word	0x50000500
 80083d0:	0803350c 	.word	0x0803350c
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d063      	beq.n	80084a4 <HAL_ADC_ConfigChannel+0x2b0>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	f000 809c 	beq.w	800851e <HAL_ADC_ConfigChannel+0x32a>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	f000 8097 	beq.w	800851e <HAL_ADC_ConfigChannel+0x32a>
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	f000 8092 	beq.w	800851e <HAL_ADC_ConfigChannel+0x32a>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	f000 808d 	beq.w	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b05      	cmp	r3, #5
 800840a:	f000 8088 	beq.w	800851e <HAL_ADC_ConfigChannel+0x32a>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b06      	cmp	r3, #6
 8008414:	f000 8083 	beq.w	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b07      	cmp	r3, #7
 800841e:	d07e      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b08      	cmp	r3, #8
 8008426:	d07a      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b09      	cmp	r3, #9
 800842e:	d076      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b0a      	cmp	r3, #10
 8008436:	d072      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b0b      	cmp	r3, #11
 800843e:	d06e      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b0c      	cmp	r3, #12
 8008446:	d06a      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b0d      	cmp	r3, #13
 800844e:	d066      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b0e      	cmp	r3, #14
 8008456:	d062      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b0f      	cmp	r3, #15
 800845e:	d05e      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b10      	cmp	r3, #16
 8008466:	d05a      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b11      	cmp	r3, #17
 800846e:	d056      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b12      	cmp	r3, #18
 8008476:	d052      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b0f      	cmp	r3, #15
 800847e:	d04e      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b11      	cmp	r3, #17
 8008486:	d04a      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b11      	cmp	r3, #17
 800848e:	d046      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b11      	cmp	r3, #17
 8008496:	d042      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008498:	f241 51c4 	movw	r1, #5572	; 0x15c4
 800849c:	489b      	ldr	r0, [pc, #620]	; (800870c <HAL_ADC_ConfigChannel+0x518>)
 800849e:	f7fd fb40 	bl	8005b22 <assert_failed>
 80084a2:	e03c      	b.n	800851e <HAL_ADC_ConfigChannel+0x32a>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d038      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d034      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d030      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d02c      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d028      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d024      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b07      	cmp	r3, #7
 80084da:	d020      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d01c      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	d018      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b0a      	cmp	r3, #10
 80084f2:	d014      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b0b      	cmp	r3, #11
 80084fa:	d010      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b0c      	cmp	r3, #12
 8008502:	d00c      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b0d      	cmp	r3, #13
 800850a:	d008      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b0e      	cmp	r3, #14
 8008512:	d004      	beq.n	800851e <HAL_ADC_ConfigChannel+0x32a>
 8008514:	f241 51c8 	movw	r1, #5576	; 0x15c8
 8008518:	487c      	ldr	r0, [pc, #496]	; (800870c <HAL_ADC_ConfigChannel+0x518>)
 800851a:	f7fd fb02 	bl	8005b22 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_ADC_ConfigChannel+0x338>
 8008528:	2302      	movs	r3, #2
 800852a:	e2cb      	b.n	8008ac4 <HAL_ADC_ConfigChannel+0x8d0>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 82af 	bne.w	8008aa2 <HAL_ADC_ConfigChannel+0x8ae>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b04      	cmp	r3, #4
 800854a:	d81c      	bhi.n	8008586 <HAL_ADC_ConfigChannel+0x392>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	4413      	add	r3, r2
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	461a      	mov	r2, r3
 8008560:	231f      	movs	r3, #31
 8008562:	4093      	lsls	r3, r2
 8008564:	43db      	mvns	r3, r3
 8008566:	4019      	ands	r1, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	6818      	ldr	r0, [r3, #0]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	4613      	mov	r3, r2
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	4413      	add	r3, r2
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	fa00 f203 	lsl.w	r2, r0, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	631a      	str	r2, [r3, #48]	; 0x30
 8008584:	e063      	b.n	800864e <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b09      	cmp	r3, #9
 800858c:	d81e      	bhi.n	80085cc <HAL_ADC_ConfigChannel+0x3d8>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	4413      	add	r3, r2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	3b1e      	subs	r3, #30
 80085a2:	221f      	movs	r2, #31
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	43db      	mvns	r3, r3
 80085aa:	4019      	ands	r1, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	4413      	add	r3, r2
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	3b1e      	subs	r3, #30
 80085be:	fa00 f203 	lsl.w	r2, r0, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	635a      	str	r2, [r3, #52]	; 0x34
 80085ca:	e040      	b.n	800864e <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b0e      	cmp	r3, #14
 80085d2:	d81e      	bhi.n	8008612 <HAL_ADC_ConfigChannel+0x41e>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	4613      	mov	r3, r2
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4413      	add	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	3b3c      	subs	r3, #60	; 0x3c
 80085e8:	221f      	movs	r2, #31
 80085ea:	fa02 f303 	lsl.w	r3, r2, r3
 80085ee:	43db      	mvns	r3, r3
 80085f0:	4019      	ands	r1, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	4413      	add	r3, r2
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	3b3c      	subs	r3, #60	; 0x3c
 8008604:	fa00 f203 	lsl.w	r2, r0, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	639a      	str	r2, [r3, #56]	; 0x38
 8008610:	e01d      	b.n	800864e <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	4613      	mov	r3, r2
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	4413      	add	r3, r2
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	3b5a      	subs	r3, #90	; 0x5a
 8008626:	221f      	movs	r2, #31
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	43db      	mvns	r3, r3
 800862e:	4019      	ands	r1, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6818      	ldr	r0, [r3, #0]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4413      	add	r3, r2
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	3b5a      	subs	r3, #90	; 0x5a
 8008642:	fa00 f203 	lsl.w	r2, r0, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 030c 	and.w	r3, r3, #12
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 80e6 	bne.w	800882a <HAL_ADC_ConfigChannel+0x636>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b09      	cmp	r3, #9
 8008664:	d91c      	bls.n	80086a0 <HAL_ADC_ConfigChannel+0x4ac>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6999      	ldr	r1, [r3, #24]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	4613      	mov	r3, r2
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	4413      	add	r3, r2
 8008676:	3b1e      	subs	r3, #30
 8008678:	2207      	movs	r2, #7
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	43db      	mvns	r3, r3
 8008680:	4019      	ands	r1, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6898      	ldr	r0, [r3, #8]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4613      	mov	r3, r2
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	4413      	add	r3, r2
 8008690:	3b1e      	subs	r3, #30
 8008692:	fa00 f203 	lsl.w	r2, r0, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	619a      	str	r2, [r3, #24]
 800869e:	e019      	b.n	80086d4 <HAL_ADC_ConfigChannel+0x4e0>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6959      	ldr	r1, [r3, #20]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4613      	mov	r3, r2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4413      	add	r3, r2
 80086b0:	2207      	movs	r2, #7
 80086b2:	fa02 f303 	lsl.w	r3, r2, r3
 80086b6:	43db      	mvns	r3, r3
 80086b8:	4019      	ands	r1, r3
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6898      	ldr	r0, [r3, #8]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	4413      	add	r3, r2
 80086c8:	fa00 f203 	lsl.w	r2, r0, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695a      	ldr	r2, [r3, #20]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d850      	bhi.n	8008798 <HAL_ADC_ConfigChannel+0x5a4>
 80086f6:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <HAL_ADC_ConfigChannel+0x508>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	08008711 	.word	0x08008711
 8008700:	08008733 	.word	0x08008733
 8008704:	08008755 	.word	0x08008755
 8008708:	08008777 	.word	0x08008777
 800870c:	0803350c 	.word	0x0803350c
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008716:	4b9a      	ldr	r3, [pc, #616]	; (8008980 <HAL_ADC_ConfigChannel+0x78c>)
 8008718:	4013      	ands	r3, r2
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	0691      	lsls	r1, r2, #26
 8008720:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008722:	430a      	orrs	r2, r1
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800872e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008730:	e07e      	b.n	8008830 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008738:	4b91      	ldr	r3, [pc, #580]	; (8008980 <HAL_ADC_ConfigChannel+0x78c>)
 800873a:	4013      	ands	r3, r2
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	0691      	lsls	r1, r2, #26
 8008742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008744:	430a      	orrs	r2, r1
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008750:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008752:	e06d      	b.n	8008830 <HAL_ADC_ConfigChannel+0x63c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800875a:	4b89      	ldr	r3, [pc, #548]	; (8008980 <HAL_ADC_ConfigChannel+0x78c>)
 800875c:	4013      	ands	r3, r2
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	0691      	lsls	r1, r2, #26
 8008764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008766:	430a      	orrs	r2, r1
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008772:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008774:	e05c      	b.n	8008830 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800877c:	4b80      	ldr	r3, [pc, #512]	; (8008980 <HAL_ADC_ConfigChannel+0x78c>)
 800877e:	4013      	ands	r3, r2
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	0691      	lsls	r1, r2, #26
 8008786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008788:	430a      	orrs	r2, r1
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008794:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008796:	e04b      	b.n	8008830 <HAL_ADC_ConfigChannel+0x63c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	069b      	lsls	r3, r3, #26
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d107      	bne.n	80087bc <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80087ba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	069b      	lsls	r3, r3, #26
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d107      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80087de:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	069b      	lsls	r3, r3, #26
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d107      	bne.n	8008804 <HAL_ADC_ConfigChannel+0x610>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008802:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	069b      	lsls	r3, r3, #26
 8008814:	429a      	cmp	r2, r3
 8008816:	d10a      	bne.n	800882e <HAL_ADC_ConfigChannel+0x63a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008826:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8008828:	e001      	b.n	800882e <HAL_ADC_ConfigChannel+0x63a>
    }

  }
 800882a:	bf00      	nop
 800882c:	e000      	b.n	8008830 <HAL_ADC_ConfigChannel+0x63c>
      break;
 800882e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	2b01      	cmp	r3, #1
 800883c:	d108      	bne.n	8008850 <HAL_ADC_ConfigChannel+0x65c>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_ADC_ConfigChannel+0x65c>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <HAL_ADC_ConfigChannel+0x65e>
 8008850:	2300      	movs	r3, #0
 8008852:	2b00      	cmp	r3, #0
 8008854:	f040 8130 	bne.w	8008ab8 <HAL_ADC_ConfigChannel+0x8c4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d00f      	beq.n	8008880 <HAL_ADC_ConfigChannel+0x68c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2201      	movs	r2, #1
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	43da      	mvns	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	400a      	ands	r2, r1
 800887a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800887e:	e049      	b.n	8008914 <HAL_ADC_ConfigChannel+0x720>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2201      	movs	r2, #1
 800888e:	409a      	lsls	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d91c      	bls.n	80088dc <HAL_ADC_ConfigChannel+0x6e8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6999      	ldr	r1, [r3, #24]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	3b1b      	subs	r3, #27
 80088b4:	2207      	movs	r2, #7
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	43db      	mvns	r3, r3
 80088bc:	4019      	ands	r1, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6898      	ldr	r0, [r3, #8]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4613      	mov	r3, r2
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	4413      	add	r3, r2
 80088cc:	3b1b      	subs	r3, #27
 80088ce:	fa00 f203 	lsl.w	r2, r0, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	619a      	str	r2, [r3, #24]
 80088da:	e01b      	b.n	8008914 <HAL_ADC_ConfigChannel+0x720>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6959      	ldr	r1, [r3, #20]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	4613      	mov	r3, r2
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	4413      	add	r3, r2
 80088ee:	2207      	movs	r2, #7
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	43db      	mvns	r3, r3
 80088f6:	4019      	ands	r1, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	6898      	ldr	r0, [r3, #8]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	fa00 f203 	lsl.w	r2, r0, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800891c:	d004      	beq.n	8008928 <HAL_ADC_ConfigChannel+0x734>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a18      	ldr	r2, [pc, #96]	; (8008984 <HAL_ADC_ConfigChannel+0x790>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d101      	bne.n	800892c <HAL_ADC_ConfigChannel+0x738>
 8008928:	4b17      	ldr	r3, [pc, #92]	; (8008988 <HAL_ADC_ConfigChannel+0x794>)
 800892a:	e000      	b.n	800892e <HAL_ADC_ConfigChannel+0x73a>
 800892c:	4b17      	ldr	r3, [pc, #92]	; (800898c <HAL_ADC_ConfigChannel+0x798>)
 800892e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b10      	cmp	r3, #16
 8008936:	d105      	bne.n	8008944 <HAL_ADC_ConfigChannel+0x750>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8008938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008940:	2b00      	cmp	r3, #0
 8008942:	d015      	beq.n	8008970 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8008948:	2b11      	cmp	r3, #17
 800894a:	d105      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x764>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800894c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800895c:	2b12      	cmp	r3, #18
 800895e:	f040 80ab 	bne.w	8008ab8 <HAL_ADC_ConfigChannel+0x8c4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8008962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 80a4 	bne.w	8008ab8 <HAL_ADC_ConfigChannel+0x8c4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008978:	d10a      	bne.n	8008990 <HAL_ADC_ConfigChannel+0x79c>
 800897a:	4b02      	ldr	r3, [pc, #8]	; (8008984 <HAL_ADC_ConfigChannel+0x790>)
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e022      	b.n	80089c6 <HAL_ADC_ConfigChannel+0x7d2>
 8008980:	83fff000 	.word	0x83fff000
 8008984:	50000100 	.word	0x50000100
 8008988:	50000300 	.word	0x50000300
 800898c:	50000700 	.word	0x50000700
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a4d      	ldr	r2, [pc, #308]	; (8008acc <HAL_ADC_ConfigChannel+0x8d8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d103      	bne.n	80089a2 <HAL_ADC_ConfigChannel+0x7ae>
 800899a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	e011      	b.n	80089c6 <HAL_ADC_ConfigChannel+0x7d2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a4a      	ldr	r2, [pc, #296]	; (8008ad0 <HAL_ADC_ConfigChannel+0x8dc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d102      	bne.n	80089b2 <HAL_ADC_ConfigChannel+0x7be>
 80089ac:	4b49      	ldr	r3, [pc, #292]	; (8008ad4 <HAL_ADC_ConfigChannel+0x8e0>)
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e009      	b.n	80089c6 <HAL_ADC_ConfigChannel+0x7d2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a47      	ldr	r2, [pc, #284]	; (8008ad4 <HAL_ADC_ConfigChannel+0x8e0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d102      	bne.n	80089c2 <HAL_ADC_ConfigChannel+0x7ce>
 80089bc:	4b44      	ldr	r3, [pc, #272]	; (8008ad0 <HAL_ADC_ConfigChannel+0x8dc>)
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e001      	b.n	80089c6 <HAL_ADC_ConfigChannel+0x7d2>
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d108      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x7f2>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x7f2>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <HAL_ADC_ConfigChannel+0x7f4>
 80089e6:	2300      	movs	r3, #0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d150      	bne.n	8008a8e <HAL_ADC_ConfigChannel+0x89a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80089ec:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d010      	beq.n	8008a14 <HAL_ADC_ConfigChannel+0x820>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d107      	bne.n	8008a0e <HAL_ADC_ConfigChannel+0x81a>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_ADC_ConfigChannel+0x81a>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <HAL_ADC_ConfigChannel+0x81c>
 8008a0e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d13c      	bne.n	8008a8e <HAL_ADC_ConfigChannel+0x89a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d11d      	bne.n	8008a58 <HAL_ADC_ConfigChannel+0x864>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a24:	d118      	bne.n	8008a58 <HAL_ADC_ConfigChannel+0x864>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8008a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a30:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008a32:	4b29      	ldr	r3, [pc, #164]	; (8008ad8 <HAL_ADC_ConfigChannel+0x8e4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a29      	ldr	r2, [pc, #164]	; (8008adc <HAL_ADC_ConfigChannel+0x8e8>)
 8008a38:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3c:	0c9a      	lsrs	r2, r3, #18
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008a48:	e002      	b.n	8008a50 <HAL_ADC_ConfigChannel+0x85c>
          {
            wait_loop_index--;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1f9      	bne.n	8008a4a <HAL_ADC_ConfigChannel+0x856>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008a56:	e02e      	b.n	8008ab6 <HAL_ADC_ConfigChannel+0x8c2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b11      	cmp	r3, #17
 8008a5e:	d10b      	bne.n	8008a78 <HAL_ADC_ConfigChannel+0x884>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a68:	d106      	bne.n	8008a78 <HAL_ADC_ConfigChannel+0x884>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8008a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a74:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008a76:	e01e      	b.n	8008ab6 <HAL_ADC_ConfigChannel+0x8c2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b12      	cmp	r3, #18
 8008a7e:	d11a      	bne.n	8008ab6 <HAL_ADC_ConfigChannel+0x8c2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8008a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a8a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008a8c:	e013      	b.n	8008ab6 <HAL_ADC_ConfigChannel+0x8c2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	f043 0220 	orr.w	r2, r3, #32
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008aa0:	e00a      	b.n	8008ab8 <HAL_ADC_ConfigChannel+0x8c4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	f043 0220 	orr.w	r2, r3, #32
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008ab4:	e000      	b.n	8008ab8 <HAL_ADC_ConfigChannel+0x8c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008ab6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008ac0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3768      	adds	r7, #104	; 0x68
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	50000100 	.word	0x50000100
 8008ad0:	50000400 	.word	0x50000400
 8008ad4:	50000500 	.word	0x50000500
 8008ad8:	2000032c 	.word	0x2000032c
 8008adc:	431bde83 	.word	0x431bde83

08008ae0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b09c      	sub	sp, #112	; 0x70
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b00:	d013      	beq.n	8008b2a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a85      	ldr	r2, [pc, #532]	; (8008d1c <HAL_ADCEx_InjectedConfigChannel+0x23c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00e      	beq.n	8008b2a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a83      	ldr	r2, [pc, #524]	; (8008d20 <HAL_ADCEx_InjectedConfigChannel+0x240>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d009      	beq.n	8008b2a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a82      	ldr	r2, [pc, #520]	; (8008d24 <HAL_ADCEx_InjectedConfigChannel+0x244>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d004      	beq.n	8008b2a <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008b20:	f241 718d 	movw	r1, #6029	; 0x178d
 8008b24:	4880      	ldr	r0, [pc, #512]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008b26:	f7fc fffc 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d020      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d01c      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d018      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d014      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d010      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	2b05      	cmp	r3, #5
 8008b58:	d00c      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b06      	cmp	r3, #6
 8008b60:	d008      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	2b07      	cmp	r3, #7
 8008b68:	d004      	beq.n	8008b74 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008b6a:	f241 718e 	movw	r1, #6030	; 0x178e
 8008b6e:	486e      	ldr	r0, [pc, #440]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008b70:	f7fc ffd7 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d008      	beq.n	8008b8e <HAL_ADCEx_InjectedConfigChannel+0xae>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d004      	beq.n	8008b8e <HAL_ADCEx_InjectedConfigChannel+0xae>
 8008b84:	f241 718f 	movw	r1, #6031	; 0x178f
 8008b88:	4867      	ldr	r0, [pc, #412]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008b8a:	f7fc ffca 	bl	8005b22 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	7f5b      	ldrb	r3, [r3, #29]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <HAL_ADCEx_InjectedConfigChannel+0xc8>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	7f5b      	ldrb	r3, [r3, #29]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d004      	beq.n	8008ba8 <HAL_ADCEx_InjectedConfigChannel+0xc8>
 8008b9e:	f241 7190 	movw	r1, #6032	; 0x1790
 8008ba2:	4861      	ldr	r0, [pc, #388]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008ba4:	f7fc ffbd 	bl	8005b22 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	7f9b      	ldrb	r3, [r3, #30]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d008      	beq.n	8008bc2 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	7f9b      	ldrb	r3, [r3, #30]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d004      	beq.n	8008bc2 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 8008bb8:	f241 7191 	movw	r1, #6033	; 0x1791
 8008bbc:	485a      	ldr	r0, [pc, #360]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008bbe:	f7fc ffb0 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d010      	beq.n	8008bec <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d00c      	beq.n	8008bec <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d008      	beq.n	8008bec <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2bc0      	cmp	r3, #192	; 0xc0
 8008be0:	d004      	beq.n	8008bec <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008be2:	f241 7192 	movw	r1, #6034	; 0x1792
 8008be6:	4850      	ldr	r0, [pc, #320]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008be8:	f7fc ff9b 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	2b0c      	cmp	r3, #12
 8008bf2:	d055      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	2b34      	cmp	r3, #52	; 0x34
 8008bfa:	d051      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	2b10      	cmp	r3, #16
 8008c02:	d04d      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	2b38      	cmp	r3, #56	; 0x38
 8008c0a:	d049      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	2b18      	cmp	r3, #24
 8008c12:	d045      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	4a44      	ldr	r2, [pc, #272]	; (8008d2c <HAL_ADCEx_InjectedConfigChannel+0x24c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d040      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	2b18      	cmp	r3, #24
 8008c24:	d03c      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	2b38      	cmp	r3, #56	; 0x38
 8008c2c:	d038      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	2b0c      	cmp	r3, #12
 8008c34:	d034      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d030      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d02c      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	d028      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d024      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	2b2c      	cmp	r3, #44	; 0x2c
 8008c5c:	d020      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	2b30      	cmp	r3, #48	; 0x30
 8008c64:	d01c      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	2b14      	cmp	r3, #20
 8008c6c:	d018      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	2b1c      	cmp	r3, #28
 8008c74:	d014      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	2b24      	cmp	r3, #36	; 0x24
 8008c7c:	d010      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	2b28      	cmp	r3, #40	; 0x28
 8008c84:	d00c      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	2b3c      	cmp	r3, #60	; 0x3c
 8008c8c:	d008      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d004      	beq.n	8008ca0 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008c96:	f241 7193 	movw	r1, #6035	; 0x1793
 8008c9a:	4823      	ldr	r0, [pc, #140]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008c9c:	f7fc ff41 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d014      	beq.n	8008cd2 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d010      	beq.n	8008cd2 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d00c      	beq.n	8008cd2 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d008      	beq.n	8008cd2 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d004      	beq.n	8008cd2 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008cc8:	f241 7194 	movw	r1, #6036	; 0x1794
 8008ccc:	4816      	ldr	r0, [pc, #88]	; (8008d28 <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008cce:	f7fc ff28 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f003 0318 	and.w	r3, r3, #24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d104      	bne.n	8008cea <HAL_ADCEx_InjectedConfigChannel+0x20a>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce8:	d332      	bcc.n	8008d50 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f003 0318 	and.w	r3, r3, #24
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d104      	bne.n	8008d02 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d00:	d326      	bcc.n	8008d50 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0318 	and.w	r3, r3, #24
 8008d0c:	2b10      	cmp	r3, #16
 8008d0e:	d10f      	bne.n	8008d30 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	2bff      	cmp	r3, #255	; 0xff
 8008d16:	d91b      	bls.n	8008d50 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008d18:	e00a      	b.n	8008d30 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8008d1a:	bf00      	nop
 8008d1c:	50000100 	.word	0x50000100
 8008d20:	50000400 	.word	0x50000400
 8008d24:	50000500 	.word	0x50000500
 8008d28:	0803350c 	.word	0x0803350c
 8008d2c:	00010008 	.word	0x00010008
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f003 0318 	and.w	r3, r3, #24
 8008d3a:	2b18      	cmp	r3, #24
 8008d3c:	d103      	bne.n	8008d46 <HAL_ADCEx_InjectedConfigChannel+0x266>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	2b3f      	cmp	r3, #63	; 0x3f
 8008d44:	d904      	bls.n	8008d50 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008d46:	f241 7195 	movw	r1, #6037	; 0x1795
 8008d4a:	4889      	ldr	r0, [pc, #548]	; (8008f70 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008d4c:	f7fc fee9 	bl	8005b22 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d02e      	beq.n	8008db6 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  {
    assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d010      	beq.n	8008d82 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d00c      	beq.n	8008d82 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d008      	beq.n	8008d82 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d004      	beq.n	8008d82 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008d78:	f241 7199 	movw	r1, #6041	; 0x1799
 8008d7c:	487c      	ldr	r0, [pc, #496]	; (8008f70 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008d7e:	f7fc fed0 	bl	8005b22 <assert_failed>
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d904      	bls.n	8008d9c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
 8008d92:	f241 719a 	movw	r1, #6042	; 0x179a
 8008d96:	4876      	ldr	r0, [pc, #472]	; (8008f70 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008d98:	f7fc fec3 	bl	8005b22 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	7f1b      	ldrb	r3, [r3, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d008      	beq.n	8008db6 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	7f1b      	ldrb	r3, [r3, #28]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d004      	beq.n	8008db6 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 8008dac:	f241 719b 	movw	r1, #6043	; 0x179b
 8008db0:	486f      	ldr	r0, [pc, #444]	; (8008f70 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008db2:	f7fc feb6 	bl	8005b22 <assert_failed>
  }
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d063      	beq.n	8008e86 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
  {
    assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	f000 809c 	beq.w	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	f000 8097 	beq.w	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	f000 8092 	beq.w	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	f000 808d 	beq.w	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	f000 8088 	beq.w	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b06      	cmp	r3, #6
 8008df6:	f000 8083 	beq.w	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b07      	cmp	r3, #7
 8008e00:	d07e      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d07a      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b09      	cmp	r3, #9
 8008e10:	d076      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b0a      	cmp	r3, #10
 8008e18:	d072      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b0b      	cmp	r3, #11
 8008e20:	d06e      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b0c      	cmp	r3, #12
 8008e28:	d06a      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b0d      	cmp	r3, #13
 8008e30:	d066      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b0e      	cmp	r3, #14
 8008e38:	d062      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b0f      	cmp	r3, #15
 8008e40:	d05e      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d05a      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b11      	cmp	r3, #17
 8008e50:	d056      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b12      	cmp	r3, #18
 8008e58:	d052      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b0f      	cmp	r3, #15
 8008e60:	d04e      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b11      	cmp	r3, #17
 8008e68:	d04a      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b11      	cmp	r3, #17
 8008e70:	d046      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b11      	cmp	r3, #17
 8008e78:	d042      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e7a:	f241 71a3 	movw	r1, #6051	; 0x17a3
 8008e7e:	483c      	ldr	r0, [pc, #240]	; (8008f70 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008e80:	f7fc fe4f 	bl	8005b22 <assert_failed>
 8008e84:	e03c      	b.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d038      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d034      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d030      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d02c      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d028      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b06      	cmp	r3, #6
 8008eb4:	d024      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b07      	cmp	r3, #7
 8008ebc:	d020      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d01c      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b09      	cmp	r3, #9
 8008ecc:	d018      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b0a      	cmp	r3, #10
 8008ed4:	d014      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b0b      	cmp	r3, #11
 8008edc:	d010      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b0c      	cmp	r3, #12
 8008ee4:	d00c      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b0d      	cmp	r3, #13
 8008eec:	d008      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b0e      	cmp	r3, #14
 8008ef4:	d004      	beq.n	8008f00 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ef6:	f241 71a7 	movw	r1, #6055	; 0x17a7
 8008efa:	481d      	ldr	r0, [pc, #116]	; (8008f70 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008efc:	f7fc fe11 	bl	8005b22 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <HAL_ADCEx_InjectedConfigChannel+0x42e>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	e36a      	b.n	80095e4 <HAL_ADCEx_InjectedConfigChannel+0xb04>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_ADCEx_InjectedConfigChannel+0x446>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d158      	bne.n	8008fd8 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d14a      	bne.n	8008fc4 <HAL_ADCEx_InjectedConfigChannel+0x4e4>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d032      	beq.n	8008f9c <HAL_ADCEx_InjectedConfigChannel+0x4bc>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	021a      	lsls	r2, r3, #8
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	490c      	ldr	r1, [pc, #48]	; (8008f74 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8008f42:	428b      	cmp	r3, r1
 8008f44:	d004      	beq.n	8008f50 <HAL_ADCEx_InjectedConfigChannel+0x470>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	490b      	ldr	r1, [pc, #44]	; (8008f78 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	d11b      	bne.n	8008f88 <HAL_ADCEx_InjectedConfigChannel+0x4a8>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d015      	beq.n	8008f84 <HAL_ADCEx_InjectedConfigChannel+0x4a4>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	2b14      	cmp	r3, #20
 8008f5e:	d00f      	beq.n	8008f80 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	2b1c      	cmp	r3, #28
 8008f66:	d009      	beq.n	8008f7c <HAL_ADCEx_InjectedConfigChannel+0x49c>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	e00e      	b.n	8008f8c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8008f6e:	bf00      	nop
 8008f70:	0803350c 	.word	0x0803350c
 8008f74:	50000400 	.word	0x50000400
 8008f78:	50000500 	.word	0x50000500
 8008f7c:	2310      	movs	r3, #16
 8008f7e:	e005      	b.n	8008f8c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8008f80:	231c      	movs	r3, #28
 8008f82:	e003      	b.n	8008f8c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8008f84:	2334      	movs	r3, #52	; 0x34
 8008f86:	e001      	b.n	8008f8c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	4313      	orrs	r3, r2
 8008f94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f96:	4313      	orrs	r3, r2
 8008f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f9a:	e005      	b.n	8008fa8 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	021b      	lsls	r3, r3, #8
 8008fa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fae:	4b87      	ldr	r3, [pc, #540]	; (80091cc <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6812      	ldr	r2, [r2, #0]
 8008fb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fb8:	430b      	orrs	r3, r1
 8008fba:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fc0:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8008fc2:	e07f      	b.n	80090c4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	f043 0220 	orr.w	r2, r3, #32
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8008fd6:	e075      	b.n	80090c4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d140      	bne.n	8009062 <HAL_ADCEx_InjectedConfigChannel+0x582>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	699a      	ldr	r2, [r3, #24]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d02d      	beq.n	8009052 <HAL_ADCEx_InjectedConfigChannel+0x572>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	1e59      	subs	r1, r3, #1
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4872      	ldr	r0, [pc, #456]	; (80091d0 <HAL_ADCEx_InjectedConfigChannel+0x6f0>)
 8009006:	4283      	cmp	r3, r0
 8009008:	d004      	beq.n	8009014 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4871      	ldr	r0, [pc, #452]	; (80091d4 <HAL_ADCEx_InjectedConfigChannel+0x6f4>)
 8009010:	4283      	cmp	r3, r0
 8009012:	d114      	bne.n	800903e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	2b08      	cmp	r3, #8
 800901a:	d00e      	beq.n	800903a <HAL_ADCEx_InjectedConfigChannel+0x55a>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	2b14      	cmp	r3, #20
 8009022:	d008      	beq.n	8009036 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	2b1c      	cmp	r3, #28
 800902a:	d002      	beq.n	8009032 <HAL_ADCEx_InjectedConfigChannel+0x552>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	e007      	b.n	8009042 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8009032:	2310      	movs	r3, #16
 8009034:	e005      	b.n	8009042 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8009036:	231c      	movs	r3, #28
 8009038:	e003      	b.n	8009042 <HAL_ADCEx_InjectedConfigChannel+0x562>
 800903a:	2334      	movs	r3, #52	; 0x34
 800903c:	e001      	b.n	8009042 <HAL_ADCEx_InjectedConfigChannel+0x562>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	4319      	orrs	r1, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	430b      	orrs	r3, r1
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	649a      	str	r2, [r3, #72]	; 0x48
 8009050:	e007      	b.n	8009062 <HAL_ADCEx_InjectedConfigChannel+0x582>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	3b01      	subs	r3, #1
 800905c:	431a      	orrs	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	4413      	add	r3, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	3302      	adds	r3, #2
 8009074:	221f      	movs	r2, #31
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	43db      	mvns	r3, r3
 800907c:	4019      	ands	r1, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	4413      	add	r3, r2
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	3302      	adds	r3, #2
 8009090:	fa00 f303 	lsl.w	r3, r0, r3
 8009094:	ea41 0203 	orr.w	r2, r1, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090a0:	1e5a      	subs	r2, r3, #1
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10a      	bne.n	80090c4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090b4:	4b45      	ldr	r3, [pc, #276]	; (80091cc <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	430b      	orrs	r3, r1
 80090c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 0308 	and.w	r3, r3, #8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d12d      	bne.n	800912e <HAL_ADCEx_InjectedConfigChannel+0x64e>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	7f5b      	ldrb	r3, [r3, #29]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d110      	bne.n	80090fc <HAL_ADCEx_InjectedConfigChannel+0x61c>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	7f9b      	ldrb	r3, [r3, #30]
 80090e8:	055a      	lsls	r2, r3, #21
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	7f1b      	ldrb	r3, [r3, #28]
 80090ee:	051b      	lsls	r3, r3, #20
 80090f0:	431a      	orrs	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	60da      	str	r2, [r3, #12]
 80090fa:	e018      	b.n	800912e <HAL_ADCEx_InjectedConfigChannel+0x64e>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	7f9b      	ldrb	r3, [r3, #30]
 800910a:	055a      	lsls	r2, r3, #21
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	7f1b      	ldrb	r3, [r3, #28]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d108      	bne.n	800912e <HAL_ADCEx_InjectedConfigChannel+0x64e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009120:	f043 0220 	orr.w	r2, r3, #32
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 030c 	and.w	r3, r3, #12
 8009138:	2b00      	cmp	r3, #0
 800913a:	f040 8110 	bne.w	800935e <HAL_ADCEx_InjectedConfigChannel+0x87e>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d10c      	bne.n	8009160 <HAL_ADCEx_InjectedConfigChannel+0x680>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	7f5b      	ldrb	r3, [r3, #29]
 8009154:	065a      	lsls	r2, r3, #25
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	e014      	b.n	800918a <HAL_ADCEx_InjectedConfigChannel+0x6aa>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800916e:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	7f5b      	ldrb	r3, [r3, #29]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d108      	bne.n	800918a <HAL_ADCEx_InjectedConfigChannel+0x6aa>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917c:	f043 0220 	orr.w	r2, r3, #32
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b09      	cmp	r3, #9
 8009190:	d922      	bls.n	80091d8 <HAL_ADCEx_InjectedConfigChannel+0x6f8>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6999      	ldr	r1, [r3, #24]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	4613      	mov	r3, r2
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	4413      	add	r3, r2
 80091a2:	3b1e      	subs	r3, #30
 80091a4:	2207      	movs	r2, #7
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	43db      	mvns	r3, r3
 80091ac:	4019      	ands	r1, r3
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	6898      	ldr	r0, [r3, #8]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	4613      	mov	r3, r2
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	4413      	add	r3, r2
 80091bc:	3b1e      	subs	r3, #30
 80091be:	fa00 f203 	lsl.w	r2, r0, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	619a      	str	r2, [r3, #24]
 80091ca:	e01f      	b.n	800920c <HAL_ADCEx_InjectedConfigChannel+0x72c>
 80091cc:	82082000 	.word	0x82082000
 80091d0:	50000400 	.word	0x50000400
 80091d4:	50000500 	.word	0x50000500
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6959      	ldr	r1, [r3, #20]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4613      	mov	r3, r2
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	2207      	movs	r2, #7
 80091ea:	fa02 f303 	lsl.w	r3, r2, r3
 80091ee:	43db      	mvns	r3, r3
 80091f0:	4019      	ands	r1, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	6898      	ldr	r0, [r3, #8]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4613      	mov	r3, r2
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4413      	add	r3, r2
 8009200:	fa00 f203 	lsl.w	r2, r0, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	695a      	ldr	r2, [r3, #20]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	08db      	lsrs	r3, r3, #3
 8009218:	f003 0303 	and.w	r3, r3, #3
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	fa02 f303 	lsl.w	r3, r2, r3
 8009222:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	3b01      	subs	r3, #1
 800922a:	2b03      	cmp	r3, #3
 800922c:	d84e      	bhi.n	80092cc <HAL_ADCEx_InjectedConfigChannel+0x7ec>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <HAL_ADCEx_InjectedConfigChannel+0x754>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009245 	.word	0x08009245
 8009238:	08009267 	.word	0x08009267
 800923c:	08009289 	.word	0x08009289
 8009240:	080092ab 	.word	0x080092ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800924a:	4b9a      	ldr	r3, [pc, #616]	; (80094b4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 800924c:	4013      	ands	r3, r2
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	6812      	ldr	r2, [r2, #0]
 8009252:	0691      	lsls	r1, r2, #26
 8009254:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009256:	430a      	orrs	r2, r1
 8009258:	431a      	orrs	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009262:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8009264:	e07e      	b.n	8009364 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800926c:	4b91      	ldr	r3, [pc, #580]	; (80094b4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 800926e:	4013      	ands	r3, r2
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	6812      	ldr	r2, [r2, #0]
 8009274:	0691      	lsls	r1, r2, #26
 8009276:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009278:	430a      	orrs	r2, r1
 800927a:	431a      	orrs	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009284:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8009286:	e06d      	b.n	8009364 <HAL_ADCEx_InjectedConfigChannel+0x884>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800928e:	4b89      	ldr	r3, [pc, #548]	; (80094b4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 8009290:	4013      	ands	r3, r2
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	0691      	lsls	r1, r2, #26
 8009298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800929a:	430a      	orrs	r2, r1
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80092a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80092a8:	e05c      	b.n	8009364 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80092b0:	4b80      	ldr	r3, [pc, #512]	; (80094b4 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 80092b2:	4013      	ands	r3, r2
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	6812      	ldr	r2, [r2, #0]
 80092b8:	0691      	lsls	r1, r2, #26
 80092ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092bc:	430a      	orrs	r2, r1
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80092c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80092ca:	e04b      	b.n	8009364 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	069b      	lsls	r3, r3, #26
 80092dc:	429a      	cmp	r2, r3
 80092de:	d107      	bne.n	80092f0 <HAL_ADCEx_InjectedConfigChannel+0x810>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80092ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	069b      	lsls	r3, r3, #26
 8009300:	429a      	cmp	r2, r3
 8009302:	d107      	bne.n	8009314 <HAL_ADCEx_InjectedConfigChannel+0x834>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009312:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800931a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	069b      	lsls	r3, r3, #26
 8009324:	429a      	cmp	r2, r3
 8009326:	d107      	bne.n	8009338 <HAL_ADCEx_InjectedConfigChannel+0x858>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009336:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	069b      	lsls	r3, r3, #26
 8009348:	429a      	cmp	r2, r3
 800934a:	d10a      	bne.n	8009362 <HAL_ADCEx_InjectedConfigChannel+0x882>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800935a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800935c:	e001      	b.n	8009362 <HAL_ADCEx_InjectedConfigChannel+0x882>
    }
    
  }
 800935e:	bf00      	nop
 8009360:	e000      	b.n	8009364 <HAL_ADCEx_InjectedConfigChannel+0x884>
      break;
 8009362:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	2b01      	cmp	r3, #1
 8009370:	d108      	bne.n	8009384 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
 8009384:	2300      	movs	r3, #0
 8009386:	2b00      	cmp	r3, #0
 8009388:	f040 8126 	bne.w	80095d8 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d00f      	beq.n	80093b4 <HAL_ADCEx_InjectedConfigChannel+0x8d4>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2201      	movs	r2, #1
 80093a2:	fa02 f303 	lsl.w	r3, r2, r3
 80093a6:	43da      	mvns	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	400a      	ands	r2, r1
 80093ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80093b2:	e049      	b.n	8009448 <HAL_ADCEx_InjectedConfigChannel+0x968>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2201      	movs	r2, #1
 80093c2:	409a      	lsls	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d91c      	bls.n	8009410 <HAL_ADCEx_InjectedConfigChannel+0x930>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6999      	ldr	r1, [r3, #24]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	4613      	mov	r3, r2
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	4413      	add	r3, r2
 80093e6:	3b1b      	subs	r3, #27
 80093e8:	2207      	movs	r2, #7
 80093ea:	fa02 f303 	lsl.w	r3, r2, r3
 80093ee:	43db      	mvns	r3, r3
 80093f0:	4019      	ands	r1, r3
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6898      	ldr	r0, [r3, #8]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	4413      	add	r3, r2
 8009400:	3b1b      	subs	r3, #27
 8009402:	fa00 f203 	lsl.w	r2, r0, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	619a      	str	r2, [r3, #24]
 800940e:	e01b      	b.n	8009448 <HAL_ADCEx_InjectedConfigChannel+0x968>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6959      	ldr	r1, [r3, #20]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	4613      	mov	r3, r2
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	4413      	add	r3, r2
 8009422:	2207      	movs	r2, #7
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	43db      	mvns	r3, r3
 800942a:	4019      	ands	r1, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	6898      	ldr	r0, [r3, #8]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	4613      	mov	r3, r2
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	4413      	add	r3, r2
 800943c:	fa00 f203 	lsl.w	r2, r0, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009450:	d004      	beq.n	800945c <HAL_ADCEx_InjectedConfigChannel+0x97c>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d101      	bne.n	8009460 <HAL_ADCEx_InjectedConfigChannel+0x980>
 800945c:	4b17      	ldr	r3, [pc, #92]	; (80094bc <HAL_ADCEx_InjectedConfigChannel+0x9dc>)
 800945e:	e000      	b.n	8009462 <HAL_ADCEx_InjectedConfigChannel+0x982>
 8009460:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <HAL_ADCEx_InjectedConfigChannel+0x9e0>)
 8009462:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b10      	cmp	r3, #16
 800946a:	d105      	bne.n	8009478 <HAL_ADCEx_InjectedConfigChannel+0x998>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800946c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8009474:	2b00      	cmp	r3, #0
 8009476:	d015      	beq.n	80094a4 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800947c:	2b11      	cmp	r3, #17
 800947e:	d105      	bne.n	800948c <HAL_ADCEx_InjectedConfigChannel+0x9ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8009480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00b      	beq.n	80094a4 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8009490:	2b12      	cmp	r3, #18
 8009492:	f040 80a1 	bne.w	80095d8 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8009496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f040 809a 	bne.w	80095d8 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094ac:	d10a      	bne.n	80094c4 <HAL_ADCEx_InjectedConfigChannel+0x9e4>
 80094ae:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	e022      	b.n	80094fa <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 80094b4:	83fff000 	.word	0x83fff000
 80094b8:	50000100 	.word	0x50000100
 80094bc:	50000300 	.word	0x50000300
 80094c0:	50000700 	.word	0x50000700
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a48      	ldr	r2, [pc, #288]	; (80095ec <HAL_ADCEx_InjectedConfigChannel+0xb0c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d103      	bne.n	80094d6 <HAL_ADCEx_InjectedConfigChannel+0x9f6>
 80094ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80094d2:	613b      	str	r3, [r7, #16]
 80094d4:	e011      	b.n	80094fa <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a45      	ldr	r2, [pc, #276]	; (80095f0 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d102      	bne.n	80094e6 <HAL_ADCEx_InjectedConfigChannel+0xa06>
 80094e0:	4b44      	ldr	r3, [pc, #272]	; (80095f4 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 80094e2:	613b      	str	r3, [r7, #16]
 80094e4:	e009      	b.n	80094fa <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a42      	ldr	r2, [pc, #264]	; (80095f4 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d102      	bne.n	80094f6 <HAL_ADCEx_InjectedConfigChannel+0xa16>
 80094f0:	4b3f      	ldr	r3, [pc, #252]	; (80095f0 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 80094f2:	613b      	str	r3, [r7, #16]
 80094f4:	e001      	b.n	80094fa <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 80094f6:	2300      	movs	r3, #0
 80094f8:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0303 	and.w	r3, r3, #3
 8009504:	2b01      	cmp	r3, #1
 8009506:	d108      	bne.n	800951a <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 8009516:	2301      	movs	r3, #1
 8009518:	e000      	b.n	800951c <HAL_ADCEx_InjectedConfigChannel+0xa3c>
 800951a:	2300      	movs	r3, #0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d150      	bne.n	80095c2 <HAL_ADCEx_InjectedConfigChannel+0xae2>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8009520:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8009522:	2b00      	cmp	r3, #0
 8009524:	d010      	beq.n	8009548 <HAL_ADCEx_InjectedConfigChannel+0xa68>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	2b01      	cmp	r3, #1
 8009530:	d107      	bne.n	8009542 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <HAL_ADCEx_InjectedConfigChannel+0xa64>
 8009542:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8009544:	2b00      	cmp	r3, #0
 8009546:	d13c      	bne.n	80095c2 <HAL_ADCEx_InjectedConfigChannel+0xae2>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b10      	cmp	r3, #16
 800954e:	d11d      	bne.n	800958c <HAL_ADCEx_InjectedConfigChannel+0xaac>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009558:	d118      	bne.n	800958c <HAL_ADCEx_InjectedConfigChannel+0xaac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800955a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009564:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009566:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <HAL_ADCEx_InjectedConfigChannel+0xb18>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a24      	ldr	r2, [pc, #144]	; (80095fc <HAL_ADCEx_InjectedConfigChannel+0xb1c>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	0c9a      	lsrs	r2, r3, #18
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800957c:	e002      	b.n	8009584 <HAL_ADCEx_InjectedConfigChannel+0xaa4>
          {
            wait_loop_index--;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3b01      	subs	r3, #1
 8009582:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1f9      	bne.n	800957e <HAL_ADCEx_InjectedConfigChannel+0xa9e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800958a:	e024      	b.n	80095d6 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b11      	cmp	r3, #17
 8009592:	d10b      	bne.n	80095ac <HAL_ADCEx_InjectedConfigChannel+0xacc>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800959c:	d106      	bne.n	80095ac <HAL_ADCEx_InjectedConfigChannel+0xacc>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800959e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80095a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095a8:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80095aa:	e014      	b.n	80095d6 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b12      	cmp	r3, #18
 80095b2:	d110      	bne.n	80095d6 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80095b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80095bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095be:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80095c0:	e009      	b.n	80095d6 <HAL_ADCEx_InjectedConfigChannel+0xaf6>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	f043 0220 	orr.w	r2, r3, #32
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80095d4:	e000      	b.n	80095d8 <HAL_ADCEx_InjectedConfigChannel+0xaf8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80095d6:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80095e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3770      	adds	r7, #112	; 0x70
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	50000100 	.word	0x50000100
 80095f0:	50000400 	.word	0x50000400
 80095f4:	50000500 	.word	0x50000500
 80095f8:	2000032c 	.word	0x2000032c
 80095fc:	431bde83 	.word	0x431bde83

08009600 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b098      	sub	sp, #96	; 0x60
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009618:	d009      	beq.n	800962e <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a8c      	ldr	r2, [pc, #560]	; (8009850 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d004      	beq.n	800962e <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8009624:	f641 3194 	movw	r1, #7060	; 0x1b94
 8009628:	488a      	ldr	r0, [pc, #552]	; (8009854 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 800962a:	f7fc fa7a 	bl	8005b22 <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d020      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d01c      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b02      	cmp	r3, #2
 8009644:	d018      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b03      	cmp	r3, #3
 800964c:	d014      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b05      	cmp	r3, #5
 8009654:	d010      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b06      	cmp	r3, #6
 800965c:	d00c      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b07      	cmp	r3, #7
 8009664:	d008      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b09      	cmp	r3, #9
 800966c:	d004      	beq.n	8009678 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800966e:	f641 3195 	movw	r1, #7061	; 0x1b95
 8009672:	4878      	ldr	r0, [pc, #480]	; (8009854 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8009674:	f7fc fa55 	bl	8005b22 <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d052      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00e      	beq.n	80096a6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009690:	d009      	beq.n	80096a6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800969a:	d004      	beq.n	80096a6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800969c:	f641 3198 	movw	r1, #7064	; 0x1b98
 80096a0:	486c      	ldr	r0, [pc, #432]	; (8009854 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80096a2:	f7fc fa3e 	bl	8005b22 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d03b      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b6:	d036      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096c0:	d031      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ca:	d02c      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096d4:	d027      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80096de:	d022      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096e8:	d01d      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096f2:	d018      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096fc:	d013      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8009706:	d00e      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009710:	d009      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800971a:	d004      	beq.n	8009726 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800971c:	f641 3199 	movw	r1, #7065	; 0x1b99
 8009720:	484c      	ldr	r0, [pc, #304]	; (8009854 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8009722:	f7fc f9fe 	bl	8005b22 <assert_failed>
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800972e:	d102      	bne.n	8009736 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8009730:	4b49      	ldr	r3, [pc, #292]	; (8009858 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 8009732:	60bb      	str	r3, [r7, #8]
 8009734:	e01a      	b.n	800976c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a47      	ldr	r2, [pc, #284]	; (8009858 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d103      	bne.n	8009748 <HAL_ADCEx_MultiModeConfigChannel+0x148>
 8009740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009744:	60bb      	str	r3, [r7, #8]
 8009746:	e011      	b.n	800976c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a40      	ldr	r2, [pc, #256]	; (8009850 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d102      	bne.n	8009758 <HAL_ADCEx_MultiModeConfigChannel+0x158>
 8009752:	4b42      	ldr	r3, [pc, #264]	; (800985c <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 8009754:	60bb      	str	r3, [r7, #8]
 8009756:	e009      	b.n	800976c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a3f      	ldr	r2, [pc, #252]	; (800985c <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d102      	bne.n	8009768 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009762:	4b3b      	ldr	r3, [pc, #236]	; (8009850 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8009764:	60bb      	str	r3, [r7, #8]
 8009766:	e001      	b.n	800976c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8009768:	2300      	movs	r3, #0
 800976a:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  {
    /* Return function status */
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e0bc      	b.n	80098f0 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 8009780:	2302      	movs	r3, #2
 8009782:	e0b5      	b.n	80098f0 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	f040 8099 	bne.w	80098ce <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f040 8092 	bne.w	80098ce <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b2:	d004      	beq.n	80097be <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a27      	ldr	r2, [pc, #156]	; (8009858 <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d101      	bne.n	80097c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80097be:	4b28      	ldr	r3, [pc, #160]	; (8009860 <HAL_ADCEx_MultiModeConfigChannel+0x260>)
 80097c0:	e000      	b.n	80097c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 80097c2:	4b28      	ldr	r3, [pc, #160]	; (8009864 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 80097c4:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d04c      	beq.n	8009868 <HAL_ADCEx_MultiModeConfigChannel+0x268>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80097ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	6859      	ldr	r1, [r3, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097e0:	035b      	lsls	r3, r3, #13
 80097e2:	430b      	orrs	r3, r1
 80097e4:	431a      	orrs	r2, r3
 80097e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097e8:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f003 0303 	and.w	r3, r3, #3
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d108      	bne.n	800980a <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <HAL_ADCEx_MultiModeConfigChannel+0x20c>
 800980a:	2300      	movs	r3, #0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d168      	bne.n	80098e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f003 0303 	and.w	r3, r3, #3
 8009818:	2b01      	cmp	r3, #1
 800981a:	d107      	bne.n	800982c <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 8009828:	2301      	movs	r3, #1
 800982a:	e000      	b.n	800982e <HAL_ADCEx_MultiModeConfigChannel+0x22e>
 800982c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800982e:	2b00      	cmp	r3, #0
 8009830:	d157      	bne.n	80098e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8009832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800983a:	f023 030f 	bic.w	r3, r3, #15
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	6811      	ldr	r1, [r2, #0]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	6892      	ldr	r2, [r2, #8]
 8009846:	430a      	orrs	r2, r1
 8009848:	431a      	orrs	r2, r3
 800984a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800984c:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800984e:	e048      	b.n	80098e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
 8009850:	50000400 	.word	0x50000400
 8009854:	0803350c 	.word	0x0803350c
 8009858:	50000100 	.word	0x50000100
 800985c:	50000500 	.word	0x50000500
 8009860:	50000300 	.word	0x50000300
 8009864:	50000700 	.word	0x50000700
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009872:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	2b01      	cmp	r3, #1
 8009880:	d108      	bne.n	8009894 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	d101      	bne.n	8009894 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 8009890:	2301      	movs	r3, #1
 8009892:	e000      	b.n	8009896 <HAL_ADCEx_MultiModeConfigChannel+0x296>
 8009894:	2300      	movs	r3, #0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d123      	bne.n	80098e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 0303 	and.w	r3, r3, #3
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d107      	bne.n	80098b6 <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <HAL_ADCEx_MultiModeConfigChannel+0x2b8>
 80098b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d112      	bne.n	80098e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80098bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80098c4:	f023 030f 	bic.w	r3, r3, #15
 80098c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098ca:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80098cc:	e009      	b.n	80098e2 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	f043 0220 	orr.w	r2, r3, #32
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80098e0:	e000      	b.n	80098e4 <HAL_ADCEx_MultiModeConfigChannel+0x2e4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80098e2:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80098ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80098f0:	4618      	mov	r0, r3
 80098f2:	3760      	adds	r7, #96	; 0x60
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	2b01      	cmp	r3, #1
 8009910:	d108      	bne.n	8009924 <ADC_Disable+0x2c>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	2b01      	cmp	r3, #1
 800991e:	d101      	bne.n	8009924 <ADC_Disable+0x2c>
 8009920:	2301      	movs	r3, #1
 8009922:	e000      	b.n	8009926 <ADC_Disable+0x2e>
 8009924:	2300      	movs	r3, #0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d047      	beq.n	80099ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f003 030d 	and.w	r3, r3, #13
 8009934:	2b01      	cmp	r3, #1
 8009936:	d10f      	bne.n	8009958 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0202 	orr.w	r2, r2, #2
 8009946:	609a      	str	r2, [r3, #8]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2203      	movs	r2, #3
 800994e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8009950:	f7fe f85c 	bl	8007a0c <HAL_GetTick>
 8009954:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009956:	e029      	b.n	80099ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995c:	f043 0210 	orr.w	r2, r3, #16
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009968:	f043 0201 	orr.w	r2, r3, #1
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e023      	b.n	80099bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009974:	f7fe f84a 	bl	8007a0c <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b02      	cmp	r3, #2
 8009980:	d914      	bls.n	80099ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b01      	cmp	r3, #1
 800998e:	d10d      	bne.n	80099ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	f043 0210 	orr.w	r2, r3, #16
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a0:	f043 0201 	orr.w	r2, r3, #1
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e007      	b.n	80099bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d0dc      	beq.n	8009974 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <__NVIC_SetPriorityGrouping+0x44>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099e0:	4013      	ands	r3, r2
 80099e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099f6:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <__NVIC_SetPriorityGrouping+0x44>)
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	60d3      	str	r3, [r2, #12]
}
 80099fc:	bf00      	nop
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	e000ed00 	.word	0xe000ed00

08009a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <__NVIC_GetPriorityGrouping+0x18>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	0a1b      	lsrs	r3, r3, #8
 8009a16:	f003 0307 	and.w	r3, r3, #7
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	e000ed00 	.word	0xe000ed00

08009a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	db0b      	blt.n	8009a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	f003 021f 	and.w	r2, r3, #31
 8009a40:	4907      	ldr	r1, [pc, #28]	; (8009a60 <__NVIC_EnableIRQ+0x38>)
 8009a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a46:	095b      	lsrs	r3, r3, #5
 8009a48:	2001      	movs	r0, #1
 8009a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8009a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	e000e100 	.word	0xe000e100

08009a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	6039      	str	r1, [r7, #0]
 8009a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	db0a      	blt.n	8009a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	490c      	ldr	r1, [pc, #48]	; (8009ab0 <__NVIC_SetPriority+0x4c>)
 8009a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a82:	0112      	lsls	r2, r2, #4
 8009a84:	b2d2      	uxtb	r2, r2
 8009a86:	440b      	add	r3, r1
 8009a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a8c:	e00a      	b.n	8009aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	4908      	ldr	r1, [pc, #32]	; (8009ab4 <__NVIC_SetPriority+0x50>)
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	f003 030f 	and.w	r3, r3, #15
 8009a9a:	3b04      	subs	r3, #4
 8009a9c:	0112      	lsls	r2, r2, #4
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	761a      	strb	r2, [r3, #24]
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	e000e100 	.word	0xe000e100
 8009ab4:	e000ed00 	.word	0xe000ed00

08009ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b089      	sub	sp, #36	; 0x24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	f1c3 0307 	rsb	r3, r3, #7
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	bf28      	it	cs
 8009ad6:	2304      	movcs	r3, #4
 8009ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	3304      	adds	r3, #4
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d902      	bls.n	8009ae8 <NVIC_EncodePriority+0x30>
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	3b03      	subs	r3, #3
 8009ae6:	e000      	b.n	8009aea <NVIC_EncodePriority+0x32>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	fa02 f303 	lsl.w	r3, r2, r3
 8009af6:	43da      	mvns	r2, r3
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	401a      	ands	r2, r3
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b00:	f04f 31ff 	mov.w	r1, #4294967295
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0a:	43d9      	mvns	r1, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b10:	4313      	orrs	r3, r2
         );
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3724      	adds	r7, #36	; 0x24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
	...

08009b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b30:	d301      	bcc.n	8009b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b32:	2301      	movs	r3, #1
 8009b34:	e00f      	b.n	8009b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b36:	4a0a      	ldr	r2, [pc, #40]	; (8009b60 <SysTick_Config+0x40>)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b3e:	210f      	movs	r1, #15
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	f7ff ff8e 	bl	8009a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <SysTick_Config+0x40>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b4e:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <SysTick_Config+0x40>)
 8009b50:	2207      	movs	r2, #7
 8009b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	e000e010 	.word	0xe000e010

08009b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b07      	cmp	r3, #7
 8009b70:	d00f      	beq.n	8009b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	d00c      	beq.n	8009b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	d009      	beq.n	8009b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d006      	beq.n	8009b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d003      	beq.n	8009b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009b8a:	21ac      	movs	r1, #172	; 0xac
 8009b8c:	4804      	ldr	r0, [pc, #16]	; (8009ba0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8009b8e:	f7fb ffc8 	bl	8005b22 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff ff16 	bl	80099c4 <__NVIC_SetPriorityGrouping>
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	08033548 	.word	0x08033548

08009ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b0f      	cmp	r3, #15
 8009bba:	d903      	bls.n	8009bc4 <HAL_NVIC_SetPriority+0x20>
 8009bbc:	21c4      	movs	r1, #196	; 0xc4
 8009bbe:	480e      	ldr	r0, [pc, #56]	; (8009bf8 <HAL_NVIC_SetPriority+0x54>)
 8009bc0:	f7fb ffaf 	bl	8005b22 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b0f      	cmp	r3, #15
 8009bc8:	d903      	bls.n	8009bd2 <HAL_NVIC_SetPriority+0x2e>
 8009bca:	21c5      	movs	r1, #197	; 0xc5
 8009bcc:	480a      	ldr	r0, [pc, #40]	; (8009bf8 <HAL_NVIC_SetPriority+0x54>)
 8009bce:	f7fb ffa8 	bl	8005b22 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009bd2:	f7ff ff1b 	bl	8009a0c <__NVIC_GetPriorityGrouping>
 8009bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	68b9      	ldr	r1, [r7, #8]
 8009bdc:	6978      	ldr	r0, [r7, #20]
 8009bde:	f7ff ff6b 	bl	8009ab8 <NVIC_EncodePriority>
 8009be2:	4602      	mov	r2, r0
 8009be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff ff3a 	bl	8009a64 <__NVIC_SetPriority>
}
 8009bf0:	bf00      	nop
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	08033548 	.word	0x08033548

08009bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da03      	bge.n	8009c16 <HAL_NVIC_EnableIRQ+0x1a>
 8009c0e:	21d8      	movs	r1, #216	; 0xd8
 8009c10:	4805      	ldr	r0, [pc, #20]	; (8009c28 <HAL_NVIC_EnableIRQ+0x2c>)
 8009c12:	f7fb ff86 	bl	8005b22 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff ff04 	bl	8009a28 <__NVIC_EnableIRQ>
}
 8009c20:	bf00      	nop
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	08033548 	.word	0x08033548

08009c2c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ff73 	bl	8009b20 <SysTick_Config>
 8009c3a:	4603      	mov	r3, r0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e0a5      	b.n	8009da2 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a54      	ldr	r2, [pc, #336]	; (8009dac <HAL_CRC_Init+0x168>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d003      	beq.n	8009c68 <HAL_CRC_Init+0x24>
 8009c60:	2170      	movs	r1, #112	; 0x70
 8009c62:	4853      	ldr	r0, [pc, #332]	; (8009db0 <HAL_CRC_Init+0x16c>)
 8009c64:	f7fb ff5d 	bl	8005b22 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7f5b      	ldrb	r3, [r3, #29]
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d105      	bne.n	8009c7e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7f7 fafb 	bl	8001274 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2202      	movs	r2, #2
 8009c82:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	791b      	ldrb	r3, [r3, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d007      	beq.n	8009c9c <HAL_CRC_Init+0x58>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	791b      	ldrb	r3, [r3, #4]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d003      	beq.n	8009c9c <HAL_CRC_Init+0x58>
 8009c94:	217e      	movs	r1, #126	; 0x7e
 8009c96:	4846      	ldr	r0, [pc, #280]	; (8009db0 <HAL_CRC_Init+0x16c>)
 8009c98:	f7fb ff43 	bl	8005b22 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	791b      	ldrb	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10c      	bne.n	8009cbe <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a42      	ldr	r2, [pc, #264]	; (8009db4 <HAL_CRC_Init+0x170>)
 8009caa:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 0218 	bic.w	r2, r2, #24
 8009cba:	609a      	str	r2, [r3, #8]
 8009cbc:	e00c      	b.n	8009cd8 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6899      	ldr	r1, [r3, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f875 	bl	8009db8 <HAL_CRCEx_Polynomial_Set>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e064      	b.n	8009da2 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	795b      	ldrb	r3, [r3, #5]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d007      	beq.n	8009cf0 <HAL_CRC_Init+0xac>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	795b      	ldrb	r3, [r3, #5]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d003      	beq.n	8009cf0 <HAL_CRC_Init+0xac>
 8009ce8:	2190      	movs	r1, #144	; 0x90
 8009cea:	4831      	ldr	r0, [pc, #196]	; (8009db0 <HAL_CRC_Init+0x16c>)
 8009cec:	f7fb ff19 	bl	8005b22 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	795b      	ldrb	r3, [r3, #5]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d105      	bne.n	8009d04 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009d00:	611a      	str	r2, [r3, #16]
 8009d02:	e004      	b.n	8009d0e <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6912      	ldr	r2, [r2, #16]
 8009d0c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00f      	beq.n	8009d36 <HAL_CRC_Init+0xf2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d00b      	beq.n	8009d36 <HAL_CRC_Init+0xf2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b40      	cmp	r3, #64	; 0x40
 8009d24:	d007      	beq.n	8009d36 <HAL_CRC_Init+0xf2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	2b60      	cmp	r3, #96	; 0x60
 8009d2c:	d003      	beq.n	8009d36 <HAL_CRC_Init+0xf2>
 8009d2e:	219c      	movs	r1, #156	; 0x9c
 8009d30:	481f      	ldr	r0, [pc, #124]	; (8009db0 <HAL_CRC_Init+0x16c>)
 8009d32:	f7fb fef6 	bl	8005b22 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	695a      	ldr	r2, [r3, #20]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d007      	beq.n	8009d64 <HAL_CRC_Init+0x120>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	2b80      	cmp	r3, #128	; 0x80
 8009d5a:	d003      	beq.n	8009d64 <HAL_CRC_Init+0x120>
 8009d5c:	21a0      	movs	r1, #160	; 0xa0
 8009d5e:	4814      	ldr	r0, [pc, #80]	; (8009db0 <HAL_CRC_Init+0x16c>)
 8009d60:	f7fb fedf 	bl	8005b22 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	699a      	ldr	r2, [r3, #24]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d00b      	beq.n	8009d9a <HAL_CRC_Init+0x156>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d007      	beq.n	8009d9a <HAL_CRC_Init+0x156>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d003      	beq.n	8009d9a <HAL_CRC_Init+0x156>
 8009d92:	21a5      	movs	r1, #165	; 0xa5
 8009d94:	4806      	ldr	r0, [pc, #24]	; (8009db0 <HAL_CRC_Init+0x16c>)
 8009d96:	f7fb fec4 	bl	8005b22 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	40023000 	.word	0x40023000
 8009db0:	08033584 	.word	0x08033584
 8009db4:	04c11db7 	.word	0x04c11db7

08009db8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009dc8:	231f      	movs	r3, #31
 8009dca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00c      	beq.n	8009dec <HAL_CRCEx_Polynomial_Set+0x34>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d009      	beq.n	8009dec <HAL_CRCEx_Polynomial_Set+0x34>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	d006      	beq.n	8009dec <HAL_CRCEx_Polynomial_Set+0x34>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b18      	cmp	r3, #24
 8009de2:	d003      	beq.n	8009dec <HAL_CRCEx_Polynomial_Set+0x34>
 8009de4:	215f      	movs	r1, #95	; 0x5f
 8009de6:	483e      	ldr	r0, [pc, #248]	; (8009ee0 <HAL_CRCEx_Polynomial_Set+0x128>)
 8009de8:	f7fb fe9b 	bl	8005b22 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009dec:	bf00      	nop
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	1e5a      	subs	r2, r3, #1
 8009df2:	613a      	str	r2, [r7, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d009      	beq.n	8009e0c <HAL_CRCEx_Polynomial_Set+0x54>
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f003 031f 	and.w	r3, r3, #31
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0f0      	beq.n	8009dee <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b18      	cmp	r3, #24
 8009e10:	d846      	bhi.n	8009ea0 <HAL_CRCEx_Polynomial_Set+0xe8>
 8009e12:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <HAL_CRCEx_Polynomial_Set+0x60>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009ea7 	.word	0x08009ea7
 8009e1c:	08009ea1 	.word	0x08009ea1
 8009e20:	08009ea1 	.word	0x08009ea1
 8009e24:	08009ea1 	.word	0x08009ea1
 8009e28:	08009ea1 	.word	0x08009ea1
 8009e2c:	08009ea1 	.word	0x08009ea1
 8009e30:	08009ea1 	.word	0x08009ea1
 8009e34:	08009ea1 	.word	0x08009ea1
 8009e38:	08009e95 	.word	0x08009e95
 8009e3c:	08009ea1 	.word	0x08009ea1
 8009e40:	08009ea1 	.word	0x08009ea1
 8009e44:	08009ea1 	.word	0x08009ea1
 8009e48:	08009ea1 	.word	0x08009ea1
 8009e4c:	08009ea1 	.word	0x08009ea1
 8009e50:	08009ea1 	.word	0x08009ea1
 8009e54:	08009ea1 	.word	0x08009ea1
 8009e58:	08009e89 	.word	0x08009e89
 8009e5c:	08009ea1 	.word	0x08009ea1
 8009e60:	08009ea1 	.word	0x08009ea1
 8009e64:	08009ea1 	.word	0x08009ea1
 8009e68:	08009ea1 	.word	0x08009ea1
 8009e6c:	08009ea1 	.word	0x08009ea1
 8009e70:	08009ea1 	.word	0x08009ea1
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	08009e7d 	.word	0x08009e7d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b06      	cmp	r3, #6
 8009e80:	d913      	bls.n	8009eaa <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e86:	e010      	b.n	8009eaa <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2b07      	cmp	r3, #7
 8009e8c:	d90f      	bls.n	8009eae <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e92:	e00c      	b.n	8009eae <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2b0f      	cmp	r3, #15
 8009e98:	d90b      	bls.n	8009eb2 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e9e:	e008      	b.n	8009eb2 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea4:	e006      	b.n	8009eb4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8009ea6:	bf00      	nop
 8009ea8:	e004      	b.n	8009eb4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8009eaa:	bf00      	nop
 8009eac:	e002      	b.n	8009eb4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8009eae:	bf00      	nop
 8009eb0:	e000      	b.n	8009eb4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8009eb2:	bf00      	nop
  }
  if (status == HAL_OK)
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10d      	bne.n	8009ed6 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f023 0118 	bic.w	r1, r3, #24
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	080335bc 	.word	0x080335bc

08009ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ef8:	d017      	beq.n	8009f2a <HAL_GPIO_Init+0x46>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a36      	ldr	r2, [pc, #216]	; (8009fd8 <HAL_GPIO_Init+0xf4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <HAL_GPIO_Init+0x46>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a35      	ldr	r2, [pc, #212]	; (8009fdc <HAL_GPIO_Init+0xf8>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d00f      	beq.n	8009f2a <HAL_GPIO_Init+0x46>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a34      	ldr	r2, [pc, #208]	; (8009fe0 <HAL_GPIO_Init+0xfc>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d00b      	beq.n	8009f2a <HAL_GPIO_Init+0x46>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a33      	ldr	r2, [pc, #204]	; (8009fe4 <HAL_GPIO_Init+0x100>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d007      	beq.n	8009f2a <HAL_GPIO_Init+0x46>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a32      	ldr	r2, [pc, #200]	; (8009fe8 <HAL_GPIO_Init+0x104>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d003      	beq.n	8009f2a <HAL_GPIO_Init+0x46>
 8009f22:	21b2      	movs	r1, #178	; 0xb2
 8009f24:	4831      	ldr	r0, [pc, #196]	; (8009fec <HAL_GPIO_Init+0x108>)
 8009f26:	f7fb fdfc 	bl	8005b22 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d005      	beq.n	8009f40 <HAL_GPIO_Init+0x5c>
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	0c1b      	lsrs	r3, r3, #16
 8009f3a:	041b      	lsls	r3, r3, #16
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_GPIO_Init+0x64>
 8009f40:	21b3      	movs	r1, #179	; 0xb3
 8009f42:	482a      	ldr	r0, [pc, #168]	; (8009fec <HAL_GPIO_Init+0x108>)
 8009f44:	f7fb fded 	bl	8005b22 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 8200 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	f000 81fb 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2b11      	cmp	r3, #17
 8009f62:	f000 81f6 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	f000 81f1 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b12      	cmp	r3, #18
 8009f76:	f000 81ec 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8009f82:	f000 81e6 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8009f8e:	f000 81e0 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8009f9a:	f000 81da 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8009fa6:	f000 81d4 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8009fb2:	f000 81ce 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8009fbe:	f000 81c8 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	f000 81c3 	beq.w	800a352 <HAL_GPIO_Init+0x46e>
 8009fcc:	21b4      	movs	r1, #180	; 0xb4
 8009fce:	4807      	ldr	r0, [pc, #28]	; (8009fec <HAL_GPIO_Init+0x108>)
 8009fd0:	f7fb fda7 	bl	8005b22 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009fd4:	e1bd      	b.n	800a352 <HAL_GPIO_Init+0x46e>
 8009fd6:	bf00      	nop
 8009fd8:	48000400 	.word	0x48000400
 8009fdc:	48000800 	.word	0x48000800
 8009fe0:	48000c00 	.word	0x48000c00
 8009fe4:	48001000 	.word	0x48001000
 8009fe8:	48001400 	.word	0x48001400
 8009fec:	080335f8 	.word	0x080335f8
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 81a2 	beq.w	800a34c <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	2b01      	cmp	r3, #1
 800a012:	d005      	beq.n	800a020 <HAL_GPIO_Init+0x13c>
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f003 0303 	and.w	r3, r3, #3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d140      	bne.n	800a0a2 <HAL_GPIO_Init+0x1be>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <HAL_GPIO_Init+0x15c>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d007      	beq.n	800a040 <HAL_GPIO_Init+0x15c>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	2b03      	cmp	r3, #3
 800a036:	d003      	beq.n	800a040 <HAL_GPIO_Init+0x15c>
 800a038:	21c3      	movs	r1, #195	; 0xc3
 800a03a:	488a      	ldr	r0, [pc, #552]	; (800a264 <HAL_GPIO_Init+0x380>)
 800a03c:	f7fb fd71 	bl	8005b22 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	2203      	movs	r2, #3
 800a04c:	fa02 f303 	lsl.w	r3, r2, r3
 800a050:	43db      	mvns	r3, r3
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	4013      	ands	r3, r2
 800a056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a076:	2201      	movs	r2, #1
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	43db      	mvns	r3, r3
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	4013      	ands	r3, r2
 800a084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	091b      	lsrs	r3, r3, #4
 800a08c:	f003 0201 	and.w	r2, r3, #1
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	fa02 f303 	lsl.w	r3, r2, r3
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4313      	orrs	r3, r2
 800a09a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d027      	beq.n	800a0fe <HAL_GPIO_Init+0x21a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00b      	beq.n	800a0ce <HAL_GPIO_Init+0x1ea>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d007      	beq.n	800a0ce <HAL_GPIO_Init+0x1ea>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d003      	beq.n	800a0ce <HAL_GPIO_Init+0x1ea>
 800a0c6:	21d4      	movs	r1, #212	; 0xd4
 800a0c8:	4866      	ldr	r0, [pc, #408]	; (800a264 <HAL_GPIO_Init+0x380>)
 800a0ca:	f7fb fd2a 	bl	8005b22 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	2203      	movs	r2, #3
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	43db      	mvns	r3, r3
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	689a      	ldr	r2, [r3, #8]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f003 0303 	and.w	r3, r3, #3
 800a106:	2b02      	cmp	r3, #2
 800a108:	d14f      	bne.n	800a1aa <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a110:	d017      	beq.n	800a142 <HAL_GPIO_Init+0x25e>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a54      	ldr	r2, [pc, #336]	; (800a268 <HAL_GPIO_Init+0x384>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d013      	beq.n	800a142 <HAL_GPIO_Init+0x25e>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a53      	ldr	r2, [pc, #332]	; (800a26c <HAL_GPIO_Init+0x388>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00f      	beq.n	800a142 <HAL_GPIO_Init+0x25e>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a52      	ldr	r2, [pc, #328]	; (800a270 <HAL_GPIO_Init+0x38c>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d00b      	beq.n	800a142 <HAL_GPIO_Init+0x25e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a51      	ldr	r2, [pc, #324]	; (800a274 <HAL_GPIO_Init+0x390>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d007      	beq.n	800a142 <HAL_GPIO_Init+0x25e>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a50      	ldr	r2, [pc, #320]	; (800a278 <HAL_GPIO_Init+0x394>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d003      	beq.n	800a142 <HAL_GPIO_Init+0x25e>
 800a13a:	21e2      	movs	r1, #226	; 0xe2
 800a13c:	4849      	ldr	r0, [pc, #292]	; (800a264 <HAL_GPIO_Init+0x380>)
 800a13e:	f7fb fcf0 	bl	8005b22 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b0c      	cmp	r3, #12
 800a148:	d90b      	bls.n	800a162 <HAL_GPIO_Init+0x27e>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b0e      	cmp	r3, #14
 800a150:	d007      	beq.n	800a162 <HAL_GPIO_Init+0x27e>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b0f      	cmp	r3, #15
 800a158:	d003      	beq.n	800a162 <HAL_GPIO_Init+0x27e>
 800a15a:	21e3      	movs	r1, #227	; 0xe3
 800a15c:	4841      	ldr	r0, [pc, #260]	; (800a264 <HAL_GPIO_Init+0x380>)
 800a15e:	f7fb fce0 	bl	8005b22 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	08da      	lsrs	r2, r3, #3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3208      	adds	r2, #8
 800a16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	220f      	movs	r2, #15
 800a17a:	fa02 f303 	lsl.w	r3, r2, r3
 800a17e:	43db      	mvns	r3, r3
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4013      	ands	r3, r2
 800a184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	691a      	ldr	r2, [r3, #16]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f003 0307 	and.w	r3, r3, #7
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	fa02 f303 	lsl.w	r3, r2, r3
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	08da      	lsrs	r2, r3, #3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3208      	adds	r2, #8
 800a1a4:	6939      	ldr	r1, [r7, #16]
 800a1a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	2203      	movs	r2, #3
 800a1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ba:	43db      	mvns	r3, r3
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4013      	ands	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f003 0203 	and.w	r2, r3, #3
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 80b0 	beq.w	800a34c <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1ec:	4b23      	ldr	r3, [pc, #140]	; (800a27c <HAL_GPIO_Init+0x398>)
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	4a22      	ldr	r2, [pc, #136]	; (800a27c <HAL_GPIO_Init+0x398>)
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	6193      	str	r3, [r2, #24]
 800a1f8:	4b20      	ldr	r3, [pc, #128]	; (800a27c <HAL_GPIO_Init+0x398>)
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	60bb      	str	r3, [r7, #8]
 800a202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a204:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <HAL_GPIO_Init+0x39c>)
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	089b      	lsrs	r3, r3, #2
 800a20a:	3302      	adds	r3, #2
 800a20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	220f      	movs	r2, #15
 800a21c:	fa02 f303 	lsl.w	r3, r2, r3
 800a220:	43db      	mvns	r3, r3
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4013      	ands	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a22e:	d029      	beq.n	800a284 <HAL_GPIO_Init+0x3a0>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a0d      	ldr	r2, [pc, #52]	; (800a268 <HAL_GPIO_Init+0x384>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d013      	beq.n	800a260 <HAL_GPIO_Init+0x37c>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a0c      	ldr	r2, [pc, #48]	; (800a26c <HAL_GPIO_Init+0x388>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d00d      	beq.n	800a25c <HAL_GPIO_Init+0x378>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a0b      	ldr	r2, [pc, #44]	; (800a270 <HAL_GPIO_Init+0x38c>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d007      	beq.n	800a258 <HAL_GPIO_Init+0x374>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a0a      	ldr	r2, [pc, #40]	; (800a274 <HAL_GPIO_Init+0x390>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d101      	bne.n	800a254 <HAL_GPIO_Init+0x370>
 800a250:	2304      	movs	r3, #4
 800a252:	e018      	b.n	800a286 <HAL_GPIO_Init+0x3a2>
 800a254:	2305      	movs	r3, #5
 800a256:	e016      	b.n	800a286 <HAL_GPIO_Init+0x3a2>
 800a258:	2303      	movs	r3, #3
 800a25a:	e014      	b.n	800a286 <HAL_GPIO_Init+0x3a2>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e012      	b.n	800a286 <HAL_GPIO_Init+0x3a2>
 800a260:	2301      	movs	r3, #1
 800a262:	e010      	b.n	800a286 <HAL_GPIO_Init+0x3a2>
 800a264:	080335f8 	.word	0x080335f8
 800a268:	48000400 	.word	0x48000400
 800a26c:	48000800 	.word	0x48000800
 800a270:	48000c00 	.word	0x48000c00
 800a274:	48001000 	.word	0x48001000
 800a278:	48001400 	.word	0x48001400
 800a27c:	40021000 	.word	0x40021000
 800a280:	40010000 	.word	0x40010000
 800a284:	2300      	movs	r3, #0
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	f002 0203 	and.w	r2, r2, #3
 800a28c:	0092      	lsls	r2, r2, #2
 800a28e:	4093      	lsls	r3, r2
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4313      	orrs	r3, r2
 800a294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a296:	4935      	ldr	r1, [pc, #212]	; (800a36c <HAL_GPIO_Init+0x488>)
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	089b      	lsrs	r3, r3, #2
 800a29c:	3302      	adds	r3, #2
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a2a4:	4b32      	ldr	r3, [pc, #200]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	43db      	mvns	r3, r3
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a2c8:	4a29      	ldr	r2, [pc, #164]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a2ce:	4b28      	ldr	r3, [pc, #160]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a2f2:	4a1f      	ldr	r2, [pc, #124]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a2f8:	4b1d      	ldr	r3, [pc, #116]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	43db      	mvns	r3, r3
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	4013      	ands	r3, r2
 800a306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	4313      	orrs	r3, r2
 800a31a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a31c:	4a14      	ldr	r2, [pc, #80]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a322:	4b13      	ldr	r3, [pc, #76]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	43db      	mvns	r3, r3
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4013      	ands	r3, r2
 800a330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a346:	4a0a      	ldr	r2, [pc, #40]	; (800a370 <HAL_GPIO_Init+0x48c>)
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	3301      	adds	r3, #1
 800a350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	fa22 f303 	lsr.w	r3, r2, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f47f ae47 	bne.w	8009ff0 <HAL_GPIO_Init+0x10c>
  }
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	40010000 	.word	0x40010000
 800a370:	40010400 	.word	0x40010400

0800a374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	807b      	strh	r3, [r7, #2]
 800a380:	4613      	mov	r3, r2
 800a382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a384:	887b      	ldrh	r3, [r7, #2]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d004      	beq.n	800a394 <HAL_GPIO_WritePin+0x20>
 800a38a:	887b      	ldrh	r3, [r7, #2]
 800a38c:	0c1b      	lsrs	r3, r3, #16
 800a38e:	041b      	lsls	r3, r3, #16
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <HAL_GPIO_WritePin+0x2a>
 800a394:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800a398:	480d      	ldr	r0, [pc, #52]	; (800a3d0 <HAL_GPIO_WritePin+0x5c>)
 800a39a:	f7fb fbc2 	bl	8005b22 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800a39e:	787b      	ldrb	r3, [r7, #1]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d007      	beq.n	800a3b4 <HAL_GPIO_WritePin+0x40>
 800a3a4:	787b      	ldrb	r3, [r7, #1]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d004      	beq.n	800a3b4 <HAL_GPIO_WritePin+0x40>
 800a3aa:	f240 11a5 	movw	r1, #421	; 0x1a5
 800a3ae:	4808      	ldr	r0, [pc, #32]	; (800a3d0 <HAL_GPIO_WritePin+0x5c>)
 800a3b0:	f7fb fbb7 	bl	8005b22 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800a3b4:	787b      	ldrb	r3, [r7, #1]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3ba:	887a      	ldrh	r2, [r7, #2]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a3c0:	e002      	b.n	800a3c8 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a3c2:	887a      	ldrh	r2, [r7, #2]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	080335f8 	.word	0x080335f8

0800a3d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e0ff      	b.n	800a5e6 <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a81      	ldr	r2, [pc, #516]	; (800a5f0 <HAL_I2C_Init+0x21c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d009      	beq.n	800a404 <HAL_I2C_Init+0x30>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a7f      	ldr	r2, [pc, #508]	; (800a5f4 <HAL_I2C_Init+0x220>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d004      	beq.n	800a404 <HAL_I2C_Init+0x30>
 800a3fa:	f240 2113 	movw	r1, #531	; 0x213
 800a3fe:	487e      	ldr	r0, [pc, #504]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a400:	f7fb fb8f 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a40c:	d304      	bcc.n	800a418 <HAL_I2C_Init+0x44>
 800a40e:	f44f 7105 	mov.w	r1, #532	; 0x214
 800a412:	4879      	ldr	r0, [pc, #484]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a414:	f7fb fb85 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d008      	beq.n	800a432 <HAL_I2C_Init+0x5e>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d004      	beq.n	800a432 <HAL_I2C_Init+0x5e>
 800a428:	f240 2115 	movw	r1, #533	; 0x215
 800a42c:	4872      	ldr	r0, [pc, #456]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a42e:	f7fb fb78 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <HAL_I2C_Init+0x7a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a442:	d004      	beq.n	800a44e <HAL_I2C_Init+0x7a>
 800a444:	f240 2116 	movw	r1, #534	; 0x216
 800a448:	486b      	ldr	r0, [pc, #428]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a44a:	f7fb fb6a 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	2bff      	cmp	r3, #255	; 0xff
 800a454:	d904      	bls.n	800a460 <HAL_I2C_Init+0x8c>
 800a456:	f240 2117 	movw	r1, #535	; 0x217
 800a45a:	4867      	ldr	r0, [pc, #412]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a45c:	f7fb fb61 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d020      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d01c      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d018      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d014      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	2b04      	cmp	r3, #4
 800a486:	d010      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	2b05      	cmp	r3, #5
 800a48e:	d00c      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	2b06      	cmp	r3, #6
 800a496:	d008      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b07      	cmp	r3, #7
 800a49e:	d004      	beq.n	800a4aa <HAL_I2C_Init+0xd6>
 800a4a0:	f44f 7106 	mov.w	r1, #536	; 0x218
 800a4a4:	4854      	ldr	r0, [pc, #336]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a4a6:	f7fb fb3c 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d009      	beq.n	800a4c6 <HAL_I2C_Init+0xf2>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a4ba:	d004      	beq.n	800a4c6 <HAL_I2C_Init+0xf2>
 800a4bc:	f240 2119 	movw	r1, #537	; 0x219
 800a4c0:	484d      	ldr	r0, [pc, #308]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a4c2:	f7fb fb2e 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <HAL_I2C_Init+0x10e>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4d6:	d004      	beq.n	800a4e2 <HAL_I2C_Init+0x10e>
 800a4d8:	f240 211a 	movw	r1, #538	; 0x21a
 800a4dc:	4846      	ldr	r0, [pc, #280]	; (800a5f8 <HAL_I2C_Init+0x224>)
 800a4de:	f7fb fb20 	bl	8005b22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7f6 ff9a 	bl	8001430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2224      	movs	r2, #36	; 0x24
 800a500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 0201 	bic.w	r2, r2, #1
 800a512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a520:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d107      	bne.n	800a54a <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a546:	609a      	str	r2, [r3, #8]
 800a548:	e006      	b.n	800a558 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a556:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d104      	bne.n	800a56a <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	6812      	ldr	r2, [r2, #0]
 800a574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a57c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a58c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691a      	ldr	r2, [r3, #16]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	69d9      	ldr	r1, [r3, #28]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1a      	ldr	r2, [r3, #32]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0201 	orr.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	40005400 	.word	0x40005400
 800a5f4:	40005800 	.word	0x40005800
 800a5f8:	08033634 	.word	0x08033634

0800a5fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a2d      	ldr	r2, [pc, #180]	; (800a6c0 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d008      	beq.n	800a622 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a2b      	ldr	r2, [pc, #172]	; (800a6c4 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d003      	beq.n	800a622 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800a61a:	2164      	movs	r1, #100	; 0x64
 800a61c:	482a      	ldr	r0, [pc, #168]	; (800a6c8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800a61e:	f7fb fa80 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d007      	beq.n	800a638 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62e:	d003      	beq.n	800a638 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 800a630:	2165      	movs	r1, #101	; 0x65
 800a632:	4825      	ldr	r0, [pc, #148]	; (800a6c8 <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800a634:	f7fb fa75 	bl	8005b22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b20      	cmp	r3, #32
 800a642:	d138      	bne.n	800a6b6 <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800a64e:	2302      	movs	r3, #2
 800a650:	e032      	b.n	800a6b8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2224      	movs	r2, #36	; 0x24
 800a65e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a680:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6819      	ldr	r1, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0201 	orr.w	r2, r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e000      	b.n	800a6b8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 800a6b6:	2302      	movs	r3, #2
  }
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40005400 	.word	0x40005400
 800a6c4:	40005800 	.word	0x40005800
 800a6c8:	0803366c 	.word	0x0803366c

0800a6cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a2c      	ldr	r2, [pc, #176]	; (800a78c <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d008      	beq.n	800a6f2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a2a      	ldr	r2, [pc, #168]	; (800a790 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d003      	beq.n	800a6f2 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800a6ea:	2192      	movs	r1, #146	; 0x92
 800a6ec:	4829      	ldr	r0, [pc, #164]	; (800a794 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800a6ee:	f7fb fa18 	bl	8005b22 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b0f      	cmp	r3, #15
 800a6f6:	d903      	bls.n	800a700 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800a6f8:	2193      	movs	r1, #147	; 0x93
 800a6fa:	4826      	ldr	r0, [pc, #152]	; (800a794 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800a6fc:	f7fb fa11 	bl	8005b22 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b20      	cmp	r3, #32
 800a70a:	d139      	bne.n	800a780 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a712:	2b01      	cmp	r3, #1
 800a714:	d101      	bne.n	800a71a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 800a716:	2302      	movs	r3, #2
 800a718:	e033      	b.n	800a782 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2224      	movs	r2, #36	; 0x24
 800a726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0201 	bic.w	r2, r2, #1
 800a738:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a748:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	021b      	lsls	r3, r3, #8
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4313      	orrs	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0201 	orr.w	r2, r2, #1
 800a76a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2220      	movs	r2, #32
 800a770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	e000      	b.n	800a782 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a780:	2302      	movs	r3, #2
  }
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	40005400 	.word	0x40005400
 800a790:	40005800 	.word	0x40005800
 800a794:	0803366c 	.word	0x0803366c

0800a798 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a79a:	b08b      	sub	sp, #44	; 0x2c
 800a79c:	af06      	add	r7, sp, #24
 800a79e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e0d9      	b.n	800a95e <HAL_PCD_Init+0x1c6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a6e      	ldr	r2, [pc, #440]	; (800a968 <HAL_PCD_Init+0x1d0>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d003      	beq.n	800a7bc <HAL_PCD_Init+0x24>
 800a7b4:	2185      	movs	r1, #133	; 0x85
 800a7b6:	486d      	ldr	r0, [pc, #436]	; (800a96c <HAL_PCD_Init+0x1d4>)
 800a7b8:	f7fb f9b3 	bl	8005b22 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f023 fe93 	bl	802e4fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2203      	movs	r2, #3
 800a7da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f005 fd2f 	bl	8010246 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	e04c      	b.n	800a888 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	00db      	lsls	r3, r3, #3
 800a7fc:	440b      	add	r3, r1
 800a7fe:	3301      	adds	r3, #1
 800a800:	2201      	movs	r2, #1
 800a802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	440b      	add	r3, r1
 800a814:	7bfa      	ldrb	r2, [r7, #15]
 800a816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a818:	7bfa      	ldrb	r2, [r7, #15]
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	b298      	uxth	r0, r3
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	4613      	mov	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4413      	add	r3, r2
 800a826:	00db      	lsls	r3, r3, #3
 800a828:	440b      	add	r3, r1
 800a82a:	3336      	adds	r3, #54	; 0x36
 800a82c:	4602      	mov	r2, r0
 800a82e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a830:	7bfb      	ldrb	r3, [r7, #15]
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	440b      	add	r3, r1
 800a840:	3303      	adds	r3, #3
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a846:	7bfa      	ldrb	r2, [r7, #15]
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	440b      	add	r3, r1
 800a854:	3338      	adds	r3, #56	; 0x38
 800a856:	2200      	movs	r2, #0
 800a858:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a85a:	7bfa      	ldrb	r2, [r7, #15]
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	440b      	add	r3, r1
 800a868:	333c      	adds	r3, #60	; 0x3c
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a86e:	7bfa      	ldrb	r2, [r7, #15]
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	440b      	add	r3, r1
 800a87c:	3340      	adds	r3, #64	; 0x40
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	3301      	adds	r3, #1
 800a886:	73fb      	strb	r3, [r7, #15]
 800a888:	7bfa      	ldrb	r2, [r7, #15]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d3ad      	bcc.n	800a7ee <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]
 800a896:	e044      	b.n	800a922 <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a898:	7bfa      	ldrb	r2, [r7, #15]
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	440b      	add	r3, r1
 800a8a6:	f203 1369 	addw	r3, r3, #361	; 0x169
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a8ae:	7bfa      	ldrb	r2, [r7, #15]
 800a8b0:	6879      	ldr	r1, [r7, #4]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	440b      	add	r3, r1
 800a8bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a8c0:	7bfa      	ldrb	r2, [r7, #15]
 800a8c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a8c4:	7bfa      	ldrb	r2, [r7, #15]
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	440b      	add	r3, r1
 800a8d2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a8da:	7bfa      	ldrb	r2, [r7, #15]
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	440b      	add	r3, r1
 800a8e8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a8f0:	7bfa      	ldrb	r2, [r7, #15]
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	440b      	add	r3, r1
 800a8fe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a906:	7bfa      	ldrb	r2, [r7, #15]
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	4613      	mov	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	440b      	add	r3, r1
 800a914:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a918:	2200      	movs	r2, #0
 800a91a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	3301      	adds	r3, #1
 800a920:	73fb      	strb	r3, [r7, #15]
 800a922:	7bfa      	ldrb	r2, [r7, #15]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d3b5      	bcc.n	800a898 <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	603b      	str	r3, [r7, #0]
 800a932:	687e      	ldr	r6, [r7, #4]
 800a934:	466d      	mov	r5, sp
 800a936:	f106 0410 	add.w	r4, r6, #16
 800a93a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a93c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	602b      	str	r3, [r5, #0]
 800a942:	1d33      	adds	r3, r6, #4
 800a944:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a946:	6838      	ldr	r0, [r7, #0]
 800a948:	f005 fc98 	bl	801027c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a966:	bf00      	nop
 800a968:	40005c00 	.word	0x40005c00
 800a96c:	080336a8 	.word	0x080336a8

0800a970 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_PCD_Start+0x16>
 800a982:	2302      	movs	r3, #2
 800a984:	e016      	b.n	800a9b4 <HAL_PCD_Start+0x44>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4618      	mov	r0, r3
 800a994:	f005 fc40 	bl	8010218 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800a998:	2101      	movs	r1, #1
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f024 f84c 	bl	802ea38 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f007 fe55 	bl	8012654 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f007 fe4e 	bl	801266a <USB_ReadInterrupts>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9d8:	d102      	bne.n	800a9e0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 faf6 	bl	800afcc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f007 fe40 	bl	801266a <USB_ReadInterrupts>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f4:	d112      	bne.n	800aa1c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa08:	b292      	uxth	r2, r2
 800aa0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f023 fe15 	bl	802e63e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800aa14:	2100      	movs	r1, #0
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f8c7 	bl	800abaa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f007 fe22 	bl	801266a <USB_ReadInterrupts>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa30:	d10b      	bne.n	800aa4a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aa44:	b292      	uxth	r2, r2
 800aa46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f007 fe0b 	bl	801266a <USB_ReadInterrupts>
 800aa54:	4603      	mov	r3, r0
 800aa56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa5e:	d10b      	bne.n	800aa78 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa72:	b292      	uxth	r2, r2
 800aa74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f007 fdf4 	bl	801266a <USB_ReadInterrupts>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa8c:	d126      	bne.n	800aadc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f022 0204 	bic.w	r2, r2, #4
 800aaa0:	b292      	uxth	r2, r2
 800aaa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f022 0208 	bic.w	r2, r2, #8
 800aab8:	b292      	uxth	r2, r2
 800aaba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f023 fdf6 	bl	802e6b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aacc:	b29a      	uxth	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aad6:	b292      	uxth	r2, r2
 800aad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f007 fdc2 	bl	801266a <USB_ReadInterrupts>
 800aae6:	4603      	mov	r3, r0
 800aae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaf0:	d126      	bne.n	800ab40 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f042 0208 	orr.w	r2, r2, #8
 800ab04:	b292      	uxth	r2, r2
 800ab06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab1c:	b292      	uxth	r2, r2
 800ab1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 0204 	orr.w	r2, r2, #4
 800ab34:	b292      	uxth	r2, r2
 800ab36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f023 fd9e 	bl	802e67c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f007 fd90 	bl	801266a <USB_ReadInterrupts>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab54:	d10e      	bne.n	800ab74 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ab68:	b292      	uxth	r2, r2
 800ab6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f023 fd57 	bl	802e622 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f007 fd76 	bl	801266a <USB_ReadInterrupts>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab88:	d10b      	bne.n	800aba2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab9c:	b292      	uxth	r2, r2
 800ab9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_PCD_SetAddress+0x1a>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e013      	b.n	800abec <HAL_PCD_SetAddress+0x42>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	78fa      	ldrb	r2, [r7, #3]
 800abd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	78fa      	ldrb	r2, [r7, #3]
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f007 fd25 	bl	801262c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	4608      	mov	r0, r1
 800abfe:	4611      	mov	r1, r2
 800ac00:	461a      	mov	r2, r3
 800ac02:	4603      	mov	r3, r0
 800ac04:	70fb      	strb	r3, [r7, #3]
 800ac06:	460b      	mov	r3, r1
 800ac08:	803b      	strh	r3, [r7, #0]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ac12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	da0e      	bge.n	800ac38 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	f003 0307 	and.w	r3, r3, #7
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	705a      	strb	r2, [r3, #1]
 800ac36:	e00e      	b.n	800ac56 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	f003 0207 	and.w	r2, r3, #7
 800ac3e:	4613      	mov	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ac62:	883a      	ldrh	r2, [r7, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	78ba      	ldrb	r2, [r7, #2]
 800ac6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	785b      	ldrb	r3, [r3, #1]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d004      	beq.n	800ac80 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ac80:	78bb      	ldrb	r3, [r7, #2]
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d102      	bne.n	800ac8c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d101      	bne.n	800ac9a <HAL_PCD_EP_Open+0xa6>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e00e      	b.n	800acb8 <HAL_PCD_EP_Open+0xc4>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68f9      	ldr	r1, [r7, #12]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f005 fb09 	bl	80102c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800acb6:	7afb      	ldrb	r3, [r7, #11]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800accc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	da0e      	bge.n	800acf2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	4413      	add	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	705a      	strb	r2, [r3, #1]
 800acf0:	e00e      	b.n	800ad10 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	f003 0207 	and.w	r2, r3, #7
 800acf8:	4613      	mov	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	4413      	add	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ad10:	78fb      	ldrb	r3, [r7, #3]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_PCD_EP_Close+0x6a>
 800ad26:	2302      	movs	r3, #2
 800ad28:	e00e      	b.n	800ad48 <HAL_PCD_EP_Close+0x88>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68f9      	ldr	r1, [r7, #12]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f005 fe55 	bl	80109e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad60:	7afb      	ldrb	r3, [r7, #11]
 800ad62:	f003 0207 	and.w	r2, r3, #7
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	4413      	add	r3, r2
 800ad76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2200      	movs	r2, #0
 800ad88:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad9c:	7afb      	ldrb	r3, [r7, #11]
 800ad9e:	f003 0307 	and.w	r3, r3, #7
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d106      	bne.n	800adb4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6979      	ldr	r1, [r7, #20]
 800adac:	4618      	mov	r0, r3
 800adae:	f006 f808 	bl	8010dc2 <USB_EPStartXfer>
 800adb2:	e005      	b.n	800adc0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6979      	ldr	r1, [r7, #20]
 800adba:	4618      	mov	r0, r3
 800adbc:	f006 f801 	bl	8010dc2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	460b      	mov	r3, r1
 800add4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	f003 0207 	and.w	r2, r3, #7
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	440b      	add	r3, r1
 800ade8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800adec:	681b      	ldr	r3, [r3, #0]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b086      	sub	sp, #24
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	460b      	mov	r3, r1
 800ae08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
 800ae0c:	f003 0307 	and.w	r3, r3, #7
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2201      	movs	r2, #1
 800ae44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae46:	7afb      	ldrb	r3, [r7, #11]
 800ae48:	f003 0307 	and.w	r3, r3, #7
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	f003 0307 	and.w	r3, r3, #7
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6979      	ldr	r1, [r7, #20]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f005 ffad 	bl	8010dc2 <USB_EPStartXfer>
 800ae68:	e005      	b.n	800ae76 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6979      	ldr	r1, [r7, #20]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f005 ffa6 	bl	8010dc2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	f003 0207 	and.w	r2, r3, #7
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d901      	bls.n	800ae9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e03e      	b.n	800af1c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da0e      	bge.n	800aec4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	4413      	add	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2201      	movs	r2, #1
 800aec0:	705a      	strb	r2, [r3, #1]
 800aec2:	e00c      	b.n	800aede <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aec4:	78fa      	ldrb	r2, [r7, #3]
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4413      	add	r3, r2
 800aed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d101      	bne.n	800aefe <HAL_PCD_EP_SetStall+0x7e>
 800aefa:	2302      	movs	r3, #2
 800aefc:	e00e      	b.n	800af1c <HAL_PCD_EP_SetStall+0x9c>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68f9      	ldr	r1, [r7, #12]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f007 fa8e 	bl	801242e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	f003 020f 	and.w	r2, r3, #15
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d901      	bls.n	800af42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e040      	b.n	800afc4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800af42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af46:	2b00      	cmp	r3, #0
 800af48:	da0e      	bge.n	800af68 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	f003 0307 	and.w	r3, r3, #7
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	4613      	mov	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	4413      	add	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2201      	movs	r2, #1
 800af64:	705a      	strb	r2, [r3, #1]
 800af66:	e00e      	b.n	800af86 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af68:	78fb      	ldrb	r3, [r7, #3]
 800af6a:	f003 0207 	and.w	r2, r3, #7
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	4413      	add	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	b2da      	uxtb	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d101      	bne.n	800afa6 <HAL_PCD_EP_ClrStall+0x82>
 800afa2:	2302      	movs	r3, #2
 800afa4:	e00e      	b.n	800afc4 <HAL_PCD_EP_ClrStall+0xa0>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f007 fa8b 	bl	80124d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b096      	sub	sp, #88	; 0x58
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800afd4:	e3a9      	b.n	800b72a <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800afe2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f003 030f 	and.w	r3, r3, #15
 800afec:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800aff0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f040 8164 	bne.w	800b2c2 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800affa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800affe:	f003 0310 	and.w	r3, r3, #16
 800b002:	2b00      	cmp	r3, #0
 800b004:	d152      	bne.n	800b0ac <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b016:	81fb      	strh	r3, [r7, #14]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	89fb      	ldrh	r3, [r7, #14]
 800b01e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b026:	b29b      	uxth	r3, r3
 800b028:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3328      	adds	r3, #40	; 0x28
 800b02e:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b038:	b29b      	uxth	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	4413      	add	r3, r2
 800b044:	3302      	adds	r3, #2
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	6812      	ldr	r2, [r2, #0]
 800b04c:	4413      	add	r3, r2
 800b04e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b05a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b05e:	695a      	ldr	r2, [r3, #20]
 800b060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	441a      	add	r2, r3
 800b066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b068:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b06a:	2100      	movs	r1, #0
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f023 fabe 	bl	802e5ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 8355 	beq.w	800b72a <PCD_EP_ISR_Handler+0x75e>
 800b080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f040 8350 	bne.w	800b72a <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b090:	b2db      	uxtb	r3, r3
 800b092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b096:	b2da      	uxtb	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	b292      	uxth	r2, r2
 800b09e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b0aa:	e33e      	b.n	800b72a <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b0be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b0c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d034      	beq.n	800b134 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	4413      	add	r3, r2
 800b0de:	3306      	adds	r3, #6
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b102:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b106:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b108:	b29b      	uxth	r3, r3
 800b10a:	f007 fb04 	bl	8012716 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	b29a      	uxth	r2, r3
 800b116:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b11a:	4013      	ands	r3, r2
 800b11c:	823b      	strh	r3, [r7, #16]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	8a3a      	ldrh	r2, [r7, #16]
 800b124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b128:	b292      	uxth	r2, r2
 800b12a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f023 fa31 	bl	802e594 <HAL_PCD_SetupStageCallback>
 800b132:	e2fa      	b.n	800b72a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b134:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f280 82f6 	bge.w	800b72a <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	b29a      	uxth	r2, r3
 800b146:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b14a:	4013      	ands	r3, r2
 800b14c:	83fb      	strh	r3, [r7, #30]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	8bfa      	ldrh	r2, [r7, #30]
 800b154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b158:	b292      	uxth	r2, r2
 800b15a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b164:	b29b      	uxth	r3, r3
 800b166:	461a      	mov	r2, r3
 800b168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	00db      	lsls	r3, r3, #3
 800b16e:	4413      	add	r3, r2
 800b170:	3306      	adds	r3, #6
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	6812      	ldr	r2, [r2, #0]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b186:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d019      	beq.n	800b1c4 <PCD_EP_ISR_Handler+0x1f8>
 800b190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d015      	beq.n	800b1c4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6818      	ldr	r0, [r3, #0]
 800b19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19e:	6959      	ldr	r1, [r3, #20]
 800b1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	f007 fab4 	bl	8012716 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b0:	695a      	ldr	r2, [r3, #20]
 800b1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	441a      	add	r2, r3
 800b1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b1bc:	2100      	movs	r1, #0
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f023 f9fa 	bl	802e5b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f040 82aa 	bne.w	800b72a <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	61bb      	str	r3, [r7, #24]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	61bb      	str	r3, [r7, #24]
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1f4:	617b      	str	r3, [r7, #20]
 800b1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d112      	bne.n	800b224 <PCD_EP_ISR_Handler+0x258>
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	b29b      	uxth	r3, r3
 800b204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b208:	b29a      	uxth	r2, r3
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	801a      	strh	r2, [r3, #0]
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	b29b      	uxth	r3, r3
 800b214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	801a      	strh	r2, [r3, #0]
 800b222:	e02f      	b.n	800b284 <PCD_EP_ISR_Handler+0x2b8>
 800b224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	2b3e      	cmp	r3, #62	; 0x3e
 800b22a:	d813      	bhi.n	800b254 <PCD_EP_ISR_Handler+0x288>
 800b22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	085b      	lsrs	r3, r3, #1
 800b232:	647b      	str	r3, [r7, #68]	; 0x44
 800b234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	f003 0301 	and.w	r3, r3, #1
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <PCD_EP_ISR_Handler+0x27a>
 800b240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b242:	3301      	adds	r3, #1
 800b244:	647b      	str	r3, [r7, #68]	; 0x44
 800b246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b248:	b29b      	uxth	r3, r3
 800b24a:	029b      	lsls	r3, r3, #10
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	801a      	strh	r2, [r3, #0]
 800b252:	e017      	b.n	800b284 <PCD_EP_ISR_Handler+0x2b8>
 800b254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	095b      	lsrs	r3, r3, #5
 800b25a:	647b      	str	r3, [r7, #68]	; 0x44
 800b25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	f003 031f 	and.w	r3, r3, #31
 800b264:	2b00      	cmp	r3, #0
 800b266:	d102      	bne.n	800b26e <PCD_EP_ISR_Handler+0x2a2>
 800b268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b26a:	3b01      	subs	r3, #1
 800b26c:	647b      	str	r3, [r7, #68]	; 0x44
 800b26e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b270:	b29b      	uxth	r3, r3
 800b272:	029b      	lsls	r3, r3, #10
 800b274:	b29b      	uxth	r3, r3
 800b276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b27a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b27e:	b29a      	uxth	r2, r3
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	881b      	ldrh	r3, [r3, #0]
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b294:	827b      	strh	r3, [r7, #18]
 800b296:	8a7b      	ldrh	r3, [r7, #18]
 800b298:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b29c:	827b      	strh	r3, [r7, #18]
 800b29e:	8a7b      	ldrh	r3, [r7, #18]
 800b2a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2a4:	827b      	strh	r3, [r7, #18]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	8a7b      	ldrh	r3, [r7, #18]
 800b2ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	8013      	strh	r3, [r2, #0]
 800b2c0:	e233      	b.n	800b72a <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b2d6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f280 80fc 	bge.w	800b4d8 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	461a      	mov	r2, r3
 800b302:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b30e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b312:	b292      	uxth	r2, r2
 800b314:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b316:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	4413      	add	r3, r2
 800b32a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b32e:	7b1b      	ldrb	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d125      	bne.n	800b380 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	461a      	mov	r2, r3
 800b340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	4413      	add	r3, r2
 800b348:	3306      	adds	r3, #6
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	6812      	ldr	r2, [r2, #0]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b35c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800b360:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8092 	beq.w	800b48e <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b370:	6959      	ldr	r1, [r3, #20]
 800b372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b374:	88da      	ldrh	r2, [r3, #6]
 800b376:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b37a:	f007 f9cc 	bl	8012716 <USB_ReadPMA>
 800b37e:	e086      	b.n	800b48e <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b382:	78db      	ldrb	r3, [r3, #3]
 800b384:	2b02      	cmp	r3, #2
 800b386:	d10a      	bne.n	800b39e <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b388:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b38c:	461a      	mov	r2, r3
 800b38e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f9d8 	bl	800b746 <HAL_PCD_EP_DB_Receive>
 800b396:	4603      	mov	r3, r0
 800b398:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b39c:	e077      	b.n	800b48e <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	441a      	add	r2, r3
 800b3ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b3ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4413      	add	r3, r2
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d024      	beq.n	800b446 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b404:	b29b      	uxth	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	4413      	add	r3, r2
 800b410:	3302      	adds	r3, #2
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6812      	ldr	r2, [r2, #0]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b41e:	881b      	ldrh	r3, [r3, #0]
 800b420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b424:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800b428:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d02e      	beq.n	800b48e <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b436:	6959      	ldr	r1, [r3, #20]
 800b438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b43a:	891a      	ldrh	r2, [r3, #8]
 800b43c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b440:	f007 f969 	bl	8012716 <USB_ReadPMA>
 800b444:	e023      	b.n	800b48e <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b44e:	b29b      	uxth	r3, r3
 800b450:	461a      	mov	r2, r3
 800b452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	4413      	add	r3, r2
 800b45a:	3306      	adds	r3, #6
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6812      	ldr	r2, [r2, #0]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b46e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800b472:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b476:	2b00      	cmp	r3, #0
 800b478:	d009      	beq.n	800b48e <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b480:	6959      	ldr	r1, [r3, #20]
 800b482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b484:	895a      	ldrh	r2, [r3, #10]
 800b486:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b48a:	f007 f944 	bl	8012716 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b490:	69da      	ldr	r2, [r3, #28]
 800b492:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b496:	441a      	add	r2, r3
 800b498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b49a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b49e:	695a      	ldr	r2, [r3, #20]
 800b4a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b4a4:	441a      	add	r2, r3
 800b4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d005      	beq.n	800b4be <PCD_EP_ISR_Handler+0x4f2>
 800b4b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d206      	bcs.n	800b4cc <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f023 f877 	bl	802e5b8 <HAL_PCD_DataOutStageCallback>
 800b4ca:	e005      	b.n	800b4d8 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f005 fc75 	bl	8010dc2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b4d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 8122 	beq.w	800b72a <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800b4e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b514:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	461a      	mov	r2, r3
 800b51e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	441a      	add	r2, r3
 800b526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b52a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b52e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b532:	b29b      	uxth	r3, r3
 800b534:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800b536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b538:	78db      	ldrb	r3, [r3, #3]
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	f000 809d 	beq.w	800b67a <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800b540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b542:	2200      	movs	r2, #0
 800b544:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b546:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d046      	beq.n	800b5e0 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b554:	785b      	ldrb	r3, [r3, #1]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d126      	bne.n	800b5a8 <PCD_EP_ISR_Handler+0x5dc>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b568:	b29b      	uxth	r3, r3
 800b56a:	461a      	mov	r2, r3
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	4413      	add	r3, r2
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
 800b572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	011a      	lsls	r2, r3, #4
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	4413      	add	r3, r2
 800b57c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b580:	623b      	str	r3, [r7, #32]
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	b29b      	uxth	r3, r3
 800b588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	801a      	strh	r2, [r3, #0]
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	b29b      	uxth	r3, r3
 800b598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b59c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	801a      	strh	r2, [r3, #0]
 800b5a6:	e061      	b.n	800b66c <PCD_EP_ISR_Handler+0x6a0>
 800b5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5aa:	785b      	ldrb	r3, [r3, #1]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d15d      	bne.n	800b66c <PCD_EP_ISR_Handler+0x6a0>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	4413      	add	r3, r2
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	011a      	lsls	r2, r3, #4
 800b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b5d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	2200      	movs	r2, #0
 800b5dc:	801a      	strh	r2, [r3, #0]
 800b5de:	e045      	b.n	800b66c <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d126      	bne.n	800b63c <PCD_EP_ISR_Handler+0x670>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	461a      	mov	r2, r3
 800b600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b602:	4413      	add	r3, r2
 800b604:	637b      	str	r3, [r7, #52]	; 0x34
 800b606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	011a      	lsls	r2, r3, #4
 800b60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60e:	4413      	add	r3, r2
 800b610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b614:	633b      	str	r3, [r7, #48]	; 0x30
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b620:	b29a      	uxth	r2, r3
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	801a      	strh	r2, [r3, #0]
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b634:	b29a      	uxth	r2, r3
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	801a      	strh	r2, [r3, #0]
 800b63a:	e017      	b.n	800b66c <PCD_EP_ISR_Handler+0x6a0>
 800b63c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b63e:	785b      	ldrb	r3, [r3, #1]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d113      	bne.n	800b66c <PCD_EP_ISR_Handler+0x6a0>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	461a      	mov	r2, r3
 800b650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b652:	4413      	add	r3, r2
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	011a      	lsls	r2, r3, #4
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	4413      	add	r3, r2
 800b660:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b664:	63bb      	str	r3, [r7, #56]	; 0x38
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	2200      	movs	r2, #0
 800b66a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f022 ffbb 	bl	802e5ee <HAL_PCD_DataInStageCallback>
 800b678:	e057      	b.n	800b72a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800b67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67c:	78db      	ldrb	r3, [r3, #3]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d14c      	bne.n	800b71c <PCD_EP_ISR_Handler+0x750>
 800b682:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d146      	bne.n	800b71c <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b696:	b29b      	uxth	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	4413      	add	r3, r2
 800b6a2:	3302      	adds	r3, #2
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	6812      	ldr	r2, [r2, #0]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800b6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6bc:	699a      	ldr	r2, [r3, #24]
 800b6be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d907      	bls.n	800b6d6 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800b6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d2:	619a      	str	r2, [r3, #24]
 800b6d4:	e002      	b.n	800b6dc <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800b6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d8:	2200      	movs	r2, #0
 800b6da:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800b6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d106      	bne.n	800b6f2 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b6e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f022 ff7f 	bl	802e5ee <HAL_PCD_DataInStageCallback>
 800b6f0:	e01b      	b.n	800b72a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800b6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f4:	695a      	ldr	r2, [r3, #20]
 800b6f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6fa:	441a      	add	r2, r3
 800b6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6fe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800b700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b702:	69da      	ldr	r2, [r3, #28]
 800b704:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b708:	441a      	add	r2, r3
 800b70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b70c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b714:	4618      	mov	r0, r3
 800b716:	f005 fb54 	bl	8010dc2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800b71a:	e006      	b.n	800b72a <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b71c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b720:	461a      	mov	r2, r3
 800b722:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f91b 	bl	800b960 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b732:	b29b      	uxth	r3, r3
 800b734:	b21b      	sxth	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	f6ff ac4d 	blt.w	800afd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3758      	adds	r7, #88	; 0x58
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b088      	sub	sp, #32
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	4613      	mov	r3, r2
 800b752:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d07e      	beq.n	800b85c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b766:	b29b      	uxth	r3, r3
 800b768:	461a      	mov	r2, r3
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	4413      	add	r3, r2
 800b772:	3302      	adds	r3, #2
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	6812      	ldr	r2, [r2, #0]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b786:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	699a      	ldr	r2, [r3, #24]
 800b78c:	8b7b      	ldrh	r3, [r7, #26]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d306      	bcc.n	800b7a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	699a      	ldr	r2, [r3, #24]
 800b796:	8b7b      	ldrh	r3, [r7, #26]
 800b798:	1ad2      	subs	r2, r2, r3
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	619a      	str	r2, [r3, #24]
 800b79e:	e002      	b.n	800b7a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d123      	bne.n	800b7f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4413      	add	r3, r2
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7c8:	833b      	strh	r3, [r7, #24]
 800b7ca:	8b3b      	ldrh	r3, [r7, #24]
 800b7cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7d0:	833b      	strh	r3, [r7, #24]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	441a      	add	r2, r3
 800b7e0:	8b3b      	ldrh	r3, [r7, #24]
 800b7e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b7f6:	88fb      	ldrh	r3, [r7, #6]
 800b7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01f      	beq.n	800b840 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	b29b      	uxth	r3, r3
 800b812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b81a:	82fb      	strh	r3, [r7, #22]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	461a      	mov	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	441a      	add	r2, r3
 800b82a:	8afb      	ldrh	r3, [r7, #22]
 800b82c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b838:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b840:	8b7b      	ldrh	r3, [r7, #26]
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 8087 	beq.w	800b956 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6818      	ldr	r0, [r3, #0]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	6959      	ldr	r1, [r3, #20]
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	891a      	ldrh	r2, [r3, #8]
 800b854:	8b7b      	ldrh	r3, [r7, #26]
 800b856:	f006 ff5e 	bl	8012716 <USB_ReadPMA>
 800b85a:	e07c      	b.n	800b956 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b864:	b29b      	uxth	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	4413      	add	r3, r2
 800b870:	3306      	adds	r3, #6
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	6812      	ldr	r2, [r2, #0]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b884:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	699a      	ldr	r2, [r3, #24]
 800b88a:	8b7b      	ldrh	r3, [r7, #26]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d306      	bcc.n	800b89e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	699a      	ldr	r2, [r3, #24]
 800b894:	8b7b      	ldrh	r3, [r7, #26]
 800b896:	1ad2      	subs	r2, r2, r3
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	619a      	str	r2, [r3, #24]
 800b89c:	e002      	b.n	800b8a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d123      	bne.n	800b8f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c6:	83fb      	strh	r3, [r7, #30]
 800b8c8:	8bfb      	ldrh	r3, [r7, #30]
 800b8ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b8ce:	83fb      	strh	r3, [r7, #30]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	441a      	add	r2, r3
 800b8de:	8bfb      	ldrh	r3, [r7, #30]
 800b8e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b8f4:	88fb      	ldrh	r3, [r7, #6]
 800b8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d11f      	bne.n	800b93e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	b29b      	uxth	r3, r3
 800b910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b918:	83bb      	strh	r3, [r7, #28]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	441a      	add	r2, r3
 800b928:	8bbb      	ldrh	r3, [r7, #28]
 800b92a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b92e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b93e:	8b7b      	ldrh	r3, [r7, #26]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d008      	beq.n	800b956 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6818      	ldr	r0, [r3, #0]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	6959      	ldr	r1, [r3, #20]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	895a      	ldrh	r2, [r3, #10]
 800b950:	8b7b      	ldrh	r3, [r7, #26]
 800b952:	f006 fee0 	bl	8012716 <USB_ReadPMA>
    }
  }

  return count;
 800b956:	8b7b      	ldrh	r3, [r7, #26]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3720      	adds	r7, #32
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b0a2      	sub	sp, #136	; 0x88
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b96e:	88fb      	ldrh	r3, [r7, #6]
 800b970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 81c7 	beq.w	800bd08 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b982:	b29b      	uxth	r3, r3
 800b984:	461a      	mov	r2, r3
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	4413      	add	r3, r2
 800b98e:	3302      	adds	r3, #2
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	6812      	ldr	r2, [r2, #0]
 800b996:	4413      	add	r3, r2
 800b998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	699a      	ldr	r2, [r3, #24]
 800b9aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d907      	bls.n	800b9c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	699a      	ldr	r2, [r3, #24]
 800b9b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b9ba:	1ad2      	subs	r2, r2, r3
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	619a      	str	r2, [r3, #24]
 800b9c0:	e002      	b.n	800b9c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f040 80b9 	bne.w	800bb44 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d126      	bne.n	800ba28 <HAL_PCD_EP_DB_Transmit+0xc8>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	4413      	add	r3, r2
 800b9f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	011a      	lsls	r2, r3, #4
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	881b      	ldrh	r3, [r3, #0]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	801a      	strh	r2, [r3, #0]
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba24:	801a      	strh	r2, [r3, #0]
 800ba26:	e01a      	b.n	800ba5e <HAL_PCD_EP_DB_Transmit+0xfe>
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	785b      	ldrb	r3, [r3, #1]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d116      	bne.n	800ba5e <HAL_PCD_EP_DB_Transmit+0xfe>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	633b      	str	r3, [r7, #48]	; 0x30
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	4413      	add	r3, r2
 800ba46:	633b      	str	r3, [r7, #48]	; 0x30
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	011a      	lsls	r2, r3, #4
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	4413      	add	r3, r2
 800ba52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	623b      	str	r3, [r7, #32]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	785b      	ldrb	r3, [r3, #1]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d126      	bne.n	800baba <HAL_PCD_EP_DB_Transmit+0x15a>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	61bb      	str	r3, [r7, #24]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	4413      	add	r3, r2
 800ba82:	61bb      	str	r3, [r7, #24]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	011a      	lsls	r2, r3, #4
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba92:	617b      	str	r3, [r7, #20]
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	801a      	strh	r2, [r3, #0]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	801a      	strh	r2, [r3, #0]
 800bab8:	e017      	b.n	800baea <HAL_PCD_EP_DB_Transmit+0x18a>
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	785b      	ldrb	r3, [r3, #1]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d113      	bne.n	800baea <HAL_PCD_EP_DB_Transmit+0x18a>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baca:	b29b      	uxth	r3, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	4413      	add	r3, r2
 800bad2:	623b      	str	r3, [r7, #32]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	011a      	lsls	r2, r3, #4
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	4413      	add	r3, r2
 800bade:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bae2:	61fb      	str	r3, [r7, #28]
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	2200      	movs	r2, #0
 800bae8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	4619      	mov	r1, r3
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f022 fd7c 	bl	802e5ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 82d4 	beq.w	800c0aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb1c:	827b      	strh	r3, [r7, #18]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	441a      	add	r2, r3
 800bb2c:	8a7b      	ldrh	r3, [r7, #18]
 800bb2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	8013      	strh	r3, [r2, #0]
 800bb42:	e2b2      	b.n	800c0aa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bb44:	88fb      	ldrh	r3, [r7, #6]
 800bb46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d021      	beq.n	800bb92 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	441a      	add	r2, r3
 800bb7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bb7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	f040 8286 	bne.w	800c0aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	695a      	ldr	r2, [r3, #20]
 800bba2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bba6:	441a      	add	r2, r3
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	69da      	ldr	r2, [r3, #28]
 800bbb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bbb4:	441a      	add	r2, r3
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	6a1a      	ldr	r2, [r3, #32]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d309      	bcc.n	800bbda <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	6a1a      	ldr	r2, [r3, #32]
 800bbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbd2:	1ad2      	subs	r2, r2, r3
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	621a      	str	r2, [r3, #32]
 800bbd8:	e015      	b.n	800bc06 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d107      	bne.n	800bbf2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800bbe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bbe6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bbf0:	e009      	b.n	800bc06 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2200      	movs	r2, #0
 800bc04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	785b      	ldrb	r3, [r3, #1]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d155      	bne.n	800bcba <HAL_PCD_EP_DB_Transmit+0x35a>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	461a      	mov	r2, r3
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	4413      	add	r3, r2
 800bc24:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	011a      	lsls	r2, r3, #4
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	4413      	add	r3, r2
 800bc30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bc34:	637b      	str	r3, [r7, #52]	; 0x34
 800bc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d112      	bne.n	800bc62 <HAL_PCD_EP_DB_Transmit+0x302>
 800bc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4a:	801a      	strh	r2, [r3, #0]
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5e:	801a      	strh	r2, [r3, #0]
 800bc60:	e047      	b.n	800bcf2 <HAL_PCD_EP_DB_Transmit+0x392>
 800bc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc64:	2b3e      	cmp	r3, #62	; 0x3e
 800bc66:	d811      	bhi.n	800bc8c <HAL_PCD_EP_DB_Transmit+0x32c>
 800bc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc6a:	085b      	lsrs	r3, r3, #1
 800bc6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <HAL_PCD_EP_DB_Transmit+0x31e>
 800bc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	029b      	lsls	r3, r3, #10
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc88:	801a      	strh	r2, [r3, #0]
 800bc8a:	e032      	b.n	800bcf2 <HAL_PCD_EP_DB_Transmit+0x392>
 800bc8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc8e:	095b      	lsrs	r3, r3, #5
 800bc90:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc94:	f003 031f 	and.w	r3, r3, #31
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <HAL_PCD_EP_DB_Transmit+0x342>
 800bc9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	029b      	lsls	r3, r3, #10
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb6:	801a      	strh	r2, [r3, #0]
 800bcb8:	e01b      	b.n	800bcf2 <HAL_PCD_EP_DB_Transmit+0x392>
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	785b      	ldrb	r3, [r3, #1]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d117      	bne.n	800bcf2 <HAL_PCD_EP_DB_Transmit+0x392>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	643b      	str	r3, [r7, #64]	; 0x40
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd6:	4413      	add	r3, r2
 800bcd8:	643b      	str	r3, [r7, #64]	; 0x40
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	011a      	lsls	r2, r3, #4
 800bce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce2:	4413      	add	r3, r2
 800bce4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6818      	ldr	r0, [r3, #0]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	6959      	ldr	r1, [r3, #20]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	891a      	ldrh	r2, [r3, #8]
 800bcfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f006 fcc2 	bl	801268a <USB_WritePMA>
 800bd06:	e1d0      	b.n	800c0aa <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	461a      	mov	r2, r3
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	00db      	lsls	r3, r3, #3
 800bd1a:	4413      	add	r3, r2
 800bd1c:	3306      	adds	r3, #6
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	6812      	ldr	r2, [r2, #0]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	699a      	ldr	r2, [r3, #24]
 800bd38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d307      	bcc.n	800bd50 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	699a      	ldr	r2, [r3, #24]
 800bd44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bd48:	1ad2      	subs	r2, r2, r3
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	619a      	str	r2, [r3, #24]
 800bd4e:	e002      	b.n	800bd56 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2200      	movs	r2, #0
 800bd54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f040 80c4 	bne.w	800bee8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d126      	bne.n	800bdb6 <HAL_PCD_EP_DB_Transmit+0x456>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	461a      	mov	r2, r3
 800bd7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd7c:	4413      	add	r3, r2
 800bd7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	011a      	lsls	r2, r3, #4
 800bd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd88:	4413      	add	r3, r2
 800bd8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd9e:	801a      	strh	r2, [r3, #0]
 800bda0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdb2:	801a      	strh	r2, [r3, #0]
 800bdb4:	e01a      	b.n	800bdec <HAL_PCD_EP_DB_Transmit+0x48c>
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	785b      	ldrb	r3, [r3, #1]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d116      	bne.n	800bdec <HAL_PCD_EP_DB_Transmit+0x48c>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	677b      	str	r3, [r7, #116]	; 0x74
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdd2:	4413      	add	r3, r2
 800bdd4:	677b      	str	r3, [r7, #116]	; 0x74
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	011a      	lsls	r2, r3, #4
 800bddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdde:	4413      	add	r3, r2
 800bde0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bde4:	673b      	str	r3, [r7, #112]	; 0x70
 800bde6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bde8:	2200      	movs	r2, #0
 800bdea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	785b      	ldrb	r3, [r3, #1]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d12f      	bne.n	800be5a <HAL_PCD_EP_DB_Transmit+0x4fa>
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	461a      	mov	r2, r3
 800be0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be12:	4413      	add	r3, r2
 800be14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	011a      	lsls	r2, r3, #4
 800be1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be22:	4413      	add	r3, r2
 800be24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	b29b      	uxth	r3, r3
 800be34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be38:	b29a      	uxth	r2, r3
 800be3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be3e:	801a      	strh	r2, [r3, #0]
 800be40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	b29b      	uxth	r3, r3
 800be48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be50:	b29a      	uxth	r2, r3
 800be52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be56:	801a      	strh	r2, [r3, #0]
 800be58:	e017      	b.n	800be8a <HAL_PCD_EP_DB_Transmit+0x52a>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d113      	bne.n	800be8a <HAL_PCD_EP_DB_Transmit+0x52a>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	461a      	mov	r2, r3
 800be6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be70:	4413      	add	r3, r2
 800be72:	67bb      	str	r3, [r7, #120]	; 0x78
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	011a      	lsls	r2, r3, #4
 800be7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be7c:	4413      	add	r3, r2
 800be7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be82:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be86:	2200      	movs	r2, #0
 800be88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	4619      	mov	r1, r3
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f022 fbac 	bl	802e5ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800be96:	88fb      	ldrh	r3, [r7, #6]
 800be98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f040 8104 	bne.w	800c0aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bebc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	441a      	add	r2, r3
 800bece:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	8013      	strh	r3, [r2, #0]
 800bee6:	e0e0      	b.n	800c0aa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bee8:	88fb      	ldrh	r3, [r7, #6]
 800beea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d121      	bne.n	800bf36 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	461a      	mov	r2, r3
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	441a      	add	r2, r3
 800bf1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bf22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bf2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	f040 80b4 	bne.w	800c0aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	695a      	ldr	r2, [r3, #20]
 800bf46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf4a:	441a      	add	r2, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	69da      	ldr	r2, [r3, #28]
 800bf54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf58:	441a      	add	r2, r3
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	6a1a      	ldr	r2, [r3, #32]
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d309      	bcc.n	800bf7e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	6a1a      	ldr	r2, [r3, #32]
 800bf74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf76:	1ad2      	subs	r2, r2, r3
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	621a      	str	r2, [r3, #32]
 800bf7c:	e015      	b.n	800bfaa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d107      	bne.n	800bf96 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800bf86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bf94:	e009      	b.n	800bfaa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	667b      	str	r3, [r7, #100]	; 0x64
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d155      	bne.n	800c064 <HAL_PCD_EP_DB_Transmit+0x704>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	461a      	mov	r2, r3
 800bfca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfcc:	4413      	add	r3, r2
 800bfce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	011a      	lsls	r2, r3, #4
 800bfd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfd8:	4413      	add	r3, r2
 800bfda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfde:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d112      	bne.n	800c00c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800bfe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bff4:	801a      	strh	r2, [r3, #0]
 800bff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c004:	b29a      	uxth	r2, r3
 800c006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c008:	801a      	strh	r2, [r3, #0]
 800c00a:	e044      	b.n	800c096 <HAL_PCD_EP_DB_Transmit+0x736>
 800c00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00e:	2b3e      	cmp	r3, #62	; 0x3e
 800c010:	d811      	bhi.n	800c036 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800c012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c014:	085b      	lsrs	r3, r3, #1
 800c016:	657b      	str	r3, [r7, #84]	; 0x54
 800c018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d002      	beq.n	800c028 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800c022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c024:	3301      	adds	r3, #1
 800c026:	657b      	str	r3, [r7, #84]	; 0x54
 800c028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	029b      	lsls	r3, r3, #10
 800c02e:	b29a      	uxth	r2, r3
 800c030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c032:	801a      	strh	r2, [r3, #0]
 800c034:	e02f      	b.n	800c096 <HAL_PCD_EP_DB_Transmit+0x736>
 800c036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c038:	095b      	lsrs	r3, r3, #5
 800c03a:	657b      	str	r3, [r7, #84]	; 0x54
 800c03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c03e:	f003 031f 	and.w	r3, r3, #31
 800c042:	2b00      	cmp	r3, #0
 800c044:	d102      	bne.n	800c04c <HAL_PCD_EP_DB_Transmit+0x6ec>
 800c046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c048:	3b01      	subs	r3, #1
 800c04a:	657b      	str	r3, [r7, #84]	; 0x54
 800c04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c04e:	b29b      	uxth	r3, r3
 800c050:	029b      	lsls	r3, r3, #10
 800c052:	b29b      	uxth	r3, r3
 800c054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c060:	801a      	strh	r2, [r3, #0]
 800c062:	e018      	b.n	800c096 <HAL_PCD_EP_DB_Transmit+0x736>
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	785b      	ldrb	r3, [r3, #1]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d114      	bne.n	800c096 <HAL_PCD_EP_DB_Transmit+0x736>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c074:	b29b      	uxth	r3, r3
 800c076:	461a      	mov	r2, r3
 800c078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c07a:	4413      	add	r3, r2
 800c07c:	667b      	str	r3, [r7, #100]	; 0x64
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	011a      	lsls	r2, r3, #4
 800c084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c086:	4413      	add	r3, r2
 800c088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c08c:	663b      	str	r3, [r7, #96]	; 0x60
 800c08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c090:	b29a      	uxth	r2, r3
 800c092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c094:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6818      	ldr	r0, [r3, #0]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	6959      	ldr	r1, [r3, #20]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	895a      	ldrh	r2, [r3, #10]
 800c0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	f006 faf0 	bl	801268a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c4:	823b      	strh	r3, [r7, #16]
 800c0c6:	8a3b      	ldrh	r3, [r7, #16]
 800c0c8:	f083 0310 	eor.w	r3, r3, #16
 800c0cc:	823b      	strh	r3, [r7, #16]
 800c0ce:	8a3b      	ldrh	r3, [r7, #16]
 800c0d0:	f083 0320 	eor.w	r3, r3, #32
 800c0d4:	823b      	strh	r3, [r7, #16]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	441a      	add	r2, r3
 800c0e4:	8a3b      	ldrh	r3, [r7, #16]
 800c0e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3788      	adds	r7, #136	; 0x88
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c104:	b480      	push	{r7}
 800c106:	b087      	sub	sp, #28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	607b      	str	r3, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	817b      	strh	r3, [r7, #10]
 800c112:	4613      	mov	r3, r2
 800c114:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c116:	897b      	ldrh	r3, [r7, #10]
 800c118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00b      	beq.n	800c13a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c122:	897b      	ldrh	r3, [r7, #10]
 800c124:	f003 0307 	and.w	r3, r3, #7
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	4613      	mov	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	4413      	add	r3, r2
 800c130:	00db      	lsls	r3, r3, #3
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	4413      	add	r3, r2
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e009      	b.n	800c14e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c13a:	897a      	ldrh	r2, [r7, #10]
 800c13c:	4613      	mov	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	4413      	add	r3, r2
 800c14c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c14e:	893b      	ldrh	r3, [r7, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d107      	bne.n	800c164 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2200      	movs	r2, #0
 800c158:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	80da      	strh	r2, [r3, #6]
 800c162:	e00b      	b.n	800c17c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2201      	movs	r2, #1
 800c168:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	0c1b      	lsrs	r3, r3, #16
 800c176:	b29a      	uxth	r2, r3
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
	...

0800c18c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800c192:	af00      	add	r7, sp, #0
 800c194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c19c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c19e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c1a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	f001 b99a 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c1b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c1b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d02c      	beq.n	800c21c <HAL_RCC_OscConfig+0x90>
 800c1c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c1c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d122      	bne.n	800c21c <HAL_RCC_OscConfig+0x90>
 800c1d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c1da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d118      	bne.n	800c21c <HAL_RCC_OscConfig+0x90>
 800c1ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c1ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 0308 	and.w	r3, r3, #8
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10e      	bne.n	800c21c <HAL_RCC_OscConfig+0x90>
 800c1fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0304 	and.w	r3, r3, #4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d104      	bne.n	800c21c <HAL_RCC_OscConfig+0x90>
 800c212:	f240 114b 	movw	r1, #331	; 0x14b
 800c216:	48ba      	ldr	r0, [pc, #744]	; (800c500 <HAL_RCC_OscConfig+0x374>)
 800c218:	f7f9 fc83 	bl	8005b22 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c21c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 819d 	beq.w	800c56c <HAL_RCC_OscConfig+0x3e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d016      	beq.n	800c270 <HAL_RCC_OscConfig+0xe4>
 800c242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c252:	d00d      	beq.n	800c270 <HAL_RCC_OscConfig+0xe4>
 800c254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c264:	d004      	beq.n	800c270 <HAL_RCC_OscConfig+0xe4>
 800c266:	f240 1151 	movw	r1, #337	; 0x151
 800c26a:	48a5      	ldr	r0, [pc, #660]	; (800c500 <HAL_RCC_OscConfig+0x374>)
 800c26c:	f7f9 fc59 	bl	8005b22 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c270:	4ba4      	ldr	r3, [pc, #656]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f003 030c 	and.w	r3, r3, #12
 800c278:	2b04      	cmp	r3, #4
 800c27a:	d00c      	beq.n	800c296 <HAL_RCC_OscConfig+0x10a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c27c:	4ba1      	ldr	r3, [pc, #644]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	f003 030c 	and.w	r3, r3, #12
 800c284:	2b08      	cmp	r3, #8
 800c286:	d15c      	bne.n	800c342 <HAL_RCC_OscConfig+0x1b6>
 800c288:	4b9e      	ldr	r3, [pc, #632]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c294:	d155      	bne.n	800c342 <HAL_RCC_OscConfig+0x1b6>
 800c296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c29a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c29e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c2a2:	fa93 f3a3 	rbit	r3, r3
 800c2a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c2aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2ae:	fab3 f383 	clz	r3, r3
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	095b      	lsrs	r3, r3, #5
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f043 0301 	orr.w	r3, r3, #1
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d102      	bne.n	800c2c8 <HAL_RCC_OscConfig+0x13c>
 800c2c2:	4b90      	ldr	r3, [pc, #576]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	e015      	b.n	800c2f4 <HAL_RCC_OscConfig+0x168>
 800c2c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c2cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800c2d4:	fa93 f3a3 	rbit	r3, r3
 800c2d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800c2dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c2e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800c2e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c2e8:	fa93 f3a3 	rbit	r3, r3
 800c2ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800c2f0:	4b84      	ldr	r3, [pc, #528]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c2f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800c2fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800c300:	fa92 f2a2 	rbit	r2, r2
 800c304:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800c308:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800c30c:	fab2 f282 	clz	r2, r2
 800c310:	b2d2      	uxtb	r2, r2
 800c312:	f042 0220 	orr.w	r2, r2, #32
 800c316:	b2d2      	uxtb	r2, r2
 800c318:	f002 021f 	and.w	r2, r2, #31
 800c31c:	2101      	movs	r1, #1
 800c31e:	fa01 f202 	lsl.w	r2, r1, r2
 800c322:	4013      	ands	r3, r2
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 8120 	beq.w	800c56a <HAL_RCC_OscConfig+0x3de>
 800c32a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c32e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f040 8117 	bne.w	800c56a <HAL_RCC_OscConfig+0x3de>
      {
        return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	f001 b8d2 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c352:	d106      	bne.n	800c362 <HAL_RCC_OscConfig+0x1d6>
 800c354:	4b6b      	ldr	r3, [pc, #428]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a6a      	ldr	r2, [pc, #424]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c35a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	e036      	b.n	800c3d0 <HAL_RCC_OscConfig+0x244>
 800c362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10c      	bne.n	800c38c <HAL_RCC_OscConfig+0x200>
 800c372:	4b64      	ldr	r3, [pc, #400]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a63      	ldr	r2, [pc, #396]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	4b61      	ldr	r3, [pc, #388]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a60      	ldr	r2, [pc, #384]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	e021      	b.n	800c3d0 <HAL_RCC_OscConfig+0x244>
 800c38c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c39c:	d10c      	bne.n	800c3b8 <HAL_RCC_OscConfig+0x22c>
 800c39e:	4b59      	ldr	r3, [pc, #356]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a58      	ldr	r2, [pc, #352]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	4b56      	ldr	r3, [pc, #344]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a55      	ldr	r2, [pc, #340]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	e00b      	b.n	800c3d0 <HAL_RCC_OscConfig+0x244>
 800c3b8:	4b52      	ldr	r3, [pc, #328]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a51      	ldr	r2, [pc, #324]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	4b4f      	ldr	r3, [pc, #316]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a4e      	ldr	r2, [pc, #312]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c3d0:	4b4c      	ldr	r3, [pc, #304]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d4:	f023 020f 	bic.w	r2, r3, #15
 800c3d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c3dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	4947      	ldr	r1, [pc, #284]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c3ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c3ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d059      	beq.n	800c4ae <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3fa:	f7fb fb07 	bl	8007a0c <HAL_GetTick>
 800c3fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c402:	e00a      	b.n	800c41a <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c404:	f7fb fb02 	bl	8007a0c <HAL_GetTick>
 800c408:	4602      	mov	r2, r0
 800c40a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	2b64      	cmp	r3, #100	; 0x64
 800c412:	d902      	bls.n	800c41a <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 800c414:	2303      	movs	r3, #3
 800c416:	f001 b866 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800c41a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c41e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c422:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800c426:	fa93 f3a3 	rbit	r3, r3
 800c42a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800c42e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c432:	fab3 f383 	clz	r3, r3
 800c436:	b2db      	uxtb	r3, r3
 800c438:	095b      	lsrs	r3, r3, #5
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	f043 0301 	orr.w	r3, r3, #1
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b01      	cmp	r3, #1
 800c444:	d102      	bne.n	800c44c <HAL_RCC_OscConfig+0x2c0>
 800c446:	4b2f      	ldr	r3, [pc, #188]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	e015      	b.n	800c478 <HAL_RCC_OscConfig+0x2ec>
 800c44c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c450:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c454:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800c458:	fa93 f3a3 	rbit	r3, r3
 800c45c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800c460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c464:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800c468:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800c46c:	fa93 f3a3 	rbit	r3, r3
 800c470:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800c474:	4b23      	ldr	r3, [pc, #140]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c47c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800c480:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800c484:	fa92 f2a2 	rbit	r2, r2
 800c488:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800c48c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800c490:	fab2 f282 	clz	r2, r2
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	f042 0220 	orr.w	r2, r2, #32
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	f002 021f 	and.w	r2, r2, #31
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	fa01 f202 	lsl.w	r2, r1, r2
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d0ab      	beq.n	800c404 <HAL_RCC_OscConfig+0x278>
 800c4ac:	e05e      	b.n	800c56c <HAL_RCC_OscConfig+0x3e0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4ae:	f7fb faad 	bl	8007a0c <HAL_GetTick>
 800c4b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c4b6:	e00a      	b.n	800c4ce <HAL_RCC_OscConfig+0x342>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c4b8:	f7fb faa8 	bl	8007a0c <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b64      	cmp	r3, #100	; 0x64
 800c4c6:	d902      	bls.n	800c4ce <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	f001 b80c 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800c4ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800c4da:	fa93 f3a3 	rbit	r3, r3
 800c4de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800c4e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c4e6:	fab3 f383 	clz	r3, r3
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	095b      	lsrs	r3, r3, #5
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	f043 0301 	orr.w	r3, r3, #1
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d106      	bne.n	800c508 <HAL_RCC_OscConfig+0x37c>
 800c4fa:	4b02      	ldr	r3, [pc, #8]	; (800c504 <HAL_RCC_OscConfig+0x378>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	e019      	b.n	800c534 <HAL_RCC_OscConfig+0x3a8>
 800c500:	080336e0 	.word	0x080336e0
 800c504:	40021000 	.word	0x40021000
 800c508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c50c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c510:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800c514:	fa93 f3a3 	rbit	r3, r3
 800c518:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800c51c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c520:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800c524:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800c528:	fa93 f3a3 	rbit	r3, r3
 800c52c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800c530:	4bc0      	ldr	r3, [pc, #768]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c534:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c538:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800c53c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800c540:	fa92 f2a2 	rbit	r2, r2
 800c544:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800c548:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800c54c:	fab2 f282 	clz	r2, r2
 800c550:	b2d2      	uxtb	r2, r2
 800c552:	f042 0220 	orr.w	r2, r2, #32
 800c556:	b2d2      	uxtb	r2, r2
 800c558:	f002 021f 	and.w	r2, r2, #31
 800c55c:	2101      	movs	r1, #1
 800c55e:	fa01 f202 	lsl.w	r2, r1, r2
 800c562:	4013      	ands	r3, r2
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1a7      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x32c>
 800c568:	e000      	b.n	800c56c <HAL_RCC_OscConfig+0x3e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c56a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c56c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 0302 	and.w	r3, r3, #2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 81a2 	beq.w	800c8c6 <HAL_RCC_OscConfig+0x73a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00c      	beq.n	800c5ac <HAL_RCC_OscConfig+0x420>
 800c592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d004      	beq.n	800c5ac <HAL_RCC_OscConfig+0x420>
 800c5a2:	f240 1189 	movw	r1, #393	; 0x189
 800c5a6:	48a4      	ldr	r0, [pc, #656]	; (800c838 <HAL_RCC_OscConfig+0x6ac>)
 800c5a8:	f7f9 fabb 	bl	8005b22 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c5ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c5b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	2b1f      	cmp	r3, #31
 800c5ba:	d904      	bls.n	800c5c6 <HAL_RCC_OscConfig+0x43a>
 800c5bc:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800c5c0:	489d      	ldr	r0, [pc, #628]	; (800c838 <HAL_RCC_OscConfig+0x6ac>)
 800c5c2:	f7f9 faae 	bl	8005b22 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800c5c6:	4b9b      	ldr	r3, [pc, #620]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	f003 030c 	and.w	r3, r3, #12
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <HAL_RCC_OscConfig+0x45e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800c5d2:	4b98      	ldr	r3, [pc, #608]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	f003 030c 	and.w	r3, r3, #12
 800c5da:	2b08      	cmp	r3, #8
 800c5dc:	d172      	bne.n	800c6c4 <HAL_RCC_OscConfig+0x538>
 800c5de:	4b95      	ldr	r3, [pc, #596]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d16c      	bne.n	800c6c4 <HAL_RCC_OscConfig+0x538>
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c5f4:	fa93 f3a3 	rbit	r3, r3
 800c5f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800c5fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c600:	fab3 f383 	clz	r3, r3
 800c604:	b2db      	uxtb	r3, r3
 800c606:	095b      	lsrs	r3, r3, #5
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	f043 0301 	orr.w	r3, r3, #1
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	d102      	bne.n	800c61a <HAL_RCC_OscConfig+0x48e>
 800c614:	4b87      	ldr	r3, [pc, #540]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	e013      	b.n	800c642 <HAL_RCC_OscConfig+0x4b6>
 800c61a:	2302      	movs	r3, #2
 800c61c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c620:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c624:	fa93 f3a3 	rbit	r3, r3
 800c628:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800c62c:	2302      	movs	r3, #2
 800c62e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800c632:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c636:	fa93 f3a3 	rbit	r3, r3
 800c63a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c63e:	4b7d      	ldr	r3, [pc, #500]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c642:	2202      	movs	r2, #2
 800c644:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800c648:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800c64c:	fa92 f2a2 	rbit	r2, r2
 800c650:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800c654:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800c658:	fab2 f282 	clz	r2, r2
 800c65c:	b2d2      	uxtb	r2, r2
 800c65e:	f042 0220 	orr.w	r2, r2, #32
 800c662:	b2d2      	uxtb	r2, r2
 800c664:	f002 021f 	and.w	r2, r2, #31
 800c668:	2101      	movs	r1, #1
 800c66a:	fa01 f202 	lsl.w	r2, r1, r2
 800c66e:	4013      	ands	r3, r2
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00a      	beq.n	800c68a <HAL_RCC_OscConfig+0x4fe>
 800c674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d002      	beq.n	800c68a <HAL_RCC_OscConfig+0x4fe>
      {
        return HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	f000 bf2e 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c68a:	4b6a      	ldr	r3, [pc, #424]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	21f8      	movs	r1, #248	; 0xf8
 800c6a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6a4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800c6a8:	fa91 f1a1 	rbit	r1, r1
 800c6ac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800c6b0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800c6b4:	fab1 f181 	clz	r1, r1
 800c6b8:	b2c9      	uxtb	r1, r1
 800c6ba:	408b      	lsls	r3, r1
 800c6bc:	495d      	ldr	r1, [pc, #372]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6c2:	e100      	b.n	800c8c6 <HAL_RCC_OscConfig+0x73a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c6c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c6c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 8088 	beq.w	800c7e6 <HAL_RCC_OscConfig+0x65a>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800c6e0:	fa93 f3a3 	rbit	r3, r3
 800c6e4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800c6e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6ec:	fab3 f383 	clz	r3, r3
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c6f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	2301      	movs	r3, #1
 800c700:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c702:	f7fb f983 	bl	8007a0c <HAL_GetTick>
 800c706:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c70a:	e00a      	b.n	800c722 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c70c:	f7fb f97e 	bl	8007a0c <HAL_GetTick>
 800c710:	4602      	mov	r2, r0
 800c712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d902      	bls.n	800c722 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	f000 bee2 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800c722:	2302      	movs	r3, #2
 800c724:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c728:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c72c:	fa93 f3a3 	rbit	r3, r3
 800c730:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800c734:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c738:	fab3 f383 	clz	r3, r3
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	095b      	lsrs	r3, r3, #5
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f043 0301 	orr.w	r3, r3, #1
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d102      	bne.n	800c752 <HAL_RCC_OscConfig+0x5c6>
 800c74c:	4b39      	ldr	r3, [pc, #228]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	e013      	b.n	800c77a <HAL_RCC_OscConfig+0x5ee>
 800c752:	2302      	movs	r3, #2
 800c754:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c758:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800c75c:	fa93 f3a3 	rbit	r3, r3
 800c760:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c764:	2302      	movs	r3, #2
 800c766:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c76a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c76e:	fa93 f3a3 	rbit	r3, r3
 800c772:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c776:	4b2f      	ldr	r3, [pc, #188]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77a:	2202      	movs	r2, #2
 800c77c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800c780:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c784:	fa92 f2a2 	rbit	r2, r2
 800c788:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800c78c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c790:	fab2 f282 	clz	r2, r2
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	f042 0220 	orr.w	r2, r2, #32
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	f002 021f 	and.w	r2, r2, #31
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	fa01 f202 	lsl.w	r2, r1, r2
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0af      	beq.n	800c70c <HAL_RCC_OscConfig+0x580>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7ac:	4b21      	ldr	r3, [pc, #132]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	695b      	ldr	r3, [r3, #20]
 800c7c0:	21f8      	movs	r1, #248	; 0xf8
 800c7c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800c7ca:	fa91 f1a1 	rbit	r1, r1
 800c7ce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800c7d2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800c7d6:	fab1 f181 	clz	r1, r1
 800c7da:	b2c9      	uxtb	r1, r1
 800c7dc:	408b      	lsls	r3, r1
 800c7de:	4915      	ldr	r1, [pc, #84]	; (800c834 <HAL_RCC_OscConfig+0x6a8>)
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	600b      	str	r3, [r1, #0]
 800c7e4:	e06f      	b.n	800c8c6 <HAL_RCC_OscConfig+0x73a>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c7f0:	fa93 f3a3 	rbit	r3, r3
 800c7f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800c7f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7fc:	fab3 f383 	clz	r3, r3
 800c800:	b2db      	uxtb	r3, r3
 800c802:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c806:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	461a      	mov	r2, r3
 800c80e:	2300      	movs	r3, #0
 800c810:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c812:	f7fb f8fb 	bl	8007a0c <HAL_GetTick>
 800c816:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c81a:	e00f      	b.n	800c83c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c81c:	f7fb f8f6 	bl	8007a0c <HAL_GetTick>
 800c820:	4602      	mov	r2, r0
 800c822:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d907      	bls.n	800c83c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	f000 be5a 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800c832:	bf00      	nop
 800c834:	40021000 	.word	0x40021000
 800c838:	080336e0 	.word	0x080336e0
 800c83c:	2302      	movs	r3, #2
 800c83e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c842:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c846:	fa93 f3a3 	rbit	r3, r3
 800c84a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800c84e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c852:	fab3 f383 	clz	r3, r3
 800c856:	b2db      	uxtb	r3, r3
 800c858:	095b      	lsrs	r3, r3, #5
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f043 0301 	orr.w	r3, r3, #1
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b01      	cmp	r3, #1
 800c864:	d102      	bne.n	800c86c <HAL_RCC_OscConfig+0x6e0>
 800c866:	4b81      	ldr	r3, [pc, #516]	; (800ca6c <HAL_RCC_OscConfig+0x8e0>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	e013      	b.n	800c894 <HAL_RCC_OscConfig+0x708>
 800c86c:	2302      	movs	r3, #2
 800c86e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c876:	fa93 f3a3 	rbit	r3, r3
 800c87a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c87e:	2302      	movs	r3, #2
 800c880:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c884:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c888:	fa93 f3a3 	rbit	r3, r3
 800c88c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c890:	4b76      	ldr	r3, [pc, #472]	; (800ca6c <HAL_RCC_OscConfig+0x8e0>)
 800c892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c894:	2202      	movs	r2, #2
 800c896:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800c89a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800c89e:	fa92 f2a2 	rbit	r2, r2
 800c8a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800c8a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c8aa:	fab2 f282 	clz	r2, r2
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	f042 0220 	orr.w	r2, r2, #32
 800c8b4:	b2d2      	uxtb	r2, r2
 800c8b6:	f002 021f 	and.w	r2, r2, #31
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	fa01 f202 	lsl.w	r2, r1, r2
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1aa      	bne.n	800c81c <HAL_RCC_OscConfig+0x690>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c8ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f003 0308 	and.w	r3, r3, #8
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 812b 	beq.w	800cb32 <HAL_RCC_OscConfig+0x9a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c8dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c8e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00c      	beq.n	800c906 <HAL_RCC_OscConfig+0x77a>
 800c8ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c8f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d004      	beq.n	800c906 <HAL_RCC_OscConfig+0x77a>
 800c8fc:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800c900:	485b      	ldr	r0, [pc, #364]	; (800ca70 <HAL_RCC_OscConfig+0x8e4>)
 800c902:	f7f9 f90e 	bl	8005b22 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c90a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d079      	beq.n	800ca0a <HAL_RCC_OscConfig+0x87e>
 800c916:	2301      	movs	r3, #1
 800c918:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c91c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c920:	fa93 f3a3 	rbit	r3, r3
 800c924:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800c928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c92c:	fab3 f383 	clz	r3, r3
 800c930:	b2db      	uxtb	r3, r3
 800c932:	461a      	mov	r2, r3
 800c934:	4b4f      	ldr	r3, [pc, #316]	; (800ca74 <HAL_RCC_OscConfig+0x8e8>)
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	461a      	mov	r2, r3
 800c93c:	2301      	movs	r3, #1
 800c93e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c940:	f7fb f864 	bl	8007a0c <HAL_GetTick>
 800c944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c948:	e00a      	b.n	800c960 <HAL_RCC_OscConfig+0x7d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c94a:	f7fb f85f 	bl	8007a0c <HAL_GetTick>
 800c94e:	4602      	mov	r2, r0
 800c950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	2b02      	cmp	r3, #2
 800c958:	d902      	bls.n	800c960 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	f000 bdc3 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800c960:	2302      	movs	r3, #2
 800c962:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c966:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c96a:	fa93 f3a3 	rbit	r3, r3
 800c96e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c976:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c97a:	2202      	movs	r2, #2
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c982:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	fa93 f2a3 	rbit	r2, r3
 800c98c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c99e:	2202      	movs	r2, #2
 800c9a0:	601a      	str	r2, [r3, #0]
 800c9a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	fa93 f2a3 	rbit	r2, r3
 800c9b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c9b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800c9b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9ba:	4b2c      	ldr	r3, [pc, #176]	; (800ca6c <HAL_RCC_OscConfig+0x8e0>)
 800c9bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c9c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c9c6:	2102      	movs	r1, #2
 800c9c8:	6019      	str	r1, [r3, #0]
 800c9ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c9ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	fa93 f1a3 	rbit	r1, r3
 800c9d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c9dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c9e0:	6019      	str	r1, [r3, #0]
  return result;
 800c9e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c9e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	fab3 f383 	clz	r3, r3
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	f003 031f 	and.w	r3, r3, #31
 800c9fc:	2101      	movs	r1, #1
 800c9fe:	fa01 f303 	lsl.w	r3, r1, r3
 800ca02:	4013      	ands	r3, r2
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d0a0      	beq.n	800c94a <HAL_RCC_OscConfig+0x7be>
 800ca08:	e093      	b.n	800cb32 <HAL_RCC_OscConfig+0x9a6>
 800ca0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ca12:	2201      	movs	r2, #1
 800ca14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	fa93 f2a3 	rbit	r2, r3
 800ca24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ca2c:	601a      	str	r2, [r3, #0]
  return result;
 800ca2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ca36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ca38:	fab3 f383 	clz	r3, r3
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	461a      	mov	r2, r3
 800ca40:	4b0c      	ldr	r3, [pc, #48]	; (800ca74 <HAL_RCC_OscConfig+0x8e8>)
 800ca42:	4413      	add	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	461a      	mov	r2, r3
 800ca48:	2300      	movs	r3, #0
 800ca4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca4c:	f7fa ffde 	bl	8007a0c <HAL_GetTick>
 800ca50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca54:	e010      	b.n	800ca78 <HAL_RCC_OscConfig+0x8ec>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ca56:	f7fa ffd9 	bl	8007a0c <HAL_GetTick>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d908      	bls.n	800ca78 <HAL_RCC_OscConfig+0x8ec>
        {
          return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	f000 bd3d 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800ca6c:	40021000 	.word	0x40021000
 800ca70:	080336e0 	.word	0x080336e0
 800ca74:	10908120 	.word	0x10908120
 800ca78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ca80:	2202      	movs	r2, #2
 800ca82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	fa93 f2a3 	rbit	r2, r3
 800ca92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800caa0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800caa4:	2202      	movs	r2, #2
 800caa6:	601a      	str	r2, [r3, #0]
 800caa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800caac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	fa93 f2a3 	rbit	r2, r3
 800cab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800caba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cac8:	2202      	movs	r2, #2
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	fa93 f2a3 	rbit	r2, r3
 800cada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cade:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cae2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cae4:	4bb8      	ldr	r3, [pc, #736]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800caec:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800caf0:	2102      	movs	r1, #2
 800caf2:	6019      	str	r1, [r3, #0]
 800caf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800caf8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	fa93 f1a3 	rbit	r1, r3
 800cb02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb06:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cb0a:	6019      	str	r1, [r3, #0]
  return result;
 800cb0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb10:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	fab3 f383 	clz	r3, r3
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	f003 031f 	and.w	r3, r3, #31
 800cb26:	2101      	movs	r1, #1
 800cb28:	fa01 f303 	lsl.w	r3, r1, r3
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d191      	bne.n	800ca56 <HAL_RCC_OscConfig+0x8ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 0304 	and.w	r3, r3, #4
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f000 81c0 	beq.w	800cec8 <HAL_RCC_OscConfig+0xd3c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800cb4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d014      	beq.n	800cb88 <HAL_RCC_OscConfig+0x9fc>
 800cb5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d00c      	beq.n	800cb88 <HAL_RCC_OscConfig+0x9fc>
 800cb6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	2b05      	cmp	r3, #5
 800cb7c:	d004      	beq.n	800cb88 <HAL_RCC_OscConfig+0x9fc>
 800cb7e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800cb82:	4892      	ldr	r0, [pc, #584]	; (800cdcc <HAL_RCC_OscConfig+0xc40>)
 800cb84:	f7f8 ffcd 	bl	8005b22 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb88:	4b8f      	ldr	r3, [pc, #572]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cb8a:	69db      	ldr	r3, [r3, #28]
 800cb8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d116      	bne.n	800cbc2 <HAL_RCC_OscConfig+0xa36>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb94:	4b8c      	ldr	r3, [pc, #560]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	4a8b      	ldr	r2, [pc, #556]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cb9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb9e:	61d3      	str	r3, [r2, #28]
 800cba0:	4b89      	ldr	r3, [pc, #548]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cba2:	69db      	ldr	r3, [r3, #28]
 800cba4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800cba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbb6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cbba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbc2:	4b83      	ldr	r3, [pc, #524]	; (800cdd0 <HAL_RCC_OscConfig+0xc44>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d11b      	bne.n	800cc06 <HAL_RCC_OscConfig+0xa7a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cbce:	4b80      	ldr	r3, [pc, #512]	; (800cdd0 <HAL_RCC_OscConfig+0xc44>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a7f      	ldr	r2, [pc, #508]	; (800cdd0 <HAL_RCC_OscConfig+0xc44>)
 800cbd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbda:	f7fa ff17 	bl	8007a0c <HAL_GetTick>
 800cbde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbe2:	e00a      	b.n	800cbfa <HAL_RCC_OscConfig+0xa6e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbe4:	f7fa ff12 	bl	8007a0c <HAL_GetTick>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2b64      	cmp	r3, #100	; 0x64
 800cbf2:	d902      	bls.n	800cbfa <HAL_RCC_OscConfig+0xa6e>
        {
          return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	f000 bc76 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbfa:	4b75      	ldr	r3, [pc, #468]	; (800cdd0 <HAL_RCC_OscConfig+0xc44>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d0ee      	beq.n	800cbe4 <HAL_RCC_OscConfig+0xa58>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d106      	bne.n	800cc24 <HAL_RCC_OscConfig+0xa98>
 800cc16:	4b6c      	ldr	r3, [pc, #432]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	4a6b      	ldr	r2, [pc, #428]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc1c:	f043 0301 	orr.w	r3, r3, #1
 800cc20:	6213      	str	r3, [r2, #32]
 800cc22:	e035      	b.n	800cc90 <HAL_RCC_OscConfig+0xb04>
 800cc24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10c      	bne.n	800cc4e <HAL_RCC_OscConfig+0xac2>
 800cc34:	4b64      	ldr	r3, [pc, #400]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc36:	6a1b      	ldr	r3, [r3, #32]
 800cc38:	4a63      	ldr	r2, [pc, #396]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc3a:	f023 0301 	bic.w	r3, r3, #1
 800cc3e:	6213      	str	r3, [r2, #32]
 800cc40:	4b61      	ldr	r3, [pc, #388]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	4a60      	ldr	r2, [pc, #384]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc46:	f023 0304 	bic.w	r3, r3, #4
 800cc4a:	6213      	str	r3, [r2, #32]
 800cc4c:	e020      	b.n	800cc90 <HAL_RCC_OscConfig+0xb04>
 800cc4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	2b05      	cmp	r3, #5
 800cc5c:	d10c      	bne.n	800cc78 <HAL_RCC_OscConfig+0xaec>
 800cc5e:	4b5a      	ldr	r3, [pc, #360]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	4a59      	ldr	r2, [pc, #356]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc64:	f043 0304 	orr.w	r3, r3, #4
 800cc68:	6213      	str	r3, [r2, #32]
 800cc6a:	4b57      	ldr	r3, [pc, #348]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc6c:	6a1b      	ldr	r3, [r3, #32]
 800cc6e:	4a56      	ldr	r2, [pc, #344]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc70:	f043 0301 	orr.w	r3, r3, #1
 800cc74:	6213      	str	r3, [r2, #32]
 800cc76:	e00b      	b.n	800cc90 <HAL_RCC_OscConfig+0xb04>
 800cc78:	4b53      	ldr	r3, [pc, #332]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	4a52      	ldr	r2, [pc, #328]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc7e:	f023 0301 	bic.w	r3, r3, #1
 800cc82:	6213      	str	r3, [r2, #32]
 800cc84:	4b50      	ldr	r3, [pc, #320]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc86:	6a1b      	ldr	r3, [r3, #32]
 800cc88:	4a4f      	ldr	r2, [pc, #316]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cc8a:	f023 0304 	bic.w	r3, r3, #4
 800cc8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cc90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 8082 	beq.w	800cda6 <HAL_RCC_OscConfig+0xc1a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cca2:	f7fa feb3 	bl	8007a0c <HAL_GetTick>
 800cca6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccaa:	e00c      	b.n	800ccc6 <HAL_RCC_OscConfig+0xb3a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccac:	f7fa feae 	bl	8007a0c <HAL_GetTick>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d902      	bls.n	800ccc6 <HAL_RCC_OscConfig+0xb3a>
        {
          return HAL_TIMEOUT;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	f000 bc10 	b.w	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800ccc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ccca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ccce:	2202      	movs	r2, #2
 800ccd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ccd6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	fa93 f2a3 	rbit	r2, r3
 800cce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cce4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ccee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ccfa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	fa93 f2a3 	rbit	r2, r3
 800cd04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd08:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800cd0c:	601a      	str	r2, [r3, #0]
  return result;
 800cd0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800cd16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd18:	fab3 f383 	clz	r3, r3
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	095b      	lsrs	r3, r3, #5
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	f043 0302 	orr.w	r3, r3, #2
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d102      	bne.n	800cd32 <HAL_RCC_OscConfig+0xba6>
 800cd2c:	4b26      	ldr	r3, [pc, #152]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cd2e:	6a1b      	ldr	r3, [r3, #32]
 800cd30:	e013      	b.n	800cd5a <HAL_RCC_OscConfig+0xbce>
 800cd32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd36:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd42:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	fa93 f2a3 	rbit	r2, r3
 800cd4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd50:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	4b1c      	ldr	r3, [pc, #112]	; (800cdc8 <HAL_RCC_OscConfig+0xc3c>)
 800cd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cd5e:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800cd62:	2102      	movs	r1, #2
 800cd64:	6011      	str	r1, [r2, #0]
 800cd66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cd6a:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800cd6e:	6812      	ldr	r2, [r2, #0]
 800cd70:	fa92 f1a2 	rbit	r1, r2
 800cd74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cd78:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800cd7c:	6011      	str	r1, [r2, #0]
  return result;
 800cd7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cd82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800cd86:	6812      	ldr	r2, [r2, #0]
 800cd88:	fab2 f282 	clz	r2, r2
 800cd8c:	b2d2      	uxtb	r2, r2
 800cd8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	f002 021f 	and.w	r2, r2, #31
 800cd98:	2101      	movs	r1, #1
 800cd9a:	fa01 f202 	lsl.w	r2, r1, r2
 800cd9e:	4013      	ands	r3, r2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d083      	beq.n	800ccac <HAL_RCC_OscConfig+0xb20>
 800cda4:	e086      	b.n	800ceb4 <HAL_RCC_OscConfig+0xd28>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cda6:	f7fa fe31 	bl	8007a0c <HAL_GetTick>
 800cdaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cdae:	e011      	b.n	800cdd4 <HAL_RCC_OscConfig+0xc48>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdb0:	f7fa fe2c 	bl	8007a0c <HAL_GetTick>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d907      	bls.n	800cdd4 <HAL_RCC_OscConfig+0xc48>
        {
          return HAL_TIMEOUT;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	e38e      	b.n	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800cdc8:	40021000 	.word	0x40021000
 800cdcc:	080336e0 	.word	0x080336e0
 800cdd0:	40007000 	.word	0x40007000
 800cdd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdd8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cddc:	2202      	movs	r2, #2
 800cdde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cde0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cde4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	fa93 f2a3 	rbit	r2, r3
 800cdee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdf2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cdfc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ce00:	2202      	movs	r2, #2
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce08:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	fa93 f2a3 	rbit	r2, r3
 800ce12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce16:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800ce1a:	601a      	str	r2, [r3, #0]
  return result;
 800ce1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800ce24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce26:	fab3 f383 	clz	r3, r3
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	095b      	lsrs	r3, r3, #5
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f043 0302 	orr.w	r3, r3, #2
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d102      	bne.n	800ce40 <HAL_RCC_OscConfig+0xcb4>
 800ce3a:	4bbb      	ldr	r3, [pc, #748]	; (800d128 <HAL_RCC_OscConfig+0xf9c>)
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	e013      	b.n	800ce68 <HAL_RCC_OscConfig+0xcdc>
 800ce40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce44:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800ce48:	2202      	movs	r2, #2
 800ce4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce50:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	fa93 f2a3 	rbit	r2, r3
 800ce5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce5e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	4bb0      	ldr	r3, [pc, #704]	; (800d128 <HAL_RCC_OscConfig+0xf9c>)
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ce6c:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800ce70:	2102      	movs	r1, #2
 800ce72:	6011      	str	r1, [r2, #0]
 800ce74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ce78:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800ce7c:	6812      	ldr	r2, [r2, #0]
 800ce7e:	fa92 f1a2 	rbit	r1, r2
 800ce82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ce86:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800ce8a:	6011      	str	r1, [r2, #0]
  return result;
 800ce8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ce90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800ce94:	6812      	ldr	r2, [r2, #0]
 800ce96:	fab2 f282 	clz	r2, r2
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cea0:	b2d2      	uxtb	r2, r2
 800cea2:	f002 021f 	and.w	r2, r2, #31
 800cea6:	2101      	movs	r1, #1
 800cea8:	fa01 f202 	lsl.w	r2, r1, r2
 800ceac:	4013      	ands	r3, r2
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f47f af7e 	bne.w	800cdb0 <HAL_RCC_OscConfig+0xc24>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ceb4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d105      	bne.n	800cec8 <HAL_RCC_OscConfig+0xd3c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cebc:	4b9a      	ldr	r3, [pc, #616]	; (800d128 <HAL_RCC_OscConfig+0xf9c>)
 800cebe:	69db      	ldr	r3, [r3, #28]
 800cec0:	4a99      	ldr	r2, [pc, #612]	; (800d128 <HAL_RCC_OscConfig+0xf9c>)
 800cec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cec6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800cec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	69db      	ldr	r3, [r3, #28]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d014      	beq.n	800cf02 <HAL_RCC_OscConfig+0xd76>
 800ced8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cedc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d00c      	beq.n	800cf02 <HAL_RCC_OscConfig+0xd76>
 800cee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ceec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	69db      	ldr	r3, [r3, #28]
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d004      	beq.n	800cf02 <HAL_RCC_OscConfig+0xd76>
 800cef8:	f240 213a 	movw	r1, #570	; 0x23a
 800cefc:	488b      	ldr	r0, [pc, #556]	; (800d12c <HAL_RCC_OscConfig+0xfa0>)
 800cefe:	f7f8 fe10 	bl	8005b22 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	69db      	ldr	r3, [r3, #28]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 82e8 	beq.w	800d4e4 <HAL_RCC_OscConfig+0x1358>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf14:	4b84      	ldr	r3, [pc, #528]	; (800d128 <HAL_RCC_OscConfig+0xf9c>)
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	f003 030c 	and.w	r3, r3, #12
 800cf1c:	2b08      	cmp	r3, #8
 800cf1e:	f000 82b6 	beq.w	800d48e <HAL_RCC_OscConfig+0x1302>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	f040 8207 	bne.w	800d342 <HAL_RCC_OscConfig+0x11b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800cf34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6a1b      	ldr	r3, [r3, #32]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00d      	beq.n	800cf60 <HAL_RCC_OscConfig+0xdd4>
 800cf44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf54:	d004      	beq.n	800cf60 <HAL_RCC_OscConfig+0xdd4>
 800cf56:	f240 2143 	movw	r1, #579	; 0x243
 800cf5a:	4874      	ldr	r0, [pc, #464]	; (800d12c <HAL_RCC_OscConfig+0xfa0>)
 800cf5c:	f7f8 fde1 	bl	8005b22 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800cf60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f000 8083 	beq.w	800d078 <HAL_RCC_OscConfig+0xeec>
 800cf72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf82:	d079      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800cf84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cf94:	d070      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800cf96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cfa6:	d067      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800cfa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfb8:	d05e      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800cfba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800cfca:	d055      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800cfcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800cfdc:	d04c      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800cfde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800cfee:	d043      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800cff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d000:	d03a      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800d002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800d012:	d031      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800d014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d020:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800d024:	d028      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800d026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d02a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d032:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800d036:	d01f      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800d038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d03c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d048:	d016      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800d04a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d04e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d056:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800d05a:	d00d      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800d05c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800d06c:	d004      	beq.n	800d078 <HAL_RCC_OscConfig+0xeec>
 800d06e:	f44f 7111 	mov.w	r1, #580	; 0x244
 800d072:	482e      	ldr	r0, [pc, #184]	; (800d12c <HAL_RCC_OscConfig+0xfa0>)
 800d074:	f7f8 fd55 	bl	8005b22 <assert_failed>
 800d078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d07c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d08a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	fa93 f2a3 	rbit	r2, r3
 800d094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d098:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d09c:	601a      	str	r2, [r3, #0]
  return result;
 800d09e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d0a6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0a8:	fab3 f383 	clz	r3, r3
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d0b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0be:	f7fa fca5 	bl	8007a0c <HAL_GetTick>
 800d0c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d0c6:	e009      	b.n	800d0dc <HAL_RCC_OscConfig+0xf50>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0c8:	f7fa fca0 	bl	8007a0c <HAL_GetTick>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d901      	bls.n	800d0dc <HAL_RCC_OscConfig+0xf50>
          {
            return HAL_TIMEOUT;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e204      	b.n	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800d0dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d0e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d0e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	fa93 f2a3 	rbit	r2, r3
 800d0f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d100:	601a      	str	r2, [r3, #0]
  return result;
 800d102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d106:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d10a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d10c:	fab3 f383 	clz	r3, r3
 800d110:	b2db      	uxtb	r3, r3
 800d112:	095b      	lsrs	r3, r3, #5
 800d114:	b2db      	uxtb	r3, r3
 800d116:	f043 0301 	orr.w	r3, r3, #1
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d107      	bne.n	800d130 <HAL_RCC_OscConfig+0xfa4>
 800d120:	4b01      	ldr	r3, [pc, #4]	; (800d128 <HAL_RCC_OscConfig+0xf9c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	e02c      	b.n	800d180 <HAL_RCC_OscConfig+0xff4>
 800d126:	bf00      	nop
 800d128:	40021000 	.word	0x40021000
 800d12c:	080336e0 	.word	0x080336e0
 800d130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d134:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d13c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d13e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d142:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	fa93 f2a3 	rbit	r2, r3
 800d14c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d150:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d15a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d15e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d168:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	fa93 f2a3 	rbit	r2, r3
 800d172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d176:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d17a:	601a      	str	r2, [r3, #0]
 800d17c:	4bc9      	ldr	r3, [pc, #804]	; (800d4a4 <HAL_RCC_OscConfig+0x1318>)
 800d17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d180:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d184:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d18c:	6011      	str	r1, [r2, #0]
 800d18e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d192:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d196:	6812      	ldr	r2, [r2, #0]
 800d198:	fa92 f1a2 	rbit	r1, r2
 800d19c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d1a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d1a4:	6011      	str	r1, [r2, #0]
  return result;
 800d1a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d1aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d1ae:	6812      	ldr	r2, [r2, #0]
 800d1b0:	fab2 f282 	clz	r2, r2
 800d1b4:	b2d2      	uxtb	r2, r2
 800d1b6:	f042 0220 	orr.w	r2, r2, #32
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	f002 021f 	and.w	r2, r2, #31
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	fa01 f202 	lsl.w	r2, r1, r2
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f47f af7d 	bne.w	800d0c8 <HAL_RCC_OscConfig+0xf3c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d1ce:	4bb5      	ldr	r3, [pc, #724]	; (800d4a4 <HAL_RCC_OscConfig+0x1318>)
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800d1d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d1e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	430b      	orrs	r3, r1
 800d1f0:	49ac      	ldr	r1, [pc, #688]	; (800d4a4 <HAL_RCC_OscConfig+0x1318>)
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	604b      	str	r3, [r1, #4]
 800d1f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d1fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d208:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	fa93 f2a3 	rbit	r2, r3
 800d212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d216:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d21a:	601a      	str	r2, [r3, #0]
  return result;
 800d21c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d220:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d224:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d226:	fab3 f383 	clz	r3, r3
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	461a      	mov	r2, r3
 800d238:	2301      	movs	r3, #1
 800d23a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d23c:	f7fa fbe6 	bl	8007a0c <HAL_GetTick>
 800d240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d244:	e009      	b.n	800d25a <HAL_RCC_OscConfig+0x10ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d246:	f7fa fbe1 	bl	8007a0c <HAL_GetTick>
 800d24a:	4602      	mov	r2, r0
 800d24c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	2b02      	cmp	r3, #2
 800d254:	d901      	bls.n	800d25a <HAL_RCC_OscConfig+0x10ce>
          {
            return HAL_TIMEOUT;
 800d256:	2303      	movs	r3, #3
 800d258:	e145      	b.n	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800d25a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d25e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d26c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	fa93 f2a3 	rbit	r2, r3
 800d276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d27a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d27e:	601a      	str	r2, [r3, #0]
  return result;
 800d280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d284:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d288:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d28a:	fab3 f383 	clz	r3, r3
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	095b      	lsrs	r3, r3, #5
 800d292:	b2db      	uxtb	r3, r3
 800d294:	f043 0301 	orr.w	r3, r3, #1
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d102      	bne.n	800d2a4 <HAL_RCC_OscConfig+0x1118>
 800d29e:	4b81      	ldr	r3, [pc, #516]	; (800d4a4 <HAL_RCC_OscConfig+0x1318>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	e027      	b.n	800d2f4 <HAL_RCC_OscConfig+0x1168>
 800d2a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d2ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d2b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	fa93 f2a3 	rbit	r2, r3
 800d2c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d2d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	fa93 f2a3 	rbit	r2, r3
 800d2e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	4b6c      	ldr	r3, [pc, #432]	; (800d4a4 <HAL_RCC_OscConfig+0x1318>)
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d2fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d300:	6011      	str	r1, [r2, #0]
 800d302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d306:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d30a:	6812      	ldr	r2, [r2, #0]
 800d30c:	fa92 f1a2 	rbit	r1, r2
 800d310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d314:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d318:	6011      	str	r1, [r2, #0]
  return result;
 800d31a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d31e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d322:	6812      	ldr	r2, [r2, #0]
 800d324:	fab2 f282 	clz	r2, r2
 800d328:	b2d2      	uxtb	r2, r2
 800d32a:	f042 0220 	orr.w	r2, r2, #32
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	f002 021f 	and.w	r2, r2, #31
 800d334:	2101      	movs	r1, #1
 800d336:	fa01 f202 	lsl.w	r2, r1, r2
 800d33a:	4013      	ands	r3, r2
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d082      	beq.n	800d246 <HAL_RCC_OscConfig+0x10ba>
 800d340:	e0d0      	b.n	800d4e4 <HAL_RCC_OscConfig+0x1358>
 800d342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d346:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d34a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d34e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d354:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	fa93 f2a3 	rbit	r2, r3
 800d35e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d362:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d366:	601a      	str	r2, [r3, #0]
  return result;
 800d368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d36c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d370:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d372:	fab3 f383 	clz	r3, r3
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d37c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	461a      	mov	r2, r3
 800d384:	2300      	movs	r3, #0
 800d386:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d388:	f7fa fb40 	bl	8007a0c <HAL_GetTick>
 800d38c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d390:	e009      	b.n	800d3a6 <HAL_RCC_OscConfig+0x121a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d392:	f7fa fb3b 	bl	8007a0c <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d901      	bls.n	800d3a6 <HAL_RCC_OscConfig+0x121a>
          {
            return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e09f      	b.n	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800d3a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d3ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d3b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	fa93 f2a3 	rbit	r2, r3
 800d3c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d3ca:	601a      	str	r2, [r3, #0]
  return result;
 800d3cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d3d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d3d6:	fab3 f383 	clz	r3, r3
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	095b      	lsrs	r3, r3, #5
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	f043 0301 	orr.w	r3, r3, #1
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d102      	bne.n	800d3f0 <HAL_RCC_OscConfig+0x1264>
 800d3ea:	4b2e      	ldr	r3, [pc, #184]	; (800d4a4 <HAL_RCC_OscConfig+0x1318>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	e027      	b.n	800d440 <HAL_RCC_OscConfig+0x12b4>
 800d3f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d3f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d3fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d402:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	fa93 f2a3 	rbit	r2, r3
 800d40c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d410:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d41a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d41e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d428:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	fa93 f2a3 	rbit	r2, r3
 800d432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d436:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	4b19      	ldr	r3, [pc, #100]	; (800d4a4 <HAL_RCC_OscConfig+0x1318>)
 800d43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d440:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d444:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d44c:	6011      	str	r1, [r2, #0]
 800d44e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d452:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d456:	6812      	ldr	r2, [r2, #0]
 800d458:	fa92 f1a2 	rbit	r1, r2
 800d45c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d460:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d464:	6011      	str	r1, [r2, #0]
  return result;
 800d466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d46a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d46e:	6812      	ldr	r2, [r2, #0]
 800d470:	fab2 f282 	clz	r2, r2
 800d474:	b2d2      	uxtb	r2, r2
 800d476:	f042 0220 	orr.w	r2, r2, #32
 800d47a:	b2d2      	uxtb	r2, r2
 800d47c:	f002 021f 	and.w	r2, r2, #31
 800d480:	2101      	movs	r1, #1
 800d482:	fa01 f202 	lsl.w	r2, r1, r2
 800d486:	4013      	ands	r3, r2
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d182      	bne.n	800d392 <HAL_RCC_OscConfig+0x1206>
 800d48c:	e02a      	b.n	800d4e4 <HAL_RCC_OscConfig+0x1358>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d48e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d104      	bne.n	800d4a8 <HAL_RCC_OscConfig+0x131c>
      {
        return HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e021      	b.n	800d4e6 <HAL_RCC_OscConfig+0x135a>
 800d4a2:	bf00      	nop
 800d4a4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d4a8:	4b11      	ldr	r3, [pc, #68]	; (800d4f0 <HAL_RCC_OscConfig+0x1364>)
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d4b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d4b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800d4b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6a1b      	ldr	r3, [r3, #32]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d10b      	bne.n	800d4e0 <HAL_RCC_OscConfig+0x1354>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800d4c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d4cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800d4d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d001      	beq.n	800d4e4 <HAL_RCC_OscConfig+0x1358>
#endif
        {
          return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e000      	b.n	800d4e6 <HAL_RCC_OscConfig+0x135a>
        }
      }
    }
  }

  return HAL_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	40021000 	.word	0x40021000

0800d4f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b09e      	sub	sp, #120	; 0x78
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800d4fe:	2300      	movs	r3, #0
 800d500:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	e205      	b.n	800d918 <HAL_RCC_ClockConfig+0x424>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 0301 	and.w	r3, r3, #1
 800d514:	2b00      	cmp	r3, #0
 800d516:	d116      	bne.n	800d546 <HAL_RCC_ClockConfig+0x52>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 0302 	and.w	r3, r3, #2
 800d520:	2b00      	cmp	r3, #0
 800d522:	d110      	bne.n	800d546 <HAL_RCC_ClockConfig+0x52>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 0304 	and.w	r3, r3, #4
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10a      	bne.n	800d546 <HAL_RCC_ClockConfig+0x52>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0308 	and.w	r3, r3, #8
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d104      	bne.n	800d546 <HAL_RCC_ClockConfig+0x52>
 800d53c:	f240 21c3 	movw	r1, #707	; 0x2c3
 800d540:	489a      	ldr	r0, [pc, #616]	; (800d7ac <HAL_RCC_ClockConfig+0x2b8>)
 800d542:	f7f8 faee 	bl	8005b22 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00a      	beq.n	800d562 <HAL_RCC_ClockConfig+0x6e>
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d007      	beq.n	800d562 <HAL_RCC_ClockConfig+0x6e>
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b02      	cmp	r3, #2
 800d556:	d004      	beq.n	800d562 <HAL_RCC_ClockConfig+0x6e>
 800d558:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800d55c:	4893      	ldr	r0, [pc, #588]	; (800d7ac <HAL_RCC_ClockConfig+0x2b8>)
 800d55e:	f7f8 fae0 	bl	8005b22 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d562:	4b93      	ldr	r3, [pc, #588]	; (800d7b0 <HAL_RCC_ClockConfig+0x2bc>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 0307 	and.w	r3, r3, #7
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d910      	bls.n	800d592 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d570:	4b8f      	ldr	r3, [pc, #572]	; (800d7b0 <HAL_RCC_ClockConfig+0x2bc>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f023 0207 	bic.w	r2, r3, #7
 800d578:	498d      	ldr	r1, [pc, #564]	; (800d7b0 <HAL_RCC_ClockConfig+0x2bc>)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	4313      	orrs	r3, r2
 800d57e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d580:	4b8b      	ldr	r3, [pc, #556]	; (800d7b0 <HAL_RCC_ClockConfig+0x2bc>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f003 0307 	and.w	r3, r3, #7
 800d588:	683a      	ldr	r2, [r7, #0]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d001      	beq.n	800d592 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	e1c2      	b.n	800d918 <HAL_RCC_ClockConfig+0x424>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f003 0302 	and.w	r3, r3, #2
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d031      	beq.n	800d602 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d024      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	2b80      	cmp	r3, #128	; 0x80
 800d5ac:	d020      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	2b90      	cmp	r3, #144	; 0x90
 800d5b4:	d01c      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	2ba0      	cmp	r3, #160	; 0xa0
 800d5bc:	d018      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	2bb0      	cmp	r3, #176	; 0xb0
 800d5c4:	d014      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	2bc0      	cmp	r3, #192	; 0xc0
 800d5cc:	d010      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	2bd0      	cmp	r3, #208	; 0xd0
 800d5d4:	d00c      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	2be0      	cmp	r3, #224	; 0xe0
 800d5dc:	d008      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	2bf0      	cmp	r3, #240	; 0xf0
 800d5e4:	d004      	beq.n	800d5f0 <HAL_RCC_ClockConfig+0xfc>
 800d5e6:	f240 21db 	movw	r1, #731	; 0x2db
 800d5ea:	4870      	ldr	r0, [pc, #448]	; (800d7ac <HAL_RCC_ClockConfig+0x2b8>)
 800d5ec:	f7f8 fa99 	bl	8005b22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d5f0:	4b70      	ldr	r3, [pc, #448]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	496d      	ldr	r1, [pc, #436]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d5fe:	4313      	orrs	r3, r2
 800d600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 80f5 	beq.w	800d7fa <HAL_RCC_ClockConfig+0x306>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00c      	beq.n	800d632 <HAL_RCC_ClockConfig+0x13e>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d008      	beq.n	800d632 <HAL_RCC_ClockConfig+0x13e>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d004      	beq.n	800d632 <HAL_RCC_ClockConfig+0x13e>
 800d628:	f240 21e2 	movw	r1, #738	; 0x2e2
 800d62c:	485f      	ldr	r0, [pc, #380]	; (800d7ac <HAL_RCC_ClockConfig+0x2b8>)
 800d62e:	f7f8 fa78 	bl	8005b22 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d13d      	bne.n	800d6b6 <HAL_RCC_ClockConfig+0x1c2>
 800d63a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d63e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d642:	fa93 f3a3 	rbit	r3, r3
 800d646:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800d648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d64a:	fab3 f383 	clz	r3, r3
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	095b      	lsrs	r3, r3, #5
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f043 0301 	orr.w	r3, r3, #1
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d102      	bne.n	800d664 <HAL_RCC_ClockConfig+0x170>
 800d65e:	4b55      	ldr	r3, [pc, #340]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	e00f      	b.n	800d684 <HAL_RCC_ClockConfig+0x190>
 800d664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d668:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d66a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d66c:	fa93 f3a3 	rbit	r3, r3
 800d670:	667b      	str	r3, [r7, #100]	; 0x64
 800d672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d676:	663b      	str	r3, [r7, #96]	; 0x60
 800d678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d67a:	fa93 f3a3 	rbit	r3, r3
 800d67e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d680:	4b4c      	ldr	r3, [pc, #304]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d684:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d688:	65ba      	str	r2, [r7, #88]	; 0x58
 800d68a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d68c:	fa92 f2a2 	rbit	r2, r2
 800d690:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800d692:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d694:	fab2 f282 	clz	r2, r2
 800d698:	b2d2      	uxtb	r2, r2
 800d69a:	f042 0220 	orr.w	r2, r2, #32
 800d69e:	b2d2      	uxtb	r2, r2
 800d6a0:	f002 021f 	and.w	r2, r2, #31
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	fa01 f202 	lsl.w	r2, r1, r2
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f040 8083 	bne.w	800d7b8 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e130      	b.n	800d918 <HAL_RCC_ClockConfig+0x424>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d13c      	bne.n	800d738 <HAL_RCC_ClockConfig+0x244>
 800d6be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c6:	fa93 f3a3 	rbit	r3, r3
 800d6ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d6ce:	fab3 f383 	clz	r3, r3
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	095b      	lsrs	r3, r3, #5
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	f043 0301 	orr.w	r3, r3, #1
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d102      	bne.n	800d6e8 <HAL_RCC_ClockConfig+0x1f4>
 800d6e2:	4b34      	ldr	r3, [pc, #208]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	e00f      	b.n	800d708 <HAL_RCC_ClockConfig+0x214>
 800d6e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6f0:	fa93 f3a3 	rbit	r3, r3
 800d6f4:	647b      	str	r3, [r7, #68]	; 0x44
 800d6f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6fa:	643b      	str	r3, [r7, #64]	; 0x40
 800d6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fe:	fa93 f3a3 	rbit	r3, r3
 800d702:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d704:	4b2b      	ldr	r3, [pc, #172]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d70c:	63ba      	str	r2, [r7, #56]	; 0x38
 800d70e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d710:	fa92 f2a2 	rbit	r2, r2
 800d714:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800d716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d718:	fab2 f282 	clz	r2, r2
 800d71c:	b2d2      	uxtb	r2, r2
 800d71e:	f042 0220 	orr.w	r2, r2, #32
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	f002 021f 	and.w	r2, r2, #31
 800d728:	2101      	movs	r1, #1
 800d72a:	fa01 f202 	lsl.w	r2, r1, r2
 800d72e:	4013      	ands	r3, r2
 800d730:	2b00      	cmp	r3, #0
 800d732:	d141      	bne.n	800d7b8 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e0ef      	b.n	800d918 <HAL_RCC_ClockConfig+0x424>
 800d738:	2302      	movs	r3, #2
 800d73a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73e:	fa93 f3a3 	rbit	r3, r3
 800d742:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800d744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d746:	fab3 f383 	clz	r3, r3
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	095b      	lsrs	r3, r3, #5
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	f043 0301 	orr.w	r3, r3, #1
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b01      	cmp	r3, #1
 800d758:	d102      	bne.n	800d760 <HAL_RCC_ClockConfig+0x26c>
 800d75a:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	e00d      	b.n	800d77c <HAL_RCC_ClockConfig+0x288>
 800d760:	2302      	movs	r3, #2
 800d762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d766:	fa93 f3a3 	rbit	r3, r3
 800d76a:	627b      	str	r3, [r7, #36]	; 0x24
 800d76c:	2302      	movs	r3, #2
 800d76e:	623b      	str	r3, [r7, #32]
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	fa93 f3a3 	rbit	r3, r3
 800d776:	61fb      	str	r3, [r7, #28]
 800d778:	4b0e      	ldr	r3, [pc, #56]	; (800d7b4 <HAL_RCC_ClockConfig+0x2c0>)
 800d77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77c:	2202      	movs	r2, #2
 800d77e:	61ba      	str	r2, [r7, #24]
 800d780:	69ba      	ldr	r2, [r7, #24]
 800d782:	fa92 f2a2 	rbit	r2, r2
 800d786:	617a      	str	r2, [r7, #20]
  return result;
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	fab2 f282 	clz	r2, r2
 800d78e:	b2d2      	uxtb	r2, r2
 800d790:	f042 0220 	orr.w	r2, r2, #32
 800d794:	b2d2      	uxtb	r2, r2
 800d796:	f002 021f 	and.w	r2, r2, #31
 800d79a:	2101      	movs	r1, #1
 800d79c:	fa01 f202 	lsl.w	r2, r1, r2
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d108      	bne.n	800d7b8 <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e0b6      	b.n	800d918 <HAL_RCC_ClockConfig+0x424>
 800d7aa:	bf00      	nop
 800d7ac:	080336e0 	.word	0x080336e0
 800d7b0:	40022000 	.word	0x40022000
 800d7b4:	40021000 	.word	0x40021000
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d7b8:	4b59      	ldr	r3, [pc, #356]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	f023 0203 	bic.w	r2, r3, #3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	4956      	ldr	r1, [pc, #344]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d7ca:	f7fa f91f 	bl	8007a0c <HAL_GetTick>
 800d7ce:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d7d0:	e00a      	b.n	800d7e8 <HAL_RCC_ClockConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7d2:	f7fa f91b 	bl	8007a0c <HAL_GetTick>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d901      	bls.n	800d7e8 <HAL_RCC_ClockConfig+0x2f4>
      {
        return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e097      	b.n	800d918 <HAL_RCC_ClockConfig+0x424>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d7e8:	4b4d      	ldr	r3, [pc, #308]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	f003 020c 	and.w	r2, r3, #12
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d1eb      	bne.n	800d7d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d7fa:	4b4a      	ldr	r3, [pc, #296]	; (800d924 <HAL_RCC_ClockConfig+0x430>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f003 0307 	and.w	r3, r3, #7
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	429a      	cmp	r2, r3
 800d806:	d210      	bcs.n	800d82a <HAL_RCC_ClockConfig+0x336>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d808:	4b46      	ldr	r3, [pc, #280]	; (800d924 <HAL_RCC_ClockConfig+0x430>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f023 0207 	bic.w	r2, r3, #7
 800d810:	4944      	ldr	r1, [pc, #272]	; (800d924 <HAL_RCC_ClockConfig+0x430>)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	4313      	orrs	r3, r2
 800d816:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d818:	4b42      	ldr	r3, [pc, #264]	; (800d924 <HAL_RCC_ClockConfig+0x430>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f003 0307 	and.w	r3, r3, #7
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d001      	beq.n	800d82a <HAL_RCC_ClockConfig+0x336>
    {
      return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e076      	b.n	800d918 <HAL_RCC_ClockConfig+0x424>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0304 	and.w	r3, r3, #4
 800d832:	2b00      	cmp	r3, #0
 800d834:	d025      	beq.n	800d882 <HAL_RCC_ClockConfig+0x38e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d018      	beq.n	800d870 <HAL_RCC_ClockConfig+0x37c>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d846:	d013      	beq.n	800d870 <HAL_RCC_ClockConfig+0x37c>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d850:	d00e      	beq.n	800d870 <HAL_RCC_ClockConfig+0x37c>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d85a:	d009      	beq.n	800d870 <HAL_RCC_ClockConfig+0x37c>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d864:	d004      	beq.n	800d870 <HAL_RCC_ClockConfig+0x37c>
 800d866:	f240 311e 	movw	r1, #798	; 0x31e
 800d86a:	482f      	ldr	r0, [pc, #188]	; (800d928 <HAL_RCC_ClockConfig+0x434>)
 800d86c:	f7f8 f959 	bl	8005b22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d870:	4b2b      	ldr	r3, [pc, #172]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	4928      	ldr	r1, [pc, #160]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d87e:	4313      	orrs	r3, r2
 800d880:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0308 	and.w	r3, r3, #8
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d026      	beq.n	800d8dc <HAL_RCC_ClockConfig+0x3e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d018      	beq.n	800d8c8 <HAL_RCC_ClockConfig+0x3d4>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d89e:	d013      	beq.n	800d8c8 <HAL_RCC_ClockConfig+0x3d4>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d8a8:	d00e      	beq.n	800d8c8 <HAL_RCC_ClockConfig+0x3d4>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	691b      	ldr	r3, [r3, #16]
 800d8ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d8b2:	d009      	beq.n	800d8c8 <HAL_RCC_ClockConfig+0x3d4>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8bc:	d004      	beq.n	800d8c8 <HAL_RCC_ClockConfig+0x3d4>
 800d8be:	f240 3125 	movw	r1, #805	; 0x325
 800d8c2:	4819      	ldr	r0, [pc, #100]	; (800d928 <HAL_RCC_ClockConfig+0x434>)
 800d8c4:	f7f8 f92d 	bl	8005b22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d8c8:	4b15      	ldr	r3, [pc, #84]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	00db      	lsls	r3, r3, #3
 800d8d6:	4912      	ldr	r1, [pc, #72]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800d8dc:	f000 f82c 	bl	800d938 <HAL_RCC_GetSysClockFreq>
 800d8e0:	4601      	mov	r1, r0
 800d8e2:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <HAL_RCC_ClockConfig+0x42c>)
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8ea:	22f0      	movs	r2, #240	; 0xf0
 800d8ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	fa92 f2a2 	rbit	r2, r2
 800d8f4:	60fa      	str	r2, [r7, #12]
  return result;
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	fab2 f282 	clz	r2, r2
 800d8fc:	b2d2      	uxtb	r2, r2
 800d8fe:	40d3      	lsrs	r3, r2
 800d900:	4a0a      	ldr	r2, [pc, #40]	; (800d92c <HAL_RCC_ClockConfig+0x438>)
 800d902:	5cd3      	ldrb	r3, [r2, r3]
 800d904:	fa21 f303 	lsr.w	r3, r1, r3
 800d908:	4a09      	ldr	r2, [pc, #36]	; (800d930 <HAL_RCC_ClockConfig+0x43c>)
 800d90a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800d90c:	4b09      	ldr	r3, [pc, #36]	; (800d934 <HAL_RCC_ClockConfig+0x440>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4618      	mov	r0, r3
 800d912:	f7fa f837 	bl	8007984 <HAL_InitTick>
  
  return HAL_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3778      	adds	r7, #120	; 0x78
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	40021000 	.word	0x40021000
 800d924:	40022000 	.word	0x40022000
 800d928:	080336e0 	.word	0x080336e0
 800d92c:	08035558 	.word	0x08035558
 800d930:	2000032c 	.word	0x2000032c
 800d934:	20000330 	.word	0x20000330

0800d938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d938:	b480      	push	{r7}
 800d93a:	b08b      	sub	sp, #44	; 0x2c
 800d93c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d93e:	2300      	movs	r3, #0
 800d940:	61fb      	str	r3, [r7, #28]
 800d942:	2300      	movs	r3, #0
 800d944:	61bb      	str	r3, [r7, #24]
 800d946:	2300      	movs	r3, #0
 800d948:	627b      	str	r3, [r7, #36]	; 0x24
 800d94a:	2300      	movs	r3, #0
 800d94c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800d94e:	2300      	movs	r3, #0
 800d950:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800d952:	4b29      	ldr	r3, [pc, #164]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	f003 030c 	and.w	r3, r3, #12
 800d95e:	2b04      	cmp	r3, #4
 800d960:	d002      	beq.n	800d968 <HAL_RCC_GetSysClockFreq+0x30>
 800d962:	2b08      	cmp	r3, #8
 800d964:	d003      	beq.n	800d96e <HAL_RCC_GetSysClockFreq+0x36>
 800d966:	e03c      	b.n	800d9e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d968:	4b24      	ldr	r3, [pc, #144]	; (800d9fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800d96a:	623b      	str	r3, [r7, #32]
      break;
 800d96c:	e03c      	b.n	800d9e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800d974:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800d978:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	fa92 f2a2 	rbit	r2, r2
 800d980:	607a      	str	r2, [r7, #4]
  return result;
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	fab2 f282 	clz	r2, r2
 800d988:	b2d2      	uxtb	r2, r2
 800d98a:	40d3      	lsrs	r3, r2
 800d98c:	4a1c      	ldr	r2, [pc, #112]	; (800da00 <HAL_RCC_GetSysClockFreq+0xc8>)
 800d98e:	5cd3      	ldrb	r3, [r2, r3]
 800d990:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800d992:	4b19      	ldr	r3, [pc, #100]	; (800d9f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	f003 030f 	and.w	r3, r3, #15
 800d99a:	220f      	movs	r2, #15
 800d99c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d99e:	693a      	ldr	r2, [r7, #16]
 800d9a0:	fa92 f2a2 	rbit	r2, r2
 800d9a4:	60fa      	str	r2, [r7, #12]
  return result;
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	fab2 f282 	clz	r2, r2
 800d9ac:	b2d2      	uxtb	r2, r2
 800d9ae:	40d3      	lsrs	r3, r2
 800d9b0:	4a14      	ldr	r2, [pc, #80]	; (800da04 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d9b2:	5cd3      	ldrb	r3, [r2, r3]
 800d9b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d008      	beq.n	800d9d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800d9c0:	4a0e      	ldr	r2, [pc, #56]	; (800d9fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	fb02 f303 	mul.w	r3, r2, r3
 800d9ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d9d0:	e004      	b.n	800d9dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	4a0c      	ldr	r2, [pc, #48]	; (800da08 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d9d6:	fb02 f303 	mul.w	r3, r2, r3
 800d9da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9de:	623b      	str	r3, [r7, #32]
      break;
 800d9e0:	e002      	b.n	800d9e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d9e2:	4b06      	ldr	r3, [pc, #24]	; (800d9fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800d9e4:	623b      	str	r3, [r7, #32]
      break;
 800d9e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d9e8:	6a3b      	ldr	r3, [r7, #32]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	372c      	adds	r7, #44	; 0x2c
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	40021000 	.word	0x40021000
 800d9fc:	007a1200 	.word	0x007a1200
 800da00:	08035568 	.word	0x08035568
 800da04:	08035578 	.word	0x08035578
 800da08:	003d0900 	.word	0x003d0900

0800da0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b092      	sub	sp, #72	; 0x48
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800da14:	2300      	movs	r3, #0
 800da16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800da18:	2300      	movs	r3, #0
 800da1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f5b3 3f4d 	cmp.w	r3, #209920	; 0x33400
 800da2a:	d303      	bcc.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800da2c:	2172      	movs	r1, #114	; 0x72
 800da2e:	485f      	ldr	r0, [pc, #380]	; (800dbac <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800da30:	f7f8 f877 	bl	8005b22 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 80ed 	beq.w	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d012      	beq.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da52:	d00d      	beq.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da5c:	d008      	beq.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da66:	d003      	beq.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800da68:	2178      	movs	r1, #120	; 0x78
 800da6a:	4850      	ldr	r0, [pc, #320]	; (800dbac <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800da6c:	f7f8 f859 	bl	8005b22 <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da70:	4b4f      	ldr	r3, [pc, #316]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800da72:	69db      	ldr	r3, [r3, #28]
 800da74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10e      	bne.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800da7c:	4b4c      	ldr	r3, [pc, #304]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800da7e:	69db      	ldr	r3, [r3, #28]
 800da80:	4a4b      	ldr	r2, [pc, #300]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800da82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da86:	61d3      	str	r3, [r2, #28]
 800da88:	4b49      	ldr	r3, [pc, #292]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da90:	60bb      	str	r3, [r7, #8]
 800da92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da94:	2301      	movs	r3, #1
 800da96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da9a:	4b46      	ldr	r3, [pc, #280]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d118      	bne.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800daa6:	4b43      	ldr	r3, [pc, #268]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a42      	ldr	r2, [pc, #264]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800daac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dab0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dab2:	f7f9 ffab 	bl	8007a0c <HAL_GetTick>
 800dab6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dab8:	e008      	b.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800daba:	f7f9 ffa7 	bl	8007a0c <HAL_GetTick>
 800dabe:	4602      	mov	r2, r0
 800dac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	2b64      	cmp	r3, #100	; 0x64
 800dac6:	d901      	bls.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 800dac8:	2303      	movs	r3, #3
 800daca:	e2bc      	b.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dacc:	4b39      	ldr	r3, [pc, #228]	; (800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d0f0      	beq.n	800daba <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dad8:	4b35      	ldr	r3, [pc, #212]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dada:	6a1b      	ldr	r3, [r3, #32]
 800dadc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 8086 	beq.w	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800daf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d07e      	beq.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800daf8:	4b2d      	ldr	r3, [pc, #180]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dafa:	6a1b      	ldr	r3, [r3, #32]
 800dafc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800db06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	fa93 f3a3 	rbit	r3, r3
 800db0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800db12:	fab3 f383 	clz	r3, r3
 800db16:	b2db      	uxtb	r3, r3
 800db18:	461a      	mov	r2, r3
 800db1a:	4b27      	ldr	r3, [pc, #156]	; (800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db1c:	4413      	add	r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	461a      	mov	r2, r3
 800db22:	2301      	movs	r3, #1
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800db2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2e:	fa93 f3a3 	rbit	r3, r3
 800db32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800db34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800db36:	fab3 f383 	clz	r3, r3
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	461a      	mov	r2, r3
 800db3e:	4b1e      	ldr	r3, [pc, #120]	; (800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800db40:	4413      	add	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	461a      	mov	r2, r3
 800db46:	2300      	movs	r3, #0
 800db48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800db4a:	4a19      	ldr	r2, [pc, #100]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800db4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800db50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	2b00      	cmp	r3, #0
 800db58:	d04d      	beq.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db5a:	f7f9 ff57 	bl	8007a0c <HAL_GetTick>
 800db5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db60:	e00a      	b.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db62:	f7f9 ff53 	bl	8007a0c <HAL_GetTick>
 800db66:	4602      	mov	r2, r0
 800db68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db70:	4293      	cmp	r3, r2
 800db72:	d901      	bls.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
          {
            return HAL_TIMEOUT;
 800db74:	2303      	movs	r3, #3
 800db76:	e266      	b.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 800db78:	2302      	movs	r3, #2
 800db7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	fa93 f3a3 	rbit	r3, r3
 800db82:	627b      	str	r3, [r7, #36]	; 0x24
 800db84:	2302      	movs	r3, #2
 800db86:	623b      	str	r3, [r7, #32]
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	fa93 f3a3 	rbit	r3, r3
 800db8e:	61fb      	str	r3, [r7, #28]
  return result;
 800db90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db92:	fab3 f383 	clz	r3, r3
 800db96:	b2db      	uxtb	r3, r3
 800db98:	095b      	lsrs	r3, r3, #5
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d10a      	bne.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800dba6:	4b02      	ldr	r3, [pc, #8]	; (800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	e00f      	b.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800dbac:	08033718 	.word	0x08033718
 800dbb0:	40021000 	.word	0x40021000
 800dbb4:	40007000 	.word	0x40007000
 800dbb8:	10908100 	.word	0x10908100
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	fa93 f3a3 	rbit	r3, r3
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	4b89      	ldr	r3, [pc, #548]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	2202      	movs	r2, #2
 800dbce:	613a      	str	r2, [r7, #16]
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	fa92 f2a2 	rbit	r2, r2
 800dbd6:	60fa      	str	r2, [r7, #12]
  return result;
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	fab2 f282 	clz	r2, r2
 800dbde:	b2d2      	uxtb	r2, r2
 800dbe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbe4:	b2d2      	uxtb	r2, r2
 800dbe6:	f002 021f 	and.w	r2, r2, #31
 800dbea:	2101      	movs	r1, #1
 800dbec:	fa01 f202 	lsl.w	r2, r1, r2
 800dbf0:	4013      	ands	r3, r2
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d0b5      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x156>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800dbf6:	4b7e      	ldr	r3, [pc, #504]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	497b      	ldr	r1, [pc, #492]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dc04:	4313      	orrs	r3, r2
 800dc06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800dc08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d105      	bne.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc10:	4b77      	ldr	r3, [pc, #476]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	4a76      	ldr	r2, [pc, #472]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dc16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01c      	beq.n	800dc62 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00f      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d00b      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	d007      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	2b03      	cmp	r3, #3
 800dc46:	d003      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800dc48:	21be      	movs	r1, #190	; 0xbe
 800dc4a:	486a      	ldr	r0, [pc, #424]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800dc4c:	f7f7 ff69 	bl	8005b22 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dc50:	4b67      	ldr	r3, [pc, #412]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc54:	f023 0203 	bic.w	r2, r3, #3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	4964      	ldr	r1, [pc, #400]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d01f      	beq.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d012      	beq.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x290>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc7e:	d00d      	beq.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x290>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc88:	d008      	beq.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x290>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dc92:	d003      	beq.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x290>
 800dc94:	21c9      	movs	r1, #201	; 0xc9
 800dc96:	4857      	ldr	r0, [pc, #348]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800dc98:	f7f7 ff43 	bl	8005b22 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dc9c:	4b54      	ldr	r3, [pc, #336]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	4951      	ldr	r1, [pc, #324]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f003 0304 	and.w	r3, r3, #4
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d01f      	beq.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d012      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dcca:	d00d      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	691b      	ldr	r3, [r3, #16]
 800dcd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800dcd4:	d008      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800dcde:	d003      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800dce0:	21d5      	movs	r1, #213	; 0xd5
 800dce2:	4844      	ldr	r0, [pc, #272]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800dce4:	f7f7 ff1d 	bl	8005b22 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dce8:	4b41      	ldr	r3, [pc, #260]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dcea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	493e      	ldr	r1, [pc, #248]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f003 0320 	and.w	r3, r3, #32
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d014      	beq.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	69db      	ldr	r3, [r3, #28]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d007      	beq.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	2b10      	cmp	r3, #16
 800dd14:	d003      	beq.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800dd16:	21e0      	movs	r1, #224	; 0xe0
 800dd18:	4836      	ldr	r0, [pc, #216]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800dd1a:	f7f7 ff02 	bl	8005b22 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dd1e:	4b34      	ldr	r3, [pc, #208]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd22:	f023 0210 	bic.w	r2, r3, #16
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	4931      	ldr	r1, [pc, #196]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d015      	beq.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd44:	d007      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800dd4e:	21ee      	movs	r1, #238	; 0xee
 800dd50:	4828      	ldr	r0, [pc, #160]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800dd52:	f7f7 fee6 	bl	8005b22 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800dd56:	4b26      	ldr	r3, [pc, #152]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd62:	4923      	ldr	r1, [pc, #140]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dd64:	4313      	orrs	r3, r2
 800dd66:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d015      	beq.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a1b      	ldr	r3, [r3, #32]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d008      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6a1b      	ldr	r3, [r3, #32]
 800dd80:	2b20      	cmp	r3, #32
 800dd82:	d004      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800dd84:	f44f 7181 	mov.w	r1, #258	; 0x102
 800dd88:	481a      	ldr	r0, [pc, #104]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800dd8a:	f7f7 feca 	bl	8005b22 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dd8e:	4b18      	ldr	r3, [pc, #96]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd92:	f023 0220 	bic.w	r2, r3, #32
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6a1b      	ldr	r3, [r3, #32]
 800dd9a:	4915      	ldr	r1, [pc, #84]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f003 0308 	and.w	r3, r3, #8
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d025      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	695b      	ldr	r3, [r3, #20]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d013      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	695b      	ldr	r3, [r3, #20]
 800ddb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddbc:	d00e      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddc6:	d009      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	695b      	ldr	r3, [r3, #20]
 800ddcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ddd0:	d004      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ddd2:	f240 1123 	movw	r1, #291	; 0x123
 800ddd6:	4807      	ldr	r0, [pc, #28]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ddd8:	f7f7 fea3 	bl	8005b22 <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dddc:	4b04      	ldr	r3, [pc, #16]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ddde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	4901      	ldr	r1, [pc, #4]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ddea:	4313      	orrs	r3, r2
 800ddec:	630b      	str	r3, [r1, #48]	; 0x30
 800ddee:	e003      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ddf0:	40021000 	.word	0x40021000
 800ddf4:	08033718 	.word	0x08033718
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0310 	and.w	r3, r3, #16
 800de00:	2b00      	cmp	r3, #0
 800de02:	d020      	beq.n	800de46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d013      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de14:	d00e      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	699b      	ldr	r3, [r3, #24]
 800de1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800de1e:	d009      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800de28:	d004      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800de2a:	f240 112d 	movw	r1, #301	; 0x12d
 800de2e:	4888      	ldr	r0, [pc, #544]	; (800e050 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800de30:	f7f7 fe77 	bl	8005b22 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800de34:	4b87      	ldr	r3, [pc, #540]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800de36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	4984      	ldr	r1, [pc, #528]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800de42:	4313      	orrs	r3, r2
 800de44:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d016      	beq.n	800de80 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de56:	2b00      	cmp	r3, #0
 800de58:	d009      	beq.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0x462>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800de62:	d004      	beq.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0x462>
 800de64:	f240 113d 	movw	r1, #317	; 0x13d
 800de68:	4879      	ldr	r0, [pc, #484]	; (800e050 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800de6a:	f7f7 fe5a 	bl	8005b22 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800de6e:	4b79      	ldr	r3, [pc, #484]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7a:	4976      	ldr	r1, [pc, #472]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800de7c:	4313      	orrs	r3, r2
 800de7e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d04d      	beq.n	800df28 <HAL_RCCEx_PeriphCLKConfig+0x51c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	2b00      	cmp	r3, #0
 800de92:	d040      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de9c:	d03b      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800dea6:	d036      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deac:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800deb0:	d031      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800deba:	d02c      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800dec4:	d027      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deca:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800dece:	d022      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded4:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800ded8:	d01d      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dede:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800dee2:	d018      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800deec:	d013      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800def6:	d00e      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defc:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800df00:	d009      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df06:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800df0a:	d004      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800df0c:	f240 115d 	movw	r1, #349	; 0x15d
 800df10:	484f      	ldr	r0, [pc, #316]	; (800e050 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800df12:	f7f7 fe06 	bl	8005b22 <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800df16:	4b4f      	ldr	r3, [pc, #316]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800df18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	494c      	ldr	r1, [pc, #304]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800df24:	4313      	orrs	r3, r2
 800df26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df30:	2b00      	cmp	r3, #0
 800df32:	d04d      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d040      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df44:	d03b      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df4a:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 800df4e:	d036      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df54:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800df58:	d031      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5e:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 800df62:	d02c      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800df6c:	d027      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df72:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 800df76:	d022      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df7c:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 800df80:	d01d      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df86:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 800df8a:	d018      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df94:	d013      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9a:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 800df9e:	d00e      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa4:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 800dfa8:	d009      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfae:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 800dfb2:	d004      	beq.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800dfb4:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800dfb8:	4825      	ldr	r0, [pc, #148]	; (800e050 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dfba:	f7f7 fdb2 	bl	8005b22 <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800dfbe:	4b25      	ldr	r3, [pc, #148]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800dfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfca:	4922      	ldr	r1, [pc, #136]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d016      	beq.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d009      	beq.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfec:	d004      	beq.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800dfee:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800dff2:	4817      	ldr	r0, [pc, #92]	; (800e050 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800dff4:	f7f7 fd95 	bl	8005b22 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800dff8:	4b16      	ldr	r3, [pc, #88]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800dffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e004:	4913      	ldr	r1, [pc, #76]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e006:	4313      	orrs	r3, r2
 800e008:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e012:	2b00      	cmp	r3, #0
 800e014:	d016      	beq.n	800e044 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d009      	beq.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x626>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e026:	d004      	beq.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x626>
 800e028:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800e02c:	4808      	ldr	r0, [pc, #32]	; (800e050 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e02e:	f7f7 fd78 	bl	8005b22 <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800e032:	4b08      	ldr	r3, [pc, #32]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e036:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e03e:	4905      	ldr	r1, [pc, #20]	; (800e054 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e040:	4313      	orrs	r3, r2
 800e042:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3748      	adds	r7, #72	; 0x48
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	08033718 	.word	0x08033718
 800e054:	40021000 	.word	0x40021000

0800e058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d101      	bne.n	800e06a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e066:	2301      	movs	r3, #1
 800e068:	e1e5      	b.n	800e436 <HAL_SPI_Init+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a7b      	ldr	r2, [pc, #492]	; (800e25c <HAL_SPI_Init+0x204>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d00e      	beq.n	800e092 <HAL_SPI_Init+0x3a>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a79      	ldr	r2, [pc, #484]	; (800e260 <HAL_SPI_Init+0x208>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d009      	beq.n	800e092 <HAL_SPI_Init+0x3a>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a78      	ldr	r2, [pc, #480]	; (800e264 <HAL_SPI_Init+0x20c>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d004      	beq.n	800e092 <HAL_SPI_Init+0x3a>
 800e088:	f240 1147 	movw	r1, #327	; 0x147
 800e08c:	4876      	ldr	r0, [pc, #472]	; (800e268 <HAL_SPI_Init+0x210>)
 800e08e:	f7f7 fd48 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d009      	beq.n	800e0ae <HAL_SPI_Init+0x56>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0a2:	d004      	beq.n	800e0ae <HAL_SPI_Init+0x56>
 800e0a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800e0a8:	486f      	ldr	r0, [pc, #444]	; (800e268 <HAL_SPI_Init+0x210>)
 800e0aa:	f7f7 fd3a 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00e      	beq.n	800e0d4 <HAL_SPI_Init+0x7c>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0be:	d009      	beq.n	800e0d4 <HAL_SPI_Init+0x7c>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0c8:	d004      	beq.n	800e0d4 <HAL_SPI_Init+0x7c>
 800e0ca:	f240 1149 	movw	r1, #329	; 0x149
 800e0ce:	4866      	ldr	r0, [pc, #408]	; (800e268 <HAL_SPI_Init+0x210>)
 800e0d0:	f7f7 fd27 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e0dc:	d040      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800e0e6:	d03b      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800e0f0:	d036      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e0fa:	d031      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800e104:	d02c      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800e10e:	d027      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800e118:	d022      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e122:	d01d      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e12c:	d018      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e136:	d013      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e140:	d00e      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e14a:	d009      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e154:	d004      	beq.n	800e160 <HAL_SPI_Init+0x108>
 800e156:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e15a:	4843      	ldr	r0, [pc, #268]	; (800e268 <HAL_SPI_Init+0x210>)
 800e15c:	f7f7 fce1 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	699b      	ldr	r3, [r3, #24]
 800e164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e168:	d00d      	beq.n	800e186 <HAL_SPI_Init+0x12e>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d009      	beq.n	800e186 <HAL_SPI_Init+0x12e>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	699b      	ldr	r3, [r3, #24]
 800e176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e17a:	d004      	beq.n	800e186 <HAL_SPI_Init+0x12e>
 800e17c:	f240 114b 	movw	r1, #331	; 0x14b
 800e180:	4839      	ldr	r0, [pc, #228]	; (800e268 <HAL_SPI_Init+0x210>)
 800e182:	f7f7 fcce 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18a:	2b08      	cmp	r3, #8
 800e18c:	d008      	beq.n	800e1a0 <HAL_SPI_Init+0x148>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e192:	2b00      	cmp	r3, #0
 800e194:	d004      	beq.n	800e1a0 <HAL_SPI_Init+0x148>
 800e196:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800e19a:	4833      	ldr	r0, [pc, #204]	; (800e268 <HAL_SPI_Init+0x210>)
 800e19c:	f7f7 fcc1 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	69db      	ldr	r3, [r3, #28]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d020      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	69db      	ldr	r3, [r3, #28]
 800e1ac:	2b08      	cmp	r3, #8
 800e1ae:	d01c      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	69db      	ldr	r3, [r3, #28]
 800e1b4:	2b10      	cmp	r3, #16
 800e1b6:	d018      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	69db      	ldr	r3, [r3, #28]
 800e1bc:	2b18      	cmp	r3, #24
 800e1be:	d014      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	2b20      	cmp	r3, #32
 800e1c6:	d010      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	69db      	ldr	r3, [r3, #28]
 800e1cc:	2b28      	cmp	r3, #40	; 0x28
 800e1ce:	d00c      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	69db      	ldr	r3, [r3, #28]
 800e1d4:	2b30      	cmp	r3, #48	; 0x30
 800e1d6:	d008      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	69db      	ldr	r3, [r3, #28]
 800e1dc:	2b38      	cmp	r3, #56	; 0x38
 800e1de:	d004      	beq.n	800e1ea <HAL_SPI_Init+0x192>
 800e1e0:	f240 114d 	movw	r1, #333	; 0x14d
 800e1e4:	4820      	ldr	r0, [pc, #128]	; (800e268 <HAL_SPI_Init+0x210>)
 800e1e6:	f7f7 fc9c 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a1b      	ldr	r3, [r3, #32]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d008      	beq.n	800e204 <HAL_SPI_Init+0x1ac>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a1b      	ldr	r3, [r3, #32]
 800e1f6:	2b80      	cmp	r3, #128	; 0x80
 800e1f8:	d004      	beq.n	800e204 <HAL_SPI_Init+0x1ac>
 800e1fa:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800e1fe:	481a      	ldr	r0, [pc, #104]	; (800e268 <HAL_SPI_Init+0x210>)
 800e200:	f7f7 fc8f 	bl	8005b22 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d008      	beq.n	800e21e <HAL_SPI_Init+0x1c6>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e210:	2b10      	cmp	r3, #16
 800e212:	d004      	beq.n	800e21e <HAL_SPI_Init+0x1c6>
 800e214:	f240 114f 	movw	r1, #335	; 0x14f
 800e218:	4813      	ldr	r0, [pc, #76]	; (800e268 <HAL_SPI_Init+0x210>)
 800e21a:	f7f7 fc82 	bl	8005b22 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e222:	2b00      	cmp	r3, #0
 800e224:	d151      	bne.n	800e2ca <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d008      	beq.n	800e240 <HAL_SPI_Init+0x1e8>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	2b02      	cmp	r3, #2
 800e234:	d004      	beq.n	800e240 <HAL_SPI_Init+0x1e8>
 800e236:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800e23a:	480b      	ldr	r0, [pc, #44]	; (800e268 <HAL_SPI_Init+0x210>)
 800e23c:	f7f7 fc71 	bl	8005b22 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d011      	beq.n	800e26c <HAL_SPI_Init+0x214>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	695b      	ldr	r3, [r3, #20]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d00d      	beq.n	800e26c <HAL_SPI_Init+0x214>
 800e250:	f240 1153 	movw	r1, #339	; 0x153
 800e254:	4804      	ldr	r0, [pc, #16]	; (800e268 <HAL_SPI_Init+0x210>)
 800e256:	f7f7 fc64 	bl	8005b22 <assert_failed>
 800e25a:	e007      	b.n	800e26c <HAL_SPI_Init+0x214>
 800e25c:	40013000 	.word	0x40013000
 800e260:	40003800 	.word	0x40003800
 800e264:	40003c00 	.word	0x40003c00
 800e268:	08033774 	.word	0x08033774

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e274:	d125      	bne.n	800e2c2 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	69db      	ldr	r3, [r3, #28]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d050      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	69db      	ldr	r3, [r3, #28]
 800e282:	2b08      	cmp	r3, #8
 800e284:	d04c      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	69db      	ldr	r3, [r3, #28]
 800e28a:	2b10      	cmp	r3, #16
 800e28c:	d048      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	69db      	ldr	r3, [r3, #28]
 800e292:	2b18      	cmp	r3, #24
 800e294:	d044      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	2b20      	cmp	r3, #32
 800e29c:	d040      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	2b28      	cmp	r3, #40	; 0x28
 800e2a4:	d03c      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	69db      	ldr	r3, [r3, #28]
 800e2aa:	2b30      	cmp	r3, #48	; 0x30
 800e2ac:	d038      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	69db      	ldr	r3, [r3, #28]
 800e2b2:	2b38      	cmp	r3, #56	; 0x38
 800e2b4:	d034      	beq.n	800e320 <HAL_SPI_Init+0x2c8>
 800e2b6:	f240 1157 	movw	r1, #343	; 0x157
 800e2ba:	4861      	ldr	r0, [pc, #388]	; (800e440 <HAL_SPI_Init+0x3e8>)
 800e2bc:	f7f7 fc31 	bl	8005b22 <assert_failed>
 800e2c0:	e02e      	b.n	800e320 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	61da      	str	r2, [r3, #28]
 800e2c8:	e02a      	b.n	800e320 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	69db      	ldr	r3, [r3, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d020      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	2b08      	cmp	r3, #8
 800e2d8:	d01c      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	69db      	ldr	r3, [r3, #28]
 800e2de:	2b10      	cmp	r3, #16
 800e2e0:	d018      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	69db      	ldr	r3, [r3, #28]
 800e2e6:	2b18      	cmp	r3, #24
 800e2e8:	d014      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	69db      	ldr	r3, [r3, #28]
 800e2ee:	2b20      	cmp	r3, #32
 800e2f0:	d010      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	69db      	ldr	r3, [r3, #28]
 800e2f6:	2b28      	cmp	r3, #40	; 0x28
 800e2f8:	d00c      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	69db      	ldr	r3, [r3, #28]
 800e2fe:	2b30      	cmp	r3, #48	; 0x30
 800e300:	d008      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	2b38      	cmp	r3, #56	; 0x38
 800e308:	d004      	beq.n	800e314 <HAL_SPI_Init+0x2bc>
 800e30a:	f240 1161 	movw	r1, #353	; 0x161
 800e30e:	484c      	ldr	r0, [pc, #304]	; (800e440 <HAL_SPI_Init+0x3e8>)
 800e310:	f7f7 fc07 	bl	8005b22 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7f9 f8a6 	bl	800748c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2202      	movs	r2, #2
 800e344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e356:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e360:	d902      	bls.n	800e368 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e362:	2300      	movs	r3, #0
 800e364:	60fb      	str	r3, [r7, #12]
 800e366:	e002      	b.n	800e36e <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e36c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e376:	d007      	beq.n	800e388 <HAL_SPI_Init+0x330>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e380:	d002      	beq.n	800e388 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e398:	431a      	orrs	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	f003 0302 	and.w	r3, r3, #2
 800e3a2:	431a      	orrs	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	431a      	orrs	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3b6:	431a      	orrs	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	69db      	ldr	r3, [r3, #28]
 800e3bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3c0:	431a      	orrs	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3ca:	ea42 0103 	orr.w	r1, r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	430a      	orrs	r2, r1
 800e3dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	699b      	ldr	r3, [r3, #24]
 800e3e2:	0c1b      	lsrs	r3, r3, #16
 800e3e4:	f003 0204 	and.w	r2, r3, #4
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ec:	f003 0310 	and.w	r3, r3, #16
 800e3f0:	431a      	orrs	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	f003 0308 	and.w	r3, r3, #8
 800e3fa:	431a      	orrs	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e404:	ea42 0103 	orr.w	r1, r2, r3
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	430a      	orrs	r2, r1
 800e414:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	69da      	ldr	r2, [r3, #28]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e424:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2201      	movs	r2, #1
 800e430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	08033774 	.word	0x08033774

0800e444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	e0b9      	b.n	800e5ca <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a5e      	ldr	r2, [pc, #376]	; (800e5d4 <HAL_TIM_Base_Init+0x190>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d031      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e468:	d02c      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a5a      	ldr	r2, [pc, #360]	; (800e5d8 <HAL_TIM_Base_Init+0x194>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d027      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a58      	ldr	r2, [pc, #352]	; (800e5dc <HAL_TIM_Base_Init+0x198>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d022      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a57      	ldr	r2, [pc, #348]	; (800e5e0 <HAL_TIM_Base_Init+0x19c>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d01d      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a55      	ldr	r2, [pc, #340]	; (800e5e4 <HAL_TIM_Base_Init+0x1a0>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d018      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a54      	ldr	r2, [pc, #336]	; (800e5e8 <HAL_TIM_Base_Init+0x1a4>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d013      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a52      	ldr	r2, [pc, #328]	; (800e5ec <HAL_TIM_Base_Init+0x1a8>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d00e      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4a51      	ldr	r2, [pc, #324]	; (800e5f0 <HAL_TIM_Base_Init+0x1ac>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d009      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a4f      	ldr	r2, [pc, #316]	; (800e5f4 <HAL_TIM_Base_Init+0x1b0>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d004      	beq.n	800e4c4 <HAL_TIM_Base_Init+0x80>
 800e4ba:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800e4be:	484e      	ldr	r0, [pc, #312]	; (800e5f8 <HAL_TIM_Base_Init+0x1b4>)
 800e4c0:	f7f7 fb2f 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d014      	beq.n	800e4f6 <HAL_TIM_Base_Init+0xb2>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	2b10      	cmp	r3, #16
 800e4d2:	d010      	beq.n	800e4f6 <HAL_TIM_Base_Init+0xb2>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	2b20      	cmp	r3, #32
 800e4da:	d00c      	beq.n	800e4f6 <HAL_TIM_Base_Init+0xb2>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	2b40      	cmp	r3, #64	; 0x40
 800e4e2:	d008      	beq.n	800e4f6 <HAL_TIM_Base_Init+0xb2>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	2b60      	cmp	r3, #96	; 0x60
 800e4ea:	d004      	beq.n	800e4f6 <HAL_TIM_Base_Init+0xb2>
 800e4ec:	f240 111b 	movw	r1, #283	; 0x11b
 800e4f0:	4841      	ldr	r0, [pc, #260]	; (800e5f8 <HAL_TIM_Base_Init+0x1b4>)
 800e4f2:	f7f7 fb16 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00e      	beq.n	800e51c <HAL_TIM_Base_Init+0xd8>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	691b      	ldr	r3, [r3, #16]
 800e502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e506:	d009      	beq.n	800e51c <HAL_TIM_Base_Init+0xd8>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e510:	d004      	beq.n	800e51c <HAL_TIM_Base_Init+0xd8>
 800e512:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800e516:	4838      	ldr	r0, [pc, #224]	; (800e5f8 <HAL_TIM_Base_Init+0x1b4>)
 800e518:	f7f7 fb03 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	699b      	ldr	r3, [r3, #24]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d008      	beq.n	800e536 <HAL_TIM_Base_Init+0xf2>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	699b      	ldr	r3, [r3, #24]
 800e528:	2b80      	cmp	r3, #128	; 0x80
 800e52a:	d004      	beq.n	800e536 <HAL_TIM_Base_Init+0xf2>
 800e52c:	f240 111d 	movw	r1, #285	; 0x11d
 800e530:	4831      	ldr	r0, [pc, #196]	; (800e5f8 <HAL_TIM_Base_Init+0x1b4>)
 800e532:	f7f7 faf6 	bl	8005b22 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7f9 f986 	bl	800785c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2202      	movs	r2, #2
 800e554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	3304      	adds	r3, #4
 800e560:	4619      	mov	r1, r3
 800e562:	4610      	mov	r0, r2
 800e564:	f001 f812 	bl	800f58c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	40012c00 	.word	0x40012c00
 800e5d8:	40000400 	.word	0x40000400
 800e5dc:	40000800 	.word	0x40000800
 800e5e0:	40001000 	.word	0x40001000
 800e5e4:	40001400 	.word	0x40001400
 800e5e8:	40013400 	.word	0x40013400
 800e5ec:	40014000 	.word	0x40014000
 800e5f0:	40014400 	.word	0x40014400
 800e5f4:	40014800 	.word	0x40014800
 800e5f8:	080337ac 	.word	0x080337ac

0800e5fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e0b9      	b.n	800e782 <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a5e      	ldr	r2, [pc, #376]	; (800e78c <HAL_TIM_PWM_Init+0x190>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d031      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e620:	d02c      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a5a      	ldr	r2, [pc, #360]	; (800e790 <HAL_TIM_PWM_Init+0x194>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d027      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a58      	ldr	r2, [pc, #352]	; (800e794 <HAL_TIM_PWM_Init+0x198>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d022      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a57      	ldr	r2, [pc, #348]	; (800e798 <HAL_TIM_PWM_Init+0x19c>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d01d      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a55      	ldr	r2, [pc, #340]	; (800e79c <HAL_TIM_PWM_Init+0x1a0>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d018      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a54      	ldr	r2, [pc, #336]	; (800e7a0 <HAL_TIM_PWM_Init+0x1a4>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d013      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a52      	ldr	r2, [pc, #328]	; (800e7a4 <HAL_TIM_PWM_Init+0x1a8>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d00e      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a51      	ldr	r2, [pc, #324]	; (800e7a8 <HAL_TIM_PWM_Init+0x1ac>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d009      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a4f      	ldr	r2, [pc, #316]	; (800e7ac <HAL_TIM_PWM_Init+0x1b0>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d004      	beq.n	800e67c <HAL_TIM_PWM_Init+0x80>
 800e672:	f240 5136 	movw	r1, #1334	; 0x536
 800e676:	484e      	ldr	r0, [pc, #312]	; (800e7b0 <HAL_TIM_PWM_Init+0x1b4>)
 800e678:	f7f7 fa53 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	689b      	ldr	r3, [r3, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d014      	beq.n	800e6ae <HAL_TIM_PWM_Init+0xb2>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	2b10      	cmp	r3, #16
 800e68a:	d010      	beq.n	800e6ae <HAL_TIM_PWM_Init+0xb2>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	2b20      	cmp	r3, #32
 800e692:	d00c      	beq.n	800e6ae <HAL_TIM_PWM_Init+0xb2>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	2b40      	cmp	r3, #64	; 0x40
 800e69a:	d008      	beq.n	800e6ae <HAL_TIM_PWM_Init+0xb2>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	2b60      	cmp	r3, #96	; 0x60
 800e6a2:	d004      	beq.n	800e6ae <HAL_TIM_PWM_Init+0xb2>
 800e6a4:	f240 5137 	movw	r1, #1335	; 0x537
 800e6a8:	4841      	ldr	r0, [pc, #260]	; (800e7b0 <HAL_TIM_PWM_Init+0x1b4>)
 800e6aa:	f7f7 fa3a 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	691b      	ldr	r3, [r3, #16]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00e      	beq.n	800e6d4 <HAL_TIM_PWM_Init+0xd8>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	691b      	ldr	r3, [r3, #16]
 800e6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6be:	d009      	beq.n	800e6d4 <HAL_TIM_PWM_Init+0xd8>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	691b      	ldr	r3, [r3, #16]
 800e6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6c8:	d004      	beq.n	800e6d4 <HAL_TIM_PWM_Init+0xd8>
 800e6ca:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 800e6ce:	4838      	ldr	r0, [pc, #224]	; (800e7b0 <HAL_TIM_PWM_Init+0x1b4>)
 800e6d0:	f7f7 fa27 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	699b      	ldr	r3, [r3, #24]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d008      	beq.n	800e6ee <HAL_TIM_PWM_Init+0xf2>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	2b80      	cmp	r3, #128	; 0x80
 800e6e2:	d004      	beq.n	800e6ee <HAL_TIM_PWM_Init+0xf2>
 800e6e4:	f240 5139 	movw	r1, #1337	; 0x539
 800e6e8:	4831      	ldr	r0, [pc, #196]	; (800e7b0 <HAL_TIM_PWM_Init+0x1b4>)
 800e6ea:	f7f7 fa1a 	bl	8005b22 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d106      	bne.n	800e708 <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 f856 	bl	800e7b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2202      	movs	r2, #2
 800e70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	3304      	adds	r3, #4
 800e718:	4619      	mov	r1, r3
 800e71a:	4610      	mov	r0, r2
 800e71c:	f000 ff36 	bl	800f58c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2201      	movs	r2, #1
 800e724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2201      	movs	r2, #1
 800e734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2201      	movs	r2, #1
 800e74c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2201      	movs	r2, #1
 800e754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2201      	movs	r2, #1
 800e76c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2201      	movs	r2, #1
 800e774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	40012c00 	.word	0x40012c00
 800e790:	40000400 	.word	0x40000400
 800e794:	40000800 	.word	0x40000800
 800e798:	40001000 	.word	0x40001000
 800e79c:	40001400 	.word	0x40001400
 800e7a0:	40013400 	.word	0x40013400
 800e7a4:	40014000 	.word	0x40014000
 800e7a8:	40014400 	.word	0x40014400
 800e7ac:	40014800 	.word	0x40014800
 800e7b0:	080337ac 	.word	0x080337ac

0800e7b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a7a      	ldr	r2, [pc, #488]	; (800e9c0 <HAL_TIM_PWM_Start+0x1f8>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d111      	bne.n	800e800 <HAL_TIM_PWM_Start+0x38>
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d078      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	2b04      	cmp	r3, #4
 800e7e6:	d075      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b08      	cmp	r3, #8
 800e7ec:	d072      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b0c      	cmp	r3, #12
 800e7f2:	d06f      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2b10      	cmp	r3, #16
 800e7f8:	d06c      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b14      	cmp	r3, #20
 800e7fe:	d069      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e808:	d10b      	bne.n	800e822 <HAL_TIM_PWM_Start+0x5a>
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d061      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	2b04      	cmp	r3, #4
 800e814:	d05e      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	2b08      	cmp	r3, #8
 800e81a:	d05b      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	2b0c      	cmp	r3, #12
 800e820:	d058      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a67      	ldr	r2, [pc, #412]	; (800e9c4 <HAL_TIM_PWM_Start+0x1fc>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d10b      	bne.n	800e844 <HAL_TIM_PWM_Start+0x7c>
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d050      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	2b04      	cmp	r3, #4
 800e836:	d04d      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	2b08      	cmp	r3, #8
 800e83c:	d04a      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	2b0c      	cmp	r3, #12
 800e842:	d047      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a5f      	ldr	r2, [pc, #380]	; (800e9c8 <HAL_TIM_PWM_Start+0x200>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d10b      	bne.n	800e866 <HAL_TIM_PWM_Start+0x9e>
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d03f      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	2b04      	cmp	r3, #4
 800e858:	d03c      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2b08      	cmp	r3, #8
 800e85e:	d039      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	2b0c      	cmp	r3, #12
 800e864:	d036      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a58      	ldr	r2, [pc, #352]	; (800e9cc <HAL_TIM_PWM_Start+0x204>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d111      	bne.n	800e894 <HAL_TIM_PWM_Start+0xcc>
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d02e      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	2b04      	cmp	r3, #4
 800e87a:	d02b      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2b08      	cmp	r3, #8
 800e880:	d028      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b0c      	cmp	r3, #12
 800e886:	d025      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2b10      	cmp	r3, #16
 800e88c:	d022      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2b14      	cmp	r3, #20
 800e892:	d01f      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a4d      	ldr	r2, [pc, #308]	; (800e9d0 <HAL_TIM_PWM_Start+0x208>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d105      	bne.n	800e8aa <HAL_TIM_PWM_Start+0xe2>
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d017      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2b04      	cmp	r3, #4
 800e8a8:	d014      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a49      	ldr	r2, [pc, #292]	; (800e9d4 <HAL_TIM_PWM_Start+0x20c>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d102      	bne.n	800e8ba <HAL_TIM_PWM_Start+0xf2>
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00c      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4a46      	ldr	r2, [pc, #280]	; (800e9d8 <HAL_TIM_PWM_Start+0x210>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d102      	bne.n	800e8ca <HAL_TIM_PWM_Start+0x102>
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d004      	beq.n	800e8d4 <HAL_TIM_PWM_Start+0x10c>
 800e8ca:	f240 51bf 	movw	r1, #1471	; 0x5bf
 800e8ce:	4843      	ldr	r0, [pc, #268]	; (800e9dc <HAL_TIM_PWM_Start+0x214>)
 800e8d0:	f7f7 f927 	bl	8005b22 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d109      	bne.n	800e8ee <HAL_TIM_PWM_Start+0x126>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	bf14      	ite	ne
 800e8e6:	2301      	movne	r3, #1
 800e8e8:	2300      	moveq	r3, #0
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	e03c      	b.n	800e968 <HAL_TIM_PWM_Start+0x1a0>
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	2b04      	cmp	r3, #4
 800e8f2:	d109      	bne.n	800e908 <HAL_TIM_PWM_Start+0x140>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	bf14      	ite	ne
 800e900:	2301      	movne	r3, #1
 800e902:	2300      	moveq	r3, #0
 800e904:	b2db      	uxtb	r3, r3
 800e906:	e02f      	b.n	800e968 <HAL_TIM_PWM_Start+0x1a0>
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	2b08      	cmp	r3, #8
 800e90c:	d109      	bne.n	800e922 <HAL_TIM_PWM_Start+0x15a>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e914:	b2db      	uxtb	r3, r3
 800e916:	2b01      	cmp	r3, #1
 800e918:	bf14      	ite	ne
 800e91a:	2301      	movne	r3, #1
 800e91c:	2300      	moveq	r3, #0
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	e022      	b.n	800e968 <HAL_TIM_PWM_Start+0x1a0>
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b0c      	cmp	r3, #12
 800e926:	d109      	bne.n	800e93c <HAL_TIM_PWM_Start+0x174>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b01      	cmp	r3, #1
 800e932:	bf14      	ite	ne
 800e934:	2301      	movne	r3, #1
 800e936:	2300      	moveq	r3, #0
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	e015      	b.n	800e968 <HAL_TIM_PWM_Start+0x1a0>
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2b10      	cmp	r3, #16
 800e940:	d109      	bne.n	800e956 <HAL_TIM_PWM_Start+0x18e>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	bf14      	ite	ne
 800e94e:	2301      	movne	r3, #1
 800e950:	2300      	moveq	r3, #0
 800e952:	b2db      	uxtb	r3, r3
 800e954:	e008      	b.n	800e968 <HAL_TIM_PWM_Start+0x1a0>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b01      	cmp	r3, #1
 800e960:	bf14      	ite	ne
 800e962:	2301      	movne	r3, #1
 800e964:	2300      	moveq	r3, #0
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d001      	beq.n	800e970 <HAL_TIM_PWM_Start+0x1a8>
  {
    return HAL_ERROR;
 800e96c:	2301      	movs	r3, #1
 800e96e:	e0a7      	b.n	800eac0 <HAL_TIM_PWM_Start+0x2f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d104      	bne.n	800e980 <HAL_TIM_PWM_Start+0x1b8>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2202      	movs	r2, #2
 800e97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e97e:	e033      	b.n	800e9e8 <HAL_TIM_PWM_Start+0x220>
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b04      	cmp	r3, #4
 800e984:	d104      	bne.n	800e990 <HAL_TIM_PWM_Start+0x1c8>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2202      	movs	r2, #2
 800e98a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e98e:	e02b      	b.n	800e9e8 <HAL_TIM_PWM_Start+0x220>
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	2b08      	cmp	r3, #8
 800e994:	d104      	bne.n	800e9a0 <HAL_TIM_PWM_Start+0x1d8>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2202      	movs	r2, #2
 800e99a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e99e:	e023      	b.n	800e9e8 <HAL_TIM_PWM_Start+0x220>
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2b0c      	cmp	r3, #12
 800e9a4:	d104      	bne.n	800e9b0 <HAL_TIM_PWM_Start+0x1e8>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2202      	movs	r2, #2
 800e9aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9ae:	e01b      	b.n	800e9e8 <HAL_TIM_PWM_Start+0x220>
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2b10      	cmp	r3, #16
 800e9b4:	d114      	bne.n	800e9e0 <HAL_TIM_PWM_Start+0x218>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2202      	movs	r2, #2
 800e9ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9be:	e013      	b.n	800e9e8 <HAL_TIM_PWM_Start+0x220>
 800e9c0:	40012c00 	.word	0x40012c00
 800e9c4:	40000400 	.word	0x40000400
 800e9c8:	40000800 	.word	0x40000800
 800e9cc:	40013400 	.word	0x40013400
 800e9d0:	40014000 	.word	0x40014000
 800e9d4:	40014400 	.word	0x40014400
 800e9d8:	40014800 	.word	0x40014800
 800e9dc:	080337ac 	.word	0x080337ac
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2202      	movs	r2, #2
 800e9e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f001 fa55 	bl	800fea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a33      	ldr	r2, [pc, #204]	; (800eac8 <HAL_TIM_PWM_Start+0x300>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d013      	beq.n	800ea28 <HAL_TIM_PWM_Start+0x260>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a31      	ldr	r2, [pc, #196]	; (800eacc <HAL_TIM_PWM_Start+0x304>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d00e      	beq.n	800ea28 <HAL_TIM_PWM_Start+0x260>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a30      	ldr	r2, [pc, #192]	; (800ead0 <HAL_TIM_PWM_Start+0x308>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d009      	beq.n	800ea28 <HAL_TIM_PWM_Start+0x260>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a2e      	ldr	r2, [pc, #184]	; (800ead4 <HAL_TIM_PWM_Start+0x30c>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d004      	beq.n	800ea28 <HAL_TIM_PWM_Start+0x260>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a2d      	ldr	r2, [pc, #180]	; (800ead8 <HAL_TIM_PWM_Start+0x310>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d101      	bne.n	800ea2c <HAL_TIM_PWM_Start+0x264>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e000      	b.n	800ea2e <HAL_TIM_PWM_Start+0x266>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d007      	beq.n	800ea42 <HAL_TIM_PWM_Start+0x27a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a20      	ldr	r2, [pc, #128]	; (800eac8 <HAL_TIM_PWM_Start+0x300>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d018      	beq.n	800ea7e <HAL_TIM_PWM_Start+0x2b6>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea54:	d013      	beq.n	800ea7e <HAL_TIM_PWM_Start+0x2b6>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a20      	ldr	r2, [pc, #128]	; (800eadc <HAL_TIM_PWM_Start+0x314>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d00e      	beq.n	800ea7e <HAL_TIM_PWM_Start+0x2b6>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a1e      	ldr	r2, [pc, #120]	; (800eae0 <HAL_TIM_PWM_Start+0x318>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d009      	beq.n	800ea7e <HAL_TIM_PWM_Start+0x2b6>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a17      	ldr	r2, [pc, #92]	; (800eacc <HAL_TIM_PWM_Start+0x304>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d004      	beq.n	800ea7e <HAL_TIM_PWM_Start+0x2b6>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a15      	ldr	r2, [pc, #84]	; (800ead0 <HAL_TIM_PWM_Start+0x308>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d115      	bne.n	800eaaa <HAL_TIM_PWM_Start+0x2e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	689a      	ldr	r2, [r3, #8]
 800ea84:	4b17      	ldr	r3, [pc, #92]	; (800eae4 <HAL_TIM_PWM_Start+0x31c>)
 800ea86:	4013      	ands	r3, r2
 800ea88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b06      	cmp	r3, #6
 800ea8e:	d015      	beq.n	800eabc <HAL_TIM_PWM_Start+0x2f4>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea96:	d011      	beq.n	800eabc <HAL_TIM_PWM_Start+0x2f4>
    {
      __HAL_TIM_ENABLE(htim);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f042 0201 	orr.w	r2, r2, #1
 800eaa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaa8:	e008      	b.n	800eabc <HAL_TIM_PWM_Start+0x2f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f042 0201 	orr.w	r2, r2, #1
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	e000      	b.n	800eabe <HAL_TIM_PWM_Start+0x2f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eabc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3710      	adds	r7, #16
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	40012c00 	.word	0x40012c00
 800eacc:	40013400 	.word	0x40013400
 800ead0:	40014000 	.word	0x40014000
 800ead4:	40014400 	.word	0x40014400
 800ead8:	40014800 	.word	0x40014800
 800eadc:	40000400 	.word	0x40000400
 800eae0:	40000800 	.word	0x40000800
 800eae4:	00010007 	.word	0x00010007

0800eae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b086      	sub	sp, #24
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d016      	beq.n	800eb2c <HAL_TIM_PWM_ConfigChannel+0x44>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d013      	beq.n	800eb2c <HAL_TIM_PWM_ConfigChannel+0x44>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b08      	cmp	r3, #8
 800eb08:	d010      	beq.n	800eb2c <HAL_TIM_PWM_ConfigChannel+0x44>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b0c      	cmp	r3, #12
 800eb0e:	d00d      	beq.n	800eb2c <HAL_TIM_PWM_ConfigChannel+0x44>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b10      	cmp	r3, #16
 800eb14:	d00a      	beq.n	800eb2c <HAL_TIM_PWM_ConfigChannel+0x44>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b14      	cmp	r3, #20
 800eb1a:	d007      	beq.n	800eb2c <HAL_TIM_PWM_ConfigChannel+0x44>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2b3c      	cmp	r3, #60	; 0x3c
 800eb20:	d004      	beq.n	800eb2c <HAL_TIM_PWM_ConfigChannel+0x44>
 800eb22:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800eb26:	4886      	ldr	r0, [pc, #536]	; (800ed40 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800eb28:	f7f6 fffb 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b60      	cmp	r3, #96	; 0x60
 800eb32:	d01c      	beq.n	800eb6e <HAL_TIM_PWM_ConfigChannel+0x86>
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b70      	cmp	r3, #112	; 0x70
 800eb3a:	d018      	beq.n	800eb6e <HAL_TIM_PWM_ConfigChannel+0x86>
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a80      	ldr	r2, [pc, #512]	; (800ed44 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d013      	beq.n	800eb6e <HAL_TIM_PWM_ConfigChannel+0x86>
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a7f      	ldr	r2, [pc, #508]	; (800ed48 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d00e      	beq.n	800eb6e <HAL_TIM_PWM_ConfigChannel+0x86>
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a7d      	ldr	r2, [pc, #500]	; (800ed4c <HAL_TIM_PWM_ConfigChannel+0x264>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d009      	beq.n	800eb6e <HAL_TIM_PWM_ConfigChannel+0x86>
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a7c      	ldr	r2, [pc, #496]	; (800ed50 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d004      	beq.n	800eb6e <HAL_TIM_PWM_ConfigChannel+0x86>
 800eb64:	f241 01b8 	movw	r1, #4280	; 0x10b8
 800eb68:	4875      	ldr	r0, [pc, #468]	; (800ed40 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800eb6a:	f7f6 ffda 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d008      	beq.n	800eb88 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	d004      	beq.n	800eb88 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800eb7e:	f241 01b9 	movw	r1, #4281	; 0x10b9
 800eb82:	486f      	ldr	r0, [pc, #444]	; (800ed40 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800eb84:	f7f6 ffcd 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d008      	beq.n	800eba2 <HAL_TIM_PWM_ConfigChannel+0xba>
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	691b      	ldr	r3, [r3, #16]
 800eb94:	2b04      	cmp	r3, #4
 800eb96:	d004      	beq.n	800eba2 <HAL_TIM_PWM_ConfigChannel+0xba>
 800eb98:	f241 01ba 	movw	r1, #4282	; 0x10ba
 800eb9c:	4868      	ldr	r0, [pc, #416]	; (800ed40 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800eb9e:	f7f6 ffc0 	bl	8005b22 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d101      	bne.n	800ebb0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800ebac:	2302      	movs	r3, #2
 800ebae:	e1c3      	b.n	800ef38 <HAL_TIM_PWM_ConfigChannel+0x450>
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b14      	cmp	r3, #20
 800ebbc:	f200 81b4 	bhi.w	800ef28 <HAL_TIM_PWM_ConfigChannel+0x440>
 800ebc0:	a201      	add	r2, pc, #4	; (adr r2, 800ebc8 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800ebc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc6:	bf00      	nop
 800ebc8:	0800ec1d 	.word	0x0800ec1d
 800ebcc:	0800ef29 	.word	0x0800ef29
 800ebd0:	0800ef29 	.word	0x0800ef29
 800ebd4:	0800ef29 	.word	0x0800ef29
 800ebd8:	0800ecb7 	.word	0x0800ecb7
 800ebdc:	0800ef29 	.word	0x0800ef29
 800ebe0:	0800ef29 	.word	0x0800ef29
 800ebe4:	0800ef29 	.word	0x0800ef29
 800ebe8:	0800ed71 	.word	0x0800ed71
 800ebec:	0800ef29 	.word	0x0800ef29
 800ebf0:	0800ef29 	.word	0x0800ef29
 800ebf4:	0800ef29 	.word	0x0800ef29
 800ebf8:	0800eded 	.word	0x0800eded
 800ebfc:	0800ef29 	.word	0x0800ef29
 800ec00:	0800ef29 	.word	0x0800ef29
 800ec04:	0800ef29 	.word	0x0800ef29
 800ec08:	0800ee6b 	.word	0x0800ee6b
 800ec0c:	0800ef29 	.word	0x0800ef29
 800ec10:	0800ef29 	.word	0x0800ef29
 800ec14:	0800ef29 	.word	0x0800ef29
 800ec18:	0800eec9 	.word	0x0800eec9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a4c      	ldr	r2, [pc, #304]	; (800ed54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d027      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec2e:	d022      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a48      	ldr	r2, [pc, #288]	; (800ed58 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d01d      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a47      	ldr	r2, [pc, #284]	; (800ed5c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d018      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a45      	ldr	r2, [pc, #276]	; (800ed60 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d013      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a44      	ldr	r2, [pc, #272]	; (800ed64 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d00e      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a42      	ldr	r2, [pc, #264]	; (800ed68 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d009      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a41      	ldr	r2, [pc, #260]	; (800ed6c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d004      	beq.n	800ec76 <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ec6c:	f241 01c4 	movw	r1, #4292	; 0x10c4
 800ec70:	4833      	ldr	r0, [pc, #204]	; (800ed40 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800ec72:	f7f6 ff56 	bl	8005b22 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	68b9      	ldr	r1, [r7, #8]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 fd15 	bl	800f6ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	699a      	ldr	r2, [r3, #24]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f042 0208 	orr.w	r2, r2, #8
 800ec90:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	699a      	ldr	r2, [r3, #24]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f022 0204 	bic.w	r2, r2, #4
 800eca0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	6999      	ldr	r1, [r3, #24]
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	691a      	ldr	r2, [r3, #16]
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	619a      	str	r2, [r3, #24]
      break;
 800ecb4:	e13b      	b.n	800ef2e <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a26      	ldr	r2, [pc, #152]	; (800ed54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d01d      	beq.n	800ecfc <HAL_TIM_PWM_ConfigChannel+0x214>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecc8:	d018      	beq.n	800ecfc <HAL_TIM_PWM_ConfigChannel+0x214>
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4a22      	ldr	r2, [pc, #136]	; (800ed58 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d013      	beq.n	800ecfc <HAL_TIM_PWM_ConfigChannel+0x214>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a20      	ldr	r2, [pc, #128]	; (800ed5c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d00e      	beq.n	800ecfc <HAL_TIM_PWM_ConfigChannel+0x214>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4a1f      	ldr	r2, [pc, #124]	; (800ed60 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d009      	beq.n	800ecfc <HAL_TIM_PWM_ConfigChannel+0x214>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a1d      	ldr	r2, [pc, #116]	; (800ed64 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d004      	beq.n	800ecfc <HAL_TIM_PWM_ConfigChannel+0x214>
 800ecf2:	f241 01d5 	movw	r1, #4309	; 0x10d5
 800ecf6:	4812      	ldr	r0, [pc, #72]	; (800ed40 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800ecf8:	f7f6 ff13 	bl	8005b22 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68b9      	ldr	r1, [r7, #8]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 fd8c 	bl	800f820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	699a      	ldr	r2, [r3, #24]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	699a      	ldr	r2, [r3, #24]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6999      	ldr	r1, [r3, #24]
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	021a      	lsls	r2, r3, #8
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	430a      	orrs	r2, r1
 800ed3a:	619a      	str	r2, [r3, #24]
      break;
 800ed3c:	e0f7      	b.n	800ef2e <HAL_TIM_PWM_ConfigChannel+0x446>
 800ed3e:	bf00      	nop
 800ed40:	080337ac 	.word	0x080337ac
 800ed44:	00010040 	.word	0x00010040
 800ed48:	00010050 	.word	0x00010050
 800ed4c:	00010060 	.word	0x00010060
 800ed50:	00010070 	.word	0x00010070
 800ed54:	40012c00 	.word	0x40012c00
 800ed58:	40000400 	.word	0x40000400
 800ed5c:	40000800 	.word	0x40000800
 800ed60:	40013400 	.word	0x40013400
 800ed64:	40014000 	.word	0x40014000
 800ed68:	40014400 	.word	0x40014400
 800ed6c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a72      	ldr	r2, [pc, #456]	; (800ef40 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d018      	beq.n	800edac <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed82:	d013      	beq.n	800edac <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a6e      	ldr	r2, [pc, #440]	; (800ef44 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d00e      	beq.n	800edac <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a6d      	ldr	r2, [pc, #436]	; (800ef48 <HAL_TIM_PWM_ConfigChannel+0x460>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d009      	beq.n	800edac <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a6b      	ldr	r2, [pc, #428]	; (800ef4c <HAL_TIM_PWM_ConfigChannel+0x464>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d004      	beq.n	800edac <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800eda2:	f241 01e6 	movw	r1, #4326	; 0x10e6
 800eda6:	486a      	ldr	r0, [pc, #424]	; (800ef50 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800eda8:	f7f6 febb 	bl	8005b22 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	68b9      	ldr	r1, [r7, #8]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f000 fde6 	bl	800f984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	69da      	ldr	r2, [r3, #28]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f042 0208 	orr.w	r2, r2, #8
 800edc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	69da      	ldr	r2, [r3, #28]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f022 0204 	bic.w	r2, r2, #4
 800edd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	69d9      	ldr	r1, [r3, #28]
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	691a      	ldr	r2, [r3, #16]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	61da      	str	r2, [r3, #28]
      break;
 800edea:	e0a0      	b.n	800ef2e <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a53      	ldr	r2, [pc, #332]	; (800ef40 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d018      	beq.n	800ee28 <HAL_TIM_PWM_ConfigChannel+0x340>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edfe:	d013      	beq.n	800ee28 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a4f      	ldr	r2, [pc, #316]	; (800ef44 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d00e      	beq.n	800ee28 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a4e      	ldr	r2, [pc, #312]	; (800ef48 <HAL_TIM_PWM_ConfigChannel+0x460>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d009      	beq.n	800ee28 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a4c      	ldr	r2, [pc, #304]	; (800ef4c <HAL_TIM_PWM_ConfigChannel+0x464>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d004      	beq.n	800ee28 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ee1e:	f241 01f7 	movw	r1, #4343	; 0x10f7
 800ee22:	484b      	ldr	r0, [pc, #300]	; (800ef50 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800ee24:	f7f6 fe7d 	bl	8005b22 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68b9      	ldr	r1, [r7, #8]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f000 fe5a 	bl	800fae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	69da      	ldr	r2, [r3, #28]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	69da      	ldr	r2, [r3, #28]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	69d9      	ldr	r1, [r3, #28]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	021a      	lsls	r2, r3, #8
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	430a      	orrs	r2, r1
 800ee66:	61da      	str	r2, [r3, #28]
      break;
 800ee68:	e061      	b.n	800ef2e <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC5E)
    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4a34      	ldr	r2, [pc, #208]	; (800ef40 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d009      	beq.n	800ee88 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a34      	ldr	r2, [pc, #208]	; (800ef4c <HAL_TIM_PWM_ConfigChannel+0x464>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d004      	beq.n	800ee88 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800ee7e:	f241 1109 	movw	r1, #4361	; 0x1109
 800ee82:	4833      	ldr	r0, [pc, #204]	; (800ef50 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800ee84:	f7f6 fe4d 	bl	8005b22 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68b9      	ldr	r1, [r7, #8]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 fea2 	bl	800fbd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f042 0208 	orr.w	r2, r2, #8
 800eea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f022 0204 	bic.w	r2, r2, #4
 800eeb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	691a      	ldr	r2, [r3, #16]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	430a      	orrs	r2, r1
 800eec4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eec6:	e032      	b.n	800ef2e <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC6E)
    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a1c      	ldr	r2, [pc, #112]	; (800ef40 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d009      	beq.n	800eee6 <HAL_TIM_PWM_ConfigChannel+0x3fe>
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4a1d      	ldr	r2, [pc, #116]	; (800ef4c <HAL_TIM_PWM_ConfigChannel+0x464>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d004      	beq.n	800eee6 <HAL_TIM_PWM_ConfigChannel+0x3fe>
 800eedc:	f241 111c 	movw	r1, #4380	; 0x111c
 800eee0:	481b      	ldr	r0, [pc, #108]	; (800ef50 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800eee2:	f7f6 fe1e 	bl	8005b22 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	68b9      	ldr	r1, [r7, #8]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f000 fed7 	bl	800fca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef10:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	691b      	ldr	r3, [r3, #16]
 800ef1c:	021a      	lsls	r2, r3, #8
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	430a      	orrs	r2, r1
 800ef24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef26:	e002      	b.n	800ef2e <HAL_TIM_PWM_ConfigChannel+0x446>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ef2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2200      	movs	r2, #0
 800ef32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	40012c00 	.word	0x40012c00
 800ef44:	40000400 	.word	0x40000400
 800ef48:	40000800 	.word	0x40000800
 800ef4c:	40013400 	.word	0x40013400
 800ef50:	080337ac 	.word	0x080337ac

0800ef54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d101      	bne.n	800ef70 <HAL_TIM_ConfigClockSource+0x1c>
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	e2fc      	b.n	800f56a <HAL_TIM_ConfigClockSource+0x616>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2202      	movs	r2, #2
 800ef7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef88:	d029      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef92:	d024      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d020      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b10      	cmp	r3, #16
 800efa2:	d01c      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2b20      	cmp	r3, #32
 800efaa:	d018      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b30      	cmp	r3, #48	; 0x30
 800efb2:	d014      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b40      	cmp	r3, #64	; 0x40
 800efba:	d010      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2b50      	cmp	r3, #80	; 0x50
 800efc2:	d00c      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b60      	cmp	r3, #96	; 0x60
 800efca:	d008      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b70      	cmp	r3, #112	; 0x70
 800efd2:	d004      	beq.n	800efde <HAL_TIM_ConfigClockSource+0x8a>
 800efd4:	f241 516a 	movw	r1, #5482	; 0x156a
 800efd8:	4880      	ldr	r0, [pc, #512]	; (800f1dc <HAL_TIM_ConfigClockSource+0x288>)
 800efda:	f7f6 fda2 	bl	8005b22 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800efec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800eff0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eff8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f00a:	f000 80fb 	beq.w	800f204 <HAL_TIM_ConfigClockSource+0x2b0>
 800f00e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f012:	f200 829d 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f01a:	d02d      	beq.n	800f078 <HAL_TIM_ConfigClockSource+0x124>
 800f01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f020:	f200 8296 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f024:	2b70      	cmp	r3, #112	; 0x70
 800f026:	d069      	beq.n	800f0fc <HAL_TIM_ConfigClockSource+0x1a8>
 800f028:	2b70      	cmp	r3, #112	; 0x70
 800f02a:	f200 8291 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f02e:	2b60      	cmp	r3, #96	; 0x60
 800f030:	f000 81aa 	beq.w	800f388 <HAL_TIM_ConfigClockSource+0x434>
 800f034:	2b60      	cmp	r3, #96	; 0x60
 800f036:	f200 828b 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f03a:	2b50      	cmp	r3, #80	; 0x50
 800f03c:	f000 814e 	beq.w	800f2dc <HAL_TIM_ConfigClockSource+0x388>
 800f040:	2b50      	cmp	r3, #80	; 0x50
 800f042:	f200 8285 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f046:	2b40      	cmp	r3, #64	; 0x40
 800f048:	f000 8200 	beq.w	800f44c <HAL_TIM_ConfigClockSource+0x4f8>
 800f04c:	2b40      	cmp	r3, #64	; 0x40
 800f04e:	f200 827f 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f052:	2b30      	cmp	r3, #48	; 0x30
 800f054:	f000 8250 	beq.w	800f4f8 <HAL_TIM_ConfigClockSource+0x5a4>
 800f058:	2b30      	cmp	r3, #48	; 0x30
 800f05a:	f200 8279 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f05e:	2b20      	cmp	r3, #32
 800f060:	f000 824a 	beq.w	800f4f8 <HAL_TIM_ConfigClockSource+0x5a4>
 800f064:	2b20      	cmp	r3, #32
 800f066:	f200 8273 	bhi.w	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f000 8244 	beq.w	800f4f8 <HAL_TIM_ConfigClockSource+0x5a4>
 800f070:	2b10      	cmp	r3, #16
 800f072:	f000 8241 	beq.w	800f4f8 <HAL_TIM_ConfigClockSource+0x5a4>
 800f076:	e26b      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x5fc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a58      	ldr	r2, [pc, #352]	; (800f1e0 <HAL_TIM_ConfigClockSource+0x28c>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	f000 8269 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f08c:	f000 8263 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a53      	ldr	r2, [pc, #332]	; (800f1e4 <HAL_TIM_ConfigClockSource+0x290>)
 800f096:	4293      	cmp	r3, r2
 800f098:	f000 825d 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a51      	ldr	r2, [pc, #324]	; (800f1e8 <HAL_TIM_ConfigClockSource+0x294>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	f000 8257 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a4f      	ldr	r2, [pc, #316]	; (800f1ec <HAL_TIM_ConfigClockSource+0x298>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	f000 8251 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a4d      	ldr	r2, [pc, #308]	; (800f1f0 <HAL_TIM_ConfigClockSource+0x29c>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	f000 824b 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4a4b      	ldr	r2, [pc, #300]	; (800f1f4 <HAL_TIM_ConfigClockSource+0x2a0>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	f000 8245 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a49      	ldr	r2, [pc, #292]	; (800f1f8 <HAL_TIM_ConfigClockSource+0x2a4>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	f000 823f 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a47      	ldr	r2, [pc, #284]	; (800f1fc <HAL_TIM_ConfigClockSource+0x2a8>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	f000 8239 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a45      	ldr	r2, [pc, #276]	; (800f200 <HAL_TIM_ConfigClockSource+0x2ac>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	f000 8233 	beq.w	800f556 <HAL_TIM_ConfigClockSource+0x602>
 800f0f0:	f241 5176 	movw	r1, #5494	; 0x1576
 800f0f4:	4839      	ldr	r0, [pc, #228]	; (800f1dc <HAL_TIM_ConfigClockSource+0x288>)
 800f0f6:	f7f6 fd14 	bl	8005b22 <assert_failed>
      break;
 800f0fa:	e22c      	b.n	800f556 <HAL_TIM_ConfigClockSource+0x602>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a37      	ldr	r2, [pc, #220]	; (800f1e0 <HAL_TIM_ConfigClockSource+0x28c>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d018      	beq.n	800f138 <HAL_TIM_ConfigClockSource+0x1e4>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f10e:	d013      	beq.n	800f138 <HAL_TIM_ConfigClockSource+0x1e4>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a33      	ldr	r2, [pc, #204]	; (800f1e4 <HAL_TIM_ConfigClockSource+0x290>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d00e      	beq.n	800f138 <HAL_TIM_ConfigClockSource+0x1e4>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4a32      	ldr	r2, [pc, #200]	; (800f1e8 <HAL_TIM_ConfigClockSource+0x294>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d009      	beq.n	800f138 <HAL_TIM_ConfigClockSource+0x1e4>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a32      	ldr	r2, [pc, #200]	; (800f1f4 <HAL_TIM_ConfigClockSource+0x2a0>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d004      	beq.n	800f138 <HAL_TIM_ConfigClockSource+0x1e4>
 800f12e:	f241 517d 	movw	r1, #5501	; 0x157d
 800f132:	482a      	ldr	r0, [pc, #168]	; (800f1dc <HAL_TIM_ConfigClockSource+0x288>)
 800f134:	f7f6 fcf5 	bl	8005b22 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d013      	beq.n	800f168 <HAL_TIM_ConfigClockSource+0x214>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f148:	d00e      	beq.n	800f168 <HAL_TIM_ConfigClockSource+0x214>
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f152:	d009      	beq.n	800f168 <HAL_TIM_ConfigClockSource+0x214>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f15c:	d004      	beq.n	800f168 <HAL_TIM_ConfigClockSource+0x214>
 800f15e:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 800f162:	481e      	ldr	r0, [pc, #120]	; (800f1dc <HAL_TIM_ConfigClockSource+0x288>)
 800f164:	f7f6 fcdd 	bl	8005b22 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f170:	d014      	beq.n	800f19c <HAL_TIM_ConfigClockSource+0x248>
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d010      	beq.n	800f19c <HAL_TIM_ConfigClockSource+0x248>
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00c      	beq.n	800f19c <HAL_TIM_ConfigClockSource+0x248>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	2b02      	cmp	r3, #2
 800f188:	d008      	beq.n	800f19c <HAL_TIM_ConfigClockSource+0x248>
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	2b0a      	cmp	r3, #10
 800f190:	d004      	beq.n	800f19c <HAL_TIM_ConfigClockSource+0x248>
 800f192:	f241 5181 	movw	r1, #5505	; 0x1581
 800f196:	4811      	ldr	r0, [pc, #68]	; (800f1dc <HAL_TIM_ConfigClockSource+0x288>)
 800f198:	f7f6 fcc3 	bl	8005b22 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	2b0f      	cmp	r3, #15
 800f1a2:	d904      	bls.n	800f1ae <HAL_TIM_ConfigClockSource+0x25a>
 800f1a4:	f241 5182 	movw	r1, #5506	; 0x1582
 800f1a8:	480c      	ldr	r0, [pc, #48]	; (800f1dc <HAL_TIM_ConfigClockSource+0x288>)
 800f1aa:	f7f6 fcba 	bl	8005b22 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6818      	ldr	r0, [r3, #0]
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	6899      	ldr	r1, [r3, #8]
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	685a      	ldr	r2, [r3, #4]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	f000 fe4f 	bl	800fe60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f1d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	609a      	str	r2, [r3, #8]
      break;
 800f1da:	e1bd      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x604>
 800f1dc:	080337ac 	.word	0x080337ac
 800f1e0:	40012c00 	.word	0x40012c00
 800f1e4:	40000400 	.word	0x40000400
 800f1e8:	40000800 	.word	0x40000800
 800f1ec:	40001000 	.word	0x40001000
 800f1f0:	40001400 	.word	0x40001400
 800f1f4:	40013400 	.word	0x40013400
 800f1f8:	40014000 	.word	0x40014000
 800f1fc:	40014400 	.word	0x40014400
 800f200:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a8a      	ldr	r2, [pc, #552]	; (800f434 <HAL_TIM_ConfigClockSource+0x4e0>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d018      	beq.n	800f240 <HAL_TIM_ConfigClockSource+0x2ec>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f216:	d013      	beq.n	800f240 <HAL_TIM_ConfigClockSource+0x2ec>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a86      	ldr	r2, [pc, #536]	; (800f438 <HAL_TIM_ConfigClockSource+0x4e4>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d00e      	beq.n	800f240 <HAL_TIM_ConfigClockSource+0x2ec>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a85      	ldr	r2, [pc, #532]	; (800f43c <HAL_TIM_ConfigClockSource+0x4e8>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d009      	beq.n	800f240 <HAL_TIM_ConfigClockSource+0x2ec>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a83      	ldr	r2, [pc, #524]	; (800f440 <HAL_TIM_ConfigClockSource+0x4ec>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d004      	beq.n	800f240 <HAL_TIM_ConfigClockSource+0x2ec>
 800f236:	f241 5195 	movw	r1, #5525	; 0x1595
 800f23a:	4882      	ldr	r0, [pc, #520]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f23c:	f7f6 fc71 	bl	8005b22 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d013      	beq.n	800f270 <HAL_TIM_ConfigClockSource+0x31c>
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f250:	d00e      	beq.n	800f270 <HAL_TIM_ConfigClockSource+0x31c>
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f25a:	d009      	beq.n	800f270 <HAL_TIM_ConfigClockSource+0x31c>
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f264:	d004      	beq.n	800f270 <HAL_TIM_ConfigClockSource+0x31c>
 800f266:	f241 5198 	movw	r1, #5528	; 0x1598
 800f26a:	4876      	ldr	r0, [pc, #472]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f26c:	f7f6 fc59 	bl	8005b22 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f278:	d014      	beq.n	800f2a4 <HAL_TIM_ConfigClockSource+0x350>
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d010      	beq.n	800f2a4 <HAL_TIM_ConfigClockSource+0x350>
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00c      	beq.n	800f2a4 <HAL_TIM_ConfigClockSource+0x350>
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d008      	beq.n	800f2a4 <HAL_TIM_ConfigClockSource+0x350>
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	2b0a      	cmp	r3, #10
 800f298:	d004      	beq.n	800f2a4 <HAL_TIM_ConfigClockSource+0x350>
 800f29a:	f241 5199 	movw	r1, #5529	; 0x1599
 800f29e:	4869      	ldr	r0, [pc, #420]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f2a0:	f7f6 fc3f 	bl	8005b22 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	2b0f      	cmp	r3, #15
 800f2aa:	d904      	bls.n	800f2b6 <HAL_TIM_ConfigClockSource+0x362>
 800f2ac:	f241 519a 	movw	r1, #5530	; 0x159a
 800f2b0:	4864      	ldr	r0, [pc, #400]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f2b2:	f7f6 fc36 	bl	8005b22 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6818      	ldr	r0, [r3, #0]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	6899      	ldr	r1, [r3, #8]
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	685a      	ldr	r2, [r3, #4]
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	f000 fdcb 	bl	800fe60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689a      	ldr	r2, [r3, #8]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f2d8:	609a      	str	r2, [r3, #8]
      break;
 800f2da:	e13d      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a54      	ldr	r2, [pc, #336]	; (800f434 <HAL_TIM_ConfigClockSource+0x4e0>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d01d      	beq.n	800f322 <HAL_TIM_ConfigClockSource+0x3ce>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2ee:	d018      	beq.n	800f322 <HAL_TIM_ConfigClockSource+0x3ce>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a50      	ldr	r2, [pc, #320]	; (800f438 <HAL_TIM_ConfigClockSource+0x4e4>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d013      	beq.n	800f322 <HAL_TIM_ConfigClockSource+0x3ce>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	4a4f      	ldr	r2, [pc, #316]	; (800f43c <HAL_TIM_ConfigClockSource+0x4e8>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d00e      	beq.n	800f322 <HAL_TIM_ConfigClockSource+0x3ce>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a4d      	ldr	r2, [pc, #308]	; (800f440 <HAL_TIM_ConfigClockSource+0x4ec>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d009      	beq.n	800f322 <HAL_TIM_ConfigClockSource+0x3ce>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a4d      	ldr	r2, [pc, #308]	; (800f448 <HAL_TIM_ConfigClockSource+0x4f4>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d004      	beq.n	800f322 <HAL_TIM_ConfigClockSource+0x3ce>
 800f318:	f241 51a9 	movw	r1, #5545	; 0x15a9
 800f31c:	4849      	ldr	r0, [pc, #292]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f31e:	f7f6 fc00 	bl	8005b22 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f32a:	d014      	beq.n	800f356 <HAL_TIM_ConfigClockSource+0x402>
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d010      	beq.n	800f356 <HAL_TIM_ConfigClockSource+0x402>
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00c      	beq.n	800f356 <HAL_TIM_ConfigClockSource+0x402>
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	2b02      	cmp	r3, #2
 800f342:	d008      	beq.n	800f356 <HAL_TIM_ConfigClockSource+0x402>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	2b0a      	cmp	r3, #10
 800f34a:	d004      	beq.n	800f356 <HAL_TIM_ConfigClockSource+0x402>
 800f34c:	f241 51ac 	movw	r1, #5548	; 0x15ac
 800f350:	483c      	ldr	r0, [pc, #240]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f352:	f7f6 fbe6 	bl	8005b22 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	2b0f      	cmp	r3, #15
 800f35c:	d904      	bls.n	800f368 <HAL_TIM_ConfigClockSource+0x414>
 800f35e:	f241 51ad 	movw	r1, #5549	; 0x15ad
 800f362:	4838      	ldr	r0, [pc, #224]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f364:	f7f6 fbdd 	bl	8005b22 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6818      	ldr	r0, [r3, #0]
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	6859      	ldr	r1, [r3, #4]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	461a      	mov	r2, r3
 800f376:	f000 fcf9 	bl	800fd6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2150      	movs	r1, #80	; 0x50
 800f380:	4618      	mov	r0, r3
 800f382:	f000 fd52 	bl	800fe2a <TIM_ITRx_SetConfig>
      break;
 800f386:	e0e7      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a29      	ldr	r2, [pc, #164]	; (800f434 <HAL_TIM_ConfigClockSource+0x4e0>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d01d      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x47a>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f39a:	d018      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x47a>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a25      	ldr	r2, [pc, #148]	; (800f438 <HAL_TIM_ConfigClockSource+0x4e4>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d013      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x47a>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	4a24      	ldr	r2, [pc, #144]	; (800f43c <HAL_TIM_ConfigClockSource+0x4e8>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d00e      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x47a>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4a22      	ldr	r2, [pc, #136]	; (800f440 <HAL_TIM_ConfigClockSource+0x4ec>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d009      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x47a>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4a22      	ldr	r2, [pc, #136]	; (800f448 <HAL_TIM_ConfigClockSource+0x4f4>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d004      	beq.n	800f3ce <HAL_TIM_ConfigClockSource+0x47a>
 800f3c4:	f241 51b9 	movw	r1, #5561	; 0x15b9
 800f3c8:	481e      	ldr	r0, [pc, #120]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f3ca:	f7f6 fbaa 	bl	8005b22 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3d6:	d014      	beq.n	800f402 <HAL_TIM_ConfigClockSource+0x4ae>
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d010      	beq.n	800f402 <HAL_TIM_ConfigClockSource+0x4ae>
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d00c      	beq.n	800f402 <HAL_TIM_ConfigClockSource+0x4ae>
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d008      	beq.n	800f402 <HAL_TIM_ConfigClockSource+0x4ae>
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	2b0a      	cmp	r3, #10
 800f3f6:	d004      	beq.n	800f402 <HAL_TIM_ConfigClockSource+0x4ae>
 800f3f8:	f241 51bc 	movw	r1, #5564	; 0x15bc
 800f3fc:	4811      	ldr	r0, [pc, #68]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f3fe:	f7f6 fb90 	bl	8005b22 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	2b0f      	cmp	r3, #15
 800f408:	d904      	bls.n	800f414 <HAL_TIM_ConfigClockSource+0x4c0>
 800f40a:	f241 51bd 	movw	r1, #5565	; 0x15bd
 800f40e:	480d      	ldr	r0, [pc, #52]	; (800f444 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f410:	f7f6 fb87 	bl	8005b22 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6818      	ldr	r0, [r3, #0]
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	6859      	ldr	r1, [r3, #4]
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	461a      	mov	r2, r3
 800f422:	f000 fcd2 	bl	800fdca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2160      	movs	r1, #96	; 0x60
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 fcfc 	bl	800fe2a <TIM_ITRx_SetConfig>
      break;
 800f432:	e091      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x604>
 800f434:	40012c00 	.word	0x40012c00
 800f438:	40000400 	.word	0x40000400
 800f43c:	40000800 	.word	0x40000800
 800f440:	40013400 	.word	0x40013400
 800f444:	080337ac 	.word	0x080337ac
 800f448:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a48      	ldr	r2, [pc, #288]	; (800f574 <HAL_TIM_ConfigClockSource+0x620>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d01d      	beq.n	800f492 <HAL_TIM_ConfigClockSource+0x53e>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f45e:	d018      	beq.n	800f492 <HAL_TIM_ConfigClockSource+0x53e>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4a44      	ldr	r2, [pc, #272]	; (800f578 <HAL_TIM_ConfigClockSource+0x624>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d013      	beq.n	800f492 <HAL_TIM_ConfigClockSource+0x53e>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4a43      	ldr	r2, [pc, #268]	; (800f57c <HAL_TIM_ConfigClockSource+0x628>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d00e      	beq.n	800f492 <HAL_TIM_ConfigClockSource+0x53e>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4a41      	ldr	r2, [pc, #260]	; (800f580 <HAL_TIM_ConfigClockSource+0x62c>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d009      	beq.n	800f492 <HAL_TIM_ConfigClockSource+0x53e>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4a40      	ldr	r2, [pc, #256]	; (800f584 <HAL_TIM_ConfigClockSource+0x630>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d004      	beq.n	800f492 <HAL_TIM_ConfigClockSource+0x53e>
 800f488:	f241 51c9 	movw	r1, #5577	; 0x15c9
 800f48c:	483e      	ldr	r0, [pc, #248]	; (800f588 <HAL_TIM_ConfigClockSource+0x634>)
 800f48e:	f7f6 fb48 	bl	8005b22 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f49a:	d014      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x572>
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d010      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x572>
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00c      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x572>
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	d008      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x572>
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	2b0a      	cmp	r3, #10
 800f4ba:	d004      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x572>
 800f4bc:	f241 51cc 	movw	r1, #5580	; 0x15cc
 800f4c0:	4831      	ldr	r0, [pc, #196]	; (800f588 <HAL_TIM_ConfigClockSource+0x634>)
 800f4c2:	f7f6 fb2e 	bl	8005b22 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	2b0f      	cmp	r3, #15
 800f4cc:	d904      	bls.n	800f4d8 <HAL_TIM_ConfigClockSource+0x584>
 800f4ce:	f241 51cd 	movw	r1, #5581	; 0x15cd
 800f4d2:	482d      	ldr	r0, [pc, #180]	; (800f588 <HAL_TIM_ConfigClockSource+0x634>)
 800f4d4:	f7f6 fb25 	bl	8005b22 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6818      	ldr	r0, [r3, #0]
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	6859      	ldr	r1, [r3, #4]
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	f000 fc41 	bl	800fd6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2140      	movs	r1, #64	; 0x40
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 fc9a 	bl	800fe2a <TIM_ITRx_SetConfig>
      break;
 800f4f6:	e02f      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x604>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a1d      	ldr	r2, [pc, #116]	; (800f574 <HAL_TIM_ConfigClockSource+0x620>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d01d      	beq.n	800f53e <HAL_TIM_ConfigClockSource+0x5ea>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f50a:	d018      	beq.n	800f53e <HAL_TIM_ConfigClockSource+0x5ea>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4a19      	ldr	r2, [pc, #100]	; (800f578 <HAL_TIM_ConfigClockSource+0x624>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d013      	beq.n	800f53e <HAL_TIM_ConfigClockSource+0x5ea>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	4a18      	ldr	r2, [pc, #96]	; (800f57c <HAL_TIM_ConfigClockSource+0x628>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d00e      	beq.n	800f53e <HAL_TIM_ConfigClockSource+0x5ea>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4a16      	ldr	r2, [pc, #88]	; (800f580 <HAL_TIM_ConfigClockSource+0x62c>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d009      	beq.n	800f53e <HAL_TIM_ConfigClockSource+0x5ea>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4a15      	ldr	r2, [pc, #84]	; (800f584 <HAL_TIM_ConfigClockSource+0x630>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d004      	beq.n	800f53e <HAL_TIM_ConfigClockSource+0x5ea>
 800f534:	f241 51dc 	movw	r1, #5596	; 0x15dc
 800f538:	4813      	ldr	r0, [pc, #76]	; (800f588 <HAL_TIM_ConfigClockSource+0x634>)
 800f53a:	f7f6 faf2 	bl	8005b22 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4619      	mov	r1, r3
 800f548:	4610      	mov	r0, r2
 800f54a:	f000 fc6e 	bl	800fe2a <TIM_ITRx_SetConfig>
      break;
 800f54e:	e003      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x604>
    }

    default:
      status = HAL_ERROR;
 800f550:	2301      	movs	r3, #1
 800f552:	73fb      	strb	r3, [r7, #15]
      break;
 800f554:	e000      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x604>
      break;
 800f556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	40012c00 	.word	0x40012c00
 800f578:	40000400 	.word	0x40000400
 800f57c:	40000800 	.word	0x40000800
 800f580:	40013400 	.word	0x40013400
 800f584:	40014000 	.word	0x40014000
 800f588:	080337ac 	.word	0x080337ac

0800f58c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a3c      	ldr	r2, [pc, #240]	; (800f690 <TIM_Base_SetConfig+0x104>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d00f      	beq.n	800f5c4 <TIM_Base_SetConfig+0x38>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5aa:	d00b      	beq.n	800f5c4 <TIM_Base_SetConfig+0x38>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a39      	ldr	r2, [pc, #228]	; (800f694 <TIM_Base_SetConfig+0x108>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d007      	beq.n	800f5c4 <TIM_Base_SetConfig+0x38>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a38      	ldr	r2, [pc, #224]	; (800f698 <TIM_Base_SetConfig+0x10c>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d003      	beq.n	800f5c4 <TIM_Base_SetConfig+0x38>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a37      	ldr	r2, [pc, #220]	; (800f69c <TIM_Base_SetConfig+0x110>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d108      	bne.n	800f5d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a2d      	ldr	r2, [pc, #180]	; (800f690 <TIM_Base_SetConfig+0x104>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d01b      	beq.n	800f616 <TIM_Base_SetConfig+0x8a>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5e4:	d017      	beq.n	800f616 <TIM_Base_SetConfig+0x8a>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a2a      	ldr	r2, [pc, #168]	; (800f694 <TIM_Base_SetConfig+0x108>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d013      	beq.n	800f616 <TIM_Base_SetConfig+0x8a>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a29      	ldr	r2, [pc, #164]	; (800f698 <TIM_Base_SetConfig+0x10c>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d00f      	beq.n	800f616 <TIM_Base_SetConfig+0x8a>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a28      	ldr	r2, [pc, #160]	; (800f69c <TIM_Base_SetConfig+0x110>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d00b      	beq.n	800f616 <TIM_Base_SetConfig+0x8a>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a27      	ldr	r2, [pc, #156]	; (800f6a0 <TIM_Base_SetConfig+0x114>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d007      	beq.n	800f616 <TIM_Base_SetConfig+0x8a>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a26      	ldr	r2, [pc, #152]	; (800f6a4 <TIM_Base_SetConfig+0x118>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d003      	beq.n	800f616 <TIM_Base_SetConfig+0x8a>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4a25      	ldr	r2, [pc, #148]	; (800f6a8 <TIM_Base_SetConfig+0x11c>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d108      	bne.n	800f628 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f61c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	4313      	orrs	r3, r2
 800f626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	695b      	ldr	r3, [r3, #20]
 800f632:	4313      	orrs	r3, r2
 800f634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	689a      	ldr	r2, [r3, #8]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4a10      	ldr	r2, [pc, #64]	; (800f690 <TIM_Base_SetConfig+0x104>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d00f      	beq.n	800f674 <TIM_Base_SetConfig+0xe8>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a11      	ldr	r2, [pc, #68]	; (800f69c <TIM_Base_SetConfig+0x110>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d00b      	beq.n	800f674 <TIM_Base_SetConfig+0xe8>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a10      	ldr	r2, [pc, #64]	; (800f6a0 <TIM_Base_SetConfig+0x114>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d007      	beq.n	800f674 <TIM_Base_SetConfig+0xe8>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4a0f      	ldr	r2, [pc, #60]	; (800f6a4 <TIM_Base_SetConfig+0x118>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d003      	beq.n	800f674 <TIM_Base_SetConfig+0xe8>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a0e      	ldr	r2, [pc, #56]	; (800f6a8 <TIM_Base_SetConfig+0x11c>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d103      	bne.n	800f67c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	691a      	ldr	r2, [r3, #16]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	615a      	str	r2, [r3, #20]
}
 800f682:	bf00      	nop
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	40012c00 	.word	0x40012c00
 800f694:	40000400 	.word	0x40000400
 800f698:	40000800 	.word	0x40000800
 800f69c:	40013400 	.word	0x40013400
 800f6a0:	40014000 	.word	0x40014000
 800f6a4:	40014400 	.word	0x40014400
 800f6a8:	40014800 	.word	0x40014800

0800f6ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b086      	sub	sp, #24
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a1b      	ldr	r3, [r3, #32]
 800f6ba:	f023 0201 	bic.w	r2, r3, #1
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a1b      	ldr	r3, [r3, #32]
 800f6c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	699b      	ldr	r3, [r3, #24]
 800f6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f023 0303 	bic.w	r3, r3, #3
 800f6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f023 0302 	bic.w	r3, r3, #2
 800f6f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	697a      	ldr	r2, [r7, #20]
 800f700:	4313      	orrs	r3, r2
 800f702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a40      	ldr	r2, [pc, #256]	; (800f808 <TIM_OC1_SetConfig+0x15c>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d00f      	beq.n	800f72c <TIM_OC1_SetConfig+0x80>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a3f      	ldr	r2, [pc, #252]	; (800f80c <TIM_OC1_SetConfig+0x160>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d00b      	beq.n	800f72c <TIM_OC1_SetConfig+0x80>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a3e      	ldr	r2, [pc, #248]	; (800f810 <TIM_OC1_SetConfig+0x164>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d007      	beq.n	800f72c <TIM_OC1_SetConfig+0x80>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a3d      	ldr	r2, [pc, #244]	; (800f814 <TIM_OC1_SetConfig+0x168>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d003      	beq.n	800f72c <TIM_OC1_SetConfig+0x80>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a3c      	ldr	r2, [pc, #240]	; (800f818 <TIM_OC1_SetConfig+0x16c>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d119      	bne.n	800f760 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d008      	beq.n	800f746 <TIM_OC1_SetConfig+0x9a>
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	2b08      	cmp	r3, #8
 800f73a:	d004      	beq.n	800f746 <TIM_OC1_SetConfig+0x9a>
 800f73c:	f641 318d 	movw	r1, #7053	; 0x1b8d
 800f740:	4836      	ldr	r0, [pc, #216]	; (800f81c <TIM_OC1_SetConfig+0x170>)
 800f742:	f7f6 f9ee 	bl	8005b22 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	f023 0308 	bic.w	r3, r3, #8
 800f74c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	697a      	ldr	r2, [r7, #20]
 800f754:	4313      	orrs	r3, r2
 800f756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	f023 0304 	bic.w	r3, r3, #4
 800f75e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a29      	ldr	r2, [pc, #164]	; (800f808 <TIM_OC1_SetConfig+0x15c>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d00f      	beq.n	800f788 <TIM_OC1_SetConfig+0xdc>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a28      	ldr	r2, [pc, #160]	; (800f80c <TIM_OC1_SetConfig+0x160>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d00b      	beq.n	800f788 <TIM_OC1_SetConfig+0xdc>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a27      	ldr	r2, [pc, #156]	; (800f810 <TIM_OC1_SetConfig+0x164>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d007      	beq.n	800f788 <TIM_OC1_SetConfig+0xdc>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4a26      	ldr	r2, [pc, #152]	; (800f814 <TIM_OC1_SetConfig+0x168>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d003      	beq.n	800f788 <TIM_OC1_SetConfig+0xdc>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	4a25      	ldr	r2, [pc, #148]	; (800f818 <TIM_OC1_SetConfig+0x16c>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d12d      	bne.n	800f7e4 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f790:	d008      	beq.n	800f7a4 <TIM_OC1_SetConfig+0xf8>
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	699b      	ldr	r3, [r3, #24]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d004      	beq.n	800f7a4 <TIM_OC1_SetConfig+0xf8>
 800f79a:	f641 319a 	movw	r1, #7066	; 0x1b9a
 800f79e:	481f      	ldr	r0, [pc, #124]	; (800f81c <TIM_OC1_SetConfig+0x170>)
 800f7a0:	f7f6 f9bf 	bl	8005b22 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	695b      	ldr	r3, [r3, #20]
 800f7a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7ac:	d008      	beq.n	800f7c0 <TIM_OC1_SetConfig+0x114>
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	695b      	ldr	r3, [r3, #20]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d004      	beq.n	800f7c0 <TIM_OC1_SetConfig+0x114>
 800f7b6:	f641 319b 	movw	r1, #7067	; 0x1b9b
 800f7ba:	4818      	ldr	r0, [pc, #96]	; (800f81c <TIM_OC1_SetConfig+0x170>)
 800f7bc:	f7f6 f9b1 	bl	8005b22 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	693a      	ldr	r2, [r7, #16]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	699b      	ldr	r3, [r3, #24]
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	685a      	ldr	r2, [r3, #4]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	621a      	str	r2, [r3, #32]
}
 800f7fe:	bf00      	nop
 800f800:	3718      	adds	r7, #24
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	40012c00 	.word	0x40012c00
 800f80c:	40013400 	.word	0x40013400
 800f810:	40014000 	.word	0x40014000
 800f814:	40014400 	.word	0x40014400
 800f818:	40014800 	.word	0x40014800
 800f81c:	080337ac 	.word	0x080337ac

0800f820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	f023 0210 	bic.w	r2, r3, #16
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a1b      	ldr	r3, [r3, #32]
 800f83a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	699b      	ldr	r3, [r3, #24]
 800f846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f84e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f85a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	021b      	lsls	r3, r3, #8
 800f862:	68fa      	ldr	r2, [r7, #12]
 800f864:	4313      	orrs	r3, r2
 800f866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	f023 0320 	bic.w	r3, r3, #32
 800f86e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	011b      	lsls	r3, r3, #4
 800f876:	697a      	ldr	r2, [r7, #20]
 800f878:	4313      	orrs	r3, r2
 800f87a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a3b      	ldr	r2, [pc, #236]	; (800f96c <TIM_OC2_SetConfig+0x14c>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d003      	beq.n	800f88c <TIM_OC2_SetConfig+0x6c>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a3a      	ldr	r2, [pc, #232]	; (800f970 <TIM_OC2_SetConfig+0x150>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d11a      	bne.n	800f8c2 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d008      	beq.n	800f8a6 <TIM_OC2_SetConfig+0x86>
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	2b08      	cmp	r3, #8
 800f89a:	d004      	beq.n	800f8a6 <TIM_OC2_SetConfig+0x86>
 800f89c:	f641 31d8 	movw	r1, #7128	; 0x1bd8
 800f8a0:	4834      	ldr	r0, [pc, #208]	; (800f974 <TIM_OC2_SetConfig+0x154>)
 800f8a2:	f7f6 f93e 	bl	8005b22 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	011b      	lsls	r3, r3, #4
 800f8b4:	697a      	ldr	r2, [r7, #20]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4a29      	ldr	r2, [pc, #164]	; (800f96c <TIM_OC2_SetConfig+0x14c>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d00f      	beq.n	800f8ea <TIM_OC2_SetConfig+0xca>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a28      	ldr	r2, [pc, #160]	; (800f970 <TIM_OC2_SetConfig+0x150>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d00b      	beq.n	800f8ea <TIM_OC2_SetConfig+0xca>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a28      	ldr	r2, [pc, #160]	; (800f978 <TIM_OC2_SetConfig+0x158>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d007      	beq.n	800f8ea <TIM_OC2_SetConfig+0xca>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4a27      	ldr	r2, [pc, #156]	; (800f97c <TIM_OC2_SetConfig+0x15c>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d003      	beq.n	800f8ea <TIM_OC2_SetConfig+0xca>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4a26      	ldr	r2, [pc, #152]	; (800f980 <TIM_OC2_SetConfig+0x160>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d12f      	bne.n	800f94a <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8f2:	d008      	beq.n	800f906 <TIM_OC2_SetConfig+0xe6>
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d004      	beq.n	800f906 <TIM_OC2_SetConfig+0xe6>
 800f8fc:	f641 31e6 	movw	r1, #7142	; 0x1be6
 800f900:	481c      	ldr	r0, [pc, #112]	; (800f974 <TIM_OC2_SetConfig+0x154>)
 800f902:	f7f6 f90e 	bl	8005b22 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	695b      	ldr	r3, [r3, #20]
 800f90a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f90e:	d008      	beq.n	800f922 <TIM_OC2_SetConfig+0x102>
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	695b      	ldr	r3, [r3, #20]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d004      	beq.n	800f922 <TIM_OC2_SetConfig+0x102>
 800f918:	f641 31e7 	movw	r1, #7143	; 0x1be7
 800f91c:	4815      	ldr	r0, [pc, #84]	; (800f974 <TIM_OC2_SetConfig+0x154>)
 800f91e:	f7f6 f900 	bl	8005b22 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f928:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f930:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	695b      	ldr	r3, [r3, #20]
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	4313      	orrs	r3, r2
 800f93c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	693a      	ldr	r2, [r7, #16]
 800f946:	4313      	orrs	r3, r2
 800f948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	685a      	ldr	r2, [r3, #4]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	621a      	str	r2, [r3, #32]
}
 800f964:	bf00      	nop
 800f966:	3718      	adds	r7, #24
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	40012c00 	.word	0x40012c00
 800f970:	40013400 	.word	0x40013400
 800f974:	080337ac 	.word	0x080337ac
 800f978:	40014000 	.word	0x40014000
 800f97c:	40014400 	.word	0x40014400
 800f980:	40014800 	.word	0x40014800

0800f984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b086      	sub	sp, #24
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6a1b      	ldr	r3, [r3, #32]
 800f99e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	69db      	ldr	r3, [r3, #28]
 800f9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f023 0303 	bic.w	r3, r3, #3
 800f9be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	021b      	lsls	r3, r3, #8
 800f9d8:	697a      	ldr	r2, [r7, #20]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4a3b      	ldr	r2, [pc, #236]	; (800fad0 <TIM_OC3_SetConfig+0x14c>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d003      	beq.n	800f9ee <TIM_OC3_SetConfig+0x6a>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4a3a      	ldr	r2, [pc, #232]	; (800fad4 <TIM_OC3_SetConfig+0x150>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d11a      	bne.n	800fa24 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d008      	beq.n	800fa08 <TIM_OC3_SetConfig+0x84>
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	2b08      	cmp	r3, #8
 800f9fc:	d004      	beq.n	800fa08 <TIM_OC3_SetConfig+0x84>
 800f9fe:	f641 4125 	movw	r1, #7205	; 0x1c25
 800fa02:	4835      	ldr	r0, [pc, #212]	; (800fad8 <TIM_OC3_SetConfig+0x154>)
 800fa04:	f7f6 f88d 	bl	8005b22 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	021b      	lsls	r3, r3, #8
 800fa16:	697a      	ldr	r2, [r7, #20]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa22:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a2a      	ldr	r2, [pc, #168]	; (800fad0 <TIM_OC3_SetConfig+0x14c>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d00f      	beq.n	800fa4c <TIM_OC3_SetConfig+0xc8>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a29      	ldr	r2, [pc, #164]	; (800fad4 <TIM_OC3_SetConfig+0x150>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d00b      	beq.n	800fa4c <TIM_OC3_SetConfig+0xc8>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4a29      	ldr	r2, [pc, #164]	; (800fadc <TIM_OC3_SetConfig+0x158>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d007      	beq.n	800fa4c <TIM_OC3_SetConfig+0xc8>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a28      	ldr	r2, [pc, #160]	; (800fae0 <TIM_OC3_SetConfig+0x15c>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d003      	beq.n	800fa4c <TIM_OC3_SetConfig+0xc8>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a27      	ldr	r2, [pc, #156]	; (800fae4 <TIM_OC3_SetConfig+0x160>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d12f      	bne.n	800faac <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	699b      	ldr	r3, [r3, #24]
 800fa50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa54:	d008      	beq.n	800fa68 <TIM_OC3_SetConfig+0xe4>
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	699b      	ldr	r3, [r3, #24]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d004      	beq.n	800fa68 <TIM_OC3_SetConfig+0xe4>
 800fa5e:	f641 4133 	movw	r1, #7219	; 0x1c33
 800fa62:	481d      	ldr	r0, [pc, #116]	; (800fad8 <TIM_OC3_SetConfig+0x154>)
 800fa64:	f7f6 f85d 	bl	8005b22 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	695b      	ldr	r3, [r3, #20]
 800fa6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa70:	d008      	beq.n	800fa84 <TIM_OC3_SetConfig+0x100>
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	695b      	ldr	r3, [r3, #20]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d004      	beq.n	800fa84 <TIM_OC3_SetConfig+0x100>
 800fa7a:	f641 4134 	movw	r1, #7220	; 0x1c34
 800fa7e:	4816      	ldr	r0, [pc, #88]	; (800fad8 <TIM_OC3_SetConfig+0x154>)
 800fa80:	f7f6 f84f 	bl	8005b22 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	695b      	ldr	r3, [r3, #20]
 800fa98:	011b      	lsls	r3, r3, #4
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	011b      	lsls	r3, r3, #4
 800faa6:	693a      	ldr	r2, [r7, #16]
 800faa8:	4313      	orrs	r3, r2
 800faaa:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	697a      	ldr	r2, [r7, #20]
 800fac4:	621a      	str	r2, [r3, #32]
}
 800fac6:	bf00      	nop
 800fac8:	3718      	adds	r7, #24
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	40012c00 	.word	0x40012c00
 800fad4:	40013400 	.word	0x40013400
 800fad8:	080337ac 	.word	0x080337ac
 800fadc:	40014000 	.word	0x40014000
 800fae0:	40014400 	.word	0x40014400
 800fae4:	40014800 	.word	0x40014800

0800fae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a1b      	ldr	r3, [r3, #32]
 800faf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a1b      	ldr	r3, [r3, #32]
 800fb02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	69db      	ldr	r3, [r3, #28]
 800fb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	021b      	lsls	r3, r3, #8
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	031b      	lsls	r3, r3, #12
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a1e      	ldr	r2, [pc, #120]	; (800fbc0 <TIM_OC4_SetConfig+0xd8>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d00f      	beq.n	800fb6c <TIM_OC4_SetConfig+0x84>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a1d      	ldr	r2, [pc, #116]	; (800fbc4 <TIM_OC4_SetConfig+0xdc>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d00b      	beq.n	800fb6c <TIM_OC4_SetConfig+0x84>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a1c      	ldr	r2, [pc, #112]	; (800fbc8 <TIM_OC4_SetConfig+0xe0>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d007      	beq.n	800fb6c <TIM_OC4_SetConfig+0x84>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a1b      	ldr	r2, [pc, #108]	; (800fbcc <TIM_OC4_SetConfig+0xe4>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d003      	beq.n	800fb6c <TIM_OC4_SetConfig+0x84>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4a1a      	ldr	r2, [pc, #104]	; (800fbd0 <TIM_OC4_SetConfig+0xe8>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d117      	bne.n	800fb9c <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	695b      	ldr	r3, [r3, #20]
 800fb70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb74:	d008      	beq.n	800fb88 <TIM_OC4_SetConfig+0xa0>
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	695b      	ldr	r3, [r3, #20]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d004      	beq.n	800fb88 <TIM_OC4_SetConfig+0xa0>
 800fb7e:	f641 4174 	movw	r1, #7284	; 0x1c74
 800fb82:	4814      	ldr	r0, [pc, #80]	; (800fbd4 <TIM_OC4_SetConfig+0xec>)
 800fb84:	f7f5 ffcd 	bl	8005b22 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	695b      	ldr	r3, [r3, #20]
 800fb94:	019b      	lsls	r3, r3, #6
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	697a      	ldr	r2, [r7, #20]
 800fba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	685a      	ldr	r2, [r3, #4]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	693a      	ldr	r2, [r7, #16]
 800fbb4:	621a      	str	r2, [r3, #32]
}
 800fbb6:	bf00      	nop
 800fbb8:	3718      	adds	r7, #24
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	40012c00 	.word	0x40012c00
 800fbc4:	40013400 	.word	0x40013400
 800fbc8:	40014000 	.word	0x40014000
 800fbcc:	40014400 	.word	0x40014400
 800fbd0:	40014800 	.word	0x40014800
 800fbd4:	080337ac 	.word	0x080337ac

0800fbd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b087      	sub	sp, #28
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6a1b      	ldr	r3, [r3, #32]
 800fbe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6a1b      	ldr	r3, [r3, #32]
 800fbf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	4313      	orrs	r3, r2
 800fc14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fc1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	689b      	ldr	r3, [r3, #8]
 800fc22:	041b      	lsls	r3, r3, #16
 800fc24:	693a      	ldr	r2, [r7, #16]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4a17      	ldr	r2, [pc, #92]	; (800fc8c <TIM_OC5_SetConfig+0xb4>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d00f      	beq.n	800fc52 <TIM_OC5_SetConfig+0x7a>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4a16      	ldr	r2, [pc, #88]	; (800fc90 <TIM_OC5_SetConfig+0xb8>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d00b      	beq.n	800fc52 <TIM_OC5_SetConfig+0x7a>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4a15      	ldr	r2, [pc, #84]	; (800fc94 <TIM_OC5_SetConfig+0xbc>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d007      	beq.n	800fc52 <TIM_OC5_SetConfig+0x7a>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4a14      	ldr	r2, [pc, #80]	; (800fc98 <TIM_OC5_SetConfig+0xc0>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d003      	beq.n	800fc52 <TIM_OC5_SetConfig+0x7a>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4a13      	ldr	r2, [pc, #76]	; (800fc9c <TIM_OC5_SetConfig+0xc4>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d109      	bne.n	800fc66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	695b      	ldr	r3, [r3, #20]
 800fc5e:	021b      	lsls	r3, r3, #8
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	4313      	orrs	r3, r2
 800fc64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	693a      	ldr	r2, [r7, #16]
 800fc7e:	621a      	str	r2, [r3, #32]
}
 800fc80:	bf00      	nop
 800fc82:	371c      	adds	r7, #28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	40012c00 	.word	0x40012c00
 800fc90:	40013400 	.word	0x40013400
 800fc94:	40014000 	.word	0x40014000
 800fc98:	40014400 	.word	0x40014400
 800fc9c:	40014800 	.word	0x40014800

0800fca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b087      	sub	sp, #28
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6a1b      	ldr	r3, [r3, #32]
 800fcae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fcce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	021b      	lsls	r3, r3, #8
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	051b      	lsls	r3, r3, #20
 800fcee:	693a      	ldr	r2, [r7, #16]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4a18      	ldr	r2, [pc, #96]	; (800fd58 <TIM_OC6_SetConfig+0xb8>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d00f      	beq.n	800fd1c <TIM_OC6_SetConfig+0x7c>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4a17      	ldr	r2, [pc, #92]	; (800fd5c <TIM_OC6_SetConfig+0xbc>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d00b      	beq.n	800fd1c <TIM_OC6_SetConfig+0x7c>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a16      	ldr	r2, [pc, #88]	; (800fd60 <TIM_OC6_SetConfig+0xc0>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d007      	beq.n	800fd1c <TIM_OC6_SetConfig+0x7c>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a15      	ldr	r2, [pc, #84]	; (800fd64 <TIM_OC6_SetConfig+0xc4>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d003      	beq.n	800fd1c <TIM_OC6_SetConfig+0x7c>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a14      	ldr	r2, [pc, #80]	; (800fd68 <TIM_OC6_SetConfig+0xc8>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d109      	bne.n	800fd30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	695b      	ldr	r3, [r3, #20]
 800fd28:	029b      	lsls	r3, r3, #10
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	697a      	ldr	r2, [r7, #20]
 800fd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	693a      	ldr	r2, [r7, #16]
 800fd48:	621a      	str	r2, [r3, #32]
}
 800fd4a:	bf00      	nop
 800fd4c:	371c      	adds	r7, #28
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	40012c00 	.word	0x40012c00
 800fd5c:	40013400 	.word	0x40013400
 800fd60:	40014000 	.word	0x40014000
 800fd64:	40014400 	.word	0x40014400
 800fd68:	40014800 	.word	0x40014800

0800fd6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b087      	sub	sp, #28
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6a1b      	ldr	r3, [r3, #32]
 800fd7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	f023 0201 	bic.w	r2, r3, #1
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	699b      	ldr	r3, [r3, #24]
 800fd8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	011b      	lsls	r3, r3, #4
 800fd9c:	693a      	ldr	r2, [r7, #16]
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	f023 030a 	bic.w	r3, r3, #10
 800fda8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	693a      	ldr	r2, [r7, #16]
 800fdb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	697a      	ldr	r2, [r7, #20]
 800fdbc:	621a      	str	r2, [r3, #32]
}
 800fdbe:	bf00      	nop
 800fdc0:	371c      	adds	r7, #28
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdca:	b480      	push	{r7}
 800fdcc:	b087      	sub	sp, #28
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	60f8      	str	r0, [r7, #12]
 800fdd2:	60b9      	str	r1, [r7, #8]
 800fdd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6a1b      	ldr	r3, [r3, #32]
 800fdda:	f023 0210 	bic.w	r2, r3, #16
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	031b      	lsls	r3, r3, #12
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	011b      	lsls	r3, r3, #4
 800fe0c:	693a      	ldr	r2, [r7, #16]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	697a      	ldr	r2, [r7, #20]
 800fe16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	693a      	ldr	r2, [r7, #16]
 800fe1c:	621a      	str	r2, [r3, #32]
}
 800fe1e:	bf00      	nop
 800fe20:	371c      	adds	r7, #28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr

0800fe2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe2a:	b480      	push	{r7}
 800fe2c:	b085      	sub	sp, #20
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
 800fe32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	f043 0307 	orr.w	r3, r3, #7
 800fe4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	609a      	str	r2, [r3, #8]
}
 800fe54:	bf00      	nop
 800fe56:	3714      	adds	r7, #20
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr

0800fe60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b087      	sub	sp, #28
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
 800fe6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	021a      	lsls	r2, r3, #8
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	431a      	orrs	r2, r3
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	609a      	str	r2, [r3, #8]
}
 800fe94:	bf00      	nop
 800fe96:	371c      	adds	r7, #28
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4a2d      	ldr	r2, [pc, #180]	; (800ff64 <TIM_CCxChannelCmd+0xc4>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d020      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feba:	d01c      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	4a2a      	ldr	r2, [pc, #168]	; (800ff68 <TIM_CCxChannelCmd+0xc8>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d018      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	4a29      	ldr	r2, [pc, #164]	; (800ff6c <TIM_CCxChannelCmd+0xcc>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d014      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	4a28      	ldr	r2, [pc, #160]	; (800ff70 <TIM_CCxChannelCmd+0xd0>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d010      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	4a27      	ldr	r2, [pc, #156]	; (800ff74 <TIM_CCxChannelCmd+0xd4>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d00c      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4a26      	ldr	r2, [pc, #152]	; (800ff78 <TIM_CCxChannelCmd+0xd8>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d008      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	4a25      	ldr	r2, [pc, #148]	; (800ff7c <TIM_CCxChannelCmd+0xdc>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d004      	beq.n	800fef6 <TIM_CCxChannelCmd+0x56>
 800feec:	f641 61d1 	movw	r1, #7889	; 0x1ed1
 800fef0:	4823      	ldr	r0, [pc, #140]	; (800ff80 <TIM_CCxChannelCmd+0xe0>)
 800fef2:	f7f5 fe16 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d016      	beq.n	800ff2a <TIM_CCxChannelCmd+0x8a>
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	2b04      	cmp	r3, #4
 800ff00:	d013      	beq.n	800ff2a <TIM_CCxChannelCmd+0x8a>
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	2b08      	cmp	r3, #8
 800ff06:	d010      	beq.n	800ff2a <TIM_CCxChannelCmd+0x8a>
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	2b0c      	cmp	r3, #12
 800ff0c:	d00d      	beq.n	800ff2a <TIM_CCxChannelCmd+0x8a>
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	2b10      	cmp	r3, #16
 800ff12:	d00a      	beq.n	800ff2a <TIM_CCxChannelCmd+0x8a>
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	2b14      	cmp	r3, #20
 800ff18:	d007      	beq.n	800ff2a <TIM_CCxChannelCmd+0x8a>
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	2b3c      	cmp	r3, #60	; 0x3c
 800ff1e:	d004      	beq.n	800ff2a <TIM_CCxChannelCmd+0x8a>
 800ff20:	f641 61d2 	movw	r1, #7890	; 0x1ed2
 800ff24:	4816      	ldr	r0, [pc, #88]	; (800ff80 <TIM_CCxChannelCmd+0xe0>)
 800ff26:	f7f5 fdfc 	bl	8005b22 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	f003 031f 	and.w	r3, r3, #31
 800ff30:	2201      	movs	r2, #1
 800ff32:	fa02 f303 	lsl.w	r3, r2, r3
 800ff36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6a1a      	ldr	r2, [r3, #32]
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	43db      	mvns	r3, r3
 800ff40:	401a      	ands	r2, r3
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6a1a      	ldr	r2, [r3, #32]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	f003 031f 	and.w	r3, r3, #31
 800ff50:	6879      	ldr	r1, [r7, #4]
 800ff52:	fa01 f303 	lsl.w	r3, r1, r3
 800ff56:	431a      	orrs	r2, r3
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	621a      	str	r2, [r3, #32]
}
 800ff5c:	bf00      	nop
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	40012c00 	.word	0x40012c00
 800ff68:	40000400 	.word	0x40000400
 800ff6c:	40000800 	.word	0x40000800
 800ff70:	40013400 	.word	0x40013400
 800ff74:	40014000 	.word	0x40014000
 800ff78:	40014400 	.word	0x40014400
 800ff7c:	40014800 	.word	0x40014800
 800ff80:	080337ac 	.word	0x080337ac

0800ff84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a32      	ldr	r2, [pc, #200]	; (801005c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d027      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffa0:	d022      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a2e      	ldr	r2, [pc, #184]	; (8010060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d01d      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a2c      	ldr	r2, [pc, #176]	; (8010064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d018      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a2b      	ldr	r2, [pc, #172]	; (8010068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d013      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a29      	ldr	r2, [pc, #164]	; (801006c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d00e      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4a28      	ldr	r2, [pc, #160]	; (8010070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d009      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4a26      	ldr	r2, [pc, #152]	; (8010074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d004      	beq.n	800ffe8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800ffde:	f240 71b4 	movw	r1, #1972	; 0x7b4
 800ffe2:	4825      	ldr	r0, [pc, #148]	; (8010078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ffe4:	f7f5 fd9d 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d020      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b10      	cmp	r3, #16
 800fff6:	d01c      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b20      	cmp	r3, #32
 800fffe:	d018      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b30      	cmp	r3, #48	; 0x30
 8010006:	d014      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2b40      	cmp	r3, #64	; 0x40
 801000e:	d010      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b50      	cmp	r3, #80	; 0x50
 8010016:	d00c      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b60      	cmp	r3, #96	; 0x60
 801001e:	d008      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2b70      	cmp	r3, #112	; 0x70
 8010026:	d004      	beq.n	8010032 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010028:	f240 71b5 	movw	r1, #1973	; 0x7b5
 801002c:	4812      	ldr	r0, [pc, #72]	; (8010078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801002e:	f7f5 fd78 	bl	8005b22 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	2b80      	cmp	r3, #128	; 0x80
 8010038:	d008      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d004      	beq.n	801004c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010042:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8010046:	480c      	ldr	r0, [pc, #48]	; (8010078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010048:	f7f5 fd6b 	bl	8005b22 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010052:	2b01      	cmp	r3, #1
 8010054:	d112      	bne.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8010056:	2302      	movs	r3, #2
 8010058:	e0cd      	b.n	80101f6 <HAL_TIMEx_MasterConfigSynchronization+0x272>
 801005a:	bf00      	nop
 801005c:	40012c00 	.word	0x40012c00
 8010060:	40000400 	.word	0x40000400
 8010064:	40000800 	.word	0x40000800
 8010068:	40001000 	.word	0x40001000
 801006c:	40001400 	.word	0x40001400
 8010070:	40013400 	.word	0x40013400
 8010074:	40014000 	.word	0x40014000
 8010078:	080337e4 	.word	0x080337e4
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2202      	movs	r2, #2
 8010088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	689b      	ldr	r3, [r3, #8]
 801009a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a57      	ldr	r2, [pc, #348]	; (8010200 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d004      	beq.n	80100b0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a56      	ldr	r2, [pc, #344]	; (8010204 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d161      	bne.n	8010174 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d054      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80100c0:	d04f      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80100ca:	d04a      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80100d4:	d045      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100de:	d040      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80100e8:	d03b      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80100f2:	d036      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80100fc:	d031      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8010106:	d02c      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010110:	d027      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 801011a:	d022      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8010124:	d01d      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 801012e:	d018      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010138:	d013      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8010142:	d00e      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 801014c:	d009      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8010156:	d004      	beq.n	8010162 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010158:	f240 71c9 	movw	r1, #1993	; 0x7c9
 801015c:	482a      	ldr	r0, [pc, #168]	; (8010208 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 801015e:	f7f5 fce0 	bl	8005b22 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010168:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	4313      	orrs	r3, r2
 8010172:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801017a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	68fa      	ldr	r2, [r7, #12]
 8010182:	4313      	orrs	r3, r2
 8010184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4a1b      	ldr	r2, [pc, #108]	; (8010200 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d018      	beq.n	80101ca <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101a0:	d013      	beq.n	80101ca <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4a19      	ldr	r2, [pc, #100]	; (801020c <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d00e      	beq.n	80101ca <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a17      	ldr	r2, [pc, #92]	; (8010210 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d009      	beq.n	80101ca <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a12      	ldr	r2, [pc, #72]	; (8010204 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d004      	beq.n	80101ca <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a13      	ldr	r2, [pc, #76]	; (8010214 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d10c      	bne.n	80101e4 <HAL_TIMEx_MasterConfigSynchronization+0x260>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	4313      	orrs	r3, r2
 80101da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	68ba      	ldr	r2, [r7, #8]
 80101e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	40012c00 	.word	0x40012c00
 8010204:	40013400 	.word	0x40013400
 8010208:	080337e4 	.word	0x080337e4
 801020c:	40000400 	.word	0x40000400
 8010210:	40000800 	.word	0x40000800
 8010214:	40014000 	.word	0x40014000

08010218 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2200      	movs	r2, #0
 8010224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010228:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 801022c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	b29a      	uxth	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	3714      	adds	r7, #20
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010246:	b480      	push	{r7}
 8010248:	b085      	sub	sp, #20
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801024e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8010252:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801025a:	b29a      	uxth	r2, r3
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	b29b      	uxth	r3, r3
 8010260:	43db      	mvns	r3, r3
 8010262:	b29b      	uxth	r3, r3
 8010264:	4013      	ands	r3, r2
 8010266:	b29a      	uxth	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801027c:	b084      	sub	sp, #16
 801027e:	b480      	push	{r7}
 8010280:	b083      	sub	sp, #12
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
 8010286:	f107 0014 	add.w	r0, r7, #20
 801028a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2201      	movs	r2, #1
 8010292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	370c      	adds	r7, #12
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	b004      	add	sp, #16
 80102bc:	4770      	bx	lr
	...

080102c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b09d      	sub	sp, #116	; 0x74
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	4413      	add	r3, r2
 80102da:	881b      	ldrh	r3, [r3, #0]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80102e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	78db      	ldrb	r3, [r3, #3]
 80102ee:	2b03      	cmp	r3, #3
 80102f0:	d81f      	bhi.n	8010332 <USB_ActivateEndpoint+0x72>
 80102f2:	a201      	add	r2, pc, #4	; (adr r2, 80102f8 <USB_ActivateEndpoint+0x38>)
 80102f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f8:	08010309 	.word	0x08010309
 80102fc:	08010325 	.word	0x08010325
 8010300:	0801033b 	.word	0x0801033b
 8010304:	08010317 	.word	0x08010317
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010308:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801030c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010310:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010314:	e012      	b.n	801033c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010316:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801031a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 801031e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010322:	e00b      	b.n	801033c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010324:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801032c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010330:	e004      	b.n	801033c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010332:	2301      	movs	r3, #1
 8010334:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010338:	e000      	b.n	801033c <USB_ActivateEndpoint+0x7c>
      break;
 801033a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	441a      	add	r2, r3
 8010346:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801034a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801034e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801035a:	b29b      	uxth	r3, r3
 801035c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4413      	add	r3, r2
 8010368:	881b      	ldrh	r3, [r3, #0]
 801036a:	b29b      	uxth	r3, r3
 801036c:	b21b      	sxth	r3, r3
 801036e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010376:	b21a      	sxth	r2, r3
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	b21b      	sxth	r3, r3
 801037e:	4313      	orrs	r3, r2
 8010380:	b21b      	sxth	r3, r3
 8010382:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	441a      	add	r2, r3
 8010390:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801039c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	7b1b      	ldrb	r3, [r3, #12]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f040 8149 	bne.w	8010644 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	785b      	ldrb	r3, [r3, #1]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f000 8084 	beq.w	80104c4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	61bb      	str	r3, [r7, #24]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	461a      	mov	r2, r3
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	4413      	add	r3, r2
 80103ce:	61bb      	str	r3, [r7, #24]
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	011a      	lsls	r2, r3, #4
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	4413      	add	r3, r2
 80103da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80103de:	617b      	str	r3, [r7, #20]
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	88db      	ldrh	r3, [r3, #6]
 80103e4:	085b      	lsrs	r3, r3, #1
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	005b      	lsls	r3, r3, #1
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	4413      	add	r3, r2
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	827b      	strh	r3, [r7, #18]
 80103fe:	8a7b      	ldrh	r3, [r7, #18]
 8010400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010404:	2b00      	cmp	r3, #0
 8010406:	d01b      	beq.n	8010440 <USB_ActivateEndpoint+0x180>
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	4413      	add	r3, r2
 8010412:	881b      	ldrh	r3, [r3, #0]
 8010414:	b29b      	uxth	r3, r3
 8010416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801041a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801041e:	823b      	strh	r3, [r7, #16]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	441a      	add	r2, r3
 801042a:	8a3b      	ldrh	r3, [r7, #16]
 801042c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010438:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801043c:	b29b      	uxth	r3, r3
 801043e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	78db      	ldrb	r3, [r3, #3]
 8010444:	2b01      	cmp	r3, #1
 8010446:	d020      	beq.n	801048a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	4413      	add	r3, r2
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	b29b      	uxth	r3, r3
 8010456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801045a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801045e:	81bb      	strh	r3, [r7, #12]
 8010460:	89bb      	ldrh	r3, [r7, #12]
 8010462:	f083 0320 	eor.w	r3, r3, #32
 8010466:	81bb      	strh	r3, [r7, #12]
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	441a      	add	r2, r3
 8010472:	89bb      	ldrh	r3, [r7, #12]
 8010474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801047c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010484:	b29b      	uxth	r3, r3
 8010486:	8013      	strh	r3, [r2, #0]
 8010488:	e2a6      	b.n	80109d8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	4413      	add	r3, r2
 8010494:	881b      	ldrh	r3, [r3, #0]
 8010496:	b29b      	uxth	r3, r3
 8010498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801049c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104a0:	81fb      	strh	r3, [r7, #14]
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	441a      	add	r2, r3
 80104ac:	89fb      	ldrh	r3, [r7, #14]
 80104ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104be:	b29b      	uxth	r3, r3
 80104c0:	8013      	strh	r3, [r2, #0]
 80104c2:	e289      	b.n	80109d8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	633b      	str	r3, [r7, #48]	; 0x30
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	461a      	mov	r2, r3
 80104d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d4:	4413      	add	r3, r2
 80104d6:	633b      	str	r3, [r7, #48]	; 0x30
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	011a      	lsls	r2, r3, #4
 80104de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e0:	4413      	add	r3, r2
 80104e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80104e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	88db      	ldrh	r3, [r3, #6]
 80104ec:	085b      	lsrs	r3, r3, #1
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	005b      	lsls	r3, r3, #1
 80104f2:	b29a      	uxth	r2, r3
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010502:	b29b      	uxth	r3, r3
 8010504:	461a      	mov	r2, r3
 8010506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010508:	4413      	add	r3, r2
 801050a:	62bb      	str	r3, [r7, #40]	; 0x28
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	011a      	lsls	r2, r3, #4
 8010512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010514:	4413      	add	r3, r2
 8010516:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801051a:	627b      	str	r3, [r7, #36]	; 0x24
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d112      	bne.n	801054a <USB_ActivateEndpoint+0x28a>
 8010524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	b29b      	uxth	r3, r3
 801052a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801052e:	b29a      	uxth	r2, r3
 8010530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010532:	801a      	strh	r2, [r3, #0]
 8010534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010536:	881b      	ldrh	r3, [r3, #0]
 8010538:	b29b      	uxth	r3, r3
 801053a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801053e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010542:	b29a      	uxth	r2, r3
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010546:	801a      	strh	r2, [r3, #0]
 8010548:	e02f      	b.n	80105aa <USB_ActivateEndpoint+0x2ea>
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	691b      	ldr	r3, [r3, #16]
 801054e:	2b3e      	cmp	r3, #62	; 0x3e
 8010550:	d813      	bhi.n	801057a <USB_ActivateEndpoint+0x2ba>
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	085b      	lsrs	r3, r3, #1
 8010558:	66bb      	str	r3, [r7, #104]	; 0x68
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	691b      	ldr	r3, [r3, #16]
 801055e:	f003 0301 	and.w	r3, r3, #1
 8010562:	2b00      	cmp	r3, #0
 8010564:	d002      	beq.n	801056c <USB_ActivateEndpoint+0x2ac>
 8010566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010568:	3301      	adds	r3, #1
 801056a:	66bb      	str	r3, [r7, #104]	; 0x68
 801056c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801056e:	b29b      	uxth	r3, r3
 8010570:	029b      	lsls	r3, r3, #10
 8010572:	b29a      	uxth	r2, r3
 8010574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010576:	801a      	strh	r2, [r3, #0]
 8010578:	e017      	b.n	80105aa <USB_ActivateEndpoint+0x2ea>
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	691b      	ldr	r3, [r3, #16]
 801057e:	095b      	lsrs	r3, r3, #5
 8010580:	66bb      	str	r3, [r7, #104]	; 0x68
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	691b      	ldr	r3, [r3, #16]
 8010586:	f003 031f 	and.w	r3, r3, #31
 801058a:	2b00      	cmp	r3, #0
 801058c:	d102      	bne.n	8010594 <USB_ActivateEndpoint+0x2d4>
 801058e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010590:	3b01      	subs	r3, #1
 8010592:	66bb      	str	r3, [r7, #104]	; 0x68
 8010594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010596:	b29b      	uxth	r3, r3
 8010598:	029b      	lsls	r3, r3, #10
 801059a:	b29b      	uxth	r3, r3
 801059c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4413      	add	r3, r2
 80105b4:	881b      	ldrh	r3, [r3, #0]
 80105b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80105b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d01b      	beq.n	80105fa <USB_ActivateEndpoint+0x33a>
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	009b      	lsls	r3, r3, #2
 80105ca:	4413      	add	r3, r2
 80105cc:	881b      	ldrh	r3, [r3, #0]
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105d8:	843b      	strh	r3, [r7, #32]
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	441a      	add	r2, r3
 80105e4:	8c3b      	ldrh	r3, [r7, #32]
 80105e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	4413      	add	r3, r2
 8010604:	881b      	ldrh	r3, [r3, #0]
 8010606:	b29b      	uxth	r3, r3
 8010608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801060c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010610:	83fb      	strh	r3, [r7, #30]
 8010612:	8bfb      	ldrh	r3, [r7, #30]
 8010614:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010618:	83fb      	strh	r3, [r7, #30]
 801061a:	8bfb      	ldrh	r3, [r7, #30]
 801061c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010620:	83fb      	strh	r3, [r7, #30]
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	441a      	add	r2, r3
 801062c:	8bfb      	ldrh	r3, [r7, #30]
 801062e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801063e:	b29b      	uxth	r3, r3
 8010640:	8013      	strh	r3, [r2, #0]
 8010642:	e1c9      	b.n	80109d8 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	78db      	ldrb	r3, [r3, #3]
 8010648:	2b02      	cmp	r3, #2
 801064a:	d11e      	bne.n	801068a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	4413      	add	r3, r2
 8010656:	881b      	ldrh	r3, [r3, #0]
 8010658:	b29b      	uxth	r3, r3
 801065a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801065e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010662:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	441a      	add	r2, r3
 8010670:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801067c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010684:	b29b      	uxth	r3, r3
 8010686:	8013      	strh	r3, [r2, #0]
 8010688:	e01d      	b.n	80106c6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4413      	add	r3, r2
 8010694:	881b      	ldrh	r3, [r3, #0]
 8010696:	b29b      	uxth	r3, r3
 8010698:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801069c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	441a      	add	r2, r3
 80106ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80106b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	461a      	mov	r2, r3
 80106d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d6:	4413      	add	r3, r2
 80106d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	011a      	lsls	r2, r3, #4
 80106e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106e2:	4413      	add	r3, r2
 80106e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	891b      	ldrh	r3, [r3, #8]
 80106ee:	085b      	lsrs	r3, r3, #1
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106f8:	801a      	strh	r2, [r3, #0]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	657b      	str	r3, [r7, #84]	; 0x54
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010704:	b29b      	uxth	r3, r3
 8010706:	461a      	mov	r2, r3
 8010708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801070a:	4413      	add	r3, r2
 801070c:	657b      	str	r3, [r7, #84]	; 0x54
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	011a      	lsls	r2, r3, #4
 8010714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010716:	4413      	add	r3, r2
 8010718:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801071c:	653b      	str	r3, [r7, #80]	; 0x50
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	895b      	ldrh	r3, [r3, #10]
 8010722:	085b      	lsrs	r3, r3, #1
 8010724:	b29b      	uxth	r3, r3
 8010726:	005b      	lsls	r3, r3, #1
 8010728:	b29a      	uxth	r2, r3
 801072a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801072c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	785b      	ldrb	r3, [r3, #1]
 8010732:	2b00      	cmp	r3, #0
 8010734:	f040 8093 	bne.w	801085e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	009b      	lsls	r3, r3, #2
 8010740:	4413      	add	r3, r2
 8010742:	881b      	ldrh	r3, [r3, #0]
 8010744:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010748:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801074c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010750:	2b00      	cmp	r3, #0
 8010752:	d01b      	beq.n	801078c <USB_ActivateEndpoint+0x4cc>
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	881b      	ldrh	r3, [r3, #0]
 8010760:	b29b      	uxth	r3, r3
 8010762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801076a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	441a      	add	r2, r3
 8010776:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801077c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010788:	b29b      	uxth	r3, r3
 801078a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	4413      	add	r3, r2
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801079a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801079c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d01b      	beq.n	80107dc <USB_ActivateEndpoint+0x51c>
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	009b      	lsls	r3, r3, #2
 80107ac:	4413      	add	r3, r2
 80107ae:	881b      	ldrh	r3, [r3, #0]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107ba:	877b      	strh	r3, [r7, #58]	; 0x3a
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	441a      	add	r2, r3
 80107c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80107d8:	b29b      	uxth	r3, r3
 80107da:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	4413      	add	r3, r2
 80107e6:	881b      	ldrh	r3, [r3, #0]
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80107f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80107f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80107fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80107fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80107fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010802:	873b      	strh	r3, [r7, #56]	; 0x38
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	441a      	add	r2, r3
 801080e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010820:	b29b      	uxth	r3, r3
 8010822:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	4413      	add	r3, r2
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	b29b      	uxth	r3, r3
 8010832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801083a:	86fb      	strh	r3, [r7, #54]	; 0x36
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	441a      	add	r2, r3
 8010846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801084c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010858:	b29b      	uxth	r3, r3
 801085a:	8013      	strh	r3, [r2, #0]
 801085c:	e0bc      	b.n	80109d8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	009b      	lsls	r3, r3, #2
 8010866:	4413      	add	r3, r2
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801086e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010876:	2b00      	cmp	r3, #0
 8010878:	d01d      	beq.n	80108b6 <USB_ActivateEndpoint+0x5f6>
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	4413      	add	r3, r2
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	b29b      	uxth	r3, r3
 8010888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801088c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010890:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	441a      	add	r2, r3
 801089e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80108a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80108ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4413      	add	r3, r2
 80108c0:	881b      	ldrh	r3, [r3, #0]
 80108c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80108c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80108ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d01d      	beq.n	801090e <USB_ActivateEndpoint+0x64e>
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	4413      	add	r3, r2
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	441a      	add	r2, r3
 80108f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80108fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801090a:	b29b      	uxth	r3, r3
 801090c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	78db      	ldrb	r3, [r3, #3]
 8010912:	2b01      	cmp	r3, #1
 8010914:	d024      	beq.n	8010960 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	4413      	add	r3, r2
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	b29b      	uxth	r3, r3
 8010924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801092c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010930:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010934:	f083 0320 	eor.w	r3, r3, #32
 8010938:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	441a      	add	r2, r3
 8010946:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801094a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801094e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801095a:	b29b      	uxth	r3, r3
 801095c:	8013      	strh	r3, [r2, #0]
 801095e:	e01d      	b.n	801099c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	4413      	add	r3, r2
 801096a:	881b      	ldrh	r3, [r3, #0]
 801096c:	b29b      	uxth	r3, r3
 801096e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010976:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	441a      	add	r2, r3
 8010984:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801098c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010998:	b29b      	uxth	r3, r3
 801099a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80109ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	441a      	add	r2, r3
 80109c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80109d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80109d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3774      	adds	r7, #116	; 0x74
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr

080109e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b08d      	sub	sp, #52	; 0x34
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	7b1b      	ldrb	r3, [r3, #12]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	f040 808e 	bne.w	8010b18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	785b      	ldrb	r3, [r3, #1]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d044      	beq.n	8010a8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	009b      	lsls	r3, r3, #2
 8010a0c:	4413      	add	r3, r2
 8010a0e:	881b      	ldrh	r3, [r3, #0]
 8010a10:	81bb      	strh	r3, [r7, #12]
 8010a12:	89bb      	ldrh	r3, [r7, #12]
 8010a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d01b      	beq.n	8010a54 <USB_DeactivateEndpoint+0x6c>
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	4413      	add	r3, r2
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a32:	817b      	strh	r3, [r7, #10]
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	441a      	add	r2, r3
 8010a3e:	897b      	ldrh	r3, [r7, #10]
 8010a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4413      	add	r3, r2
 8010a5e:	881b      	ldrh	r3, [r3, #0]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a6a:	813b      	strh	r3, [r7, #8]
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	441a      	add	r2, r3
 8010a76:	893b      	ldrh	r3, [r7, #8]
 8010a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	8013      	strh	r3, [r2, #0]
 8010a8c:	e192      	b.n	8010db4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	827b      	strh	r3, [r7, #18]
 8010a9c:	8a7b      	ldrh	r3, [r7, #18]
 8010a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d01b      	beq.n	8010ade <USB_DeactivateEndpoint+0xf6>
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	4413      	add	r3, r2
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010abc:	823b      	strh	r3, [r7, #16]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	009b      	lsls	r3, r3, #2
 8010ac6:	441a      	add	r2, r3
 8010ac8:	8a3b      	ldrh	r3, [r7, #16]
 8010aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010af4:	81fb      	strh	r3, [r7, #14]
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	441a      	add	r2, r3
 8010b00:	89fb      	ldrh	r3, [r7, #14]
 8010b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	8013      	strh	r3, [r2, #0]
 8010b16:	e14d      	b.n	8010db4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	785b      	ldrb	r3, [r3, #1]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f040 80a5 	bne.w	8010c6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	843b      	strh	r3, [r7, #32]
 8010b30:	8c3b      	ldrh	r3, [r7, #32]
 8010b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d01b      	beq.n	8010b72 <USB_DeactivateEndpoint+0x18a>
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	4413      	add	r3, r2
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b50:	83fb      	strh	r3, [r7, #30]
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	009b      	lsls	r3, r3, #2
 8010b5a:	441a      	add	r2, r3
 8010b5c:	8bfb      	ldrh	r3, [r7, #30]
 8010b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	4413      	add	r3, r2
 8010b7c:	881b      	ldrh	r3, [r3, #0]
 8010b7e:	83bb      	strh	r3, [r7, #28]
 8010b80:	8bbb      	ldrh	r3, [r7, #28]
 8010b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d01b      	beq.n	8010bc2 <USB_DeactivateEndpoint+0x1da>
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	4413      	add	r3, r2
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ba0:	837b      	strh	r3, [r7, #26]
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	441a      	add	r2, r3
 8010bac:	8b7b      	ldrh	r3, [r7, #26]
 8010bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	4413      	add	r3, r2
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bd8:	833b      	strh	r3, [r7, #24]
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	441a      	add	r2, r3
 8010be4:	8b3b      	ldrh	r3, [r7, #24]
 8010be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	4413      	add	r3, r2
 8010c04:	881b      	ldrh	r3, [r3, #0]
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c10:	82fb      	strh	r3, [r7, #22]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	441a      	add	r2, r3
 8010c1c:	8afb      	ldrh	r3, [r7, #22]
 8010c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010c32:	687a      	ldr	r2, [r7, #4]
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	009b      	lsls	r3, r3, #2
 8010c3a:	4413      	add	r3, r2
 8010c3c:	881b      	ldrh	r3, [r3, #0]
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c48:	82bb      	strh	r3, [r7, #20]
 8010c4a:	687a      	ldr	r2, [r7, #4]
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	441a      	add	r2, r3
 8010c54:	8abb      	ldrh	r3, [r7, #20]
 8010c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	8013      	strh	r3, [r2, #0]
 8010c6a:	e0a3      	b.n	8010db4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	4413      	add	r3, r2
 8010c76:	881b      	ldrh	r3, [r3, #0]
 8010c78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010c7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d01b      	beq.n	8010cbc <USB_DeactivateEndpoint+0x2d4>
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	4413      	add	r3, r2
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	441a      	add	r2, r3
 8010ca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	881b      	ldrh	r3, [r3, #0]
 8010cc8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010cca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d01b      	beq.n	8010d0c <USB_DeactivateEndpoint+0x324>
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4413      	add	r3, r2
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cea:	853b      	strh	r3, [r7, #40]	; 0x28
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	441a      	add	r2, r3
 8010cf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010d0c:	687a      	ldr	r2, [r7, #4]
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4413      	add	r3, r2
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	441a      	add	r2, r3
 8010d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4413      	add	r3, r2
 8010d4e:	881b      	ldrh	r3, [r3, #0]
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010d5c:	687a      	ldr	r2, [r7, #4]
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	441a      	add	r2, r3
 8010d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4413      	add	r3, r2
 8010d86:	881b      	ldrh	r3, [r3, #0]
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d92:	847b      	strh	r3, [r7, #34]	; 0x22
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	441a      	add	r2, r3
 8010d9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010db4:	2300      	movs	r3, #0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3734      	adds	r7, #52	; 0x34
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr

08010dc2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b0c2      	sub	sp, #264	; 0x108
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dd0:	6018      	str	r0, [r3, #0]
 8010dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dda:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	785b      	ldrb	r3, [r3, #1]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	f040 867b 	bne.w	8011ae4 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	699a      	ldr	r2, [r3, #24]
 8010dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	691b      	ldr	r3, [r3, #16]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d908      	bls.n	8010e1c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	691b      	ldr	r3, [r3, #16]
 8010e16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010e1a:	e007      	b.n	8010e2c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	699b      	ldr	r3, [r3, #24]
 8010e28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	7b1b      	ldrb	r3, [r3, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d13a      	bne.n	8010eb2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6959      	ldr	r1, [r3, #20]
 8010e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	88da      	ldrh	r2, [r3, #6]
 8010e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010e5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010e62:	6800      	ldr	r0, [r0, #0]
 8010e64:	f001 fc11 	bl	801268a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	613b      	str	r3, [r7, #16]
 8010e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	461a      	mov	r2, r3
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	4413      	add	r3, r2
 8010e8a:	613b      	str	r3, [r7, #16]
 8010e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	011a      	lsls	r2, r3, #4
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010ea2:	60fb      	str	r3, [r7, #12]
 8010ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	801a      	strh	r2, [r3, #0]
 8010eae:	f000 bde3 	b.w	8011a78 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	78db      	ldrb	r3, [r3, #3]
 8010ebe:	2b02      	cmp	r3, #2
 8010ec0:	f040 843a 	bne.w	8011738 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	6a1a      	ldr	r2, [r3, #32]
 8010ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	f240 83b7 	bls.w	8011650 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	4413      	add	r3, r2
 8010efc:	881b      	ldrh	r3, [r3, #0]
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	441a      	add	r2, r3
 8010f26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	6a1a      	ldr	r2, [r3, #32]
 8010f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f4e:	1ad2      	subs	r2, r2, r3
 8010f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	881b      	ldrh	r3, [r3, #0]
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 81b3 	beq.w	80112ea <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8010f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	785b      	ldrb	r3, [r3, #1]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d16d      	bne.n	801107c <USB_EPStartXfer+0x2ba>
 8010fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc0:	4413      	add	r3, r2
 8010fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	011a      	lsls	r2, r3, #4
 8010fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd4:	4413      	add	r3, r2
 8010fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010fda:	627b      	str	r3, [r7, #36]	; 0x24
 8010fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d112      	bne.n	801100a <USB_EPStartXfer+0x248>
 8010fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010fee:	b29a      	uxth	r2, r3
 8010ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff2:	801a      	strh	r2, [r3, #0]
 8010ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff6:	881b      	ldrh	r3, [r3, #0]
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011002:	b29a      	uxth	r2, r3
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	801a      	strh	r2, [r3, #0]
 8011008:	e05d      	b.n	80110c6 <USB_EPStartXfer+0x304>
 801100a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801100e:	2b3e      	cmp	r3, #62	; 0x3e
 8011010:	d817      	bhi.n	8011042 <USB_EPStartXfer+0x280>
 8011012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011016:	085b      	lsrs	r3, r3, #1
 8011018:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801101c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011020:	f003 0301 	and.w	r3, r3, #1
 8011024:	2b00      	cmp	r3, #0
 8011026:	d004      	beq.n	8011032 <USB_EPStartXfer+0x270>
 8011028:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801102c:	3301      	adds	r3, #1
 801102e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011032:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011036:	b29b      	uxth	r3, r3
 8011038:	029b      	lsls	r3, r3, #10
 801103a:	b29a      	uxth	r2, r3
 801103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103e:	801a      	strh	r2, [r3, #0]
 8011040:	e041      	b.n	80110c6 <USB_EPStartXfer+0x304>
 8011042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011046:	095b      	lsrs	r3, r3, #5
 8011048:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801104c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011050:	f003 031f 	and.w	r3, r3, #31
 8011054:	2b00      	cmp	r3, #0
 8011056:	d104      	bne.n	8011062 <USB_EPStartXfer+0x2a0>
 8011058:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801105c:	3b01      	subs	r3, #1
 801105e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011062:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011066:	b29b      	uxth	r3, r3
 8011068:	029b      	lsls	r3, r3, #10
 801106a:	b29b      	uxth	r3, r3
 801106c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011074:	b29a      	uxth	r2, r3
 8011076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011078:	801a      	strh	r2, [r3, #0]
 801107a:	e024      	b.n	80110c6 <USB_EPStartXfer+0x304>
 801107c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	785b      	ldrb	r3, [r3, #1]
 8011088:	2b01      	cmp	r3, #1
 801108a:	d11c      	bne.n	80110c6 <USB_EPStartXfer+0x304>
 801108c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801109a:	b29b      	uxth	r3, r3
 801109c:	461a      	mov	r2, r3
 801109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a0:	4413      	add	r3, r2
 80110a2:	633b      	str	r3, [r7, #48]	; 0x30
 80110a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	011a      	lsls	r2, r3, #4
 80110b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b4:	4413      	add	r3, r2
 80110b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80110ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80110c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	895b      	ldrh	r3, [r3, #10]
 80110d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80110d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6959      	ldr	r1, [r3, #20]
 80110e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80110ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80110f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80110f4:	6800      	ldr	r0, [r0, #0]
 80110f6:	f001 fac8 	bl	801268a <USB_WritePMA>
            ep->xfer_buff += len;
 80110fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	695a      	ldr	r2, [r3, #20]
 8011106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801110a:	441a      	add	r2, r3
 801110c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801111c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	6a1a      	ldr	r2, [r3, #32]
 8011124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	691b      	ldr	r3, [r3, #16]
 8011130:	429a      	cmp	r2, r3
 8011132:	d90f      	bls.n	8011154 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	6a1a      	ldr	r2, [r3, #32]
 8011140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011144:	1ad2      	subs	r2, r2, r3
 8011146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801114a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	621a      	str	r2, [r3, #32]
 8011152:	e00e      	b.n	8011172 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8011154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	6a1b      	ldr	r3, [r3, #32]
 8011160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2200      	movs	r2, #0
 8011170:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	785b      	ldrb	r3, [r3, #1]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d16d      	bne.n	801125e <USB_EPStartXfer+0x49c>
 8011182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	61bb      	str	r3, [r7, #24]
 801118e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801119c:	b29b      	uxth	r3, r3
 801119e:	461a      	mov	r2, r3
 80111a0:	69bb      	ldr	r3, [r7, #24]
 80111a2:	4413      	add	r3, r2
 80111a4:	61bb      	str	r3, [r7, #24]
 80111a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	011a      	lsls	r2, r3, #4
 80111b4:	69bb      	ldr	r3, [r7, #24]
 80111b6:	4413      	add	r3, r2
 80111b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80111bc:	617b      	str	r3, [r7, #20]
 80111be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d112      	bne.n	80111ec <USB_EPStartXfer+0x42a>
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	801a      	strh	r2, [r3, #0]
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	b29b      	uxth	r3, r3
 80111dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	801a      	strh	r2, [r3, #0]
 80111ea:	e063      	b.n	80112b4 <USB_EPStartXfer+0x4f2>
 80111ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111f0:	2b3e      	cmp	r3, #62	; 0x3e
 80111f2:	d817      	bhi.n	8011224 <USB_EPStartXfer+0x462>
 80111f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111f8:	085b      	lsrs	r3, r3, #1
 80111fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80111fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011202:	f003 0301 	and.w	r3, r3, #1
 8011206:	2b00      	cmp	r3, #0
 8011208:	d004      	beq.n	8011214 <USB_EPStartXfer+0x452>
 801120a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801120e:	3301      	adds	r3, #1
 8011210:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011218:	b29b      	uxth	r3, r3
 801121a:	029b      	lsls	r3, r3, #10
 801121c:	b29a      	uxth	r2, r3
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	801a      	strh	r2, [r3, #0]
 8011222:	e047      	b.n	80112b4 <USB_EPStartXfer+0x4f2>
 8011224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011228:	095b      	lsrs	r3, r3, #5
 801122a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801122e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011232:	f003 031f 	and.w	r3, r3, #31
 8011236:	2b00      	cmp	r3, #0
 8011238:	d104      	bne.n	8011244 <USB_EPStartXfer+0x482>
 801123a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801123e:	3b01      	subs	r3, #1
 8011240:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011248:	b29b      	uxth	r3, r3
 801124a:	029b      	lsls	r3, r3, #10
 801124c:	b29b      	uxth	r3, r3
 801124e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011256:	b29a      	uxth	r2, r3
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	801a      	strh	r2, [r3, #0]
 801125c:	e02a      	b.n	80112b4 <USB_EPStartXfer+0x4f2>
 801125e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	785b      	ldrb	r3, [r3, #1]
 801126a:	2b01      	cmp	r3, #1
 801126c:	d122      	bne.n	80112b4 <USB_EPStartXfer+0x4f2>
 801126e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	623b      	str	r3, [r7, #32]
 801127a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801127e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011288:	b29b      	uxth	r3, r3
 801128a:	461a      	mov	r2, r3
 801128c:	6a3b      	ldr	r3, [r7, #32]
 801128e:	4413      	add	r3, r2
 8011290:	623b      	str	r3, [r7, #32]
 8011292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	011a      	lsls	r2, r3, #4
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	4413      	add	r3, r2
 80112a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80112a8:	61fb      	str	r3, [r7, #28]
 80112aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112ae:	b29a      	uxth	r2, r3
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80112b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	891b      	ldrh	r3, [r3, #8]
 80112c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80112c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	6959      	ldr	r1, [r3, #20]
 80112d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80112da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80112de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112e2:	6800      	ldr	r0, [r0, #0]
 80112e4:	f001 f9d1 	bl	801268a <USB_WritePMA>
 80112e8:	e3c6      	b.n	8011a78 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80112ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	785b      	ldrb	r3, [r3, #1]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d16d      	bne.n	80113d6 <USB_EPStartXfer+0x614>
 80112fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	64bb      	str	r3, [r7, #72]	; 0x48
 8011306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801130a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011314:	b29b      	uxth	r3, r3
 8011316:	461a      	mov	r2, r3
 8011318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801131a:	4413      	add	r3, r2
 801131c:	64bb      	str	r3, [r7, #72]	; 0x48
 801131e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	011a      	lsls	r2, r3, #4
 801132c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801132e:	4413      	add	r3, r2
 8011330:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011334:	647b      	str	r3, [r7, #68]	; 0x44
 8011336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801133a:	2b00      	cmp	r3, #0
 801133c:	d112      	bne.n	8011364 <USB_EPStartXfer+0x5a2>
 801133e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	b29b      	uxth	r3, r3
 8011344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011348:	b29a      	uxth	r2, r3
 801134a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801134c:	801a      	strh	r2, [r3, #0]
 801134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	b29b      	uxth	r3, r3
 8011354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801135c:	b29a      	uxth	r2, r3
 801135e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011360:	801a      	strh	r2, [r3, #0]
 8011362:	e063      	b.n	801142c <USB_EPStartXfer+0x66a>
 8011364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011368:	2b3e      	cmp	r3, #62	; 0x3e
 801136a:	d817      	bhi.n	801139c <USB_EPStartXfer+0x5da>
 801136c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011370:	085b      	lsrs	r3, r3, #1
 8011372:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801137a:	f003 0301 	and.w	r3, r3, #1
 801137e:	2b00      	cmp	r3, #0
 8011380:	d004      	beq.n	801138c <USB_EPStartXfer+0x5ca>
 8011382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011386:	3301      	adds	r3, #1
 8011388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801138c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011390:	b29b      	uxth	r3, r3
 8011392:	029b      	lsls	r3, r3, #10
 8011394:	b29a      	uxth	r2, r3
 8011396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011398:	801a      	strh	r2, [r3, #0]
 801139a:	e047      	b.n	801142c <USB_EPStartXfer+0x66a>
 801139c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113a0:	095b      	lsrs	r3, r3, #5
 80113a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80113a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113aa:	f003 031f 	and.w	r3, r3, #31
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d104      	bne.n	80113bc <USB_EPStartXfer+0x5fa>
 80113b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80113b6:	3b01      	subs	r3, #1
 80113b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80113bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	029b      	lsls	r3, r3, #10
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113d2:	801a      	strh	r2, [r3, #0]
 80113d4:	e02a      	b.n	801142c <USB_EPStartXfer+0x66a>
 80113d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	785b      	ldrb	r3, [r3, #1]
 80113e2:	2b01      	cmp	r3, #1
 80113e4:	d122      	bne.n	801142c <USB_EPStartXfer+0x66a>
 80113e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	653b      	str	r3, [r7, #80]	; 0x50
 80113f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011400:	b29b      	uxth	r3, r3
 8011402:	461a      	mov	r2, r3
 8011404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011406:	4413      	add	r3, r2
 8011408:	653b      	str	r3, [r7, #80]	; 0x50
 801140a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801140e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	011a      	lsls	r2, r3, #4
 8011418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801141a:	4413      	add	r3, r2
 801141c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011426:	b29a      	uxth	r2, r3
 8011428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801142a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801142c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	891b      	ldrh	r3, [r3, #8]
 8011438:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801143c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6959      	ldr	r1, [r3, #20]
 8011448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801144c:	b29b      	uxth	r3, r3
 801144e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011452:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011456:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801145a:	6800      	ldr	r0, [r0, #0]
 801145c:	f001 f915 	bl	801268a <USB_WritePMA>
            ep->xfer_buff += len;
 8011460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	695a      	ldr	r2, [r3, #20]
 801146c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011470:	441a      	add	r2, r3
 8011472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801147e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	6a1a      	ldr	r2, [r3, #32]
 801148a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801148e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	691b      	ldr	r3, [r3, #16]
 8011496:	429a      	cmp	r2, r3
 8011498:	d90f      	bls.n	80114ba <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 801149a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801149e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6a1a      	ldr	r2, [r3, #32]
 80114a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114aa:	1ad2      	subs	r2, r2, r3
 80114ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	621a      	str	r2, [r3, #32]
 80114b8:	e00e      	b.n	80114d8 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80114ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	6a1b      	ldr	r3, [r3, #32]
 80114c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80114ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2200      	movs	r2, #0
 80114d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80114d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	643b      	str	r3, [r7, #64]	; 0x40
 80114e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	785b      	ldrb	r3, [r3, #1]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d16d      	bne.n	80115d0 <USB_EPStartXfer+0x80e>
 80114f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8011500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801150e:	b29b      	uxth	r3, r3
 8011510:	461a      	mov	r2, r3
 8011512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011514:	4413      	add	r3, r2
 8011516:	63bb      	str	r3, [r7, #56]	; 0x38
 8011518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801151c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	011a      	lsls	r2, r3, #4
 8011526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011528:	4413      	add	r3, r2
 801152a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801152e:	637b      	str	r3, [r7, #52]	; 0x34
 8011530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011534:	2b00      	cmp	r3, #0
 8011536:	d112      	bne.n	801155e <USB_EPStartXfer+0x79c>
 8011538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801153a:	881b      	ldrh	r3, [r3, #0]
 801153c:	b29b      	uxth	r3, r3
 801153e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011542:	b29a      	uxth	r2, r3
 8011544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011546:	801a      	strh	r2, [r3, #0]
 8011548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801154a:	881b      	ldrh	r3, [r3, #0]
 801154c:	b29b      	uxth	r3, r3
 801154e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011556:	b29a      	uxth	r2, r3
 8011558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801155a:	801a      	strh	r2, [r3, #0]
 801155c:	e05d      	b.n	801161a <USB_EPStartXfer+0x858>
 801155e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011562:	2b3e      	cmp	r3, #62	; 0x3e
 8011564:	d817      	bhi.n	8011596 <USB_EPStartXfer+0x7d4>
 8011566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801156a:	085b      	lsrs	r3, r3, #1
 801156c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011574:	f003 0301 	and.w	r3, r3, #1
 8011578:	2b00      	cmp	r3, #0
 801157a:	d004      	beq.n	8011586 <USB_EPStartXfer+0x7c4>
 801157c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011580:	3301      	adds	r3, #1
 8011582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801158a:	b29b      	uxth	r3, r3
 801158c:	029b      	lsls	r3, r3, #10
 801158e:	b29a      	uxth	r2, r3
 8011590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011592:	801a      	strh	r2, [r3, #0]
 8011594:	e041      	b.n	801161a <USB_EPStartXfer+0x858>
 8011596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801159a:	095b      	lsrs	r3, r3, #5
 801159c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80115a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115a4:	f003 031f 	and.w	r3, r3, #31
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d104      	bne.n	80115b6 <USB_EPStartXfer+0x7f4>
 80115ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115b0:	3b01      	subs	r3, #1
 80115b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80115b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	029b      	lsls	r3, r3, #10
 80115be:	b29b      	uxth	r3, r3
 80115c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115cc:	801a      	strh	r2, [r3, #0]
 80115ce:	e024      	b.n	801161a <USB_EPStartXfer+0x858>
 80115d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	785b      	ldrb	r3, [r3, #1]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d11c      	bne.n	801161a <USB_EPStartXfer+0x858>
 80115e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	461a      	mov	r2, r3
 80115f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115f4:	4413      	add	r3, r2
 80115f6:	643b      	str	r3, [r7, #64]	; 0x40
 80115f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	011a      	lsls	r2, r3, #4
 8011606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011608:	4413      	add	r3, r2
 801160a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801160e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011614:	b29a      	uxth	r2, r3
 8011616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011618:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801161a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801161e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	895b      	ldrh	r3, [r3, #10]
 8011626:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801162a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801162e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	6959      	ldr	r1, [r3, #20]
 8011636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801163a:	b29b      	uxth	r3, r3
 801163c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011640:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011644:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011648:	6800      	ldr	r0, [r0, #0]
 801164a:	f001 f81e 	bl	801268a <USB_WritePMA>
 801164e:	e213      	b.n	8011a78 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	6a1b      	ldr	r3, [r3, #32]
 801165c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801166e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	881b      	ldrh	r3, [r3, #0]
 801167c:	b29b      	uxth	r3, r3
 801167e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011686:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801168a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	441a      	add	r2, r3
 80116a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80116a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80116bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	461a      	mov	r2, r3
 80116da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116dc:	4413      	add	r3, r2
 80116de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	011a      	lsls	r2, r3, #4
 80116ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116f0:	4413      	add	r3, r2
 80116f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80116f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80116f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116fc:	b29a      	uxth	r2, r3
 80116fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011700:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	891b      	ldrh	r3, [r3, #8]
 801170e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	6959      	ldr	r1, [r3, #20]
 801171e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011722:	b29b      	uxth	r3, r3
 8011724:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011728:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801172c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011730:	6800      	ldr	r0, [r0, #0]
 8011732:	f000 ffaa 	bl	801268a <USB_WritePMA>
 8011736:	e19f      	b.n	8011a78 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801173c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	6a1a      	ldr	r2, [r3, #32]
 8011744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011748:	1ad2      	subs	r2, r2, r3
 801174a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801175a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	4413      	add	r3, r2
 8011770:	881b      	ldrh	r3, [r3, #0]
 8011772:	b29b      	uxth	r3, r3
 8011774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011778:	2b00      	cmp	r3, #0
 801177a:	f000 80bc 	beq.w	80118f6 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801177e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	673b      	str	r3, [r7, #112]	; 0x70
 801178a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801178e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	785b      	ldrb	r3, [r3, #1]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d16d      	bne.n	8011876 <USB_EPStartXfer+0xab4>
 801179a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801179e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80117a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	461a      	mov	r2, r3
 80117b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117ba:	4413      	add	r3, r2
 80117bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80117be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	011a      	lsls	r2, r3, #4
 80117cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117ce:	4413      	add	r3, r2
 80117d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80117d4:	667b      	str	r3, [r7, #100]	; 0x64
 80117d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d112      	bne.n	8011804 <USB_EPStartXfer+0xa42>
 80117de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117e0:	881b      	ldrh	r3, [r3, #0]
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117ec:	801a      	strh	r2, [r3, #0]
 80117ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011800:	801a      	strh	r2, [r3, #0]
 8011802:	e05d      	b.n	80118c0 <USB_EPStartXfer+0xafe>
 8011804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011808:	2b3e      	cmp	r3, #62	; 0x3e
 801180a:	d817      	bhi.n	801183c <USB_EPStartXfer+0xa7a>
 801180c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011810:	085b      	lsrs	r3, r3, #1
 8011812:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801181a:	f003 0301 	and.w	r3, r3, #1
 801181e:	2b00      	cmp	r3, #0
 8011820:	d004      	beq.n	801182c <USB_EPStartXfer+0xa6a>
 8011822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011826:	3301      	adds	r3, #1
 8011828:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801182c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011830:	b29b      	uxth	r3, r3
 8011832:	029b      	lsls	r3, r3, #10
 8011834:	b29a      	uxth	r2, r3
 8011836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011838:	801a      	strh	r2, [r3, #0]
 801183a:	e041      	b.n	80118c0 <USB_EPStartXfer+0xafe>
 801183c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011840:	095b      	lsrs	r3, r3, #5
 8011842:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801184a:	f003 031f 	and.w	r3, r3, #31
 801184e:	2b00      	cmp	r3, #0
 8011850:	d104      	bne.n	801185c <USB_EPStartXfer+0xa9a>
 8011852:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011856:	3b01      	subs	r3, #1
 8011858:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801185c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011860:	b29b      	uxth	r3, r3
 8011862:	029b      	lsls	r3, r3, #10
 8011864:	b29b      	uxth	r3, r3
 8011866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801186a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801186e:	b29a      	uxth	r2, r3
 8011870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011872:	801a      	strh	r2, [r3, #0]
 8011874:	e024      	b.n	80118c0 <USB_EPStartXfer+0xafe>
 8011876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801187a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	785b      	ldrb	r3, [r3, #1]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d11c      	bne.n	80118c0 <USB_EPStartXfer+0xafe>
 8011886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801188a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011894:	b29b      	uxth	r3, r3
 8011896:	461a      	mov	r2, r3
 8011898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801189a:	4413      	add	r3, r2
 801189c:	673b      	str	r3, [r7, #112]	; 0x70
 801189e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	011a      	lsls	r2, r3, #4
 80118ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80118ae:	4413      	add	r3, r2
 80118b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80118b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80118b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118ba:	b29a      	uxth	r2, r3
 80118bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80118be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80118c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	895b      	ldrh	r3, [r3, #10]
 80118cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80118d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	6959      	ldr	r1, [r3, #20]
 80118dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80118e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80118ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80118ee:	6800      	ldr	r0, [r0, #0]
 80118f0:	f000 fecb 	bl	801268a <USB_WritePMA>
 80118f4:	e0c0      	b.n	8011a78 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80118f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	785b      	ldrb	r3, [r3, #1]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d16d      	bne.n	80119e2 <USB_EPStartXfer+0xc20>
 8011906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801190a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011920:	b29b      	uxth	r3, r3
 8011922:	461a      	mov	r2, r3
 8011924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011926:	4413      	add	r3, r2
 8011928:	67fb      	str	r3, [r7, #124]	; 0x7c
 801192a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801192e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	011a      	lsls	r2, r3, #4
 8011938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801193a:	4413      	add	r3, r2
 801193c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011940:	67bb      	str	r3, [r7, #120]	; 0x78
 8011942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011946:	2b00      	cmp	r3, #0
 8011948:	d112      	bne.n	8011970 <USB_EPStartXfer+0xbae>
 801194a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	b29b      	uxth	r3, r3
 8011950:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011954:	b29a      	uxth	r2, r3
 8011956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011958:	801a      	strh	r2, [r3, #0]
 801195a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801195c:	881b      	ldrh	r3, [r3, #0]
 801195e:	b29b      	uxth	r3, r3
 8011960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011968:	b29a      	uxth	r2, r3
 801196a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801196c:	801a      	strh	r2, [r3, #0]
 801196e:	e069      	b.n	8011a44 <USB_EPStartXfer+0xc82>
 8011970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011974:	2b3e      	cmp	r3, #62	; 0x3e
 8011976:	d817      	bhi.n	80119a8 <USB_EPStartXfer+0xbe6>
 8011978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801197c:	085b      	lsrs	r3, r3, #1
 801197e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011986:	f003 0301 	and.w	r3, r3, #1
 801198a:	2b00      	cmp	r3, #0
 801198c:	d004      	beq.n	8011998 <USB_EPStartXfer+0xbd6>
 801198e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011992:	3301      	adds	r3, #1
 8011994:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801199c:	b29b      	uxth	r3, r3
 801199e:	029b      	lsls	r3, r3, #10
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80119a4:	801a      	strh	r2, [r3, #0]
 80119a6:	e04d      	b.n	8011a44 <USB_EPStartXfer+0xc82>
 80119a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119ac:	095b      	lsrs	r3, r3, #5
 80119ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80119b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119b6:	f003 031f 	and.w	r3, r3, #31
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d104      	bne.n	80119c8 <USB_EPStartXfer+0xc06>
 80119be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80119c2:	3b01      	subs	r3, #1
 80119c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80119c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	029b      	lsls	r3, r3, #10
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119da:	b29a      	uxth	r2, r3
 80119dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80119de:	801a      	strh	r2, [r3, #0]
 80119e0:	e030      	b.n	8011a44 <USB_EPStartXfer+0xc82>
 80119e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	785b      	ldrb	r3, [r3, #1]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d128      	bne.n	8011a44 <USB_EPStartXfer+0xc82>
 80119f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	461a      	mov	r2, r3
 8011a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a16:	4413      	add	r3, r2
 8011a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	011a      	lsls	r2, r3, #4
 8011a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011a2e:	4413      	add	r3, r2
 8011a30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	891b      	ldrh	r3, [r3, #8]
 8011a50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	6959      	ldr	r1, [r3, #20]
 8011a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011a6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011a6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011a72:	6800      	ldr	r0, [r0, #0]
 8011a74:	f000 fe09 	bl	801268a <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	881b      	ldrh	r3, [r3, #0]
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a9e:	817b      	strh	r3, [r7, #10]
 8011aa0:	897b      	ldrh	r3, [r7, #10]
 8011aa2:	f083 0310 	eor.w	r3, r3, #16
 8011aa6:	817b      	strh	r3, [r7, #10]
 8011aa8:	897b      	ldrh	r3, [r7, #10]
 8011aaa:	f083 0320 	eor.w	r3, r3, #32
 8011aae:	817b      	strh	r3, [r7, #10]
 8011ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	441a      	add	r2, r3
 8011aca:	897b      	ldrh	r3, [r7, #10]
 8011acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	8013      	strh	r3, [r2, #0]
 8011ae0:	f000 bc9f 	b.w	8012422 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	7b1b      	ldrb	r3, [r3, #12]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f040 80ae 	bne.w	8011c52 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	699a      	ldr	r2, [r3, #24]
 8011b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	691b      	ldr	r3, [r3, #16]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d917      	bls.n	8011b42 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8011b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	691b      	ldr	r3, [r3, #16]
 8011b1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	699a      	ldr	r2, [r3, #24]
 8011b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b32:	1ad2      	subs	r2, r2, r3
 8011b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	619a      	str	r2, [r3, #24]
 8011b40:	e00e      	b.n	8011b60 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8011b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	699b      	ldr	r3, [r3, #24]
 8011b4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8011b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	461a      	mov	r2, r3
 8011b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011b84:	4413      	add	r3, r2
 8011b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	011a      	lsls	r2, r3, #4
 8011b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011b9c:	4413      	add	r3, r2
 8011b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d116      	bne.n	8011bdc <USB_EPStartXfer+0xe1a>
 8011bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011bc0:	801a      	strh	r2, [r3, #0]
 8011bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011bd8:	801a      	strh	r2, [r3, #0]
 8011bda:	e3e8      	b.n	80123ae <USB_EPStartXfer+0x15ec>
 8011bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011be0:	2b3e      	cmp	r3, #62	; 0x3e
 8011be2:	d818      	bhi.n	8011c16 <USB_EPStartXfer+0xe54>
 8011be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011be8:	085b      	lsrs	r3, r3, #1
 8011bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bf2:	f003 0301 	and.w	r3, r3, #1
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d004      	beq.n	8011c04 <USB_EPStartXfer+0xe42>
 8011bfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011bfe:	3301      	adds	r3, #1
 8011c00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011c04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	029b      	lsls	r3, r3, #10
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c12:	801a      	strh	r2, [r3, #0]
 8011c14:	e3cb      	b.n	80123ae <USB_EPStartXfer+0x15ec>
 8011c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c1a:	095b      	lsrs	r3, r3, #5
 8011c1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c24:	f003 031f 	and.w	r3, r3, #31
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d104      	bne.n	8011c36 <USB_EPStartXfer+0xe74>
 8011c2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011c30:	3b01      	subs	r3, #1
 8011c32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011c36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	029b      	lsls	r3, r3, #10
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c4e:	801a      	strh	r2, [r3, #0]
 8011c50:	e3ad      	b.n	80123ae <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	78db      	ldrb	r3, [r3, #3]
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	f040 8200 	bne.w	8012064 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	785b      	ldrb	r3, [r3, #1]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f040 8091 	bne.w	8011d98 <USB_EPStartXfer+0xfd6>
 8011c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	461a      	mov	r2, r3
 8011c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011c9a:	4413      	add	r3, r2
 8011c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	781b      	ldrb	r3, [r3, #0]
 8011cac:	011a      	lsls	r2, r3, #4
 8011cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011cb2:	4413      	add	r3, r2
 8011cb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	691b      	ldr	r3, [r3, #16]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d116      	bne.n	8011cfa <USB_EPStartXfer+0xf38>
 8011ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011cde:	801a      	strh	r2, [r3, #0]
 8011ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ce4:	881b      	ldrh	r3, [r3, #0]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011cf0:	b29a      	uxth	r2, r3
 8011cf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011cf6:	801a      	strh	r2, [r3, #0]
 8011cf8:	e083      	b.n	8011e02 <USB_EPStartXfer+0x1040>
 8011cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	691b      	ldr	r3, [r3, #16]
 8011d06:	2b3e      	cmp	r3, #62	; 0x3e
 8011d08:	d820      	bhi.n	8011d4c <USB_EPStartXfer+0xf8a>
 8011d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	691b      	ldr	r3, [r3, #16]
 8011d16:	085b      	lsrs	r3, r3, #1
 8011d18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	691b      	ldr	r3, [r3, #16]
 8011d28:	f003 0301 	and.w	r3, r3, #1
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d004      	beq.n	8011d3a <USB_EPStartXfer+0xf78>
 8011d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d34:	3301      	adds	r3, #1
 8011d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	029b      	lsls	r3, r3, #10
 8011d42:	b29a      	uxth	r2, r3
 8011d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011d48:	801a      	strh	r2, [r3, #0]
 8011d4a:	e05a      	b.n	8011e02 <USB_EPStartXfer+0x1040>
 8011d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	095b      	lsrs	r3, r3, #5
 8011d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	691b      	ldr	r3, [r3, #16]
 8011d6a:	f003 031f 	and.w	r3, r3, #31
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d104      	bne.n	8011d7c <USB_EPStartXfer+0xfba>
 8011d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d76:	3b01      	subs	r3, #1
 8011d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	029b      	lsls	r3, r3, #10
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011d94:	801a      	strh	r2, [r3, #0]
 8011d96:	e034      	b.n	8011e02 <USB_EPStartXfer+0x1040>
 8011d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	785b      	ldrb	r3, [r3, #1]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d12c      	bne.n	8011e02 <USB_EPStartXfer+0x1040>
 8011da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011dcc:	4413      	add	r3, r2
 8011dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	011a      	lsls	r2, r3, #4
 8011de0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011de4:	4413      	add	r3, r2
 8011de6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	691b      	ldr	r3, [r3, #16]
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011e00:	801a      	strh	r2, [r3, #0]
 8011e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	785b      	ldrb	r3, [r3, #1]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	f040 8091 	bne.w	8011f44 <USB_EPStartXfer+0x1182>
 8011e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	461a      	mov	r2, r3
 8011e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e46:	4413      	add	r3, r2
 8011e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	011a      	lsls	r2, r3, #4
 8011e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e5e:	4413      	add	r3, r2
 8011e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	691b      	ldr	r3, [r3, #16]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d116      	bne.n	8011ea6 <USB_EPStartXfer+0x10e4>
 8011e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e8a:	801a      	strh	r2, [r3, #0]
 8011e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e9c:	b29a      	uxth	r2, r3
 8011e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ea2:	801a      	strh	r2, [r3, #0]
 8011ea4:	e07c      	b.n	8011fa0 <USB_EPStartXfer+0x11de>
 8011ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	691b      	ldr	r3, [r3, #16]
 8011eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8011eb4:	d820      	bhi.n	8011ef8 <USB_EPStartXfer+0x1136>
 8011eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	085b      	lsrs	r3, r3, #1
 8011ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	691b      	ldr	r3, [r3, #16]
 8011ed4:	f003 0301 	and.w	r3, r3, #1
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d004      	beq.n	8011ee6 <USB_EPStartXfer+0x1124>
 8011edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	029b      	lsls	r3, r3, #10
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ef4:	801a      	strh	r2, [r3, #0]
 8011ef6:	e053      	b.n	8011fa0 <USB_EPStartXfer+0x11de>
 8011ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	691b      	ldr	r3, [r3, #16]
 8011f04:	095b      	lsrs	r3, r3, #5
 8011f06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	f003 031f 	and.w	r3, r3, #31
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d104      	bne.n	8011f28 <USB_EPStartXfer+0x1166>
 8011f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011f22:	3b01      	subs	r3, #1
 8011f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	029b      	lsls	r3, r3, #10
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f40:	801a      	strh	r2, [r3, #0]
 8011f42:	e02d      	b.n	8011fa0 <USB_EPStartXfer+0x11de>
 8011f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	785b      	ldrb	r3, [r3, #1]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d125      	bne.n	8011fa0 <USB_EPStartXfer+0x11de>
 8011f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	461a      	mov	r2, r3
 8011f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	011a      	lsls	r2, r3, #4
 8011f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011f82:	4413      	add	r3, r2
 8011f84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	691b      	ldr	r3, [r3, #16]
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f9e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	69db      	ldr	r3, [r3, #28]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	f000 81fe 	beq.w	80123ae <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	4413      	add	r3, r2
 8011fcc:	881b      	ldrh	r3, [r3, #0]
 8011fce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011fd2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d005      	beq.n	8011fea <USB_EPStartXfer+0x1228>
 8011fde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d10d      	bne.n	8012006 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011fea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	f040 81db 	bne.w	80123ae <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011ff8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012000:	2b00      	cmp	r3, #0
 8012002:	f040 81d4 	bne.w	80123ae <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8012006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801200a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	4413      	add	r3, r2
 8012020:	881b      	ldrh	r3, [r3, #0]
 8012022:	b29b      	uxth	r3, r3
 8012024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801202c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801203e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	441a      	add	r2, r3
 801204a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801204e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801205a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801205e:	b29b      	uxth	r3, r3
 8012060:	8013      	strh	r3, [r2, #0]
 8012062:	e1a4      	b.n	80123ae <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	78db      	ldrb	r3, [r3, #3]
 8012070:	2b01      	cmp	r3, #1
 8012072:	f040 819a 	bne.w	80123aa <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801207a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	699a      	ldr	r2, [r3, #24]
 8012082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	691b      	ldr	r3, [r3, #16]
 801208e:	429a      	cmp	r2, r3
 8012090:	d917      	bls.n	80120c2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8012092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	691b      	ldr	r3, [r3, #16]
 801209e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80120a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	699a      	ldr	r2, [r3, #24]
 80120ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120b2:	1ad2      	subs	r2, r2, r3
 80120b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	619a      	str	r2, [r3, #24]
 80120c0:	e00e      	b.n	80120e0 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80120c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	699b      	ldr	r3, [r3, #24]
 80120ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80120d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2200      	movs	r2, #0
 80120de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80120e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	785b      	ldrb	r3, [r3, #1]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d178      	bne.n	80121e2 <USB_EPStartXfer+0x1420>
 80120f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80120fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801210c:	b29b      	uxth	r3, r3
 801210e:	461a      	mov	r2, r3
 8012110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012114:	4413      	add	r3, r2
 8012116:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801211a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801211e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	011a      	lsls	r2, r3, #4
 8012128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801212c:	4413      	add	r3, r2
 801212e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801213a:	2b00      	cmp	r3, #0
 801213c:	d116      	bne.n	801216c <USB_EPStartXfer+0x13aa>
 801213e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	b29b      	uxth	r3, r3
 8012146:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801214a:	b29a      	uxth	r2, r3
 801214c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012150:	801a      	strh	r2, [r3, #0]
 8012152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012156:	881b      	ldrh	r3, [r3, #0]
 8012158:	b29b      	uxth	r3, r3
 801215a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801215e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012162:	b29a      	uxth	r2, r3
 8012164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012168:	801a      	strh	r2, [r3, #0]
 801216a:	e06b      	b.n	8012244 <USB_EPStartXfer+0x1482>
 801216c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012170:	2b3e      	cmp	r3, #62	; 0x3e
 8012172:	d818      	bhi.n	80121a6 <USB_EPStartXfer+0x13e4>
 8012174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012178:	085b      	lsrs	r3, r3, #1
 801217a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801217e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012182:	f003 0301 	and.w	r3, r3, #1
 8012186:	2b00      	cmp	r3, #0
 8012188:	d004      	beq.n	8012194 <USB_EPStartXfer+0x13d2>
 801218a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801218e:	3301      	adds	r3, #1
 8012190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012198:	b29b      	uxth	r3, r3
 801219a:	029b      	lsls	r3, r3, #10
 801219c:	b29a      	uxth	r2, r3
 801219e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80121a2:	801a      	strh	r2, [r3, #0]
 80121a4:	e04e      	b.n	8012244 <USB_EPStartXfer+0x1482>
 80121a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121aa:	095b      	lsrs	r3, r3, #5
 80121ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80121b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121b4:	f003 031f 	and.w	r3, r3, #31
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d104      	bne.n	80121c6 <USB_EPStartXfer+0x1404>
 80121bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80121c0:	3b01      	subs	r3, #1
 80121c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80121c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	029b      	lsls	r3, r3, #10
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121d8:	b29a      	uxth	r2, r3
 80121da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80121de:	801a      	strh	r2, [r3, #0]
 80121e0:	e030      	b.n	8012244 <USB_EPStartXfer+0x1482>
 80121e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	785b      	ldrb	r3, [r3, #1]
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d128      	bne.n	8012244 <USB_EPStartXfer+0x1482>
 80121f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801220e:	b29b      	uxth	r3, r3
 8012210:	461a      	mov	r2, r3
 8012212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012216:	4413      	add	r3, r2
 8012218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801221c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	011a      	lsls	r2, r3, #4
 801222a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801222e:	4413      	add	r3, r2
 8012230:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801223c:	b29a      	uxth	r2, r3
 801223e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012242:	801a      	strh	r2, [r3, #0]
 8012244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	785b      	ldrb	r3, [r3, #1]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d178      	bne.n	8012354 <USB_EPStartXfer+0x1592>
 8012262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801227e:	b29b      	uxth	r3, r3
 8012280:	461a      	mov	r2, r3
 8012282:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012286:	4413      	add	r3, r2
 8012288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801228c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	011a      	lsls	r2, r3, #4
 801229a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801229e:	4413      	add	r3, r2
 80122a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80122a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80122a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d116      	bne.n	80122de <USB_EPStartXfer+0x151c>
 80122b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80122b4:	881b      	ldrh	r3, [r3, #0]
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80122bc:	b29a      	uxth	r2, r3
 80122be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80122c2:	801a      	strh	r2, [r3, #0]
 80122c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80122c8:	881b      	ldrh	r3, [r3, #0]
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80122d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80122da:	801a      	strh	r2, [r3, #0]
 80122dc:	e067      	b.n	80123ae <USB_EPStartXfer+0x15ec>
 80122de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122e2:	2b3e      	cmp	r3, #62	; 0x3e
 80122e4:	d818      	bhi.n	8012318 <USB_EPStartXfer+0x1556>
 80122e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122ea:	085b      	lsrs	r3, r3, #1
 80122ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80122f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122f4:	f003 0301 	and.w	r3, r3, #1
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d004      	beq.n	8012306 <USB_EPStartXfer+0x1544>
 80122fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012300:	3301      	adds	r3, #1
 8012302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801230a:	b29b      	uxth	r3, r3
 801230c:	029b      	lsls	r3, r3, #10
 801230e:	b29a      	uxth	r2, r3
 8012310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012314:	801a      	strh	r2, [r3, #0]
 8012316:	e04a      	b.n	80123ae <USB_EPStartXfer+0x15ec>
 8012318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801231c:	095b      	lsrs	r3, r3, #5
 801231e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012326:	f003 031f 	and.w	r3, r3, #31
 801232a:	2b00      	cmp	r3, #0
 801232c:	d104      	bne.n	8012338 <USB_EPStartXfer+0x1576>
 801232e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012332:	3b01      	subs	r3, #1
 8012334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801233c:	b29b      	uxth	r3, r3
 801233e:	029b      	lsls	r3, r3, #10
 8012340:	b29b      	uxth	r3, r3
 8012342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801234a:	b29a      	uxth	r2, r3
 801234c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012350:	801a      	strh	r2, [r3, #0]
 8012352:	e02c      	b.n	80123ae <USB_EPStartXfer+0x15ec>
 8012354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	785b      	ldrb	r3, [r3, #1]
 8012360:	2b01      	cmp	r3, #1
 8012362:	d124      	bne.n	80123ae <USB_EPStartXfer+0x15ec>
 8012364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012372:	b29b      	uxth	r3, r3
 8012374:	461a      	mov	r2, r3
 8012376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801237a:	4413      	add	r3, r2
 801237c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	011a      	lsls	r2, r3, #4
 801238e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012392:	4413      	add	r3, r2
 8012394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801239c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80123a6:	801a      	strh	r2, [r3, #0]
 80123a8:	e001      	b.n	80123ae <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80123aa:	2301      	movs	r3, #1
 80123ac:	e03a      	b.n	8012424 <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80123ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	4413      	add	r3, r2
 80123c8:	881b      	ldrh	r3, [r3, #0]
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80123d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80123d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80123dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80123e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80123e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80123e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80123ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80123f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123f8:	681a      	ldr	r2, [r3, #0]
 80123fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	441a      	add	r2, r3
 801240a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801240e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801241a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801241e:	b29b      	uxth	r3, r3
 8012420:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012422:	2300      	movs	r3, #0
}
 8012424:	4618      	mov	r0, r3
 8012426:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801242e:	b480      	push	{r7}
 8012430:	b085      	sub	sp, #20
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
 8012436:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	785b      	ldrb	r3, [r3, #1]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d020      	beq.n	8012482 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	009b      	lsls	r3, r3, #2
 8012448:	4413      	add	r3, r2
 801244a:	881b      	ldrh	r3, [r3, #0]
 801244c:	b29b      	uxth	r3, r3
 801244e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012456:	81bb      	strh	r3, [r7, #12]
 8012458:	89bb      	ldrh	r3, [r7, #12]
 801245a:	f083 0310 	eor.w	r3, r3, #16
 801245e:	81bb      	strh	r3, [r7, #12]
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	009b      	lsls	r3, r3, #2
 8012468:	441a      	add	r2, r3
 801246a:	89bb      	ldrh	r3, [r7, #12]
 801246c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801247c:	b29b      	uxth	r3, r3
 801247e:	8013      	strh	r3, [r2, #0]
 8012480:	e01f      	b.n	80124c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	4413      	add	r3, r2
 801248c:	881b      	ldrh	r3, [r3, #0]
 801248e:	b29b      	uxth	r3, r3
 8012490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012498:	81fb      	strh	r3, [r7, #14]
 801249a:	89fb      	ldrh	r3, [r7, #14]
 801249c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80124a0:	81fb      	strh	r3, [r7, #14]
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	441a      	add	r2, r3
 80124ac:	89fb      	ldrh	r3, [r7, #14]
 80124ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80124b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80124b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80124ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124be:	b29b      	uxth	r3, r3
 80124c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80124c2:	2300      	movs	r3, #0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3714      	adds	r7, #20
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b087      	sub	sp, #28
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	7b1b      	ldrb	r3, [r3, #12]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	f040 809d 	bne.w	801261e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	785b      	ldrb	r3, [r3, #1]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d04c      	beq.n	8012586 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	009b      	lsls	r3, r3, #2
 80124f4:	4413      	add	r3, r2
 80124f6:	881b      	ldrh	r3, [r3, #0]
 80124f8:	823b      	strh	r3, [r7, #16]
 80124fa:	8a3b      	ldrh	r3, [r7, #16]
 80124fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012500:	2b00      	cmp	r3, #0
 8012502:	d01b      	beq.n	801253c <USB_EPClearStall+0x6c>
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	4413      	add	r3, r2
 801250e:	881b      	ldrh	r3, [r3, #0]
 8012510:	b29b      	uxth	r3, r3
 8012512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801251a:	81fb      	strh	r3, [r7, #14]
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	441a      	add	r2, r3
 8012526:	89fb      	ldrh	r3, [r7, #14]
 8012528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801252c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012538:	b29b      	uxth	r3, r3
 801253a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	78db      	ldrb	r3, [r3, #3]
 8012540:	2b01      	cmp	r3, #1
 8012542:	d06c      	beq.n	801261e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	009b      	lsls	r3, r3, #2
 801254c:	4413      	add	r3, r2
 801254e:	881b      	ldrh	r3, [r3, #0]
 8012550:	b29b      	uxth	r3, r3
 8012552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801255a:	81bb      	strh	r3, [r7, #12]
 801255c:	89bb      	ldrh	r3, [r7, #12]
 801255e:	f083 0320 	eor.w	r3, r3, #32
 8012562:	81bb      	strh	r3, [r7, #12]
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	009b      	lsls	r3, r3, #2
 801256c:	441a      	add	r2, r3
 801256e:	89bb      	ldrh	r3, [r7, #12]
 8012570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801257c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012580:	b29b      	uxth	r3, r3
 8012582:	8013      	strh	r3, [r2, #0]
 8012584:	e04b      	b.n	801261e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	4413      	add	r3, r2
 8012590:	881b      	ldrh	r3, [r3, #0]
 8012592:	82fb      	strh	r3, [r7, #22]
 8012594:	8afb      	ldrh	r3, [r7, #22]
 8012596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801259a:	2b00      	cmp	r3, #0
 801259c:	d01b      	beq.n	80125d6 <USB_EPClearStall+0x106>
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80125b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125b4:	82bb      	strh	r3, [r7, #20]
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	009b      	lsls	r3, r3, #2
 80125be:	441a      	add	r2, r3
 80125c0:	8abb      	ldrh	r3, [r7, #20]
 80125c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80125c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80125ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80125ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	009b      	lsls	r3, r3, #2
 80125de:	4413      	add	r3, r2
 80125e0:	881b      	ldrh	r3, [r3, #0]
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80125e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125ec:	827b      	strh	r3, [r7, #18]
 80125ee:	8a7b      	ldrh	r3, [r7, #18]
 80125f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80125f4:	827b      	strh	r3, [r7, #18]
 80125f6:	8a7b      	ldrh	r3, [r7, #18]
 80125f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80125fc:	827b      	strh	r3, [r7, #18]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	009b      	lsls	r3, r3, #2
 8012606:	441a      	add	r2, r3
 8012608:	8a7b      	ldrh	r3, [r7, #18]
 801260a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801260e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801261a:	b29b      	uxth	r3, r3
 801261c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801261e:	2300      	movs	r3, #0
}
 8012620:	4618      	mov	r0, r3
 8012622:	371c      	adds	r7, #28
 8012624:	46bd      	mov	sp, r7
 8012626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262a:	4770      	bx	lr

0801262c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801262c:	b480      	push	{r7}
 801262e:	b083      	sub	sp, #12
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
 8012634:	460b      	mov	r3, r1
 8012636:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012638:	78fb      	ldrb	r3, [r7, #3]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d103      	bne.n	8012646 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2280      	movs	r2, #128	; 0x80
 8012642:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801265c:	2300      	movs	r3, #0
}
 801265e:	4618      	mov	r0, r3
 8012660:	370c      	adds	r7, #12
 8012662:	46bd      	mov	sp, r7
 8012664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012668:	4770      	bx	lr

0801266a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801266a:	b480      	push	{r7}
 801266c:	b085      	sub	sp, #20
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012678:	b29b      	uxth	r3, r3
 801267a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801267c:	68fb      	ldr	r3, [r7, #12]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3714      	adds	r7, #20
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr

0801268a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801268a:	b480      	push	{r7}
 801268c:	b08d      	sub	sp, #52	; 0x34
 801268e:	af00      	add	r7, sp, #0
 8012690:	60f8      	str	r0, [r7, #12]
 8012692:	60b9      	str	r1, [r7, #8]
 8012694:	4611      	mov	r1, r2
 8012696:	461a      	mov	r2, r3
 8012698:	460b      	mov	r3, r1
 801269a:	80fb      	strh	r3, [r7, #6]
 801269c:	4613      	mov	r3, r2
 801269e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80126a0:	88bb      	ldrh	r3, [r7, #4]
 80126a2:	3301      	adds	r3, #1
 80126a4:	085b      	lsrs	r3, r3, #1
 80126a6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80126b0:	88fb      	ldrh	r3, [r7, #6]
 80126b2:	005a      	lsls	r2, r3, #1
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	4413      	add	r3, r2
 80126b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80126be:	6a3b      	ldr	r3, [r7, #32]
 80126c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80126c2:	e01e      	b.n	8012702 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80126c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	3301      	adds	r3, #1
 80126ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80126d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	021b      	lsls	r3, r3, #8
 80126d8:	b29b      	uxth	r3, r3
 80126da:	461a      	mov	r2, r3
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	4313      	orrs	r3, r2
 80126e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80126ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ec:	3302      	adds	r3, #2
 80126ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80126f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f2:	3302      	adds	r3, #2
 80126f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80126f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f8:	3301      	adds	r3, #1
 80126fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	3b01      	subs	r3, #1
 8012700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	2b00      	cmp	r3, #0
 8012706:	d1dd      	bne.n	80126c4 <USB_WritePMA+0x3a>
  }
}
 8012708:	bf00      	nop
 801270a:	bf00      	nop
 801270c:	3734      	adds	r7, #52	; 0x34
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr

08012716 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012716:	b480      	push	{r7}
 8012718:	b08b      	sub	sp, #44	; 0x2c
 801271a:	af00      	add	r7, sp, #0
 801271c:	60f8      	str	r0, [r7, #12]
 801271e:	60b9      	str	r1, [r7, #8]
 8012720:	4611      	mov	r1, r2
 8012722:	461a      	mov	r2, r3
 8012724:	460b      	mov	r3, r1
 8012726:	80fb      	strh	r3, [r7, #6]
 8012728:	4613      	mov	r3, r2
 801272a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801272c:	88bb      	ldrh	r3, [r7, #4]
 801272e:	085b      	lsrs	r3, r3, #1
 8012730:	b29b      	uxth	r3, r3
 8012732:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801273c:	88fb      	ldrh	r3, [r7, #6]
 801273e:	005a      	lsls	r2, r3, #1
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	4413      	add	r3, r2
 8012744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012748:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	627b      	str	r3, [r7, #36]	; 0x24
 801274e:	e01b      	b.n	8012788 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8012750:	6a3b      	ldr	r3, [r7, #32]
 8012752:	881b      	ldrh	r3, [r3, #0]
 8012754:	b29b      	uxth	r3, r3
 8012756:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012758:	6a3b      	ldr	r3, [r7, #32]
 801275a:	3302      	adds	r3, #2
 801275c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	b2da      	uxtb	r2, r3
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	3301      	adds	r3, #1
 801276a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	0a1b      	lsrs	r3, r3, #8
 8012770:	b2da      	uxtb	r2, r3
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012776:	69fb      	ldr	r3, [r7, #28]
 8012778:	3301      	adds	r3, #1
 801277a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 801277c:	6a3b      	ldr	r3, [r7, #32]
 801277e:	3302      	adds	r3, #2
 8012780:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012784:	3b01      	subs	r3, #1
 8012786:	627b      	str	r3, [r7, #36]	; 0x24
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	2b00      	cmp	r3, #0
 801278c:	d1e0      	bne.n	8012750 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 801278e:	88bb      	ldrh	r3, [r7, #4]
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	b29b      	uxth	r3, r3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d007      	beq.n	80127aa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 801279a:	6a3b      	ldr	r3, [r7, #32]
 801279c:	881b      	ldrh	r3, [r3, #0]
 801279e:	b29b      	uxth	r3, r3
 80127a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	b2da      	uxtb	r2, r3
 80127a6:	69fb      	ldr	r3, [r7, #28]
 80127a8:	701a      	strb	r2, [r3, #0]
  }
}
 80127aa:	bf00      	nop
 80127ac:	372c      	adds	r7, #44	; 0x2c
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr

080127b6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b084      	sub	sp, #16
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	460b      	mov	r3, r1
 80127c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80127c2:	2300      	movs	r3, #0
 80127c4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	7c1b      	ldrb	r3, [r3, #16]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d115      	bne.n	80127fa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80127ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127d2:	2202      	movs	r2, #2
 80127d4:	2181      	movs	r1, #129	; 0x81
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f01b ffed 	bl	802e7b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2201      	movs	r2, #1
 80127e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80127e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127e6:	2202      	movs	r2, #2
 80127e8:	2101      	movs	r1, #1
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f01b ffe3 	bl	802e7b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2201      	movs	r2, #1
 80127f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80127f8:	e012      	b.n	8012820 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80127fa:	2340      	movs	r3, #64	; 0x40
 80127fc:	2202      	movs	r2, #2
 80127fe:	2181      	movs	r1, #129	; 0x81
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f01b ffd8 	bl	802e7b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2201      	movs	r2, #1
 801280a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801280c:	2340      	movs	r3, #64	; 0x40
 801280e:	2202      	movs	r2, #2
 8012810:	2101      	movs	r1, #1
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f01b ffcf 	bl	802e7b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2201      	movs	r2, #1
 801281c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012820:	2308      	movs	r3, #8
 8012822:	2203      	movs	r2, #3
 8012824:	2182      	movs	r1, #130	; 0x82
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f01b ffc5 	bl	802e7b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2201      	movs	r2, #1
 8012830:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012832:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012836:	f01c f8e7 	bl	802ea08 <USBD_static_malloc>
 801283a:	4602      	mov	r2, r0
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012848:	2b00      	cmp	r3, #0
 801284a:	d102      	bne.n	8012852 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 801284c:	2301      	movs	r3, #1
 801284e:	73fb      	strb	r3, [r7, #15]
 8012850:	e026      	b.n	80128a0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012858:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	2200      	movs	r2, #0
 8012868:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	2200      	movs	r2, #0
 8012870:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	7c1b      	ldrb	r3, [r3, #16]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d109      	bne.n	8012890 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012886:	2101      	movs	r1, #1
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f01c f886 	bl	802e99a <USBD_LL_PrepareReceive>
 801288e:	e007      	b.n	80128a0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012896:	2340      	movs	r3, #64	; 0x40
 8012898:	2101      	movs	r1, #1
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f01c f87d 	bl	802e99a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80128a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3710      	adds	r7, #16
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}

080128aa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80128aa:	b580      	push	{r7, lr}
 80128ac:	b084      	sub	sp, #16
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
 80128b2:	460b      	mov	r3, r1
 80128b4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80128b6:	2300      	movs	r3, #0
 80128b8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80128ba:	2181      	movs	r1, #129	; 0x81
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f01b ffa0 	bl	802e802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2200      	movs	r2, #0
 80128c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80128c8:	2101      	movs	r1, #1
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f01b ff99 	bl	802e802 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80128d8:	2182      	movs	r1, #130	; 0x82
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f01b ff91 	bl	802e802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d00e      	beq.n	801290e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012900:	4618      	mov	r0, r3
 8012902:	f01c f88f 	bl	802ea24 <USBD_static_free>
    pdev->pClassData = NULL;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012910:	4618      	mov	r0, r3
 8012912:	3710      	adds	r7, #16
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012928:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801292a:	2300      	movs	r3, #0
 801292c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801292e:	2300      	movs	r3, #0
 8012930:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8012932:	2300      	movs	r3, #0
 8012934:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801293e:	2b00      	cmp	r3, #0
 8012940:	d039      	beq.n	80129b6 <USBD_CDC_Setup+0x9e>
 8012942:	2b20      	cmp	r3, #32
 8012944:	d17f      	bne.n	8012a46 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	88db      	ldrh	r3, [r3, #6]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d029      	beq.n	80129a2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	b25b      	sxtb	r3, r3
 8012954:	2b00      	cmp	r3, #0
 8012956:	da11      	bge.n	801297c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801295e:	689b      	ldr	r3, [r3, #8]
 8012960:	683a      	ldr	r2, [r7, #0]
 8012962:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8012964:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012966:	683a      	ldr	r2, [r7, #0]
 8012968:	88d2      	ldrh	r2, [r2, #6]
 801296a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801296c:	6939      	ldr	r1, [r7, #16]
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	88db      	ldrh	r3, [r3, #6]
 8012972:	461a      	mov	r2, r3
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f001 fa14 	bl	8013da2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801297a:	e06b      	b.n	8012a54 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	785a      	ldrb	r2, [r3, #1]
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	88db      	ldrh	r3, [r3, #6]
 801298a:	b2da      	uxtb	r2, r3
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8012992:	6939      	ldr	r1, [r7, #16]
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	88db      	ldrh	r3, [r3, #6]
 8012998:	461a      	mov	r2, r3
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f001 fa2f 	bl	8013dfe <USBD_CtlPrepareRx>
      break;
 80129a0:	e058      	b.n	8012a54 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80129a8:	689b      	ldr	r3, [r3, #8]
 80129aa:	683a      	ldr	r2, [r7, #0]
 80129ac:	7850      	ldrb	r0, [r2, #1]
 80129ae:	2200      	movs	r2, #0
 80129b0:	6839      	ldr	r1, [r7, #0]
 80129b2:	4798      	blx	r3
      break;
 80129b4:	e04e      	b.n	8012a54 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	785b      	ldrb	r3, [r3, #1]
 80129ba:	2b0b      	cmp	r3, #11
 80129bc:	d02e      	beq.n	8012a1c <USBD_CDC_Setup+0x104>
 80129be:	2b0b      	cmp	r3, #11
 80129c0:	dc38      	bgt.n	8012a34 <USBD_CDC_Setup+0x11c>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d002      	beq.n	80129cc <USBD_CDC_Setup+0xb4>
 80129c6:	2b0a      	cmp	r3, #10
 80129c8:	d014      	beq.n	80129f4 <USBD_CDC_Setup+0xdc>
 80129ca:	e033      	b.n	8012a34 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129d2:	2b03      	cmp	r3, #3
 80129d4:	d107      	bne.n	80129e6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80129d6:	f107 030c 	add.w	r3, r7, #12
 80129da:	2202      	movs	r2, #2
 80129dc:	4619      	mov	r1, r3
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f001 f9df 	bl	8013da2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80129e4:	e02e      	b.n	8012a44 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80129e6:	6839      	ldr	r1, [r7, #0]
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f001 f96f 	bl	8013ccc <USBD_CtlError>
            ret = USBD_FAIL;
 80129ee:	2302      	movs	r3, #2
 80129f0:	75fb      	strb	r3, [r7, #23]
          break;
 80129f2:	e027      	b.n	8012a44 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129fa:	2b03      	cmp	r3, #3
 80129fc:	d107      	bne.n	8012a0e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80129fe:	f107 030f 	add.w	r3, r7, #15
 8012a02:	2201      	movs	r2, #1
 8012a04:	4619      	mov	r1, r3
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f001 f9cb 	bl	8013da2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012a0c:	e01a      	b.n	8012a44 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8012a0e:	6839      	ldr	r1, [r7, #0]
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f001 f95b 	bl	8013ccc <USBD_CtlError>
            ret = USBD_FAIL;
 8012a16:	2302      	movs	r3, #2
 8012a18:	75fb      	strb	r3, [r7, #23]
          break;
 8012a1a:	e013      	b.n	8012a44 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a22:	2b03      	cmp	r3, #3
 8012a24:	d00d      	beq.n	8012a42 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8012a26:	6839      	ldr	r1, [r7, #0]
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f001 f94f 	bl	8013ccc <USBD_CtlError>
            ret = USBD_FAIL;
 8012a2e:	2302      	movs	r3, #2
 8012a30:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012a32:	e006      	b.n	8012a42 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8012a34:	6839      	ldr	r1, [r7, #0]
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f001 f948 	bl	8013ccc <USBD_CtlError>
          ret = USBD_FAIL;
 8012a3c:	2302      	movs	r3, #2
 8012a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8012a40:	e000      	b.n	8012a44 <USBD_CDC_Setup+0x12c>
          break;
 8012a42:	bf00      	nop
      }
      break;
 8012a44:	e006      	b.n	8012a54 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012a46:	6839      	ldr	r1, [r7, #0]
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f001 f93f 	bl	8013ccc <USBD_CtlError>
      ret = USBD_FAIL;
 8012a4e:	2302      	movs	r3, #2
 8012a50:	75fb      	strb	r3, [r7, #23]
      break;
 8012a52:	bf00      	nop
  }

  return ret;
 8012a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}

08012a5e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	b084      	sub	sp, #16
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
 8012a66:	460b      	mov	r3, r1
 8012a68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a70:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a78:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d03a      	beq.n	8012afa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012a84:	78fa      	ldrb	r2, [r7, #3]
 8012a86:	6879      	ldr	r1, [r7, #4]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	440b      	add	r3, r1
 8012a92:	331c      	adds	r3, #28
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d029      	beq.n	8012aee <USBD_CDC_DataIn+0x90>
 8012a9a:	78fa      	ldrb	r2, [r7, #3]
 8012a9c:	6879      	ldr	r1, [r7, #4]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	4413      	add	r3, r2
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	440b      	add	r3, r1
 8012aa8:	331c      	adds	r3, #28
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	78f9      	ldrb	r1, [r7, #3]
 8012aae:	68b8      	ldr	r0, [r7, #8]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	009b      	lsls	r3, r3, #2
 8012ab4:	440b      	add	r3, r1
 8012ab6:	00db      	lsls	r3, r3, #3
 8012ab8:	4403      	add	r3, r0
 8012aba:	3338      	adds	r3, #56	; 0x38
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	fbb2 f1f3 	udiv	r1, r2, r3
 8012ac2:	fb01 f303 	mul.w	r3, r1, r3
 8012ac6:	1ad3      	subs	r3, r2, r3
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d110      	bne.n	8012aee <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8012acc:	78fa      	ldrb	r2, [r7, #3]
 8012ace:	6879      	ldr	r1, [r7, #4]
 8012ad0:	4613      	mov	r3, r2
 8012ad2:	009b      	lsls	r3, r3, #2
 8012ad4:	4413      	add	r3, r2
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	440b      	add	r3, r1
 8012ada:	331c      	adds	r3, #28
 8012adc:	2200      	movs	r2, #0
 8012ade:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012ae0:	78f9      	ldrb	r1, [r7, #3]
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f01b ff34 	bl	802e954 <USBD_LL_Transmit>
 8012aec:	e003      	b.n	8012af6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2200      	movs	r2, #0
 8012af2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8012af6:	2300      	movs	r3, #0
 8012af8:	e000      	b.n	8012afc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8012afa:	2302      	movs	r3, #2
  }
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3710      	adds	r7, #16
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b084      	sub	sp, #16
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b16:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012b18:	78fb      	ldrb	r3, [r7, #3]
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f01b ff5f 	bl	802e9e0 <USBD_LL_GetRxDataSize>
 8012b22:	4602      	mov	r2, r0
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d00d      	beq.n	8012b50 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	68fa      	ldr	r2, [r7, #12]
 8012b3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012b42:	68fa      	ldr	r2, [r7, #12]
 8012b44:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012b48:	4611      	mov	r1, r2
 8012b4a:	4798      	blx	r3

    return USBD_OK;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	e000      	b.n	8012b52 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8012b50:	2302      	movs	r3, #2
  }
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3710      	adds	r7, #16
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}

08012b5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012b5a:	b580      	push	{r7, lr}
 8012b5c:	b084      	sub	sp, #16
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b68:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d015      	beq.n	8012ba0 <USBD_CDC_EP0_RxReady+0x46>
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012b7a:	2bff      	cmp	r3, #255	; 0xff
 8012b7c:	d010      	beq.n	8012ba0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	68fa      	ldr	r2, [r7, #12]
 8012b88:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8012b8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012b8e:	68fa      	ldr	r2, [r7, #12]
 8012b90:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012b94:	b292      	uxth	r2, r2
 8012b96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	22ff      	movs	r2, #255	; 0xff
 8012b9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8012ba0:	2300      	movs	r3, #0
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3710      	adds	r7, #16
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
	...

08012bac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2243      	movs	r2, #67	; 0x43
 8012bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8012bba:	4b03      	ldr	r3, [pc, #12]	; (8012bc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr
 8012bc8:	200003c0 	.word	0x200003c0

08012bcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b083      	sub	sp, #12
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2243      	movs	r2, #67	; 0x43
 8012bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8012bda:	4b03      	ldr	r3, [pc, #12]	; (8012be8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	370c      	adds	r7, #12
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr
 8012be8:	2000037c 	.word	0x2000037c

08012bec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2243      	movs	r2, #67	; 0x43
 8012bf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012bfa:	4b03      	ldr	r3, [pc, #12]	; (8012c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	370c      	adds	r7, #12
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr
 8012c08:	20000404 	.word	0x20000404

08012c0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	220a      	movs	r2, #10
 8012c18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8012c1a:	4b03      	ldr	r3, [pc, #12]	; (8012c28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	370c      	adds	r7, #12
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	20000338 	.word	0x20000338

08012c2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8012c36:	2302      	movs	r3, #2
 8012c38:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d005      	beq.n	8012c4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	683a      	ldr	r2, [r7, #0]
 8012c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3714      	adds	r7, #20
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr

08012c5a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8012c5a:	b480      	push	{r7}
 8012c5c:	b087      	sub	sp, #28
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	60f8      	str	r0, [r7, #12]
 8012c62:	60b9      	str	r1, [r7, #8]
 8012c64:	4613      	mov	r3, r2
 8012c66:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c6e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012c78:	88fa      	ldrh	r2, [r7, #6]
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	371c      	adds	r7, #28
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr

08012c8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8012c8e:	b480      	push	{r7}
 8012c90:	b085      	sub	sp, #20
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
 8012c96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	683a      	ldr	r2, [r7, #0]
 8012ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3714      	adds	r7, #20
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr

08012cb6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b084      	sub	sp, #16
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d01c      	beq.n	8012d0a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d115      	bne.n	8012d06 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2201      	movs	r2, #1
 8012cde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	2181      	movs	r1, #129	; 0x81
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f01b fe29 	bl	802e954 <USBD_LL_Transmit>

      return USBD_OK;
 8012d02:	2300      	movs	r3, #0
 8012d04:	e002      	b.n	8012d0c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8012d06:	2301      	movs	r3, #1
 8012d08:	e000      	b.n	8012d0c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8012d0a:	2302      	movs	r3, #2
  }
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3710      	adds	r7, #16
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b084      	sub	sp, #16
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d22:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d017      	beq.n	8012d5e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	7c1b      	ldrb	r3, [r3, #16]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d109      	bne.n	8012d4a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d40:	2101      	movs	r1, #1
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f01b fe29 	bl	802e99a <USBD_LL_PrepareReceive>
 8012d48:	e007      	b.n	8012d5a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d50:	2340      	movs	r3, #64	; 0x40
 8012d52:	2101      	movs	r1, #1
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f01b fe20 	bl	802e99a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	e000      	b.n	8012d60 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8012d5e:	2302      	movs	r3, #2
  }
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3710      	adds	r7, #16
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	60f8      	str	r0, [r7, #12]
 8012d70:	60b9      	str	r1, [r7, #8]
 8012d72:	4613      	mov	r3, r2
 8012d74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d101      	bne.n	8012d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012d7c:	2302      	movs	r3, #2
 8012d7e:	e01a      	b.n	8012db6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d003      	beq.n	8012d92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d003      	beq.n	8012da0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	68ba      	ldr	r2, [r7, #8]
 8012d9c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2201      	movs	r2, #1
 8012da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	79fa      	ldrb	r2, [r7, #7]
 8012dac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8012dae:	68f8      	ldr	r0, [r7, #12]
 8012db0:	f01b fc8c 	bl	802e6cc <USBD_LL_Init>

  return USBD_OK;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012dbe:	b480      	push	{r7}
 8012dc0:	b085      	sub	sp, #20
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d006      	beq.n	8012de0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	683a      	ldr	r2, [r7, #0]
 8012dd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	73fb      	strb	r3, [r7, #15]
 8012dde:	e001      	b.n	8012de4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8012de0:	2302      	movs	r3, #2
 8012de2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3714      	adds	r7, #20
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr

08012df2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b082      	sub	sp, #8
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f01b fcc0 	bl	802e780 <USBD_LL_Start>

  return USBD_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012e0a:	b480      	push	{r7}
 8012e0c:	b083      	sub	sp, #12
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012e12:	2300      	movs	r3, #0
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	460b      	mov	r3, r1
 8012e2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012e2c:	2302      	movs	r3, #2
 8012e2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d00c      	beq.n	8012e54 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	78fa      	ldrb	r2, [r7, #3]
 8012e44:	4611      	mov	r1, r2
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	4798      	blx	r3
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d101      	bne.n	8012e54 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8012e50:	2300      	movs	r3, #0
 8012e52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b082      	sub	sp, #8
 8012e62:	af00      	add	r7, sp, #0
 8012e64:	6078      	str	r0, [r7, #4]
 8012e66:	460b      	mov	r3, r1
 8012e68:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	78fa      	ldrb	r2, [r7, #3]
 8012e74:	4611      	mov	r1, r2
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	4798      	blx	r3

  return USBD_OK;
 8012e7a:	2300      	movs	r3, #0
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012e94:	6839      	ldr	r1, [r7, #0]
 8012e96:	4618      	mov	r0, r3
 8012e98:	f000 fedb 	bl	8013c52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012eaa:	461a      	mov	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012eb8:	f003 031f 	and.w	r3, r3, #31
 8012ebc:	2b02      	cmp	r3, #2
 8012ebe:	d016      	beq.n	8012eee <USBD_LL_SetupStage+0x6a>
 8012ec0:	2b02      	cmp	r3, #2
 8012ec2:	d81c      	bhi.n	8012efe <USBD_LL_SetupStage+0x7a>
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d002      	beq.n	8012ece <USBD_LL_SetupStage+0x4a>
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d008      	beq.n	8012ede <USBD_LL_SetupStage+0x5a>
 8012ecc:	e017      	b.n	8012efe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f000 f9ce 	bl	8013278 <USBD_StdDevReq>
      break;
 8012edc:	e01a      	b.n	8012f14 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f000 fa30 	bl	801334c <USBD_StdItfReq>
      break;
 8012eec:	e012      	b.n	8012f14 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 fa70 	bl	80133dc <USBD_StdEPReq>
      break;
 8012efc:	e00a      	b.n	8012f14 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012f04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012f08:	b2db      	uxtb	r3, r3
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f01b fc97 	bl	802e840 <USBD_LL_StallEP>
      break;
 8012f12:	bf00      	nop
  }

  return USBD_OK;
 8012f14:	2300      	movs	r3, #0
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3708      	adds	r7, #8
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b086      	sub	sp, #24
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	60f8      	str	r0, [r7, #12]
 8012f26:	460b      	mov	r3, r1
 8012f28:	607a      	str	r2, [r7, #4]
 8012f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012f2c:	7afb      	ldrb	r3, [r7, #11]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d14b      	bne.n	8012fca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012f38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012f40:	2b03      	cmp	r3, #3
 8012f42:	d134      	bne.n	8012fae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	68da      	ldr	r2, [r3, #12]
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	691b      	ldr	r3, [r3, #16]
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d919      	bls.n	8012f84 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	68da      	ldr	r2, [r3, #12]
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	691b      	ldr	r3, [r3, #16]
 8012f58:	1ad2      	subs	r2, r2, r3
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	68da      	ldr	r2, [r3, #12]
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d203      	bcs.n	8012f72 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	e002      	b.n	8012f78 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	461a      	mov	r2, r3
 8012f7a:	6879      	ldr	r1, [r7, #4]
 8012f7c:	68f8      	ldr	r0, [r7, #12]
 8012f7e:	f000 ff5c 	bl	8013e3a <USBD_CtlContinueRx>
 8012f82:	e038      	b.n	8012ff6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f8a:	691b      	ldr	r3, [r3, #16]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00a      	beq.n	8012fa6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012f96:	2b03      	cmp	r3, #3
 8012f98:	d105      	bne.n	8012fa6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012fa0:	691b      	ldr	r3, [r3, #16]
 8012fa2:	68f8      	ldr	r0, [r7, #12]
 8012fa4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	f000 ff59 	bl	8013e5e <USBD_CtlSendStatus>
 8012fac:	e023      	b.n	8012ff6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012fb4:	2b05      	cmp	r3, #5
 8012fb6:	d11e      	bne.n	8012ff6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	68f8      	ldr	r0, [r7, #12]
 8012fc4:	f01b fc3c 	bl	802e840 <USBD_LL_StallEP>
 8012fc8:	e015      	b.n	8012ff6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012fd0:	699b      	ldr	r3, [r3, #24]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d00d      	beq.n	8012ff2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8012fdc:	2b03      	cmp	r3, #3
 8012fde:	d108      	bne.n	8012ff2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012fe6:	699b      	ldr	r3, [r3, #24]
 8012fe8:	7afa      	ldrb	r2, [r7, #11]
 8012fea:	4611      	mov	r1, r2
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	4798      	blx	r3
 8012ff0:	e001      	b.n	8012ff6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012ff2:	2302      	movs	r3, #2
 8012ff4:	e000      	b.n	8012ff8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8012ff6:	2300      	movs	r3, #0
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3718      	adds	r7, #24
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b086      	sub	sp, #24
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	460b      	mov	r3, r1
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801300e:	7afb      	ldrb	r3, [r7, #11]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d17f      	bne.n	8013114 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	3314      	adds	r3, #20
 8013018:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013020:	2b02      	cmp	r3, #2
 8013022:	d15c      	bne.n	80130de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	68da      	ldr	r2, [r3, #12]
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	691b      	ldr	r3, [r3, #16]
 801302c:	429a      	cmp	r2, r3
 801302e:	d915      	bls.n	801305c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	68da      	ldr	r2, [r3, #12]
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	1ad2      	subs	r2, r2, r3
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	68db      	ldr	r3, [r3, #12]
 8013042:	b29b      	uxth	r3, r3
 8013044:	461a      	mov	r2, r3
 8013046:	6879      	ldr	r1, [r7, #4]
 8013048:	68f8      	ldr	r0, [r7, #12]
 801304a:	f000 fec6 	bl	8013dda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801304e:	2300      	movs	r3, #0
 8013050:	2200      	movs	r2, #0
 8013052:	2100      	movs	r1, #0
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	f01b fca0 	bl	802e99a <USBD_LL_PrepareReceive>
 801305a:	e04e      	b.n	80130fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	689b      	ldr	r3, [r3, #8]
 8013060:	697a      	ldr	r2, [r7, #20]
 8013062:	6912      	ldr	r2, [r2, #16]
 8013064:	fbb3 f1f2 	udiv	r1, r3, r2
 8013068:	fb01 f202 	mul.w	r2, r1, r2
 801306c:	1a9b      	subs	r3, r3, r2
 801306e:	2b00      	cmp	r3, #0
 8013070:	d11c      	bne.n	80130ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	689a      	ldr	r2, [r3, #8]
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801307a:	429a      	cmp	r2, r3
 801307c:	d316      	bcc.n	80130ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	689a      	ldr	r2, [r3, #8]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013088:	429a      	cmp	r2, r3
 801308a:	d20f      	bcs.n	80130ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801308c:	2200      	movs	r2, #0
 801308e:	2100      	movs	r1, #0
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f000 fea2 	bl	8013dda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2200      	movs	r2, #0
 801309a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801309e:	2300      	movs	r3, #0
 80130a0:	2200      	movs	r2, #0
 80130a2:	2100      	movs	r1, #0
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f01b fc78 	bl	802e99a <USBD_LL_PrepareReceive>
 80130aa:	e026      	b.n	80130fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80130b2:	68db      	ldr	r3, [r3, #12]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00a      	beq.n	80130ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80130be:	2b03      	cmp	r3, #3
 80130c0:	d105      	bne.n	80130ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	68f8      	ldr	r0, [r7, #12]
 80130cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80130ce:	2180      	movs	r1, #128	; 0x80
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f01b fbb5 	bl	802e840 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80130d6:	68f8      	ldr	r0, [r7, #12]
 80130d8:	f000 fed4 	bl	8013e84 <USBD_CtlReceiveStatus>
 80130dc:	e00d      	b.n	80130fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80130e4:	2b04      	cmp	r3, #4
 80130e6:	d004      	beq.n	80130f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d103      	bne.n	80130fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80130f2:	2180      	movs	r1, #128	; 0x80
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f01b fba3 	bl	802e840 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013100:	2b01      	cmp	r3, #1
 8013102:	d11d      	bne.n	8013140 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f7ff fe80 	bl	8012e0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2200      	movs	r2, #0
 801310e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013112:	e015      	b.n	8013140 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801311a:	695b      	ldr	r3, [r3, #20]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00d      	beq.n	801313c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013126:	2b03      	cmp	r3, #3
 8013128:	d108      	bne.n	801313c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013130:	695b      	ldr	r3, [r3, #20]
 8013132:	7afa      	ldrb	r2, [r7, #11]
 8013134:	4611      	mov	r1, r2
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	4798      	blx	r3
 801313a:	e001      	b.n	8013140 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801313c:	2302      	movs	r3, #2
 801313e:	e000      	b.n	8013142 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013140:	2300      	movs	r3, #0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3718      	adds	r7, #24
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}

0801314a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801314a:	b580      	push	{r7, lr}
 801314c:	b082      	sub	sp, #8
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013152:	2340      	movs	r3, #64	; 0x40
 8013154:	2200      	movs	r2, #0
 8013156:	2100      	movs	r1, #0
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f01b fb2c 	bl	802e7b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2201      	movs	r2, #1
 8013162:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2240      	movs	r2, #64	; 0x40
 801316a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801316e:	2340      	movs	r3, #64	; 0x40
 8013170:	2200      	movs	r2, #0
 8013172:	2180      	movs	r1, #128	; 0x80
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f01b fb1e 	bl	802e7b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	2201      	movs	r2, #1
 801317e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2240      	movs	r2, #64	; 0x40
 8013184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2201      	movs	r2, #1
 801318a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2200      	movs	r2, #0
 8013192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2200      	movs	r2, #0
 801319a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2200      	movs	r2, #0
 80131a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d009      	beq.n	80131c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	6852      	ldr	r2, [r2, #4]
 80131ba:	b2d2      	uxtb	r2, r2
 80131bc:	4611      	mov	r1, r2
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	4798      	blx	r3
  }

  return USBD_OK;
 80131c2:	2300      	movs	r3, #0
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	460b      	mov	r3, r1
 80131d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	78fa      	ldrb	r2, [r7, #3]
 80131dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80131de:	2300      	movs	r3, #0
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2204      	movs	r2, #4
 8013204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	370c      	adds	r7, #12
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr

08013216 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013216:	b480      	push	{r7}
 8013218:	b083      	sub	sp, #12
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013224:	2b04      	cmp	r3, #4
 8013226:	d105      	bne.n	8013234 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	370c      	adds	r7, #12
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr

08013242 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013242:	b580      	push	{r7, lr}
 8013244:	b082      	sub	sp, #8
 8013246:	af00      	add	r7, sp, #0
 8013248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013250:	2b03      	cmp	r3, #3
 8013252:	d10b      	bne.n	801326c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801325a:	69db      	ldr	r3, [r3, #28]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d005      	beq.n	801326c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013266:	69db      	ldr	r3, [r3, #28]
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}
	...

08013278 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801328e:	2b40      	cmp	r3, #64	; 0x40
 8013290:	d005      	beq.n	801329e <USBD_StdDevReq+0x26>
 8013292:	2b40      	cmp	r3, #64	; 0x40
 8013294:	d84f      	bhi.n	8013336 <USBD_StdDevReq+0xbe>
 8013296:	2b00      	cmp	r3, #0
 8013298:	d009      	beq.n	80132ae <USBD_StdDevReq+0x36>
 801329a:	2b20      	cmp	r3, #32
 801329c:	d14b      	bne.n	8013336 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132a4:	689b      	ldr	r3, [r3, #8]
 80132a6:	6839      	ldr	r1, [r7, #0]
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	4798      	blx	r3
      break;
 80132ac:	e048      	b.n	8013340 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	785b      	ldrb	r3, [r3, #1]
 80132b2:	2b09      	cmp	r3, #9
 80132b4:	d839      	bhi.n	801332a <USBD_StdDevReq+0xb2>
 80132b6:	a201      	add	r2, pc, #4	; (adr r2, 80132bc <USBD_StdDevReq+0x44>)
 80132b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132bc:	0801330d 	.word	0x0801330d
 80132c0:	08013321 	.word	0x08013321
 80132c4:	0801332b 	.word	0x0801332b
 80132c8:	08013317 	.word	0x08013317
 80132cc:	0801332b 	.word	0x0801332b
 80132d0:	080132ef 	.word	0x080132ef
 80132d4:	080132e5 	.word	0x080132e5
 80132d8:	0801332b 	.word	0x0801332b
 80132dc:	08013303 	.word	0x08013303
 80132e0:	080132f9 	.word	0x080132f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80132e4:	6839      	ldr	r1, [r7, #0]
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f9dc 	bl	80136a4 <USBD_GetDescriptor>
          break;
 80132ec:	e022      	b.n	8013334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80132ee:	6839      	ldr	r1, [r7, #0]
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f000 fb3f 	bl	8013974 <USBD_SetAddress>
          break;
 80132f6:	e01d      	b.n	8013334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80132f8:	6839      	ldr	r1, [r7, #0]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f000 fb7e 	bl	80139fc <USBD_SetConfig>
          break;
 8013300:	e018      	b.n	8013334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013302:	6839      	ldr	r1, [r7, #0]
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f000 fc07 	bl	8013b18 <USBD_GetConfig>
          break;
 801330a:	e013      	b.n	8013334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801330c:	6839      	ldr	r1, [r7, #0]
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f000 fc37 	bl	8013b82 <USBD_GetStatus>
          break;
 8013314:	e00e      	b.n	8013334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013316:	6839      	ldr	r1, [r7, #0]
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 fc65 	bl	8013be8 <USBD_SetFeature>
          break;
 801331e:	e009      	b.n	8013334 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013320:	6839      	ldr	r1, [r7, #0]
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f000 fc74 	bl	8013c10 <USBD_ClrFeature>
          break;
 8013328:	e004      	b.n	8013334 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801332a:	6839      	ldr	r1, [r7, #0]
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 fccd 	bl	8013ccc <USBD_CtlError>
          break;
 8013332:	bf00      	nop
      }
      break;
 8013334:	e004      	b.n	8013340 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8013336:	6839      	ldr	r1, [r7, #0]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f000 fcc7 	bl	8013ccc <USBD_CtlError>
      break;
 801333e:	bf00      	nop
  }

  return ret;
 8013340:	7bfb      	ldrb	r3, [r7, #15]
}
 8013342:	4618      	mov	r0, r3
 8013344:	3710      	adds	r7, #16
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop

0801334c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013356:	2300      	movs	r3, #0
 8013358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013362:	2b40      	cmp	r3, #64	; 0x40
 8013364:	d005      	beq.n	8013372 <USBD_StdItfReq+0x26>
 8013366:	2b40      	cmp	r3, #64	; 0x40
 8013368:	d82e      	bhi.n	80133c8 <USBD_StdItfReq+0x7c>
 801336a:	2b00      	cmp	r3, #0
 801336c:	d001      	beq.n	8013372 <USBD_StdItfReq+0x26>
 801336e:	2b20      	cmp	r3, #32
 8013370:	d12a      	bne.n	80133c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013378:	3b01      	subs	r3, #1
 801337a:	2b02      	cmp	r3, #2
 801337c:	d81d      	bhi.n	80133ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	889b      	ldrh	r3, [r3, #4]
 8013382:	b2db      	uxtb	r3, r3
 8013384:	2b01      	cmp	r3, #1
 8013386:	d813      	bhi.n	80133b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801338e:	689b      	ldr	r3, [r3, #8]
 8013390:	6839      	ldr	r1, [r7, #0]
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	4798      	blx	r3
 8013396:	4603      	mov	r3, r0
 8013398:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	88db      	ldrh	r3, [r3, #6]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d110      	bne.n	80133c4 <USBD_StdItfReq+0x78>
 80133a2:	7bfb      	ldrb	r3, [r7, #15]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d10d      	bne.n	80133c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f000 fd58 	bl	8013e5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80133ae:	e009      	b.n	80133c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f000 fc8a 	bl	8013ccc <USBD_CtlError>
          break;
 80133b8:	e004      	b.n	80133c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f000 fc85 	bl	8013ccc <USBD_CtlError>
          break;
 80133c2:	e000      	b.n	80133c6 <USBD_StdItfReq+0x7a>
          break;
 80133c4:	bf00      	nop
      }
      break;
 80133c6:	e004      	b.n	80133d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80133c8:	6839      	ldr	r1, [r7, #0]
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f000 fc7e 	bl	8013ccc <USBD_CtlError>
      break;
 80133d0:	bf00      	nop
  }

  return USBD_OK;
 80133d2:	2300      	movs	r3, #0
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3710      	adds	r7, #16
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80133e6:	2300      	movs	r3, #0
 80133e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	889b      	ldrh	r3, [r3, #4]
 80133ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80133f8:	2b40      	cmp	r3, #64	; 0x40
 80133fa:	d007      	beq.n	801340c <USBD_StdEPReq+0x30>
 80133fc:	2b40      	cmp	r3, #64	; 0x40
 80133fe:	f200 8146 	bhi.w	801368e <USBD_StdEPReq+0x2b2>
 8013402:	2b00      	cmp	r3, #0
 8013404:	d00a      	beq.n	801341c <USBD_StdEPReq+0x40>
 8013406:	2b20      	cmp	r3, #32
 8013408:	f040 8141 	bne.w	801368e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013412:	689b      	ldr	r3, [r3, #8]
 8013414:	6839      	ldr	r1, [r7, #0]
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	4798      	blx	r3
      break;
 801341a:	e13d      	b.n	8013698 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013424:	2b20      	cmp	r3, #32
 8013426:	d10a      	bne.n	801343e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	6839      	ldr	r1, [r7, #0]
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	4798      	blx	r3
 8013436:	4603      	mov	r3, r0
 8013438:	73fb      	strb	r3, [r7, #15]

        return ret;
 801343a:	7bfb      	ldrb	r3, [r7, #15]
 801343c:	e12d      	b.n	801369a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	785b      	ldrb	r3, [r3, #1]
 8013442:	2b03      	cmp	r3, #3
 8013444:	d007      	beq.n	8013456 <USBD_StdEPReq+0x7a>
 8013446:	2b03      	cmp	r3, #3
 8013448:	f300 811b 	bgt.w	8013682 <USBD_StdEPReq+0x2a6>
 801344c:	2b00      	cmp	r3, #0
 801344e:	d072      	beq.n	8013536 <USBD_StdEPReq+0x15a>
 8013450:	2b01      	cmp	r3, #1
 8013452:	d03a      	beq.n	80134ca <USBD_StdEPReq+0xee>
 8013454:	e115      	b.n	8013682 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801345c:	2b02      	cmp	r3, #2
 801345e:	d002      	beq.n	8013466 <USBD_StdEPReq+0x8a>
 8013460:	2b03      	cmp	r3, #3
 8013462:	d015      	beq.n	8013490 <USBD_StdEPReq+0xb4>
 8013464:	e02b      	b.n	80134be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013466:	7bbb      	ldrb	r3, [r7, #14]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00c      	beq.n	8013486 <USBD_StdEPReq+0xaa>
 801346c:	7bbb      	ldrb	r3, [r7, #14]
 801346e:	2b80      	cmp	r3, #128	; 0x80
 8013470:	d009      	beq.n	8013486 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013472:	7bbb      	ldrb	r3, [r7, #14]
 8013474:	4619      	mov	r1, r3
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f01b f9e2 	bl	802e840 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801347c:	2180      	movs	r1, #128	; 0x80
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f01b f9de 	bl	802e840 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013484:	e020      	b.n	80134c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8013486:	6839      	ldr	r1, [r7, #0]
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f000 fc1f 	bl	8013ccc <USBD_CtlError>
              break;
 801348e:	e01b      	b.n	80134c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	885b      	ldrh	r3, [r3, #2]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d10e      	bne.n	80134b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8013498:	7bbb      	ldrb	r3, [r7, #14]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d00b      	beq.n	80134b6 <USBD_StdEPReq+0xda>
 801349e:	7bbb      	ldrb	r3, [r7, #14]
 80134a0:	2b80      	cmp	r3, #128	; 0x80
 80134a2:	d008      	beq.n	80134b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	88db      	ldrh	r3, [r3, #6]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d104      	bne.n	80134b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80134ac:	7bbb      	ldrb	r3, [r7, #14]
 80134ae:	4619      	mov	r1, r3
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f01b f9c5 	bl	802e840 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f000 fcd1 	bl	8013e5e <USBD_CtlSendStatus>

              break;
 80134bc:	e004      	b.n	80134c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80134be:	6839      	ldr	r1, [r7, #0]
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f000 fc03 	bl	8013ccc <USBD_CtlError>
              break;
 80134c6:	bf00      	nop
          }
          break;
 80134c8:	e0e0      	b.n	801368c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134d0:	2b02      	cmp	r3, #2
 80134d2:	d002      	beq.n	80134da <USBD_StdEPReq+0xfe>
 80134d4:	2b03      	cmp	r3, #3
 80134d6:	d015      	beq.n	8013504 <USBD_StdEPReq+0x128>
 80134d8:	e026      	b.n	8013528 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80134da:	7bbb      	ldrb	r3, [r7, #14]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d00c      	beq.n	80134fa <USBD_StdEPReq+0x11e>
 80134e0:	7bbb      	ldrb	r3, [r7, #14]
 80134e2:	2b80      	cmp	r3, #128	; 0x80
 80134e4:	d009      	beq.n	80134fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80134e6:	7bbb      	ldrb	r3, [r7, #14]
 80134e8:	4619      	mov	r1, r3
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f01b f9a8 	bl	802e840 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80134f0:	2180      	movs	r1, #128	; 0x80
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f01b f9a4 	bl	802e840 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80134f8:	e01c      	b.n	8013534 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80134fa:	6839      	ldr	r1, [r7, #0]
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f000 fbe5 	bl	8013ccc <USBD_CtlError>
              break;
 8013502:	e017      	b.n	8013534 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	885b      	ldrh	r3, [r3, #2]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d112      	bne.n	8013532 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801350c:	7bbb      	ldrb	r3, [r7, #14]
 801350e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013512:	2b00      	cmp	r3, #0
 8013514:	d004      	beq.n	8013520 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8013516:	7bbb      	ldrb	r3, [r7, #14]
 8013518:	4619      	mov	r1, r3
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f01b f9af 	bl	802e87e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f000 fc9c 	bl	8013e5e <USBD_CtlSendStatus>
              }
              break;
 8013526:	e004      	b.n	8013532 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8013528:	6839      	ldr	r1, [r7, #0]
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f000 fbce 	bl	8013ccc <USBD_CtlError>
              break;
 8013530:	e000      	b.n	8013534 <USBD_StdEPReq+0x158>
              break;
 8013532:	bf00      	nop
          }
          break;
 8013534:	e0aa      	b.n	801368c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801353c:	2b02      	cmp	r3, #2
 801353e:	d002      	beq.n	8013546 <USBD_StdEPReq+0x16a>
 8013540:	2b03      	cmp	r3, #3
 8013542:	d032      	beq.n	80135aa <USBD_StdEPReq+0x1ce>
 8013544:	e097      	b.n	8013676 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013546:	7bbb      	ldrb	r3, [r7, #14]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d007      	beq.n	801355c <USBD_StdEPReq+0x180>
 801354c:	7bbb      	ldrb	r3, [r7, #14]
 801354e:	2b80      	cmp	r3, #128	; 0x80
 8013550:	d004      	beq.n	801355c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8013552:	6839      	ldr	r1, [r7, #0]
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 fbb9 	bl	8013ccc <USBD_CtlError>
                break;
 801355a:	e091      	b.n	8013680 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801355c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013560:	2b00      	cmp	r3, #0
 8013562:	da0b      	bge.n	801357c <USBD_StdEPReq+0x1a0>
 8013564:	7bbb      	ldrb	r3, [r7, #14]
 8013566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801356a:	4613      	mov	r3, r2
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	4413      	add	r3, r2
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	3310      	adds	r3, #16
 8013574:	687a      	ldr	r2, [r7, #4]
 8013576:	4413      	add	r3, r2
 8013578:	3304      	adds	r3, #4
 801357a:	e00b      	b.n	8013594 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801357c:	7bbb      	ldrb	r3, [r7, #14]
 801357e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013582:	4613      	mov	r3, r2
 8013584:	009b      	lsls	r3, r3, #2
 8013586:	4413      	add	r3, r2
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	4413      	add	r3, r2
 8013592:	3304      	adds	r3, #4
 8013594:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	2200      	movs	r2, #0
 801359a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	2202      	movs	r2, #2
 80135a0:	4619      	mov	r1, r3
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f000 fbfd 	bl	8013da2 <USBD_CtlSendData>
              break;
 80135a8:	e06a      	b.n	8013680 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80135aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	da11      	bge.n	80135d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80135b2:	7bbb      	ldrb	r3, [r7, #14]
 80135b4:	f003 020f 	and.w	r2, r3, #15
 80135b8:	6879      	ldr	r1, [r7, #4]
 80135ba:	4613      	mov	r3, r2
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	4413      	add	r3, r2
 80135c0:	009b      	lsls	r3, r3, #2
 80135c2:	440b      	add	r3, r1
 80135c4:	3318      	adds	r3, #24
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d117      	bne.n	80135fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80135cc:	6839      	ldr	r1, [r7, #0]
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f000 fb7c 	bl	8013ccc <USBD_CtlError>
                  break;
 80135d4:	e054      	b.n	8013680 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80135d6:	7bbb      	ldrb	r3, [r7, #14]
 80135d8:	f003 020f 	and.w	r2, r3, #15
 80135dc:	6879      	ldr	r1, [r7, #4]
 80135de:	4613      	mov	r3, r2
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	4413      	add	r3, r2
 80135e4:	009b      	lsls	r3, r3, #2
 80135e6:	440b      	add	r3, r1
 80135e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d104      	bne.n	80135fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80135f2:	6839      	ldr	r1, [r7, #0]
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f000 fb69 	bl	8013ccc <USBD_CtlError>
                  break;
 80135fa:	e041      	b.n	8013680 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80135fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013600:	2b00      	cmp	r3, #0
 8013602:	da0b      	bge.n	801361c <USBD_StdEPReq+0x240>
 8013604:	7bbb      	ldrb	r3, [r7, #14]
 8013606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801360a:	4613      	mov	r3, r2
 801360c:	009b      	lsls	r3, r3, #2
 801360e:	4413      	add	r3, r2
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	3310      	adds	r3, #16
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	4413      	add	r3, r2
 8013618:	3304      	adds	r3, #4
 801361a:	e00b      	b.n	8013634 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801361c:	7bbb      	ldrb	r3, [r7, #14]
 801361e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013622:	4613      	mov	r3, r2
 8013624:	009b      	lsls	r3, r3, #2
 8013626:	4413      	add	r3, r2
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801362e:	687a      	ldr	r2, [r7, #4]
 8013630:	4413      	add	r3, r2
 8013632:	3304      	adds	r3, #4
 8013634:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013636:	7bbb      	ldrb	r3, [r7, #14]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d002      	beq.n	8013642 <USBD_StdEPReq+0x266>
 801363c:	7bbb      	ldrb	r3, [r7, #14]
 801363e:	2b80      	cmp	r3, #128	; 0x80
 8013640:	d103      	bne.n	801364a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	2200      	movs	r2, #0
 8013646:	601a      	str	r2, [r3, #0]
 8013648:	e00e      	b.n	8013668 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801364a:	7bbb      	ldrb	r3, [r7, #14]
 801364c:	4619      	mov	r1, r3
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f01b f934 	bl	802e8bc <USBD_LL_IsStallEP>
 8013654:	4603      	mov	r3, r0
 8013656:	2b00      	cmp	r3, #0
 8013658:	d003      	beq.n	8013662 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	2201      	movs	r2, #1
 801365e:	601a      	str	r2, [r3, #0]
 8013660:	e002      	b.n	8013668 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	2200      	movs	r2, #0
 8013666:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	2202      	movs	r2, #2
 801366c:	4619      	mov	r1, r3
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f000 fb97 	bl	8013da2 <USBD_CtlSendData>
              break;
 8013674:	e004      	b.n	8013680 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8013676:	6839      	ldr	r1, [r7, #0]
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f000 fb27 	bl	8013ccc <USBD_CtlError>
              break;
 801367e:	bf00      	nop
          }
          break;
 8013680:	e004      	b.n	801368c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8013682:	6839      	ldr	r1, [r7, #0]
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 fb21 	bl	8013ccc <USBD_CtlError>
          break;
 801368a:	bf00      	nop
      }
      break;
 801368c:	e004      	b.n	8013698 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801368e:	6839      	ldr	r1, [r7, #0]
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f000 fb1b 	bl	8013ccc <USBD_CtlError>
      break;
 8013696:	bf00      	nop
  }

  return ret;
 8013698:	7bfb      	ldrb	r3, [r7, #15]
}
 801369a:	4618      	mov	r0, r3
 801369c:	3710      	adds	r7, #16
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
	...

080136a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b084      	sub	sp, #16
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80136ae:	2300      	movs	r3, #0
 80136b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80136b2:	2300      	movs	r3, #0
 80136b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80136b6:	2300      	movs	r3, #0
 80136b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	885b      	ldrh	r3, [r3, #2]
 80136be:	0a1b      	lsrs	r3, r3, #8
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	3b01      	subs	r3, #1
 80136c4:	2b06      	cmp	r3, #6
 80136c6:	f200 8128 	bhi.w	801391a <USBD_GetDescriptor+0x276>
 80136ca:	a201      	add	r2, pc, #4	; (adr r2, 80136d0 <USBD_GetDescriptor+0x2c>)
 80136cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136d0:	080136ed 	.word	0x080136ed
 80136d4:	08013705 	.word	0x08013705
 80136d8:	08013745 	.word	0x08013745
 80136dc:	0801391b 	.word	0x0801391b
 80136e0:	0801391b 	.word	0x0801391b
 80136e4:	080138bb 	.word	0x080138bb
 80136e8:	080138e7 	.word	0x080138e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	687a      	ldr	r2, [r7, #4]
 80136f6:	7c12      	ldrb	r2, [r2, #16]
 80136f8:	f107 0108 	add.w	r1, r7, #8
 80136fc:	4610      	mov	r0, r2
 80136fe:	4798      	blx	r3
 8013700:	60f8      	str	r0, [r7, #12]
      break;
 8013702:	e112      	b.n	801392a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	7c1b      	ldrb	r3, [r3, #16]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d10d      	bne.n	8013728 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013714:	f107 0208 	add.w	r2, r7, #8
 8013718:	4610      	mov	r0, r2
 801371a:	4798      	blx	r3
 801371c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	3301      	adds	r3, #1
 8013722:	2202      	movs	r2, #2
 8013724:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013726:	e100      	b.n	801392a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013730:	f107 0208 	add.w	r2, r7, #8
 8013734:	4610      	mov	r0, r2
 8013736:	4798      	blx	r3
 8013738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	3301      	adds	r3, #1
 801373e:	2202      	movs	r2, #2
 8013740:	701a      	strb	r2, [r3, #0]
      break;
 8013742:	e0f2      	b.n	801392a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	885b      	ldrh	r3, [r3, #2]
 8013748:	b2db      	uxtb	r3, r3
 801374a:	2b05      	cmp	r3, #5
 801374c:	f200 80ac 	bhi.w	80138a8 <USBD_GetDescriptor+0x204>
 8013750:	a201      	add	r2, pc, #4	; (adr r2, 8013758 <USBD_GetDescriptor+0xb4>)
 8013752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013756:	bf00      	nop
 8013758:	08013771 	.word	0x08013771
 801375c:	080137a5 	.word	0x080137a5
 8013760:	080137d9 	.word	0x080137d9
 8013764:	0801380d 	.word	0x0801380d
 8013768:	08013841 	.word	0x08013841
 801376c:	08013875 	.word	0x08013875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00b      	beq.n	8013794 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	7c12      	ldrb	r2, [r2, #16]
 8013788:	f107 0108 	add.w	r1, r7, #8
 801378c:	4610      	mov	r0, r2
 801378e:	4798      	blx	r3
 8013790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013792:	e091      	b.n	80138b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013794:	6839      	ldr	r1, [r7, #0]
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f000 fa98 	bl	8013ccc <USBD_CtlError>
            err++;
 801379c:	7afb      	ldrb	r3, [r7, #11]
 801379e:	3301      	adds	r3, #1
 80137a0:	72fb      	strb	r3, [r7, #11]
          break;
 80137a2:	e089      	b.n	80138b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d00b      	beq.n	80137c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80137b6:	689b      	ldr	r3, [r3, #8]
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	7c12      	ldrb	r2, [r2, #16]
 80137bc:	f107 0108 	add.w	r1, r7, #8
 80137c0:	4610      	mov	r0, r2
 80137c2:	4798      	blx	r3
 80137c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137c6:	e077      	b.n	80138b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80137c8:	6839      	ldr	r1, [r7, #0]
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f000 fa7e 	bl	8013ccc <USBD_CtlError>
            err++;
 80137d0:	7afb      	ldrb	r3, [r7, #11]
 80137d2:	3301      	adds	r3, #1
 80137d4:	72fb      	strb	r3, [r7, #11]
          break;
 80137d6:	e06f      	b.n	80138b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00b      	beq.n	80137fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80137ea:	68db      	ldr	r3, [r3, #12]
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	7c12      	ldrb	r2, [r2, #16]
 80137f0:	f107 0108 	add.w	r1, r7, #8
 80137f4:	4610      	mov	r0, r2
 80137f6:	4798      	blx	r3
 80137f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137fa:	e05d      	b.n	80138b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80137fc:	6839      	ldr	r1, [r7, #0]
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f000 fa64 	bl	8013ccc <USBD_CtlError>
            err++;
 8013804:	7afb      	ldrb	r3, [r7, #11]
 8013806:	3301      	adds	r3, #1
 8013808:	72fb      	strb	r3, [r7, #11]
          break;
 801380a:	e055      	b.n	80138b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013812:	691b      	ldr	r3, [r3, #16]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d00b      	beq.n	8013830 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801381e:	691b      	ldr	r3, [r3, #16]
 8013820:	687a      	ldr	r2, [r7, #4]
 8013822:	7c12      	ldrb	r2, [r2, #16]
 8013824:	f107 0108 	add.w	r1, r7, #8
 8013828:	4610      	mov	r0, r2
 801382a:	4798      	blx	r3
 801382c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801382e:	e043      	b.n	80138b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013830:	6839      	ldr	r1, [r7, #0]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 fa4a 	bl	8013ccc <USBD_CtlError>
            err++;
 8013838:	7afb      	ldrb	r3, [r7, #11]
 801383a:	3301      	adds	r3, #1
 801383c:	72fb      	strb	r3, [r7, #11]
          break;
 801383e:	e03b      	b.n	80138b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013846:	695b      	ldr	r3, [r3, #20]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d00b      	beq.n	8013864 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013852:	695b      	ldr	r3, [r3, #20]
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	7c12      	ldrb	r2, [r2, #16]
 8013858:	f107 0108 	add.w	r1, r7, #8
 801385c:	4610      	mov	r0, r2
 801385e:	4798      	blx	r3
 8013860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013862:	e029      	b.n	80138b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013864:	6839      	ldr	r1, [r7, #0]
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f000 fa30 	bl	8013ccc <USBD_CtlError>
            err++;
 801386c:	7afb      	ldrb	r3, [r7, #11]
 801386e:	3301      	adds	r3, #1
 8013870:	72fb      	strb	r3, [r7, #11]
          break;
 8013872:	e021      	b.n	80138b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801387a:	699b      	ldr	r3, [r3, #24]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00b      	beq.n	8013898 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013886:	699b      	ldr	r3, [r3, #24]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	7c12      	ldrb	r2, [r2, #16]
 801388c:	f107 0108 	add.w	r1, r7, #8
 8013890:	4610      	mov	r0, r2
 8013892:	4798      	blx	r3
 8013894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013896:	e00f      	b.n	80138b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013898:	6839      	ldr	r1, [r7, #0]
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 fa16 	bl	8013ccc <USBD_CtlError>
            err++;
 80138a0:	7afb      	ldrb	r3, [r7, #11]
 80138a2:	3301      	adds	r3, #1
 80138a4:	72fb      	strb	r3, [r7, #11]
          break;
 80138a6:	e007      	b.n	80138b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80138a8:	6839      	ldr	r1, [r7, #0]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f000 fa0e 	bl	8013ccc <USBD_CtlError>
          err++;
 80138b0:	7afb      	ldrb	r3, [r7, #11]
 80138b2:	3301      	adds	r3, #1
 80138b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80138b6:	e038      	b.n	801392a <USBD_GetDescriptor+0x286>
 80138b8:	e037      	b.n	801392a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	7c1b      	ldrb	r3, [r3, #16]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d109      	bne.n	80138d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80138c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138ca:	f107 0208 	add.w	r2, r7, #8
 80138ce:	4610      	mov	r0, r2
 80138d0:	4798      	blx	r3
 80138d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80138d4:	e029      	b.n	801392a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80138d6:	6839      	ldr	r1, [r7, #0]
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f000 f9f7 	bl	8013ccc <USBD_CtlError>
        err++;
 80138de:	7afb      	ldrb	r3, [r7, #11]
 80138e0:	3301      	adds	r3, #1
 80138e2:	72fb      	strb	r3, [r7, #11]
      break;
 80138e4:	e021      	b.n	801392a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	7c1b      	ldrb	r3, [r3, #16]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d10d      	bne.n	801390a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80138f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138f6:	f107 0208 	add.w	r2, r7, #8
 80138fa:	4610      	mov	r0, r2
 80138fc:	4798      	blx	r3
 80138fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	3301      	adds	r3, #1
 8013904:	2207      	movs	r2, #7
 8013906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013908:	e00f      	b.n	801392a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801390a:	6839      	ldr	r1, [r7, #0]
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f000 f9dd 	bl	8013ccc <USBD_CtlError>
        err++;
 8013912:	7afb      	ldrb	r3, [r7, #11]
 8013914:	3301      	adds	r3, #1
 8013916:	72fb      	strb	r3, [r7, #11]
      break;
 8013918:	e007      	b.n	801392a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f000 f9d5 	bl	8013ccc <USBD_CtlError>
      err++;
 8013922:	7afb      	ldrb	r3, [r7, #11]
 8013924:	3301      	adds	r3, #1
 8013926:	72fb      	strb	r3, [r7, #11]
      break;
 8013928:	bf00      	nop
  }

  if (err != 0U)
 801392a:	7afb      	ldrb	r3, [r7, #11]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d11c      	bne.n	801396a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8013930:	893b      	ldrh	r3, [r7, #8]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d011      	beq.n	801395a <USBD_GetDescriptor+0x2b6>
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	88db      	ldrh	r3, [r3, #6]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00d      	beq.n	801395a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	88da      	ldrh	r2, [r3, #6]
 8013942:	893b      	ldrh	r3, [r7, #8]
 8013944:	4293      	cmp	r3, r2
 8013946:	bf28      	it	cs
 8013948:	4613      	movcs	r3, r2
 801394a:	b29b      	uxth	r3, r3
 801394c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801394e:	893b      	ldrh	r3, [r7, #8]
 8013950:	461a      	mov	r2, r3
 8013952:	68f9      	ldr	r1, [r7, #12]
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 fa24 	bl	8013da2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	88db      	ldrh	r3, [r3, #6]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d104      	bne.n	801396c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f000 fa7b 	bl	8013e5e <USBD_CtlSendStatus>
 8013968:	e000      	b.n	801396c <USBD_GetDescriptor+0x2c8>
    return;
 801396a:	bf00      	nop
    }
  }
}
 801396c:	3710      	adds	r7, #16
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop

08013974 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	889b      	ldrh	r3, [r3, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d130      	bne.n	80139e8 <USBD_SetAddress+0x74>
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	88db      	ldrh	r3, [r3, #6]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d12c      	bne.n	80139e8 <USBD_SetAddress+0x74>
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	885b      	ldrh	r3, [r3, #2]
 8013992:	2b7f      	cmp	r3, #127	; 0x7f
 8013994:	d828      	bhi.n	80139e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	885b      	ldrh	r3, [r3, #2]
 801399a:	b2db      	uxtb	r3, r3
 801399c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139a8:	2b03      	cmp	r3, #3
 80139aa:	d104      	bne.n	80139b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80139ac:	6839      	ldr	r1, [r7, #0]
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f000 f98c 	bl	8013ccc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139b4:	e01d      	b.n	80139f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	7bfa      	ldrb	r2, [r7, #15]
 80139ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80139be:	7bfb      	ldrb	r3, [r7, #15]
 80139c0:	4619      	mov	r1, r3
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f01a ffa7 	bl	802e916 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fa48 	bl	8013e5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80139ce:	7bfb      	ldrb	r3, [r7, #15]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d004      	beq.n	80139de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2202      	movs	r2, #2
 80139d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139dc:	e009      	b.n	80139f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2201      	movs	r2, #1
 80139e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139e6:	e004      	b.n	80139f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80139e8:	6839      	ldr	r1, [r7, #0]
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f000 f96e 	bl	8013ccc <USBD_CtlError>
  }
}
 80139f0:	bf00      	nop
 80139f2:	bf00      	nop
 80139f4:	3710      	adds	r7, #16
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
	...

080139fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	885b      	ldrh	r3, [r3, #2]
 8013a0a:	b2da      	uxtb	r2, r3
 8013a0c:	4b41      	ldr	r3, [pc, #260]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013a10:	4b40      	ldr	r3, [pc, #256]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	2b01      	cmp	r3, #1
 8013a16:	d904      	bls.n	8013a22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8013a18:	6839      	ldr	r1, [r7, #0]
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f000 f956 	bl	8013ccc <USBD_CtlError>
 8013a20:	e075      	b.n	8013b0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a28:	2b02      	cmp	r3, #2
 8013a2a:	d002      	beq.n	8013a32 <USBD_SetConfig+0x36>
 8013a2c:	2b03      	cmp	r3, #3
 8013a2e:	d023      	beq.n	8013a78 <USBD_SetConfig+0x7c>
 8013a30:	e062      	b.n	8013af8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8013a32:	4b38      	ldr	r3, [pc, #224]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d01a      	beq.n	8013a70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8013a3a:	4b36      	ldr	r3, [pc, #216]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	461a      	mov	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2203      	movs	r2, #3
 8013a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013a4c:	4b31      	ldr	r3, [pc, #196]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	4619      	mov	r1, r3
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7ff f9e4 	bl	8012e20 <USBD_SetClassConfig>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b02      	cmp	r3, #2
 8013a5c:	d104      	bne.n	8013a68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8013a5e:	6839      	ldr	r1, [r7, #0]
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f000 f933 	bl	8013ccc <USBD_CtlError>
            return;
 8013a66:	e052      	b.n	8013b0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f000 f9f8 	bl	8013e5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013a6e:	e04e      	b.n	8013b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f000 f9f4 	bl	8013e5e <USBD_CtlSendStatus>
        break;
 8013a76:	e04a      	b.n	8013b0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8013a78:	4b26      	ldr	r3, [pc, #152]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d112      	bne.n	8013aa6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2202      	movs	r2, #2
 8013a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8013a88:	4b22      	ldr	r3, [pc, #136]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8013a92:	4b20      	ldr	r3, [pc, #128]	; (8013b14 <USBD_SetConfig+0x118>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	4619      	mov	r1, r3
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7ff f9e0 	bl	8012e5e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f000 f9dd 	bl	8013e5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013aa4:	e033      	b.n	8013b0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8013aa6:	4b1b      	ldr	r3, [pc, #108]	; (8013b14 <USBD_SetConfig+0x118>)
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	461a      	mov	r2, r3
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d01d      	beq.n	8013af0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	4619      	mov	r1, r3
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f7ff f9ce 	bl	8012e5e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8013ac2:	4b14      	ldr	r3, [pc, #80]	; (8013b14 <USBD_SetConfig+0x118>)
 8013ac4:	781b      	ldrb	r3, [r3, #0]
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013acc:	4b11      	ldr	r3, [pc, #68]	; (8013b14 <USBD_SetConfig+0x118>)
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff f9a4 	bl	8012e20 <USBD_SetClassConfig>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b02      	cmp	r3, #2
 8013adc:	d104      	bne.n	8013ae8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8013ade:	6839      	ldr	r1, [r7, #0]
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f000 f8f3 	bl	8013ccc <USBD_CtlError>
            return;
 8013ae6:	e012      	b.n	8013b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f000 f9b8 	bl	8013e5e <USBD_CtlSendStatus>
        break;
 8013aee:	e00e      	b.n	8013b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f000 f9b4 	bl	8013e5e <USBD_CtlSendStatus>
        break;
 8013af6:	e00a      	b.n	8013b0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8013af8:	6839      	ldr	r1, [r7, #0]
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 f8e6 	bl	8013ccc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8013b00:	4b04      	ldr	r3, [pc, #16]	; (8013b14 <USBD_SetConfig+0x118>)
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	4619      	mov	r1, r3
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f7ff f9a9 	bl	8012e5e <USBD_ClrClassConfig>
        break;
 8013b0c:	bf00      	nop
    }
  }
}
 8013b0e:	3708      	adds	r7, #8
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	200008dc 	.word	0x200008dc

08013b18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	88db      	ldrh	r3, [r3, #6]
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d004      	beq.n	8013b34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013b2a:	6839      	ldr	r1, [r7, #0]
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f000 f8cd 	bl	8013ccc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013b32:	e022      	b.n	8013b7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b3a:	2b02      	cmp	r3, #2
 8013b3c:	dc02      	bgt.n	8013b44 <USBD_GetConfig+0x2c>
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	dc03      	bgt.n	8013b4a <USBD_GetConfig+0x32>
 8013b42:	e015      	b.n	8013b70 <USBD_GetConfig+0x58>
 8013b44:	2b03      	cmp	r3, #3
 8013b46:	d00b      	beq.n	8013b60 <USBD_GetConfig+0x48>
 8013b48:	e012      	b.n	8013b70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	3308      	adds	r3, #8
 8013b54:	2201      	movs	r2, #1
 8013b56:	4619      	mov	r1, r3
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 f922 	bl	8013da2 <USBD_CtlSendData>
        break;
 8013b5e:	e00c      	b.n	8013b7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	3304      	adds	r3, #4
 8013b64:	2201      	movs	r2, #1
 8013b66:	4619      	mov	r1, r3
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f000 f91a 	bl	8013da2 <USBD_CtlSendData>
        break;
 8013b6e:	e004      	b.n	8013b7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8013b70:	6839      	ldr	r1, [r7, #0]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f8aa 	bl	8013ccc <USBD_CtlError>
        break;
 8013b78:	bf00      	nop
}
 8013b7a:	bf00      	nop
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}

08013b82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b82:	b580      	push	{r7, lr}
 8013b84:	b082      	sub	sp, #8
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
 8013b8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b92:	3b01      	subs	r3, #1
 8013b94:	2b02      	cmp	r3, #2
 8013b96:	d81e      	bhi.n	8013bd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	88db      	ldrh	r3, [r3, #6]
 8013b9c:	2b02      	cmp	r3, #2
 8013b9e:	d004      	beq.n	8013baa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8013ba0:	6839      	ldr	r1, [r7, #0]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f000 f892 	bl	8013ccc <USBD_CtlError>
        break;
 8013ba8:	e01a      	b.n	8013be0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2201      	movs	r2, #1
 8013bae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d005      	beq.n	8013bc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	f043 0202 	orr.w	r2, r3, #2
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	330c      	adds	r3, #12
 8013bca:	2202      	movs	r2, #2
 8013bcc:	4619      	mov	r1, r3
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f000 f8e7 	bl	8013da2 <USBD_CtlSendData>
      break;
 8013bd4:	e004      	b.n	8013be0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8013bd6:	6839      	ldr	r1, [r7, #0]
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f000 f877 	bl	8013ccc <USBD_CtlError>
      break;
 8013bde:	bf00      	nop
  }
}
 8013be0:	bf00      	nop
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}

08013be8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	885b      	ldrh	r3, [r3, #2]
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	d106      	bne.n	8013c08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f000 f92b 	bl	8013e5e <USBD_CtlSendStatus>
  }
}
 8013c08:	bf00      	nop
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c20:	3b01      	subs	r3, #1
 8013c22:	2b02      	cmp	r3, #2
 8013c24:	d80b      	bhi.n	8013c3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	885b      	ldrh	r3, [r3, #2]
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d10c      	bne.n	8013c48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2200      	movs	r2, #0
 8013c32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f000 f911 	bl	8013e5e <USBD_CtlSendStatus>
      }
      break;
 8013c3c:	e004      	b.n	8013c48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8013c3e:	6839      	ldr	r1, [r7, #0]
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f000 f843 	bl	8013ccc <USBD_CtlError>
      break;
 8013c46:	e000      	b.n	8013c4a <USBD_ClrFeature+0x3a>
      break;
 8013c48:	bf00      	nop
  }
}
 8013c4a:	bf00      	nop
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}

08013c52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013c52:	b480      	push	{r7}
 8013c54:	b083      	sub	sp, #12
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	6078      	str	r0, [r7, #4]
 8013c5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	781a      	ldrb	r2, [r3, #0]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	785a      	ldrb	r2, [r3, #1]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	3302      	adds	r3, #2
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	3303      	adds	r3, #3
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	021b      	lsls	r3, r3, #8
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	4413      	add	r3, r2
 8013c82:	b29a      	uxth	r2, r3
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	3304      	adds	r3, #4
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	3305      	adds	r3, #5
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	021b      	lsls	r3, r3, #8
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	4413      	add	r3, r2
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	3306      	adds	r3, #6
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	3307      	adds	r3, #7
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	021b      	lsls	r3, r3, #8
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	4413      	add	r3, r2
 8013cba:	b29a      	uxth	r2, r3
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	80da      	strh	r2, [r3, #6]

}
 8013cc0:	bf00      	nop
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr

08013ccc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8013cd6:	2180      	movs	r1, #128	; 0x80
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f01a fdb1 	bl	802e840 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8013cde:	2100      	movs	r1, #0
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f01a fdad 	bl	802e840 <USBD_LL_StallEP>
}
 8013ce6:	bf00      	nop
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b086      	sub	sp, #24
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	60f8      	str	r0, [r7, #12]
 8013cf6:	60b9      	str	r1, [r7, #8]
 8013cf8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d032      	beq.n	8013d6a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f000 f834 	bl	8013d72 <USBD_GetLen>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	005b      	lsls	r3, r3, #1
 8013d12:	b29a      	uxth	r2, r3
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8013d18:	7dfb      	ldrb	r3, [r7, #23]
 8013d1a:	1c5a      	adds	r2, r3, #1
 8013d1c:	75fa      	strb	r2, [r7, #23]
 8013d1e:	461a      	mov	r2, r3
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	4413      	add	r3, r2
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	7812      	ldrb	r2, [r2, #0]
 8013d28:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8013d2a:	7dfb      	ldrb	r3, [r7, #23]
 8013d2c:	1c5a      	adds	r2, r3, #1
 8013d2e:	75fa      	strb	r2, [r7, #23]
 8013d30:	461a      	mov	r2, r3
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	4413      	add	r3, r2
 8013d36:	2203      	movs	r2, #3
 8013d38:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8013d3a:	e012      	b.n	8013d62 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	1c5a      	adds	r2, r3, #1
 8013d40:	60fa      	str	r2, [r7, #12]
 8013d42:	7dfa      	ldrb	r2, [r7, #23]
 8013d44:	1c51      	adds	r1, r2, #1
 8013d46:	75f9      	strb	r1, [r7, #23]
 8013d48:	4611      	mov	r1, r2
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	440a      	add	r2, r1
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8013d52:	7dfb      	ldrb	r3, [r7, #23]
 8013d54:	1c5a      	adds	r2, r3, #1
 8013d56:	75fa      	strb	r2, [r7, #23]
 8013d58:	461a      	mov	r2, r3
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	2200      	movs	r2, #0
 8013d60:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	781b      	ldrb	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d1e8      	bne.n	8013d3c <USBD_GetString+0x4e>
    }
  }
}
 8013d6a:	bf00      	nop
 8013d6c:	3718      	adds	r7, #24
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013d72:	b480      	push	{r7}
 8013d74:	b085      	sub	sp, #20
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8013d7e:	e005      	b.n	8013d8c <USBD_GetLen+0x1a>
  {
    len++;
 8013d80:	7bfb      	ldrb	r3, [r7, #15]
 8013d82:	3301      	adds	r3, #1
 8013d84:	73fb      	strb	r3, [r7, #15]
    buf++;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d1f5      	bne.n	8013d80 <USBD_GetLen+0xe>
  }

  return len;
 8013d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3714      	adds	r7, #20
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8013da2:	b580      	push	{r7, lr}
 8013da4:	b084      	sub	sp, #16
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	60f8      	str	r0, [r7, #12]
 8013daa:	60b9      	str	r1, [r7, #8]
 8013dac:	4613      	mov	r3, r2
 8013dae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	2202      	movs	r2, #2
 8013db4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013db8:	88fa      	ldrh	r2, [r7, #6]
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8013dbe:	88fa      	ldrh	r2, [r7, #6]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013dc4:	88fb      	ldrh	r3, [r7, #6]
 8013dc6:	68ba      	ldr	r2, [r7, #8]
 8013dc8:	2100      	movs	r1, #0
 8013dca:	68f8      	ldr	r0, [r7, #12]
 8013dcc:	f01a fdc2 	bl	802e954 <USBD_LL_Transmit>

  return USBD_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b084      	sub	sp, #16
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	60f8      	str	r0, [r7, #12]
 8013de2:	60b9      	str	r1, [r7, #8]
 8013de4:	4613      	mov	r3, r2
 8013de6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013de8:	88fb      	ldrh	r3, [r7, #6]
 8013dea:	68ba      	ldr	r2, [r7, #8]
 8013dec:	2100      	movs	r1, #0
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f01a fdb0 	bl	802e954 <USBD_LL_Transmit>

  return USBD_OK;
 8013df4:	2300      	movs	r3, #0
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3710      	adds	r7, #16
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8013dfe:	b580      	push	{r7, lr}
 8013e00:	b084      	sub	sp, #16
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	60f8      	str	r0, [r7, #12]
 8013e06:	60b9      	str	r1, [r7, #8]
 8013e08:	4613      	mov	r3, r2
 8013e0a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2203      	movs	r2, #3
 8013e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013e14:	88fa      	ldrh	r2, [r7, #6]
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8013e1c:	88fa      	ldrh	r2, [r7, #6]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013e24:	88fb      	ldrh	r3, [r7, #6]
 8013e26:	68ba      	ldr	r2, [r7, #8]
 8013e28:	2100      	movs	r1, #0
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f01a fdb5 	bl	802e99a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013e30:	2300      	movs	r3, #0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3710      	adds	r7, #16
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}

08013e3a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b084      	sub	sp, #16
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	60f8      	str	r0, [r7, #12]
 8013e42:	60b9      	str	r1, [r7, #8]
 8013e44:	4613      	mov	r3, r2
 8013e46:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013e48:	88fb      	ldrh	r3, [r7, #6]
 8013e4a:	68ba      	ldr	r2, [r7, #8]
 8013e4c:	2100      	movs	r1, #0
 8013e4e:	68f8      	ldr	r0, [r7, #12]
 8013e50:	f01a fda3 	bl	802e99a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013e54:	2300      	movs	r3, #0
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3710      	adds	r7, #16
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b082      	sub	sp, #8
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2204      	movs	r2, #4
 8013e6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013e6e:	2300      	movs	r3, #0
 8013e70:	2200      	movs	r2, #0
 8013e72:	2100      	movs	r1, #0
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f01a fd6d 	bl	802e954 <USBD_LL_Transmit>

  return USBD_OK;
 8013e7a:	2300      	movs	r3, #0
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2205      	movs	r2, #5
 8013e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e94:	2300      	movs	r3, #0
 8013e96:	2200      	movs	r2, #0
 8013e98:	2100      	movs	r1, #0
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f01a fd7d 	bl	802e99a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ea0:	2300      	movs	r3, #0
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3708      	adds	r7, #8
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}

08013eaa <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8013eaa:	b480      	push	{r7}
 8013eac:	b08b      	sub	sp, #44	; 0x2c
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	60f8      	str	r0, [r7, #12]
 8013eb2:	ed87 0a02 	vstr	s0, [r7, #8]
 8013eb6:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	881b      	ldrh	r3, [r3, #0]
 8013ec8:	461a      	mov	r2, r3
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	885b      	ldrh	r3, [r3, #2]
 8013ece:	fb02 f303 	mul.w	r3, r2, r3
 8013ed2:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8013ed4:	69bb      	ldr	r3, [r7, #24]
 8013ed6:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8013ed8:	e010      	b.n	8013efc <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	1d1a      	adds	r2, r3, #4
 8013ede:	627a      	str	r2, [r7, #36]	; 0x24
 8013ee0:	ed93 7a00 	vldr	s14, [r3]
 8013ee4:	6a3b      	ldr	r3, [r7, #32]
 8013ee6:	1d1a      	adds	r2, r3, #4
 8013ee8:	623a      	str	r2, [r7, #32]
 8013eea:	edd7 7a02 	vldr	s15, [r7, #8]
 8013eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8013ef6:	69fb      	ldr	r3, [r7, #28]
 8013ef8:	3b01      	subs	r3, #1
 8013efa:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d1eb      	bne.n	8013eda <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8013f02:	2300      	movs	r3, #0
 8013f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8013f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	372c      	adds	r7, #44	; 0x2c
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr

08013f16 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8013f16:	b480      	push	{r7}
 8013f18:	b08b      	sub	sp, #44	; 0x2c
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
 8013f1e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	881b      	ldrh	r3, [r3, #0]
 8013f30:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	885b      	ldrh	r3, [r3, #2]
 8013f36:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8013f38:	89fb      	ldrh	r3, [r7, #14]
 8013f3a:	61bb      	str	r3, [r7, #24]
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	693a      	ldr	r2, [r7, #16]
 8013f46:	4413      	add	r3, r2
 8013f48:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8013f4a:	89bb      	ldrh	r3, [r7, #12]
 8013f4c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8013f4e:	e00d      	b.n	8013f6c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8013f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f52:	1d1a      	adds	r2, r3, #4
 8013f54:	627a      	str	r2, [r7, #36]	; 0x24
 8013f56:	681a      	ldr	r2, [r3, #0]
 8013f58:	6a3b      	ldr	r3, [r7, #32]
 8013f5a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8013f5c:	89fb      	ldrh	r3, [r7, #14]
 8013f5e:	009b      	lsls	r3, r3, #2
 8013f60:	6a3a      	ldr	r2, [r7, #32]
 8013f62:	4413      	add	r3, r2
 8013f64:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8013f66:	69fb      	ldr	r3, [r7, #28]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d1ee      	bne.n	8013f50 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	3301      	adds	r3, #1
 8013f76:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	3b01      	subs	r3, #1
 8013f7c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d1dd      	bne.n	8013f40 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8013f84:	2300      	movs	r3, #0
 8013f86:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8013f88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	372c      	adds	r7, #44	; 0x2c
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b089      	sub	sp, #36	; 0x24
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	607a      	str	r2, [r7, #4]
 8013fa4:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	1d1a      	adds	r2, r3, #4
 8013fae:	60fa      	str	r2, [r7, #12]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8013fba:	e016      	b.n	8013fea <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	1d1a      	adds	r2, r3, #4
 8013fc0:	60fa      	str	r2, [r7, #12]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 8013fc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8013fca:	edd7 7a04 	vldr	s15, [r7, #16]
 8013fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd6:	d505      	bpl.n	8013fe4 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 8013fdc:	68ba      	ldr	r2, [r7, #8]
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	1ad3      	subs	r3, r2, r3
 8013fe2:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 8013fe4:	69bb      	ldr	r3, [r7, #24]
 8013fe6:	3b01      	subs	r3, #1
 8013fe8:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8013fea:	69bb      	ldr	r3, [r7, #24]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d1e5      	bne.n	8013fbc <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	69fa      	ldr	r2, [r7, #28]
 8013ff4:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	697a      	ldr	r2, [r7, #20]
 8013ffa:	601a      	str	r2, [r3, #0]
}
 8013ffc:	bf00      	nop
 8013ffe:	3724      	adds	r7, #36	; 0x24
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr

08014008 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 8014008:	b480      	push	{r7}
 801400a:	b089      	sub	sp, #36	; 0x24
 801400c:	af00      	add	r7, sp, #0
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	607a      	str	r2, [r7, #4]
 8014014:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 8014016:	2300      	movs	r3, #0
 8014018:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	1d1a      	adds	r2, r3, #4
 801401e:	60fa      	str	r2, [r7, #12]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	3b01      	subs	r3, #1
 8014028:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801402a:	e016      	b.n	801405a <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	1d1a      	adds	r2, r3, #4
 8014030:	60fa      	str	r2, [r7, #12]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 8014036:	ed97 7a07 	vldr	s14, [r7, #28]
 801403a:	edd7 7a04 	vldr	s15, [r7, #16]
 801403e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014046:	dd05      	ble.n	8014054 <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 801404c:	68ba      	ldr	r2, [r7, #8]
 801404e:	69bb      	ldr	r3, [r7, #24]
 8014050:	1ad3      	subs	r3, r2, r3
 8014052:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 8014054:	69bb      	ldr	r3, [r7, #24]
 8014056:	3b01      	subs	r3, #1
 8014058:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d1e5      	bne.n	801402c <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	69fa      	ldr	r2, [r7, #28]
 8014064:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	697a      	ldr	r2, [r7, #20]
 801406a:	601a      	str	r2, [r3, #0]
}
 801406c:	bf00      	nop
 801406e:	3724      	adds	r7, #36	; 0x24
 8014070:	46bd      	mov	sp, r7
 8014072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014076:	4770      	bx	lr

08014078 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b08a      	sub	sp, #40	; 0x28
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8014084:	f04f 0300 	mov.w	r3, #0
 8014088:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801408e:	e011      	b.n	80140b4 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	1d1a      	adds	r2, r3, #4
 8014094:	60fa      	str	r2, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 801409a:	edd7 7a07 	vldr	s15, [r7, #28]
 801409e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80140a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80140a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140aa:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 80140ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b0:	3b01      	subs	r3, #1
 80140b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80140b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d1ea      	bne.n	8014090 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	ee07 3a90 	vmov	s15, r3
 80140c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80140c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80140c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140cc:	edc7 7a06 	vstr	s15, [r7, #24]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80140d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80140d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80140dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e0:	db09      	blt.n	80140f6 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 80140e2:	ed97 0a06 	vldr	s0, [r7, #24]
 80140e6:	f01b f939 	bl	802f35c <sqrtf>
 80140ea:	eef0 7a40 	vmov.f32	s15, s0
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80140f4:	e004      	b.n	8014100 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	f04f 0200 	mov.w	r2, #0
 80140fc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80140fe:	bf00      	nop
}
 8014100:	bf00      	nop
 8014102:	3728      	adds	r7, #40	; 0x28
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8014108:	b480      	push	{r7}
 801410a:	b089      	sub	sp, #36	; 0x24
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	460b      	mov	r3, r1
 8014112:	607a      	str	r2, [r7, #4]
 8014114:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8014116:	2300      	movs	r3, #0
 8014118:	61fb      	str	r3, [r7, #28]
 801411a:	e043      	b.n	80141a4 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	005b      	lsls	r3, r3, #1
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	4413      	add	r3, r2
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	089b      	lsrs	r3, r3, #2
 8014128:	b29b      	uxth	r3, r3
 801412a:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	3301      	adds	r3, #1
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	4413      	add	r3, r2
 8014136:	881b      	ldrh	r3, [r3, #0]
 8014138:	089b      	lsrs	r3, r3, #2
 801413a:	b29b      	uxth	r3, r3
 801413c:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	68fa      	ldr	r2, [r7, #12]
 8014144:	4413      	add	r3, r2
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	009b      	lsls	r3, r3, #2
 801414e:	68fa      	ldr	r2, [r7, #12]
 8014150:	441a      	add	r2, r3
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	68f9      	ldr	r1, [r7, #12]
 8014158:	440b      	add	r3, r1
 801415a:	6812      	ldr	r2, [r2, #0]
 801415c:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	68fa      	ldr	r2, [r7, #12]
 8014164:	4413      	add	r3, r2
 8014166:	693a      	ldr	r2, [r7, #16]
 8014168:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 801416a:	69bb      	ldr	r3, [r7, #24]
 801416c:	3301      	adds	r3, #1
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	68fa      	ldr	r2, [r7, #12]
 8014172:	4413      	add	r3, r2
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	3301      	adds	r3, #1
 801417c:	009b      	lsls	r3, r3, #2
 801417e:	68fa      	ldr	r2, [r7, #12]
 8014180:	441a      	add	r2, r3
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	3301      	adds	r3, #1
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	68f9      	ldr	r1, [r7, #12]
 801418a:	440b      	add	r3, r1
 801418c:	6812      	ldr	r2, [r2, #0]
 801418e:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	3301      	adds	r3, #1
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	68fa      	ldr	r2, [r7, #12]
 8014198:	4413      	add	r3, r2
 801419a:	693a      	ldr	r2, [r7, #16]
 801419c:	601a      	str	r2, [r3, #0]

    i += 2;
 801419e:	69fb      	ldr	r3, [r7, #28]
 80141a0:	3302      	adds	r3, #2
 80141a2:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80141a4:	897b      	ldrh	r3, [r7, #10]
 80141a6:	69fa      	ldr	r2, [r7, #28]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d3b7      	bcc.n	801411c <arm_bitreversal_32+0x14>
  }
}
 80141ac:	bf00      	nop
 80141ae:	bf00      	nop
 80141b0:	3724      	adds	r7, #36	; 0x24
 80141b2:	46bd      	mov	sp, r7
 80141b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b8:	4770      	bx	lr

080141ba <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80141ba:	b580      	push	{r7, lr}
 80141bc:	b0a0      	sub	sp, #128	; 0x80
 80141be:	af00      	add	r7, sp, #0
 80141c0:	6078      	str	r0, [r7, #4]
 80141c2:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80141ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80141cc:	009b      	lsls	r3, r3, #2
 80141ce:	683a      	ldr	r2, [r7, #0]
 80141d0:	4413      	add	r3, r2
 80141d2:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 80141de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80141e0:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 80141e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80141e4:	085b      	lsrs	r3, r3, #1
 80141e6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80141e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80141ea:	009b      	lsls	r3, r3, #2
 80141ec:	683a      	ldr	r2, [r7, #0]
 80141ee:	4413      	add	r3, r2
 80141f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80141f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80141f4:	009b      	lsls	r3, r3, #2
 80141f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80141f8:	4413      	add	r3, r2
 80141fa:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80141fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80141fe:	089b      	lsrs	r3, r3, #2
 8014200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014202:	e1b6      	b.n	8014572 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	68db      	ldr	r3, [r3, #12]
 801421a:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 801421c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8014222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8014228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801422a:	689b      	ldr	r3, [r3, #8]
 801422c:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 801422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8014234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 801423a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8014240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8014246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 801424c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8014252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8014258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801425a:	689b      	ldr	r3, [r3, #8]
 801425c:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 801425e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8014264:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014268:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	1d1a      	adds	r2, r3, #4
 8014270:	603a      	str	r2, [r7, #0]
 8014272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014276:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 801427a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801427e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	1d1a      	adds	r2, r3, #4
 8014286:	603a      	str	r2, [r7, #0]
 8014288:	ee77 7a27 	vadd.f32	s15, s14, s15
 801428c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8014290:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014294:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	1d1a      	adds	r2, r3, #4
 801429c:	603a      	str	r2, [r7, #0]
 801429e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142a2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80142a6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80142aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	1d1a      	adds	r2, r3, #4
 80142b2:	603a      	str	r2, [r7, #0]
 80142b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142b8:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 80142bc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80142c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80142c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80142cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80142d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80142d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80142dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80142e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80142e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142e8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80142ec:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80142f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80142f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80142fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8014300:	edd7 7a02 	vldr	s15, [r7, #8]
 8014304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014306:	1d1a      	adds	r2, r3, #4
 8014308:	67fa      	str	r2, [r7, #124]	; 0x7c
 801430a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801430e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8014312:	ed97 7a07 	vldr	s14, [r7, #28]
 8014316:	edd7 7a03 	vldr	s15, [r7, #12]
 801431a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801431c:	1d1a      	adds	r2, r3, #4
 801431e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014324:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8014328:	ed97 7a08 	vldr	s14, [r7, #32]
 801432c:	edd7 7a04 	vldr	s15, [r7, #16]
 8014330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014332:	1d1a      	adds	r2, r3, #4
 8014334:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014336:	ee77 7a27 	vadd.f32	s15, s14, s15
 801433a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 801433e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014342:	edd7 7a05 	vldr	s15, [r7, #20]
 8014346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014348:	1d1a      	adds	r2, r3, #4
 801434a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801434c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014350:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8014354:	ed97 7a02 	vldr	s14, [r7, #8]
 8014358:	edd7 7a06 	vldr	s15, [r7, #24]
 801435c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014360:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8014364:	ed97 7a03 	vldr	s14, [r7, #12]
 8014368:	edd7 7a07 	vldr	s15, [r7, #28]
 801436c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014370:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8014374:	ed97 7a04 	vldr	s14, [r7, #16]
 8014378:	edd7 7a08 	vldr	s15, [r7, #32]
 801437c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014380:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8014384:	ed97 7a05 	vldr	s14, [r7, #20]
 8014388:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801438c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014390:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8014394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014396:	1d1a      	adds	r2, r3, #4
 8014398:	673a      	str	r2, [r7, #112]	; 0x70
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 801439e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143a0:	1d1a      	adds	r2, r3, #4
 80143a2:	673a      	str	r2, [r7, #112]	; 0x70
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80143a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80143ac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80143b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 80143b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80143bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80143c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80143c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80143cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80143d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143d4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80143d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80143dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80143e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143e4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80143e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80143ea:	1d1a      	adds	r2, r3, #4
 80143ec:	677a      	str	r2, [r7, #116]	; 0x74
 80143ee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80143f2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80143f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143fa:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80143fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014400:	1d1a      	adds	r2, r3, #4
 8014402:	677a      	str	r2, [r7, #116]	; 0x74
 8014404:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014408:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801440c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014410:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8014414:	edd7 7a02 	vldr	s15, [r7, #8]
 8014418:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801441c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014420:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8014424:	edd7 7a03 	vldr	s15, [r7, #12]
 8014428:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801442c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014430:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8014434:	edd7 7a03 	vldr	s15, [r7, #12]
 8014438:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801443c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014440:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8014444:	edd7 7a02 	vldr	s15, [r7, #8]
 8014448:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801444c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014450:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8014454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014456:	1d1a      	adds	r2, r3, #4
 8014458:	67ba      	str	r2, [r7, #120]	; 0x78
 801445a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801445e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8014462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014466:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 801446a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801446c:	1d1a      	adds	r2, r3, #4
 801446e:	67ba      	str	r2, [r7, #120]	; 0x78
 8014470:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014474:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8014478:	ee77 7a27 	vadd.f32	s15, s14, s15
 801447c:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8014480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014482:	1d1a      	adds	r2, r3, #4
 8014484:	673a      	str	r2, [r7, #112]	; 0x70
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 801448a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801448c:	1d1a      	adds	r2, r3, #4
 801448e:	673a      	str	r2, [r7, #112]	; 0x70
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8014494:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014498:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801449c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144a0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 80144a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80144a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80144ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144b0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 80144b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80144b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80144bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144c0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 80144c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80144c8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80144cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144d0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80144d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80144d6:	1d1a      	adds	r2, r3, #4
 80144d8:	677a      	str	r2, [r7, #116]	; 0x74
 80144da:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80144de:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80144e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144e6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80144ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80144ec:	1d1a      	adds	r2, r3, #4
 80144ee:	677a      	str	r2, [r7, #116]	; 0x74
 80144f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80144f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80144f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144fc:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8014500:	edd7 7a04 	vldr	s15, [r7, #16]
 8014504:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014508:	ee67 7a27 	vmul.f32	s15, s14, s15
 801450c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8014510:	edd7 7a05 	vldr	s15, [r7, #20]
 8014514:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014518:	ee67 7a27 	vmul.f32	s15, s14, s15
 801451c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8014520:	edd7 7a05 	vldr	s15, [r7, #20]
 8014524:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014528:	ee67 7a27 	vmul.f32	s15, s14, s15
 801452c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8014530:	edd7 7a04 	vldr	s15, [r7, #16]
 8014534:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014538:	ee67 7a27 	vmul.f32	s15, s14, s15
 801453c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8014540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014542:	1d1a      	adds	r2, r3, #4
 8014544:	67ba      	str	r2, [r7, #120]	; 0x78
 8014546:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801454a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801454e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014552:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8014556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014558:	1d1a      	adds	r2, r3, #4
 801455a:	67ba      	str	r2, [r7, #120]	; 0x78
 801455c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014560:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8014564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014568:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 801456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801456e:	3b01      	subs	r3, #1
 8014570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014574:	2b00      	cmp	r3, #0
 8014576:	f47f ae45 	bne.w	8014204 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 801457a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801457c:	b299      	uxth	r1, r3
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	685a      	ldr	r2, [r3, #4]
 8014582:	2302      	movs	r3, #2
 8014584:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8014586:	f000 fef1 	bl	801536c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 801458a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801458c:	b299      	uxth	r1, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	685a      	ldr	r2, [r3, #4]
 8014592:	2302      	movs	r3, #2
 8014594:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8014596:	f000 fee9 	bl	801536c <arm_radix8_butterfly_f32>
}
 801459a:	bf00      	nop
 801459c:	3780      	adds	r7, #128	; 0x80
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}

080145a2 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80145a2:	b580      	push	{r7, lr}
 80145a4:	b0ac      	sub	sp, #176	; 0xb0
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
 80145aa:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	881b      	ldrh	r3, [r3, #0]
 80145b0:	085b      	lsrs	r3, r3, #1
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80145b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80145bc:	009b      	lsls	r3, r3, #2
 80145be:	683a      	ldr	r2, [r7, #0]
 80145c0:	4413      	add	r3, r2
 80145c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80145c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80145d0:	4413      	add	r3, r2
 80145d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80145d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80145e0:	4413      	add	r3, r2
 80145e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80145ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80145ee:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80145f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145f4:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80145f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80145fa:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80145fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014600:	3b04      	subs	r3, #4
 8014602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8014606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801460a:	3b04      	subs	r3, #4
 801460c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8014610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014614:	3b04      	subs	r3, #4
 8014616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 801461a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014624:	4413      	add	r3, r2
 8014626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801463a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801463e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8014642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014646:	085b      	lsrs	r3, r3, #1
 8014648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 801464c:	2302      	movs	r3, #2
 801464e:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8014650:	2304      	movs	r3, #4
 8014652:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8014654:	2306      	movs	r3, #6
 8014656:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	ed93 7a00 	vldr	s14, [r3]
 801465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014662:	edd3 7a00 	vldr	s15, [r3]
 8014666:	ee77 7a27 	vadd.f32	s15, s14, s15
 801466a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	ed93 7a00 	vldr	s14, [r3]
 8014674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014678:	edd3 7a00 	vldr	s15, [r3]
 801467c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014680:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	3304      	adds	r3, #4
 8014688:	ed93 7a00 	vldr	s14, [r3]
 801468c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014690:	3304      	adds	r3, #4
 8014692:	edd3 7a00 	vldr	s15, [r3]
 8014696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801469a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	3304      	adds	r3, #4
 80146a2:	ed93 7a00 	vldr	s14, [r3]
 80146a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80146aa:	3304      	adds	r3, #4
 80146ac:	edd3 7a00 	vldr	s15, [r3]
 80146b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80146b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80146bc:	3304      	adds	r3, #4
 80146be:	ed93 7a00 	vldr	s14, [r3]
 80146c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80146c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80146ce:	3304      	adds	r3, #4
 80146d0:	edd3 7a00 	vldr	s15, [r3]
 80146d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80146dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80146e0:	edd3 7a00 	vldr	s15, [r3]
 80146e4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80146e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80146ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80146f0:	edd3 7a00 	vldr	s15, [r3]
 80146f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146f8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80146fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014700:	edd3 7a00 	vldr	s15, [r3]
 8014704:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014708:	ee37 7a67 	vsub.f32	s14, s14, s15
 801470c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014710:	edd3 7a00 	vldr	s15, [r3]
 8014714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014718:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 801471c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014720:	3304      	adds	r3, #4
 8014722:	edd3 7a00 	vldr	s15, [r3]
 8014726:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801472a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801472e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014732:	3304      	adds	r3, #4
 8014734:	edd3 7a00 	vldr	s15, [r3]
 8014738:	ee77 7a67 	vsub.f32	s15, s14, s15
 801473c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8014740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014744:	3304      	adds	r3, #4
 8014746:	edd3 7a00 	vldr	s15, [r3]
 801474a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801474e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014756:	3304      	adds	r3, #4
 8014758:	edd3 7a00 	vldr	s15, [r3]
 801475c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014760:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8014764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014768:	ed93 7a00 	vldr	s14, [r3]
 801476c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014778:	edd3 7a00 	vldr	s15, [r3]
 801477c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014780:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8014784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014788:	ed93 7a00 	vldr	s14, [r3]
 801478c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014798:	edd3 7a00 	vldr	s15, [r3]
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	1d1a      	adds	r2, r3, #4
 80147a0:	603a      	str	r2, [r7, #0]
 80147a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147a6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80147aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147ae:	3304      	adds	r3, #4
 80147b0:	ed93 7a00 	vldr	s14, [r3]
 80147b4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80147b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80147c0:	3304      	adds	r3, #4
 80147c2:	edd3 7a00 	vldr	s15, [r3]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	1d1a      	adds	r2, r3, #4
 80147ca:	603a      	str	r2, [r7, #0]
 80147cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147d0:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80147d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147d8:	1d1a      	adds	r2, r3, #4
 80147da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80147de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147e0:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80147e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147e6:	1d1a      	adds	r2, r3, #4
 80147e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80147ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ee:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80147f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80147f4:	1d1a      	adds	r2, r3, #4
 80147f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80147fa:	69fa      	ldr	r2, [r7, #28]
 80147fc:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80147fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014802:	1d1a      	adds	r2, r3, #4
 8014804:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014808:	6a3a      	ldr	r2, [r7, #32]
 801480a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 801480c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014810:	1d1a      	adds	r2, r3, #4
 8014812:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014816:	68fa      	ldr	r2, [r7, #12]
 8014818:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 801481a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801481e:	1d1a      	adds	r2, r3, #4
 8014820:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014824:	693a      	ldr	r2, [r7, #16]
 8014826:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8014828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014830:	4413      	add	r3, r2
 8014832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8014836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014838:	009b      	lsls	r3, r3, #2
 801483a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801483e:	4413      	add	r3, r2
 8014840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8014844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014846:	009b      	lsls	r3, r3, #2
 8014848:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801484c:	4413      	add	r3, r2
 801484e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8014852:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014856:	3b02      	subs	r3, #2
 8014858:	085b      	lsrs	r3, r3, #1
 801485a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801485e:	e31a      	b.n	8014e96 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	ed93 7a00 	vldr	s14, [r3]
 8014866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801486a:	edd3 7a00 	vldr	s15, [r3]
 801486e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014872:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	ed93 7a00 	vldr	s14, [r3]
 801487c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014880:	edd3 7a00 	vldr	s15, [r3]
 8014884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014888:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	3304      	adds	r3, #4
 8014890:	ed93 7a00 	vldr	s14, [r3]
 8014894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014898:	3304      	adds	r3, #4
 801489a:	edd3 7a00 	vldr	s15, [r3]
 801489e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148a2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	3304      	adds	r3, #4
 80148aa:	ed93 7a00 	vldr	s14, [r3]
 80148ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80148b2:	3304      	adds	r3, #4
 80148b4:	edd3 7a00 	vldr	s15, [r3]
 80148b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80148c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80148c4:	3304      	adds	r3, #4
 80148c6:	ed93 7a00 	vldr	s14, [r3]
 80148ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80148ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80148d6:	3304      	adds	r3, #4
 80148d8:	edd3 7a00 	vldr	s15, [r3]
 80148dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80148e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80148e8:	edd3 7a00 	vldr	s15, [r3]
 80148ec:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80148f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80148f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80148f8:	edd3 7a00 	vldr	s15, [r3]
 80148fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014900:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8014904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014908:	edd3 7a00 	vldr	s15, [r3]
 801490c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014918:	edd3 7a00 	vldr	s15, [r3]
 801491c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014920:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8014924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014928:	3304      	adds	r3, #4
 801492a:	edd3 7a00 	vldr	s15, [r3]
 801492e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014932:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801493a:	3304      	adds	r3, #4
 801493c:	edd3 7a00 	vldr	s15, [r3]
 8014940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014944:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8014948:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801494c:	3304      	adds	r3, #4
 801494e:	edd3 7a00 	vldr	s15, [r3]
 8014952:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014956:	ee37 7a67 	vsub.f32	s14, s14, s15
 801495a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801495e:	3304      	adds	r3, #4
 8014960:	edd3 7a00 	vldr	s15, [r3]
 8014964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014968:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 801496c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014970:	ed93 7a00 	vldr	s14, [r3]
 8014974:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014978:	ee37 7a27 	vadd.f32	s14, s14, s15
 801497c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014980:	edd3 7a00 	vldr	s15, [r3]
 8014984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014988:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 801498c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014990:	ed93 7a00 	vldr	s14, [r3]
 8014994:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014998:	ee37 7a27 	vadd.f32	s14, s14, s15
 801499c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80149a0:	edd3 7a00 	vldr	s15, [r3]
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	1d1a      	adds	r2, r3, #4
 80149a8:	603a      	str	r2, [r7, #0]
 80149aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149ae:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80149b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149b6:	3304      	adds	r3, #4
 80149b8:	ed93 7a00 	vldr	s14, [r3]
 80149bc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80149c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80149c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80149c8:	3304      	adds	r3, #4
 80149ca:	edd3 7a00 	vldr	s15, [r3]
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	1d1a      	adds	r2, r3, #4
 80149d2:	603a      	str	r2, [r7, #0]
 80149d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149d8:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80149dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80149e0:	3b04      	subs	r3, #4
 80149e2:	ed93 7a00 	vldr	s14, [r3]
 80149e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80149ea:	3b04      	subs	r3, #4
 80149ec:	edd3 7a00 	vldr	s15, [r3]
 80149f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149f4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80149f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80149fc:	3b04      	subs	r3, #4
 80149fe:	ed93 7a00 	vldr	s14, [r3]
 8014a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a06:	3b04      	subs	r3, #4
 8014a08:	edd3 7a00 	vldr	s15, [r3]
 8014a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a10:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8014a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a18:	ed93 7a00 	vldr	s14, [r3]
 8014a1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a20:	edd3 7a00 	vldr	s15, [r3]
 8014a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a28:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8014a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a30:	ed93 7a00 	vldr	s14, [r3]
 8014a34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a38:	edd3 7a00 	vldr	s15, [r3]
 8014a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a40:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8014a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014a48:	ed93 7a00 	vldr	s14, [r3]
 8014a4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014a50:	edd3 7a00 	vldr	s15, [r3]
 8014a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014a58:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a60:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8014a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a68:	ed93 7a00 	vldr	s14, [r3]
 8014a6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a70:	edd3 7a00 	vldr	s15, [r3]
 8014a74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014a78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014a7c:	3b04      	subs	r3, #4
 8014a7e:	edd3 7a00 	vldr	s15, [r3]
 8014a82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014a8a:	3b04      	subs	r3, #4
 8014a8c:	edd3 7a00 	vldr	s15, [r3]
 8014a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a94:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8014a98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014a9c:	3b04      	subs	r3, #4
 8014a9e:	edd3 7a00 	vldr	s15, [r3]
 8014aa2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014aae:	3b04      	subs	r3, #4
 8014ab0:	edd3 7a00 	vldr	s15, [r3]
 8014ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ab8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8014abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014ac0:	edd3 7a00 	vldr	s15, [r3]
 8014ac4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014ad0:	edd3 7a00 	vldr	s15, [r3]
 8014ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ad8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8014adc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014ae0:	ed93 7a00 	vldr	s14, [r3]
 8014ae4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014ae8:	edd3 7a00 	vldr	s15, [r3]
 8014aec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014af0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014af8:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8014afc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b00:	3b04      	subs	r3, #4
 8014b02:	ed93 7a00 	vldr	s14, [r3]
 8014b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b0a:	3b04      	subs	r3, #4
 8014b0c:	edd3 7a00 	vldr	s15, [r3]
 8014b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014b14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b1c:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8014b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b24:	ed93 7a00 	vldr	s14, [r3]
 8014b28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b34:	edd3 7a00 	vldr	s15, [r3]
 8014b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014b3c:	1f1a      	subs	r2, r3, #4
 8014b3e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b46:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8014b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b4e:	3b04      	subs	r3, #4
 8014b50:	ed93 7a00 	vldr	s14, [r3]
 8014b54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b60:	3b04      	subs	r3, #4
 8014b62:	edd3 7a00 	vldr	s15, [r3]
 8014b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014b6a:	1f1a      	subs	r2, r3, #4
 8014b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b74:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8014b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014b7c:	1d1a      	adds	r2, r3, #4
 8014b7e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8014b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014b8a:	1d1a      	adds	r2, r3, #4
 8014b8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8014b94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014b98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ba0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8014ba4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014ba8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bb0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8014bb4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014bb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bc0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8014bc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014bc8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8014bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014bd8:	1d1a      	adds	r2, r3, #4
 8014bda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014bde:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014be2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bea:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8014bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014bf2:	1d1a      	adds	r2, r3, #4
 8014bf4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014bf8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014bfc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c04:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8014c08:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014c0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c14:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8014c18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014c1c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c24:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8014c28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014c2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c34:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8014c38:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014c3c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c44:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8014c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c4c:	1f1a      	subs	r2, r3, #4
 8014c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014c52:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014c56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c5e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8014c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c66:	1f1a      	subs	r2, r3, #4
 8014c68:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014c6c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014c70:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c78:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8014c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8014c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8014c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014c94:	4413      	add	r3, r2
 8014c96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8014c9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8014c9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ca6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8014caa:	edd7 7a08 	vldr	s15, [r7, #32]
 8014cae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cb6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8014cba:	edd7 7a08 	vldr	s15, [r7, #32]
 8014cbe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cc6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8014cca:	edd7 7a07 	vldr	s15, [r7, #28]
 8014cce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cd6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8014cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014cde:	1d1a      	adds	r2, r3, #4
 8014ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014ce4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014ce8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cf0:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8014cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014cf8:	1d1a      	adds	r2, r3, #4
 8014cfa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014cfe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014d02:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d0a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8014d0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014d12:	eef1 7a67 	vneg.f32	s15, s15
 8014d16:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8014d22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d26:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d2e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8014d32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d36:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d3e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8014d42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014d46:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d4e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8014d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014d56:	1f1a      	subs	r2, r3, #4
 8014d58:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014d5c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014d60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d68:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8014d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014d70:	1f1a      	subs	r2, r3, #4
 8014d72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014d76:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014d7a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8014d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d82:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8014d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8014d8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8014d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014d9e:	4413      	add	r3, r2
 8014da0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8014da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8014da8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014db0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8014db4:	edd7 7a04 	vldr	s15, [r7, #16]
 8014db8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014dc0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8014dc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8014dc8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014dd0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8014dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8014dd8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014de0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8014de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014de8:	1d1a      	adds	r2, r3, #4
 8014dea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014dee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014df2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014dfa:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8014dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014e02:	1d1a      	adds	r2, r3, #4
 8014e04:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014e08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014e0c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e14:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8014e18:	edd7 7a06 	vldr	s15, [r7, #24]
 8014e1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e24:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8014e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8014e2c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e34:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8014e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8014e3c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e44:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8014e48:	edd7 7a06 	vldr	s15, [r7, #24]
 8014e4c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e54:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8014e58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014e5c:	1f1a      	subs	r2, r3, #4
 8014e5e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8014e62:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014e66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e6e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8014e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014e76:	1f1a      	subs	r2, r3, #4
 8014e78:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8014e7c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014e80:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e88:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8014e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014e90:	3b01      	subs	r3, #1
 8014e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	f47f ace0 	bne.w	8014860 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	ed93 7a00 	vldr	s14, [r3]
 8014ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014eaa:	edd3 7a00 	vldr	s15, [r3]
 8014eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014eb2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	ed93 7a00 	vldr	s14, [r3]
 8014ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ec0:	edd3 7a00 	vldr	s15, [r3]
 8014ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ec8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	3304      	adds	r3, #4
 8014ed0:	ed93 7a00 	vldr	s14, [r3]
 8014ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ed8:	3304      	adds	r3, #4
 8014eda:	edd3 7a00 	vldr	s15, [r3]
 8014ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ee2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	3304      	adds	r3, #4
 8014eea:	ed93 7a00 	vldr	s14, [r3]
 8014eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ef2:	3304      	adds	r3, #4
 8014ef4:	edd3 7a00 	vldr	s15, [r3]
 8014ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014efc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8014f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f04:	3304      	adds	r3, #4
 8014f06:	ed93 7a00 	vldr	s14, [r3]
 8014f0a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f16:	3304      	adds	r3, #4
 8014f18:	edd3 7a00 	vldr	s15, [r3]
 8014f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8014f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f28:	edd3 7a00 	vldr	s15, [r3]
 8014f2c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8014f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f38:	edd3 7a00 	vldr	s15, [r3]
 8014f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f40:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8014f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f48:	edd3 7a00 	vldr	s15, [r3]
 8014f4c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f58:	edd3 7a00 	vldr	s15, [r3]
 8014f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f60:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8014f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f68:	3304      	adds	r3, #4
 8014f6a:	edd3 7a00 	vldr	s15, [r3]
 8014f6e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f7a:	3304      	adds	r3, #4
 8014f7c:	edd3 7a00 	vldr	s15, [r3]
 8014f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f84:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8014f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f8c:	3304      	adds	r3, #4
 8014f8e:	edd3 7a00 	vldr	s15, [r3]
 8014f92:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f9e:	3304      	adds	r3, #4
 8014fa0:	edd3 7a00 	vldr	s15, [r3]
 8014fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fa8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8014fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014fb0:	ed93 7a00 	vldr	s14, [r3]
 8014fb4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fc0:	edd3 7a00 	vldr	s15, [r3]
 8014fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fc8:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8014fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014fd0:	ed93 7a00 	vldr	s14, [r3]
 8014fd4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fe0:	edd3 7a00 	vldr	s15, [r3]
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	1d1a      	adds	r2, r3, #4
 8014fe8:	603a      	str	r2, [r7, #0]
 8014fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fee:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8014ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014ff6:	3304      	adds	r3, #4
 8014ff8:	ed93 7a00 	vldr	s14, [r3]
 8014ffc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015008:	3304      	adds	r3, #4
 801500a:	edd3 7a00 	vldr	s15, [r3]
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	1d1a      	adds	r2, r3, #4
 8015012:	603a      	str	r2, [r7, #0]
 8015014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015018:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 801501c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8015024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 801502c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015030:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015038:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 801503c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015040:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015048:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 801504c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015050:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015058:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 801505c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015060:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015068:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 801506c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015070:	1d1a      	adds	r2, r3, #4
 8015072:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015076:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801507a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801507e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015082:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8015086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801508a:	1d1a      	adds	r2, r3, #4
 801508c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015090:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015094:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015098:	ee77 7a67 	vsub.f32	s15, s14, s15
 801509c:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80150a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80150a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80150b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80150b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80150b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80150c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80150c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80150c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150cc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80150d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80150d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80150d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150dc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80150e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80150e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80150e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150ec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80150f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80150f4:	1d1a      	adds	r2, r3, #4
 80150f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80150fa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80150fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015106:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 801510a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801510e:	1d1a      	adds	r2, r3, #4
 8015110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015114:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015118:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801511c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015120:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8015124:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 801512c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8015134:	edd7 7a03 	vldr	s15, [r7, #12]
 8015138:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801513c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015140:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8015144:	edd7 7a04 	vldr	s15, [r7, #16]
 8015148:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801514c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015150:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8015154:	edd7 7a04 	vldr	s15, [r7, #16]
 8015158:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801515c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015160:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8015164:	edd7 7a03 	vldr	s15, [r7, #12]
 8015168:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801516c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015170:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8015174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015178:	1d1a      	adds	r2, r3, #4
 801517a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801517e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015182:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015186:	ee77 7a27 	vadd.f32	s15, s14, s15
 801518a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 801518e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015192:	1d1a      	adds	r2, r3, #4
 8015194:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8015198:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801519c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80151a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151a4:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80151a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80151ac:	b299      	uxth	r1, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	685a      	ldr	r2, [r3, #4]
 80151b2:	2304      	movs	r3, #4
 80151b4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80151b6:	f000 f8d9 	bl	801536c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80151ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80151be:	b299      	uxth	r1, r3
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	685a      	ldr	r2, [r3, #4]
 80151c4:	2304      	movs	r3, #4
 80151c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80151c8:	f000 f8d0 	bl	801536c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80151cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80151d0:	b299      	uxth	r1, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	685a      	ldr	r2, [r3, #4]
 80151d6:	2304      	movs	r3, #4
 80151d8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80151da:	f000 f8c7 	bl	801536c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80151de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80151e2:	b299      	uxth	r1, r3
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	685a      	ldr	r2, [r3, #4]
 80151e8:	2304      	movs	r3, #4
 80151ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80151ec:	f000 f8be 	bl	801536c <arm_radix8_butterfly_f32>
}
 80151f0:	bf00      	nop
 80151f2:	37b0      	adds	r7, #176	; 0xb0
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b088      	sub	sp, #32
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	60b9      	str	r1, [r7, #8]
 8015202:	4611      	mov	r1, r2
 8015204:	461a      	mov	r2, r3
 8015206:	460b      	mov	r3, r1
 8015208:	71fb      	strb	r3, [r7, #7]
 801520a:	4613      	mov	r3, r2
 801520c:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	881b      	ldrh	r3, [r3, #0]
 8015212:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8015214:	79fb      	ldrb	r3, [r7, #7]
 8015216:	2b01      	cmp	r3, #1
 8015218:	d117      	bne.n	801524a <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	3304      	adds	r3, #4
 801521e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8015220:	2300      	movs	r3, #0
 8015222:	61fb      	str	r3, [r7, #28]
 8015224:	e00d      	b.n	8015242 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	edd3 7a00 	vldr	s15, [r3]
 801522c:	eef1 7a67 	vneg.f32	s15, s15
 8015230:	69bb      	ldr	r3, [r7, #24]
 8015232:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	3308      	adds	r3, #8
 801523a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 801523c:	69fb      	ldr	r3, [r7, #28]
 801523e:	3301      	adds	r3, #1
 8015240:	61fb      	str	r3, [r7, #28]
 8015242:	69fa      	ldr	r2, [r7, #28]
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	429a      	cmp	r2, r3
 8015248:	d3ed      	bcc.n	8015226 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015250:	d040      	beq.n	80152d4 <arm_cfft_f32+0xdc>
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015258:	d845      	bhi.n	80152e6 <arm_cfft_f32+0xee>
 801525a:	697b      	ldr	r3, [r7, #20]
 801525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015260:	d033      	beq.n	80152ca <arm_cfft_f32+0xd2>
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015268:	d83d      	bhi.n	80152e6 <arm_cfft_f32+0xee>
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015270:	d026      	beq.n	80152c0 <arm_cfft_f32+0xc8>
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015278:	d835      	bhi.n	80152e6 <arm_cfft_f32+0xee>
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015280:	d028      	beq.n	80152d4 <arm_cfft_f32+0xdc>
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015288:	d82d      	bhi.n	80152e6 <arm_cfft_f32+0xee>
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015290:	d01b      	beq.n	80152ca <arm_cfft_f32+0xd2>
 8015292:	697b      	ldr	r3, [r7, #20]
 8015294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015298:	d825      	bhi.n	80152e6 <arm_cfft_f32+0xee>
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	2b80      	cmp	r3, #128	; 0x80
 801529e:	d00f      	beq.n	80152c0 <arm_cfft_f32+0xc8>
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	2b80      	cmp	r3, #128	; 0x80
 80152a4:	d81f      	bhi.n	80152e6 <arm_cfft_f32+0xee>
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	2b40      	cmp	r3, #64	; 0x40
 80152aa:	d013      	beq.n	80152d4 <arm_cfft_f32+0xdc>
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	2b40      	cmp	r3, #64	; 0x40
 80152b0:	d819      	bhi.n	80152e6 <arm_cfft_f32+0xee>
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	2b10      	cmp	r3, #16
 80152b6:	d003      	beq.n	80152c0 <arm_cfft_f32+0xc8>
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	2b20      	cmp	r3, #32
 80152bc:	d005      	beq.n	80152ca <arm_cfft_f32+0xd2>
 80152be:	e012      	b.n	80152e6 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80152c0:	68b9      	ldr	r1, [r7, #8]
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f7fe ff79 	bl	80141ba <arm_cfft_radix8by2_f32>
    break;
 80152c8:	e00d      	b.n	80152e6 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80152ca:	68b9      	ldr	r1, [r7, #8]
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f7ff f968 	bl	80145a2 <arm_cfft_radix8by4_f32>
    break;
 80152d2:	e008      	b.n	80152e6 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	b299      	uxth	r1, r3
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	685a      	ldr	r2, [r3, #4]
 80152dc:	2301      	movs	r3, #1
 80152de:	68b8      	ldr	r0, [r7, #8]
 80152e0:	f000 f844 	bl	801536c <arm_radix8_butterfly_f32>
    break;
 80152e4:	bf00      	nop
  }

  if ( bitReverseFlag )
 80152e6:	79bb      	ldrb	r3, [r7, #6]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d007      	beq.n	80152fc <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	8999      	ldrh	r1, [r3, #12]
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	689b      	ldr	r3, [r3, #8]
 80152f4:	461a      	mov	r2, r3
 80152f6:	68b8      	ldr	r0, [r7, #8]
 80152f8:	f7fe ff06 	bl	8014108 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80152fc:	79fb      	ldrb	r3, [r7, #7]
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d130      	bne.n	8015364 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	ee07 3a90 	vmov	s15, r3
 8015308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801530c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015314:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 801531c:	2300      	movs	r3, #0
 801531e:	61fb      	str	r3, [r7, #28]
 8015320:	e01c      	b.n	801535c <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8015322:	69bb      	ldr	r3, [r7, #24]
 8015324:	1d1a      	adds	r2, r3, #4
 8015326:	61ba      	str	r2, [r7, #24]
 8015328:	ed93 7a00 	vldr	s14, [r3]
 801532c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015334:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8015338:	69bb      	ldr	r3, [r7, #24]
 801533a:	edd3 7a00 	vldr	s15, [r3]
 801533e:	eeb1 7a67 	vneg.f32	s14, s15
 8015342:	edd7 7a04 	vldr	s15, [r7, #16]
 8015346:	ee67 7a27 	vmul.f32	s15, s14, s15
 801534a:	69bb      	ldr	r3, [r7, #24]
 801534c:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8015350:	69bb      	ldr	r3, [r7, #24]
 8015352:	3304      	adds	r3, #4
 8015354:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	3301      	adds	r3, #1
 801535a:	61fb      	str	r3, [r7, #28]
 801535c:	69fa      	ldr	r2, [r7, #28]
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	429a      	cmp	r2, r3
 8015362:	d3de      	bcc.n	8015322 <arm_cfft_f32+0x12a>
    }
  }
}
 8015364:	bf00      	nop
 8015366:	3720      	adds	r7, #32
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 801536c:	b480      	push	{r7}
 801536e:	b0bd      	sub	sp, #244	; 0xf4
 8015370:	af00      	add	r7, sp, #0
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	607a      	str	r2, [r7, #4]
 8015376:	461a      	mov	r2, r3
 8015378:	460b      	mov	r3, r1
 801537a:	817b      	strh	r3, [r7, #10]
 801537c:	4613      	mov	r3, r2
 801537e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8015380:	4b09      	ldr	r3, [pc, #36]	; (80153a8 <arm_radix8_butterfly_f32+0x3c>)
 8015382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8015386:	897b      	ldrh	r3, [r7, #10]
 8015388:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 801538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8015394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015398:	08db      	lsrs	r3, r3, #3
 801539a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 801539e:	2300      	movs	r3, #0
 80153a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80153a4:	e002      	b.n	80153ac <arm_radix8_butterfly_f32+0x40>
 80153a6:	bf00      	nop
 80153a8:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80153ac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80153b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153b4:	4413      	add	r3, r2
 80153b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80153ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80153be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153c2:	4413      	add	r3, r2
 80153c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80153c8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80153cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153d0:	4413      	add	r3, r2
 80153d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80153d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80153da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153de:	4413      	add	r3, r2
 80153e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80153e4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80153e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153ec:	4413      	add	r3, r2
 80153ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80153f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80153f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80153fa:	4413      	add	r3, r2
 80153fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8015400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015408:	4413      	add	r3, r2
 801540a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 801540e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015412:	00db      	lsls	r3, r3, #3
 8015414:	68fa      	ldr	r2, [r7, #12]
 8015416:	4413      	add	r3, r2
 8015418:	ed93 7a00 	vldr	s14, [r3]
 801541c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015420:	00db      	lsls	r3, r3, #3
 8015422:	68fa      	ldr	r2, [r7, #12]
 8015424:	4413      	add	r3, r2
 8015426:	edd3 7a00 	vldr	s15, [r3]
 801542a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801542e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8015432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015436:	00db      	lsls	r3, r3, #3
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	4413      	add	r3, r2
 801543c:	ed93 7a00 	vldr	s14, [r3]
 8015440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015444:	00db      	lsls	r3, r3, #3
 8015446:	68fa      	ldr	r2, [r7, #12]
 8015448:	4413      	add	r3, r2
 801544a:	edd3 7a00 	vldr	s15, [r3]
 801544e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015452:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8015456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801545a:	00db      	lsls	r3, r3, #3
 801545c:	68fa      	ldr	r2, [r7, #12]
 801545e:	4413      	add	r3, r2
 8015460:	ed93 7a00 	vldr	s14, [r3]
 8015464:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015468:	00db      	lsls	r3, r3, #3
 801546a:	68fa      	ldr	r2, [r7, #12]
 801546c:	4413      	add	r3, r2
 801546e:	edd3 7a00 	vldr	s15, [r3]
 8015472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015476:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 801547a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801547e:	00db      	lsls	r3, r3, #3
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	4413      	add	r3, r2
 8015484:	ed93 7a00 	vldr	s14, [r3]
 8015488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801548c:	00db      	lsls	r3, r3, #3
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	4413      	add	r3, r2
 8015492:	edd3 7a00 	vldr	s15, [r3]
 8015496:	ee77 7a67 	vsub.f32	s15, s14, s15
 801549a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 801549e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80154a2:	00db      	lsls	r3, r3, #3
 80154a4:	68fa      	ldr	r2, [r7, #12]
 80154a6:	4413      	add	r3, r2
 80154a8:	ed93 7a00 	vldr	s14, [r3]
 80154ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154b0:	00db      	lsls	r3, r3, #3
 80154b2:	68fa      	ldr	r2, [r7, #12]
 80154b4:	4413      	add	r3, r2
 80154b6:	edd3 7a00 	vldr	s15, [r3]
 80154ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154be:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80154c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80154c6:	00db      	lsls	r3, r3, #3
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	4413      	add	r3, r2
 80154cc:	ed93 7a00 	vldr	s14, [r3]
 80154d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80154d4:	00db      	lsls	r3, r3, #3
 80154d6:	68fa      	ldr	r2, [r7, #12]
 80154d8:	4413      	add	r3, r2
 80154da:	edd3 7a00 	vldr	s15, [r3]
 80154de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154e2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80154e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80154ea:	00db      	lsls	r3, r3, #3
 80154ec:	68fa      	ldr	r2, [r7, #12]
 80154ee:	4413      	add	r3, r2
 80154f0:	ed93 7a00 	vldr	s14, [r3]
 80154f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80154f8:	00db      	lsls	r3, r3, #3
 80154fa:	68fa      	ldr	r2, [r7, #12]
 80154fc:	4413      	add	r3, r2
 80154fe:	edd3 7a00 	vldr	s15, [r3]
 8015502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015506:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 801550a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801550e:	00db      	lsls	r3, r3, #3
 8015510:	68fa      	ldr	r2, [r7, #12]
 8015512:	4413      	add	r3, r2
 8015514:	ed93 7a00 	vldr	s14, [r3]
 8015518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801551c:	00db      	lsls	r3, r3, #3
 801551e:	68fa      	ldr	r2, [r7, #12]
 8015520:	4413      	add	r3, r2
 8015522:	edd3 7a00 	vldr	s15, [r3]
 8015526:	ee77 7a67 	vsub.f32	s15, s14, s15
 801552a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 801552e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015532:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015536:	ee77 7a67 	vsub.f32	s15, s14, s15
 801553a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 801553e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015542:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015546:	ee77 7a27 	vadd.f32	s15, s14, s15
 801554a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 801554e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015552:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015556:	ee77 7a67 	vsub.f32	s15, s14, s15
 801555a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 801555e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015562:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015566:	ee77 7a27 	vadd.f32	s15, s14, s15
 801556a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 801556e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015572:	00db      	lsls	r3, r3, #3
 8015574:	68fa      	ldr	r2, [r7, #12]
 8015576:	4413      	add	r3, r2
 8015578:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801557c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015584:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8015588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801558c:	00db      	lsls	r3, r3, #3
 801558e:	68fa      	ldr	r2, [r7, #12]
 8015590:	4413      	add	r3, r2
 8015592:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015596:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801559a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801559e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80155a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80155a6:	00db      	lsls	r3, r3, #3
 80155a8:	3304      	adds	r3, #4
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	4413      	add	r3, r2
 80155ae:	ed93 7a00 	vldr	s14, [r3]
 80155b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80155b6:	00db      	lsls	r3, r3, #3
 80155b8:	3304      	adds	r3, #4
 80155ba:	68fa      	ldr	r2, [r7, #12]
 80155bc:	4413      	add	r3, r2
 80155be:	edd3 7a00 	vldr	s15, [r3]
 80155c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155c6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80155ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80155ce:	00db      	lsls	r3, r3, #3
 80155d0:	3304      	adds	r3, #4
 80155d2:	68fa      	ldr	r2, [r7, #12]
 80155d4:	4413      	add	r3, r2
 80155d6:	ed93 7a00 	vldr	s14, [r3]
 80155da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80155de:	00db      	lsls	r3, r3, #3
 80155e0:	3304      	adds	r3, #4
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	4413      	add	r3, r2
 80155e6:	edd3 7a00 	vldr	s15, [r3]
 80155ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155ee:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80155f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80155f6:	00db      	lsls	r3, r3, #3
 80155f8:	3304      	adds	r3, #4
 80155fa:	68fa      	ldr	r2, [r7, #12]
 80155fc:	4413      	add	r3, r2
 80155fe:	ed93 7a00 	vldr	s14, [r3]
 8015602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015606:	00db      	lsls	r3, r3, #3
 8015608:	3304      	adds	r3, #4
 801560a:	68fa      	ldr	r2, [r7, #12]
 801560c:	4413      	add	r3, r2
 801560e:	edd3 7a00 	vldr	s15, [r3]
 8015612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015616:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 801561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801561e:	00db      	lsls	r3, r3, #3
 8015620:	3304      	adds	r3, #4
 8015622:	68fa      	ldr	r2, [r7, #12]
 8015624:	4413      	add	r3, r2
 8015626:	ed93 7a00 	vldr	s14, [r3]
 801562a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801562e:	00db      	lsls	r3, r3, #3
 8015630:	3304      	adds	r3, #4
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	4413      	add	r3, r2
 8015636:	edd3 7a00 	vldr	s15, [r3]
 801563a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801563e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8015642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015646:	00db      	lsls	r3, r3, #3
 8015648:	3304      	adds	r3, #4
 801564a:	68fa      	ldr	r2, [r7, #12]
 801564c:	4413      	add	r3, r2
 801564e:	ed93 7a00 	vldr	s14, [r3]
 8015652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015656:	00db      	lsls	r3, r3, #3
 8015658:	3304      	adds	r3, #4
 801565a:	68fa      	ldr	r2, [r7, #12]
 801565c:	4413      	add	r3, r2
 801565e:	edd3 7a00 	vldr	s15, [r3]
 8015662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015666:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 801566a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801566e:	00db      	lsls	r3, r3, #3
 8015670:	3304      	adds	r3, #4
 8015672:	68fa      	ldr	r2, [r7, #12]
 8015674:	4413      	add	r3, r2
 8015676:	ed93 7a00 	vldr	s14, [r3]
 801567a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801567e:	00db      	lsls	r3, r3, #3
 8015680:	3304      	adds	r3, #4
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	4413      	add	r3, r2
 8015686:	edd3 7a00 	vldr	s15, [r3]
 801568a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801568e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8015692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015696:	00db      	lsls	r3, r3, #3
 8015698:	3304      	adds	r3, #4
 801569a:	68fa      	ldr	r2, [r7, #12]
 801569c:	4413      	add	r3, r2
 801569e:	ed93 7a00 	vldr	s14, [r3]
 80156a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	3304      	adds	r3, #4
 80156aa:	68fa      	ldr	r2, [r7, #12]
 80156ac:	4413      	add	r3, r2
 80156ae:	edd3 7a00 	vldr	s15, [r3]
 80156b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156b6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80156ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80156be:	00db      	lsls	r3, r3, #3
 80156c0:	3304      	adds	r3, #4
 80156c2:	68fa      	ldr	r2, [r7, #12]
 80156c4:	4413      	add	r3, r2
 80156c6:	ed93 7a00 	vldr	s14, [r3]
 80156ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80156ce:	00db      	lsls	r3, r3, #3
 80156d0:	3304      	adds	r3, #4
 80156d2:	68fa      	ldr	r2, [r7, #12]
 80156d4:	4413      	add	r3, r2
 80156d6:	edd3 7a00 	vldr	s15, [r3]
 80156da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156de:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80156e2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80156e6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80156ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156ee:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80156f2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80156f6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80156fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156fe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8015702:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015706:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801570a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801570e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8015712:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015716:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801571a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801571e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8015722:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015726:	00db      	lsls	r3, r3, #3
 8015728:	3304      	adds	r3, #4
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	4413      	add	r3, r2
 801572e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015732:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015736:	ee77 7a27 	vadd.f32	s15, s14, s15
 801573a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 801573e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015742:	00db      	lsls	r3, r3, #3
 8015744:	3304      	adds	r3, #4
 8015746:	68fa      	ldr	r2, [r7, #12]
 8015748:	4413      	add	r3, r2
 801574a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801574e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015756:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 801575a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801575e:	00db      	lsls	r3, r3, #3
 8015760:	68fa      	ldr	r2, [r7, #12]
 8015762:	4413      	add	r3, r2
 8015764:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015768:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801576c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015770:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8015774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015778:	00db      	lsls	r3, r3, #3
 801577a:	68fa      	ldr	r2, [r7, #12]
 801577c:	4413      	add	r3, r2
 801577e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015782:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015786:	ee77 7a67 	vsub.f32	s15, s14, s15
 801578a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 801578e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015792:	00db      	lsls	r3, r3, #3
 8015794:	3304      	adds	r3, #4
 8015796:	68fa      	ldr	r2, [r7, #12]
 8015798:	4413      	add	r3, r2
 801579a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801579e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80157a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80157aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80157ae:	00db      	lsls	r3, r3, #3
 80157b0:	3304      	adds	r3, #4
 80157b2:	68fa      	ldr	r2, [r7, #12]
 80157b4:	4413      	add	r3, r2
 80157b6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80157ba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80157be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157c2:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80157c6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80157ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80157ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157d2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80157d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157da:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80157de:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80157e2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80157e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157ea:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80157ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157f2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80157f6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80157fa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80157fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015802:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8015806:	ee67 7a27 	vmul.f32	s15, s14, s15
 801580a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 801580e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8015812:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015816:	ee77 7a27 	vadd.f32	s15, s14, s15
 801581a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015822:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8015826:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801582a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801582e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015832:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8015836:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801583a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801583e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015842:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8015846:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801584a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801584e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015852:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8015856:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801585a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801585e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015862:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8015866:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801586a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801586e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015872:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8015876:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801587a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801587e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015882:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8015886:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801588a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801588e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015892:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8015896:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801589a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801589e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158a2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80158a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80158aa:	00db      	lsls	r3, r3, #3
 80158ac:	68fa      	ldr	r2, [r7, #12]
 80158ae:	4413      	add	r3, r2
 80158b0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80158b4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80158b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158bc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80158c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80158c4:	00db      	lsls	r3, r3, #3
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	4413      	add	r3, r2
 80158ca:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80158ce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80158d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80158da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80158de:	00db      	lsls	r3, r3, #3
 80158e0:	68fa      	ldr	r2, [r7, #12]
 80158e2:	4413      	add	r3, r2
 80158e4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80158e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80158ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158f0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80158f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80158f8:	00db      	lsls	r3, r3, #3
 80158fa:	68fa      	ldr	r2, [r7, #12]
 80158fc:	4413      	add	r3, r2
 80158fe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015902:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015906:	ee77 7a67 	vsub.f32	s15, s14, s15
 801590a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 801590e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015912:	00db      	lsls	r3, r3, #3
 8015914:	3304      	adds	r3, #4
 8015916:	68fa      	ldr	r2, [r7, #12]
 8015918:	4413      	add	r3, r2
 801591a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801591e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8015922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015926:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 801592a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801592e:	00db      	lsls	r3, r3, #3
 8015930:	3304      	adds	r3, #4
 8015932:	68fa      	ldr	r2, [r7, #12]
 8015934:	4413      	add	r3, r2
 8015936:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801593a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801593e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015942:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8015946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801594a:	00db      	lsls	r3, r3, #3
 801594c:	3304      	adds	r3, #4
 801594e:	68fa      	ldr	r2, [r7, #12]
 8015950:	4413      	add	r3, r2
 8015952:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015956:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801595a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801595e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8015962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015966:	00db      	lsls	r3, r3, #3
 8015968:	3304      	adds	r3, #4
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	4413      	add	r3, r2
 801596e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015972:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8015976:	ee77 7a27 	vadd.f32	s15, s14, s15
 801597a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 801597e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015986:	4413      	add	r3, r2
 8015988:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 801598c:	897b      	ldrh	r3, [r7, #10]
 801598e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015992:	429a      	cmp	r2, r3
 8015994:	f4ff ad0a 	bcc.w	80153ac <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8015998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801599c:	2b07      	cmp	r3, #7
 801599e:	f240 84e3 	bls.w	8016368 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80159a2:	2300      	movs	r3, #0
 80159a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80159a8:	2301      	movs	r3, #1
 80159aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80159ae:	893b      	ldrh	r3, [r7, #8]
 80159b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80159b4:	4413      	add	r3, r2
 80159b6:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80159b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80159be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80159c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159c4:	4413      	add	r3, r2
 80159c6:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80159c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80159ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159cc:	4413      	add	r3, r2
 80159ce:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80159d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80159d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159d4:	4413      	add	r3, r2
 80159d6:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80159d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80159da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159dc:	4413      	add	r3, r2
 80159de:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80159e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80159e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159e4:	4413      	add	r3, r2
 80159e6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80159e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80159ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80159ec:	4413      	add	r3, r2
 80159ee:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80159f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80159f4:	00db      	lsls	r3, r3, #3
 80159f6:	687a      	ldr	r2, [r7, #4]
 80159f8:	4413      	add	r3, r2
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80159fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015a00:	00db      	lsls	r3, r3, #3
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	4413      	add	r3, r2
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8015a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a0c:	00db      	lsls	r3, r3, #3
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	4413      	add	r3, r2
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8015a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a18:	00db      	lsls	r3, r3, #3
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	4413      	add	r3, r2
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8015a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	687a      	ldr	r2, [r7, #4]
 8015a28:	4413      	add	r3, r2
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8015a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	4413      	add	r3, r2
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8015a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a3c:	00db      	lsls	r3, r3, #3
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	4413      	add	r3, r2
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8015a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015a4a:	00db      	lsls	r3, r3, #3
 8015a4c:	3304      	adds	r3, #4
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	4413      	add	r3, r2
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8015a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015a58:	00db      	lsls	r3, r3, #3
 8015a5a:	3304      	adds	r3, #4
 8015a5c:	687a      	ldr	r2, [r7, #4]
 8015a5e:	4413      	add	r3, r2
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8015a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a66:	00db      	lsls	r3, r3, #3
 8015a68:	3304      	adds	r3, #4
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8015a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a74:	00db      	lsls	r3, r3, #3
 8015a76:	3304      	adds	r3, #4
 8015a78:	687a      	ldr	r2, [r7, #4]
 8015a7a:	4413      	add	r3, r2
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8015a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a82:	00db      	lsls	r3, r3, #3
 8015a84:	3304      	adds	r3, #4
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	4413      	add	r3, r2
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8015a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a90:	00db      	lsls	r3, r3, #3
 8015a92:	3304      	adds	r3, #4
 8015a94:	687a      	ldr	r2, [r7, #4]
 8015a96:	4413      	add	r3, r2
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8015a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a9e:	00db      	lsls	r3, r3, #3
 8015aa0:	3304      	adds	r3, #4
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	4413      	add	r3, r2
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8015aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8015ab2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015aba:	4413      	add	r3, r2
 8015abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8015ac0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8015ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ac8:	4413      	add	r3, r2
 8015aca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8015ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ad6:	4413      	add	r3, r2
 8015ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8015adc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8015ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ae4:	4413      	add	r3, r2
 8015ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8015aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015af2:	4413      	add	r3, r2
 8015af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8015af8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b00:	4413      	add	r3, r2
 8015b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8015b06:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8015b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b0e:	4413      	add	r3, r2
 8015b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8015b14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015b18:	00db      	lsls	r3, r3, #3
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	4413      	add	r3, r2
 8015b1e:	ed93 7a00 	vldr	s14, [r3]
 8015b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015b26:	00db      	lsls	r3, r3, #3
 8015b28:	68fa      	ldr	r2, [r7, #12]
 8015b2a:	4413      	add	r3, r2
 8015b2c:	edd3 7a00 	vldr	s15, [r3]
 8015b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b34:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8015b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015b3c:	00db      	lsls	r3, r3, #3
 8015b3e:	68fa      	ldr	r2, [r7, #12]
 8015b40:	4413      	add	r3, r2
 8015b42:	ed93 7a00 	vldr	s14, [r3]
 8015b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015b4a:	00db      	lsls	r3, r3, #3
 8015b4c:	68fa      	ldr	r2, [r7, #12]
 8015b4e:	4413      	add	r3, r2
 8015b50:	edd3 7a00 	vldr	s15, [r3]
 8015b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b58:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8015b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015b60:	00db      	lsls	r3, r3, #3
 8015b62:	68fa      	ldr	r2, [r7, #12]
 8015b64:	4413      	add	r3, r2
 8015b66:	ed93 7a00 	vldr	s14, [r3]
 8015b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015b6e:	00db      	lsls	r3, r3, #3
 8015b70:	68fa      	ldr	r2, [r7, #12]
 8015b72:	4413      	add	r3, r2
 8015b74:	edd3 7a00 	vldr	s15, [r3]
 8015b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b7c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8015b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015b84:	00db      	lsls	r3, r3, #3
 8015b86:	68fa      	ldr	r2, [r7, #12]
 8015b88:	4413      	add	r3, r2
 8015b8a:	ed93 7a00 	vldr	s14, [r3]
 8015b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015b92:	00db      	lsls	r3, r3, #3
 8015b94:	68fa      	ldr	r2, [r7, #12]
 8015b96:	4413      	add	r3, r2
 8015b98:	edd3 7a00 	vldr	s15, [r3]
 8015b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ba0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8015ba4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015ba8:	00db      	lsls	r3, r3, #3
 8015baa:	68fa      	ldr	r2, [r7, #12]
 8015bac:	4413      	add	r3, r2
 8015bae:	ed93 7a00 	vldr	s14, [r3]
 8015bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015bb6:	00db      	lsls	r3, r3, #3
 8015bb8:	68fa      	ldr	r2, [r7, #12]
 8015bba:	4413      	add	r3, r2
 8015bbc:	edd3 7a00 	vldr	s15, [r3]
 8015bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bc4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8015bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015bcc:	00db      	lsls	r3, r3, #3
 8015bce:	68fa      	ldr	r2, [r7, #12]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	ed93 7a00 	vldr	s14, [r3]
 8015bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015bda:	00db      	lsls	r3, r3, #3
 8015bdc:	68fa      	ldr	r2, [r7, #12]
 8015bde:	4413      	add	r3, r2
 8015be0:	edd3 7a00 	vldr	s15, [r3]
 8015be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015be8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8015bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015bf0:	00db      	lsls	r3, r3, #3
 8015bf2:	68fa      	ldr	r2, [r7, #12]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	ed93 7a00 	vldr	s14, [r3]
 8015bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015bfe:	00db      	lsls	r3, r3, #3
 8015c00:	68fa      	ldr	r2, [r7, #12]
 8015c02:	4413      	add	r3, r2
 8015c04:	edd3 7a00 	vldr	s15, [r3]
 8015c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c0c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8015c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015c14:	00db      	lsls	r3, r3, #3
 8015c16:	68fa      	ldr	r2, [r7, #12]
 8015c18:	4413      	add	r3, r2
 8015c1a:	ed93 7a00 	vldr	s14, [r3]
 8015c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015c22:	00db      	lsls	r3, r3, #3
 8015c24:	68fa      	ldr	r2, [r7, #12]
 8015c26:	4413      	add	r3, r2
 8015c28:	edd3 7a00 	vldr	s15, [r3]
 8015c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c30:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8015c34:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015c38:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c40:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8015c44:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015c48:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c50:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8015c54:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015c58:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c60:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8015c64:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8015c68:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8015c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c70:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8015c74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015c78:	00db      	lsls	r3, r3, #3
 8015c7a:	68fa      	ldr	r2, [r7, #12]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015c82:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c8a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8015c8e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8015c92:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c9a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8015c9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015ca2:	00db      	lsls	r3, r3, #3
 8015ca4:	3304      	adds	r3, #4
 8015ca6:	68fa      	ldr	r2, [r7, #12]
 8015ca8:	4413      	add	r3, r2
 8015caa:	ed93 7a00 	vldr	s14, [r3]
 8015cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015cb2:	00db      	lsls	r3, r3, #3
 8015cb4:	3304      	adds	r3, #4
 8015cb6:	68fa      	ldr	r2, [r7, #12]
 8015cb8:	4413      	add	r3, r2
 8015cba:	edd3 7a00 	vldr	s15, [r3]
 8015cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cc2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8015cc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015cca:	00db      	lsls	r3, r3, #3
 8015ccc:	3304      	adds	r3, #4
 8015cce:	68fa      	ldr	r2, [r7, #12]
 8015cd0:	4413      	add	r3, r2
 8015cd2:	ed93 7a00 	vldr	s14, [r3]
 8015cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015cda:	00db      	lsls	r3, r3, #3
 8015cdc:	3304      	adds	r3, #4
 8015cde:	68fa      	ldr	r2, [r7, #12]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	edd3 7a00 	vldr	s15, [r3]
 8015ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cea:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8015cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015cf2:	00db      	lsls	r3, r3, #3
 8015cf4:	3304      	adds	r3, #4
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	ed93 7a00 	vldr	s14, [r3]
 8015cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d02:	00db      	lsls	r3, r3, #3
 8015d04:	3304      	adds	r3, #4
 8015d06:	68fa      	ldr	r2, [r7, #12]
 8015d08:	4413      	add	r3, r2
 8015d0a:	edd3 7a00 	vldr	s15, [r3]
 8015d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8015d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015d1a:	00db      	lsls	r3, r3, #3
 8015d1c:	3304      	adds	r3, #4
 8015d1e:	68fa      	ldr	r2, [r7, #12]
 8015d20:	4413      	add	r3, r2
 8015d22:	ed93 7a00 	vldr	s14, [r3]
 8015d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015d2a:	00db      	lsls	r3, r3, #3
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	68fa      	ldr	r2, [r7, #12]
 8015d30:	4413      	add	r3, r2
 8015d32:	edd3 7a00 	vldr	s15, [r3]
 8015d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d3a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8015d3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015d42:	00db      	lsls	r3, r3, #3
 8015d44:	3304      	adds	r3, #4
 8015d46:	68fa      	ldr	r2, [r7, #12]
 8015d48:	4413      	add	r3, r2
 8015d4a:	ed93 7a00 	vldr	s14, [r3]
 8015d4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015d52:	00db      	lsls	r3, r3, #3
 8015d54:	3304      	adds	r3, #4
 8015d56:	68fa      	ldr	r2, [r7, #12]
 8015d58:	4413      	add	r3, r2
 8015d5a:	edd3 7a00 	vldr	s15, [r3]
 8015d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d62:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8015d66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015d6a:	00db      	lsls	r3, r3, #3
 8015d6c:	3304      	adds	r3, #4
 8015d6e:	68fa      	ldr	r2, [r7, #12]
 8015d70:	4413      	add	r3, r2
 8015d72:	ed93 7a00 	vldr	s14, [r3]
 8015d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015d7a:	00db      	lsls	r3, r3, #3
 8015d7c:	3304      	adds	r3, #4
 8015d7e:	68fa      	ldr	r2, [r7, #12]
 8015d80:	4413      	add	r3, r2
 8015d82:	edd3 7a00 	vldr	s15, [r3]
 8015d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d8a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8015d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015d92:	00db      	lsls	r3, r3, #3
 8015d94:	3304      	adds	r3, #4
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	4413      	add	r3, r2
 8015d9a:	ed93 7a00 	vldr	s14, [r3]
 8015d9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015da2:	00db      	lsls	r3, r3, #3
 8015da4:	3304      	adds	r3, #4
 8015da6:	68fa      	ldr	r2, [r7, #12]
 8015da8:	4413      	add	r3, r2
 8015daa:	edd3 7a00 	vldr	s15, [r3]
 8015dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015db2:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8015db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015dba:	00db      	lsls	r3, r3, #3
 8015dbc:	3304      	adds	r3, #4
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	4413      	add	r3, r2
 8015dc2:	ed93 7a00 	vldr	s14, [r3]
 8015dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015dca:	00db      	lsls	r3, r3, #3
 8015dcc:	3304      	adds	r3, #4
 8015dce:	68fa      	ldr	r2, [r7, #12]
 8015dd0:	4413      	add	r3, r2
 8015dd2:	edd3 7a00 	vldr	s15, [r3]
 8015dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dda:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8015dde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015de2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dea:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8015dee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015df2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015dfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8015dfe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015e02:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e0a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8015e0e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015e12:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8015e1e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015e22:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e2a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8015e2e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8015e32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8015e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e3a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8015e3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015e42:	00db      	lsls	r3, r3, #3
 8015e44:	3304      	adds	r3, #4
 8015e46:	68fa      	ldr	r2, [r7, #12]
 8015e48:	4413      	add	r3, r2
 8015e4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015e4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e56:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8015e5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015e5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8015e6a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015e6e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8015e7a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015e7e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e86:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8015e8a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015e8e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e96:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8015e9a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015e9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ea6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8015eaa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015eae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015eb6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8015eba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015ebe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ec6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8015eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015ece:	00db      	lsls	r3, r3, #3
 8015ed0:	68fa      	ldr	r2, [r7, #12]
 8015ed2:	4413      	add	r3, r2
 8015ed4:	ed97 7a07 	vldr	s14, [r7, #28]
 8015ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8015edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ee0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8015ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015ee8:	00db      	lsls	r3, r3, #3
 8015eea:	3304      	adds	r3, #4
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	4413      	add	r3, r2
 8015ef0:	ed97 7a05 	vldr	s14, [r7, #20]
 8015ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8015ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015efc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8015f00:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015f04:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f0c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8015f10:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015f14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f1c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8015f20:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015f24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f2c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8015f30:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015f34:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f3c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8015f40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015f44:	00db      	lsls	r3, r3, #3
 8015f46:	68fa      	ldr	r2, [r7, #12]
 8015f48:	4413      	add	r3, r2
 8015f4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8015f4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8015f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f56:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8015f5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015f5e:	00db      	lsls	r3, r3, #3
 8015f60:	3304      	adds	r3, #4
 8015f62:	68fa      	ldr	r2, [r7, #12]
 8015f64:	4413      	add	r3, r2
 8015f66:	ed97 7a05 	vldr	s14, [r7, #20]
 8015f6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8015f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f72:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8015f76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015f7a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f82:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8015f86:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015f8a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f92:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8015f96:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015f9a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fa2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8015fa6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015faa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fb2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8015fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015fba:	00db      	lsls	r3, r3, #3
 8015fbc:	68fa      	ldr	r2, [r7, #12]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8015fc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8015fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fcc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8015fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015fd4:	00db      	lsls	r3, r3, #3
 8015fd6:	3304      	adds	r3, #4
 8015fd8:	68fa      	ldr	r2, [r7, #12]
 8015fda:	4413      	add	r3, r2
 8015fdc:	ed97 7a05 	vldr	s14, [r7, #20]
 8015fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8015fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fe8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8015fec:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8015ff0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8015ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ff8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8015ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016000:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8016004:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8016008:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801600c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016010:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016018:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 801601c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8016020:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016028:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801602c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016030:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8016034:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8016038:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801603c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016040:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016048:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 801604c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016050:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016058:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 801605c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016060:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016068:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 801606c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8016070:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016078:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 801607c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8016080:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016088:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 801608c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016090:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016098:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 801609c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80160a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80160a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160a8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80160ac:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80160b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80160b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160b8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80160bc:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80160c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80160c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160c8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80160cc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80160d0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80160d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160d8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80160dc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80160e0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80160e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160e8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80160ec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80160f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80160f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160f8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80160fc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016100:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016108:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 801610c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016110:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8016114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016118:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 801611c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016120:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8016124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016128:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 801612c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016130:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016138:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 801613c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016140:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016148:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 801614c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8016150:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016158:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 801615c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016160:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016168:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 801616c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8016170:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016178:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 801617c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016180:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016188:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 801618c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016190:	00db      	lsls	r3, r3, #3
 8016192:	68fa      	ldr	r2, [r7, #12]
 8016194:	4413      	add	r3, r2
 8016196:	ed97 7a07 	vldr	s14, [r7, #28]
 801619a:	edd7 7a06 	vldr	s15, [r7, #24]
 801619e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80161a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80161a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161aa:	00db      	lsls	r3, r3, #3
 80161ac:	3304      	adds	r3, #4
 80161ae:	68fa      	ldr	r2, [r7, #12]
 80161b0:	4413      	add	r3, r2
 80161b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80161b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80161ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80161c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80161c6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80161ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80161d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80161d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80161da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80161e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80161e6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80161ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80161f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80161f6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80161fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8016202:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016206:	00db      	lsls	r3, r3, #3
 8016208:	68fa      	ldr	r2, [r7, #12]
 801620a:	4413      	add	r3, r2
 801620c:	ed97 7a07 	vldr	s14, [r7, #28]
 8016210:	edd7 7a06 	vldr	s15, [r7, #24]
 8016214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016218:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 801621c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	3304      	adds	r3, #4
 8016224:	68fa      	ldr	r2, [r7, #12]
 8016226:	4413      	add	r3, r2
 8016228:	ed97 7a05 	vldr	s14, [r7, #20]
 801622c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016234:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8016238:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801623c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016244:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8016248:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801624c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8016250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016254:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8016258:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801625c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8016260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016264:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8016268:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801626c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016274:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8016278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801627c:	00db      	lsls	r3, r3, #3
 801627e:	68fa      	ldr	r2, [r7, #12]
 8016280:	4413      	add	r3, r2
 8016282:	ed97 7a07 	vldr	s14, [r7, #28]
 8016286:	edd7 7a06 	vldr	s15, [r7, #24]
 801628a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801628e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8016292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016296:	00db      	lsls	r3, r3, #3
 8016298:	3304      	adds	r3, #4
 801629a:	68fa      	ldr	r2, [r7, #12]
 801629c:	4413      	add	r3, r2
 801629e:	ed97 7a05 	vldr	s14, [r7, #20]
 80162a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80162a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162aa:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80162ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80162b2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80162b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162ba:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80162be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80162c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80162c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162ca:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80162ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80162d2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80162d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162da:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80162de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80162e2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80162e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162ea:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80162ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80162f2:	00db      	lsls	r3, r3, #3
 80162f4:	68fa      	ldr	r2, [r7, #12]
 80162f6:	4413      	add	r3, r2
 80162f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80162fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8016300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016304:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8016308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801630c:	00db      	lsls	r3, r3, #3
 801630e:	3304      	adds	r3, #4
 8016310:	68fa      	ldr	r2, [r7, #12]
 8016312:	4413      	add	r3, r2
 8016314:	ed97 7a05 	vldr	s14, [r7, #20]
 8016318:	edd7 7a04 	vldr	s15, [r7, #16]
 801631c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016320:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8016324:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801632c:	4413      	add	r3, r2
 801632e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8016332:	897b      	ldrh	r3, [r7, #10]
 8016334:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016338:	429a      	cmp	r2, r3
 801633a:	f4ff abba 	bcc.w	8015ab2 <arm_radix8_butterfly_f32+0x746>

         j++;
 801633e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016342:	3301      	adds	r3, #1
 8016344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8016348:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016350:	429a      	cmp	r2, r3
 8016352:	f4ff ab2c 	bcc.w	80159ae <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8016356:	893b      	ldrh	r3, [r7, #8]
 8016358:	00db      	lsls	r3, r3, #3
 801635a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 801635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016360:	2b07      	cmp	r3, #7
 8016362:	f63f a813 	bhi.w	801538c <arm_radix8_butterfly_f32+0x20>
}
 8016366:	e000      	b.n	801636a <arm_radix8_butterfly_f32+0xffe>
         break;
 8016368:	bf00      	nop
}
 801636a:	bf00      	nop
 801636c:	37f4      	adds	r7, #244	; 0xf4
 801636e:	46bd      	mov	sp, r7
 8016370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop

08016378 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8016378:	b480      	push	{r7}
 801637a:	b095      	sub	sp, #84	; 0x54
 801637c:	af00      	add	r7, sp, #0
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	60b9      	str	r1, [r7, #8]
 8016382:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	695b      	ldr	r3, [r3, #20]
 8016388:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 801638a:	68bb      	ldr	r3, [r7, #8]
 801638c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	881b      	ldrh	r3, [r3, #0]
 8016396:	3b01      	subs	r3, #1
 8016398:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 801639a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80163a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80163a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80163ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80163b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163b4:	1d1a      	adds	r2, r3, #4
 80163b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80163bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163be:	1d1a      	adds	r2, r3, #4
 80163c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80163c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80163ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80163ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80163d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80163da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80163de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163e2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80163e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80163ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80163ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	1d1a      	adds	r2, r3, #4
 80163f6:	607a      	str	r2, [r7, #4]
 80163f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80163fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016400:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8016404:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016408:	edd7 7a08 	vldr	s15, [r7, #32]
 801640c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	1d1a      	adds	r2, r3, #4
 8016414:	607a      	str	r2, [r7, #4]
 8016416:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801641a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801641e:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8016422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016424:	00db      	lsls	r3, r3, #3
 8016426:	68ba      	ldr	r2, [r7, #8]
 8016428:	4413      	add	r3, r2
 801642a:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 801642c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801642e:	3308      	adds	r3, #8
 8016430:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8016432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016434:	685b      	ldr	r3, [r3, #4]
 8016436:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8016438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 801643e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8016444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 801644a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801644c:	1d1a      	adds	r2, r3, #4
 801644e:	64ba      	str	r2, [r7, #72]	; 0x48
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8016454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016456:	1d1a      	adds	r2, r3, #4
 8016458:	64ba      	str	r2, [r7, #72]	; 0x48
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 801645e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016462:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016466:	ee77 7a67 	vsub.f32	s15, s14, s15
 801646a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 801646e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016472:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016476:	ee77 7a27 	vadd.f32	s15, s14, s15
 801647a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 801647e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016482:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801648a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 801648e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016492:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016496:	ee67 7a27 	vmul.f32	s15, s14, s15
 801649a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 801649e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80164a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80164a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164aa:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80164ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80164b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80164b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164ba:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80164be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80164c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80164c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80164ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80164ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80164d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80164d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	1d1a      	adds	r2, r3, #4
 80164de:	607a      	str	r2, [r7, #4]
 80164e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80164e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80164e8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80164ec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80164f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80164f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80164f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80164fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016500:	edd7 7a05 	vldr	s15, [r7, #20]
 8016504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	1d1a      	adds	r2, r3, #4
 801650c:	607a      	str	r2, [r7, #4]
 801650e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016516:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 801651a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801651c:	3308      	adds	r3, #8
 801651e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8016520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016522:	3b08      	subs	r3, #8
 8016524:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8016526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016528:	3b01      	subs	r3, #1
 801652a:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 801652c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801652e:	2b00      	cmp	r3, #0
 8016530:	f73f af7f 	bgt.w	8016432 <stage_rfft_f32+0xba>
}
 8016534:	bf00      	nop
 8016536:	bf00      	nop
 8016538:	3754      	adds	r7, #84	; 0x54
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr

08016542 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8016542:	b480      	push	{r7}
 8016544:	b095      	sub	sp, #84	; 0x54
 8016546:	af00      	add	r7, sp, #0
 8016548:	60f8      	str	r0, [r7, #12]
 801654a:	60b9      	str	r1, [r7, #8]
 801654c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	695b      	ldr	r3, [r3, #20]
 8016552:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	881b      	ldrh	r3, [r3, #0]
 8016560:	3b01      	subs	r3, #1
 8016562:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8016564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 801656a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8016570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016572:	3308      	adds	r3, #8
 8016574:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8016576:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801657a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801657e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	1d1a      	adds	r2, r3, #4
 8016586:	607a      	str	r2, [r7, #4]
 8016588:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801658c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016590:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8016594:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016598:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801659c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	1d1a      	adds	r2, r3, #4
 80165a4:	607a      	str	r2, [r7, #4]
 80165a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80165aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165ae:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80165b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165b4:	00db      	lsls	r3, r3, #3
 80165b6:	68ba      	ldr	r2, [r7, #8]
 80165b8:	4413      	add	r3, r2
 80165ba:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80165bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165be:	3308      	adds	r3, #8
 80165c0:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80165c2:	e07c      	b.n	80166be <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80165c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165c6:	685b      	ldr	r3, [r3, #4]
 80165c8:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80165ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80165d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80165d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80165dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165de:	1d1a      	adds	r2, r3, #4
 80165e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80165e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165e8:	1d1a      	adds	r2, r3, #4
 80165ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80165f0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80165f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80165f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8016600:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016608:	ee77 7a27 	vadd.f32	s15, s14, s15
 801660c:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8016610:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016614:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016618:	ee67 7a27 	vmul.f32	s15, s14, s15
 801661c:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8016620:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016624:	edd7 7a08 	vldr	s15, [r7, #32]
 8016628:	ee67 7a27 	vmul.f32	s15, s14, s15
 801662c:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8016630:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016634:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016638:	ee67 7a27 	vmul.f32	s15, s14, s15
 801663c:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8016640:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016644:	edd7 7a08 	vldr	s15, [r7, #32]
 8016648:	ee67 7a27 	vmul.f32	s15, s14, s15
 801664c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8016650:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016654:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016658:	ee37 7a27 	vadd.f32	s14, s14, s15
 801665c:	edd7 7a07 	vldr	s15, [r7, #28]
 8016660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016664:	edd7 7a06 	vldr	s15, [r7, #24]
 8016668:	ee77 7a67 	vsub.f32	s15, s14, s15
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	1d1a      	adds	r2, r3, #4
 8016670:	607a      	str	r2, [r7, #4]
 8016672:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016676:	ee67 7a87 	vmul.f32	s15, s15, s14
 801667a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 801667e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016682:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016686:	ee37 7a67 	vsub.f32	s14, s14, s15
 801668a:	edd7 7a05 	vldr	s15, [r7, #20]
 801668e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016692:	edd7 7a04 	vldr	s15, [r7, #16]
 8016696:	ee77 7a67 	vsub.f32	s15, s14, s15
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	1d1a      	adds	r2, r3, #4
 801669e:	607a      	str	r2, [r7, #4]
 80166a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80166a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80166a8:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80166ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166ae:	3308      	adds	r3, #8
 80166b0:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80166b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166b4:	3b08      	subs	r3, #8
 80166b6:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80166b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166ba:	3b01      	subs	r3, #1
 80166bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 80166be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	f73f af7f 	bgt.w	80165c4 <merge_rfft_f32+0x82>
   }

}
 80166c6:	bf00      	nop
 80166c8:	bf00      	nop
 80166ca:	3754      	adds	r7, #84	; 0x54
 80166cc:	46bd      	mov	sp, r7
 80166ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d2:	4770      	bx	lr

080166d4 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b086      	sub	sp, #24
 80166d8:	af00      	add	r7, sp, #0
 80166da:	60f8      	str	r0, [r7, #12]
 80166dc:	60b9      	str	r1, [r7, #8]
 80166de:	607a      	str	r2, [r7, #4]
 80166e0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80166e6:	78fb      	ldrb	r3, [r7, #3]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d00b      	beq.n	8016704 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80166ec:	687a      	ldr	r2, [r7, #4]
 80166ee:	68b9      	ldr	r1, [r7, #8]
 80166f0:	68f8      	ldr	r0, [r7, #12]
 80166f2:	f7ff ff26 	bl	8016542 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80166f6:	78fa      	ldrb	r2, [r7, #3]
 80166f8:	2301      	movs	r3, #1
 80166fa:	6879      	ldr	r1, [r7, #4]
 80166fc:	6978      	ldr	r0, [r7, #20]
 80166fe:	f7fe fd7b 	bl	80151f8 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8016702:	e00a      	b.n	801671a <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8016704:	78fa      	ldrb	r2, [r7, #3]
 8016706:	2301      	movs	r3, #1
 8016708:	68b9      	ldr	r1, [r7, #8]
 801670a:	6978      	ldr	r0, [r7, #20]
 801670c:	f7fe fd74 	bl	80151f8 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	68b9      	ldr	r1, [r7, #8]
 8016714:	68f8      	ldr	r0, [r7, #12]
 8016716:	f7ff fe2f 	bl	8016378 <stage_rfft_f32>
}
 801671a:	bf00      	nop
 801671c:	3718      	adds	r7, #24
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}

08016722 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 8016722:	b580      	push	{r7, lr}
 8016724:	b08e      	sub	sp, #56	; 0x38
 8016726:	af08      	add	r7, sp, #32
 8016728:	60f8      	str	r0, [r7, #12]
 801672a:	60b9      	str	r1, [r7, #8]
 801672c:	607a      	str	r2, [r7, #4]
 801672e:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 8016730:	2300      	movs	r3, #0
 8016732:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 8016734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016736:	689b      	ldr	r3, [r3, #8]
 8016738:	f003 0303 	and.w	r3, r3, #3
 801673c:	2b00      	cmp	r3, #0
 801673e:	d002      	beq.n	8016746 <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 8016740:	23fd      	movs	r3, #253	; 0xfd
 8016742:	75fb      	strb	r3, [r7, #23]
        goto out;
 8016744:	e015      	b.n	8016772 <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 8016746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016748:	9306      	str	r3, [sp, #24]
 801674a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801674c:	9305      	str	r3, [sp, #20]
 801674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016750:	9304      	str	r3, [sp, #16]
 8016752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016754:	9303      	str	r3, [sp, #12]
 8016756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016758:	9302      	str	r3, [sp, #8]
 801675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675c:	9301      	str	r3, [sp, #4]
 801675e:	6a3b      	ldr	r3, [r7, #32]
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	687a      	ldr	r2, [r7, #4]
 8016766:	68b9      	ldr	r1, [r7, #8]
 8016768:	68f8      	ldr	r0, [r7, #12]
 801676a:	f000 f87d 	bl	8016868 <arm_convolve_s8>
 801676e:	4603      	mov	r3, r0
 8016770:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 8016772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016776:	4618      	mov	r0, r3
 8016778:	3718      	adds	r7, #24
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}

0801677e <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801677e:	b480      	push	{r7}
 8016780:	b083      	sub	sp, #12
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
 8016786:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	683a      	ldr	r2, [r7, #0]
 801678e:	6892      	ldr	r2, [r2, #8]
 8016790:	fb02 f303 	mul.w	r3, r2, r3
 8016794:	683a      	ldr	r2, [r7, #0]
 8016796:	6852      	ldr	r2, [r2, #4]
 8016798:	fb02 f303 	mul.w	r3, r2, r3
 801679c:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801679e:	4618      	mov	r0, r3
 80167a0:	370c      	adds	r7, #12
 80167a2:	46bd      	mov	sp, r7
 80167a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a8:	4770      	bx	lr

080167aa <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 80167aa:	b5b0      	push	{r4, r5, r7, lr}
 80167ac:	b092      	sub	sp, #72	; 0x48
 80167ae:	af0a      	add	r7, sp, #40	; 0x28
 80167b0:	60f8      	str	r0, [r7, #12]
 80167b2:	60b9      	str	r1, [r7, #8]
 80167b4:	607a      	str	r2, [r7, #4]
 80167b6:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	68db      	ldr	r3, [r3, #12]
 80167bc:	f003 0303 	and.w	r3, r3, #3
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d10f      	bne.n	80167e4 <arm_convolve_1x1_s8_fast+0x3a>
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	691b      	ldr	r3, [r3, #16]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d10b      	bne.n	80167e4 <arm_convolve_1x1_s8_fast+0x3a>
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	695b      	ldr	r3, [r3, #20]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d107      	bne.n	80167e4 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 80167d8:	2b01      	cmp	r3, #1
 80167da:	d103      	bne.n	80167e4 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	68db      	ldr	r3, [r3, #12]
 80167e0:	2b01      	cmp	r3, #1
 80167e2:	d002      	beq.n	80167ea <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 80167e4:	f06f 0302 	mvn.w	r3, #2
 80167e8:	e02f      	b.n	801684a <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	689b      	ldr	r3, [r3, #8]
 80167ee:	683a      	ldr	r2, [r7, #0]
 80167f0:	6852      	ldr	r2, [r2, #4]
 80167f2:	fb02 f303 	mul.w	r3, r2, r3
 80167f6:	683a      	ldr	r2, [r7, #0]
 80167f8:	6812      	ldr	r2, [r2, #0]
 80167fa:	fb02 f303 	mul.w	r3, r2, r3
 80167fe:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 8016800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016802:	68db      	ldr	r3, [r3, #12]
 8016804:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	68db      	ldr	r3, [r3, #12]
 801680a:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8016810:	687a      	ldr	r2, [r7, #4]
 8016812:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 8016814:	68b9      	ldr	r1, [r7, #8]
 8016816:	6809      	ldr	r1, [r1, #0]
 8016818:	68b8      	ldr	r0, [r7, #8]
 801681a:	6840      	ldr	r0, [r0, #4]
 801681c:	68bc      	ldr	r4, [r7, #8]
 801681e:	6a24      	ldr	r4, [r4, #32]
 8016820:	68bd      	ldr	r5, [r7, #8]
 8016822:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8016824:	9508      	str	r5, [sp, #32]
 8016826:	9407      	str	r4, [sp, #28]
 8016828:	9006      	str	r0, [sp, #24]
 801682a:	9105      	str	r1, [sp, #20]
 801682c:	6979      	ldr	r1, [r7, #20]
 801682e:	9104      	str	r1, [sp, #16]
 8016830:	69b9      	ldr	r1, [r7, #24]
 8016832:	9103      	str	r1, [sp, #12]
 8016834:	69f9      	ldr	r1, [r7, #28]
 8016836:	9102      	str	r1, [sp, #8]
 8016838:	9201      	str	r2, [sp, #4]
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801683e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016844:	f002 fcaa 	bl	801919c <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8016848:	2300      	movs	r3, #0
}
 801684a:	4618      	mov	r0, r3
 801684c:	3720      	adds	r7, #32
 801684e:	46bd      	mov	sp, r7
 8016850:	bdb0      	pop	{r4, r5, r7, pc}

08016852 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 8016852:	b480      	push	{r7}
 8016854:	b083      	sub	sp, #12
 8016856:	af00      	add	r7, sp, #0
 8016858:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 801685a:	2300      	movs	r3, #0
}
 801685c:	4618      	mov	r0, r3
 801685e:	370c      	adds	r7, #12
 8016860:	46bd      	mov	sp, r7
 8016862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016866:	4770      	bx	lr

08016868 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 8016868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801686c:	b0dd      	sub	sp, #372	; 0x174
 801686e:	af08      	add	r7, sp, #32
 8016870:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 8016874:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
 8016878:	6030      	str	r0, [r6, #0]
 801687a:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 801687e:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8016882:	6001      	str	r1, [r0, #0]
 8016884:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8016888:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 801688c:	600a      	str	r2, [r1, #0]
 801688e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8016892:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8016896:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 8016898:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801689c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    const uint16_t input_batches = input_dims->n;
 80168a8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80168ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
    const uint16_t input_x = input_dims->w;
 80168b8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80168bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	689b      	ldr	r3, [r3, #8]
 80168c4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    const uint16_t input_y = input_dims->h;
 80168c8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80168cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	685b      	ldr	r3, [r3, #4]
 80168d4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    const uint16_t input_ch = input_dims->c;
 80168d8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80168dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	68db      	ldr	r3, [r3, #12]
 80168e4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    const uint16_t kernel_x = filter_dims->w;
 80168e8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80168ec:	689b      	ldr	r3, [r3, #8]
 80168ee:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t kernel_y = filter_dims->h;
 80168f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t output_x = output_dims->w;
 80168fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8016900:	689b      	ldr	r3, [r3, #8]
 8016902:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t output_y = output_dims->h;
 8016906:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t output_ch = output_dims->c;
 8016910:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8016914:	68db      	ldr	r3, [r3, #12]
 8016916:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

    const uint16_t pad_x = conv_params->padding.w;
 801691a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801691e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	691b      	ldr	r3, [r3, #16]
 8016926:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t pad_y = conv_params->padding.h;
 801692a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801692e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	695b      	ldr	r3, [r3, #20]
 8016936:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t stride_x = conv_params->stride.w;
 801693a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801693e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	689b      	ldr	r3, [r3, #8]
 8016946:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t stride_y = conv_params->stride.h;
 801694a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801694e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const int32_t input_offset = conv_params->input_offset;
 801695a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801695e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    const int32_t out_offset = conv_params->output_offset;
 801696a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801696e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    const int32_t out_activation_min = conv_params->activation.min;
 801697a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801697e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	6a1b      	ldr	r3, [r3, #32]
 8016986:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_activation_max = conv_params->activation.max;
 801698a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801698e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016996:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t *output_mult = quant_params->multiplier;
 801699a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801699e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    int32_t *output_shift = quant_params->shift;
 80169aa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80169ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	685b      	ldr	r3, [r3, #4]
 80169b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 80169ba:	2300      	movs	r3, #0
 80169bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80169c0:	e37f      	b.n	80170c2 <arm_convolve_s8+0x85a>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 80169c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80169c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q7_t *out = output_data;
 80169ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80169ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 80169d2:	2300      	movs	r3, #0
 80169d4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80169d8:	e0da      	b.n	8016b90 <arm_convolve_s8+0x328>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 80169da:	2300      	movs	r3, #0
 80169dc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80169e0:	e0ca      	b.n	8016b78 <arm_convolve_s8+0x310>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80169e2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80169e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80169ea:	fb03 f202 	mul.w	r2, r3, r2
 80169ee:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80169f2:	1ad3      	subs	r3, r2, r3
 80169f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80169f8:	e065      	b.n	8016ac6 <arm_convolve_s8+0x25e>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 80169fa:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 80169fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016a02:	fb03 f202 	mul.w	r2, r3, r2
 8016a06:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8016a0a:	1ad3      	subs	r3, r2, r3
 8016a0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8016a10:	e044      	b.n	8016a9c <arm_convolve_s8+0x234>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 8016a12:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	db0f      	blt.n	8016a3a <arm_convolve_s8+0x1d2>
 8016a1a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8016a1e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016a22:	429a      	cmp	r2, r3
 8016a24:	da09      	bge.n	8016a3a <arm_convolve_s8+0x1d2>
 8016a26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	db05      	blt.n	8016a3a <arm_convolve_s8+0x1d2>
 8016a2e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8016a32:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016a36:	429a      	cmp	r2, r3
 8016a38:	db09      	blt.n	8016a4e <arm_convolve_s8+0x1e6>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 8016a3a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8016a3e:	005b      	lsls	r3, r3, #1
 8016a40:	461a      	mov	r2, r3
 8016a42:	2100      	movs	r1, #0
 8016a44:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8016a48:	f01a fd2a 	bl	80314a0 <memset>
 8016a4c:	e019      	b.n	8016a82 <arm_convolve_s8+0x21a>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 8016a4e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8016a52:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016a56:	fb03 f202 	mul.w	r2, r3, r2
 8016a5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016a5e:	4413      	add	r3, r2
 8016a60:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8016a64:	fb02 f303 	mul.w	r3, r2, r3
 8016a68:	461a      	mov	r2, r3
 8016a6a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016a6e:	1898      	adds	r0, r3, r2
 8016a70:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8016a74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8016a78:	b21b      	sxth	r3, r3
 8016a7a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8016a7e:	f009 ffea 	bl	8020a56 <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 8016a82:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8016a86:	005b      	lsls	r3, r3, #1
 8016a88:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8016a8c:	4413      	add	r3, r2
 8016a8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                         i_ker_x++)
 8016a92:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016a96:	3301      	adds	r3, #1
 8016a98:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8016a9c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8016aa0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016aa4:	fb03 f202 	mul.w	r2, r3, r2
 8016aa8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8016aac:	1ad2      	subs	r2, r2, r3
 8016aae:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8016ab2:	4413      	add	r3, r2
 8016ab4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	dbaa      	blt.n	8016a12 <arm_convolve_s8+0x1aa>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8016abc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8016ac6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8016aca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8016ace:	fb03 f202 	mul.w	r2, r3, r2
 8016ad2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8016ad6:	1ad2      	subs	r2, r2, r3
 8016ad8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8016adc:	4413      	add	r3, r2
 8016ade:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	db89      	blt.n	80169fa <arm_convolve_s8+0x192>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 8016ae6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8016aea:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8016aee:	fb02 f303 	mul.w	r3, r2, r3
 8016af2:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8016af6:	fb02 f303 	mul.w	r3, r2, r3
 8016afa:	009b      	lsls	r3, r3, #2
 8016afc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8016b00:	4413      	add	r3, r2
 8016b02:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d131      	bne.n	8016b6e <arm_convolve_s8+0x306>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 8016b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016b0e:	b21b      	sxth	r3, r3
 8016b10:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8016b14:	b212      	sxth	r2, r2
 8016b16:	f8b7 0118 	ldrh.w	r0, [r7, #280]	; 0x118
 8016b1a:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8016b1e:	fb10 f101 	smulbb	r1, r0, r1
 8016b22:	b289      	uxth	r1, r1
 8016b24:	f8b7 0116 	ldrh.w	r0, [r7, #278]	; 0x116
 8016b28:	fb10 f101 	smulbb	r1, r0, r1
 8016b2c:	b289      	uxth	r1, r1
 8016b2e:	f8b7 610e 	ldrh.w	r6, [r7, #270]	; 0x10e
 8016b32:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8016b36:	9006      	str	r0, [sp, #24]
 8016b38:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 8016b3c:	9005      	str	r0, [sp, #20]
 8016b3e:	9104      	str	r1, [sp, #16]
 8016b40:	9203      	str	r2, [sp, #12]
 8016b42:	9302      	str	r3, [sp, #8]
 8016b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016b48:	9301      	str	r3, [sp, #4]
 8016b4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8016b4e:	9300      	str	r3, [sp, #0]
 8016b50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016b54:	4632      	mov	r2, r6
 8016b56:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8016b5a:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8016b5e:	f000 fba3 	bl	80172a8 <arm_nn_mat_mult_kernel_s8_s16>
 8016b62:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 8016b66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8016b6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8016b6e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016b72:	3301      	adds	r3, #1
 8016b74:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8016b78:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8016b7c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016b80:	429a      	cmp	r2, r3
 8016b82:	f6ff af2e 	blt.w	80169e2 <arm_convolve_s8+0x17a>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8016b86:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8016b90:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8016b94:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8016b98:	429a      	cmp	r2, r3
 8016b9a:	f6ff af1e 	blt.w	80169da <arm_convolve_s8+0x172>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 8016b9e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8016ba2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	f000 8266 	beq.w	8017078 <arm_convolve_s8+0x810>
        {
            const q7_t *ker_a = filter_data;
 8016bac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8016bb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            int i;

            for (i = 0; i < output_ch; i++)
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016bba:	e256      	b.n	801706a <arm_convolve_s8+0x802>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                if (bias_data)
 8016bc2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d008      	beq.n	8016bdc <arm_convolve_s8+0x374>
                {
                    sum = bias_data[i];
 8016bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016bce:	009b      	lsls	r3, r3, #2
 8016bd0:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8016bd4:	4413      	add	r3, r2
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 8016bdc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016be0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8016be4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8016be8:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8016bea:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8016bee:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8016bf2:	fb02 f303 	mul.w	r3, r2, r3
 8016bf6:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8016bfa:	fb02 f303 	mul.w	r3, r2, r3
 8016bfe:	109b      	asrs	r3, r3, #2
 8016c00:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

                while (col_count)
 8016c04:	e102      	b.n	8016e0c <arm_convolve_s8+0x5a4>
 8016c06:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016c0e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8016c12:	601a      	str	r2, [r3, #0]
 8016c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8016c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	461a      	mov	r2, r3
 8016c36:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016c3e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8016c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	1d1a      	adds	r2, r3, #4
 8016c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016c4c:	601a      	str	r2, [r3, #0]

    return (val);
 8016c4e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016c56:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8016c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8016c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8016c64:	2308      	movs	r3, #8
 8016c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8016c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c6e:	f003 031f 	and.w	r3, r3, #31
 8016c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (op2 == 0U)
 8016c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d102      	bne.n	8016c84 <arm_convolve_s8+0x41c>
  {
    return op1;
 8016c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016c82:	e005      	b.n	8016c90 <arm_convolve_s8+0x428>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8016c84:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016c88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c8c:	fa62 f303 	ror.w	r3, r2, r3
 8016c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016c98:	fa2f f383 	sxtb16	r3, r3
 8016c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8016ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016ca4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q31_t inAbuf2 = __SXTB16(inA);
 8016ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8016cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016cb4:	fa2f f383 	sxtb16	r3, r3
 8016cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8016cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8016cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016cd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016cdc:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8016ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016cea:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8016cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8016cf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8016cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016cfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016cfc:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8016d00:	673b      	str	r3, [r7, #112]	; 0x70
 8016d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d04:	461a      	mov	r2, r3
 8016d06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016d0a:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 8016d0c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016d10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016d14:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8016d16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8016d1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    memcpy(&val, *in_q15, 4);
 8016d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016d30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8016d34:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8016d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	1d1a      	adds	r2, r3, #4
 8016d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016d42:	601a      	str	r2, [r3, #0]
    return (val);
 8016d44:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016d48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8016d4c:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8016d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8016d52:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016d56:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016d66:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8016d6a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8016d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016d7a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8016d7e:	fb23 1302 	smlad	r3, r3, r2, r1
 8016d82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8016d86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8016d8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    memcpy(&val, *in_q15, 4);
 8016d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	461a      	mov	r2, r3
 8016da0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016da4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016da8:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8016daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	1d1a      	adds	r2, r3, #4
 8016db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016db6:	601a      	str	r2, [r3, #0]
    return (val);
 8016db8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016dbc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8016dc0:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8016dc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8016dc6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016dca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4619      	mov	r1, r3
 8016dd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016dd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016dda:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8016dde:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8016de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016dea:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8016dee:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016df2:	fb23 1302 	smlad	r3, r3, r2, r1
 8016df6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8016dfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016dfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    col_count--;
 8016e02:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8016e06:	3b01      	subs	r3, #1
 8016e08:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8016e0c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	f47f aef8 	bne.w	8016c06 <arm_convolve_s8+0x39e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8016e16:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8016e1a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8016e1e:	fb12 f303 	smulbb	r3, r2, r3
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8016e28:	fb12 f303 	smulbb	r3, r2, r3
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	f003 0303 	and.w	r3, r3, #3
 8016e32:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8016e36:	e025      	b.n	8016e84 <arm_convolve_s8+0x61c>
                {
                    q7_t ker_a1 = *ker_a++;
 8016e38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e3c:	1c5a      	adds	r2, r3, #1
 8016e3e:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
                    q15_t ip_b1 = *ip_as_col++;
 8016e48:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016e4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	1c99      	adds	r1, r3, #2
 8016e54:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8016e58:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8016e5c:	6011      	str	r1, [r2, #0]
 8016e5e:	881b      	ldrh	r3, [r3, #0]
 8016e60:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
                    sum += ker_a1 * ip_b1;
 8016e64:	f997 30eb 	ldrsb.w	r3, [r7, #235]	; 0xeb
 8016e68:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
 8016e6c:	fb02 f303 	mul.w	r3, r2, r3
 8016e70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016e74:	4413      	add	r3, r2
 8016e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    col_count--;
 8016e7a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8016e7e:	3b01      	subs	r3, #1
 8016e80:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8016e84:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d1d5      	bne.n	8016e38 <arm_convolve_s8+0x5d0>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8016e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016e90:	009b      	lsls	r3, r3, #2
 8016e92:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8016e96:	4413      	add	r3, r2
 8016e98:	681a      	ldr	r2, [r3, #0]
 8016e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016e9e:	009b      	lsls	r3, r3, #2
 8016ea0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8016ea4:	440b      	add	r3, r1
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8016eac:	66f9      	str	r1, [r7, #108]	; 0x6c
 8016eae:	66ba      	str	r2, [r7, #104]	; 0x68
 8016eb0:	667b      	str	r3, [r7, #100]	; 0x64
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016eb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016eb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016eba:	fa02 f303 	lsl.w	r3, r2, r3
 8016ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8016ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
    q31_t result = 0;
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	65bb      	str	r3, [r7, #88]	; 0x58
    mult.word.low = 1 << 30;
 8016ec8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016ecc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016ed4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8016ed6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016eda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016ede:	2200      	movs	r2, #0
 8016ee0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016ee2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016ee6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016ee8:	17c8      	asrs	r0, r1, #31
 8016eea:	4688      	mov	r8, r1
 8016eec:	4681      	mov	r9, r0
 8016eee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8016ef0:	17c8      	asrs	r0, r1, #31
 8016ef2:	468a      	mov	sl, r1
 8016ef4:	4683      	mov	fp, r0
 8016ef6:	fb0a f009 	mul.w	r0, sl, r9
 8016efa:	fb08 f10b 	mul.w	r1, r8, fp
 8016efe:	4401      	add	r1, r0
 8016f00:	fba8 450a 	umull	r4, r5, r8, sl
 8016f04:	4429      	add	r1, r5
 8016f06:	460d      	mov	r5, r1
 8016f08:	1911      	adds	r1, r2, r4
 8016f0a:	6039      	str	r1, [r7, #0]
 8016f0c:	416b      	adcs	r3, r5
 8016f0e:	607b      	str	r3, [r7, #4]
 8016f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 8016f18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016f1c:	f04f 0200 	mov.w	r2, #0
 8016f20:	f04f 0300 	mov.w	r3, #0
 8016f24:	0fc2      	lsrs	r2, r0, #31
 8016f26:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016f2a:	17cb      	asrs	r3, r1, #31
 8016f2c:	4613      	mov	r3, r2
 8016f2e:	65bb      	str	r3, [r7, #88]	; 0x58
    return result;
 8016f30:	6dba      	ldr	r2, [r7, #88]	; 0x58
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	dc02      	bgt.n	8016f3e <arm_convolve_s8+0x6d6>
 8016f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f3a:	425b      	negs	r3, r3
 8016f3c:	e000      	b.n	8016f40 <arm_convolve_s8+0x6d8>
 8016f3e:	2300      	movs	r3, #0
 8016f40:	657a      	str	r2, [r7, #84]	; 0x54
 8016f42:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8016f46:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8016f4a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016f4c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016f54:	2200      	movs	r2, #0
 8016f56:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016f58:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016f5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016f60:	2201      	movs	r2, #1
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	409a      	lsls	r2, r3
 8016f66:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8016f6e:	3a01      	subs	r2, #1
 8016f70:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8016f72:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016f76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016f7a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8016f7e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8016f82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f84:	6812      	ldr	r2, [r2, #0]
 8016f86:	400a      	ands	r2, r1
 8016f88:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8016f8a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016f92:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8016f96:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8016f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f9c:	6812      	ldr	r2, [r2, #0]
 8016f9e:	fa41 f202 	asr.w	r2, r1, r2
 8016fa2:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8016fa4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016fa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016fac:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8016fb0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8016fb4:	6812      	ldr	r2, [r2, #0]
 8016fb6:	1052      	asrs	r2, r2, #1
 8016fb8:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8016fba:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	da0a      	bge.n	8016fde <arm_convolve_s8+0x776>
        threshold++;
 8016fc8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016fcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016fd0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8016fd4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8016fd8:	6812      	ldr	r2, [r2, #0]
 8016fda:	3201      	adds	r2, #1
 8016fdc:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8016fde:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016fe2:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8016fe6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016fea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8016fee:	6812      	ldr	r2, [r2, #0]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	dd0a      	ble.n	801700c <arm_convolve_s8+0x7a4>
        result++;
 8016ff6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8016ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016ffe:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017002:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8017006:	6812      	ldr	r2, [r2, #0]
 8017008:	3201      	adds	r2, #1
 801700a:	601a      	str	r2, [r3, #0]
    return result;
 801700c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017014:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017016:	bf00      	nop
 8017018:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum += out_offset;
 801701c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017024:	4413      	add	r3, r2
 8017026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MAX(sum, out_activation_min);
 801702a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801702e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017032:	4293      	cmp	r3, r2
 8017034:	bfb8      	it	lt
 8017036:	4613      	movlt	r3, r2
 8017038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MIN(sum, out_activation_max);
 801703c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017044:	4293      	cmp	r3, r2
 8017046:	bfa8      	it	ge
 8017048:	4613      	movge	r3, r2
 801704a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                *out++ = (q7_t)sum;
 801704e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017052:	1c5a      	adds	r2, r3, #1
 8017054:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8017058:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801705c:	b252      	sxtb	r2, r2
 801705e:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 8017060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017064:	3301      	adds	r3, #1
 8017066:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801706a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 801706e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8017072:	429a      	cmp	r2, r3
 8017074:	f6ff ada2 	blt.w	8016bbc <arm_convolve_s8+0x354>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8017078:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 801707c:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8017080:	fb02 f303 	mul.w	r3, r2, r3
 8017084:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8017088:	fb02 f303 	mul.w	r3, r2, r3
 801708c:	461a      	mov	r2, r3
 801708e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017092:	4413      	add	r3, r2
 8017094:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        output_data += (output_x * output_y * output_ch);
 8017098:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 801709c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80170a0:	fb02 f303 	mul.w	r3, r2, r3
 80170a4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80170a8:	fb02 f303 	mul.w	r3, r2, r3
 80170ac:	461a      	mov	r2, r3
 80170ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80170b2:	4413      	add	r3, r2
 80170b4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 80170b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80170bc:	3301      	adds	r3, #1
 80170be:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80170c2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80170c6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80170ca:	429a      	cmp	r2, r3
 80170cc:	f6ff ac79 	blt.w	80169c2 <arm_convolve_s8+0x15a>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80170d0:	2300      	movs	r3, #0
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80170d8:	46bd      	mov	sp, r7
 80170da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170de <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 80170de:	b480      	push	{r7}
 80170e0:	b083      	sub	sp, #12
 80170e2:	af00      	add	r7, sp, #0
 80170e4:	6078      	str	r0, [r7, #4]
 80170e6:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	683a      	ldr	r2, [r7, #0]
 80170ee:	6892      	ldr	r2, [r2, #8]
 80170f0:	fb02 f303 	mul.w	r3, r2, r3
 80170f4:	683a      	ldr	r2, [r7, #0]
 80170f6:	6852      	ldr	r2, [r2, #4]
 80170f8:	fb02 f303 	mul.w	r3, r2, r3
 80170fc:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 80170fe:	4618      	mov	r0, r3
 8017100:	370c      	adds	r7, #12
 8017102:	46bd      	mov	sp, r7
 8017104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017108:	4770      	bx	lr

0801710a <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 801710a:	b580      	push	{r7, lr}
 801710c:	b08c      	sub	sp, #48	; 0x30
 801710e:	af08      	add	r7, sp, #32
 8017110:	60f8      	str	r0, [r7, #12]
 8017112:	60b9      	str	r1, [r7, #8]
 8017114:	607a      	str	r2, [r7, #4]
 8017116:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	691b      	ldr	r3, [r3, #16]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d12f      	bne.n	8017180 <arm_convolve_wrapper_s8+0x76>
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	695b      	ldr	r3, [r3, #20]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d12b      	bne.n	8017180 <arm_convolve_wrapper_s8+0x76>
 8017128:	683b      	ldr	r3, [r7, #0]
 801712a:	68db      	ldr	r3, [r3, #12]
 801712c:	f003 0303 	and.w	r3, r3, #3
 8017130:	2b00      	cmp	r3, #0
 8017132:	d125      	bne.n	8017180 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8017134:	68bb      	ldr	r3, [r7, #8]
 8017136:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017138:	2b01      	cmp	r3, #1
 801713a:	d121      	bne.n	8017180 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	68db      	ldr	r3, [r3, #12]
 8017140:	2b01      	cmp	r3, #1
 8017142:	d11d      	bne.n	8017180 <arm_convolve_wrapper_s8+0x76>
 8017144:	69fb      	ldr	r3, [r7, #28]
 8017146:	689b      	ldr	r3, [r3, #8]
 8017148:	2b01      	cmp	r3, #1
 801714a:	d119      	bne.n	8017180 <arm_convolve_wrapper_s8+0x76>
 801714c:	69fb      	ldr	r3, [r7, #28]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	2b01      	cmp	r3, #1
 8017152:	d115      	bne.n	8017180 <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 8017154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017156:	9306      	str	r3, [sp, #24]
 8017158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715a:	9305      	str	r3, [sp, #20]
 801715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715e:	9304      	str	r3, [sp, #16]
 8017160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017162:	9303      	str	r3, [sp, #12]
 8017164:	6a3b      	ldr	r3, [r7, #32]
 8017166:	9302      	str	r3, [sp, #8]
 8017168:	69fb      	ldr	r3, [r7, #28]
 801716a:	9301      	str	r3, [sp, #4]
 801716c:	69bb      	ldr	r3, [r7, #24]
 801716e:	9300      	str	r3, [sp, #0]
 8017170:	683b      	ldr	r3, [r7, #0]
 8017172:	687a      	ldr	r2, [r7, #4]
 8017174:	68b9      	ldr	r1, [r7, #8]
 8017176:	68f8      	ldr	r0, [r7, #12]
 8017178:	f7ff fb17 	bl	80167aa <arm_convolve_1x1_s8_fast>
 801717c:	4603      	mov	r3, r0
 801717e:	e040      	b.n	8017202 <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8017180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	2b01      	cmp	r3, #1
 8017186:	d127      	bne.n	80171d8 <arm_convolve_wrapper_s8+0xce>
 8017188:	683b      	ldr	r3, [r7, #0]
 801718a:	685b      	ldr	r3, [r3, #4]
 801718c:	2b01      	cmp	r3, #1
 801718e:	d123      	bne.n	80171d8 <arm_convolve_wrapper_s8+0xce>
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	2b01      	cmp	r3, #1
 8017196:	d11f      	bne.n	80171d8 <arm_convolve_wrapper_s8+0xce>
 8017198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801719a:	689b      	ldr	r3, [r3, #8]
 801719c:	f003 0303 	and.w	r3, r3, #3
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d119      	bne.n	80171d8 <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d115      	bne.n	80171d8 <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 80171ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ae:	9306      	str	r3, [sp, #24]
 80171b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b2:	9305      	str	r3, [sp, #20]
 80171b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b6:	9304      	str	r3, [sp, #16]
 80171b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ba:	9303      	str	r3, [sp, #12]
 80171bc:	6a3b      	ldr	r3, [r7, #32]
 80171be:	9302      	str	r3, [sp, #8]
 80171c0:	69fb      	ldr	r3, [r7, #28]
 80171c2:	9301      	str	r3, [sp, #4]
 80171c4:	69bb      	ldr	r3, [r7, #24]
 80171c6:	9300      	str	r3, [sp, #0]
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	687a      	ldr	r2, [r7, #4]
 80171cc:	68b9      	ldr	r1, [r7, #8]
 80171ce:	68f8      	ldr	r0, [r7, #12]
 80171d0:	f7ff faa7 	bl	8016722 <arm_convolve_1_x_n_s8>
 80171d4:	4603      	mov	r3, r0
 80171d6:	e014      	b.n	8017202 <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 80171d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171da:	9306      	str	r3, [sp, #24]
 80171dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171de:	9305      	str	r3, [sp, #20]
 80171e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e2:	9304      	str	r3, [sp, #16]
 80171e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e6:	9303      	str	r3, [sp, #12]
 80171e8:	6a3b      	ldr	r3, [r7, #32]
 80171ea:	9302      	str	r3, [sp, #8]
 80171ec:	69fb      	ldr	r3, [r7, #28]
 80171ee:	9301      	str	r3, [sp, #4]
 80171f0:	69bb      	ldr	r3, [r7, #24]
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	68b9      	ldr	r1, [r7, #8]
 80171fa:	68f8      	ldr	r0, [r7, #12]
 80171fc:	f7ff fb34 	bl	8016868 <arm_convolve_s8>
 8017200:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 8017202:	4618      	mov	r0, r3
 8017204:	3710      	adds	r7, #16
 8017206:	46bd      	mov	sp, r7
 8017208:	bd80      	pop	{r7, pc}

0801720a <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 801720a:	b580      	push	{r7, lr}
 801720c:	b084      	sub	sp, #16
 801720e:	af00      	add	r7, sp, #0
 8017210:	60f8      	str	r0, [r7, #12]
 8017212:	60b9      	str	r1, [r7, #8]
 8017214:	607a      	str	r2, [r7, #4]
 8017216:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	691b      	ldr	r3, [r3, #16]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d11e      	bne.n	801725e <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	695b      	ldr	r3, [r3, #20]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d11a      	bne.n	801725e <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	68db      	ldr	r3, [r3, #12]
 801722c:	f003 0303 	and.w	r3, r3, #3
 8017230:	2b00      	cmp	r3, #0
 8017232:	d114      	bne.n	801725e <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017238:	2b01      	cmp	r3, #1
 801723a:	d110      	bne.n	801725e <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	2b01      	cmp	r3, #1
 8017242:	d10c      	bne.n	801725e <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	689b      	ldr	r3, [r3, #8]
 8017248:	2b01      	cmp	r3, #1
 801724a:	d108      	bne.n	801725e <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	2b01      	cmp	r3, #1
 8017252:	d104      	bne.n	801725e <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 8017254:	68b8      	ldr	r0, [r7, #8]
 8017256:	f7ff fafc 	bl	8016852 <arm_convolve_1x1_s8_fast_get_buffer_size>
 801725a:	4603      	mov	r3, r0
 801725c:	e020      	b.n	80172a0 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	685b      	ldr	r3, [r3, #4]
 8017262:	2b01      	cmp	r3, #1
 8017264:	d117      	bne.n	8017296 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	685b      	ldr	r3, [r3, #4]
 801726a:	2b01      	cmp	r3, #1
 801726c:	d113      	bne.n	8017296 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	685b      	ldr	r3, [r3, #4]
 8017272:	2b01      	cmp	r3, #1
 8017274:	d10f      	bne.n	8017296 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	689b      	ldr	r3, [r3, #8]
 801727a:	f003 0303 	and.w	r3, r3, #3
 801727e:	2b00      	cmp	r3, #0
 8017280:	d109      	bne.n	8017296 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8017286:	2b01      	cmp	r3, #1
 8017288:	d105      	bne.n	8017296 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 801728a:	6879      	ldr	r1, [r7, #4]
 801728c:	68b8      	ldr	r0, [r7, #8]
 801728e:	f7ff fa76 	bl	801677e <arm_convolve_1_x_n_s8_get_buffer_size>
 8017292:	4603      	mov	r3, r0
 8017294:	e004      	b.n	80172a0 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8017296:	6879      	ldr	r1, [r7, #4]
 8017298:	68b8      	ldr	r0, [r7, #8]
 801729a:	f7ff ff20 	bl	80170de <arm_convolve_s8_get_buffer_size>
 801729e:	4603      	mov	r3, r0
    }
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3710      	adds	r7, #16
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}

080172a8 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 80172a8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80172ac:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	f507 648e 	add.w	r4, r7, #1136	; 0x470
 80172b6:	f5a4 746f 	sub.w	r4, r4, #956	; 0x3bc
 80172ba:	6020      	str	r0, [r4, #0]
 80172bc:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 80172c0:	f5a0 7070 	sub.w	r0, r0, #960	; 0x3c0
 80172c4:	6001      	str	r1, [r0, #0]
 80172c6:	4611      	mov	r1, r2
 80172c8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80172cc:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 80172d0:	6013      	str	r3, [r2, #0]
 80172d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80172d6:	f2a3 32c2 	subw	r2, r3, #962	; 0x3c2
 80172da:	460b      	mov	r3, r1
 80172dc:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 80172de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80172e2:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 80172e6:	881a      	ldrh	r2, [r3, #0]
 80172e8:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 80172ec:	4413      	add	r3, r2
 80172ee:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
    const int32_t *bias = output_bias;
 80172f2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80172f6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

    uint16_t row_count = output_ch / 2;
 80172fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80172fe:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 8017302:	881b      	ldrh	r3, [r3, #0]
 8017304:	085b      	lsrs	r3, r3, #1
 8017306:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    const q7_t *ip_a0 = input_a;
 801730a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801730e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
    /* this loop over rows in A */
    while (row_count)
 8017318:	f001 b92e 	b.w	8018578 <arm_nn_mat_mult_kernel_s8_s16+0x12d0>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801731c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017320:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 8017324:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017328:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8017330:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017334:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8017338:	681a      	ldr	r2, [r3, #0]
 801733a:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 801733e:	005b      	lsls	r3, r3, #1
 8017340:	441a      	add	r2, r3
 8017342:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017346:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801734a:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 801734c:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 8017350:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8017354:	4413      	add	r3, r2
 8017356:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 801735a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        q31_t ch_0_out_1 = *bias++;
 8017364:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8017368:	1d13      	adds	r3, r2, #4
 801736a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 801736e:	6813      	ldr	r3, [r2, #0]
 8017370:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        q31_t ch_1_out_0 = *bias;
 8017374:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        q31_t ch_1_out_1 = *bias++;
 801737e:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8017382:	1d13      	adds	r3, r2, #4
 8017384:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8017388:	6813      	ldr	r3, [r2, #0]
 801738a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

        uint16_t col_count = num_col_a / 4;
 801738e:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8017392:	089b      	lsrs	r3, r3, #2
 8017394:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        /* accumulate over the vector */
        while (col_count)
 8017398:	e35f      	b.n	8017a5a <arm_nn_mat_mult_kernel_s8_s16+0x7b2>
 801739a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801739e:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80173a2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80173a6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80173a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80173ac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	461a      	mov	r2, r3
 80173b8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80173bc:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80173c0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80173c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80173c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	1d1a      	adds	r2, r3, #4
 80173d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80173d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	601a      	str	r2, [r3, #0]
    return (val);
 80173dc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80173e0:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80173e4:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80173e6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80173ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80173ee:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80173f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80173f6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80173f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80173fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	461a      	mov	r2, r3
 8017408:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801740c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8017410:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8017412:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017416:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	1d1a      	adds	r2, r3, #4
 8017420:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017424:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	601a      	str	r2, [r3, #0]
    return (val);
 801742c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017430:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8017434:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8017436:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 801743a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801743e:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8017442:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8017446:	6013      	str	r3, [r2, #0]
 8017448:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801744c:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8017450:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8017454:	6013      	str	r3, [r2, #0]
 8017456:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801745a:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801745e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017462:	6013      	str	r3, [r2, #0]
 8017464:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017468:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801746c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8017470:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8017472:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	461a      	mov	r2, r3
 8017482:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017486:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801748a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801748c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	1d1a      	adds	r2, r3, #4
 801749a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801749e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	601a      	str	r2, [r3, #0]
    return (val);
 80174a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174aa:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80174ae:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80174b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80174b8:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 80174ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80174c2:	681a      	ldr	r2, [r3, #0]
 80174c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80174cc:	601a      	str	r2, [r3, #0]
 80174ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174d2:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80174d6:	2308      	movs	r3, #8
 80174d8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80174da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174de:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80174e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	f003 031f 	and.w	r3, r3, #31
 80174f0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80174f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80174f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d105      	bne.n	801750c <arm_nn_mat_mult_kernel_s8_s16+0x264>
    return op1;
 8017500:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017504:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	e00a      	b.n	8017522 <arm_nn_mat_mult_kernel_s8_s16+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801750c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017510:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8017514:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017518:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801751c:	6812      	ldr	r2, [r2, #0]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	41da      	rors	r2, r3
 8017522:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017526:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801752a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801752c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017530:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	fa2f f283 	sxtb16	r2, r3
 801753a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801753e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017542:	601a      	str	r2, [r3, #0]
  return(result);
 8017544:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017548:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801754c:	681a      	ldr	r2, [r3, #0]
 801754e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017552:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017556:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8017558:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801755c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017560:	681a      	ldr	r2, [r3, #0]
 8017562:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017566:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801756a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801756c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017570:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	fa2f f283 	sxtb16	r2, r3
 801757a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801757e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8017582:	601a      	str	r2, [r3, #0]
  return(result);
 8017584:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017588:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801758c:	681a      	ldr	r2, [r3, #0]
 801758e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017592:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8017596:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8017598:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801759c:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 80175a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175a4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	6013      	str	r3, [r2, #0]
 80175ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175b0:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80175b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	6013      	str	r3, [r2, #0]
 80175c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175c4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80175c8:	681a      	ldr	r2, [r3, #0]
 80175ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175ce:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 80175d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80175e0:	601a      	str	r2, [r3, #0]
 80175e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175e6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	461a      	mov	r2, r3
 80175ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80175fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80175fe:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8017602:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017606:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	6013      	str	r3, [r2, #0]
 801760e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017612:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8017616:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801761a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	6013      	str	r3, [r2, #0]
 8017622:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017626:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801762a:	681a      	ldr	r2, [r3, #0]
 801762c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017630:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801763a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801763e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8017642:	601a      	str	r2, [r3, #0]
 8017644:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017648:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	461a      	mov	r2, r3
 8017650:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017654:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	601a      	str	r2, [r3, #0]
    return source;
 801765c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017660:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017664:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 8017666:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 801766a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801766e:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8017672:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8017676:	6013      	str	r3, [r2, #0]
 8017678:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801767c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8017680:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017684:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8017688:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801768c:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    memcpy(&val, *in_q7, 4);
 8017690:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	461a      	mov	r2, r3
 801769a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801769e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80176a2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80176a4:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	1d1a      	adds	r2, r3, #4
 80176ac:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80176b0:	601a      	str	r2, [r3, #0]
    return (val);
 80176b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80176b6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80176ba:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80176bc:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 80176c0:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80176c4:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 80176c8:	2308      	movs	r3, #8
 80176ca:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  op2 %= 32U;
 80176ce:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80176d2:	f003 031f 	and.w	r3, r3, #31
 80176d6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  if (op2 == 0U)
 80176da:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d102      	bne.n	80176e8 <arm_nn_mat_mult_kernel_s8_s16+0x440>
    return op1;
 80176e2:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80176e6:	e005      	b.n	80176f4 <arm_nn_mat_mult_kernel_s8_s16+0x44c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80176e8:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 80176ec:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80176f0:	fa62 f303 	ror.w	r3, r2, r3
 80176f4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80176f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80176fc:	fa2f f383 	sxtb16	r3, r3
 8017700:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
  return(result);
 8017704:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8017708:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    q31_t inAbuf2 = __SXTB16(inA);
 801770c:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8017710:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017714:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8017718:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801771a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801771e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	fa2f f283 	sxtb16	r2, r3
 8017728:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801772c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017730:	601a      	str	r2, [r3, #0]
  return(result);
 8017732:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017744:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8017746:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801774a:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 801774e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8017752:	6013      	str	r3, [r2, #0]
 8017754:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017758:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801775c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	6013      	str	r3, [r2, #0]
 8017768:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801776c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017776:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8017780:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017784:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017788:	601a      	str	r2, [r3, #0]
 801778a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801778e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	461a      	mov	r2, r3
 8017796:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801779a:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801779c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177a0:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80177a4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	6013      	str	r3, [r2, #0]
 80177b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177b4:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80177b8:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80177bc:	6013      	str	r3, [r2, #0]
 80177be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80177c6:	681a      	ldr	r2, [r3, #0]
 80177c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 80177d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80177de:	601a      	str	r2, [r3, #0]
 80177e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	461a      	mov	r2, r3
 80177ec:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80177f0:	601a      	str	r2, [r3, #0]
    return source;
 80177f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80177f6:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 80177fa:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 80177fc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8017800:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017804:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	4619      	mov	r1, r3
 801780c:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8017810:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8017814:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 8017818:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 801781c:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017820:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 8017824:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8017828:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 801782c:	fb21 3302 	smlad	r3, r1, r2, r3
 8017830:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  return(result);
 8017834:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8017838:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 801783c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017840:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	4619      	mov	r1, r3
 8017848:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 801784c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8017850:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 8017854:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 8017858:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801785c:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 8017860:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8017864:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8017868:	fb21 3302 	smlad	r3, r1, r2, r3
 801786c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 8017870:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8017874:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8017878:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801787c:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	4619      	mov	r1, r3
 8017884:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8017888:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 801788c:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 8017890:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 8017894:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017898:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 801789c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80178a0:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80178a4:	fb21 3302 	smlad	r3, r1, r2, r3
 80178a8:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
  return(result);
 80178ac:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80178b0:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 80178b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80178b8:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	4619      	mov	r1, r3
 80178c0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80178c4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80178c8:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 80178cc:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 80178d0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80178d4:	f8d7 13d4 	ldr.w	r1, [r7, #980]	; 0x3d4
 80178d8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80178dc:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80178e0:	fb21 3302 	smlad	r3, r1, r2, r3
 80178e4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
  return(result);
 80178e8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80178ec:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80178f0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80178f4:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    memcpy(&val, *in_q15, 4);
 80178f8:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	461a      	mov	r2, r3
 8017902:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017906:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801790a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801790c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	1d1a      	adds	r2, r3, #4
 8017914:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8017918:	601a      	str	r2, [r3, #0]
    return (val);
 801791a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801791e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017922:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8017924:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8017928:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801792c:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
    memcpy(&val, *in_q15, 4);
 8017930:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	461a      	mov	r2, r3
 801793a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801793e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8017942:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8017944:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	1d1a      	adds	r2, r3, #4
 801794c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8017950:	601a      	str	r2, [r3, #0]
    return (val);
 8017952:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017956:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801795a:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801795c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8017960:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017964:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	4619      	mov	r1, r3
 801796c:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8017970:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8017974:	f8c7 13ec 	str.w	r1, [r7, #1004]	; 0x3ec
 8017978:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 801797c:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017980:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8017984:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8017988:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 801798c:	fb21 3302 	smlad	r3, r1, r2, r3
 8017990:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  return(result);
 8017994:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8017998:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801799c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80179a0:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	4619      	mov	r1, r3
 80179a8:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80179ac:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80179b0:	f8c7 13fc 	str.w	r1, [r7, #1020]	; 0x3fc
 80179b4:	f8c7 23f8 	str.w	r2, [r7, #1016]	; 0x3f8
 80179b8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80179bc:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 80179c0:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80179c4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80179c8:	fb21 3302 	smlad	r3, r1, r2, r3
 80179cc:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
  return(result);
 80179d0:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80179d4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 80179d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80179dc:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	4619      	mov	r1, r3
 80179e4:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80179e8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80179ec:	f8c7 140c 	str.w	r1, [r7, #1036]	; 0x40c
 80179f0:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 80179f4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80179f8:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80179fc:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8017a00:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8017a04:	fb21 3302 	smlad	r3, r1, r2, r3
 8017a08:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  return(result);
 8017a0c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8017a10:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8017a14:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017a18:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4619      	mov	r1, r3
 8017a20:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8017a24:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8017a28:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 8017a2c:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8017a30:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017a34:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8017a38:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8017a3c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8017a40:	fb21 3302 	smlad	r3, r1, r2, r3
 8017a44:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  return(result);
 8017a48:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8017a4c:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

            col_count--;
 8017a50:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8017a54:	3b01      	subs	r3, #1
 8017a56:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 8017a5a:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	f47f ac9b 	bne.w	801739a <arm_nn_mat_mult_kernel_s8_s16+0xf2>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 8017a64:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8017a68:	f003 0303 	and.w	r3, r3, #3
 8017a6c:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 8017a70:	e05c      	b.n	8017b2c <arm_nn_mat_mult_kernel_s8_s16+0x884>
        {
            q7_t a0 = *ip_a0++;
 8017a72:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8017a76:	1c53      	adds	r3, r2, #1
 8017a78:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8017a7c:	7813      	ldrb	r3, [r2, #0]
 8017a7e:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
            q15_t b0 = *ip_b0++;
 8017a82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017a86:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8017a8a:	6819      	ldr	r1, [r3, #0]
 8017a8c:	1c8a      	adds	r2, r1, #2
 8017a8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017a92:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8017a96:	601a      	str	r2, [r3, #0]
 8017a98:	880b      	ldrh	r3, [r1, #0]
 8017a9a:	f8a7 342c 	strh.w	r3, [r7, #1068]	; 0x42c
            q7_t a1 = *ip_a1++;
 8017a9e:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8017aa2:	1c53      	adds	r3, r2, #1
 8017aa4:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8017aa8:	7813      	ldrb	r3, [r2, #0]
 8017aaa:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
            q15_t b1 = *ip_b1++;
 8017aae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ab2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017ab6:	6819      	ldr	r1, [r3, #0]
 8017ab8:	1c8a      	adds	r2, r1, #2
 8017aba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017abe:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017ac2:	601a      	str	r2, [r3, #0]
 8017ac4:	880b      	ldrh	r3, [r1, #0]
 8017ac6:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428

            ch_0_out_0 += a0 * b0;
 8017aca:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 8017ace:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 8017ad2:	fb03 f202 	mul.w	r2, r3, r2
 8017ad6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8017ada:	4413      	add	r3, r2
 8017adc:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 += a0 * b1;
 8017ae0:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 8017ae4:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 8017ae8:	fb03 f202 	mul.w	r2, r3, r2
 8017aec:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8017af0:	4413      	add	r3, r2
 8017af2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 += a1 * b0;
 8017af6:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 8017afa:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 8017afe:	fb03 f202 	mul.w	r2, r3, r2
 8017b02:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8017b06:	4413      	add	r3, r2
 8017b08:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 += a1 * b1;
 8017b0c:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 8017b10:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 8017b14:	fb03 f202 	mul.w	r2, r3, r2
 8017b18:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8017b1c:	4413      	add	r3, r2
 8017b1e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
            col_count--;
 8017b22:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8017b26:	3b01      	subs	r3, #1
 8017b28:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 8017b2c:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d19e      	bne.n	8017a72 <arm_nn_mat_mult_kernel_s8_s16+0x7ca>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8017b34:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8017b38:	6818      	ldr	r0, [r3, #0]
 8017b3a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b3e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	6819      	ldr	r1, [r3, #0]
 8017b46:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b4a:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8017b4e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8017b52:	6013      	str	r3, [r2, #0]
 8017b54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b58:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8017b5c:	6018      	str	r0, [r3, #0]
 8017b5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b62:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017b66:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017b68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b6c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8017b76:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	fa03 f202 	lsl.w	r2, r3, r2
 8017b84:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b88:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017b8c:	601a      	str	r2, [r3, #0]
 8017b8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b92:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8017b96:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017b9a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017ba2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ba6:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8017baa:	2300      	movs	r3, #0
 8017bac:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8017bae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017bb2:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8017bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017bba:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8017bbc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017bc0:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8017bc8:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8017bcc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017bd0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	17da      	asrs	r2, r3, #31
 8017bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8017bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017bdc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017be0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	17da      	asrs	r2, r3, #31
 8017be8:	663b      	str	r3, [r7, #96]	; 0x60
 8017bea:	667a      	str	r2, [r7, #100]	; 0x64
 8017bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017bee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017bf0:	fb02 f203 	mul.w	r2, r2, r3
 8017bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017bf6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017bf8:	fb04 f303 	mul.w	r3, r4, r3
 8017bfc:	4413      	add	r3, r2
 8017bfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017c00:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8017c02:	fba2 4204 	umull	r4, r2, r2, r4
 8017c06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8017c10:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8017c14:	4413      	add	r3, r2
 8017c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8017c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017c1e:	18c3      	adds	r3, r0, r3
 8017c20:	633b      	str	r3, [r7, #48]	; 0x30
 8017c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017c26:	eb41 0303 	adc.w	r3, r1, r3
 8017c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8017c2c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8017c30:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
    result = (int32_t)(mult.long_long >> 31);
 8017c34:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017c38:	f04f 0000 	mov.w	r0, #0
 8017c3c:	f04f 0100 	mov.w	r1, #0
 8017c40:	0fd0      	lsrs	r0, r2, #31
 8017c42:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017c46:	17d9      	asrs	r1, r3, #31
 8017c48:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017c4c:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8017c50:	4603      	mov	r3, r0
 8017c52:	6013      	str	r3, [r2, #0]
    return result;
 8017c54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017c58:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8017c5c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017c62:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	dc06      	bgt.n	8017c7a <arm_nn_mat_mult_kernel_s8_s16+0x9d2>
 8017c6c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017c70:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	425a      	negs	r2, r3
 8017c78:	e000      	b.n	8017c7c <arm_nn_mat_mult_kernel_s8_s16+0x9d4>
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017c80:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017c84:	6019      	str	r1, [r3, #0]
 8017c86:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017c8a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8017c8e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017c90:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017c94:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8017c98:	2300      	movs	r3, #0
 8017c9a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017c9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ca0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8017ca4:	2201      	movs	r2, #1
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	fa02 f103 	lsl.w	r1, r2, r3
 8017cac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017cb0:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8017cb4:	1e4b      	subs	r3, r1, #1
 8017cb6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017cb8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017cbc:	f5a3 710b 	sub.w	r1, r3, #556	; 0x22c
 8017cc0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017cc4:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8017cc8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ccc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8017cd0:	6812      	ldr	r2, [r2, #0]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	4013      	ands	r3, r2
 8017cd6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017cd8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017cdc:	f5a3 7109 	sub.w	r1, r3, #548	; 0x224
 8017ce0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ce4:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8017ce8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017cec:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8017cf0:	6812      	ldr	r2, [r2, #0]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	fa42 f303 	asr.w	r3, r2, r3
 8017cf8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8017cfa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017cfe:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8017d02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d06:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	105b      	asrs	r3, r3, #1
 8017d0e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017d10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d14:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	da0a      	bge.n	8017d34 <arm_nn_mat_mult_kernel_s8_s16+0xa8c>
        threshold++;
 8017d1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d22:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8017d26:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d2a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	3301      	adds	r3, #1
 8017d32:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017d34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d38:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8017d3c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d40:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017d44:	6812      	ldr	r2, [r2, #0]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	dd0a      	ble.n	8017d62 <arm_nn_mat_mult_kernel_s8_s16+0xaba>
        result++;
 8017d4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d50:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8017d54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d58:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	3301      	adds	r3, #1
 8017d60:	6013      	str	r3, [r2, #0]
    return result;
 8017d62:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017d66:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8017d6a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017d6c:	bf00      	nop
 8017d6e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 += out_offset;
 8017d72:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8017d76:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8017d7a:	4413      	add	r3, r2
 8017d7c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8017d80:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8017d84:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8017d88:	4293      	cmp	r3, r2
 8017d8a:	bfb8      	it	lt
 8017d8c:	4613      	movlt	r3, r2
 8017d8e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8017d92:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8017d96:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8017d9a:	4293      	cmp	r3, r2
 8017d9c:	bfa8      	it	ge
 8017d9e:	4613      	movge	r3, r2
 8017da0:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        *out_0++ = (q7_t)ch_0_out_0;
 8017da4:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8017da8:	1c53      	adds	r3, r2, #1
 8017daa:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8017dae:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8017db2:	b25b      	sxtb	r3, r3
 8017db4:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8017db6:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8017dba:	6818      	ldr	r0, [r3, #0]
 8017dbc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017dc0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	6819      	ldr	r1, [r3, #0]
 8017dc8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017dcc:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8017dd0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8017dd4:	6013      	str	r3, [r2, #0]
 8017dd6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017dda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8017dde:	6018      	str	r0, [r3, #0]
 8017de0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017de4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017de8:	6019      	str	r1, [r3, #0]
 8017dea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017dee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8017df8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017dfc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	fa03 f202 	lsl.w	r2, r3, r2
 8017e06:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8017e0e:	601a      	str	r2, [r3, #0]
 8017e10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e14:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8017e18:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017e24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e28:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8017e30:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e34:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8017e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017e3c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8017e3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e42:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8017e46:	2300      	movs	r3, #0
 8017e48:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8017e4a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8017e4e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	17da      	asrs	r2, r3, #31
 8017e5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8017e5c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8017e5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017e62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	17da      	asrs	r2, r3, #31
 8017e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8017e6c:	677a      	str	r2, [r7, #116]	; 0x74
 8017e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017e70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017e72:	fb02 f203 	mul.w	r2, r2, r3
 8017e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017e78:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8017e7a:	fb04 f303 	mul.w	r3, r4, r3
 8017e7e:	4413      	add	r3, r2
 8017e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017e82:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8017e84:	fba2 5604 	umull	r5, r6, r2, r4
 8017e88:	4433      	add	r3, r6
 8017e8a:	461e      	mov	r6, r3
 8017e8c:	1943      	adds	r3, r0, r5
 8017e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017e90:	eb41 0306 	adc.w	r3, r1, r6
 8017e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e96:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8017e9a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
    result = (int32_t)(mult.long_long >> 31);
 8017e9e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8017ea2:	f04f 0000 	mov.w	r0, #0
 8017ea6:	f04f 0100 	mov.w	r1, #0
 8017eaa:	0fd0      	lsrs	r0, r2, #31
 8017eac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017eb0:	17d9      	asrs	r1, r3, #31
 8017eb2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017eb6:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8017eba:	4603      	mov	r3, r0
 8017ebc:	6013      	str	r3, [r2, #0]
    return result;
 8017ebe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ec2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8017ec6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017ec8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ecc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	dc06      	bgt.n	8017ee4 <arm_nn_mat_mult_kernel_s8_s16+0xc3c>
 8017ed6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017eda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	425a      	negs	r2, r3
 8017ee2:	e000      	b.n	8017ee6 <arm_nn_mat_mult_kernel_s8_s16+0xc3e>
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017eea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8017eee:	6019      	str	r1, [r3, #0]
 8017ef0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017ef4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8017ef8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017efa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017efe:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8017f02:	2300      	movs	r3, #0
 8017f04:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017f06:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f0a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8017f0e:	2201      	movs	r2, #1
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	fa02 f103 	lsl.w	r1, r2, r3
 8017f16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f1a:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8017f1e:	1e4b      	subs	r3, r1, #1
 8017f20:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017f22:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f26:	f5a3 71fe 	sub.w	r1, r3, #508	; 0x1fc
 8017f2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f2e:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8017f32:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f36:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8017f3a:	6812      	ldr	r2, [r2, #0]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	4013      	ands	r3, r2
 8017f40:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017f42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f46:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8017f4a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f4e:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8017f52:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f56:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8017f5a:	6812      	ldr	r2, [r2, #0]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	fa42 f303 	asr.w	r3, r2, r3
 8017f62:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8017f64:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f68:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8017f6c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f70:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	105b      	asrs	r3, r3, #1
 8017f78:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017f7a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f7e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	da0a      	bge.n	8017f9e <arm_nn_mat_mult_kernel_s8_s16+0xcf6>
        threshold++;
 8017f88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f8c:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8017f90:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017f94:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	3301      	adds	r3, #1
 8017f9c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017f9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017fa2:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8017fa6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017faa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8017fae:	6812      	ldr	r2, [r2, #0]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	dd0a      	ble.n	8017fcc <arm_nn_mat_mult_kernel_s8_s16+0xd24>
        result++;
 8017fb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017fba:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8017fbe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017fc2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	3301      	adds	r3, #1
 8017fca:	6013      	str	r3, [r2, #0]
    return result;
 8017fcc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8017fd0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8017fd4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017fd6:	bf00      	nop
 8017fd8:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 += out_offset;
 8017fdc:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8017fe0:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8017fe4:	4413      	add	r3, r2
 8017fe6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8017fea:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8017fee:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8017ff2:	4293      	cmp	r3, r2
 8017ff4:	bfb8      	it	lt
 8017ff6:	4613      	movlt	r3, r2
 8017ff8:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8017ffc:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8018000:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8018004:	4293      	cmp	r3, r2
 8018006:	bfa8      	it	ge
 8018008:	4613      	movge	r3, r2
 801800a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        *out_1++ = (q7_t)ch_0_out_1;
 801800e:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8018012:	1c53      	adds	r3, r2, #1
 8018014:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8018018:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 801801c:	b25b      	sxtb	r3, r3
 801801e:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8018020:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018024:	3304      	adds	r3, #4
 8018026:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 801802a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801802e:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8018032:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018036:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	3304      	adds	r3, #4
 801803e:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8018040:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018044:	6818      	ldr	r0, [r3, #0]
 8018046:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801804a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	6819      	ldr	r1, [r3, #0]
 8018052:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018056:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801805a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 801805e:	6013      	str	r3, [r2, #0]
 8018060:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018064:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018068:	6018      	str	r0, [r3, #0]
 801806a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801806e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8018072:	6019      	str	r1, [r3, #0]
 8018074:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018078:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8018082:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018086:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	fa03 f202 	lsl.w	r2, r3, r2
 8018090:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018094:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8018098:	601a      	str	r2, [r3, #0]
 801809a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801809e:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 80180a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80180a6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80180ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80180b2:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 80180b6:	2300      	movs	r3, #0
 80180b8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80180ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80180be:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80180c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80180c6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80180c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80180cc:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80180d0:	2300      	movs	r3, #0
 80180d2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80180d4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80180d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80180dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	17da      	asrs	r2, r3, #31
 80180e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80180e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80180ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80180f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	17da      	asrs	r2, r3, #31
 80180f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80180fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8018100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018104:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018108:	fb02 f203 	mul.w	r2, r2, r3
 801810c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018110:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8018114:	fb04 f303 	mul.w	r3, r4, r3
 8018118:	4413      	add	r3, r2
 801811a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801811e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8018122:	fba2 ab04 	umull	sl, fp, r2, r4
 8018126:	445b      	add	r3, fp
 8018128:	469b      	mov	fp, r3
 801812a:	eb10 030a 	adds.w	r3, r0, sl
 801812e:	643b      	str	r3, [r7, #64]	; 0x40
 8018130:	eb41 030b 	adc.w	r3, r1, fp
 8018134:	647b      	str	r3, [r7, #68]	; 0x44
 8018136:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801813a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    result = (int32_t)(mult.long_long >> 31);
 801813e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8018142:	f04f 0000 	mov.w	r0, #0
 8018146:	f04f 0100 	mov.w	r1, #0
 801814a:	0fd0      	lsrs	r0, r2, #31
 801814c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018150:	17d9      	asrs	r1, r3, #31
 8018152:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018156:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 801815a:	4603      	mov	r3, r0
 801815c:	6013      	str	r3, [r2, #0]
    return result;
 801815e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018162:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8018166:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018168:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801816c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	2b00      	cmp	r3, #0
 8018174:	dc06      	bgt.n	8018184 <arm_nn_mat_mult_kernel_s8_s16+0xedc>
 8018176:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801817a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	425a      	negs	r2, r3
 8018182:	e000      	b.n	8018186 <arm_nn_mat_mult_kernel_s8_s16+0xede>
 8018184:	2200      	movs	r2, #0
 8018186:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801818a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801818e:	6019      	str	r1, [r3, #0]
 8018190:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018194:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8018198:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801819a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801819e:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80181a2:	2300      	movs	r3, #0
 80181a4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80181a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80181ae:	2201      	movs	r2, #1
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	fa02 f103 	lsl.w	r1, r2, r3
 80181b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181ba:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 80181be:	1e4b      	subs	r3, r1, #1
 80181c0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80181c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181c6:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 80181ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181ce:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80181d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181d6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80181da:	6812      	ldr	r2, [r2, #0]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4013      	ands	r3, r2
 80181e0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80181e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181e6:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 80181ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181ee:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80181f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80181fa:	6812      	ldr	r2, [r2, #0]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	fa42 f303 	asr.w	r3, r2, r3
 8018202:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8018204:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018208:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 801820c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018210:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	105b      	asrs	r3, r3, #1
 8018218:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801821a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801821e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	da0a      	bge.n	801823e <arm_nn_mat_mult_kernel_s8_s16+0xf96>
        threshold++;
 8018228:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801822c:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8018230:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018234:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	3301      	adds	r3, #1
 801823c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801823e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018242:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8018246:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801824a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801824e:	6812      	ldr	r2, [r2, #0]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	429a      	cmp	r2, r3
 8018254:	dd0a      	ble.n	801826c <arm_nn_mat_mult_kernel_s8_s16+0xfc4>
        result++;
 8018256:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801825a:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801825e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018262:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	3301      	adds	r3, #1
 801826a:	6013      	str	r3, [r2, #0]
    return result;
 801826c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018270:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8018274:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018276:	bf00      	nop
 8018278:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 += out_offset;
 801827c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8018280:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8018284:	4413      	add	r3, r2
 8018286:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 801828a:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 801828e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8018292:	4293      	cmp	r3, r2
 8018294:	bfb8      	it	lt
 8018296:	4613      	movlt	r3, r2
 8018298:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801829c:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 80182a0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80182a4:	4293      	cmp	r3, r2
 80182a6:	bfa8      	it	ge
 80182a8:	4613      	movge	r3, r2
 80182aa:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        *out_0++ = (q7_t)ch_1_out_0;
 80182ae:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 80182b2:	1c53      	adds	r3, r2, #1
 80182b4:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80182b8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80182bc:	b25b      	sxtb	r3, r3
 80182be:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 80182c0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80182c4:	6818      	ldr	r0, [r3, #0]
 80182c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182ca:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	6819      	ldr	r1, [r3, #0]
 80182d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182d6:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 80182da:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80182de:	6013      	str	r3, [r2, #0]
 80182e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182e4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80182e8:	6018      	str	r0, [r3, #0]
 80182ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182ee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80182f2:	6019      	str	r1, [r3, #0]
 80182f4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8018302:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018306:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	fa03 f202 	lsl.w	r2, r3, r2
 8018310:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018314:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8018318:	601a      	str	r2, [r3, #0]
 801831a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801831e:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8018322:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018326:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801832e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018332:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8018336:	2300      	movs	r3, #0
 8018338:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801833a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801833e:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8018342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018346:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8018348:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801834c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8018350:	2300      	movs	r3, #0
 8018352:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018354:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8018358:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801835c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	17da      	asrs	r2, r3, #31
 8018364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018368:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801836c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018370:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	17da      	asrs	r2, r3, #31
 8018378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801837c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018384:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018388:	fb02 f203 	mul.w	r2, r2, r3
 801838c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018390:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8018394:	fb04 f303 	mul.w	r3, r4, r3
 8018398:	4413      	add	r3, r2
 801839a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801839e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80183a2:	fba2 8904 	umull	r8, r9, r2, r4
 80183a6:	444b      	add	r3, r9
 80183a8:	4699      	mov	r9, r3
 80183aa:	eb10 0308 	adds.w	r3, r0, r8
 80183ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80183b0:	eb41 0309 	adc.w	r3, r1, r9
 80183b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80183b6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80183ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    result = (int32_t)(mult.long_long >> 31);
 80183be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80183c2:	f04f 0000 	mov.w	r0, #0
 80183c6:	f04f 0100 	mov.w	r1, #0
 80183ca:	0fd0      	lsrs	r0, r2, #31
 80183cc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80183d0:	17d9      	asrs	r1, r3, #31
 80183d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183d6:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80183da:	4603      	mov	r3, r0
 80183dc:	6013      	str	r3, [r2, #0]
    return result;
 80183de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80183e6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80183e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	dc06      	bgt.n	8018404 <arm_nn_mat_mult_kernel_s8_s16+0x115c>
 80183f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	425a      	negs	r2, r3
 8018402:	e000      	b.n	8018406 <arm_nn_mat_mult_kernel_s8_s16+0x115e>
 8018404:	2200      	movs	r2, #0
 8018406:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801840a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801840e:	6019      	str	r1, [r3, #0]
 8018410:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018414:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8018418:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801841a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801841e:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8018422:	2300      	movs	r3, #0
 8018424:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018426:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801842a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801842e:	2201      	movs	r2, #1
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	fa02 f103 	lsl.w	r1, r2, r3
 8018436:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801843a:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 801843e:	1e4b      	subs	r3, r1, #1
 8018440:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018442:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018446:	f5a3 71ce 	sub.w	r1, r3, #412	; 0x19c
 801844a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801844e:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8018452:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018456:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801845a:	6812      	ldr	r2, [r2, #0]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	4013      	ands	r3, r2
 8018460:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8018462:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018466:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 801846a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801846e:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8018472:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018476:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801847a:	6812      	ldr	r2, [r2, #0]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	fa42 f303 	asr.w	r3, r2, r3
 8018482:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8018484:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018488:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 801848c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018490:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	105b      	asrs	r3, r3, #1
 8018498:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801849a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801849e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	da0a      	bge.n	80184be <arm_nn_mat_mult_kernel_s8_s16+0x1216>
        threshold++;
 80184a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184ac:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80184b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	3301      	adds	r3, #1
 80184bc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80184be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184c2:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80184c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184ca:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80184ce:	6812      	ldr	r2, [r2, #0]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	429a      	cmp	r2, r3
 80184d4:	dd0a      	ble.n	80184ec <arm_nn_mat_mult_kernel_s8_s16+0x1244>
        result++;
 80184d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184da:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 80184de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	3301      	adds	r3, #1
 80184ea:	6013      	str	r3, [r2, #0]
    return result;
 80184ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80184f4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80184f6:	bf00      	nop
 80184f8:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 += out_offset;
 80184fc:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8018500:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8018504:	4413      	add	r3, r2
 8018506:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 801850a:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 801850e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8018512:	4293      	cmp	r3, r2
 8018514:	bfb8      	it	lt
 8018516:	4613      	movlt	r3, r2
 8018518:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 801851c:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8018520:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8018524:	4293      	cmp	r3, r2
 8018526:	bfa8      	it	ge
 8018528:	4613      	movge	r3, r2
 801852a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        *out_1++ = (q7_t)ch_1_out_1;
 801852e:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8018532:	1c53      	adds	r3, r2, #1
 8018534:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8018538:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801853c:	b25b      	sxtb	r3, r3
 801853e:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8018540:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018544:	3304      	adds	r3, #4
 8018546:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 801854a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801854e:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8018552:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018556:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	3304      	adds	r3, #4
 801855e:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 8018560:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 8018564:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8018568:	4413      	add	r3, r2
 801856a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
        row_count--;
 801856e:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8018572:	3b01      	subs	r3, #1
 8018574:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    while (row_count)
 8018578:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 801857c:	2b00      	cmp	r3, #0
 801857e:	f47e aecd 	bne.w	801731c <arm_nn_mat_mult_kernel_s8_s16+0x74>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 8018582:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018586:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 801858a:	881b      	ldrh	r3, [r3, #0]
 801858c:	f003 0301 	and.w	r3, r3, #1
 8018590:	2b00      	cmp	r3, #0
 8018592:	f000 859e 	beq.w	80190d2 <arm_nn_mat_mult_kernel_s8_s16+0x1e2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 8018596:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801859a:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 801859e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80185a2:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 80185aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80185ae:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80185b2:	681a      	ldr	r2, [r3, #0]
 80185b4:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 80185b8:	005b      	lsls	r3, r3, #1
 80185ba:	441a      	add	r2, r3
 80185bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80185c0:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80185c4:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 80185c6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        q31_t ch_0_out_1 = *bias++;
 80185d0:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80185d4:	1d13      	adds	r3, r2, #4
 80185d6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80185da:	6813      	ldr	r3, [r2, #0]
 80185dc:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

        uint16_t col_count = num_col_a >> 2;
 80185e0:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 80185e4:	089b      	lsrs	r3, r3, #2
 80185e6:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 80185ea:	e294      	b.n	8018b16 <arm_nn_mat_mult_kernel_s8_s16+0x186e>
 80185ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80185f0:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80185f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80185f8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80185fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80185fe:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	461a      	mov	r2, r3
 801860a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801860e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8018612:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018614:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018618:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	1d1a      	adds	r2, r3, #4
 8018622:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018626:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	601a      	str	r2, [r3, #0]
    return (val);
 801862e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018632:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8018636:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8018638:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801863c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018640:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8018644:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8018648:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 801864a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801864e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	461a      	mov	r2, r3
 801865a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801865e:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8018662:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018664:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018668:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	1d1a      	adds	r2, r3, #4
 8018672:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018676:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	601a      	str	r2, [r3, #0]
    return (val);
 801867e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018682:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8018686:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8018688:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 801868c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018690:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8018694:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8018698:	6013      	str	r3, [r2, #0]
 801869a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801869e:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 80186a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80186a6:	6013      	str	r3, [r2, #0]
 80186a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186ac:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80186b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80186b4:	6013      	str	r3, [r2, #0]
 80186b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186ba:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 80186be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80186c2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80186c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186c8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	461a      	mov	r2, r3
 80186d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186d8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80186dc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80186de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186e2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	1d1a      	adds	r2, r3, #4
 80186ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186f0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	601a      	str	r2, [r3, #0]
    return (val);
 80186f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186fc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8018700:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018702:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018706:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801870a:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801870c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018710:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8018714:	681a      	ldr	r2, [r3, #0]
 8018716:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801871a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801871e:	601a      	str	r2, [r3, #0]
 8018720:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018724:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8018728:	2308      	movs	r3, #8
 801872a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801872c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018730:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8018734:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018738:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f003 031f 	and.w	r3, r3, #31
 8018742:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8018744:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018748:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d105      	bne.n	801875e <arm_nn_mat_mult_kernel_s8_s16+0x14b6>
    return op1;
 8018752:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018756:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801875a:	681a      	ldr	r2, [r3, #0]
 801875c:	e00a      	b.n	8018774 <arm_nn_mat_mult_kernel_s8_s16+0x14cc>
  return (op1 >> op2) | (op1 << (32U - op2));
 801875e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018762:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 8018766:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801876a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801876e:	6812      	ldr	r2, [r2, #0]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	41da      	rors	r2, r3
 8018774:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018778:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801877c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801877e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018782:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	fa2f f283 	sxtb16	r2, r3
 801878c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018790:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8018794:	601a      	str	r2, [r3, #0]
  return(result);
 8018796:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801879a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801879e:	681a      	ldr	r2, [r3, #0]
 80187a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187a4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80187a8:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 80187aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187ae:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80187b2:	681a      	ldr	r2, [r3, #0]
 80187b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187b8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80187bc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80187be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	fa2f f283 	sxtb16	r2, r3
 80187cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187d0:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80187d4:	601a      	str	r2, [r3, #0]
  return(result);
 80187d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187da:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80187de:	681a      	ldr	r2, [r3, #0]
 80187e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187e4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80187e8:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80187ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187ee:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80187f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187f6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	6013      	str	r3, [r2, #0]
 80187fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018802:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8018806:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801880a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	6013      	str	r3, [r2, #0]
 8018812:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018816:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801881a:	681a      	ldr	r2, [r3, #0]
 801881c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018820:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 801882a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801882e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8018832:	601a      	str	r2, [r3, #0]
 8018834:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018838:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	461a      	mov	r2, r3
 8018840:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018844:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 801884c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018850:	f5a3 722e 	sub.w	r2, r3, #696	; 0x2b8
 8018854:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018858:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	6013      	str	r3, [r2, #0]
 8018860:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018864:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 8018868:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801886c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	6013      	str	r3, [r2, #0]
 8018874:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018878:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801887c:	681a      	ldr	r2, [r3, #0]
 801887e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018882:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801888c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018890:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8018894:	601a      	str	r2, [r3, #0]
 8018896:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801889a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	461a      	mov	r2, r3
 80188a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188a6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	601a      	str	r2, [r3, #0]
    return source;
 80188ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188b2:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80188b6:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 80188b8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80188bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188c0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80188cc:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80188d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188d4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80188d8:	6018      	str	r0, [r3, #0]
 80188da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188de:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80188e2:	601a      	str	r2, [r3, #0]
 80188e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188e8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80188ec:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80188ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188f2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80188f6:	6819      	ldr	r1, [r3, #0]
 80188f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188fc:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8018900:	681a      	ldr	r2, [r3, #0]
 8018902:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018906:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	fb21 3202 	smlad	r2, r1, r2, r3
 8018910:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018914:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018918:	601a      	str	r2, [r3, #0]
  return(result);
 801891a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801891e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8018928:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801892c:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	4618      	mov	r0, r3
 8018934:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8018938:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 801893c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018940:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8018944:	6018      	str	r0, [r3, #0]
 8018946:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801894a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801894e:	601a      	str	r2, [r3, #0]
 8018950:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018954:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8018958:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801895a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801895e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8018962:	6819      	ldr	r1, [r3, #0]
 8018964:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018968:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801896c:	681a      	ldr	r2, [r3, #0]
 801896e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018972:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	fb21 3202 	smlad	r2, r1, r2, r3
 801897c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018980:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8018984:	601a      	str	r2, [r3, #0]
  return(result);
 8018986:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801898a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8018994:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018998:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801899c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80189a0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80189a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	461a      	mov	r2, r3
 80189b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189b6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80189ba:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80189bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	1d1a      	adds	r2, r3, #4
 80189ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	601a      	str	r2, [r3, #0]
    return (val);
 80189d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189da:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80189de:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80189e0:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80189e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189e8:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80189ec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80189f0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80189f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189f6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	461a      	mov	r2, r3
 8018a02:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a06:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8018a0a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018a0c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a10:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	1d1a      	adds	r2, r3, #4
 8018a1a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a1e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	601a      	str	r2, [r3, #0]
    return (val);
 8018a26:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a2a:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8018a2e:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8018a30:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8018a34:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a38:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8018a44:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8018a48:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a4c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8018a50:	6018      	str	r0, [r3, #0]
 8018a52:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a56:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8018a5a:	601a      	str	r2, [r3, #0]
 8018a5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8018a64:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018a66:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a6a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8018a6e:	6819      	ldr	r1, [r3, #0]
 8018a70:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a74:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8018a78:	681a      	ldr	r2, [r3, #0]
 8018a7a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	fb21 3202 	smlad	r2, r1, r2, r3
 8018a88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a8c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8018a90:	601a      	str	r2, [r3, #0]
  return(result);
 8018a92:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a96:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8018aa0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018aa4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8018ab0:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8018ab4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ab8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8018abc:	6018      	str	r0, [r3, #0]
 8018abe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ac2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8018ac6:	601a      	str	r2, [r3, #0]
 8018ac8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018acc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8018ad0:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018ad2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ad6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8018ada:	6819      	ldr	r1, [r3, #0]
 8018adc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ae0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8018ae4:	681a      	ldr	r2, [r3, #0]
 8018ae6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018aea:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	fb21 3202 	smlad	r2, r1, r2, r3
 8018af4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018af8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8018afc:	601a      	str	r2, [r3, #0]
  return(result);
 8018afe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b02:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

            col_count--;
 8018b0c:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8018b10:	3b01      	subs	r3, #1
 8018b12:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8018b16:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	f47f ad66 	bne.w	80185ec <arm_nn_mat_mult_kernel_s8_s16+0x1344>
        }
        col_count = num_col_a & 0x3;
 8018b20:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8018b24:	f003 0303 	and.w	r3, r3, #3
 8018b28:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8018b2c:	e03e      	b.n	8018bac <arm_nn_mat_mult_kernel_s8_s16+0x1904>
        {
            q7_t a0 = *ip_a0++;
 8018b2e:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8018b32:	1c53      	adds	r3, r2, #1
 8018b34:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8018b38:	7813      	ldrb	r3, [r2, #0]
 8018b3a:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
            q15_t b0 = *ip_b0++;
 8018b3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b42:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8018b46:	6819      	ldr	r1, [r3, #0]
 8018b48:	1c8a      	adds	r2, r1, #2
 8018b4a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b4e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8018b52:	601a      	str	r2, [r3, #0]
 8018b54:	880b      	ldrh	r3, [r1, #0]
 8018b56:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
            q15_t b1 = *ip_b1++;
 8018b5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b5e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8018b62:	6819      	ldr	r1, [r3, #0]
 8018b64:	1c8a      	adds	r2, r1, #2
 8018b66:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b6a:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8018b6e:	601a      	str	r2, [r3, #0]
 8018b70:	880b      	ldrh	r3, [r1, #0]
 8018b72:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438

            ch_0_out_0 += a0 * b0;
 8018b76:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 8018b7a:	f9b7 343a 	ldrsh.w	r3, [r7, #1082]	; 0x43a
 8018b7e:	fb03 f202 	mul.w	r2, r3, r2
 8018b82:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8018b86:	4413      	add	r3, r2
 8018b88:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 += a0 * b1;
 8018b8c:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 8018b90:	f9b7 3438 	ldrsh.w	r3, [r7, #1080]	; 0x438
 8018b94:	fb03 f202 	mul.w	r2, r3, r2
 8018b98:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8018b9c:	4413      	add	r3, r2
 8018b9e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            col_count--;
 8018ba2:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8018ba6:	3b01      	subs	r3, #1
 8018ba8:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8018bac:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d1bc      	bne.n	8018b2e <arm_nn_mat_mult_kernel_s8_s16+0x1886>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8018bb4:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018bb8:	6818      	ldr	r0, [r3, #0]
 8018bba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018bbe:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	6819      	ldr	r1, [r3, #0]
 8018bc6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018bca:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8018bce:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8018bd2:	6013      	str	r3, [r2, #0]
 8018bd4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018bd8:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8018bdc:	6018      	str	r0, [r3, #0]
 8018bde:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018be2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8018be6:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018be8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018bec:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8018bf6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018bfa:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	fa03 f202 	lsl.w	r2, r3, r2
 8018c04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c08:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8018c0c:	601a      	str	r2, [r3, #0]
 8018c0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c12:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8018c16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c1a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018c22:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c26:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8018c2e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c32:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018c3a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8018c3c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c40:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018c44:	2300      	movs	r3, #0
 8018c46:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8018c4c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c50:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	17da      	asrs	r2, r3, #31
 8018c58:	613b      	str	r3, [r7, #16]
 8018c5a:	617a      	str	r2, [r7, #20]
 8018c5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c60:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	17da      	asrs	r2, r3, #31
 8018c68:	60bb      	str	r3, [r7, #8]
 8018c6a:	60fa      	str	r2, [r7, #12]
 8018c6c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8018c70:	4633      	mov	r3, r6
 8018c72:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8018c76:	4642      	mov	r2, r8
 8018c78:	fb02 f203 	mul.w	r2, r2, r3
 8018c7c:	464b      	mov	r3, r9
 8018c7e:	462c      	mov	r4, r5
 8018c80:	fb04 f303 	mul.w	r3, r4, r3
 8018c84:	4413      	add	r3, r2
 8018c86:	462a      	mov	r2, r5
 8018c88:	4644      	mov	r4, r8
 8018c8a:	fba2 4204 	umull	r4, r2, r2, r4
 8018c8e:	657a      	str	r2, [r7, #84]	; 0x54
 8018c90:	4622      	mov	r2, r4
 8018c92:	653a      	str	r2, [r7, #80]	; 0x50
 8018c94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018c96:	4413      	add	r3, r2
 8018c98:	657b      	str	r3, [r7, #84]	; 0x54
 8018c9a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8018c9e:	4623      	mov	r3, r4
 8018ca0:	18c3      	adds	r3, r0, r3
 8018ca2:	603b      	str	r3, [r7, #0]
 8018ca4:	462b      	mov	r3, r5
 8018ca6:	eb41 0303 	adc.w	r3, r1, r3
 8018caa:	607b      	str	r3, [r7, #4]
 8018cac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8018cb0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
    result = (int32_t)(mult.long_long >> 31);
 8018cb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8018cb8:	f04f 0200 	mov.w	r2, #0
 8018cbc:	f04f 0300 	mov.w	r3, #0
 8018cc0:	0fc2      	lsrs	r2, r0, #31
 8018cc2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018cc6:	17cb      	asrs	r3, r1, #31
 8018cc8:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8018ccc:	f5a1 7144 	sub.w	r1, r1, #784	; 0x310
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	600b      	str	r3, [r1, #0]
    return result;
 8018cd4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cd8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8018cdc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018cde:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ce2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	dc06      	bgt.n	8018cfa <arm_nn_mat_mult_kernel_s8_s16+0x1a52>
 8018cec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cf0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	425b      	negs	r3, r3
 8018cf8:	e000      	b.n	8018cfc <arm_nn_mat_mult_kernel_s8_s16+0x1a54>
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018d00:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8018d04:	6011      	str	r1, [r2, #0]
 8018d06:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018d0a:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 8018d0e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018d10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d14:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8018d18:	2200      	movs	r2, #0
 8018d1a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018d1c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d20:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8018d24:	2201      	movs	r2, #1
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	409a      	lsls	r2, r3
 8018d2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d2e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018d32:	3a01      	subs	r2, #1
 8018d34:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018d36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d3a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8018d3e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018d42:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 8018d46:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018d4a:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8018d4e:	6809      	ldr	r1, [r1, #0]
 8018d50:	6812      	ldr	r2, [r2, #0]
 8018d52:	400a      	ands	r2, r1
 8018d54:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018d56:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d5a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8018d5e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018d62:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 8018d66:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018d6a:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 8018d6e:	6809      	ldr	r1, [r1, #0]
 8018d70:	6812      	ldr	r2, [r2, #0]
 8018d72:	fa41 f202 	asr.w	r2, r1, r2
 8018d76:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018d78:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d7c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8018d80:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018d84:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8018d88:	6812      	ldr	r2, [r2, #0]
 8018d8a:	1052      	asrs	r2, r2, #1
 8018d8c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8018d8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d92:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	da0a      	bge.n	8018db2 <arm_nn_mat_mult_kernel_s8_s16+0x1b0a>
        threshold++;
 8018d9c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018da0:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8018da4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018da8:	f5a2 724a 	sub.w	r2, r2, #808	; 0x328
 8018dac:	6812      	ldr	r2, [r2, #0]
 8018dae:	3201      	adds	r2, #1
 8018db0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8018db2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018db6:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8018dba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dbe:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8018dc2:	6812      	ldr	r2, [r2, #0]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	429a      	cmp	r2, r3
 8018dc8:	dd0a      	ble.n	8018de0 <arm_nn_mat_mult_kernel_s8_s16+0x1b38>
        result++;
 8018dca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dce:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8018dd2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018dd6:	f5a2 7247 	sub.w	r2, r2, #796	; 0x31c
 8018dda:	6812      	ldr	r2, [r2, #0]
 8018ddc:	3201      	adds	r2, #1
 8018dde:	601a      	str	r2, [r3, #0]
    return result;
 8018de0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018de4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8018de8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018dea:	bf00      	nop
 8018dec:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 += out_offset;
 8018df0:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8018df4:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8018df8:	4413      	add	r3, r2
 8018dfa:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8018dfe:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 8018e02:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8018e06:	4293      	cmp	r3, r2
 8018e08:	bfb8      	it	lt
 8018e0a:	4613      	movlt	r3, r2
 8018e0c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8018e10:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 8018e14:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8018e18:	4293      	cmp	r3, r2
 8018e1a:	bfa8      	it	ge
 8018e1c:	4613      	movge	r3, r2
 8018e1e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        *out_0++ = (q7_t)ch_0_out_0;
 8018e22:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8018e26:	1c5a      	adds	r2, r3, #1
 8018e28:	f8c7 24a8 	str.w	r2, [r7, #1192]	; 0x4a8
 8018e2c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8018e30:	b252      	sxtb	r2, r2
 8018e32:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8018e34:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018e38:	6819      	ldr	r1, [r3, #0]
 8018e3a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e3e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e4a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8018e4e:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8018e52:	6018      	str	r0, [r3, #0]
 8018e54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e58:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8018e5c:	6019      	str	r1, [r3, #0]
 8018e5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e62:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8018e66:	601a      	str	r2, [r3, #0]
 8018e68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e6c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e76:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018e7a:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8018e7e:	6812      	ldr	r2, [r2, #0]
 8018e80:	409a      	lsls	r2, r3
 8018e82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e86:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8018e8a:	601a      	str	r2, [r3, #0]
 8018e8c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e90:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8018e94:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018e98:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 8018e9c:	6812      	ldr	r2, [r2, #0]
 8018e9e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018ea0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ea4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8018eac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018eb0:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8018eb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018eb8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8018eba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ebe:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018ec6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8018eca:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8018ece:	f5a1 7136 	sub.w	r1, r1, #728	; 0x2d8
 8018ed2:	6809      	ldr	r1, [r1, #0]
 8018ed4:	17c8      	asrs	r0, r1, #31
 8018ed6:	62b9      	str	r1, [r7, #40]	; 0x28
 8018ed8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8018eda:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8018ede:	f5a1 7137 	sub.w	r1, r1, #732	; 0x2dc
 8018ee2:	6809      	ldr	r1, [r1, #0]
 8018ee4:	17c8      	asrs	r0, r1, #31
 8018ee6:	6239      	str	r1, [r7, #32]
 8018ee8:	6278      	str	r0, [r7, #36]	; 0x24
 8018eea:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8018eee:	4631      	mov	r1, r6
 8018ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8018ef4:	4640      	mov	r0, r8
 8018ef6:	fb00 f001 	mul.w	r0, r0, r1
 8018efa:	4649      	mov	r1, r9
 8018efc:	462c      	mov	r4, r5
 8018efe:	fb04 f101 	mul.w	r1, r4, r1
 8018f02:	4401      	add	r1, r0
 8018f04:	4628      	mov	r0, r5
 8018f06:	4644      	mov	r4, r8
 8018f08:	fba0 4004 	umull	r4, r0, r0, r4
 8018f0c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8018f0e:	4620      	mov	r0, r4
 8018f10:	65b8      	str	r0, [r7, #88]	; 0x58
 8018f12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018f14:	4401      	add	r1, r0
 8018f16:	65f9      	str	r1, [r7, #92]	; 0x5c
 8018f18:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8018f1c:	4621      	mov	r1, r4
 8018f1e:	1851      	adds	r1, r2, r1
 8018f20:	61b9      	str	r1, [r7, #24]
 8018f22:	4629      	mov	r1, r5
 8018f24:	eb43 0101 	adc.w	r1, r3, r1
 8018f28:	61f9      	str	r1, [r7, #28]
 8018f2a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8018f2e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
    result = (int32_t)(mult.long_long >> 31);
 8018f32:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8018f36:	f04f 0200 	mov.w	r2, #0
 8018f3a:	f04f 0300 	mov.w	r3, #0
 8018f3e:	0fc2      	lsrs	r2, r0, #31
 8018f40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018f44:	17cb      	asrs	r3, r1, #31
 8018f46:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8018f4a:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8018f4e:	4613      	mov	r3, r2
 8018f50:	600b      	str	r3, [r1, #0]
    return result;
 8018f52:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f56:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8018f5a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018f5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f60:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	dc06      	bgt.n	8018f78 <arm_nn_mat_mult_kernel_s8_s16+0x1cd0>
 8018f6a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f6e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	425b      	negs	r3, r3
 8018f76:	e000      	b.n	8018f7a <arm_nn_mat_mult_kernel_s8_s16+0x1cd2>
 8018f78:	2300      	movs	r3, #0
 8018f7a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018f7e:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 8018f82:	6011      	str	r1, [r2, #0]
 8018f84:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018f88:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8018f8c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018f8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f92:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8018f96:	2200      	movs	r2, #0
 8018f98:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018f9a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f9e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8018fa2:	2201      	movs	r2, #1
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	409a      	lsls	r2, r3
 8018fa8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018fac:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8018fb0:	3a01      	subs	r2, #1
 8018fb2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018fb4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018fb8:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8018fbc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018fc0:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8018fc4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018fc8:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8018fcc:	6809      	ldr	r1, [r1, #0]
 8018fce:	6812      	ldr	r2, [r2, #0]
 8018fd0:	400a      	ands	r2, r1
 8018fd2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018fd4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018fd8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8018fdc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018fe0:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8018fe4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018fe8:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8018fec:	6809      	ldr	r1, [r1, #0]
 8018fee:	6812      	ldr	r2, [r2, #0]
 8018ff0:	fa41 f202 	asr.w	r2, r1, r2
 8018ff4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018ff6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ffa:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8018ffe:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019002:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8019006:	6812      	ldr	r2, [r2, #0]
 8019008:	1052      	asrs	r2, r2, #1
 801900a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801900c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019010:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	2b00      	cmp	r3, #0
 8019018:	da0a      	bge.n	8019030 <arm_nn_mat_mult_kernel_s8_s16+0x1d88>
        threshold++;
 801901a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801901e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8019022:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019026:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 801902a:	6812      	ldr	r2, [r2, #0]
 801902c:	3201      	adds	r2, #1
 801902e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019030:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019034:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8019038:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801903c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8019040:	6812      	ldr	r2, [r2, #0]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	429a      	cmp	r2, r3
 8019046:	dd0a      	ble.n	801905e <arm_nn_mat_mult_kernel_s8_s16+0x1db6>
        result++;
 8019048:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801904c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019050:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019054:	f5a2 723b 	sub.w	r2, r2, #748	; 0x2ec
 8019058:	6812      	ldr	r2, [r2, #0]
 801905a:	3201      	adds	r2, #1
 801905c:	601a      	str	r2, [r3, #0]
    return result;
 801905e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019062:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019066:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019068:	bf00      	nop
 801906a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 += out_offset;
 801906e:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8019072:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8019076:	4413      	add	r3, r2
 8019078:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801907c:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 8019080:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8019084:	4293      	cmp	r3, r2
 8019086:	bfb8      	it	lt
 8019088:	4613      	movlt	r3, r2
 801908a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801908e:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 8019092:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8019096:	4293      	cmp	r3, r2
 8019098:	bfa8      	it	ge
 801909a:	4613      	movge	r3, r2
 801909c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        *out_1++ = (q7_t)ch_0_out_1;
 80190a0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80190a4:	1c5a      	adds	r2, r3, #1
 80190a6:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 80190aa:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80190ae:	b252      	sxtb	r2, r2
 80190b0:	701a      	strb	r2, [r3, #0]
        out_mult++;
 80190b2:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80190b6:	3304      	adds	r3, #4
 80190b8:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 80190bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80190c0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80190c4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80190c8:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 80190cc:	6812      	ldr	r2, [r2, #0]
 80190ce:	3204      	adds	r2, #4
 80190d0:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 80190d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80190d6:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 80190da:	881b      	ldrh	r3, [r3, #0]
 80190dc:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 80190e0:	4413      	add	r3, r2
 80190e2:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8

    /* return the new output pointer with offset */
    return out_0;
 80190e6:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 80190ea:	4618      	mov	r0, r3
 80190ec:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 80190f0:	46bd      	mov	sp, r7
 80190f2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80190f6:	4770      	bx	lr

080190f8 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 80190f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190fa:	b093      	sub	sp, #76	; 0x4c
 80190fc:	af0a      	add	r7, sp, #40	; 0x28
 80190fe:	6178      	str	r0, [r7, #20]
 8019100:	6139      	str	r1, [r7, #16]
 8019102:	60fa      	str	r2, [r7, #12]
 8019104:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 801910c:	e033      	b.n	8019176 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 801910e:	693b      	ldr	r3, [r7, #16]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	607b      	str	r3, [r7, #4]
 8019114:	693a      	ldr	r2, [r7, #16]
 8019116:	6852      	ldr	r2, [r2, #4]
 8019118:	6939      	ldr	r1, [r7, #16]
 801911a:	6889      	ldr	r1, [r1, #8]
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	6800      	ldr	r0, [r0, #0]
 8019120:	68fc      	ldr	r4, [r7, #12]
 8019122:	6864      	ldr	r4, [r4, #4]
 8019124:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8019126:	682d      	ldr	r5, [r5, #0]
 8019128:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 801912a:	68f6      	ldr	r6, [r6, #12]
 801912c:	693b      	ldr	r3, [r7, #16]
 801912e:	68db      	ldr	r3, [r3, #12]
 8019130:	603b      	str	r3, [r7, #0]
 8019132:	693b      	ldr	r3, [r7, #16]
 8019134:	691b      	ldr	r3, [r3, #16]
 8019136:	9308      	str	r3, [sp, #32]
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	9307      	str	r3, [sp, #28]
 801913c:	9606      	str	r6, [sp, #24]
 801913e:	9505      	str	r5, [sp, #20]
 8019140:	9404      	str	r4, [sp, #16]
 8019142:	9003      	str	r0, [sp, #12]
 8019144:	9102      	str	r1, [sp, #8]
 8019146:	9201      	str	r2, [sp, #4]
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	9300      	str	r3, [sp, #0]
 801914c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801914e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019152:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019154:	f004 fe94 	bl	801de80 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 8019158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	461a      	mov	r2, r3
 801915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019160:	4413      	add	r3, r2
 8019162:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8019164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019166:	68db      	ldr	r3, [r3, #12]
 8019168:	461a      	mov	r2, r3
 801916a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801916c:	4413      	add	r3, r2
 801916e:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 8019170:	69fb      	ldr	r3, [r7, #28]
 8019172:	3b01      	subs	r3, #1
 8019174:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8019176:	69fb      	ldr	r3, [r7, #28]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d1c8      	bne.n	801910e <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 801917c:	2300      	movs	r3, #0
}
 801917e:	4618      	mov	r0, r3
 8019180:	3724      	adds	r7, #36	; 0x24
 8019182:	46bd      	mov	sp, r7
 8019184:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019186 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8019186:	b480      	push	{r7}
 8019188:	b083      	sub	sp, #12
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 801918e:	2300      	movs	r3, #0
}
 8019190:	4618      	mov	r0, r3
 8019192:	370c      	adds	r7, #12
 8019194:	46bd      	mov	sp, r7
 8019196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919a:	4770      	bx	lr

0801919c <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 801919c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80191a0:	f6ad 2dd8 	subw	sp, sp, #2776	; 0xad8
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	f607 24d8 	addw	r4, r7, #2776	; 0xad8
 80191aa:	f6a4 2404 	subw	r4, r4, #2564	; 0xa04
 80191ae:	6020      	str	r0, [r4, #0]
 80191b0:	f607 20d8 	addw	r0, r7, #2776	; 0xad8
 80191b4:	f6a0 2008 	subw	r0, r0, #2568	; 0xa08
 80191b8:	6001      	str	r1, [r0, #0]
 80191ba:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80191be:	f6a1 210c 	subw	r1, r1, #2572	; 0xa0c
 80191c2:	600a      	str	r2, [r1, #0]
 80191c4:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 80191c8:	f5a2 6221 	sub.w	r2, r2, #2576	; 0xa10
 80191cc:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 80191ce:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 80191d2:	3b04      	subs	r3, #4
 80191d4:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80191d8:	2300      	movs	r3, #0
 80191da:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 80191de:	f004 bc7b 	b.w	801dad8 <arm_nn_mat_mult_nt_t_s8+0x493c>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80191e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191e6:	f6a3 1248 	subw	r2, r3, #2376	; 0x948
 80191ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191ee:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 80191f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80191fa:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

        q31_t lhs_offset_contribution0 = 0;
 8019204:	2300      	movs	r3, #0
 8019206:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        q31_t lhs_offset_contribution1 = 0;
 801920a:	2300      	movs	r3, #0
 801920c:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8

        for (int32_t x = 0; x < rhs_cols; ++x)
 8019210:	2300      	movs	r3, #0
 8019212:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8019216:	e028      	b.n	801926a <arm_nn_mat_mult_nt_t_s8+0xce>
        {
            lhs_offset_contribution0 += rhs[x];
 8019218:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 801921c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019220:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	4413      	add	r3, r2
 8019228:	f993 3000 	ldrsb.w	r3, [r3]
 801922c:	461a      	mov	r2, r3
 801922e:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8019232:	4413      	add	r3, r2
 8019234:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 8019238:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 801923c:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8019240:	4413      	add	r3, r2
 8019242:	461a      	mov	r2, r3
 8019244:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019248:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	4413      	add	r3, r2
 8019250:	f993 3000 	ldrsb.w	r3, [r3]
 8019254:	461a      	mov	r2, r3
 8019256:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 801925a:	4413      	add	r3, r2
 801925c:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        for (int32_t x = 0; x < rhs_cols; ++x)
 8019260:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8019264:	3301      	adds	r3, #1
 8019266:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 801926a:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 801926e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8019272:	429a      	cmp	r2, r3
 8019274:	dbd0      	blt.n	8019218 <arm_nn_mat_mult_nt_t_s8+0x7c>
        }

        lhs_offset_contribution0 *= lhs_offset;
 8019276:	f8d7 2acc 	ldr.w	r2, [r7, #2764]	; 0xacc
 801927a:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 801927e:	fb02 f303 	mul.w	r3, r2, r3
 8019282:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        lhs_offset_contribution1 *= lhs_offset;
 8019286:	f8d7 2ac8 	ldr.w	r2, [r7, #2760]	; 0xac8
 801928a:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 801928e:	fb02 f303 	mul.w	r3, r2, r3
 8019292:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        if (bias)
 8019296:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801929a:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d01e      	beq.n	80192e2 <arm_nn_mat_mult_nt_t_s8+0x146>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 80192a4:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80192a8:	009a      	lsls	r2, r3, #2
 80192aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192ae:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	4413      	add	r3, r2
 80192b6:	681a      	ldr	r2, [r3, #0]
 80192b8:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 80192bc:	4413      	add	r3, r2
 80192be:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 80192c2:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80192c6:	3301      	adds	r3, #1
 80192c8:	009a      	lsls	r2, r3, #2
 80192ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192ce:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	4413      	add	r3, r2
 80192d6:	681a      	ldr	r2, [r3, #0]
 80192d8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80192dc:	4413      	add	r3, r2
 80192de:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 80192e2:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80192e6:	105b      	asrs	r3, r3, #1
 80192e8:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0

        while (lhs_rows_idx)
 80192ec:	f002 bdd2 	b.w	801be94 <arm_nn_mat_mult_nt_t_s8+0x2cf8>
        {
            const q7_t *rhs_ptr = &rhs[0];
 80192f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192f4:	f6a3 124c 	subw	r2, r3, #2380	; 0x94c
 80192f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80192fc:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 8019304:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8019308:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            q31_t res01 = lhs_offset_contribution1;
 801930c:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8019310:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            q31_t res10 = lhs_offset_contribution0;
 8019314:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8019318:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            q31_t res11 = lhs_offset_contribution1;
 801931c:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8019320:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            int32_t rhs_cols_idx = 0;
 8019324:	2300      	movs	r3, #0
 8019326:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801932a:	f001 bfee 	b.w	801b30a <arm_nn_mat_mult_nt_t_s8+0x216e>
 801932e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019332:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 8019336:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801933a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801933c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019340:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	461a      	mov	r2, r3
 801934c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019350:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8019354:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019356:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801935a:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	1d1a      	adds	r2, r3, #4
 8019364:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019368:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	601a      	str	r2, [r3, #0]
    return (val);
 8019370:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019374:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8019378:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801937a:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val2 = __SXTB16(val1);
 801937e:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8019382:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019386:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 801938a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801938c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019390:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	fa2f f283 	sxtb16	r2, r3
 801939a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801939e:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80193a2:	601a      	str	r2, [r3, #0]
  return(result);
 80193a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193a8:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 80193b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193b6:	f5a3 62a1 	sub.w	r2, r3, #1288	; 0x508
 80193ba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80193be:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80193c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193c4:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	461a      	mov	r2, r3
 80193d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193d4:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80193d8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80193da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193de:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	1d1a      	adds	r2, r3, #4
 80193e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193ec:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	601a      	str	r2, [r3, #0]
    return (val);
 80193f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80193f8:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80193fc:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80193fe:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8019402:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019406:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801940a:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801940e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019410:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019414:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	fa2f f283 	sxtb16	r2, r3
 801941e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019422:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8019426:	601a      	str	r2, [r3, #0]
  return(result);
 8019428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801942c:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8019436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801943a:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801943e:	681a      	ldr	r2, [r3, #0]
 8019440:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8019444:	441a      	add	r2, r3
 8019446:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801944a:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801944e:	601a      	str	r2, [r3, #0]
 8019450:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019454:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801945e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019462:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8019466:	601a      	str	r2, [r3, #0]
    return (val);
 8019468:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801946c:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val1 = __SXTB16_RORn(val1, 8);
 8019476:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801947a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801947e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8019482:	601a      	str	r2, [r3, #0]
 8019484:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019488:	f2a3 42e4 	subw	r2, r3, #1252	; 0x4e4
 801948c:	2308      	movs	r3, #8
 801948e:	6013      	str	r3, [r2, #0]
 8019490:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019494:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 8019498:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801949c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	6013      	str	r3, [r2, #0]
 80194a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194a8:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 80194ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194b0:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80194b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194bc:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 80194c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194c4:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	f003 031f 	and.w	r3, r3, #31
 80194ce:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80194d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194d4:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d105      	bne.n	80194ea <arm_nn_mat_mult_nt_t_s8+0x34e>
    return op1;
 80194de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194e2:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80194e6:	681a      	ldr	r2, [r3, #0]
 80194e8:	e00a      	b.n	8019500 <arm_nn_mat_mult_nt_t_s8+0x364>
  return (op1 >> op2) | (op1 << (32U - op2));
 80194ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194ee:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 80194f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80194f6:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80194fa:	6812      	ldr	r2, [r2, #0]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	41da      	rors	r2, r3
 8019500:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019504:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8019508:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801950a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801950e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	fa2f f283 	sxtb16	r2, r3
 8019518:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801951c:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8019520:	601a      	str	r2, [r3, #0]
  return(result);
 8019522:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019526:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801952a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801952c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019530:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8019534:	601a      	str	r2, [r3, #0]
  return result;
 8019536:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801953a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8019544:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019548:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801954c:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8019550:	601a      	str	r2, [r3, #0]
 8019552:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019556:	f5a3 6299 	sub.w	r2, r3, #1224	; 0x4c8
 801955a:	2308      	movs	r3, #8
 801955c:	6013      	str	r3, [r2, #0]
 801955e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019562:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8019566:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801956a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	6013      	str	r3, [r2, #0]
 8019572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019576:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 801957a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801957e:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019586:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801958a:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 801958e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019592:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	f003 031f 	and.w	r3, r3, #31
 801959c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801959e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195a2:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d105      	bne.n	80195b8 <arm_nn_mat_mult_nt_t_s8+0x41c>
    return op1;
 80195ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195b0:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80195b4:	681a      	ldr	r2, [r3, #0]
 80195b6:	e00a      	b.n	80195ce <arm_nn_mat_mult_nt_t_s8+0x432>
  return (op1 >> op2) | (op1 << (32U - op2));
 80195b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195bc:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 80195c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195c4:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80195c8:	6812      	ldr	r2, [r2, #0]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	41da      	rors	r2, r3
 80195ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195d2:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80195d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80195d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195dc:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	fa2f f283 	sxtb16	r2, r3
 80195e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195ea:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80195ee:	601a      	str	r2, [r3, #0]
  return(result);
 80195f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195f4:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80195f8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80195fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80195fe:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8019602:	601a      	str	r2, [r3, #0]
  return result;
 8019604:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019608:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8019612:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019616:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801961a:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801961e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019622:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8019626:	601a      	str	r2, [r3, #0]
 8019628:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801962c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8019630:	6019      	str	r1, [r3, #0]
 8019632:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019636:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801963a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801963c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019640:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8019644:	6819      	ldr	r1, [r3, #0]
 8019646:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801964a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801964e:	681a      	ldr	r2, [r3, #0]
 8019650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019654:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	fb21 3202 	smlad	r2, r1, r2, r3
 801965e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019662:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8019666:	601a      	str	r2, [r3, #0]
  return(result);
 8019668:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801966c:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 8019676:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801967a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801967e:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8019682:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019684:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019688:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	fa2f f283 	sxtb16	r2, r3
 8019692:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019696:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801969a:	601a      	str	r2, [r3, #0]
  return(result);
 801969c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196a0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 80196aa:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80196ae:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 80196b2:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 80196b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196ba:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80196be:	601a      	str	r2, [r3, #0]
 80196c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196c4:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 80196c8:	6019      	str	r1, [r3, #0]
 80196ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196ce:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 80196d2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80196d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196d8:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80196dc:	6819      	ldr	r1, [r3, #0]
 80196de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196e2:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 80196e6:	681a      	ldr	r2, [r3, #0]
 80196e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196ec:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	fb21 3202 	smlad	r2, r1, r2, r3
 80196f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80196fa:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80196fe:	601a      	str	r2, [r3, #0]
  return(result);
 8019700:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019704:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801970e:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8019712:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019716:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 801971a:	601a      	str	r2, [r3, #0]
 801971c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019720:	f2a3 4284 	subw	r2, r3, #1156	; 0x484
 8019724:	2308      	movs	r3, #8
 8019726:	6013      	str	r3, [r2, #0]
 8019728:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801972c:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 8019730:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019734:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	6013      	str	r3, [r2, #0]
 801973c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019740:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8019744:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019748:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019750:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019754:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8019758:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801975c:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	f003 031f 	and.w	r3, r3, #31
 8019766:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019768:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801976c:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d105      	bne.n	8019782 <arm_nn_mat_mult_nt_t_s8+0x5e6>
    return op1;
 8019776:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801977a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801977e:	681a      	ldr	r2, [r3, #0]
 8019780:	e00a      	b.n	8019798 <arm_nn_mat_mult_nt_t_s8+0x5fc>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019782:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019786:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 801978a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801978e:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8019792:	6812      	ldr	r2, [r2, #0]
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	41da      	rors	r2, r3
 8019798:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801979c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80197a0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80197a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197a6:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	fa2f f283 	sxtb16	r2, r3
 80197b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197b4:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80197b8:	601a      	str	r2, [r3, #0]
  return(result);
 80197ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197be:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80197c2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80197c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197c8:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80197cc:	601a      	str	r2, [r3, #0]
  return result;
 80197ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197d2:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 80197dc:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80197e0:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 80197e4:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 80197e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197ec:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80197f0:	601a      	str	r2, [r3, #0]
 80197f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80197f6:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80197fa:	6019      	str	r1, [r3, #0]
 80197fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019800:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8019804:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019806:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801980a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801980e:	6819      	ldr	r1, [r3, #0]
 8019810:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019814:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8019818:	681a      	ldr	r2, [r3, #0]
 801981a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801981e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	fb21 3202 	smlad	r2, r1, r2, r3
 8019828:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801982c:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8019830:	601a      	str	r2, [r3, #0]
  return(result);
 8019832:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019836:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 8019840:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019844:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8019848:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801984c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019850:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8019854:	601a      	str	r2, [r3, #0]
 8019856:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801985a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 801985e:	6019      	str	r1, [r3, #0]
 8019860:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019864:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8019868:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801986a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801986e:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8019872:	6819      	ldr	r1, [r3, #0]
 8019874:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019878:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 801987c:	681a      	ldr	r2, [r3, #0]
 801987e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019882:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	fb21 3202 	smlad	r2, r1, r2, r3
 801988c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019890:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8019894:	601a      	str	r2, [r3, #0]
  return(result);
 8019896:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801989a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 80198a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198a8:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 80198ac:	681a      	ldr	r2, [r3, #0]
 80198ae:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 80198b2:	441a      	add	r2, r3
 80198b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198b8:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80198bc:	601a      	str	r2, [r3, #0]
 80198be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198c2:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80198cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198d0:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 80198d4:	601a      	str	r2, [r3, #0]
    return (val);
 80198d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198da:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 80198e4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 80198e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198ec:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 80198f0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80198f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80198f6:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	fa2f f283 	sxtb16	r2, r3
 8019900:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019904:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8019908:	601a      	str	r2, [r3, #0]
  return(result);
 801990a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801990e:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 8019918:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801991c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019920:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8019924:	601a      	str	r2, [r3, #0]
 8019926:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801992a:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 801992e:	2308      	movs	r3, #8
 8019930:	6013      	str	r3, [r2, #0]
 8019932:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019936:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 801993a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801993e:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	6013      	str	r3, [r2, #0]
 8019946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801994a:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 801994e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019952:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801995a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801995e:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8019962:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019966:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	f003 031f 	and.w	r3, r3, #31
 8019970:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019972:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019976:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d105      	bne.n	801998c <arm_nn_mat_mult_nt_t_s8+0x7f0>
    return op1;
 8019980:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019984:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8019988:	681a      	ldr	r2, [r3, #0]
 801998a:	e00a      	b.n	80199a2 <arm_nn_mat_mult_nt_t_s8+0x806>
  return (op1 >> op2) | (op1 << (32U - op2));
 801998c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019990:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8019994:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019998:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801999c:	6812      	ldr	r2, [r2, #0]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	41da      	rors	r2, r3
 80199a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199a6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80199aa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80199ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199b0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	fa2f f283 	sxtb16	r2, r3
 80199ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199be:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80199c2:	601a      	str	r2, [r3, #0]
  return(result);
 80199c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199c8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80199cc:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80199ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199d2:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80199d6:	601a      	str	r2, [r3, #0]
  return result;
 80199d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199dc:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 80199e6:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 80199ea:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 80199ee:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 80199f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80199f6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80199fa:	601a      	str	r2, [r3, #0]
 80199fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a00:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8019a04:	6019      	str	r1, [r3, #0]
 8019a06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a0a:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8019a0e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019a10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a14:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8019a18:	6819      	ldr	r1, [r3, #0]
 8019a1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a1e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8019a22:	681a      	ldr	r2, [r3, #0]
 8019a24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a28:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	fb21 3202 	smlad	r2, r1, r2, r3
 8019a32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a36:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8019a3a:	601a      	str	r2, [r3, #0]
  return(result);
 8019a3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a40:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 8019a4a:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019a4e:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 8019a52:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8019a56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a5a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8019a5e:	601a      	str	r2, [r3, #0]
 8019a60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a64:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8019a68:	6019      	str	r1, [r3, #0]
 8019a6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a6e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8019a72:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019a74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a78:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8019a7c:	6819      	ldr	r1, [r3, #0]
 8019a7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a82:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8019a86:	681a      	ldr	r2, [r3, #0]
 8019a88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a8c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	fb21 3202 	smlad	r2, r1, r2, r3
 8019a96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019a9a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8019a9e:	601a      	str	r2, [r3, #0]
  return(result);
 8019aa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019aa4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 8019aae:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019ab2:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8019ab6:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 8019aba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019abe:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8019ac2:	601a      	str	r2, [r3, #0]
 8019ac4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ac8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8019acc:	6019      	str	r1, [r3, #0]
 8019ace:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ad2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8019ad6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019ad8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019adc:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8019ae0:	6819      	ldr	r1, [r3, #0]
 8019ae2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ae6:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8019aea:	681a      	ldr	r2, [r3, #0]
 8019aec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019af0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	fb21 3202 	smlad	r2, r1, r2, r3
 8019afa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019afe:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8019b02:	601a      	str	r2, [r3, #0]
  return(result);
 8019b04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b08:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8019b12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b16:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8019b1a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8019b1e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8019b20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b24:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	461a      	mov	r2, r3
 8019b30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b34:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8019b38:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019b3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b3e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	1d1a      	adds	r2, r3, #4
 8019b48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b4c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	601a      	str	r2, [r3, #0]
    return (val);
 8019b54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b58:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8019b5c:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8019b5e:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 8019b62:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019b66:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 8019b6a:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 8019b6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b72:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8019b76:	601a      	str	r2, [r3, #0]
 8019b78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b7c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8019b80:	6019      	str	r1, [r3, #0]
 8019b82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b86:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8019b8a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019b8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b90:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8019b94:	6819      	ldr	r1, [r3, #0]
 8019b96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019b9a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8019b9e:	681a      	ldr	r2, [r3, #0]
 8019ba0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ba4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	fb21 3202 	smlad	r2, r1, r2, r3
 8019bae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bb2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8019bb6:	601a      	str	r2, [r3, #0]
  return(result);
 8019bb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bbc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 8019bc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bca:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 8019bce:	681a      	ldr	r2, [r3, #0]
 8019bd0:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8019bd4:	441a      	add	r2, r3
 8019bd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bda:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8019bde:	601a      	str	r2, [r3, #0]
 8019be0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019be4:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8019bee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bf2:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8019bf6:	601a      	str	r2, [r3, #0]
    return (val);
 8019bf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019bfc:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 8019c06:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8019c0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c0e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019c12:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019c14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c18:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	fa2f f283 	sxtb16	r2, r3
 8019c22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c26:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8019c2a:	601a      	str	r2, [r3, #0]
  return(result);
 8019c2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c30:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8019c3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c3e:	f5a3 7279 	sub.w	r2, r3, #996	; 0x3e4
 8019c42:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8019c46:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8019c48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c4c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	461a      	mov	r2, r3
 8019c58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c5c:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8019c60:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019c62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c66:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	1d1a      	adds	r2, r3, #4
 8019c70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c74:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	601a      	str	r2, [r3, #0]
    return (val);
 8019c7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c80:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8019c84:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8019c86:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 8019c8a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019c8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c92:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8019c96:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019c98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019c9c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	fa2f f283 	sxtb16	r2, r3
 8019ca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019caa:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8019cae:	601a      	str	r2, [r3, #0]
  return(result);
 8019cb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cb4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 8019cbe:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 8019cc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cc6:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8019cca:	601a      	str	r2, [r3, #0]
 8019ccc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cd0:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8019cd4:	2308      	movs	r3, #8
 8019cd6:	6013      	str	r3, [r2, #0]
 8019cd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cdc:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8019ce0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ce4:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	6013      	str	r3, [r2, #0]
 8019cec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cf0:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 8019cf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019cf8:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019d00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d04:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 8019d08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d0c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	f003 031f 	and.w	r3, r3, #31
 8019d16:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019d18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d1c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d105      	bne.n	8019d32 <arm_nn_mat_mult_nt_t_s8+0xb96>
    return op1;
 8019d26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d2a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8019d2e:	681a      	ldr	r2, [r3, #0]
 8019d30:	e00a      	b.n	8019d48 <arm_nn_mat_mult_nt_t_s8+0xbac>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019d32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d36:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8019d3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d3e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019d42:	6812      	ldr	r2, [r2, #0]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	41da      	rors	r2, r3
 8019d48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d4c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8019d50:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019d52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d56:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	fa2f f283 	sxtb16	r2, r3
 8019d60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d64:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8019d68:	601a      	str	r2, [r3, #0]
  return(result);
 8019d6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d6e:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8019d72:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8019d74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d78:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8019d7c:	601a      	str	r2, [r3, #0]
  return result;
 8019d7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d82:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 8019d8c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019d90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d94:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8019d98:	601a      	str	r2, [r3, #0]
 8019d9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019d9e:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 8019da2:	2308      	movs	r3, #8
 8019da4:	6013      	str	r3, [r2, #0]
 8019da6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019daa:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8019dae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019db2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	6013      	str	r3, [r2, #0]
 8019dba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dbe:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8019dc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dc6:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019dce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dd2:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8019dd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dda:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	f003 031f 	and.w	r3, r3, #31
 8019de4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019de6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019dea:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d105      	bne.n	8019e00 <arm_nn_mat_mult_nt_t_s8+0xc64>
    return op1;
 8019df4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019df8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8019dfc:	681a      	ldr	r2, [r3, #0]
 8019dfe:	e00a      	b.n	8019e16 <arm_nn_mat_mult_nt_t_s8+0xc7a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019e00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e04:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8019e08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e0c:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019e10:	6812      	ldr	r2, [r2, #0]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	41da      	rors	r2, r3
 8019e16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e1a:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8019e1e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019e20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e24:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	fa2f f283 	sxtb16	r2, r3
 8019e2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e32:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8019e36:	601a      	str	r2, [r3, #0]
  return(result);
 8019e38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e3c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8019e40:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8019e42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e46:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8019e4a:	601a      	str	r2, [r3, #0]
  return result;
 8019e4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e50:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 8019e5a:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 8019e5e:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8019e62:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8019e66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e6a:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8019e6e:	601a      	str	r2, [r3, #0]
 8019e70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e74:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8019e78:	6019      	str	r1, [r3, #0]
 8019e7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e7e:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8019e82:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019e84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e88:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8019e8c:	6819      	ldr	r1, [r3, #0]
 8019e8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e92:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8019e96:	681a      	ldr	r2, [r3, #0]
 8019e98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019e9c:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	fb21 3202 	smlad	r2, r1, r2, r3
 8019ea6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019eaa:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8019eae:	601a      	str	r2, [r3, #0]
  return(result);
 8019eb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019eb4:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 8019ebe:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8019ec2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ec6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8019eca:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019ecc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ed0:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	fa2f f283 	sxtb16	r2, r3
 8019eda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ede:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8019ee2:	601a      	str	r2, [r3, #0]
  return(result);
 8019ee4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ee8:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 8019ef2:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8019ef6:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 8019efa:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 8019efe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f02:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8019f06:	601a      	str	r2, [r3, #0]
 8019f08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f0c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8019f10:	6019      	str	r1, [r3, #0]
 8019f12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f16:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8019f1a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019f1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f20:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8019f24:	6819      	ldr	r1, [r3, #0]
 8019f26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f2a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8019f2e:	681a      	ldr	r2, [r3, #0]
 8019f30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f34:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	fb21 3202 	smlad	r2, r1, r2, r3
 8019f3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f42:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8019f46:	601a      	str	r2, [r3, #0]
  return(result);
 8019f48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f4c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 8019f56:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 8019f5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f5e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8019f62:	601a      	str	r2, [r3, #0]
 8019f64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f68:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8019f6c:	2308      	movs	r3, #8
 8019f6e:	6013      	str	r3, [r2, #0]
 8019f70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f74:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8019f78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f7c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	6013      	str	r3, [r2, #0]
 8019f84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f88:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8019f8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f90:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019f98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f9c:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8019fa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fa4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	f003 031f 	and.w	r3, r3, #31
 8019fae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8019fb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fb4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d105      	bne.n	8019fca <arm_nn_mat_mult_nt_t_s8+0xe2e>
    return op1;
 8019fbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fc2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8019fc6:	681a      	ldr	r2, [r3, #0]
 8019fc8:	e00a      	b.n	8019fe0 <arm_nn_mat_mult_nt_t_s8+0xe44>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019fca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fce:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8019fd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fd6:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8019fda:	6812      	ldr	r2, [r2, #0]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	41da      	rors	r2, r3
 8019fe0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fe4:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8019fe8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019fea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fee:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	fa2f f283 	sxtb16	r2, r3
 8019ff8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ffc:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 801a000:	601a      	str	r2, [r3, #0]
  return(result);
 801a002:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a006:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 801a00a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a00c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a010:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801a014:	601a      	str	r2, [r3, #0]
  return result;
 801a016:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a01a:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801a024:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a028:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801a02c:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a030:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a034:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801a038:	601a      	str	r2, [r3, #0]
 801a03a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a03e:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801a042:	6019      	str	r1, [r3, #0]
 801a044:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a048:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 801a04c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a04e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a052:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801a056:	6819      	ldr	r1, [r3, #0]
 801a058:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a05c:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801a060:	681a      	ldr	r2, [r3, #0]
 801a062:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a066:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	fb21 3202 	smlad	r2, r1, r2, r3
 801a070:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a074:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801a078:	601a      	str	r2, [r3, #0]
  return(result);
 801a07a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a07e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801a088:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a08c:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801a090:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a094:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a098:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801a09c:	601a      	str	r2, [r3, #0]
 801a09e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0a2:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 801a0a6:	6019      	str	r1, [r3, #0]
 801a0a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0ac:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801a0b0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a0b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0b6:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801a0ba:	6819      	ldr	r1, [r3, #0]
 801a0bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0c0:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 801a0c4:	681a      	ldr	r2, [r3, #0]
 801a0c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0ca:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	fb21 3202 	smlad	r2, r1, r2, r3
 801a0d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0d8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801a0dc:	601a      	str	r2, [r3, #0]
  return(result);
 801a0de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0e2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801a0ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0f0:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801a0f4:	681a      	ldr	r2, [r3, #0]
 801a0f6:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a0fa:	441a      	add	r2, r3
 801a0fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a100:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801a104:	601a      	str	r2, [r3, #0]
 801a106:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a10a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a114:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a118:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 801a11c:	601a      	str	r2, [r3, #0]
    return (val);
 801a11e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a122:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a12c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a130:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a134:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801a138:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a13a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a13e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	fa2f f283 	sxtb16	r2, r3
 801a148:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a14c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801a150:	601a      	str	r2, [r3, #0]
  return(result);
 801a152:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a156:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801a160:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a164:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a168:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801a16c:	601a      	str	r2, [r3, #0]
 801a16e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a172:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801a176:	2308      	movs	r3, #8
 801a178:	6013      	str	r3, [r2, #0]
 801a17a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a17e:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801a182:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a186:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	6013      	str	r3, [r2, #0]
 801a18e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a192:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801a196:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a19a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a1a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1a6:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801a1aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1ae:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	f003 031f 	and.w	r3, r3, #31
 801a1b8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a1ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1be:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d105      	bne.n	801a1d4 <arm_nn_mat_mult_nt_t_s8+0x1038>
    return op1;
 801a1c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1cc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801a1d0:	681a      	ldr	r2, [r3, #0]
 801a1d2:	e00a      	b.n	801a1ea <arm_nn_mat_mult_nt_t_s8+0x104e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a1d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1d8:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801a1dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1e0:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801a1e4:	6812      	ldr	r2, [r2, #0]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	41da      	rors	r2, r3
 801a1ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1ee:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801a1f2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a1f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1f8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	fa2f f283 	sxtb16	r2, r3
 801a202:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a206:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801a20a:	601a      	str	r2, [r3, #0]
  return(result);
 801a20c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a210:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801a214:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a216:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a21a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801a21e:	601a      	str	r2, [r3, #0]
  return result;
 801a220:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a224:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801a22e:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a232:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801a236:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801a23a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a23e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801a242:	601a      	str	r2, [r3, #0]
 801a244:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a248:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801a24c:	6019      	str	r1, [r3, #0]
 801a24e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a252:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801a256:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a258:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a25c:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801a260:	6819      	ldr	r1, [r3, #0]
 801a262:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a266:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801a26a:	681a      	ldr	r2, [r3, #0]
 801a26c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a270:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	fb21 3202 	smlad	r2, r1, r2, r3
 801a27a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a27e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801a282:	601a      	str	r2, [r3, #0]
  return(result);
 801a284:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a288:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801a292:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a296:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801a29a:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801a29e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2a2:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801a2a6:	601a      	str	r2, [r3, #0]
 801a2a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ac:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801a2b0:	6019      	str	r1, [r3, #0]
 801a2b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2b6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801a2ba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a2bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2c0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801a2c4:	6819      	ldr	r1, [r3, #0]
 801a2c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ca:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801a2ce:	681a      	ldr	r2, [r3, #0]
 801a2d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2d4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	fb21 3202 	smlad	r2, r1, r2, r3
 801a2de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2e2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801a2e6:	601a      	str	r2, [r3, #0]
  return(result);
 801a2e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ec:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801a2f6:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a2fa:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801a2fe:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801a302:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a306:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801a30a:	601a      	str	r2, [r3, #0]
 801a30c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a310:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801a314:	6019      	str	r1, [r3, #0]
 801a316:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a31a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801a31e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a320:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a324:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801a328:	6819      	ldr	r1, [r3, #0]
 801a32a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a32e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801a332:	681a      	ldr	r2, [r3, #0]
 801a334:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a338:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	fb21 3202 	smlad	r2, r1, r2, r3
 801a342:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a346:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801a34a:	601a      	str	r2, [r3, #0]
  return(result);
 801a34c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a350:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801a35a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a35e:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801a362:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801a366:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a368:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a36c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	461a      	mov	r2, r3
 801a378:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a37c:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 801a380:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a382:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a386:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	1d1a      	adds	r2, r3, #4
 801a390:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a394:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	601a      	str	r2, [r3, #0]
    return (val);
 801a39c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3a0:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 801a3a4:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801a3a6:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801a3aa:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a3ae:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801a3b2:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801a3b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3ba:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801a3be:	601a      	str	r2, [r3, #0]
 801a3c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3c4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801a3c8:	6019      	str	r1, [r3, #0]
 801a3ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3ce:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801a3d2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a3d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3d8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801a3dc:	6819      	ldr	r1, [r3, #0]
 801a3de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3e2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801a3e6:	681a      	ldr	r2, [r3, #0]
 801a3e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3ec:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	fb21 3202 	smlad	r2, r1, r2, r3
 801a3f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3fa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801a3fe:	601a      	str	r2, [r3, #0]
  return(result);
 801a400:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a404:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801a40e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a412:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801a416:	681a      	ldr	r2, [r3, #0]
 801a418:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a41c:	441a      	add	r2, r3
 801a41e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a422:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801a426:	601a      	str	r2, [r3, #0]
 801a428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a42c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a43a:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 801a43e:	601a      	str	r2, [r3, #0]
    return (val);
 801a440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a444:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 801a44e:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a452:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a456:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801a45a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a45c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a460:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	fa2f f283 	sxtb16	r2, r3
 801a46a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a46e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801a472:	601a      	str	r2, [r3, #0]
  return(result);
 801a474:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a478:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801a482:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a486:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 801a48a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801a48e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a490:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a494:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	461a      	mov	r2, r3
 801a4a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4a4:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 801a4a8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a4aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4ae:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	1d1a      	adds	r2, r3, #4
 801a4b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4bc:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	601a      	str	r2, [r3, #0]
    return (val);
 801a4c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4c8:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 801a4cc:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801a4ce:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a4d2:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a4d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4da:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801a4de:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a4e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4e4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	fa2f f283 	sxtb16	r2, r3
 801a4ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4f2:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801a4f6:	601a      	str	r2, [r3, #0]
  return(result);
 801a4f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4fc:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801a506:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a50a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a50e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801a512:	601a      	str	r2, [r3, #0]
 801a514:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a518:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801a51c:	2308      	movs	r3, #8
 801a51e:	6013      	str	r3, [r2, #0]
 801a520:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a524:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801a528:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a52c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	6013      	str	r3, [r2, #0]
 801a534:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a538:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801a53c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a540:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a548:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a54c:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801a550:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a554:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	f003 031f 	and.w	r3, r3, #31
 801a55e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a560:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a564:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d105      	bne.n	801a57a <arm_nn_mat_mult_nt_t_s8+0x13de>
    return op1;
 801a56e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a572:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801a576:	681a      	ldr	r2, [r3, #0]
 801a578:	e00a      	b.n	801a590 <arm_nn_mat_mult_nt_t_s8+0x13f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a57a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a57e:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801a582:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a586:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801a58a:	6812      	ldr	r2, [r2, #0]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	41da      	rors	r2, r3
 801a590:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a594:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801a598:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a59a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a59e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	fa2f f283 	sxtb16	r2, r3
 801a5a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5ac:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801a5b0:	601a      	str	r2, [r3, #0]
  return(result);
 801a5b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5b6:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801a5ba:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a5bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5c0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801a5c4:	601a      	str	r2, [r3, #0]
  return result;
 801a5c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5ca:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801a5d4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a5d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5dc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801a5e0:	601a      	str	r2, [r3, #0]
 801a5e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5e6:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 801a5ea:	2308      	movs	r3, #8
 801a5ec:	6013      	str	r3, [r2, #0]
 801a5ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5f2:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801a5f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5fa:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	6013      	str	r3, [r2, #0]
 801a602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a606:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801a60a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a60e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a616:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a61a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801a61e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a622:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f003 031f 	and.w	r3, r3, #31
 801a62c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a62e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a632:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d105      	bne.n	801a648 <arm_nn_mat_mult_nt_t_s8+0x14ac>
    return op1;
 801a63c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a640:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801a644:	681a      	ldr	r2, [r3, #0]
 801a646:	e00a      	b.n	801a65e <arm_nn_mat_mult_nt_t_s8+0x14c2>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a648:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a64c:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801a650:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a654:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801a658:	6812      	ldr	r2, [r2, #0]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	41da      	rors	r2, r3
 801a65e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a662:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801a666:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a668:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a66c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	fa2f f283 	sxtb16	r2, r3
 801a676:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a67a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801a67e:	601a      	str	r2, [r3, #0]
  return(result);
 801a680:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a684:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801a688:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a68a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a68e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801a692:	601a      	str	r2, [r3, #0]
  return result;
 801a694:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a698:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801a6a2:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a6a6:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801a6aa:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801a6ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6b2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801a6b6:	601a      	str	r2, [r3, #0]
 801a6b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6bc:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801a6c0:	6019      	str	r1, [r3, #0]
 801a6c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6c6:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801a6ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a6cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6d0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801a6d4:	6819      	ldr	r1, [r3, #0]
 801a6d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6da:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801a6de:	681a      	ldr	r2, [r3, #0]
 801a6e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6e4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	fb21 3202 	smlad	r2, r1, r2, r3
 801a6ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6f2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801a6f6:	601a      	str	r2, [r3, #0]
  return(result);
 801a6f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6fc:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801a706:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801a70a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a70e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801a712:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a714:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a718:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	fa2f f283 	sxtb16	r2, r3
 801a722:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a726:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801a72a:	601a      	str	r2, [r3, #0]
  return(result);
 801a72c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a730:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801a73a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a73e:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801a742:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801a746:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a74a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801a74e:	601a      	str	r2, [r3, #0]
 801a750:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a754:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801a758:	6019      	str	r1, [r3, #0]
 801a75a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a75e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801a762:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a764:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a768:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801a76c:	6819      	ldr	r1, [r3, #0]
 801a76e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a772:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801a776:	681a      	ldr	r2, [r3, #0]
 801a778:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a77c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	fb21 3202 	smlad	r2, r1, r2, r3
 801a786:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a78a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801a78e:	601a      	str	r2, [r3, #0]
  return(result);
 801a790:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a794:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801a79e:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801a7a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7a6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801a7aa:	601a      	str	r2, [r3, #0]
 801a7ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7b0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801a7b4:	2308      	movs	r3, #8
 801a7b6:	6013      	str	r3, [r2, #0]
 801a7b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7bc:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801a7c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7c4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	6013      	str	r3, [r2, #0]
 801a7cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7d0:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801a7d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7d8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a7e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7e4:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801a7e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	f003 031f 	and.w	r3, r3, #31
 801a7f6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a7f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d105      	bne.n	801a812 <arm_nn_mat_mult_nt_t_s8+0x1676>
    return op1;
 801a806:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a80a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801a80e:	681a      	ldr	r2, [r3, #0]
 801a810:	e00a      	b.n	801a828 <arm_nn_mat_mult_nt_t_s8+0x168c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a812:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a816:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801a81a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a81e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801a822:	6812      	ldr	r2, [r2, #0]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	41da      	rors	r2, r3
 801a828:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a82c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801a830:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a832:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a836:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	fa2f f283 	sxtb16	r2, r3
 801a840:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a844:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801a848:	601a      	str	r2, [r3, #0]
  return(result);
 801a84a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a84e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801a852:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a854:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a858:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801a85c:	601a      	str	r2, [r3, #0]
  return result;
 801a85e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a862:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801a86c:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a870:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801a874:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a878:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a87c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801a880:	601a      	str	r2, [r3, #0]
 801a882:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a886:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801a88a:	6019      	str	r1, [r3, #0]
 801a88c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a890:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801a894:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a896:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a89a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801a89e:	6819      	ldr	r1, [r3, #0]
 801a8a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8a4:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801a8a8:	681a      	ldr	r2, [r3, #0]
 801a8aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8ae:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	fb21 3202 	smlad	r2, r1, r2, r3
 801a8b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8bc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801a8c0:	601a      	str	r2, [r3, #0]
  return(result);
 801a8c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8c6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801a8d0:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a8d4:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801a8d8:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a8dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8e0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801a8e4:	601a      	str	r2, [r3, #0]
 801a8e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8ea:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801a8ee:	6019      	str	r1, [r3, #0]
 801a8f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8f4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801a8f8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a8fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8fe:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801a902:	6819      	ldr	r1, [r3, #0]
 801a904:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a908:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801a90c:	681a      	ldr	r2, [r3, #0]
 801a90e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a912:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	fb21 3202 	smlad	r2, r1, r2, r3
 801a91c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a920:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801a924:	601a      	str	r2, [r3, #0]
  return(result);
 801a926:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a92a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801a934:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a938:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a942:	441a      	add	r2, r3
 801a944:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a948:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801a94c:	601a      	str	r2, [r3, #0]
 801a94e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a952:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a95c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a960:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 801a964:	601a      	str	r2, [r3, #0]
    return (val);
 801a966:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a96a:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a974:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a978:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a97c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801a980:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a982:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a986:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	fa2f f283 	sxtb16	r2, r3
 801a990:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a994:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801a998:	601a      	str	r2, [r3, #0]
  return(result);
 801a99a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a99e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801a9a8:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a9ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a9b4:	601a      	str	r2, [r3, #0]
 801a9b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9ba:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801a9be:	2308      	movs	r3, #8
 801a9c0:	6013      	str	r3, [r2, #0]
 801a9c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9c6:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 801a9ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	6013      	str	r3, [r2, #0]
 801a9d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9da:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801a9de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a9ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9ee:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801a9f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	f003 031f 	and.w	r3, r3, #31
 801aa00:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801aa02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d105      	bne.n	801aa1c <arm_nn_mat_mult_nt_t_s8+0x1880>
    return op1;
 801aa10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa14:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801aa18:	681a      	ldr	r2, [r3, #0]
 801aa1a:	e00a      	b.n	801aa32 <arm_nn_mat_mult_nt_t_s8+0x1896>
  return (op1 >> op2) | (op1 << (32U - op2));
 801aa1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa20:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 801aa24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801aa2c:	6812      	ldr	r2, [r2, #0]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	41da      	rors	r2, r3
 801aa32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa36:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801aa3a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aa3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa40:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	fa2f f283 	sxtb16	r2, r3
 801aa4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa4e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801aa52:	601a      	str	r2, [r3, #0]
  return(result);
 801aa54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa58:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801aa5c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801aa5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa62:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801aa66:	601a      	str	r2, [r3, #0]
  return result;
 801aa68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa6c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801aa76:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801aa7a:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801aa7e:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801aa82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801aa8a:	601a      	str	r2, [r3, #0]
 801aa8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801aa94:	6019      	str	r1, [r3, #0]
 801aa96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa9a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801aa9e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801aaa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaa4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801aaa8:	6819      	ldr	r1, [r3, #0]
 801aaaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801aab2:	681a      	ldr	r2, [r3, #0]
 801aab4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aab8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	fb21 3202 	smlad	r2, r1, r2, r3
 801aac2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aac6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801aaca:	601a      	str	r2, [r3, #0]
  return(result);
 801aacc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aad0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801aada:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801aade:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801aae2:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801aae6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801aaee:	601a      	str	r2, [r3, #0]
 801aaf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaf4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801aaf8:	6019      	str	r1, [r3, #0]
 801aafa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aafe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801ab02:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ab04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801ab0c:	6819      	ldr	r1, [r3, #0]
 801ab0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801ab16:	681a      	ldr	r2, [r3, #0]
 801ab18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	fb21 3202 	smlad	r2, r1, r2, r3
 801ab26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab2a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801ab2e:	601a      	str	r2, [r3, #0]
  return(result);
 801ab30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801ab3e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ab42:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801ab46:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801ab4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab4e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801ab52:	601a      	str	r2, [r3, #0]
 801ab54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab58:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801ab5c:	6019      	str	r1, [r3, #0]
 801ab5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801ab66:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ab68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab6c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801ab70:	6819      	ldr	r1, [r3, #0]
 801ab72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab76:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801ab7a:	681a      	ldr	r2, [r3, #0]
 801ab7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	fb21 3202 	smlad	r2, r1, r2, r3
 801ab8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab8e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801ab92:	601a      	str	r2, [r3, #0]
  return(result);
 801ab94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801aba2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aba6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801abaa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801abae:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801abb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	461a      	mov	r2, r3
 801abc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abc4:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 801abc8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801abca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	1d1a      	adds	r2, r3, #4
 801abd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abdc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	601a      	str	r2, [r3, #0]
    return (val);
 801abe4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abe8:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 801abec:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801abee:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801abf2:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801abf6:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801abfa:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801abfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801ac06:	601a      	str	r2, [r3, #0]
 801ac08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801ac10:	6019      	str	r1, [r3, #0]
 801ac12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac16:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801ac1a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ac1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801ac24:	6819      	ldr	r1, [r3, #0]
 801ac26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801ac2e:	681a      	ldr	r2, [r3, #0]
 801ac30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	fb21 3202 	smlad	r2, r1, r2, r3
 801ac3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac42:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801ac46:	601a      	str	r2, [r3, #0]
  return(result);
 801ac48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801ac56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac5a:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801ac5e:	681a      	ldr	r2, [r3, #0]
 801ac60:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801ac64:	441a      	add	r2, r3
 801ac66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801ac6e:	601a      	str	r2, [r3, #0]
 801ac70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ac7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac82:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 801ac86:	601a      	str	r2, [r3, #0]
    return (val);
 801ac88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac8c:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 801ac96:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801ac9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac9e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801aca2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aca4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aca8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	fa2f f283 	sxtb16	r2, r3
 801acb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acb6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801acba:	601a      	str	r2, [r3, #0]
  return(result);
 801acbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acc0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801acca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acce:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801acd2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801acd6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801acd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acdc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	461a      	mov	r2, r3
 801ace8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acec:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 801acf0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801acf2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acf6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	1d1a      	adds	r2, r3, #4
 801ad00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad04:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	601a      	str	r2, [r3, #0]
    return (val);
 801ad0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad10:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 801ad14:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ad16:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801ad1a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ad1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad22:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ad26:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ad28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	fa2f f283 	sxtb16	r2, r3
 801ad36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad3a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801ad3e:	601a      	str	r2, [r3, #0]
  return(result);
 801ad40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad44:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801ad4e:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801ad52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801ad5a:	601a      	str	r2, [r3, #0]
 801ad5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad60:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 801ad64:	2308      	movs	r3, #8
 801ad66:	6013      	str	r3, [r2, #0]
 801ad68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad6c:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801ad70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad74:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	6013      	str	r3, [r2, #0]
 801ad7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad80:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801ad84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad88:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ad90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad94:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801ad98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	f003 031f 	and.w	r3, r3, #31
 801ada6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ada8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d105      	bne.n	801adc2 <arm_nn_mat_mult_nt_t_s8+0x1c26>
    return op1;
 801adb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801adbe:	681a      	ldr	r2, [r3, #0]
 801adc0:	e00a      	b.n	801add8 <arm_nn_mat_mult_nt_t_s8+0x1c3c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801adc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adc6:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801adca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801add2:	6812      	ldr	r2, [r2, #0]
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	41da      	rors	r2, r3
 801add8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801addc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801ade0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ade2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ade6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	fa2f f283 	sxtb16	r2, r3
 801adf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adf4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801adf8:	601a      	str	r2, [r3, #0]
  return(result);
 801adfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801ae02:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ae04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae08:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801ae0c:	601a      	str	r2, [r3, #0]
  return result;
 801ae0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801ae1c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ae20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801ae28:	601a      	str	r2, [r3, #0]
 801ae2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae2e:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 801ae32:	2308      	movs	r3, #8
 801ae34:	6013      	str	r3, [r2, #0]
 801ae36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae3a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801ae3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae42:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	6013      	str	r3, [r2, #0]
 801ae4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae4e:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801ae52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ae5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae62:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801ae66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	f003 031f 	and.w	r3, r3, #31
 801ae74:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ae76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d105      	bne.n	801ae90 <arm_nn_mat_mult_nt_t_s8+0x1cf4>
    return op1;
 801ae84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801ae8c:	681a      	ldr	r2, [r3, #0]
 801ae8e:	e00a      	b.n	801aea6 <arm_nn_mat_mult_nt_t_s8+0x1d0a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ae90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae94:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801ae98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae9c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801aea0:	6812      	ldr	r2, [r2, #0]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	41da      	rors	r2, r3
 801aea6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aeaa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801aeae:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aeb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aeb4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	fa2f f283 	sxtb16	r2, r3
 801aebe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aec2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801aec6:	601a      	str	r2, [r3, #0]
  return(result);
 801aec8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aecc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801aed0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801aed2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aed6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801aeda:	601a      	str	r2, [r3, #0]
  return result;
 801aedc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aee0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801aeea:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801aeee:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801aef2:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801aef6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aefa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801aefe:	601a      	str	r2, [r3, #0]
 801af00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af04:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801af08:	6019      	str	r1, [r3, #0]
 801af0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af0e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801af12:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801af14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af18:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801af1c:	6819      	ldr	r1, [r3, #0]
 801af1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af22:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801af26:	681a      	ldr	r2, [r3, #0]
 801af28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af2c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	fb21 3202 	smlad	r2, r1, r2, r3
 801af36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801af3e:	601a      	str	r2, [r3, #0]
  return(result);
 801af40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af44:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801af4e:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801af52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801af5a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801af5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af60:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	fa2f f283 	sxtb16	r2, r3
 801af6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af6e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801af72:	601a      	str	r2, [r3, #0]
  return(result);
 801af74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801af82:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801af86:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801af8a:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801af8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801af96:	601a      	str	r2, [r3, #0]
 801af98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801afa0:	6019      	str	r1, [r3, #0]
 801afa2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afa6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801afaa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801afac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afb0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801afb4:	6819      	ldr	r1, [r3, #0]
 801afb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801afbe:	681a      	ldr	r2, [r3, #0]
 801afc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afc4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	fb21 3202 	smlad	r2, r1, r2, r3
 801afce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afd2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801afd6:	601a      	str	r2, [r3, #0]
  return(result);
 801afd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afdc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801afe6:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801afea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801aff2:	601a      	str	r2, [r3, #0]
 801aff4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aff8:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 801affc:	2308      	movs	r3, #8
 801affe:	6013      	str	r3, [r2, #0]
 801b000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b004:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801b008:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b00c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	6013      	str	r3, [r2, #0]
 801b014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b018:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801b01c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b020:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b02c:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801b030:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	f003 031f 	and.w	r3, r3, #31
 801b03e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b040:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d105      	bne.n	801b05a <arm_nn_mat_mult_nt_t_s8+0x1ebe>
    return op1;
 801b04e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b052:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801b056:	681a      	ldr	r2, [r3, #0]
 801b058:	e00a      	b.n	801b070 <arm_nn_mat_mult_nt_t_s8+0x1ed4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b05a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b05e:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801b062:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801b06a:	6812      	ldr	r2, [r2, #0]
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	41da      	rors	r2, r3
 801b070:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801b078:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b07a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b07e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	fa2f f283 	sxtb16	r2, r3
 801b088:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b08c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801b090:	601a      	str	r2, [r3, #0]
  return(result);
 801b092:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b096:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801b09a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b09c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0a0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801b0a4:	601a      	str	r2, [r3, #0]
  return result;
 801b0a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801b0b4:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801b0b8:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801b0bc:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801b0c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801b0c8:	601a      	str	r2, [r3, #0]
 801b0ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801b0d2:	6019      	str	r1, [r3, #0]
 801b0d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801b0dc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b0de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801b0e6:	6819      	ldr	r1, [r3, #0]
 801b0e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801b0f0:	681a      	ldr	r2, [r3, #0]
 801b0f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	fb21 3202 	smlad	r2, r1, r2, r3
 801b100:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b104:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801b108:	601a      	str	r2, [r3, #0]
  return(result);
 801b10a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b10e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801b118:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b11c:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801b120:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801b124:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b128:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801b12c:	601a      	str	r2, [r3, #0]
 801b12e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801b136:	6019      	str	r1, [r3, #0]
 801b138:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b13c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801b140:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b142:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b146:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801b14a:	6819      	ldr	r1, [r3, #0]
 801b14c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801b154:	681a      	ldr	r2, [r3, #0]
 801b156:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b15a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	fb21 3202 	smlad	r2, r1, r2, r3
 801b164:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b168:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801b16c:	601a      	str	r2, [r3, #0]
  return(result);
 801b16e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b172:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801b17c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b180:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b184:	681a      	ldr	r2, [r3, #0]
 801b186:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801b18a:	4413      	add	r3, r2
 801b18c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 801b190:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b198:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b19c:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 801b1a0:	601a      	str	r2, [r3, #0]
    return (val);
 801b1a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1a6:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801b1b0:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 801b1b4:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b1b8:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 801b1bc:	fa2f f383 	sxtb16	r3, r3
 801b1c0:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
  return(result);
 801b1c4:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 801b1c8:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801b1cc:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 801b1d0:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
 801b1d4:	2308      	movs	r3, #8
 801b1d6:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 801b1da:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 801b1de:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
 801b1e2:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 801b1e6:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  op2 %= 32U;
 801b1ea:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801b1ee:	f003 031f 	and.w	r3, r3, #31
 801b1f2:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  if (op2 == 0U)
 801b1f6:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d102      	bne.n	801b204 <arm_nn_mat_mult_nt_t_s8+0x2068>
    return op1;
 801b1fe:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 801b202:	e005      	b.n	801b210 <arm_nn_mat_mult_nt_t_s8+0x2074>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b204:	f8d7 29f8 	ldr.w	r2, [r7, #2552]	; 0x9f8
 801b208:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801b20c:	fa62 f303 	ror.w	r3, r2, r3
 801b210:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b214:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 801b218:	fa2f f383 	sxtb16	r3, r3
 801b21c:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
  return(result);
 801b220:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b224:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
  return result;
 801b228:	f8d7 39e8 	ldr.w	r3, [r7, #2536]	; 0x9e8
 801b22c:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801b230:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 801b234:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	; 0xa54
 801b238:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801b23c:	f8c7 1a10 	str.w	r1, [r7, #2576]	; 0xa10
 801b240:	f8c7 2a0c 	str.w	r2, [r7, #2572]	; 0xa0c
 801b244:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b248:	f8d7 1a10 	ldr.w	r1, [r7, #2576]	; 0xa10
 801b24c:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 801b250:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 801b254:	fb21 3302 	smlad	r3, r1, r2, r3
 801b258:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
  return(result);
 801b25c:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 801b260:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801b264:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 801b268:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	; 0xa44
 801b26c:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801b270:	f8c7 1a20 	str.w	r1, [r7, #2592]	; 0xa20
 801b274:	f8c7 2a1c 	str.w	r2, [r7, #2588]	; 0xa1c
 801b278:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b27c:	f8d7 1a20 	ldr.w	r1, [r7, #2592]	; 0xa20
 801b280:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801b284:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801b288:	fb21 3302 	smlad	r3, r1, r2, r3
 801b28c:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
  return(result);
 801b290:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801b294:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801b298:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 801b29c:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801b2a0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801b2a4:	f8c7 1a30 	str.w	r1, [r7, #2608]	; 0xa30
 801b2a8:	f8c7 2a2c 	str.w	r2, [r7, #2604]	; 0xa2c
 801b2ac:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b2b0:	f8d7 1a30 	ldr.w	r1, [r7, #2608]	; 0xa30
 801b2b4:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801b2b8:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801b2bc:	fb21 3302 	smlad	r3, r1, r2, r3
 801b2c0:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
  return(result);
 801b2c4:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801b2c8:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val0, val4, res11);
 801b2cc:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 801b2d0:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801b2d4:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801b2d8:	f8c7 1a40 	str.w	r1, [r7, #2624]	; 0xa40
 801b2dc:	f8c7 2a3c 	str.w	r2, [r7, #2620]	; 0xa3c
 801b2e0:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b2e4:	f8d7 1a40 	ldr.w	r1, [r7, #2624]	; 0xa40
 801b2e8:	f8d7 2a3c 	ldr.w	r2, [r7, #2620]	; 0xa3c
 801b2ec:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801b2f0:	fb21 3302 	smlad	r3, r1, r2, r3
 801b2f4:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
  return(result);
 801b2f8:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801b2fc:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801b300:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801b304:	3310      	adds	r3, #16
 801b306:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 801b30a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801b30e:	f1a3 020f 	sub.w	r2, r3, #15
 801b312:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801b316:	4293      	cmp	r3, r2
 801b318:	f6fe a809 	blt.w	801932e <arm_nn_mat_mult_nt_t_s8+0x192>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801b31c:	e06c      	b.n	801b3f8 <arm_nn_mat_mult_nt_t_s8+0x225c>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801b31e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b322:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	781b      	ldrb	r3, [r3, #0]
 801b32a:	f887 3a5f 	strb.w	r3, [r7, #2655]	; 0xa5f
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801b32e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b332:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801b336:	681a      	ldr	r2, [r3, #0]
 801b338:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801b33c:	4413      	add	r3, r2
 801b33e:	781b      	ldrb	r3, [r3, #0]
 801b340:	f887 3a5e 	strb.w	r3, [r7, #2654]	; 0xa5e
                q7_t lhs_value = lhs_ptr[0];
 801b344:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b348:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	781b      	ldrb	r3, [r3, #0]
 801b350:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d

                res00 += lhs_value * rhs_value0;
 801b354:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801b358:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 801b35c:	fb03 f202 	mul.w	r2, r3, r2
 801b360:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801b364:	4413      	add	r3, r2
 801b366:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                res01 += lhs_value * rhs_value1;
 801b36a:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801b36e:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 801b372:	fb03 f202 	mul.w	r2, r3, r2
 801b376:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801b37a:	4413      	add	r3, r2
 801b37c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                lhs_value = lhs_ptr[rhs_cols];
 801b380:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b384:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b388:	681a      	ldr	r2, [r3, #0]
 801b38a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801b38e:	4413      	add	r3, r2
 801b390:	781b      	ldrb	r3, [r3, #0]
 801b392:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d
                res10 += lhs_value * rhs_value0;
 801b396:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801b39a:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 801b39e:	fb03 f202 	mul.w	r2, r3, r2
 801b3a2:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801b3a6:	4413      	add	r3, r2
 801b3a8:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 += lhs_value * rhs_value1;
 801b3ac:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801b3b0:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 801b3b4:	fb03 f202 	mul.w	r2, r3, r2
 801b3b8:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801b3bc:	4413      	add	r3, r2
 801b3be:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                ++rhs_ptr;
 801b3c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3c6:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	1c5a      	adds	r2, r3, #1
 801b3ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3d2:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801b3d6:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801b3d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3dc:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	1c5a      	adds	r2, r3, #1
 801b3e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3e8:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b3ec:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801b3ee:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801b3f2:	3301      	adds	r3, #1
 801b3f4:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 801b3f8:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	; 0xaac
 801b3fc:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801b400:	429a      	cmp	r2, r3
 801b402:	db8c      	blt.n	801b31e <arm_nn_mat_mult_nt_t_s8+0x2182>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801b404:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b408:	009a      	lsls	r2, r3, #2
 801b40a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801b40e:	4413      	add	r3, r2
 801b410:	6818      	ldr	r0, [r3, #0]
 801b412:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b416:	009a      	lsls	r2, r3, #2
 801b418:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801b41c:	4413      	add	r3, r2
 801b41e:	6819      	ldr	r1, [r3, #0]
 801b420:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b424:	f5a3 62b5 	sub.w	r2, r3, #1448	; 0x5a8
 801b428:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801b42c:	6013      	str	r3, [r2, #0]
 801b42e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b432:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801b436:	6018      	str	r0, [r3, #0]
 801b438:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b43c:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b440:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b442:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b446:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b450:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b454:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	fa03 f202 	lsl.w	r2, r3, r2
 801b45e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b462:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 801b466:	601a      	str	r2, [r3, #0]
 801b468:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b46c:	f5a3 62b7 	sub.w	r2, r3, #1464	; 0x5b8
 801b470:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b474:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b47c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b480:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 801b484:	2300      	movs	r3, #0
 801b486:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b488:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b48c:	461a      	mov	r2, r3
 801b48e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b492:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801b496:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b49a:	461a      	mov	r2, r3
 801b49c:	2300      	movs	r3, #0
 801b49e:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b4a2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b4a6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801b4aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4ae:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	17da      	asrs	r2, r3, #31
 801b4b6:	673b      	str	r3, [r7, #112]	; 0x70
 801b4b8:	677a      	str	r2, [r7, #116]	; 0x74
 801b4ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4be:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	17da      	asrs	r2, r3, #31
 801b4c6:	66bb      	str	r3, [r7, #104]	; 0x68
 801b4c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b4ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b4cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b4ce:	fb02 f203 	mul.w	r2, r2, r3
 801b4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b4d4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 801b4d6:	fb04 f303 	mul.w	r3, r4, r3
 801b4da:	4413      	add	r3, r2
 801b4dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b4de:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801b4e0:	fba2 4204 	umull	r4, r2, r2, r4
 801b4e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801b4e8:	4622      	mov	r2, r4
 801b4ea:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 801b4ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b4f2:	4413      	add	r3, r2
 801b4f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801b4f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b4fc:	18c3      	adds	r3, r0, r3
 801b4fe:	62bb      	str	r3, [r7, #40]	; 0x28
 801b500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b504:	eb41 0303 	adc.w	r3, r1, r3
 801b508:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b50a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b50e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801b512:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801b516:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801b51a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b51e:	f04f 0000 	mov.w	r0, #0
 801b522:	f04f 0100 	mov.w	r1, #0
 801b526:	0fd0      	lsrs	r0, r2, #31
 801b528:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b52c:	17d9      	asrs	r1, r3, #31
 801b52e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b532:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 801b536:	4603      	mov	r3, r0
 801b538:	6013      	str	r3, [r2, #0]
    return result;
 801b53a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b53e:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801b542:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b544:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b548:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	dc06      	bgt.n	801b560 <arm_nn_mat_mult_nt_t_s8+0x23c4>
 801b552:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b556:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	425a      	negs	r2, r3
 801b55e:	e000      	b.n	801b562 <arm_nn_mat_mult_nt_t_s8+0x23c6>
 801b560:	2200      	movs	r2, #0
 801b562:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b566:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801b56a:	6019      	str	r1, [r3, #0]
 801b56c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b570:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801b574:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b576:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b57a:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 801b57e:	2300      	movs	r3, #0
 801b580:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b582:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b586:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801b58a:	2201      	movs	r2, #1
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	fa02 f103 	lsl.w	r1, r2, r3
 801b592:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b596:	f2a3 52cc 	subw	r2, r3, #1484	; 0x5cc
 801b59a:	1e4b      	subs	r3, r1, #1
 801b59c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b59e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5a2:	f5a3 61ba 	sub.w	r1, r3, #1488	; 0x5d0
 801b5a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5aa:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 801b5ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5b2:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801b5b6:	6812      	ldr	r2, [r2, #0]
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	4013      	ands	r3, r2
 801b5bc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b5be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5c2:	f5a3 61b9 	sub.w	r1, r3, #1480	; 0x5c8
 801b5c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5ca:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 801b5ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5d2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801b5d6:	6812      	ldr	r2, [r2, #0]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	fa42 f303 	asr.w	r3, r2, r3
 801b5de:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801b5e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5e4:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 801b5e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5ec:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	105b      	asrs	r3, r3, #1
 801b5f4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b5f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5fa:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	2b00      	cmp	r3, #0
 801b602:	da0a      	bge.n	801b61a <arm_nn_mat_mult_nt_t_s8+0x247e>
        threshold++;
 801b604:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b608:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 801b60c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b610:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	3301      	adds	r3, #1
 801b618:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b61a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b61e:	f5a3 62ba 	sub.w	r2, r3, #1488	; 0x5d0
 801b622:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b626:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 801b62a:	6812      	ldr	r2, [r2, #0]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	429a      	cmp	r2, r3
 801b630:	dd0a      	ble.n	801b648 <arm_nn_mat_mult_nt_t_s8+0x24ac>
        result++;
 801b632:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b636:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 801b63a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b63e:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	3301      	adds	r3, #1
 801b646:	6013      	str	r3, [r2, #0]
    return result;
 801b648:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b64c:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801b650:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b652:	bf00      	nop
 801b654:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801b658:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b65c:	3301      	adds	r3, #1
 801b65e:	009a      	lsls	r2, r3, #2
 801b660:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801b664:	4413      	add	r3, r2
 801b666:	6818      	ldr	r0, [r3, #0]
 801b668:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b66c:	3301      	adds	r3, #1
 801b66e:	009a      	lsls	r2, r3, #2
 801b670:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801b674:	4413      	add	r3, r2
 801b676:	6819      	ldr	r1, [r3, #0]
 801b678:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b67c:	f5a3 62af 	sub.w	r2, r3, #1400	; 0x578
 801b680:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801b684:	6013      	str	r3, [r2, #0]
 801b686:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b68a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801b68e:	6018      	str	r0, [r3, #0]
 801b690:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b694:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b698:	6019      	str	r1, [r3, #0]
 801b69a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b69e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b6a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6ac:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	fa03 f202 	lsl.w	r2, r3, r2
 801b6b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6ba:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801b6be:	601a      	str	r2, [r3, #0]
 801b6c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6c4:	f5a3 62b1 	sub.w	r2, r3, #1416	; 0x588
 801b6c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6cc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b6d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6d8:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 801b6dc:	2300      	movs	r3, #0
 801b6de:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b6e0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b6e4:	461a      	mov	r2, r3
 801b6e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b6ea:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801b6ec:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b6f0:	461a      	mov	r2, r3
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b6f6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b6fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b6fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b702:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	17da      	asrs	r2, r3, #31
 801b70a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b70e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801b712:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b716:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	17da      	asrs	r2, r3, #31
 801b71e:	67bb      	str	r3, [r7, #120]	; 0x78
 801b720:	67fa      	str	r2, [r7, #124]	; 0x7c
 801b722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b726:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b728:	fb02 f203 	mul.w	r2, r2, r3
 801b72c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b72e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 801b732:	fb04 f303 	mul.w	r3, r4, r3
 801b736:	4413      	add	r3, r2
 801b738:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b73c:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 801b73e:	fba2 4204 	umull	r4, r2, r2, r4
 801b742:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801b746:	4622      	mov	r2, r4
 801b748:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 801b74c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b750:	4413      	add	r3, r2
 801b752:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b75a:	18c3      	adds	r3, r0, r3
 801b75c:	633b      	str	r3, [r7, #48]	; 0x30
 801b75e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b762:	eb41 0303 	adc.w	r3, r1, r3
 801b766:	637b      	str	r3, [r7, #52]	; 0x34
 801b768:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b76c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801b770:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801b774:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b77c:	f04f 0000 	mov.w	r0, #0
 801b780:	f04f 0100 	mov.w	r1, #0
 801b784:	0fd0      	lsrs	r0, r2, #31
 801b786:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b78a:	17d9      	asrs	r1, r3, #31
 801b78c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b790:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 801b794:	4603      	mov	r3, r0
 801b796:	6013      	str	r3, [r2, #0]
    return result;
 801b798:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b79c:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801b7a0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b7a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7a6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	dc06      	bgt.n	801b7be <arm_nn_mat_mult_nt_t_s8+0x2622>
 801b7b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7b4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	425a      	negs	r2, r3
 801b7bc:	e000      	b.n	801b7c0 <arm_nn_mat_mult_nt_t_s8+0x2624>
 801b7be:	2200      	movs	r2, #0
 801b7c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7c4:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801b7c8:	6019      	str	r1, [r3, #0]
 801b7ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7ce:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801b7d2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801b7d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7d8:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 801b7dc:	2300      	movs	r3, #0
 801b7de:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801b7e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7e4:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801b7e8:	2201      	movs	r2, #1
 801b7ea:	681b      	ldr	r3, [r3, #0]
 801b7ec:	fa02 f103 	lsl.w	r1, r2, r3
 801b7f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7f4:	f2a3 529c 	subw	r2, r3, #1436	; 0x59c
 801b7f8:	1e4b      	subs	r3, r1, #1
 801b7fa:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801b7fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b800:	f5a3 61b4 	sub.w	r1, r3, #1440	; 0x5a0
 801b804:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b808:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 801b80c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b810:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801b814:	6812      	ldr	r2, [r2, #0]
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	4013      	ands	r3, r2
 801b81a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801b81c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b820:	f5a3 61b3 	sub.w	r1, r3, #1432	; 0x598
 801b824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b828:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 801b82c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b830:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801b834:	6812      	ldr	r2, [r2, #0]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	fa42 f303 	asr.w	r3, r2, r3
 801b83c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801b83e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b842:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 801b846:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b84a:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	105b      	asrs	r3, r3, #1
 801b852:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801b854:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b858:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	da0a      	bge.n	801b878 <arm_nn_mat_mult_nt_t_s8+0x26dc>
        threshold++;
 801b862:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b866:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 801b86a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b86e:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	3301      	adds	r3, #1
 801b876:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801b878:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b87c:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 801b880:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b884:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801b888:	6812      	ldr	r2, [r2, #0]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	429a      	cmp	r2, r3
 801b88e:	dd0a      	ble.n	801b8a6 <arm_nn_mat_mult_nt_t_s8+0x270a>
        result++;
 801b890:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b894:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 801b898:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b89c:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	3301      	adds	r3, #1
 801b8a4:	6013      	str	r3, [r2, #0]
    return result;
 801b8a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8aa:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801b8ae:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b8b0:	bf00      	nop
 801b8b2:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801b8b6:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b8ba:	009a      	lsls	r2, r3, #2
 801b8bc:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801b8c0:	4413      	add	r3, r2
 801b8c2:	6818      	ldr	r0, [r3, #0]
 801b8c4:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801b8c8:	009a      	lsls	r2, r3, #2
 801b8ca:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801b8ce:	4413      	add	r3, r2
 801b8d0:	6819      	ldr	r1, [r3, #0]
 801b8d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8d6:	f5a3 62a9 	sub.w	r2, r3, #1352	; 0x548
 801b8da:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801b8de:	6013      	str	r3, [r2, #0]
 801b8e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8e4:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801b8e8:	6018      	str	r0, [r3, #0]
 801b8ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8ee:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801b8f2:	6019      	str	r1, [r3, #0]
 801b8f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8f8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b902:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b906:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	fa03 f202 	lsl.w	r2, r3, r2
 801b910:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b914:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 801b918:	601a      	str	r2, [r3, #0]
 801b91a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b91e:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 801b922:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b926:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b92e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b932:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 801b936:	2300      	movs	r3, #0
 801b938:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b93a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b93e:	461a      	mov	r2, r3
 801b940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b944:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801b948:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b94c:	461a      	mov	r2, r3
 801b94e:	2300      	movs	r3, #0
 801b950:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b954:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b958:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801b95c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b960:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	17da      	asrs	r2, r3, #31
 801b968:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801b96c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801b970:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b974:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	17da      	asrs	r2, r3, #31
 801b97c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801b980:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801b984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b988:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b98c:	fb02 f203 	mul.w	r2, r2, r3
 801b990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b994:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 801b998:	fb04 f303 	mul.w	r3, r4, r3
 801b99c:	4413      	add	r3, r2
 801b99e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b9a2:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 801b9a6:	fba2 5604 	umull	r5, r6, r2, r4
 801b9aa:	4433      	add	r3, r6
 801b9ac:	461e      	mov	r6, r3
 801b9ae:	1943      	adds	r3, r0, r5
 801b9b0:	63bb      	str	r3, [r7, #56]	; 0x38
 801b9b2:	eb41 0306 	adc.w	r3, r1, r6
 801b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b9b8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b9bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801b9c0:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801b9c4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801b9c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b9cc:	f04f 0000 	mov.w	r0, #0
 801b9d0:	f04f 0100 	mov.w	r1, #0
 801b9d4:	0fd0      	lsrs	r0, r2, #31
 801b9d6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b9da:	17d9      	asrs	r1, r3, #31
 801b9dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9e0:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 801b9e4:	4603      	mov	r3, r0
 801b9e6:	6013      	str	r3, [r2, #0]
    return result;
 801b9e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9ec:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801b9f0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b9f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9f6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	dc06      	bgt.n	801ba0e <arm_nn_mat_mult_nt_t_s8+0x2872>
 801ba00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba04:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	425a      	negs	r2, r3
 801ba0c:	e000      	b.n	801ba10 <arm_nn_mat_mult_nt_t_s8+0x2874>
 801ba0e:	2200      	movs	r2, #0
 801ba10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba14:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801ba18:	6019      	str	r1, [r3, #0]
 801ba1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba1e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801ba22:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801ba24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba28:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ba30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba34:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801ba38:	2201      	movs	r2, #1
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	fa02 f103 	lsl.w	r1, r2, r3
 801ba40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba44:	f2a3 526c 	subw	r2, r3, #1388	; 0x56c
 801ba48:	1e4b      	subs	r3, r1, #1
 801ba4a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801ba4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba50:	f5a3 61ae 	sub.w	r1, r3, #1392	; 0x570
 801ba54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba58:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801ba5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba60:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 801ba64:	6812      	ldr	r2, [r2, #0]
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	4013      	ands	r3, r2
 801ba6a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801ba6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba70:	f5a3 61ad 	sub.w	r1, r3, #1384	; 0x568
 801ba74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba78:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801ba7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba80:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801ba84:	6812      	ldr	r2, [r2, #0]
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	fa42 f303 	asr.w	r3, r2, r3
 801ba8c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801ba8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba92:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 801ba96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba9a:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	105b      	asrs	r3, r3, #1
 801baa2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801baa4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801baa8:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	da0a      	bge.n	801bac8 <arm_nn_mat_mult_nt_t_s8+0x292c>
        threshold++;
 801bab2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bab6:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 801baba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801babe:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	3301      	adds	r3, #1
 801bac6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801bac8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bacc:	f5a3 62ae 	sub.w	r2, r3, #1392	; 0x570
 801bad0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bad4:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 801bad8:	6812      	ldr	r2, [r2, #0]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	429a      	cmp	r2, r3
 801bade:	dd0a      	ble.n	801baf6 <arm_nn_mat_mult_nt_t_s8+0x295a>
        result++;
 801bae0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bae4:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 801bae8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801baec:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	3301      	adds	r3, #1
 801baf4:	6013      	str	r3, [r2, #0]
    return result;
 801baf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bafa:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801bafe:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bb00:	bf00      	nop
 801bb02:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801bb06:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801bb0a:	3301      	adds	r3, #1
 801bb0c:	009a      	lsls	r2, r3, #2
 801bb0e:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801bb12:	4413      	add	r3, r2
 801bb14:	6818      	ldr	r0, [r3, #0]
 801bb16:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801bb1a:	3301      	adds	r3, #1
 801bb1c:	009a      	lsls	r2, r3, #2
 801bb1e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801bb22:	4413      	add	r3, r2
 801bb24:	6819      	ldr	r1, [r3, #0]
 801bb26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb2a:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 801bb2e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801bb32:	6013      	str	r3, [r2, #0]
 801bb34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb38:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801bb3c:	6018      	str	r0, [r3, #0]
 801bb3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb42:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801bb46:	6019      	str	r1, [r3, #0]
 801bb48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb4c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801bb56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb5a:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	fa03 f202 	lsl.w	r2, r3, r2
 801bb64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb68:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801bb6c:	601a      	str	r2, [r3, #0]
 801bb6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb72:	f5a3 62a5 	sub.w	r2, r3, #1320	; 0x528
 801bb76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb7a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bb82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb86:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801bb8e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801bb92:	461a      	mov	r2, r3
 801bb94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bb98:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801bb9a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801bb9e:	461a      	mov	r2, r3
 801bba0:	2300      	movs	r3, #0
 801bba2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bba4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801bba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bbac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbb0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	17da      	asrs	r2, r3, #31
 801bbb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801bbbc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801bbc0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbc4:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 801bbc8:	681b      	ldr	r3, [r3, #0]
 801bbca:	17da      	asrs	r2, r3, #31
 801bbcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801bbd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801bbd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bbd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801bbdc:	fb02 f203 	mul.w	r2, r2, r3
 801bbe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bbe4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 801bbe8:	fb04 f303 	mul.w	r3, r4, r3
 801bbec:	4413      	add	r3, r2
 801bbee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801bbf2:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 801bbf6:	fba2 ab04 	umull	sl, fp, r2, r4
 801bbfa:	445b      	add	r3, fp
 801bbfc:	469b      	mov	fp, r3
 801bbfe:	eb10 030a 	adds.w	r3, r0, sl
 801bc02:	643b      	str	r3, [r7, #64]	; 0x40
 801bc04:	eb41 030b 	adc.w	r3, r1, fp
 801bc08:	647b      	str	r3, [r7, #68]	; 0x44
 801bc0a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801bc0e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801bc12:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801bc16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc1e:	f04f 0000 	mov.w	r0, #0
 801bc22:	f04f 0100 	mov.w	r1, #0
 801bc26:	0fd0      	lsrs	r0, r2, #31
 801bc28:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801bc2c:	17d9      	asrs	r1, r3, #31
 801bc2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc32:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 801bc36:	4603      	mov	r3, r0
 801bc38:	6013      	str	r3, [r2, #0]
    return result;
 801bc3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc3e:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801bc42:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bc44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc48:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	dc06      	bgt.n	801bc60 <arm_nn_mat_mult_nt_t_s8+0x2ac4>
 801bc52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc56:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	425a      	negs	r2, r3
 801bc5e:	e000      	b.n	801bc62 <arm_nn_mat_mult_nt_t_s8+0x2ac6>
 801bc60:	2200      	movs	r2, #0
 801bc62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc66:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 801bc6a:	6019      	str	r1, [r3, #0]
 801bc6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc70:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801bc74:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bc76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc7a:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 801bc7e:	2300      	movs	r3, #0
 801bc80:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bc82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc86:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801bc8a:	2201      	movs	r2, #1
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	fa02 f103 	lsl.w	r1, r2, r3
 801bc92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc96:	f2a3 523c 	subw	r2, r3, #1340	; 0x53c
 801bc9a:	1e4b      	subs	r3, r1, #1
 801bc9c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801bc9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bca2:	f5a3 61a8 	sub.w	r1, r3, #1344	; 0x540
 801bca6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcaa:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801bcae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcb2:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801bcb6:	6812      	ldr	r2, [r2, #0]
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	4013      	ands	r3, r2
 801bcbc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801bcbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcc2:	f5a3 61a7 	sub.w	r1, r3, #1336	; 0x538
 801bcc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcca:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801bcce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcd2:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801bcd6:	6812      	ldr	r2, [r2, #0]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	fa42 f303 	asr.w	r3, r2, r3
 801bcde:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801bce0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bce4:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 801bce8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcec:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	105b      	asrs	r3, r3, #1
 801bcf4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801bcf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcfa:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	da0a      	bge.n	801bd1a <arm_nn_mat_mult_nt_t_s8+0x2b7e>
        threshold++;
 801bd04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd08:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 801bd0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd10:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	3301      	adds	r3, #1
 801bd18:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801bd1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd1e:	f5a3 62a8 	sub.w	r2, r3, #1344	; 0x540
 801bd22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd26:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801bd2a:	6812      	ldr	r2, [r2, #0]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	429a      	cmp	r2, r3
 801bd30:	dd0a      	ble.n	801bd48 <arm_nn_mat_mult_nt_t_s8+0x2bac>
        result++;
 801bd32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd36:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 801bd3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd3e:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	3301      	adds	r3, #1
 801bd46:	6013      	str	r3, [r2, #0]
    return result;
 801bd48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd4c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801bd50:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bd52:	bf00      	nop
 801bd54:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Add offset
            res00 += dst_offset;
 801bd58:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801bd5c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801bd60:	4413      	add	r3, r2
 801bd62:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 += dst_offset;
 801bd66:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801bd6a:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801bd6e:	4413      	add	r3, r2
 801bd70:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 += dst_offset;
 801bd74:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801bd78:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801bd7c:	4413      	add	r3, r2
 801bd7e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 += dst_offset;
 801bd82:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801bd86:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801bd8a:	4413      	add	r3, r2
 801bd8c:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801bd90:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801bd94:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801bd98:	4293      	cmp	r3, r2
 801bd9a:	bfb8      	it	lt
 801bd9c:	4613      	movlt	r3, r2
 801bd9e:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res00 = MIN(res00, activation_max);
 801bda2:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801bda6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801bdaa:	4293      	cmp	r3, r2
 801bdac:	bfa8      	it	ge
 801bdae:	4613      	movge	r3, r2
 801bdb0:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = MAX(res01, activation_min);
 801bdb4:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801bdb8:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801bdbc:	4293      	cmp	r3, r2
 801bdbe:	bfb8      	it	lt
 801bdc0:	4613      	movlt	r3, r2
 801bdc2:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res01 = MIN(res01, activation_max);
 801bdc6:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801bdca:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801bdce:	4293      	cmp	r3, r2
 801bdd0:	bfa8      	it	ge
 801bdd2:	4613      	movge	r3, r2
 801bdd4:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = MAX(res10, activation_min);
 801bdd8:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801bddc:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801bde0:	4293      	cmp	r3, r2
 801bde2:	bfb8      	it	lt
 801bde4:	4613      	movlt	r3, r2
 801bde6:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res10 = MIN(res10, activation_max);
 801bdea:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801bdee:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801bdf2:	4293      	cmp	r3, r2
 801bdf4:	bfa8      	it	ge
 801bdf6:	4613      	movge	r3, r2
 801bdf8:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = MAX(res11, activation_min);
 801bdfc:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801be00:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801be04:	4293      	cmp	r3, r2
 801be06:	bfb8      	it	lt
 801be08:	4613      	movlt	r3, r2
 801be0a:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            res11 = MIN(res11, activation_max);
 801be0e:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801be12:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801be16:	4293      	cmp	r3, r2
 801be18:	bfa8      	it	ge
 801be1a:	4613      	movge	r3, r2
 801be1c:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            dst_ptr[0] = (q7_t)res00;
 801be20:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801be24:	b25b      	sxtb	r3, r3
 801be26:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801be2a:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801be2c:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801be30:	1c5a      	adds	r2, r3, #1
 801be32:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801be36:	b25b      	sxtb	r3, r3
 801be38:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801be3a:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 801be3e:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801be42:	4413      	add	r3, r2
 801be44:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0
            dst_ptr[0] = (q7_t)res10;
 801be48:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801be4c:	b25b      	sxtb	r3, r3
 801be4e:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801be52:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 801be54:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801be58:	1c5a      	adds	r2, r3, #1
 801be5a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801be5e:	b25b      	sxtb	r3, r3
 801be60:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801be62:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 801be66:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801be6a:	4413      	add	r3, r2
 801be6c:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

            lhs_ptr += rhs_cols;
 801be70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be74:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801be78:	681a      	ldr	r2, [r3, #0]
 801be7a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801be7e:	441a      	add	r2, r3
 801be80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be84:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801be88:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 801be8a:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801be8e:	3b01      	subs	r3, #1
 801be90:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
        while (lhs_rows_idx)
 801be94:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801be98:	2b00      	cmp	r3, #0
 801be9a:	f47d aa29 	bne.w	80192f0 <arm_nn_mat_mult_nt_t_s8+0x154>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801be9e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801bea2:	f003 0301 	and.w	r3, r3, #1
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	f001 85f7 	beq.w	801da9a <arm_nn_mat_mult_nt_t_s8+0x48fe>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801beac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801beb0:	f6a3 12b4 	subw	r2, r3, #2484	; 0x9b4
 801beb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801beb8:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801bec0:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 801bec4:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            q31_t res01 = lhs_offset_contribution1;
 801bec8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 801becc:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            int32_t rhs_cols_idx = 0;
 801bed0:	2300      	movs	r3, #0
 801bed2:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801bed6:	f001 baf1 	b.w	801d4bc <arm_nn_mat_mult_nt_t_s8+0x4320>
 801beda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bede:	f6a3 02b4 	subw	r2, r3, #2228	; 0x8b4
 801bee2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801bee6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801bee8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801beec:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	461a      	mov	r2, r3
 801bef8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801befc:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 801bf00:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801bf02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf06:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	1d1a      	adds	r2, r3, #4
 801bf10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf14:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	601a      	str	r2, [r3, #0]
    return (val);
 801bf1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf20:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 801bf24:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801bf26:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801bf2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf2e:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801bf32:	681a      	ldr	r2, [r3, #0]
 801bf34:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801bf38:	441a      	add	r2, r3
 801bf3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf3e:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 801bf42:	601a      	str	r2, [r3, #0]
 801bf44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf48:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801bf52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf56:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 801bf5a:	601a      	str	r2, [r3, #0]
    return (val);
 801bf5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf60:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801bf6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf6e:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 801bf72:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801bf76:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801bf78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf7c:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	461a      	mov	r2, r3
 801bf88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf8c:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801bf90:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801bf92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bf96:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	1d1a      	adds	r2, r3, #4
 801bfa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfa4:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	601a      	str	r2, [r3, #0]
    return (val);
 801bfac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfb0:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801bfb4:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801bfb6:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801bfba:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801bfbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfc2:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801bfc6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bfc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfcc:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	fa2f f283 	sxtb16	r2, r3
 801bfd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfda:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 801bfde:	601a      	str	r2, [r3, #0]
  return(result);
 801bfe0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bfe4:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801bfee:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801bff2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bff6:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 801bffa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bffc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c000:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	fa2f f283 	sxtb16	r2, r3
 801c00a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c00e:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 801c012:	601a      	str	r2, [r3, #0]
  return(result);
 801c014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c018:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801c022:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c026:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c02a:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 801c02e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c030:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c034:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	fa2f f283 	sxtb16	r2, r3
 801c03e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c042:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 801c046:	601a      	str	r2, [r3, #0]
  return(result);
 801c048:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c04c:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801c056:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801c05a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c05e:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801c062:	601a      	str	r2, [r3, #0]
 801c064:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c068:	f6a3 027c 	subw	r2, r3, #2172	; 0x87c
 801c06c:	2308      	movs	r3, #8
 801c06e:	6013      	str	r3, [r2, #0]
 801c070:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c074:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 801c078:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c07c:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	6013      	str	r3, [r2, #0]
 801c084:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c088:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 801c08c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c090:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c098:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c09c:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 801c0a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0a4:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	f003 031f 	and.w	r3, r3, #31
 801c0ae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c0b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0b4:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d105      	bne.n	801c0ca <arm_nn_mat_mult_nt_t_s8+0x2f2e>
    return op1;
 801c0be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0c2:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 801c0c6:	681a      	ldr	r2, [r3, #0]
 801c0c8:	e00a      	b.n	801c0e0 <arm_nn_mat_mult_nt_t_s8+0x2f44>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c0ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0ce:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 801c0d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0d6:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801c0da:	6812      	ldr	r2, [r2, #0]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	41da      	rors	r2, r3
 801c0e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0e4:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801c0e8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c0ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0ee:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	fa2f f283 	sxtb16	r2, r3
 801c0f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0fc:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801c100:	601a      	str	r2, [r3, #0]
  return(result);
 801c102:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c106:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801c10a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c10c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c110:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 801c114:	601a      	str	r2, [r3, #0]
  return result;
 801c116:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c11a:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801c124:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c128:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c12c:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 801c130:	601a      	str	r2, [r3, #0]
 801c132:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c136:	f5a3 6206 	sub.w	r2, r3, #2144	; 0x860
 801c13a:	2308      	movs	r3, #8
 801c13c:	6013      	str	r3, [r2, #0]
 801c13e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c142:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 801c146:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c14a:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	6013      	str	r3, [r2, #0]
 801c152:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c156:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 801c15a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c15e:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c166:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c16a:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 801c16e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c172:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	f003 031f 	and.w	r3, r3, #31
 801c17c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c17e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c182:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d105      	bne.n	801c198 <arm_nn_mat_mult_nt_t_s8+0x2ffc>
    return op1;
 801c18c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c190:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 801c194:	681a      	ldr	r2, [r3, #0]
 801c196:	e00a      	b.n	801c1ae <arm_nn_mat_mult_nt_t_s8+0x3012>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c198:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c19c:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 801c1a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1a4:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801c1a8:	6812      	ldr	r2, [r2, #0]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	41da      	rors	r2, r3
 801c1ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1b2:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801c1b6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c1b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1bc:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	fa2f f283 	sxtb16	r2, r3
 801c1c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1ca:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801c1ce:	601a      	str	r2, [r3, #0]
  return(result);
 801c1d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1d4:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801c1d8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c1da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1de:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 801c1e2:	601a      	str	r2, [r3, #0]
  return result;
 801c1e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1e8:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801c1f2:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c1f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1fa:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 801c1fe:	601a      	str	r2, [r3, #0]
 801c200:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c204:	f6a3 0244 	subw	r2, r3, #2116	; 0x844
 801c208:	2308      	movs	r3, #8
 801c20a:	6013      	str	r3, [r2, #0]
 801c20c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c210:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 801c214:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c218:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	6013      	str	r3, [r2, #0]
 801c220:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c224:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 801c228:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c22c:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c234:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c238:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 801c23c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c240:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	f003 031f 	and.w	r3, r3, #31
 801c24a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c24c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c250:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d105      	bne.n	801c266 <arm_nn_mat_mult_nt_t_s8+0x30ca>
    return op1;
 801c25a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c25e:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 801c262:	681a      	ldr	r2, [r3, #0]
 801c264:	e00a      	b.n	801c27c <arm_nn_mat_mult_nt_t_s8+0x30e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c266:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c26a:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 801c26e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c272:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801c276:	6812      	ldr	r2, [r2, #0]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	41da      	rors	r2, r3
 801c27c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c280:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 801c284:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c286:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c28a:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	fa2f f283 	sxtb16	r2, r3
 801c294:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c298:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 801c29c:	601a      	str	r2, [r3, #0]
  return(result);
 801c29e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2a2:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 801c2a6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c2a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2ac:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 801c2b0:	601a      	str	r2, [r3, #0]
  return result;
 801c2b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2b6:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801c2c0:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801c2c4:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801c2c8:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801c2cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2d0:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 801c2d4:	601a      	str	r2, [r3, #0]
 801c2d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2da:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 801c2de:	6019      	str	r1, [r3, #0]
 801c2e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2e4:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 801c2e8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c2ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2ee:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 801c2f2:	6819      	ldr	r1, [r3, #0]
 801c2f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2f8:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 801c2fc:	681a      	ldr	r2, [r3, #0]
 801c2fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c302:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	fb21 3202 	smlad	r2, r1, r2, r3
 801c30c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c310:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 801c314:	601a      	str	r2, [r3, #0]
  return(result);
 801c316:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c31a:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801c324:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c328:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801c32c:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801c330:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c334:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 801c338:	601a      	str	r2, [r3, #0]
 801c33a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c33e:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 801c342:	6019      	str	r1, [r3, #0]
 801c344:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c348:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 801c34c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c34e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c352:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 801c356:	6819      	ldr	r1, [r3, #0]
 801c358:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c35c:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 801c360:	681a      	ldr	r2, [r3, #0]
 801c362:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c366:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	fb21 3202 	smlad	r2, r1, r2, r3
 801c370:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c374:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801c378:	601a      	str	r2, [r3, #0]
  return(result);
 801c37a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c37e:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801c388:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801c38c:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801c390:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801c394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c398:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801c39c:	601a      	str	r2, [r3, #0]
 801c39e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3a2:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801c3a6:	6019      	str	r1, [r3, #0]
 801c3a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3ac:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 801c3b0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c3b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3b6:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801c3ba:	6819      	ldr	r1, [r3, #0]
 801c3bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3c0:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801c3c4:	681a      	ldr	r2, [r3, #0]
 801c3c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3ca:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	fb21 3202 	smlad	r2, r1, r2, r3
 801c3d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3d8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 801c3dc:	601a      	str	r2, [r3, #0]
  return(result);
 801c3de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3e2:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801c3ec:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c3f0:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801c3f4:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801c3f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3fc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801c400:	601a      	str	r2, [r3, #0]
 801c402:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c406:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 801c40a:	6019      	str	r1, [r3, #0]
 801c40c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c410:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 801c414:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c416:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c41a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801c41e:	6819      	ldr	r1, [r3, #0]
 801c420:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c424:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 801c428:	681a      	ldr	r2, [r3, #0]
 801c42a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c42e:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	fb21 3202 	smlad	r2, r1, r2, r3
 801c438:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c43c:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 801c440:	601a      	str	r2, [r3, #0]
  return(result);
 801c442:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c446:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801c450:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c454:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
 801c458:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c45c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c45e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c462:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	461a      	mov	r2, r3
 801c46e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c472:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 801c476:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c478:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c47c:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	1d1a      	adds	r2, r3, #4
 801c486:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c48a:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	601a      	str	r2, [r3, #0]
    return (val);
 801c492:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c496:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 801c49a:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801c49c:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801c4a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4a4:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801c4a8:	681a      	ldr	r2, [r3, #0]
 801c4aa:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801c4ae:	441a      	add	r2, r3
 801c4b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4b4:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 801c4b8:	601a      	str	r2, [r3, #0]
 801c4ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4be:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801c4c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4cc:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 801c4d0:	601a      	str	r2, [r3, #0]
    return (val);
 801c4d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4d6:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801c4e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4e4:	f2a3 72f4 	subw	r2, r3, #2036	; 0x7f4
 801c4e8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801c4ec:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c4ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4f2:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	461a      	mov	r2, r3
 801c4fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c502:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 801c506:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c508:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c50c:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	1d1a      	adds	r2, r3, #4
 801c516:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c51a:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	601a      	str	r2, [r3, #0]
    return (val);
 801c522:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c526:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 801c52a:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801c52c:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801c530:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801c534:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c538:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 801c53c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c53e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c542:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	fa2f f283 	sxtb16	r2, r3
 801c54c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c550:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 801c554:	601a      	str	r2, [r3, #0]
  return(result);
 801c556:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c55a:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801c564:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c568:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c56c:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 801c570:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c576:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	fa2f f283 	sxtb16	r2, r3
 801c580:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c584:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 801c588:	601a      	str	r2, [r3, #0]
  return(result);
 801c58a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c58e:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801c598:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c59c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5a0:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 801c5a4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c5a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5aa:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	fa2f f283 	sxtb16	r2, r3
 801c5b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5b8:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 801c5bc:	601a      	str	r2, [r3, #0]
  return(result);
 801c5be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5c2:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801c5cc:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801c5d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5d4:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 801c5d8:	601a      	str	r2, [r3, #0]
 801c5da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5de:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 801c5e2:	2308      	movs	r3, #8
 801c5e4:	6013      	str	r3, [r2, #0]
 801c5e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5ea:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 801c5ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5f2:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	6013      	str	r3, [r2, #0]
 801c5fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5fe:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 801c602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c606:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c60e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c612:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 801c616:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c61a:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	f003 031f 	and.w	r3, r3, #31
 801c624:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c626:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c62a:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	2b00      	cmp	r3, #0
 801c632:	d105      	bne.n	801c640 <arm_nn_mat_mult_nt_t_s8+0x34a4>
    return op1;
 801c634:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c638:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 801c63c:	681a      	ldr	r2, [r3, #0]
 801c63e:	e00a      	b.n	801c656 <arm_nn_mat_mult_nt_t_s8+0x34ba>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c640:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c644:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 801c648:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c64c:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801c650:	6812      	ldr	r2, [r2, #0]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	41da      	rors	r2, r3
 801c656:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c65a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 801c65e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c660:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c664:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	fa2f f283 	sxtb16	r2, r3
 801c66e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c672:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 801c676:	601a      	str	r2, [r3, #0]
  return(result);
 801c678:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c67c:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 801c680:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c682:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c686:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801c68a:	601a      	str	r2, [r3, #0]
  return result;
 801c68c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c690:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801c69a:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c69e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6a2:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 801c6a6:	601a      	str	r2, [r3, #0]
 801c6a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6ac:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 801c6b0:	2308      	movs	r3, #8
 801c6b2:	6013      	str	r3, [r2, #0]
 801c6b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6b8:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 801c6bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6c0:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	6013      	str	r3, [r2, #0]
 801c6c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6cc:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 801c6d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6d4:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c6dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6e0:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 801c6e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6e8:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	f003 031f 	and.w	r3, r3, #31
 801c6f2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c6f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6f8:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d105      	bne.n	801c70e <arm_nn_mat_mult_nt_t_s8+0x3572>
    return op1;
 801c702:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c706:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 801c70a:	681a      	ldr	r2, [r3, #0]
 801c70c:	e00a      	b.n	801c724 <arm_nn_mat_mult_nt_t_s8+0x3588>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c70e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c712:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 801c716:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c71a:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801c71e:	6812      	ldr	r2, [r2, #0]
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	41da      	rors	r2, r3
 801c724:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c728:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 801c72c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c72e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c732:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	fa2f f283 	sxtb16	r2, r3
 801c73c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c740:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 801c744:	601a      	str	r2, [r3, #0]
  return(result);
 801c746:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c74a:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 801c74e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c750:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c754:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801c758:	601a      	str	r2, [r3, #0]
  return result;
 801c75a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c75e:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801c768:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801c76c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c770:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 801c774:	601a      	str	r2, [r3, #0]
 801c776:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c77a:	f2a3 728c 	subw	r2, r3, #1932	; 0x78c
 801c77e:	2308      	movs	r3, #8
 801c780:	6013      	str	r3, [r2, #0]
 801c782:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c786:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 801c78a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c78e:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	6013      	str	r3, [r2, #0]
 801c796:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c79a:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 801c79e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7a2:	f2a3 738c 	subw	r3, r3, #1932	; 0x78c
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c7aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7ae:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 801c7b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7b6:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	f003 031f 	and.w	r3, r3, #31
 801c7c0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c7c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7c6:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d105      	bne.n	801c7dc <arm_nn_mat_mult_nt_t_s8+0x3640>
    return op1;
 801c7d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7d4:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 801c7d8:	681a      	ldr	r2, [r3, #0]
 801c7da:	e00a      	b.n	801c7f2 <arm_nn_mat_mult_nt_t_s8+0x3656>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c7dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7e0:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 801c7e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7e8:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801c7ec:	6812      	ldr	r2, [r2, #0]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	41da      	rors	r2, r3
 801c7f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7f6:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 801c7fa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c7fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c800:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	fa2f f283 	sxtb16	r2, r3
 801c80a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c80e:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 801c812:	601a      	str	r2, [r3, #0]
  return(result);
 801c814:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c818:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 801c81c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c81e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c822:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 801c826:	601a      	str	r2, [r3, #0]
  return result;
 801c828:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c82c:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801c836:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801c83a:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801c83e:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801c842:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c846:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 801c84a:	601a      	str	r2, [r3, #0]
 801c84c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c850:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 801c854:	6019      	str	r1, [r3, #0]
 801c856:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c85a:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801c85e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c860:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c864:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 801c868:	6819      	ldr	r1, [r3, #0]
 801c86a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c86e:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 801c872:	681a      	ldr	r2, [r3, #0]
 801c874:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c878:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	fb21 3202 	smlad	r2, r1, r2, r3
 801c882:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c886:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 801c88a:	601a      	str	r2, [r3, #0]
  return(result);
 801c88c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c890:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801c89a:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c89e:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801c8a2:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801c8a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8aa:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 801c8ae:	601a      	str	r2, [r3, #0]
 801c8b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8b4:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 801c8b8:	6019      	str	r1, [r3, #0]
 801c8ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8be:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801c8c2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c8c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8c8:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 801c8cc:	6819      	ldr	r1, [r3, #0]
 801c8ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8d2:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 801c8d6:	681a      	ldr	r2, [r3, #0]
 801c8d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8dc:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	fb21 3202 	smlad	r2, r1, r2, r3
 801c8e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8ea:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 801c8ee:	601a      	str	r2, [r3, #0]
  return(result);
 801c8f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8f4:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801c8fe:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801c902:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801c906:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801c90a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c90e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 801c912:	601a      	str	r2, [r3, #0]
 801c914:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c918:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 801c91c:	6019      	str	r1, [r3, #0]
 801c91e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c922:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 801c926:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c928:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c92c:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 801c930:	6819      	ldr	r1, [r3, #0]
 801c932:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c936:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 801c93a:	681a      	ldr	r2, [r3, #0]
 801c93c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c940:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	fb21 3202 	smlad	r2, r1, r2, r3
 801c94a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c94e:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 801c952:	601a      	str	r2, [r3, #0]
  return(result);
 801c954:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c958:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801c962:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c966:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801c96a:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801c96e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c972:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 801c976:	601a      	str	r2, [r3, #0]
 801c978:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c97c:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801c980:	6019      	str	r1, [r3, #0]
 801c982:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c986:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 801c98a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c98c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c990:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 801c994:	6819      	ldr	r1, [r3, #0]
 801c996:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c99a:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801c99e:	681a      	ldr	r2, [r3, #0]
 801c9a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9a4:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	fb21 3202 	smlad	r2, r1, r2, r3
 801c9ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9b2:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 801c9b6:	601a      	str	r2, [r3, #0]
  return(result);
 801c9b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9bc:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801c9c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9ca:	f2a3 7244 	subw	r2, r3, #1860	; 0x744
 801c9ce:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801c9d2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c9d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9d8:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	461a      	mov	r2, r3
 801c9e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9e8:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 801c9ec:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c9ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9f2:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	1d1a      	adds	r2, r3, #4
 801c9fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca00:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	601a      	str	r2, [r3, #0]
    return (val);
 801ca08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca0c:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 801ca10:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ca12:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801ca16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca1a:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801ca1e:	681a      	ldr	r2, [r3, #0]
 801ca20:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801ca24:	441a      	add	r2, r3
 801ca26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca2a:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 801ca2e:	601a      	str	r2, [r3, #0]
 801ca30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca34:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ca3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca42:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 801ca46:	601a      	str	r2, [r3, #0]
    return (val);
 801ca48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca4c:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801ca56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca5a:	f2a3 723c 	subw	r2, r3, #1852	; 0x73c
 801ca5e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801ca62:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ca64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca68:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	461a      	mov	r2, r3
 801ca74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca78:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801ca7c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ca7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca82:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	1d1a      	adds	r2, r3, #4
 801ca8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca90:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	601a      	str	r2, [r3, #0]
    return (val);
 801ca98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca9c:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801caa0:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801caa2:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801caa6:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801caaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801caae:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 801cab2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cab4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cab8:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	fa2f f283 	sxtb16	r2, r3
 801cac2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cac6:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 801caca:	601a      	str	r2, [r3, #0]
  return(result);
 801cacc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cad0:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801cada:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cade:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cae2:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 801cae6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cae8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801caec:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	fa2f f283 	sxtb16	r2, r3
 801caf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cafa:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 801cafe:	601a      	str	r2, [r3, #0]
  return(result);
 801cb00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb04:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801cb0e:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801cb12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb16:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 801cb1a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cb1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb20:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	fa2f f283 	sxtb16	r2, r3
 801cb2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb2e:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 801cb32:	601a      	str	r2, [r3, #0]
  return(result);
 801cb34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb38:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 801cb3c:	681b      	ldr	r3, [r3, #0]
 801cb3e:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801cb42:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801cb46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb4a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 801cb4e:	601a      	str	r2, [r3, #0]
 801cb50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb54:	f2a3 720c 	subw	r2, r3, #1804	; 0x70c
 801cb58:	2308      	movs	r3, #8
 801cb5a:	6013      	str	r3, [r2, #0]
 801cb5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb60:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 801cb64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb68:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	6013      	str	r3, [r2, #0]
 801cb70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb74:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 801cb78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb7c:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cb84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb88:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 801cb8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cb90:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	f003 031f 	and.w	r3, r3, #31
 801cb9a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801cb9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cba0:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d105      	bne.n	801cbb6 <arm_nn_mat_mult_nt_t_s8+0x3a1a>
    return op1;
 801cbaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbae:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 801cbb2:	681a      	ldr	r2, [r3, #0]
 801cbb4:	e00a      	b.n	801cbcc <arm_nn_mat_mult_nt_t_s8+0x3a30>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cbb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbba:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 801cbbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbc2:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801cbc6:	6812      	ldr	r2, [r2, #0]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	41da      	rors	r2, r3
 801cbcc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbd0:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 801cbd4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cbd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbda:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	fa2f f283 	sxtb16	r2, r3
 801cbe4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbe8:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 801cbec:	601a      	str	r2, [r3, #0]
  return(result);
 801cbee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbf2:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 801cbf6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cbf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbfc:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 801cc00:	601a      	str	r2, [r3, #0]
  return result;
 801cc02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc06:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801cc10:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cc14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc18:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 801cc1c:	601a      	str	r2, [r3, #0]
 801cc1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc22:	f5a3 62de 	sub.w	r2, r3, #1776	; 0x6f0
 801cc26:	2308      	movs	r3, #8
 801cc28:	6013      	str	r3, [r2, #0]
 801cc2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc2e:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 801cc32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc36:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	6013      	str	r3, [r2, #0]
 801cc3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc42:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 801cc46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc4a:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cc52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc56:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 801cc5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc5e:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	f003 031f 	and.w	r3, r3, #31
 801cc68:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801cc6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc6e:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d105      	bne.n	801cc84 <arm_nn_mat_mult_nt_t_s8+0x3ae8>
    return op1;
 801cc78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc7c:	f2a3 63f4 	subw	r3, r3, #1780	; 0x6f4
 801cc80:	681a      	ldr	r2, [r3, #0]
 801cc82:	e00a      	b.n	801cc9a <arm_nn_mat_mult_nt_t_s8+0x3afe>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cc84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc88:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 801cc8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc90:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801cc94:	6812      	ldr	r2, [r2, #0]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	41da      	rors	r2, r3
 801cc9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc9e:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 801cca2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cca4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cca8:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	fa2f f283 	sxtb16	r2, r3
 801ccb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccb6:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 801ccba:	601a      	str	r2, [r3, #0]
  return(result);
 801ccbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccc0:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 801ccc4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ccc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccca:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 801ccce:	601a      	str	r2, [r3, #0]
  return result;
 801ccd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccd4:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801ccde:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801cce2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cce6:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 801ccea:	601a      	str	r2, [r3, #0]
 801ccec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccf0:	f2a3 62d4 	subw	r2, r3, #1748	; 0x6d4
 801ccf4:	2308      	movs	r3, #8
 801ccf6:	6013      	str	r3, [r2, #0]
 801ccf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccfc:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 801cd00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd04:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	6013      	str	r3, [r2, #0]
 801cd0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd10:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 801cd14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd18:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 801cd1c:	681b      	ldr	r3, [r3, #0]
 801cd1e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cd20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd24:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 801cd28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd2c:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	f003 031f 	and.w	r3, r3, #31
 801cd36:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801cd38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd3c:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d105      	bne.n	801cd52 <arm_nn_mat_mult_nt_t_s8+0x3bb6>
    return op1;
 801cd46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd4a:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 801cd4e:	681a      	ldr	r2, [r3, #0]
 801cd50:	e00a      	b.n	801cd68 <arm_nn_mat_mult_nt_t_s8+0x3bcc>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cd52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd56:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 801cd5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd5e:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801cd62:	6812      	ldr	r2, [r2, #0]
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	41da      	rors	r2, r3
 801cd68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd6c:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 801cd70:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cd72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd76:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	fa2f f283 	sxtb16	r2, r3
 801cd80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd84:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 801cd88:	601a      	str	r2, [r3, #0]
  return(result);
 801cd8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd8e:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 801cd92:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cd94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd98:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 801cd9c:	601a      	str	r2, [r3, #0]
  return result;
 801cd9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cda2:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801cdac:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801cdb0:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801cdb4:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801cdb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdbc:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801cdc0:	601a      	str	r2, [r3, #0]
 801cdc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdc6:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 801cdca:	6019      	str	r1, [r3, #0]
 801cdcc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdd0:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 801cdd4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cdd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdda:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801cdde:	6819      	ldr	r1, [r3, #0]
 801cde0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cde4:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 801cde8:	681a      	ldr	r2, [r3, #0]
 801cdea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdee:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	fb21 3202 	smlad	r2, r1, r2, r3
 801cdf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdfc:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 801ce00:	601a      	str	r2, [r3, #0]
  return(result);
 801ce02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce06:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801ce10:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801ce14:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801ce18:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801ce1c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce20:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 801ce24:	601a      	str	r2, [r3, #0]
 801ce26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce2a:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 801ce2e:	6019      	str	r1, [r3, #0]
 801ce30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce34:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 801ce38:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ce3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce3e:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 801ce42:	6819      	ldr	r1, [r3, #0]
 801ce44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce48:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 801ce4c:	681a      	ldr	r2, [r3, #0]
 801ce4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce52:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	fb21 3202 	smlad	r2, r1, r2, r3
 801ce5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce60:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801ce64:	601a      	str	r2, [r3, #0]
  return(result);
 801ce66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce6a:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801ce74:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801ce78:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801ce7c:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801ce80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce84:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 801ce88:	601a      	str	r2, [r3, #0]
 801ce8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce8e:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801ce92:	6019      	str	r1, [r3, #0]
 801ce94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce98:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 801ce9c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ce9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cea2:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 801cea6:	6819      	ldr	r1, [r3, #0]
 801cea8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceac:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801ceb0:	681a      	ldr	r2, [r3, #0]
 801ceb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceb6:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	fb21 3202 	smlad	r2, r1, r2, r3
 801cec0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cec4:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 801cec8:	601a      	str	r2, [r3, #0]
  return(result);
 801ceca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cece:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801ced8:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cedc:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801cee0:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801cee4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cee8:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 801ceec:	601a      	str	r2, [r3, #0]
 801ceee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cef2:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 801cef6:	6019      	str	r1, [r3, #0]
 801cef8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cefc:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801cf00:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cf02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf06:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 801cf0a:	6819      	ldr	r1, [r3, #0]
 801cf0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf10:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 801cf14:	681a      	ldr	r2, [r3, #0]
 801cf16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf1a:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	fb21 3202 	smlad	r2, r1, r2, r3
 801cf24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf28:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 801cf2c:	601a      	str	r2, [r3, #0]
  return(result);
 801cf2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf32:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801cf3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf40:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 801cf44:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801cf48:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801cf4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf4e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	461a      	mov	r2, r3
 801cf5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf5e:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 801cf62:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801cf64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf68:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	1d1a      	adds	r2, r3, #4
 801cf72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf76:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	601a      	str	r2, [r3, #0]
    return (val);
 801cf7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf82:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 801cf86:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801cf88:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801cf8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf90:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801cf94:	681a      	ldr	r2, [r3, #0]
 801cf96:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801cf9a:	441a      	add	r2, r3
 801cf9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfa0:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 801cfa4:	601a      	str	r2, [r3, #0]
 801cfa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfaa:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801cfb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfb8:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 801cfbc:	601a      	str	r2, [r3, #0]
    return (val);
 801cfbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfc2:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801cfcc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfd0:	f2a3 6284 	subw	r2, r3, #1668	; 0x684
 801cfd4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801cfd8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801cfda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfde:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	461a      	mov	r2, r3
 801cfea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfee:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 801cff2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801cff4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cff8:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	1d1a      	adds	r2, r3, #4
 801d002:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d006:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	601a      	str	r2, [r3, #0]
    return (val);
 801d00e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d012:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 801d016:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801d018:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801d01c:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801d020:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d024:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 801d028:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d02a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d02e:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	fa2f f283 	sxtb16	r2, r3
 801d038:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d03c:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 801d040:	601a      	str	r2, [r3, #0]
  return(result);
 801d042:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d046:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801d050:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d054:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d058:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 801d05c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d05e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d062:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	fa2f f283 	sxtb16	r2, r3
 801d06c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d070:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801d074:	601a      	str	r2, [r3, #0]
  return(result);
 801d076:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d07a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801d084:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801d088:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d08c:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 801d090:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d092:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d096:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	fa2f f283 	sxtb16	r2, r3
 801d0a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0a4:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 801d0a8:	601a      	str	r2, [r3, #0]
  return(result);
 801d0aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0ae:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801d0b8:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801d0bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0c0:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 801d0c4:	601a      	str	r2, [r3, #0]
 801d0c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0ca:	f2a3 6254 	subw	r2, r3, #1620	; 0x654
 801d0ce:	2308      	movs	r3, #8
 801d0d0:	6013      	str	r3, [r2, #0]
 801d0d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0d6:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 801d0da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0de:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	6013      	str	r3, [r2, #0]
 801d0e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0ea:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801d0ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0f2:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d0fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0fe:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801d102:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d106:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	f003 031f 	and.w	r3, r3, #31
 801d110:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d112:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d116:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d105      	bne.n	801d12c <arm_nn_mat_mult_nt_t_s8+0x3f90>
    return op1;
 801d120:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d124:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 801d128:	681a      	ldr	r2, [r3, #0]
 801d12a:	e00a      	b.n	801d142 <arm_nn_mat_mult_nt_t_s8+0x3fa6>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d12c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d130:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 801d134:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d138:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801d13c:	6812      	ldr	r2, [r2, #0]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	41da      	rors	r2, r3
 801d142:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d146:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801d14a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d14c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d150:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	fa2f f283 	sxtb16	r2, r3
 801d15a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d15e:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 801d162:	601a      	str	r2, [r3, #0]
  return(result);
 801d164:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d168:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 801d16c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d16e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d172:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 801d176:	601a      	str	r2, [r3, #0]
  return result;
 801d178:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d17c:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801d186:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d18a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d18e:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801d192:	601a      	str	r2, [r3, #0]
 801d194:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d198:	f5a3 62c7 	sub.w	r2, r3, #1592	; 0x638
 801d19c:	2308      	movs	r3, #8
 801d19e:	6013      	str	r3, [r2, #0]
 801d1a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1a4:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 801d1a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1ac:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	6013      	str	r3, [r2, #0]
 801d1b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1b8:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 801d1bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1c0:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d1c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1cc:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 801d1d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1d4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	f003 031f 	and.w	r3, r3, #31
 801d1de:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d1e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1e4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d105      	bne.n	801d1fa <arm_nn_mat_mult_nt_t_s8+0x405e>
    return op1;
 801d1ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1f2:	f2a3 633c 	subw	r3, r3, #1596	; 0x63c
 801d1f6:	681a      	ldr	r2, [r3, #0]
 801d1f8:	e00a      	b.n	801d210 <arm_nn_mat_mult_nt_t_s8+0x4074>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d1fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1fe:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 801d202:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d206:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801d20a:	6812      	ldr	r2, [r2, #0]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	41da      	rors	r2, r3
 801d210:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d214:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801d218:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d21a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d21e:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	fa2f f283 	sxtb16	r2, r3
 801d228:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d22c:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 801d230:	601a      	str	r2, [r3, #0]
  return(result);
 801d232:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d236:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 801d23a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d23c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d240:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 801d244:	601a      	str	r2, [r3, #0]
  return result;
 801d246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d24a:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801d254:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801d258:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d25c:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 801d260:	601a      	str	r2, [r3, #0]
 801d262:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d266:	f2a3 621c 	subw	r2, r3, #1564	; 0x61c
 801d26a:	2308      	movs	r3, #8
 801d26c:	6013      	str	r3, [r2, #0]
 801d26e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d272:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 801d276:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d27a:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	6013      	str	r3, [r2, #0]
 801d282:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d286:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 801d28a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d28e:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d296:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d29a:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 801d29e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2a2:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	f003 031f 	and.w	r3, r3, #31
 801d2ac:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d2ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2b2:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d105      	bne.n	801d2c8 <arm_nn_mat_mult_nt_t_s8+0x412c>
    return op1;
 801d2bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2c0:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 801d2c4:	681a      	ldr	r2, [r3, #0]
 801d2c6:	e00a      	b.n	801d2de <arm_nn_mat_mult_nt_t_s8+0x4142>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d2c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2cc:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 801d2d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2d4:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801d2d8:	6812      	ldr	r2, [r2, #0]
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	41da      	rors	r2, r3
 801d2de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2e2:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801d2e6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d2e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2ec:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	fa2f f283 	sxtb16	r2, r3
 801d2f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2fa:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801d2fe:	601a      	str	r2, [r3, #0]
  return(result);
 801d300:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d304:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801d308:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d30a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d30e:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 801d312:	601a      	str	r2, [r3, #0]
  return result;
 801d314:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d318:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801d322:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d326:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801d32a:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801d32e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d332:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 801d336:	601a      	str	r2, [r3, #0]
 801d338:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d33c:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 801d340:	6019      	str	r1, [r3, #0]
 801d342:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d346:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 801d34a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d34c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d350:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 801d354:	6819      	ldr	r1, [r3, #0]
 801d356:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d35a:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 801d35e:	681a      	ldr	r2, [r3, #0]
 801d360:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d364:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	fb21 3202 	smlad	r2, r1, r2, r3
 801d36e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d372:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 801d376:	601a      	str	r2, [r3, #0]
  return(result);
 801d378:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d37c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801d386:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d38a:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801d38e:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801d392:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d396:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 801d39a:	601a      	str	r2, [r3, #0]
 801d39c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3a0:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801d3a4:	6019      	str	r1, [r3, #0]
 801d3a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3aa:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 801d3ae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d3b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3b4:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 801d3b8:	6819      	ldr	r1, [r3, #0]
 801d3ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3be:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801d3c2:	681a      	ldr	r2, [r3, #0]
 801d3c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3c8:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	fb21 3202 	smlad	r2, r1, r2, r3
 801d3d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3d6:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 801d3da:	601a      	str	r2, [r3, #0]
  return(result);
 801d3dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3e0:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801d3ea:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d3ee:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801d3f2:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d3f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3fa:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801d3fe:	601a      	str	r2, [r3, #0]
 801d400:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d404:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 801d408:	6019      	str	r1, [r3, #0]
 801d40a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d40e:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 801d412:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d414:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d418:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801d41c:	6819      	ldr	r1, [r3, #0]
 801d41e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d422:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 801d426:	681a      	ldr	r2, [r3, #0]
 801d428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d42c:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	fb21 3202 	smlad	r2, r1, r2, r3
 801d436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d43a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801d43e:	601a      	str	r2, [r3, #0]
  return(result);
 801d440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d444:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801d44e:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d452:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801d456:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d45a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d45e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 801d462:	601a      	str	r2, [r3, #0]
 801d464:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d468:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801d46c:	6019      	str	r1, [r3, #0]
 801d46e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d472:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801d476:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d478:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d47c:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 801d480:	6819      	ldr	r1, [r3, #0]
 801d482:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d486:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801d48a:	681a      	ldr	r2, [r3, #0]
 801d48c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d490:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801d494:	681b      	ldr	r3, [r3, #0]
 801d496:	fb21 3202 	smlad	r2, r1, r2, r3
 801d49a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d49e:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801d4a2:	601a      	str	r2, [r3, #0]
  return(result);
 801d4a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4a8:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801d4b2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801d4b6:	3310      	adds	r3, #16
 801d4b8:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 801d4bc:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d4c0:	f1a3 020f 	sub.w	r2, r3, #15
 801d4c4:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801d4c8:	4293      	cmp	r3, r2
 801d4ca:	f6fe ad06 	blt.w	801beda <arm_nn_mat_mult_nt_t_s8+0x2d3e>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d4ce:	e04b      	b.n	801d568 <arm_nn_mat_mult_nt_t_s8+0x43cc>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801d4d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4d4:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	781b      	ldrb	r3, [r3, #0]
 801d4dc:	f887 3a7b 	strb.w	r3, [r7, #2683]	; 0xa7b
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801d4e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4e4:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d4e8:	681a      	ldr	r2, [r3, #0]
 801d4ea:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d4ee:	4413      	add	r3, r2
 801d4f0:	781b      	ldrb	r3, [r3, #0]
 801d4f2:	f887 3a7a 	strb.w	r3, [r7, #2682]	; 0xa7a
                q7_t lhs_value = lhs_ptr[0];
 801d4f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4fa:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	781b      	ldrb	r3, [r3, #0]
 801d502:	f887 3a79 	strb.w	r3, [r7, #2681]	; 0xa79

                res00 += lhs_value * rhs_value0;
 801d506:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 801d50a:	f997 3a7b 	ldrsb.w	r3, [r7, #2683]	; 0xa7b
 801d50e:	fb03 f202 	mul.w	r2, r3, r2
 801d512:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801d516:	4413      	add	r3, r2
 801d518:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 += lhs_value * rhs_value1;
 801d51c:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 801d520:	f997 3a7a 	ldrsb.w	r3, [r7, #2682]	; 0xa7a
 801d524:	fb03 f202 	mul.w	r2, r3, r2
 801d528:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801d52c:	4413      	add	r3, r2
 801d52e:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

                ++rhs_ptr;
 801d532:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d536:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	1c5a      	adds	r2, r3, #1
 801d53e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d542:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d546:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801d548:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d54c:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	1c5a      	adds	r2, r3, #1
 801d554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d558:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801d55c:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d55e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801d562:	3301      	adds	r3, #1
 801d564:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 801d568:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 801d56c:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801d570:	429a      	cmp	r2, r3
 801d572:	dbad      	blt.n	801d4d0 <arm_nn_mat_mult_nt_t_s8+0x4334>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801d574:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d578:	009a      	lsls	r2, r3, #2
 801d57a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801d57e:	4413      	add	r3, r2
 801d580:	6818      	ldr	r0, [r3, #0]
 801d582:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d586:	009a      	lsls	r2, r3, #2
 801d588:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801d58c:	4413      	add	r3, r2
 801d58e:	6819      	ldr	r1, [r3, #0]
 801d590:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d594:	f6a3 02e8 	subw	r2, r3, #2280	; 0x8e8
 801d598:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801d59c:	6013      	str	r3, [r2, #0]
 801d59e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5a2:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 801d5a6:	6018      	str	r0, [r3, #0]
 801d5a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5ac:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d5b0:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d5b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5b6:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d5c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5c4:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	fa03 f202 	lsl.w	r2, r3, r2
 801d5ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5d2:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 801d5d6:	601a      	str	r2, [r3, #0]
 801d5d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5dc:	f6a3 02f8 	subw	r2, r3, #2296	; 0x8f8
 801d5e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5e4:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d5ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5f0:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801d5f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d5fc:	461a      	mov	r2, r3
 801d5fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d602:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801d604:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d608:	461a      	mov	r2, r3
 801d60a:	2300      	movs	r3, #0
 801d60c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d60e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d612:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d616:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d61a:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	17da      	asrs	r2, r3, #31
 801d622:	653b      	str	r3, [r7, #80]	; 0x50
 801d624:	657a      	str	r2, [r7, #84]	; 0x54
 801d626:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d62a:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	17da      	asrs	r2, r3, #31
 801d632:	64bb      	str	r3, [r7, #72]	; 0x48
 801d634:	64fa      	str	r2, [r7, #76]	; 0x4c
 801d636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d63a:	fb02 f203 	mul.w	r2, r2, r3
 801d63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d640:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801d642:	fb04 f303 	mul.w	r3, r4, r3
 801d646:	4413      	add	r3, r2
 801d648:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d64a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801d64c:	fba2 4204 	umull	r4, r2, r2, r4
 801d650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801d654:	4622      	mov	r2, r4
 801d656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801d65a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d65e:	4413      	add	r3, r2
 801d660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d668:	18c3      	adds	r3, r0, r3
 801d66a:	61bb      	str	r3, [r7, #24]
 801d66c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d670:	eb41 0303 	adc.w	r3, r1, r3
 801d674:	61fb      	str	r3, [r7, #28]
 801d676:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d67a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d67e:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801d682:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d68a:	f04f 0000 	mov.w	r0, #0
 801d68e:	f04f 0100 	mov.w	r1, #0
 801d692:	0fd0      	lsrs	r0, r2, #31
 801d694:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d698:	17d9      	asrs	r1, r3, #31
 801d69a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d69e:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	6013      	str	r3, [r2, #0]
    return result;
 801d6a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6aa:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 801d6ae:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d6b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6b4:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	dc06      	bgt.n	801d6cc <arm_nn_mat_mult_nt_t_s8+0x4530>
 801d6be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6c2:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	425a      	negs	r2, r3
 801d6ca:	e000      	b.n	801d6ce <arm_nn_mat_mult_nt_t_s8+0x4532>
 801d6cc:	2200      	movs	r2, #0
 801d6ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6d2:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 801d6d6:	6019      	str	r1, [r3, #0]
 801d6d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6dc:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801d6e0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d6e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6e6:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 801d6ea:	2300      	movs	r3, #0
 801d6ec:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d6ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6f2:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801d6f6:	2201      	movs	r2, #1
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	fa02 f103 	lsl.w	r1, r2, r3
 801d6fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d702:	f6a3 120c 	subw	r2, r3, #2316	; 0x90c
 801d706:	1e4b      	subs	r3, r1, #1
 801d708:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d70a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d70e:	f5a3 6111 	sub.w	r1, r3, #2320	; 0x910
 801d712:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d716:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 801d71a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d71e:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 801d722:	6812      	ldr	r2, [r2, #0]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	4013      	ands	r3, r2
 801d728:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d72a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d72e:	f6a3 1108 	subw	r1, r3, #2312	; 0x908
 801d732:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d736:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 801d73a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d73e:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801d742:	6812      	ldr	r2, [r2, #0]
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	fa42 f303 	asr.w	r3, r2, r3
 801d74a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d74c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d750:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 801d754:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d758:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	105b      	asrs	r3, r3, #1
 801d760:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d762:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d766:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	da0a      	bge.n	801d786 <arm_nn_mat_mult_nt_t_s8+0x45ea>
        threshold++;
 801d770:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d774:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 801d778:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d77c:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	3301      	adds	r3, #1
 801d784:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d786:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d78a:	f5a3 6211 	sub.w	r2, r3, #2320	; 0x910
 801d78e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d792:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 801d796:	6812      	ldr	r2, [r2, #0]
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	429a      	cmp	r2, r3
 801d79c:	dd0a      	ble.n	801d7b4 <arm_nn_mat_mult_nt_t_s8+0x4618>
        result++;
 801d79e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7a2:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 801d7a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7aa:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	3301      	adds	r3, #1
 801d7b2:	6013      	str	r3, [r2, #0]
    return result;
 801d7b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7b8:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801d7bc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d7be:	bf00      	nop
 801d7c0:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801d7c4:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d7c8:	3301      	adds	r3, #1
 801d7ca:	009a      	lsls	r2, r3, #2
 801d7cc:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801d7d0:	4413      	add	r3, r2
 801d7d2:	6818      	ldr	r0, [r3, #0]
 801d7d4:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801d7d8:	3301      	adds	r3, #1
 801d7da:	009a      	lsls	r2, r3, #2
 801d7dc:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801d7e0:	4413      	add	r3, r2
 801d7e2:	6819      	ldr	r1, [r3, #0]
 801d7e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7e8:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 801d7ec:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801d7f0:	6013      	str	r3, [r2, #0]
 801d7f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7f6:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 801d7fa:	6018      	str	r0, [r3, #0]
 801d7fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d800:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d804:	6019      	str	r1, [r3, #0]
 801d806:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d80a:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d814:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d818:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	fa03 f202 	lsl.w	r2, r3, r2
 801d822:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d826:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801d82a:	601a      	str	r2, [r3, #0]
 801d82c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d830:	f6a3 02c8 	subw	r2, r3, #2248	; 0x8c8
 801d834:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d838:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d840:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d844:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 801d848:	2300      	movs	r3, #0
 801d84a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801d84c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d850:	461a      	mov	r2, r3
 801d852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d856:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801d85a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d85e:	461a      	mov	r2, r3
 801d860:	2300      	movs	r3, #0
 801d862:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d866:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d86a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801d86e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d872:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	17da      	asrs	r2, r3, #31
 801d87a:	663b      	str	r3, [r7, #96]	; 0x60
 801d87c:	667a      	str	r2, [r7, #100]	; 0x64
 801d87e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d882:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	17da      	asrs	r2, r3, #31
 801d88a:	65bb      	str	r3, [r7, #88]	; 0x58
 801d88c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801d88e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d892:	fb02 f203 	mul.w	r2, r2, r3
 801d896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d898:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801d89a:	fb04 f303 	mul.w	r3, r4, r3
 801d89e:	4413      	add	r3, r2
 801d8a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d8a2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801d8a4:	fba2 4204 	umull	r4, r2, r2, r4
 801d8a8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801d8ac:	4622      	mov	r2, r4
 801d8ae:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801d8b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d8b6:	4413      	add	r3, r2
 801d8b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801d8bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801d8c0:	18c3      	adds	r3, r0, r3
 801d8c2:	623b      	str	r3, [r7, #32]
 801d8c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d8c8:	eb41 0303 	adc.w	r3, r1, r3
 801d8cc:	627b      	str	r3, [r7, #36]	; 0x24
 801d8ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d8d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801d8d6:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801d8da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d8de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d8e2:	f04f 0000 	mov.w	r0, #0
 801d8e6:	f04f 0100 	mov.w	r1, #0
 801d8ea:	0fd0      	lsrs	r0, r2, #31
 801d8ec:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d8f0:	17d9      	asrs	r1, r3, #31
 801d8f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8f6:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 801d8fa:	4603      	mov	r3, r0
 801d8fc:	6013      	str	r3, [r2, #0]
    return result;
 801d8fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d902:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 801d906:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d908:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d90c:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	2b00      	cmp	r3, #0
 801d914:	dc06      	bgt.n	801d924 <arm_nn_mat_mult_nt_t_s8+0x4788>
 801d916:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d91a:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	425a      	negs	r2, r3
 801d922:	e000      	b.n	801d926 <arm_nn_mat_mult_nt_t_s8+0x478a>
 801d924:	2200      	movs	r2, #0
 801d926:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d92a:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 801d92e:	6019      	str	r1, [r3, #0]
 801d930:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d934:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801d938:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d93a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d93e:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 801d942:	2300      	movs	r3, #0
 801d944:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d94a:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801d94e:	2201      	movs	r2, #1
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	fa02 f103 	lsl.w	r1, r2, r3
 801d956:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d95a:	f6a3 02dc 	subw	r2, r3, #2268	; 0x8dc
 801d95e:	1e4b      	subs	r3, r1, #1
 801d960:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d962:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d966:	f5a3 610e 	sub.w	r1, r3, #2272	; 0x8e0
 801d96a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d96e:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801d972:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d976:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 801d97a:	6812      	ldr	r2, [r2, #0]
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	4013      	ands	r3, r2
 801d980:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d982:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d986:	f6a3 01d8 	subw	r1, r3, #2264	; 0x8d8
 801d98a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d98e:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801d992:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d996:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801d99a:	6812      	ldr	r2, [r2, #0]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	fa42 f303 	asr.w	r3, r2, r3
 801d9a2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d9a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9a8:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 801d9ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9b0:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	105b      	asrs	r3, r3, #1
 801d9b8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d9ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9be:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801d9c2:	681b      	ldr	r3, [r3, #0]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	da0a      	bge.n	801d9de <arm_nn_mat_mult_nt_t_s8+0x4842>
        threshold++;
 801d9c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9cc:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 801d9d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9d4:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	3301      	adds	r3, #1
 801d9dc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d9de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9e2:	f5a3 620e 	sub.w	r2, r3, #2272	; 0x8e0
 801d9e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9ea:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 801d9ee:	6812      	ldr	r2, [r2, #0]
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	429a      	cmp	r2, r3
 801d9f4:	dd0a      	ble.n	801da0c <arm_nn_mat_mult_nt_t_s8+0x4870>
        result++;
 801d9f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9fa:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 801d9fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da02:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	3301      	adds	r3, #1
 801da0a:	6013      	str	r3, [r2, #0]
    return result;
 801da0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da10:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801da14:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801da16:	bf00      	nop
 801da18:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Add offset
            res00 += dst_offset;
 801da1c:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801da20:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801da24:	4413      	add	r3, r2
 801da26:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 += dst_offset;
 801da2a:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801da2e:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801da32:	4413      	add	r3, r2
 801da34:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801da38:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801da3c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801da40:	4293      	cmp	r3, r2
 801da42:	bfb8      	it	lt
 801da44:	4613      	movlt	r3, r2
 801da46:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res00 = MIN(res00, activation_max);
 801da4a:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801da4e:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801da52:	4293      	cmp	r3, r2
 801da54:	bfa8      	it	ge
 801da56:	4613      	movge	r3, r2
 801da58:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = MAX(res01, activation_min);
 801da5c:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801da60:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801da64:	4293      	cmp	r3, r2
 801da66:	bfb8      	it	lt
 801da68:	4613      	movlt	r3, r2
 801da6a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            res01 = MIN(res01, activation_max);
 801da6e:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801da72:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801da76:	4293      	cmp	r3, r2
 801da78:	bfa8      	it	ge
 801da7a:	4613      	movge	r3, r2
 801da7c:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            dst_ptr[0] = (q7_t)res00;
 801da80:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801da84:	b25b      	sxtb	r3, r3
 801da86:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801da8a:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801da8c:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801da90:	1c5a      	adds	r2, r3, #1
 801da92:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801da96:	b25b      	sxtb	r3, r3
 801da98:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 801da9a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801da9e:	005b      	lsls	r3, r3, #1
 801daa0:	4619      	mov	r1, r3
 801daa2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801daa6:	f6a3 2208 	subw	r2, r3, #2568	; 0xa08
 801daaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801daae:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	440b      	add	r3, r1
 801dab6:	6013      	str	r3, [r2, #0]
        dst += 2;
 801dab8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dabc:	f5a3 6221 	sub.w	r2, r3, #2576	; 0xa10
 801dac0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dac4:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	3302      	adds	r3, #2
 801dacc:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801dace:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801dad2:	3302      	adds	r3, #2
 801dad4:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 801dad8:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801dadc:	1e5a      	subs	r2, r3, #1
 801dade:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801dae2:	4293      	cmp	r3, r2
 801dae4:	f6fb ab7d 	blt.w	80191e2 <arm_nn_mat_mult_nt_t_s8+0x46>
    }

    if (rhs_rows % 2)
 801dae8:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801daec:	f003 0301 	and.w	r3, r3, #1
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	f000 81bd 	beq.w	801de70 <arm_nn_mat_mult_nt_t_s8+0x4cd4>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801daf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dafa:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
        q7_t *dst_ptr = &dst[0];
 801db04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db08:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801db12:	2300      	movs	r3, #0
 801db14:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 801db18:	e1a3      	b.n	801de62 <arm_nn_mat_mult_nt_t_s8+0x4cc6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801db1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db1e:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
            q31_t res00 = 0;
 801db28:	2300      	movs	r3, #0
 801db2a:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            if (bias)
 801db2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db32:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d00e      	beq.n	801db5a <arm_nn_mat_mult_nt_t_s8+0x49be>
            {
                res00 = bias[rhs_rows - 1];
 801db3c:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801db40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801db44:	3b01      	subs	r3, #1
 801db46:	009b      	lsls	r3, r3, #2
 801db48:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801db4c:	f6a2 220c 	subw	r2, r2, #2572	; 0xa0c
 801db50:	6812      	ldr	r2, [r2, #0]
 801db52:	4413      	add	r3, r2
 801db54:	681b      	ldr	r3, [r3, #0]
 801db56:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801db5a:	2300      	movs	r3, #0
 801db5c:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 801db60:	e029      	b.n	801dbb6 <arm_nn_mat_mult_nt_t_s8+0x4a1a>
            {
                q31_t rhs_value = rhs_ptr[0];
 801db62:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801db66:	f993 3000 	ldrsb.w	r3, [r3]
 801db6a:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 801db6e:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801db72:	f993 3000 	ldrsb.w	r3, [r3]
 801db76:	461a      	mov	r2, r3
 801db78:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 801db7c:	4413      	add	r3, r2
 801db7e:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c

                res00 += lhs_value * rhs_value;
 801db82:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801db86:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 801db8a:	fb02 f303 	mul.w	r3, r2, r3
 801db8e:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801db92:	4413      	add	r3, r2
 801db94:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

                ++rhs_ptr;
 801db98:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801db9c:	3301      	adds	r3, #1
 801db9e:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
                ++lhs_ptr;
 801dba2:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801dba6:	3301      	adds	r3, #1
 801dba8:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801dbac:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 801dbb0:	3301      	adds	r3, #1
 801dbb2:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 801dbb6:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	; 0xa88
 801dbba:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801dbbe:	429a      	cmp	r2, r3
 801dbc0:	dbcf      	blt.n	801db62 <arm_nn_mat_mult_nt_t_s8+0x49c6>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 801dbc2:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801dbc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801dbca:	3b01      	subs	r3, #1
 801dbcc:	009b      	lsls	r3, r3, #2
 801dbce:	f8d7 2af8 	ldr.w	r2, [r7, #2808]	; 0xaf8
 801dbd2:	4413      	add	r3, r2
 801dbd4:	6819      	ldr	r1, [r3, #0]
 801dbd6:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801dbda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801dbde:	3b01      	subs	r3, #1
 801dbe0:	009b      	lsls	r3, r3, #2
 801dbe2:	f8d7 2afc 	ldr.w	r2, [r7, #2812]	; 0xafc
 801dbe6:	4413      	add	r3, r2
 801dbe8:	681a      	ldr	r2, [r3, #0]
 801dbea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbee:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 801dbf2:	f8d7 0a8c 	ldr.w	r0, [r7, #2700]	; 0xa8c
 801dbf6:	6018      	str	r0, [r3, #0]
 801dbf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbfc:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 801dc00:	6019      	str	r1, [r3, #0]
 801dc02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc06:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801dc0a:	601a      	str	r2, [r3, #0]
 801dc0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc10:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc1a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dc1e:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 801dc22:	6812      	ldr	r2, [r2, #0]
 801dc24:	409a      	lsls	r2, r3
 801dc26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc2a:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 801dc2e:	601a      	str	r2, [r3, #0]
 801dc30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc34:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 801dc38:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dc3c:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 801dc40:	6812      	ldr	r2, [r2, #0]
 801dc42:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801dc44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc48:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 801dc4c:	2200      	movs	r2, #0
 801dc4e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801dc50:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dc54:	461a      	mov	r2, r3
 801dc56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801dc5a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801dc5c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dc60:	461a      	mov	r2, r3
 801dc62:	2300      	movs	r3, #0
 801dc64:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801dc66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc6e:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801dc72:	f6a1 1124 	subw	r1, r1, #2340	; 0x924
 801dc76:	6809      	ldr	r1, [r1, #0]
 801dc78:	17c8      	asrs	r0, r1, #31
 801dc7a:	6139      	str	r1, [r7, #16]
 801dc7c:	6178      	str	r0, [r7, #20]
 801dc7e:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801dc82:	f6a1 1128 	subw	r1, r1, #2344	; 0x928
 801dc86:	6809      	ldr	r1, [r1, #0]
 801dc88:	17c8      	asrs	r0, r1, #31
 801dc8a:	60b9      	str	r1, [r7, #8]
 801dc8c:	60f8      	str	r0, [r7, #12]
 801dc8e:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 801dc92:	4631      	mov	r1, r6
 801dc94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801dc98:	4650      	mov	r0, sl
 801dc9a:	fb00 f001 	mul.w	r0, r0, r1
 801dc9e:	4659      	mov	r1, fp
 801dca0:	462c      	mov	r4, r5
 801dca2:	fb04 f101 	mul.w	r1, r4, r1
 801dca6:	4401      	add	r1, r0
 801dca8:	4628      	mov	r0, r5
 801dcaa:	4654      	mov	r4, sl
 801dcac:	fba0 8904 	umull	r8, r9, r0, r4
 801dcb0:	4449      	add	r1, r9
 801dcb2:	4689      	mov	r9, r1
 801dcb4:	eb12 0108 	adds.w	r1, r2, r8
 801dcb8:	6039      	str	r1, [r7, #0]
 801dcba:	eb43 0309 	adc.w	r3, r3, r9
 801dcbe:	607b      	str	r3, [r7, #4]
 801dcc0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dcc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 801dcc8:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801dccc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dcd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dcd4:	f04f 0200 	mov.w	r2, #0
 801dcd8:	f04f 0300 	mov.w	r3, #0
 801dcdc:	0fc2      	lsrs	r2, r0, #31
 801dcde:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801dce2:	17cb      	asrs	r3, r1, #31
 801dce4:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801dce8:	f6a1 112c 	subw	r1, r1, #2348	; 0x92c
 801dcec:	4613      	mov	r3, r2
 801dcee:	600b      	str	r3, [r1, #0]
    return result;
 801dcf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dcf4:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 801dcf8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801dcfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dcfe:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	dc06      	bgt.n	801dd16 <arm_nn_mat_mult_nt_t_s8+0x4b7a>
 801dd08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd0c:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	425b      	negs	r3, r3
 801dd14:	e000      	b.n	801dd18 <arm_nn_mat_mult_nt_t_s8+0x4b7c>
 801dd16:	2300      	movs	r3, #0
 801dd18:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dd1c:	f5a2 6213 	sub.w	r2, r2, #2352	; 0x930
 801dd20:	6011      	str	r1, [r2, #0]
 801dd22:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dd26:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 801dd2a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801dd2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd30:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801dd34:	2200      	movs	r2, #0
 801dd36:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801dd38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd3c:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 801dd40:	2201      	movs	r2, #1
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	409a      	lsls	r2, r3
 801dd46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd4a:	f6a3 133c 	subw	r3, r3, #2364	; 0x93c
 801dd4e:	3a01      	subs	r2, #1
 801dd50:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801dd52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd56:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 801dd5a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dd5e:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 801dd62:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dd66:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 801dd6a:	6809      	ldr	r1, [r1, #0]
 801dd6c:	6812      	ldr	r2, [r2, #0]
 801dd6e:	400a      	ands	r2, r1
 801dd70:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801dd72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd76:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801dd7a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dd7e:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 801dd82:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dd86:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 801dd8a:	6809      	ldr	r1, [r1, #0]
 801dd8c:	6812      	ldr	r2, [r2, #0]
 801dd8e:	fa41 f202 	asr.w	r2, r1, r2
 801dd92:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801dd94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd98:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801dd9c:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801dda0:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 801dda4:	6812      	ldr	r2, [r2, #0]
 801dda6:	1052      	asrs	r2, r2, #1
 801dda8:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801ddaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddae:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	da0a      	bge.n	801ddce <arm_nn_mat_mult_nt_t_s8+0x4c32>
        threshold++;
 801ddb8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddbc:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801ddc0:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801ddc4:	f6a2 1244 	subw	r2, r2, #2372	; 0x944
 801ddc8:	6812      	ldr	r2, [r2, #0]
 801ddca:	3201      	adds	r2, #1
 801ddcc:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801ddce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddd2:	f5a3 6214 	sub.w	r2, r3, #2368	; 0x940
 801ddd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddda:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801ddde:	6812      	ldr	r2, [r2, #0]
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	429a      	cmp	r2, r3
 801dde4:	dd0a      	ble.n	801ddfc <arm_nn_mat_mult_nt_t_s8+0x4c60>
        result++;
 801dde6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddea:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801ddee:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801ddf2:	f6a2 1238 	subw	r2, r2, #2360	; 0x938
 801ddf6:	6812      	ldr	r2, [r2, #0]
 801ddf8:	3201      	adds	r2, #1
 801ddfa:	601a      	str	r2, [r3, #0]
    return result;
 801ddfc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de00:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801de04:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801de06:	bf00      	nop
 801de08:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Add offset
            res00 += dst_offset;
 801de0c:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801de10:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801de14:	4413      	add	r3, r2
 801de16:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801de1a:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801de1e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801de22:	4293      	cmp	r3, r2
 801de24:	bfb8      	it	lt
 801de26:	4613      	movlt	r3, r2
 801de28:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            res00 = MIN(res00, activation_max);
 801de2c:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801de30:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801de34:	4293      	cmp	r3, r2
 801de36:	bfa8      	it	ge
 801de38:	4613      	movge	r3, r2
 801de3a:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            dst_ptr[0] = (q7_t)res00;
 801de3e:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 801de42:	b25a      	sxtb	r2, r3
 801de44:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 801de48:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 801de4a:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801de4e:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 801de52:	4413      	add	r3, r2
 801de54:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801de58:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 801de5c:	3301      	adds	r3, #1
 801de5e:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 801de62:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 801de66:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801de6a:	429a      	cmp	r2, r3
 801de6c:	f6ff ae55 	blt.w	801db1a <arm_nn_mat_mult_nt_t_s8+0x497e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 801de70:	2300      	movs	r3, #0
}
 801de72:	4618      	mov	r0, r3
 801de74:	f607 27d8 	addw	r7, r7, #2776	; 0xad8
 801de78:	46bd      	mov	sp, r7
 801de7a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801de7e:	4770      	bx	lr

0801de80 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 801de80:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801de84:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 801de88:	af00      	add	r7, sp, #0
 801de8a:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 801de8e:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 801de92:	6020      	str	r0, [r4, #0]
 801de94:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 801de98:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 801de9c:	6001      	str	r1, [r0, #0]
 801de9e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801dea2:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 801dea6:	600a      	str	r2, [r1, #0]
 801dea8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801deac:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 801deb0:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801deb2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801deb6:	3b04      	subs	r3, #4
 801deb8:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 801debc:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801dec0:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 801dec4:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801dec8:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 801decc:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801ded0:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 801ded4:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801ded8:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 801dedc:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 801dee0:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 801dee4:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801dee8:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 801deec:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 801def0:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 801def4:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801def8:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 801defc:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801df00:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 801df04:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 801df08:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 801df0c:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801df10:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 801df14:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 801df18:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801df1c:	2300      	movs	r3, #0
 801df1e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 801df22:	f001 bd13 	b.w	801f94c <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801df26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df2a:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801df2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df32:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 801df3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df3e:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 801df42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df46:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 801df4e:	2300      	movs	r3, #0
 801df50:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 801df54:	2300      	movs	r3, #0
 801df56:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 801df5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df5e:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	2b00      	cmp	r3, #0
 801df66:	d01b      	beq.n	801dfa0 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 801df68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df6c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801df70:	6819      	ldr	r1, [r3, #0]
 801df72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df76:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 801df7a:	1d0b      	adds	r3, r1, #4
 801df7c:	6013      	str	r3, [r2, #0]
 801df7e:	680b      	ldr	r3, [r1, #0]
 801df80:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 801df84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df88:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801df8c:	6819      	ldr	r1, [r3, #0]
 801df8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801df92:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 801df96:	1d0b      	adds	r3, r1, #4
 801df98:	6013      	str	r3, [r2, #0]
 801df9a:	680b      	ldr	r3, [r1, #0]
 801df9c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 801dfa0:	2300      	movs	r3, #0
 801dfa2:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801dfa6:	f001 b9db 	b.w	801f360 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 801dfaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801dfae:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 801dfb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801dfb6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801dfb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801dfbc:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	461a      	mov	r2, r3
 801dfc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801dfcc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801dfd0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dfd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801dfd6:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	1d1a      	adds	r2, r3, #4
 801dfe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801dfe4:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	601a      	str	r2, [r3, #0]
    return (val);
 801dfec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801dff0:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801dff4:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801dff6:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801dffa:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801dffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e002:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801e006:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e00a:	6013      	str	r3, [r2, #0]
 801e00c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e010:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801e014:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e016:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e01a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801e01e:	681a      	ldr	r2, [r3, #0]
 801e020:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e024:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801e028:	681b      	ldr	r3, [r3, #0]
 801e02a:	fa22 f283 	sxtab16	r2, r2, r3
 801e02e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e032:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801e036:	601a      	str	r2, [r3, #0]
  return(result);
 801e038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e03c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801e046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e04a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801e04e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e052:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e054:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e058:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	461a      	mov	r2, r3
 801e064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e068:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801e06c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e06e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e072:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	1d1a      	adds	r2, r3, #4
 801e07c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e080:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	601a      	str	r2, [r3, #0]
    return (val);
 801e088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e08c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801e090:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e092:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801e096:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801e09a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e09e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801e0a2:	601a      	str	r2, [r3, #0]
 801e0a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0a8:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801e0ac:	2308      	movs	r3, #8
 801e0ae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e0b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0b4:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801e0b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0bc:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	f003 031f 	and.w	r3, r3, #31
 801e0c6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e0c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0cc:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d105      	bne.n	801e0e2 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 801e0d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0da:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801e0de:	6819      	ldr	r1, [r3, #0]
 801e0e0:	e00b      	b.n	801e0fa <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e0e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0e6:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 801e0ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0ee:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801e0f2:	6812      	ldr	r2, [r2, #0]
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	fa62 f103 	ror.w	r1, r2, r3
 801e0fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e0fe:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 801e102:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e106:	6013      	str	r3, [r2, #0]
 801e108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e10c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801e110:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e116:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801e11a:	681a      	ldr	r2, [r3, #0]
 801e11c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e120:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	fa22 f283 	sxtab16	r2, r2, r3
 801e12a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e12e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801e132:	601a      	str	r2, [r3, #0]
  return(result);
 801e134:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e138:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801e142:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801e146:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e14a:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 801e14e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801e152:	6013      	str	r3, [r2, #0]
 801e154:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e158:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801e15c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e15e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e162:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801e166:	681a      	ldr	r2, [r3, #0]
 801e168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e16c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	fa22 f283 	sxtab16	r2, r2, r3
 801e176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e17a:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801e17e:	601a      	str	r2, [r3, #0]
  return(result);
 801e180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e184:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801e18e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e192:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801e196:	681a      	ldr	r2, [r3, #0]
 801e198:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801e19c:	441a      	add	r2, r3
 801e19e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1a2:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801e1a6:	601a      	str	r2, [r3, #0]
 801e1a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1ac:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e1b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1ba:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801e1be:	601a      	str	r2, [r3, #0]
    return (val);
 801e1c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1c4:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801e1c8:	681b      	ldr	r3, [r3, #0]
 801e1ca:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801e1ce:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801e1d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1d6:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801e1da:	601a      	str	r2, [r3, #0]
 801e1dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1e0:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 801e1e4:	2308      	movs	r3, #8
 801e1e6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e1e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1ec:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 801e1f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e1f4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	f003 031f 	and.w	r3, r3, #31
 801e1fe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e200:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e204:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	d105      	bne.n	801e21a <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 801e20e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e212:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801e216:	6819      	ldr	r1, [r3, #0]
 801e218:	e00b      	b.n	801e232 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e21a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e21e:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801e222:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e226:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801e22a:	6812      	ldr	r2, [r2, #0]
 801e22c:	681b      	ldr	r3, [r3, #0]
 801e22e:	fa62 f103 	ror.w	r1, r2, r3
 801e232:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e236:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801e23a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801e23e:	6013      	str	r3, [r2, #0]
 801e240:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e244:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801e248:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e24a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e24e:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801e252:	681a      	ldr	r2, [r3, #0]
 801e254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e258:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	fa22 f283 	sxtab16	r2, r2, r3
 801e262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e266:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801e26a:	601a      	str	r2, [r3, #0]
  return(result);
 801e26c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e270:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801e27a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801e27e:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801e282:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801e286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e28a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801e28e:	601a      	str	r2, [r3, #0]
 801e290:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e294:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801e298:	6019      	str	r1, [r3, #0]
 801e29a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e29e:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801e2a2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e2a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2a8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801e2ac:	6819      	ldr	r1, [r3, #0]
 801e2ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2b2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801e2b6:	681a      	ldr	r2, [r3, #0]
 801e2b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2bc:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	fb21 3202 	smlad	r2, r1, r2, r3
 801e2c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2ca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801e2ce:	601a      	str	r2, [r3, #0]
  return(result);
 801e2d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2d4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801e2de:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801e2e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2e6:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801e2ea:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e2ee:	6013      	str	r3, [r2, #0]
 801e2f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2f4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801e2f8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e2fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e2fe:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801e302:	681a      	ldr	r2, [r3, #0]
 801e304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e308:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	fa22 f283 	sxtab16	r2, r2, r3
 801e312:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e316:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801e31a:	601a      	str	r2, [r3, #0]
  return(result);
 801e31c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e320:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801e324:	681b      	ldr	r3, [r3, #0]
 801e326:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801e32a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801e32e:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801e332:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801e336:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e33a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801e33e:	601a      	str	r2, [r3, #0]
 801e340:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e344:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801e348:	6019      	str	r1, [r3, #0]
 801e34a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e34e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801e352:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e358:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801e35c:	6819      	ldr	r1, [r3, #0]
 801e35e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e362:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801e366:	681a      	ldr	r2, [r3, #0]
 801e368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e36c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	fb21 3202 	smlad	r2, r1, r2, r3
 801e376:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e37a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801e37e:	601a      	str	r2, [r3, #0]
  return(result);
 801e380:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e384:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801e38e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801e392:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e396:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801e39a:	601a      	str	r2, [r3, #0]
 801e39c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3a0:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 801e3a4:	2308      	movs	r3, #8
 801e3a6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e3a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3ac:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 801e3b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3b4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	f003 031f 	and.w	r3, r3, #31
 801e3be:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e3c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3c4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d105      	bne.n	801e3da <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 801e3ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3d2:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801e3d6:	6819      	ldr	r1, [r3, #0]
 801e3d8:	e00b      	b.n	801e3f2 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e3da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3de:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 801e3e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3e6:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801e3ea:	6812      	ldr	r2, [r2, #0]
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	fa62 f103 	ror.w	r1, r2, r3
 801e3f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e3f6:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801e3fa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e3fe:	6013      	str	r3, [r2, #0]
 801e400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e404:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801e408:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e40a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e40e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801e412:	681a      	ldr	r2, [r3, #0]
 801e414:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e418:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	fa22 f283 	sxtab16	r2, r2, r3
 801e422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e426:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801e42a:	601a      	str	r2, [r3, #0]
  return(result);
 801e42c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e430:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801e43a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e43e:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 801e442:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801e446:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e448:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e44c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	461a      	mov	r2, r3
 801e458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e45c:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 801e460:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e462:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e466:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	1d1a      	adds	r2, r3, #4
 801e470:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e474:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	601a      	str	r2, [r3, #0]
    return (val);
 801e47c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e480:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 801e484:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e486:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801e48a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801e48e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 801e492:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801e496:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e49a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801e49e:	601a      	str	r2, [r3, #0]
 801e4a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4a4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801e4a8:	6019      	str	r1, [r3, #0]
 801e4aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4ae:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801e4b2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e4b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4b8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801e4bc:	6819      	ldr	r1, [r3, #0]
 801e4be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4c2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801e4c6:	681a      	ldr	r2, [r3, #0]
 801e4c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4cc:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	fb21 3202 	smlad	r2, r1, r2, r3
 801e4d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4da:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801e4de:	601a      	str	r2, [r3, #0]
  return(result);
 801e4e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4e4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801e4ee:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801e4f2:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801e4f6:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801e4fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e4fe:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801e502:	601a      	str	r2, [r3, #0]
 801e504:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e508:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801e50c:	6019      	str	r1, [r3, #0]
 801e50e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e512:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801e516:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e518:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e51c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801e520:	6819      	ldr	r1, [r3, #0]
 801e522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e526:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801e52a:	681a      	ldr	r2, [r3, #0]
 801e52c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e530:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	fb21 3202 	smlad	r2, r1, r2, r3
 801e53a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e53e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801e542:	601a      	str	r2, [r3, #0]
  return(result);
 801e544:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e548:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801e552:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801e556:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e55a:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801e55e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e562:	6013      	str	r3, [r2, #0]
 801e564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e568:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801e56c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e56e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e572:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801e576:	681a      	ldr	r2, [r3, #0]
 801e578:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e57c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	fa22 f283 	sxtab16	r2, r2, r3
 801e586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e58a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801e58e:	601a      	str	r2, [r3, #0]
  return(result);
 801e590:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e594:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801e59e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e5a2:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 801e5a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e5aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e5ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e5b0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	681b      	ldr	r3, [r3, #0]
 801e5ba:	461a      	mov	r2, r3
 801e5bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e5c0:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801e5c4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e5c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e5ca:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	1d1a      	adds	r2, r3, #4
 801e5d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e5d8:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	601a      	str	r2, [r3, #0]
    return (val);
 801e5e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e5e4:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801e5e8:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801e5ea:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801e5ee:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801e5f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e5f6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801e5fa:	601a      	str	r2, [r3, #0]
 801e5fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e600:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 801e604:	2308      	movs	r3, #8
 801e606:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e608:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e60c:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 801e610:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e614:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	f003 031f 	and.w	r3, r3, #31
 801e61e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e624:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	d105      	bne.n	801e63a <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 801e62e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e632:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801e636:	6819      	ldr	r1, [r3, #0]
 801e638:	e00b      	b.n	801e652 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e63a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e63e:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 801e642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e646:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801e64a:	6812      	ldr	r2, [r2, #0]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	fa62 f103 	ror.w	r1, r2, r3
 801e652:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e656:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 801e65a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e65e:	6013      	str	r3, [r2, #0]
 801e660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e664:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801e668:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e66a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e66e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801e672:	681a      	ldr	r2, [r3, #0]
 801e674:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e678:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	fa22 f283 	sxtab16	r2, r2, r3
 801e682:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e686:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801e68a:	601a      	str	r2, [r3, #0]
  return(result);
 801e68c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e690:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801e69a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801e69e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6a2:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801e6a6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801e6aa:	6013      	str	r3, [r2, #0]
 801e6ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6b0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801e6b4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e6b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6ba:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801e6be:	681a      	ldr	r2, [r3, #0]
 801e6c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6c4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801e6c8:	681b      	ldr	r3, [r3, #0]
 801e6ca:	fa22 f283 	sxtab16	r2, r2, r3
 801e6ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801e6d6:	601a      	str	r2, [r3, #0]
  return(result);
 801e6d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801e6e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6ea:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801e6ee:	681a      	ldr	r2, [r3, #0]
 801e6f0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801e6f4:	441a      	add	r2, r3
 801e6f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e6fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801e6fe:	601a      	str	r2, [r3, #0]
 801e700:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801e708:	681b      	ldr	r3, [r3, #0]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801e70e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e712:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801e716:	601a      	str	r2, [r3, #0]
    return (val);
 801e718:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e71c:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801e726:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801e72a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e72e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801e732:	601a      	str	r2, [r3, #0]
 801e734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e738:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801e73c:	2308      	movs	r3, #8
 801e73e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e740:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e744:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801e748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e74c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	f003 031f 	and.w	r3, r3, #31
 801e756:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e758:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e75c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d105      	bne.n	801e772 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 801e766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e76a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801e76e:	6819      	ldr	r1, [r3, #0]
 801e770:	e00b      	b.n	801e78a <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e772:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e776:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801e77a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e77e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801e782:	6812      	ldr	r2, [r2, #0]
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	fa62 f103 	ror.w	r1, r2, r3
 801e78a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e78e:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 801e792:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801e796:	6013      	str	r3, [r2, #0]
 801e798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e79c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801e7a0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e7a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e7a6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801e7aa:	681a      	ldr	r2, [r3, #0]
 801e7ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e7b0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	fa22 f283 	sxtab16	r2, r2, r3
 801e7ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e7be:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801e7c2:	601a      	str	r2, [r3, #0]
  return(result);
 801e7c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e7c8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801e7d2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801e7d6:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801e7da:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801e7de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e7e2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801e7e6:	601a      	str	r2, [r3, #0]
 801e7e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e7ec:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801e7f0:	6019      	str	r1, [r3, #0]
 801e7f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e7f6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801e7fa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e7fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e800:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801e804:	6819      	ldr	r1, [r3, #0]
 801e806:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e80a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801e80e:	681a      	ldr	r2, [r3, #0]
 801e810:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e814:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801e818:	681b      	ldr	r3, [r3, #0]
 801e81a:	fb21 3202 	smlad	r2, r1, r2, r3
 801e81e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e822:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801e826:	601a      	str	r2, [r3, #0]
  return(result);
 801e828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e82c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801e830:	681b      	ldr	r3, [r3, #0]
 801e832:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801e836:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801e83a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e83e:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 801e842:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e846:	6013      	str	r3, [r2, #0]
 801e848:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e84c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801e850:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e852:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e856:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801e85a:	681a      	ldr	r2, [r3, #0]
 801e85c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e860:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801e864:	681b      	ldr	r3, [r3, #0]
 801e866:	fa22 f283 	sxtab16	r2, r2, r3
 801e86a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e86e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801e872:	601a      	str	r2, [r3, #0]
  return(result);
 801e874:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e878:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801e882:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801e886:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801e88a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801e88e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e892:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801e896:	601a      	str	r2, [r3, #0]
 801e898:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e89c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801e8a0:	6019      	str	r1, [r3, #0]
 801e8a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8a6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801e8aa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e8ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801e8b4:	6819      	ldr	r1, [r3, #0]
 801e8b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8ba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801e8be:	681a      	ldr	r2, [r3, #0]
 801e8c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8c4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	fb21 3202 	smlad	r2, r1, r2, r3
 801e8ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8d2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801e8d6:	601a      	str	r2, [r3, #0]
  return(result);
 801e8d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8dc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801e8e6:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801e8ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801e8f2:	601a      	str	r2, [r3, #0]
 801e8f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e8f8:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801e8fc:	2308      	movs	r3, #8
 801e8fe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801e900:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e904:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801e908:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e90c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	f003 031f 	and.w	r3, r3, #31
 801e916:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e918:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e91c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801e920:	681b      	ldr	r3, [r3, #0]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d105      	bne.n	801e932 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 801e926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e92a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801e92e:	6819      	ldr	r1, [r3, #0]
 801e930:	e00b      	b.n	801e94a <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e936:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801e93a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e93e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801e942:	6812      	ldr	r2, [r2, #0]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	fa62 f103 	ror.w	r1, r2, r3
 801e94a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e94e:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 801e952:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801e956:	6013      	str	r3, [r2, #0]
 801e958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e95c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801e960:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801e962:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e966:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801e96a:	681a      	ldr	r2, [r3, #0]
 801e96c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801e974:	681b      	ldr	r3, [r3, #0]
 801e976:	fa22 f283 	sxtab16	r2, r2, r3
 801e97a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e97e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801e982:	601a      	str	r2, [r3, #0]
  return(result);
 801e984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e988:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801e992:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e996:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801e99a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801e99e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801e9a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e9a4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	681b      	ldr	r3, [r3, #0]
 801e9ae:	461a      	mov	r2, r3
 801e9b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e9b4:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801e9b8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801e9ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e9be:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	1d1a      	adds	r2, r3, #4
 801e9c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e9cc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	601a      	str	r2, [r3, #0]
    return (val);
 801e9d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e9d8:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801e9dc:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801e9de:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801e9e2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801e9e6:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 801e9ea:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801e9ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e9f2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801e9f6:	601a      	str	r2, [r3, #0]
 801e9f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801e9fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801ea00:	6019      	str	r1, [r3, #0]
 801ea02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801ea0a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ea0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801ea14:	6819      	ldr	r1, [r3, #0]
 801ea16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801ea1e:	681a      	ldr	r2, [r3, #0]
 801ea20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea24:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea32:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801ea36:	601a      	str	r2, [r3, #0]
  return(result);
 801ea38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea3c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801ea40:	681b      	ldr	r3, [r3, #0]
 801ea42:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801ea46:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801ea4a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801ea4e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801ea52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801ea5a:	601a      	str	r2, [r3, #0]
 801ea5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801ea64:	6019      	str	r1, [r3, #0]
 801ea66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea6a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801ea6e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ea70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801ea78:	6819      	ldr	r1, [r3, #0]
 801ea7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801ea82:	681a      	ldr	r2, [r3, #0]
 801ea84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	fb21 3202 	smlad	r2, r1, r2, r3
 801ea92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ea96:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801ea9a:	601a      	str	r2, [r3, #0]
  return(result);
 801ea9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eaa0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801eaaa:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801eaae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eab2:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 801eab6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801eaba:	6013      	str	r3, [r2, #0]
 801eabc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eac0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801eac4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801eac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eaca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801eace:	681a      	ldr	r2, [r3, #0]
 801ead0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ead4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	fa22 f283 	sxtab16	r2, r2, r3
 801eade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eae2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801eae6:	601a      	str	r2, [r3, #0]
  return(result);
 801eae8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eaec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801eaf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eafa:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801eafe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb02:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801eb04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb08:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801eb0c:	681b      	ldr	r3, [r3, #0]
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	461a      	mov	r2, r3
 801eb14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb18:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801eb1c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801eb1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	1d1a      	adds	r2, r3, #4
 801eb2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb30:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	601a      	str	r2, [r3, #0]
    return (val);
 801eb38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb3c:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801eb40:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801eb42:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801eb46:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801eb4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801eb52:	601a      	str	r2, [r3, #0]
 801eb54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb58:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801eb5c:	2308      	movs	r3, #8
 801eb5e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801eb60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb64:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801eb68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb6c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801eb70:	681b      	ldr	r3, [r3, #0]
 801eb72:	f003 031f 	and.w	r3, r3, #31
 801eb76:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801eb78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d105      	bne.n	801eb92 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 801eb86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801eb8e:	6819      	ldr	r1, [r3, #0]
 801eb90:	e00b      	b.n	801ebaa <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801eb92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb96:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801eb9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eb9e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801eba2:	6812      	ldr	r2, [r2, #0]
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	fa62 f103 	ror.w	r1, r2, r3
 801ebaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebae:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 801ebb2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801ebb6:	6013      	str	r3, [r2, #0]
 801ebb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebbc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801ebc0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ebc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801ebca:	681a      	ldr	r2, [r3, #0]
 801ebcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801ebd4:	681b      	ldr	r3, [r3, #0]
 801ebd6:	fa22 f283 	sxtab16	r2, r2, r3
 801ebda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebde:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801ebe2:	601a      	str	r2, [r3, #0]
  return(result);
 801ebe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebe8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801ebf2:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801ebf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ebfa:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801ebfe:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801ec02:	6013      	str	r3, [r2, #0]
 801ec04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801ec0c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ec0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec12:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801ec16:	681a      	ldr	r2, [r3, #0]
 801ec18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	fa22 f283 	sxtab16	r2, r2, r3
 801ec26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801ec2e:	601a      	str	r2, [r3, #0]
  return(result);
 801ec30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801ec38:	681b      	ldr	r3, [r3, #0]
 801ec3a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801ec3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec42:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801ec46:	681a      	ldr	r2, [r3, #0]
 801ec48:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801ec4c:	441a      	add	r2, r3
 801ec4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec52:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801ec56:	601a      	str	r2, [r3, #0]
 801ec58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec5c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	681b      	ldr	r3, [r3, #0]
 801ec64:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ec66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec6a:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801ec6e:	601a      	str	r2, [r3, #0]
    return (val);
 801ec70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec74:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801ec7e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801ec82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801ec8a:	601a      	str	r2, [r3, #0]
 801ec8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec90:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801ec94:	2308      	movs	r3, #8
 801ec96:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ec98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec9c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801eca0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eca4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801eca8:	681b      	ldr	r3, [r3, #0]
 801ecaa:	f003 031f 	and.w	r3, r3, #31
 801ecae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ecb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecb4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	d105      	bne.n	801ecca <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 801ecbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecc2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801ecc6:	6819      	ldr	r1, [r3, #0]
 801ecc8:	e00b      	b.n	801ece2 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ecca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecce:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 801ecd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecd6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ecda:	6812      	ldr	r2, [r2, #0]
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	fa62 f103 	ror.w	r1, r2, r3
 801ece2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ece6:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801ecea:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801ecee:	6013      	str	r3, [r2, #0]
 801ecf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecf4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801ecf8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ecfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecfe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801ed02:	681a      	ldr	r2, [r3, #0]
 801ed04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	fa22 f283 	sxtab16	r2, r2, r3
 801ed12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801ed1a:	601a      	str	r2, [r3, #0]
  return(result);
 801ed1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed20:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801ed2a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801ed2e:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801ed32:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801ed36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed3a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801ed3e:	601a      	str	r2, [r3, #0]
 801ed40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801ed48:	6019      	str	r1, [r3, #0]
 801ed4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed4e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801ed52:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ed54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801ed5c:	6819      	ldr	r1, [r3, #0]
 801ed5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed62:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801ed66:	681a      	ldr	r2, [r3, #0]
 801ed68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801ed70:	681b      	ldr	r3, [r3, #0]
 801ed72:	fb21 3202 	smlad	r2, r1, r2, r3
 801ed76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed7a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801ed7e:	601a      	str	r2, [r3, #0]
  return(result);
 801ed80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801ed8e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801ed92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed96:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801ed9a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801ed9e:	6013      	str	r3, [r2, #0]
 801eda0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eda4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801eda8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801edaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801edb2:	681a      	ldr	r2, [r3, #0]
 801edb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	fa22 f283 	sxtab16	r2, r2, r3
 801edc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edc6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801edca:	601a      	str	r2, [r3, #0]
  return(result);
 801edcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edd0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801edda:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801edde:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801ede2:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801ede6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801edee:	601a      	str	r2, [r3, #0]
 801edf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edf4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801edf8:	6019      	str	r1, [r3, #0]
 801edfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edfe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801ee02:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ee04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee08:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801ee0c:	6819      	ldr	r1, [r3, #0]
 801ee0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee12:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801ee16:	681a      	ldr	r2, [r3, #0]
 801ee18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee1c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801ee20:	681b      	ldr	r3, [r3, #0]
 801ee22:	fb21 3202 	smlad	r2, r1, r2, r3
 801ee26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee2a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801ee2e:	601a      	str	r2, [r3, #0]
  return(result);
 801ee30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801ee3e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801ee42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee46:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801ee4a:	601a      	str	r2, [r3, #0]
 801ee4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee50:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801ee54:	2308      	movs	r3, #8
 801ee56:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ee58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee5c:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801ee60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee64:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	f003 031f 	and.w	r3, r3, #31
 801ee6e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ee70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee74:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	d105      	bne.n	801ee8a <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 801ee7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee82:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801ee86:	6819      	ldr	r1, [r3, #0]
 801ee88:	e00b      	b.n	801eea2 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee8e:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801ee92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee96:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801ee9a:	6812      	ldr	r2, [r2, #0]
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	fa62 f103 	ror.w	r1, r2, r3
 801eea2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eea6:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 801eeaa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801eeae:	6013      	str	r3, [r2, #0]
 801eeb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eeb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801eeb8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801eeba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eebe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801eec2:	681a      	ldr	r2, [r3, #0]
 801eec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eec8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801eecc:	681b      	ldr	r3, [r3, #0]
 801eece:	fa22 f283 	sxtab16	r2, r2, r3
 801eed2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eed6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801eeda:	601a      	str	r2, [r3, #0]
  return(result);
 801eedc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eee0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801eeea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eeee:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801eef2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801eef6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801eef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eefc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801ef00:	681b      	ldr	r3, [r3, #0]
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	461a      	mov	r2, r3
 801ef08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef0c:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801ef10:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ef12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef16:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	1d1a      	adds	r2, r3, #4
 801ef20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801ef28:	681b      	ldr	r3, [r3, #0]
 801ef2a:	601a      	str	r2, [r3, #0]
    return (val);
 801ef2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef30:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801ef34:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ef36:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801ef3a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801ef3e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 801ef42:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801ef46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801ef4e:	601a      	str	r2, [r3, #0]
 801ef50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801ef58:	6019      	str	r1, [r3, #0]
 801ef5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef5e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801ef62:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ef64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef68:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801ef6c:	6819      	ldr	r1, [r3, #0]
 801ef6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef72:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801ef76:	681a      	ldr	r2, [r3, #0]
 801ef78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	fb21 3202 	smlad	r2, r1, r2, r3
 801ef86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801ef8e:	601a      	str	r2, [r3, #0]
  return(result);
 801ef90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef94:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801ef9e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801efa2:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801efa6:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801efaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801efb2:	601a      	str	r2, [r3, #0]
 801efb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801efbc:	6019      	str	r1, [r3, #0]
 801efbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801efc6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801efc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801efd0:	6819      	ldr	r1, [r3, #0]
 801efd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801efda:	681a      	ldr	r2, [r3, #0]
 801efdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	fb21 3202 	smlad	r2, r1, r2, r3
 801efea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801eff2:	601a      	str	r2, [r3, #0]
  return(result);
 801eff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eff8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801f002:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801f006:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f00a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801f00e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f012:	6013      	str	r3, [r2, #0]
 801f014:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f018:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801f01c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f01e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f022:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801f026:	681a      	ldr	r2, [r3, #0]
 801f028:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f02c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	fa22 f283 	sxtab16	r2, r2, r3
 801f036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f03a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801f03e:	601a      	str	r2, [r3, #0]
  return(result);
 801f040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f044:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801f04e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f052:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 801f056:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f05a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f05c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f060:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	461a      	mov	r2, r3
 801f06c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f070:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801f074:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f076:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f07a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	681b      	ldr	r3, [r3, #0]
 801f082:	1d1a      	adds	r2, r3, #4
 801f084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f088:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	601a      	str	r2, [r3, #0]
    return (val);
 801f090:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f094:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801f098:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801f09a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801f09e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801f0a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801f0aa:	601a      	str	r2, [r3, #0]
 801f0ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0b0:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801f0b4:	2308      	movs	r3, #8
 801f0b6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f0b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0bc:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801f0c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	f003 031f 	and.w	r3, r3, #31
 801f0ce:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f0d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801f0d8:	681b      	ldr	r3, [r3, #0]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d105      	bne.n	801f0ea <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 801f0de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801f0e6:	6819      	ldr	r1, [r3, #0]
 801f0e8:	e00b      	b.n	801f102 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f0ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0ee:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801f0f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801f0fa:	6812      	ldr	r2, [r2, #0]
 801f0fc:	681b      	ldr	r3, [r3, #0]
 801f0fe:	fa62 f103 	ror.w	r1, r2, r3
 801f102:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f106:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 801f10a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f10e:	6013      	str	r3, [r2, #0]
 801f110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801f118:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f11a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f11e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801f122:	681a      	ldr	r2, [r3, #0]
 801f124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	fa22 f283 	sxtab16	r2, r2, r3
 801f132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f136:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801f13a:	601a      	str	r2, [r3, #0]
  return(result);
 801f13c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f140:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801f14a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801f14e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801f152:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 801f156:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f15a:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 801f15e:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 801f162:	fa22 f283 	sxtab16	r2, r2, r3
 801f166:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f16a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801f16e:	601a      	str	r2, [r3, #0]
  return(result);
 801f170:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f174:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801f178:	681b      	ldr	r3, [r3, #0]
 801f17a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801f17e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f182:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801f186:	681a      	ldr	r2, [r3, #0]
 801f188:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801f18c:	4413      	add	r3, r2
 801f18e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 801f192:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f19a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f19e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801f1a2:	601a      	str	r2, [r3, #0]
    return (val);
 801f1a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1a8:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801f1b2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 801f1b6:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 801f1ba:	2308      	movs	r3, #8
 801f1bc:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 801f1c0:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801f1c4:	f003 031f 	and.w	r3, r3, #31
 801f1c8:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 801f1cc:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d102      	bne.n	801f1da <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 801f1d4:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801f1d8:	e004      	b.n	801f1e4 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f1da:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801f1de:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801f1e2:	41da      	rors	r2, r3
 801f1e4:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801f1e8:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 801f1ec:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f1f0:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 801f1f4:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 801f1f8:	fa22 f383 	sxtab16	r3, r2, r3
 801f1fc:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 801f200:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 801f204:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801f208:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 801f20c:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 801f210:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801f214:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 801f218:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 801f21c:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f220:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 801f224:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 801f228:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 801f22c:	fb21 3302 	smlad	r3, r1, r2, r3
 801f230:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 801f234:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 801f238:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801f23c:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801f240:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f244:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801f248:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f24c:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801f250:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 801f254:	fa22 f383 	sxtab16	r3, r2, r3
 801f258:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 801f25c:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 801f260:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801f264:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801f268:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801f26c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801f270:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 801f274:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801f278:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f27c:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 801f280:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801f284:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801f288:	fb21 3302 	smlad	r3, r1, r2, r3
 801f28c:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 801f290:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801f294:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801f298:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 801f29c:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801f2a0:	2308      	movs	r3, #8
 801f2a2:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 801f2a6:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 801f2aa:	f003 031f 	and.w	r3, r3, #31
 801f2ae:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 801f2b2:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d102      	bne.n	801f2c0 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 801f2ba:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 801f2be:	e004      	b.n	801f2ca <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f2c0:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 801f2c4:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 801f2c8:	41da      	rors	r2, r3
 801f2ca:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f2ce:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 801f2d2:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f2d6:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 801f2da:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 801f2de:	fa22 f383 	sxtab16	r3, r2, r3
 801f2e2:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 801f2e6:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 801f2ea:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 801f2ee:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 801f2f2:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 801f2f6:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 801f2fa:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 801f2fe:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 801f302:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f306:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 801f30a:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 801f30e:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 801f312:	fb21 3302 	smlad	r3, r1, r2, r3
 801f316:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 801f31a:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 801f31e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801f322:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801f326:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801f32a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 801f32e:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 801f332:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 801f336:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f33a:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 801f33e:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 801f342:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 801f346:	fb21 3302 	smlad	r3, r1, r2, r3
 801f34a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 801f34e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 801f352:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801f356:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 801f35a:	3310      	adds	r3, #16
 801f35c:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 801f360:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801f364:	f1a3 020f 	sub.w	r2, r3, #15
 801f368:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 801f36c:	4293      	cmp	r3, r2
 801f36e:	f6fe ae1c 	blt.w	801dfaa <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f372:	e05a      	b.n	801f42a <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 801f374:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f378:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	f993 3000 	ldrsb.w	r3, [r3]
 801f382:	461a      	mov	r2, r3
 801f384:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801f388:	4413      	add	r3, r2
 801f38a:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 801f38e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f392:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801f396:	681a      	ldr	r2, [r3, #0]
 801f398:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801f39c:	4413      	add	r3, r2
 801f39e:	f993 3000 	ldrsb.w	r3, [r3]
 801f3a2:	461a      	mov	r2, r3
 801f3a4:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801f3a8:	4413      	add	r3, r2
 801f3aa:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 801f3ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3b2:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	f993 3000 	ldrsb.w	r3, [r3]
 801f3bc:	461a      	mov	r2, r3
 801f3be:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801f3c2:	4413      	add	r3, r2
 801f3c4:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 801f3c8:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 801f3cc:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 801f3d0:	fb03 f202 	mul.w	r2, r3, r2
 801f3d4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801f3d8:	4413      	add	r3, r2
 801f3da:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 801f3de:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 801f3e2:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 801f3e6:	fb03 f202 	mul.w	r2, r3, r2
 801f3ea:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 801f3ee:	4413      	add	r3, r2
 801f3f0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 801f3f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3f8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	1c5a      	adds	r2, r3, #1
 801f400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f404:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801f408:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 801f40a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f40e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801f412:	681b      	ldr	r3, [r3, #0]
 801f414:	1c5a      	adds	r2, r3, #1
 801f416:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f41a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801f41e:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801f420:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 801f424:	3301      	adds	r3, #1
 801f426:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 801f42a:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 801f42e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801f432:	429a      	cmp	r2, r3
 801f434:	db9e      	blt.n	801f374 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 801f436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f43a:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801f43e:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801f442:	6013      	str	r3, [r2, #0]
 801f444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f448:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 801f44c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 801f450:	6013      	str	r3, [r2, #0]
 801f452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f456:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 801f45a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 801f45e:	6013      	str	r3, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f460:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f464:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801f468:	681b      	ldr	r3, [r3, #0]
 801f46a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f46e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f472:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801f476:	681b      	ldr	r3, [r3, #0]
 801f478:	fa03 f202 	lsl.w	r2, r3, r2
 801f47c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f480:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801f484:	601a      	str	r2, [r3, #0]
 801f486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f48a:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801f48e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f492:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f49a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f49e:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 801f4a2:	2300      	movs	r3, #0
 801f4a4:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f4a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f4aa:	461a      	mov	r2, r3
 801f4ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f4b0:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801f4b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f4b6:	461a      	mov	r2, r3
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f4bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f4c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f4c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4c8:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	17da      	asrs	r2, r3, #31
 801f4d0:	633b      	str	r3, [r7, #48]	; 0x30
 801f4d2:	637a      	str	r2, [r7, #52]	; 0x34
 801f4d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4d8:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801f4dc:	681b      	ldr	r3, [r3, #0]
 801f4de:	17da      	asrs	r2, r3, #31
 801f4e0:	62bb      	str	r3, [r7, #40]	; 0x28
 801f4e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f4e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f4e8:	fb02 f203 	mul.w	r2, r2, r3
 801f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4ee:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801f4f0:	fb04 f303 	mul.w	r3, r4, r3
 801f4f4:	4413      	add	r3, r2
 801f4f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f4f8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801f4fa:	fba2 5604 	umull	r5, r6, r2, r4
 801f4fe:	4433      	add	r3, r6
 801f500:	461e      	mov	r6, r3
 801f502:	1943      	adds	r3, r0, r5
 801f504:	61bb      	str	r3, [r7, #24]
 801f506:	eb41 0306 	adc.w	r3, r1, r6
 801f50a:	61fb      	str	r3, [r7, #28]
 801f50c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f510:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f514:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801f518:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f520:	f04f 0000 	mov.w	r0, #0
 801f524:	f04f 0100 	mov.w	r1, #0
 801f528:	0fd0      	lsrs	r0, r2, #31
 801f52a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f52e:	17d9      	asrs	r1, r3, #31
 801f530:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f534:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 801f538:	4603      	mov	r3, r0
 801f53a:	6013      	str	r3, [r2, #0]
    return result;
 801f53c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f540:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 801f544:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f546:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f54a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801f54e:	681b      	ldr	r3, [r3, #0]
 801f550:	2b00      	cmp	r3, #0
 801f552:	dc06      	bgt.n	801f562 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 801f554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f558:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	425a      	negs	r2, r3
 801f560:	e000      	b.n	801f564 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 801f562:	2200      	movs	r2, #0
 801f564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f568:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801f56c:	6019      	str	r1, [r3, #0]
 801f56e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f572:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801f576:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f578:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f57c:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801f580:	2300      	movs	r3, #0
 801f582:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f588:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801f58c:	2201      	movs	r2, #1
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	fa02 f103 	lsl.w	r1, r2, r3
 801f594:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f598:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 801f59c:	1e4b      	subs	r3, r1, #1
 801f59e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f5a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5a4:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 801f5a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5ac:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 801f5b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5b4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801f5b8:	6812      	ldr	r2, [r2, #0]
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	4013      	ands	r3, r2
 801f5be:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f5c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5c4:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 801f5c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5cc:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 801f5d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5d4:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801f5d8:	6812      	ldr	r2, [r2, #0]
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	fa42 f303 	asr.w	r3, r2, r3
 801f5e0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f5e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5e6:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 801f5ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5ee:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801f5f2:	681b      	ldr	r3, [r3, #0]
 801f5f4:	105b      	asrs	r3, r3, #1
 801f5f6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f5f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5fc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	2b00      	cmp	r3, #0
 801f604:	da0a      	bge.n	801f61c <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 801f606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f60a:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 801f60e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f612:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	3301      	adds	r3, #1
 801f61a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f61c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f620:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 801f624:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f628:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801f62c:	6812      	ldr	r2, [r2, #0]
 801f62e:	681b      	ldr	r3, [r3, #0]
 801f630:	429a      	cmp	r2, r3
 801f632:	dd0a      	ble.n	801f64a <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 801f634:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f638:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801f63c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f640:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801f644:	681b      	ldr	r3, [r3, #0]
 801f646:	3301      	adds	r3, #1
 801f648:	6013      	str	r3, [r2, #0]
    return result;
 801f64a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f64e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801f652:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f654:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 801f656:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 801f65a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f65e:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 801f662:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 801f666:	6013      	str	r3, [r2, #0]
 801f668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f66c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801f670:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 801f674:	6013      	str	r3, [r2, #0]
 801f676:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f67a:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801f67e:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 801f682:	6013      	str	r3, [r2, #0]
 801f684:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f688:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801f692:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f696:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	fa03 f202 	lsl.w	r2, r3, r2
 801f6a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6a4:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801f6a8:	601a      	str	r2, [r3, #0]
 801f6aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6ae:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 801f6b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6b6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801f6ba:	681b      	ldr	r3, [r3, #0]
 801f6bc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801f6be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6c2:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 801f6c6:	2300      	movs	r3, #0
 801f6c8:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801f6ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f6ce:	461a      	mov	r2, r3
 801f6d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f6d4:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801f6d8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f6dc:	461a      	mov	r2, r3
 801f6de:	2300      	movs	r3, #0
 801f6e0:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801f6e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f6e8:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801f6ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6f0:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	17da      	asrs	r2, r3, #31
 801f6f8:	643b      	str	r3, [r7, #64]	; 0x40
 801f6fa:	647a      	str	r2, [r7, #68]	; 0x44
 801f6fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f700:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	17da      	asrs	r2, r3, #31
 801f708:	63bb      	str	r3, [r7, #56]	; 0x38
 801f70a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801f70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f70e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f710:	fb02 f203 	mul.w	r2, r2, r3
 801f714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f716:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f718:	fb04 f303 	mul.w	r3, r4, r3
 801f71c:	4413      	add	r3, r2
 801f71e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f720:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 801f722:	fba2 ab04 	umull	sl, fp, r2, r4
 801f726:	445b      	add	r3, fp
 801f728:	469b      	mov	fp, r3
 801f72a:	eb10 030a 	adds.w	r3, r0, sl
 801f72e:	623b      	str	r3, [r7, #32]
 801f730:	eb41 030b 	adc.w	r3, r1, fp
 801f734:	627b      	str	r3, [r7, #36]	; 0x24
 801f736:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f73a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f73e:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801f742:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f746:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f74a:	f04f 0000 	mov.w	r0, #0
 801f74e:	f04f 0100 	mov.w	r1, #0
 801f752:	0fd0      	lsrs	r0, r2, #31
 801f754:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801f758:	17d9      	asrs	r1, r3, #31
 801f75a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f75e:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 801f762:	4603      	mov	r3, r0
 801f764:	6013      	str	r3, [r2, #0]
    return result;
 801f766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f76a:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 801f76e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f774:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	dc06      	bgt.n	801f78c <arm_nn_vec_mat_mult_t_s8+0x190c>
 801f77e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f782:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	425a      	negs	r2, r3
 801f78a:	e000      	b.n	801f78e <arm_nn_vec_mat_mult_t_s8+0x190e>
 801f78c:	2200      	movs	r2, #0
 801f78e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f792:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801f796:	6019      	str	r1, [r3, #0]
 801f798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f79c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801f7a0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801f7a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7a6:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801f7aa:	2300      	movs	r3, #0
 801f7ac:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801f7ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7b2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801f7b6:	2201      	movs	r2, #1
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	fa02 f103 	lsl.w	r1, r2, r3
 801f7be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7c2:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 801f7c6:	1e4b      	subs	r3, r1, #1
 801f7c8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801f7ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7ce:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 801f7d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7d6:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 801f7da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7de:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801f7e2:	6812      	ldr	r2, [r2, #0]
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	4013      	ands	r3, r2
 801f7e8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801f7ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7ee:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 801f7f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7f6:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 801f7fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7fe:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801f802:	6812      	ldr	r2, [r2, #0]
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	fa42 f303 	asr.w	r3, r2, r3
 801f80a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801f80c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f810:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801f814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f818:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	105b      	asrs	r3, r3, #1
 801f820:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801f822:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f826:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	da0a      	bge.n	801f846 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 801f830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f834:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801f838:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f83c:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	3301      	adds	r3, #1
 801f844:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801f846:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f84a:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 801f84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f852:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801f856:	6812      	ldr	r2, [r2, #0]
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	429a      	cmp	r2, r3
 801f85c:	dd0a      	ble.n	801f874 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 801f85e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f862:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801f866:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f86a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801f86e:	681b      	ldr	r3, [r3, #0]
 801f870:	3301      	adds	r3, #1
 801f872:	6013      	str	r3, [r2, #0]
    return result;
 801f874:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f878:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801f87c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801f87e:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 801f880:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 801f884:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 801f888:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 801f88c:	4413      	add	r3, r2
 801f88e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 801f892:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 801f896:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 801f89a:	4413      	add	r3, r2
 801f89c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 801f8a0:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 801f8a4:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 801f8a8:	4293      	cmp	r3, r2
 801f8aa:	bfb8      	it	lt
 801f8ac:	4613      	movlt	r3, r2
 801f8ae:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 801f8b2:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 801f8b6:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 801f8ba:	4293      	cmp	r3, r2
 801f8bc:	bfa8      	it	ge
 801f8be:	4613      	movge	r3, r2
 801f8c0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 801f8c4:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 801f8c8:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 801f8cc:	4293      	cmp	r3, r2
 801f8ce:	bfb8      	it	lt
 801f8d0:	4613      	movlt	r3, r2
 801f8d2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 801f8d6:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 801f8da:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 801f8de:	4293      	cmp	r3, r2
 801f8e0:	bfa8      	it	ge
 801f8e2:	4613      	movge	r3, r2
 801f8e4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 801f8e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8ec:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801f8f0:	6819      	ldr	r1, [r3, #0]
 801f8f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8f6:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 801f8fa:	1c4b      	adds	r3, r1, #1
 801f8fc:	6013      	str	r3, [r2, #0]
 801f8fe:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801f902:	b25b      	sxtb	r3, r3
 801f904:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 801f906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f90a:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801f90e:	6819      	ldr	r1, [r3, #0]
 801f910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f914:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 801f918:	1c4b      	adds	r3, r1, #1
 801f91a:	6013      	str	r3, [r2, #0]
 801f91c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 801f920:	b25b      	sxtb	r3, r3
 801f922:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 801f924:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801f928:	005b      	lsls	r3, r3, #1
 801f92a:	4619      	mov	r1, r3
 801f92c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f930:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 801f934:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f938:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	440b      	add	r3, r1
 801f940:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801f942:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 801f946:	3302      	adds	r3, #2
 801f948:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 801f94c:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 801f950:	1e5a      	subs	r2, r3, #1
 801f952:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 801f956:	4293      	cmp	r3, r2
 801f958:	f6fe aae5 	blt.w	801df26 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 801f95c:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 801f960:	f003 0301 	and.w	r3, r3, #1
 801f964:	2b00      	cmp	r3, #0
 801f966:	f001 806e 	beq.w	8020a46 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801f96a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f96e:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801f972:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801f976:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 801f97a:	6812      	ldr	r2, [r2, #0]
 801f97c:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 801f97e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f982:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801f986:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801f98a:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 801f98e:	6812      	ldr	r2, [r2, #0]
 801f990:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 801f992:	2300      	movs	r3, #0
 801f994:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 801f998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f99c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	d00d      	beq.n	801f9c2 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 801f9a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9aa:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801f9b4:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 801f9b8:	1d19      	adds	r1, r3, #4
 801f9ba:	6011      	str	r1, [r2, #0]
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 801f9c2:	2300      	movs	r3, #0
 801f9c4:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801f9c8:	f000 beb5 	b.w	8020736 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 801f9cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9d0:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801f9d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801f9d8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801f9da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9de:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	681b      	ldr	r3, [r3, #0]
 801f9e6:	681b      	ldr	r3, [r3, #0]
 801f9e8:	461a      	mov	r2, r3
 801f9ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9ee:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801f9f2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f9f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9f8:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801f9fc:	681b      	ldr	r3, [r3, #0]
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	1d1a      	adds	r2, r3, #4
 801fa02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa06:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	601a      	str	r2, [r3, #0]
    return (val);
 801fa0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa12:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801fa16:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fa18:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 801fa1c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801fa20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa24:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801fa28:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801fa2c:	6019      	str	r1, [r3, #0]
 801fa2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa32:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801fa36:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fa38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa3c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fa46:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 801fa4a:	6812      	ldr	r2, [r2, #0]
 801fa4c:	fa23 f282 	sxtab16	r2, r3, r2
 801fa50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa54:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 801fa58:	601a      	str	r2, [r3, #0]
  return(result);
 801fa5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa5e:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 801fa68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa6c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801fa70:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801fa74:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801fa76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa7a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	681b      	ldr	r3, [r3, #0]
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	461a      	mov	r2, r3
 801fa86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa8a:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801fa8e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fa90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa94:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	1d1a      	adds	r2, r3, #4
 801fa9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801faa2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	601a      	str	r2, [r3, #0]
    return (val);
 801faaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801faae:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801fab2:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fab4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801fab8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801fabc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fac0:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801fac4:	601a      	str	r2, [r3, #0]
 801fac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801faca:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801face:	2208      	movs	r2, #8
 801fad0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801fad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fad6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801fada:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fade:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 801fae2:	6812      	ldr	r2, [r2, #0]
 801fae4:	f002 021f 	and.w	r2, r2, #31
 801fae8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801faea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801faee:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d105      	bne.n	801fb04 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 801faf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fafc:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	e00b      	b.n	801fb1c <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fb04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb08:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 801fb0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb10:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801fb14:	6812      	ldr	r2, [r2, #0]
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	fa62 f303 	ror.w	r3, r2, r3
 801fb1c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fb20:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 801fb24:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801fb28:	6011      	str	r1, [r2, #0]
 801fb2a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fb2e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 801fb32:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fb34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb38:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fb42:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 801fb46:	6812      	ldr	r2, [r2, #0]
 801fb48:	fa23 f282 	sxtab16	r2, r3, r2
 801fb4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb50:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801fb54:	601a      	str	r2, [r3, #0]
  return(result);
 801fb56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb5a:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 801fb64:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801fb68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb6c:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801fb70:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801fb74:	6019      	str	r1, [r3, #0]
 801fb76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb7a:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801fb7e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fb80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb84:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fb8e:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 801fb92:	6812      	ldr	r2, [r2, #0]
 801fb94:	fa23 f282 	sxtab16	r2, r3, r2
 801fb98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb9c:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801fba0:	601a      	str	r2, [r3, #0]
  return(result);
 801fba2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fba6:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801fbb0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801fbb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbb8:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801fbbc:	601a      	str	r2, [r3, #0]
 801fbbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbc2:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801fbc6:	2208      	movs	r2, #8
 801fbc8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801fbca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbce:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801fbd2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fbd6:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 801fbda:	6812      	ldr	r2, [r2, #0]
 801fbdc:	f002 021f 	and.w	r2, r2, #31
 801fbe0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801fbe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbe6:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d105      	bne.n	801fbfc <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 801fbf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbf4:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	e00b      	b.n	801fc14 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fbfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc00:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 801fc04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc08:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801fc0c:	6812      	ldr	r2, [r2, #0]
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	fa62 f303 	ror.w	r3, r2, r3
 801fc14:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fc18:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 801fc1c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801fc20:	6011      	str	r1, [r2, #0]
 801fc22:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fc26:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 801fc2a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fc2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc30:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fc3a:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 801fc3e:	6812      	ldr	r2, [r2, #0]
 801fc40:	fa23 f282 	sxtab16	r2, r3, r2
 801fc44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc48:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801fc4c:	601a      	str	r2, [r3, #0]
  return(result);
 801fc4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc52:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 801fc5c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 801fc60:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 801fc64:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801fc68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc6c:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801fc70:	6018      	str	r0, [r3, #0]
 801fc72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc76:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 801fc7a:	6019      	str	r1, [r3, #0]
 801fc7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc80:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 801fc84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fc86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc8a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801fc8e:	681b      	ldr	r3, [r3, #0]
 801fc90:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fc94:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 801fc98:	6812      	ldr	r2, [r2, #0]
 801fc9a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801fc9e:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 801fca2:	6809      	ldr	r1, [r1, #0]
 801fca4:	fb23 1202 	smlad	r2, r3, r2, r1
 801fca8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcac:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 801fcb0:	601a      	str	r2, [r3, #0]
  return(result);
 801fcb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcb6:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 801fcc0:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 801fcc4:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801fcc8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801fccc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcd0:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801fcd4:	6018      	str	r0, [r3, #0]
 801fcd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcda:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 801fcde:	6019      	str	r1, [r3, #0]
 801fce0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fce4:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801fce8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fcea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcee:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fcf8:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 801fcfc:	6812      	ldr	r2, [r2, #0]
 801fcfe:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801fd02:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 801fd06:	6809      	ldr	r1, [r1, #0]
 801fd08:	fb23 1202 	smlad	r2, r3, r2, r1
 801fd0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd10:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801fd14:	601a      	str	r2, [r3, #0]
  return(result);
 801fd16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd1a:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 801fd24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd28:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801fd2c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801fd30:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801fd32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd36:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	681b      	ldr	r3, [r3, #0]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	461a      	mov	r2, r3
 801fd42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd46:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801fd4a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fd4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd50:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	1d1a      	adds	r2, r3, #4
 801fd5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd5e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801fd62:	681b      	ldr	r3, [r3, #0]
 801fd64:	601a      	str	r2, [r3, #0]
    return (val);
 801fd66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd6a:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801fd6e:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fd70:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 801fd74:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801fd78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd7c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801fd80:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801fd84:	6019      	str	r1, [r3, #0]
 801fd86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd8a:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801fd8e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fd90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd94:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801fd98:	681b      	ldr	r3, [r3, #0]
 801fd9a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fd9e:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 801fda2:	6812      	ldr	r2, [r2, #0]
 801fda4:	fa23 f282 	sxtab16	r2, r3, r2
 801fda8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdac:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801fdb0:	601a      	str	r2, [r3, #0]
  return(result);
 801fdb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdb6:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801fdba:	681b      	ldr	r3, [r3, #0]
 801fdbc:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 801fdc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdc4:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801fdc8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801fdcc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801fdce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdd2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	461a      	mov	r2, r3
 801fdde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fde2:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801fde6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fde8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdec:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801fdf0:	681b      	ldr	r3, [r3, #0]
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	1d1a      	adds	r2, r3, #4
 801fdf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdfa:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	601a      	str	r2, [r3, #0]
    return (val);
 801fe02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe06:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801fe0a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fe0c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801fe10:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801fe14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe18:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801fe1c:	601a      	str	r2, [r3, #0]
 801fe1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe22:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801fe26:	2208      	movs	r2, #8
 801fe28:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801fe2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe2e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801fe32:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fe36:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 801fe3a:	6812      	ldr	r2, [r2, #0]
 801fe3c:	f002 021f 	and.w	r2, r2, #31
 801fe40:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801fe42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe46:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d105      	bne.n	801fe5c <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 801fe50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe54:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	e00b      	b.n	801fe74 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fe5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe60:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 801fe64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe68:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801fe6c:	6812      	ldr	r2, [r2, #0]
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	fa62 f303 	ror.w	r3, r2, r3
 801fe74:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fe78:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 801fe7c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801fe80:	6011      	str	r1, [r2, #0]
 801fe82:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fe86:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 801fe8a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fe8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe90:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fe9a:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 801fe9e:	6812      	ldr	r2, [r2, #0]
 801fea0:	fa23 f282 	sxtab16	r2, r3, r2
 801fea4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fea8:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801feac:	601a      	str	r2, [r3, #0]
  return(result);
 801feae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801feb2:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 801febc:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801fec0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fec4:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801fec8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801fecc:	6019      	str	r1, [r3, #0]
 801fece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fed2:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 801fed6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fedc:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801fee6:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 801feea:	6812      	ldr	r2, [r2, #0]
 801feec:	fa23 f282 	sxtab16	r2, r3, r2
 801fef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fef4:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801fef8:	601a      	str	r2, [r3, #0]
  return(result);
 801fefa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fefe:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801ff08:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801ff0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff10:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801ff14:	601a      	str	r2, [r3, #0]
 801ff16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff1a:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801ff1e:	2208      	movs	r2, #8
 801ff20:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801ff22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff26:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801ff2a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801ff2e:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 801ff32:	6812      	ldr	r2, [r2, #0]
 801ff34:	f002 021f 	and.w	r2, r2, #31
 801ff38:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801ff3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff3e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d105      	bne.n	801ff54 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 801ff48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff4c:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	e00b      	b.n	801ff6c <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ff54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff58:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 801ff5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff60:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801ff64:	6812      	ldr	r2, [r2, #0]
 801ff66:	681b      	ldr	r3, [r3, #0]
 801ff68:	fa62 f303 	ror.w	r3, r2, r3
 801ff6c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801ff70:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 801ff74:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801ff78:	6011      	str	r1, [r2, #0]
 801ff7a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801ff7e:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 801ff82:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ff84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff88:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801ff92:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 801ff96:	6812      	ldr	r2, [r2, #0]
 801ff98:	fa23 f282 	sxtab16	r2, r3, r2
 801ff9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ffa0:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801ffa4:	601a      	str	r2, [r3, #0]
  return(result);
 801ffa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ffaa:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 801ffb4:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 801ffb8:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 801ffbc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801ffc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ffc4:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801ffc8:	6018      	str	r0, [r3, #0]
 801ffca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ffce:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 801ffd2:	6019      	str	r1, [r3, #0]
 801ffd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ffd8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 801ffdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ffde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ffe2:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801ffec:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 801fff0:	6812      	ldr	r2, [r2, #0]
 801fff2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801fff6:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 801fffa:	6809      	ldr	r1, [r1, #0]
 801fffc:	fb23 1202 	smlad	r2, r3, r2, r1
 8020000:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020004:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8020008:	601a      	str	r2, [r3, #0]
  return(result);
 802000a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802000e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8020012:	681b      	ldr	r3, [r3, #0]
 8020014:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8020018:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 802001c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8020020:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020024:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020028:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 802002c:	6018      	str	r0, [r3, #0]
 802002e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020032:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8020036:	6019      	str	r1, [r3, #0]
 8020038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802003c:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8020040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020042:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020046:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 802004a:	681b      	ldr	r3, [r3, #0]
 802004c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020050:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8020054:	6812      	ldr	r2, [r2, #0]
 8020056:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 802005a:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 802005e:	6809      	ldr	r1, [r1, #0]
 8020060:	fb23 1202 	smlad	r2, r3, r2, r1
 8020064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020068:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 802006c:	601a      	str	r2, [r3, #0]
  return(result);
 802006e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020072:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 802007c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020080:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8020084:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020088:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 802008a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802008e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	681b      	ldr	r3, [r3, #0]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	461a      	mov	r2, r3
 802009a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802009e:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 80200a2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80200a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200a8:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	681b      	ldr	r3, [r3, #0]
 80200b0:	1d1a      	adds	r2, r3, #4
 80200b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200b6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80200ba:	681b      	ldr	r3, [r3, #0]
 80200bc:	601a      	str	r2, [r3, #0]
    return (val);
 80200be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200c2:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 80200c6:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80200c8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80200cc:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80200d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200d4:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80200d8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80200dc:	6019      	str	r1, [r3, #0]
 80200de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200e2:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 80200e6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80200e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200ec:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80200f6:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 80200fa:	6812      	ldr	r2, [r2, #0]
 80200fc:	fa23 f282 	sxtab16	r2, r3, r2
 8020100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020104:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8020108:	601a      	str	r2, [r3, #0]
  return(result);
 802010a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802010e:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8020118:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802011c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8020120:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8020124:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8020126:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802012a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	461a      	mov	r2, r3
 8020136:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802013a:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 802013e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020140:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020144:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	1d1a      	adds	r2, r3, #4
 802014e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020152:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	601a      	str	r2, [r3, #0]
    return (val);
 802015a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802015e:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8020162:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8020164:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8020168:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 802016c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020170:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8020174:	601a      	str	r2, [r3, #0]
 8020176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802017a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 802017e:	2208      	movs	r2, #8
 8020180:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8020182:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020186:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 802018a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802018e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8020192:	6812      	ldr	r2, [r2, #0]
 8020194:	f002 021f 	and.w	r2, r2, #31
 8020198:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 802019a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802019e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d105      	bne.n	80201b4 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 80201a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201ac:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	e00b      	b.n	80201cc <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80201b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201b8:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 80201bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201c0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80201c4:	6812      	ldr	r2, [r2, #0]
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	fa62 f303 	ror.w	r3, r2, r3
 80201cc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80201d0:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80201d4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80201d8:	6011      	str	r1, [r2, #0]
 80201da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80201de:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80201e2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80201e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201e8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80201f2:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80201f6:	6812      	ldr	r2, [r2, #0]
 80201f8:	fa23 f282 	sxtab16	r2, r3, r2
 80201fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020200:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8020204:	601a      	str	r2, [r3, #0]
  return(result);
 8020206:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802020a:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8020214:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8020218:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802021c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8020220:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8020224:	6019      	str	r1, [r3, #0]
 8020226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802022a:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 802022e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020230:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020234:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8020238:	681b      	ldr	r3, [r3, #0]
 802023a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802023e:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8020242:	6812      	ldr	r2, [r2, #0]
 8020244:	fa23 f282 	sxtab16	r2, r3, r2
 8020248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802024c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8020250:	601a      	str	r2, [r3, #0]
  return(result);
 8020252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020256:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 802025a:	681b      	ldr	r3, [r3, #0]
 802025c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8020260:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8020264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020268:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802026c:	601a      	str	r2, [r3, #0]
 802026e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020272:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8020276:	2208      	movs	r2, #8
 8020278:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 802027a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802027e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8020282:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020286:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 802028a:	6812      	ldr	r2, [r2, #0]
 802028c:	f002 021f 	and.w	r2, r2, #31
 8020290:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8020292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020296:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	2b00      	cmp	r3, #0
 802029e:	d105      	bne.n	80202ac <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 80202a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202a4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80202a8:	681b      	ldr	r3, [r3, #0]
 80202aa:	e00b      	b.n	80202c4 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 80202ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202b0:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 80202b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202b8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80202bc:	6812      	ldr	r2, [r2, #0]
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	fa62 f303 	ror.w	r3, r2, r3
 80202c4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80202c8:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 80202cc:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80202d0:	6011      	str	r1, [r2, #0]
 80202d2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80202d6:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 80202da:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80202dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202e0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80202e4:	681b      	ldr	r3, [r3, #0]
 80202e6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80202ea:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 80202ee:	6812      	ldr	r2, [r2, #0]
 80202f0:	fa23 f282 	sxtab16	r2, r3, r2
 80202f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202f8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80202fc:	601a      	str	r2, [r3, #0]
  return(result);
 80202fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020302:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 802030c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8020310:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8020314:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020318:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802031c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8020320:	6018      	str	r0, [r3, #0]
 8020322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020326:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 802032a:	6019      	str	r1, [r3, #0]
 802032c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020330:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8020334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020336:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802033a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020344:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8020348:	6812      	ldr	r2, [r2, #0]
 802034a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 802034e:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8020352:	6809      	ldr	r1, [r1, #0]
 8020354:	fb23 1202 	smlad	r2, r3, r2, r1
 8020358:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802035c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8020360:	601a      	str	r2, [r3, #0]
  return(result);
 8020362:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020366:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 802036a:	681b      	ldr	r3, [r3, #0]
 802036c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8020370:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8020374:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8020378:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 802037c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020380:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8020384:	6018      	str	r0, [r3, #0]
 8020386:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802038a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 802038e:	6019      	str	r1, [r3, #0]
 8020390:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020394:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8020398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802039a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802039e:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80203a2:	681b      	ldr	r3, [r3, #0]
 80203a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80203a8:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 80203ac:	6812      	ldr	r2, [r2, #0]
 80203ae:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80203b2:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80203b6:	6809      	ldr	r1, [r1, #0]
 80203b8:	fb23 1202 	smlad	r2, r3, r2, r1
 80203bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203c0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80203c4:	601a      	str	r2, [r3, #0]
  return(result);
 80203c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203ca:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80203d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203d8:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80203dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80203e0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80203e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203e6:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	461a      	mov	r2, r3
 80203f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203f6:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80203fa:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80203fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020400:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	1d1a      	adds	r2, r3, #4
 802040a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802040e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	601a      	str	r2, [r3, #0]
    return (val);
 8020416:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802041a:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 802041e:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020420:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8020424:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8020428:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802042c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8020430:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020434:	6019      	str	r1, [r3, #0]
 8020436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802043a:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 802043e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020440:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020444:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802044e:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8020452:	6812      	ldr	r2, [r2, #0]
 8020454:	fa23 f282 	sxtab16	r2, r3, r2
 8020458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802045c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8020460:	601a      	str	r2, [r3, #0]
  return(result);
 8020462:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020466:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 802046a:	681b      	ldr	r3, [r3, #0]
 802046c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8020470:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020474:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8020478:	f107 0284 	add.w	r2, r7, #132	; 0x84
 802047c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 802047e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020482:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	681b      	ldr	r3, [r3, #0]
 802048a:	681b      	ldr	r3, [r3, #0]
 802048c:	461a      	mov	r2, r3
 802048e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020492:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8020496:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020498:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802049c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	1d1a      	adds	r2, r3, #4
 80204a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204aa:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80204ae:	681b      	ldr	r3, [r3, #0]
 80204b0:	601a      	str	r2, [r3, #0]
    return (val);
 80204b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204b6:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80204ba:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80204bc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80204c0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80204c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204c8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80204cc:	601a      	str	r2, [r3, #0]
 80204ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204d2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80204d6:	2208      	movs	r2, #8
 80204d8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80204da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204de:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80204e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80204e6:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 80204ea:	6812      	ldr	r2, [r2, #0]
 80204ec:	f002 021f 	and.w	r2, r2, #31
 80204f0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80204f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204f6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	d105      	bne.n	802050c <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8020500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020504:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	e00b      	b.n	8020524 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 802050c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020510:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8020514:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020518:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 802051c:	6812      	ldr	r2, [r2, #0]
 802051e:	681b      	ldr	r3, [r3, #0]
 8020520:	fa62 f303 	ror.w	r3, r2, r3
 8020524:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020528:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 802052c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020530:	6011      	str	r1, [r2, #0]
 8020532:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020536:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 802053a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802053c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020540:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8020544:	681b      	ldr	r3, [r3, #0]
 8020546:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802054a:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 802054e:	6812      	ldr	r2, [r2, #0]
 8020550:	fa23 f282 	sxtab16	r2, r3, r2
 8020554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020558:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 802055c:	601a      	str	r2, [r3, #0]
  return(result);
 802055e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020562:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 802056c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8020570:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020574:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8020578:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 802057c:	6019      	str	r1, [r3, #0]
 802057e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020582:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8020586:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020588:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802058c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8020590:	681b      	ldr	r3, [r3, #0]
 8020592:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020596:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 802059a:	6812      	ldr	r2, [r2, #0]
 802059c:	fa23 f282 	sxtab16	r2, r3, r2
 80205a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205a4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80205a8:	601a      	str	r2, [r3, #0]
  return(result);
 80205aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205ae:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80205b2:	681b      	ldr	r3, [r3, #0]
 80205b4:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 80205b8:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80205bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205c0:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80205c4:	601a      	str	r2, [r3, #0]
 80205c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205ca:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80205ce:	2208      	movs	r2, #8
 80205d0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80205d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205d6:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80205da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80205de:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 80205e2:	6812      	ldr	r2, [r2, #0]
 80205e4:	f002 021f 	and.w	r2, r2, #31
 80205e8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80205ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205ee:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d105      	bne.n	8020604 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 80205f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205fc:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8020600:	681b      	ldr	r3, [r3, #0]
 8020602:	e00b      	b.n	802061c <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020608:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 802060c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020610:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8020614:	6812      	ldr	r2, [r2, #0]
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	fa62 f303 	ror.w	r3, r2, r3
 802061c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020620:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8020624:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8020628:	6011      	str	r1, [r2, #0]
 802062a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802062e:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8020632:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020634:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020638:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020642:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8020646:	6812      	ldr	r2, [r2, #0]
 8020648:	fa23 f282 	sxtab16	r2, r3, r2
 802064c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020650:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8020654:	601a      	str	r2, [r3, #0]
  return(result);
 8020656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802065a:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 802065e:	681b      	ldr	r3, [r3, #0]
 8020660:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8020664:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8020668:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 802066c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020674:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8020678:	6018      	str	r0, [r3, #0]
 802067a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802067e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8020682:	6019      	str	r1, [r3, #0]
 8020684:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020688:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 802068c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802068e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020692:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802069c:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 80206a0:	6812      	ldr	r2, [r2, #0]
 80206a2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80206a6:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 80206aa:	6809      	ldr	r1, [r1, #0]
 80206ac:	fb23 1202 	smlad	r2, r3, r2, r1
 80206b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206b4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80206b8:	601a      	str	r2, [r3, #0]
  return(result);
 80206ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206be:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 80206c8:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 80206cc:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80206d0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80206d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206d8:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80206dc:	6018      	str	r0, [r3, #0]
 80206de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206e2:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80206e6:	6019      	str	r1, [r3, #0]
 80206e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206ec:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80206f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80206f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206f6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80206fa:	681b      	ldr	r3, [r3, #0]
 80206fc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020700:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 8020704:	6812      	ldr	r2, [r2, #0]
 8020706:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 802070a:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 802070e:	6809      	ldr	r1, [r1, #0]
 8020710:	fb23 1202 	smlad	r2, r3, r2, r1
 8020714:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020718:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 802071c:	601a      	str	r2, [r3, #0]
  return(result);
 802071e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020722:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 802072c:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8020730:	3310      	adds	r3, #16
 8020732:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8020736:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 802073a:	3b0f      	subs	r3, #15
 802073c:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8020740:	429a      	cmp	r2, r3
 8020742:	f6ff a943 	blt.w	801f9cc <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020746:	e03f      	b.n	80207c8 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8020748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802074c:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8020750:	681b      	ldr	r3, [r3, #0]
 8020752:	f993 3000 	ldrsb.w	r3, [r3]
 8020756:	461a      	mov	r2, r3
 8020758:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 802075c:	4413      	add	r3, r2
 802075e:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8020762:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020766:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	f993 3000 	ldrsb.w	r3, [r3]
 8020770:	461a      	mov	r2, r3
 8020772:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8020776:	4413      	add	r3, r2
 8020778:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 802077c:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8020780:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8020784:	fb02 f303 	mul.w	r3, r2, r3
 8020788:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 802078c:	4413      	add	r3, r2
 802078e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 8020792:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020796:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 802079a:	681b      	ldr	r3, [r3, #0]
 802079c:	1c5a      	adds	r2, r3, #1
 802079e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207a2:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80207a6:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 80207a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207ac:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	1c5a      	adds	r2, r3, #1
 80207b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207b8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80207bc:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80207be:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80207c2:	3301      	adds	r3, #1
 80207c4:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 80207c8:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 80207cc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80207d0:	429a      	cmp	r2, r3
 80207d2:	dbb9      	blt.n	8020748 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 80207d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207d8:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 80207dc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80207e0:	601a      	str	r2, [r3, #0]
 80207e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207e6:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 80207ea:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 80207ee:	601a      	str	r2, [r3, #0]
 80207f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207f4:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80207f8:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 80207fc:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80207fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020802:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8020806:	681b      	ldr	r3, [r3, #0]
 8020808:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802080c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020810:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 8020814:	6812      	ldr	r2, [r2, #0]
 8020816:	409a      	lsls	r2, r3
 8020818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802081c:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8020820:	601a      	str	r2, [r3, #0]
 8020822:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020826:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 802082a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802082e:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 8020832:	6812      	ldr	r2, [r2, #0]
 8020834:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8020836:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802083a:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 802083e:	2200      	movs	r2, #0
 8020840:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8020842:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020846:	461a      	mov	r2, r3
 8020848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802084c:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8020850:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020854:	461a      	mov	r2, r3
 8020856:	2300      	movs	r3, #0
 8020858:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 802085c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020860:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8020864:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8020868:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 802086c:	6809      	ldr	r1, [r1, #0]
 802086e:	17c8      	asrs	r0, r1, #31
 8020870:	6139      	str	r1, [r7, #16]
 8020872:	6178      	str	r0, [r7, #20]
 8020874:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8020878:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 802087c:	6809      	ldr	r1, [r1, #0]
 802087e:	17c8      	asrs	r0, r1, #31
 8020880:	60b9      	str	r1, [r7, #8]
 8020882:	60f8      	str	r0, [r7, #12]
 8020884:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8020888:	4631      	mov	r1, r6
 802088a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 802088e:	4650      	mov	r0, sl
 8020890:	fb00 f001 	mul.w	r0, r0, r1
 8020894:	4659      	mov	r1, fp
 8020896:	462c      	mov	r4, r5
 8020898:	fb04 f101 	mul.w	r1, r4, r1
 802089c:	4401      	add	r1, r0
 802089e:	4628      	mov	r0, r5
 80208a0:	4654      	mov	r4, sl
 80208a2:	fba0 8904 	umull	r8, r9, r0, r4
 80208a6:	4449      	add	r1, r9
 80208a8:	4689      	mov	r9, r1
 80208aa:	eb12 0108 	adds.w	r1, r2, r8
 80208ae:	6039      	str	r1, [r7, #0]
 80208b0:	eb43 0309 	adc.w	r3, r3, r9
 80208b4:	607b      	str	r3, [r7, #4]
 80208b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80208ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80208be:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 80208c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80208c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80208ca:	f04f 0200 	mov.w	r2, #0
 80208ce:	f04f 0300 	mov.w	r3, #0
 80208d2:	0fc2      	lsrs	r2, r0, #31
 80208d4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80208d8:	17cb      	asrs	r3, r1, #31
 80208da:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80208de:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 80208e2:	4613      	mov	r3, r2
 80208e4:	600b      	str	r3, [r1, #0]
    return result;
 80208e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208ea:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80208ee:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80208f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208f4:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80208f8:	681b      	ldr	r3, [r3, #0]
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	dc06      	bgt.n	802090c <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 80208fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020902:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	425b      	negs	r3, r3
 802090a:	e000      	b.n	802090e <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 802090c:	2300      	movs	r3, #0
 802090e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020912:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 8020916:	6011      	str	r1, [r2, #0]
 8020918:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802091c:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 8020920:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020926:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 802092a:	2200      	movs	r2, #0
 802092c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 802092e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020932:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8020936:	2201      	movs	r2, #1
 8020938:	681b      	ldr	r3, [r3, #0]
 802093a:	409a      	lsls	r2, r3
 802093c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020940:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8020944:	3a01      	subs	r2, #1
 8020946:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8020948:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802094c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8020950:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020954:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8020958:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802095c:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8020960:	6809      	ldr	r1, [r1, #0]
 8020962:	6812      	ldr	r2, [r2, #0]
 8020964:	400a      	ands	r2, r1
 8020966:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8020968:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802096c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8020970:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020974:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8020978:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802097c:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 8020980:	6809      	ldr	r1, [r1, #0]
 8020982:	6812      	ldr	r2, [r2, #0]
 8020984:	fa41 f202 	asr.w	r2, r1, r2
 8020988:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 802098a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802098e:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8020992:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020996:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 802099a:	6812      	ldr	r2, [r2, #0]
 802099c:	1052      	asrs	r2, r2, #1
 802099e:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80209a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209a4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	da0a      	bge.n	80209c4 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 80209ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209b2:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80209b6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80209ba:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 80209be:	6812      	ldr	r2, [r2, #0]
 80209c0:	3201      	adds	r2, #1
 80209c2:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80209c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209c8:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 80209cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209d0:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80209d4:	6812      	ldr	r2, [r2, #0]
 80209d6:	681b      	ldr	r3, [r3, #0]
 80209d8:	429a      	cmp	r2, r3
 80209da:	dd0a      	ble.n	80209f2 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 80209dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209e0:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80209e4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80209e8:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 80209ec:	6812      	ldr	r2, [r2, #0]
 80209ee:	3201      	adds	r2, #1
 80209f0:	601a      	str	r2, [r3, #0]
    return result;
 80209f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209f6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80209fa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80209fc:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 80209fe:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 8020a02:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020a06:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8020a0a:	4413      	add	r3, r2
 8020a0c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8020a10:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020a14:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8020a18:	4293      	cmp	r3, r2
 8020a1a:	bfb8      	it	lt
 8020a1c:	4613      	movlt	r3, r2
 8020a1e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 8020a22:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020a26:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8020a2a:	4293      	cmp	r3, r2
 8020a2c:	bfa8      	it	ge
 8020a2e:	4613      	movge	r3, r2
 8020a30:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 8020a34:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8020a38:	b25a      	sxtb	r2, r3
 8020a3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a3e:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8020a42:	681b      	ldr	r3, [r3, #0]
 8020a44:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 8020a46:	2300      	movs	r3, #0
}
 8020a48:	4618      	mov	r0, r3
 8020a4a:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 8020a4e:	46bd      	mov	sp, r7
 8020a50:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8020a54:	4770      	bx	lr

08020a56 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 8020a56:	b480      	push	{r7}
 8020a58:	b0a5      	sub	sp, #148	; 0x94
 8020a5a:	af00      	add	r7, sp, #0
 8020a5c:	60f8      	str	r0, [r7, #12]
 8020a5e:	60b9      	str	r1, [r7, #8]
 8020a60:	607a      	str	r2, [r7, #4]
 8020a62:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	089b      	lsrs	r3, r3, #2
 8020a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 8020a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8020a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8020a74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8020a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8020a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8020a80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8020a84:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8020a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8020a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8020a90:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 8020a92:	e070      	b.n	8020b76 <arm_q7_to_q15_with_offset+0x120>
 8020a94:	f107 030c 	add.w	r3, r7, #12
 8020a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8020a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8020aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020aa4:	681b      	ldr	r3, [r3, #0]
 8020aa6:	1d1a      	adds	r2, r3, #4
 8020aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020aaa:	601a      	str	r2, [r3, #0]
    return (val);
 8020aac:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 8020aae:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 8020ab0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8020ab6:	2308      	movs	r3, #8
 8020ab8:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 8020aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020abc:	f003 031f 	and.w	r3, r3, #31
 8020ac0:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 8020ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d101      	bne.n	8020acc <arm_q7_to_q15_with_offset+0x76>
    return op1;
 8020ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020aca:	e003      	b.n	8020ad4 <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020acc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ad0:	fa61 f303 	ror.w	r3, r1, r3
 8020ad4:	643a      	str	r2, [r7, #64]	; 0x40
 8020ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020adc:	fa23 f382 	sxtab16	r3, r3, r2
 8020ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8020ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020ae4:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 8020ae6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020aea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8020aec:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020af2:	fa23 f382 	sxtab16	r3, r3, r2
 8020af6:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8020af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020afa:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 8020afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8020afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8020b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020b06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020b08:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8020b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8020b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8020b10:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 8020b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8020b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8020b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020b1e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8020b22:	657b      	str	r3, [r7, #84]	; 0x54
 8020b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020b26:	653b      	str	r3, [r7, #80]	; 0x50
 8020b28:	f107 0308 	add.w	r3, r7, #8
 8020b2c:	623b      	str	r3, [r7, #32]
 8020b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020b30:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 8020b32:	69fb      	ldr	r3, [r7, #28]
 8020b34:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 8020b36:	6a3b      	ldr	r3, [r7, #32]
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	69ba      	ldr	r2, [r7, #24]
 8020b3c:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8020b3e:	6a3b      	ldr	r3, [r7, #32]
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	1d1a      	adds	r2, r3, #4
 8020b44:	6a3b      	ldr	r3, [r7, #32]
 8020b46:	601a      	str	r2, [r3, #0]
}
 8020b48:	bf00      	nop
 8020b4a:	f107 0308 	add.w	r3, r7, #8
 8020b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8020b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020b52:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 8020b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b56:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 8020b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	697a      	ldr	r2, [r7, #20]
 8020b5e:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8020b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b62:	681b      	ldr	r3, [r3, #0]
 8020b64:	1d1a      	adds	r2, r3, #4
 8020b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b68:	601a      	str	r2, [r3, #0]
}
 8020b6a:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 8020b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020b70:	3b01      	subs	r3, #1
 8020b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8020b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	dc8a      	bgt.n	8020a94 <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	f003 0303 	and.w	r3, r3, #3
 8020b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 8020b88:	e012      	b.n	8020bb0 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 8020b8a:	68fb      	ldr	r3, [r7, #12]
 8020b8c:	1c5a      	adds	r2, r3, #1
 8020b8e:	60fa      	str	r2, [r7, #12]
 8020b90:	f993 3000 	ldrsb.w	r3, [r3]
 8020b94:	b29a      	uxth	r2, r3
 8020b96:	887b      	ldrh	r3, [r7, #2]
 8020b98:	4413      	add	r3, r2
 8020b9a:	b299      	uxth	r1, r3
 8020b9c:	68bb      	ldr	r3, [r7, #8]
 8020b9e:	1c9a      	adds	r2, r3, #2
 8020ba0:	60ba      	str	r2, [r7, #8]
 8020ba2:	b20a      	sxth	r2, r1
 8020ba4:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 8020ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020baa:	3b01      	subs	r3, #1
 8020bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8020bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	dce8      	bgt.n	8020b8a <arm_q7_to_q15_with_offset+0x134>
    }
}
 8020bb8:	bf00      	nop
 8020bba:	bf00      	nop
 8020bbc:	3794      	adds	r7, #148	; 0x94
 8020bbe:	46bd      	mov	sp, r7
 8020bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bc4:	4770      	bx	lr

08020bc6 <arm_avgpool_s8_get_buffer_size>:
}

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 8020bc6:	b480      	push	{r7}
 8020bc8:	b083      	sub	sp, #12
 8020bca:	af00      	add	r7, sp, #0
 8020bcc:	6078      	str	r0, [r7, #4]
 8020bce:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 8020bd0:	683b      	ldr	r3, [r7, #0]
 8020bd2:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 8020bd4:	4618      	mov	r0, r3
 8020bd6:	370c      	adds	r7, #12
 8020bd8:	46bd      	mov	sp, r7
 8020bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bde:	4770      	bx	lr

08020be0 <compare_and_replace_if_larger_q7>:

#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnfunctions.h"
#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 8020be0:	b480      	push	{r7}
 8020be2:	b091      	sub	sp, #68	; 0x44
 8020be4:	af00      	add	r7, sp, #0
 8020be6:	60f8      	str	r0, [r7, #12]
 8020be8:	60b9      	str	r1, [r7, #8]
 8020bea:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 8020bf0:	68bb      	ldr	r3, [r7, #8]
 8020bf2:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	109b      	asrs	r3, r3, #2
 8020bf8:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 8020bfa:	e050      	b.n	8020c9e <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 8020bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8020c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020c02:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 8020c04:	617b      	str	r3, [r7, #20]
    return (val);
 8020c06:	697b      	ldr	r3, [r7, #20]
 8020c08:	623b      	str	r3, [r7, #32]
 8020c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c0e:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 8020c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	681b      	ldr	r3, [r3, #0]
 8020c16:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8020c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	1d1a      	adds	r2, r3, #4
 8020c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c20:	601a      	str	r2, [r3, #0]
    return (val);
 8020c22:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 8020c24:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 8020c26:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8020c2a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8020c2e:	429a      	cmp	r2, r3
 8020c30:	dd03      	ble.n	8020c3a <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 8020c32:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8020c36:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8020c3a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8020c3e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8020c42:	429a      	cmp	r2, r3
 8020c44:	dd03      	ble.n	8020c4e <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 8020c46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8020c4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 8020c4e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8020c52:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8020c56:	429a      	cmp	r2, r3
 8020c58:	dd03      	ble.n	8020c62 <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 8020c5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020c5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 8020c62:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8020c66:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8020c6a:	429a      	cmp	r2, r3
 8020c6c:	dd03      	ble.n	8020c76 <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 8020c6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8020c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 8020c76:	6a3b      	ldr	r3, [r7, #32]
 8020c78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8020c7c:	633a      	str	r2, [r7, #48]	; 0x30
 8020c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 8020c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c82:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 8020c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c86:	681b      	ldr	r3, [r3, #0]
 8020c88:	69ba      	ldr	r2, [r7, #24]
 8020c8a:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 8020c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	1d1a      	adds	r2, r3, #4
 8020c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c94:	601a      	str	r2, [r3, #0]
}
 8020c96:	bf00      	nop

        cnt--;
 8020c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020c9a:	3b01      	subs	r3, #1
 8020c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8020c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	dcab      	bgt.n	8020bfc <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	f003 0303 	and.w	r3, r3, #3
 8020caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8020cac:	e015      	b.n	8020cda <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 8020cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cb0:	f993 2000 	ldrsb.w	r2, [r3]
 8020cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8020cba:	429a      	cmp	r2, r3
 8020cbc:	dd04      	ble.n	8020cc8 <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 8020cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cc2:	f992 2000 	ldrsb.w	r2, [r2]
 8020cc6:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 8020cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cca:	3301      	adds	r3, #1
 8020ccc:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 8020cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cd0:	3301      	adds	r3, #1
 8020cd2:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 8020cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020cd6:	3b01      	subs	r3, #1
 8020cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8020cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020cdc:	2b00      	cmp	r3, #0
 8020cde:	dce6      	bgt.n	8020cae <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 8020ce0:	bf00      	nop
 8020ce2:	bf00      	nop
 8020ce4:	3744      	adds	r7, #68	; 0x44
 8020ce6:	46bd      	mov	sp, r7
 8020ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cec:	4770      	bx	lr

08020cee <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 8020cee:	b480      	push	{r7}
 8020cf0:	b08d      	sub	sp, #52	; 0x34
 8020cf2:	af00      	add	r7, sp, #0
 8020cf4:	60f8      	str	r0, [r7, #12]
 8020cf6:	60b9      	str	r1, [r7, #8]
 8020cf8:	607a      	str	r2, [r7, #4]
 8020cfa:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 8020cfc:	68bb      	ldr	r3, [r7, #8]
 8020cfe:	109b      	asrs	r3, r3, #2
 8020d00:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 8020d02:	e062      	b.n	8020dca <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 8020d04:	68fb      	ldr	r3, [r7, #12]
 8020d06:	61fb      	str	r3, [r7, #28]
 8020d08:	69fb      	ldr	r3, [r7, #28]
 8020d0a:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 8020d0c:	617b      	str	r3, [r7, #20]
    return (val);
 8020d0e:	697b      	ldr	r3, [r7, #20]
 8020d10:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 8020d12:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8020d16:	461a      	mov	r2, r3
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	4293      	cmp	r3, r2
 8020d1c:	bfb8      	it	lt
 8020d1e:	4613      	movlt	r3, r2
 8020d20:	b25b      	sxtb	r3, r3
 8020d22:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 8020d24:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8020d28:	461a      	mov	r2, r3
 8020d2a:	683b      	ldr	r3, [r7, #0]
 8020d2c:	4293      	cmp	r3, r2
 8020d2e:	bfa8      	it	ge
 8020d30:	4613      	movge	r3, r2
 8020d32:	b25b      	sxtb	r3, r3
 8020d34:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 8020d36:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8020d3a:	461a      	mov	r2, r3
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	4293      	cmp	r3, r2
 8020d40:	bfb8      	it	lt
 8020d42:	4613      	movlt	r3, r2
 8020d44:	b25b      	sxtb	r3, r3
 8020d46:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 8020d48:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8020d4c:	461a      	mov	r2, r3
 8020d4e:	683b      	ldr	r3, [r7, #0]
 8020d50:	4293      	cmp	r3, r2
 8020d52:	bfa8      	it	ge
 8020d54:	4613      	movge	r3, r2
 8020d56:	b25b      	sxtb	r3, r3
 8020d58:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 8020d5a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8020d5e:	461a      	mov	r2, r3
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	4293      	cmp	r3, r2
 8020d64:	bfb8      	it	lt
 8020d66:	4613      	movlt	r3, r2
 8020d68:	b25b      	sxtb	r3, r3
 8020d6a:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8020d6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8020d70:	461a      	mov	r2, r3
 8020d72:	683b      	ldr	r3, [r7, #0]
 8020d74:	4293      	cmp	r3, r2
 8020d76:	bfa8      	it	ge
 8020d78:	4613      	movge	r3, r2
 8020d7a:	b25b      	sxtb	r3, r3
 8020d7c:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8020d7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8020d82:	461a      	mov	r2, r3
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	4293      	cmp	r3, r2
 8020d88:	bfb8      	it	lt
 8020d8a:	4613      	movlt	r3, r2
 8020d8c:	b25b      	sxtb	r3, r3
 8020d8e:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8020d90:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8020d94:	461a      	mov	r2, r3
 8020d96:	683b      	ldr	r3, [r7, #0]
 8020d98:	4293      	cmp	r3, r2
 8020d9a:	bfa8      	it	ge
 8020d9c:	4613      	movge	r3, r2
 8020d9e:	b25b      	sxtb	r3, r3
 8020da0:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 8020da2:	69bb      	ldr	r3, [r7, #24]
 8020da4:	f107 020c 	add.w	r2, r7, #12
 8020da8:	627a      	str	r2, [r7, #36]	; 0x24
 8020daa:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 8020dac:	6a3b      	ldr	r3, [r7, #32]
 8020dae:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 8020db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	693a      	ldr	r2, [r7, #16]
 8020db6:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 8020db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	1d1a      	adds	r2, r3, #4
 8020dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dc0:	601a      	str	r2, [r3, #0]
}
 8020dc2:	bf00      	nop
        cnt--;
 8020dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dc6:	3b01      	subs	r3, #1
 8020dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8020dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	dc99      	bgt.n	8020d04 <clamp_output+0x16>
    }

    cnt = length & 0x3;
 8020dd0:	68bb      	ldr	r3, [r7, #8]
 8020dd2:	f003 0303 	and.w	r3, r3, #3
 8020dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8020dd8:	e018      	b.n	8020e0c <clamp_output+0x11e>
    {
        int32_t comp = *source;
 8020dda:	68fb      	ldr	r3, [r7, #12]
 8020ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8020de0:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 8020de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	4293      	cmp	r3, r2
 8020de8:	bfb8      	it	lt
 8020dea:	4613      	movlt	r3, r2
 8020dec:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 8020dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020df0:	683b      	ldr	r3, [r7, #0]
 8020df2:	4293      	cmp	r3, r2
 8020df4:	bfa8      	it	ge
 8020df6:	4613      	movge	r3, r2
 8020df8:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 8020dfa:	68fb      	ldr	r3, [r7, #12]
 8020dfc:	1c5a      	adds	r2, r3, #1
 8020dfe:	60fa      	str	r2, [r7, #12]
 8020e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020e02:	b252      	sxtb	r2, r2
 8020e04:	701a      	strb	r2, [r3, #0]
        cnt--;
 8020e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e08:	3b01      	subs	r3, #1
 8020e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8020e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	dce3      	bgt.n	8020dda <clamp_output+0xec>
    }
#endif
}
 8020e12:	bf00      	nop
 8020e14:	bf00      	nop
 8020e16:	3734      	adds	r7, #52	; 0x34
 8020e18:	46bd      	mov	sp, r7
 8020e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1e:	4770      	bx	lr

08020e20 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 8020e20:	b580      	push	{r7, lr}
 8020e22:	b09e      	sub	sp, #120	; 0x78
 8020e24:	af00      	add	r7, sp, #0
 8020e26:	60f8      	str	r0, [r7, #12]
 8020e28:	60b9      	str	r1, [r7, #8]
 8020e2a:	607a      	str	r2, [r7, #4]
 8020e2c:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	685b      	ldr	r3, [r3, #4]
 8020e32:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	689b      	ldr	r3, [r3, #8]
 8020e38:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8020e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8020e3e:	685b      	ldr	r3, [r3, #4]
 8020e40:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8020e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8020e46:	689b      	ldr	r3, [r3, #8]
 8020e48:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8020e4a:	68bb      	ldr	r3, [r7, #8]
 8020e4c:	685b      	ldr	r3, [r3, #4]
 8020e4e:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 8020e50:	68bb      	ldr	r3, [r7, #8]
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 8020e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8020e5a:	685b      	ldr	r3, [r3, #4]
 8020e5c:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 8020e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8020e62:	689b      	ldr	r3, [r3, #8]
 8020e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 8020e66:	68bb      	ldr	r3, [r7, #8]
 8020e68:	68db      	ldr	r3, [r3, #12]
 8020e6a:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 8020e6c:	68bb      	ldr	r3, [r7, #8]
 8020e6e:	689b      	ldr	r3, [r3, #8]
 8020e70:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 8020e72:	68bb      	ldr	r3, [r7, #8]
 8020e74:	691b      	ldr	r3, [r3, #16]
 8020e76:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 8020e78:	68bb      	ldr	r3, [r7, #8]
 8020e7a:	695b      	ldr	r3, [r3, #20]
 8020e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	68db      	ldr	r3, [r3, #12]
 8020e82:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 8020e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8020e88:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8020e8a:	2300      	movs	r3, #0
 8020e8c:	677b      	str	r3, [r7, #116]	; 0x74
 8020e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e90:	425b      	negs	r3, r3
 8020e92:	673b      	str	r3, [r7, #112]	; 0x70
 8020e94:	e078      	b.n	8020f88 <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8020e96:	2300      	movs	r3, #0
 8020e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020e9c:	425b      	negs	r3, r3
 8020e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8020ea0:	e067      	b.n	8020f72 <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8020ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	dc02      	bgt.n	8020eae <arm_max_pool_s8+0x8e>
 8020ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020eaa:	425b      	negs	r3, r3
 8020eac:	e000      	b.n	8020eb0 <arm_max_pool_s8+0x90>
 8020eae:	2300      	movs	r3, #0
 8020eb0:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8020eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	dc02      	bgt.n	8020ebe <arm_max_pool_s8+0x9e>
 8020eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020eba:	425b      	negs	r3, r3
 8020ebc:	e000      	b.n	8020ec0 <arm_max_pool_s8+0xa0>
 8020ebe:	2300      	movs	r3, #0
 8020ec0:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8020ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020ec6:	1ad3      	subs	r3, r2, r3
 8020ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020eca:	4293      	cmp	r3, r2
 8020ecc:	bfa8      	it	ge
 8020ece:	4613      	movge	r3, r2
 8020ed0:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 8020ed2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020ed6:	1ad3      	subs	r3, r2, r3
 8020ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020eda:	4293      	cmp	r3, r2
 8020edc:	bfa8      	it	ge
 8020ede:	4613      	movge	r3, r2
 8020ee0:	617b      	str	r3, [r7, #20]

            int count = 0;
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8020ee6:	6a3b      	ldr	r3, [r7, #32]
 8020ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8020eea:	e031      	b.n	8020f50 <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8020eec:	69fb      	ldr	r3, [r7, #28]
 8020eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020ef0:	e027      	b.n	8020f42 <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 8020ef2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020ef6:	441a      	add	r2, r3
 8020ef8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8020efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020efc:	440b      	add	r3, r1
 8020efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8020f00:	fb01 f303 	mul.w	r3, r1, r3
 8020f04:	4413      	add	r3, r2
 8020f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020f08:	fb02 f303 	mul.w	r3, r2, r3
 8020f0c:	461a      	mov	r2, r3
 8020f0e:	683b      	ldr	r3, [r7, #0]
 8020f10:	4413      	add	r3, r2
 8020f12:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 8020f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d10a      	bne.n	8020f30 <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 8020f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f1c:	461a      	mov	r2, r3
 8020f1e:	6939      	ldr	r1, [r7, #16]
 8020f20:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8020f24:	f010 fa94 	bl	8031450 <memcpy>
                        count++;
 8020f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8020f2a:	3301      	adds	r3, #1
 8020f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8020f2e:	e005      	b.n	8020f3c <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 8020f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020f32:	6939      	ldr	r1, [r7, #16]
 8020f34:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8020f38:	f7ff fe52 	bl	8020be0 <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8020f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020f3e:	3301      	adds	r3, #1
 8020f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020f42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020f44:	697b      	ldr	r3, [r7, #20]
 8020f46:	429a      	cmp	r2, r3
 8020f48:	dbd3      	blt.n	8020ef2 <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8020f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020f4c:	3301      	adds	r3, #1
 8020f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8020f50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8020f52:	69bb      	ldr	r3, [r7, #24]
 8020f54:	429a      	cmp	r2, r3
 8020f56:	dbc9      	blt.n	8020eec <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 8020f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8020f5e:	4413      	add	r3, r2
 8020f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8020f64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020f68:	4413      	add	r3, r2
 8020f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8020f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020f6e:	3301      	adds	r3, #1
 8020f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8020f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020f76:	429a      	cmp	r2, r3
 8020f78:	db93      	blt.n	8020ea2 <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8020f7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8020f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020f7e:	4413      	add	r3, r2
 8020f80:	673b      	str	r3, [r7, #112]	; 0x70
 8020f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8020f84:	3301      	adds	r3, #1
 8020f86:	677b      	str	r3, [r7, #116]	; 0x74
 8020f88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8020f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020f8c:	429a      	cmp	r2, r3
 8020f8e:	db82      	blt.n	8020e96 <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8020f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020f92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020f94:	fb02 f303 	mul.w	r3, r2, r3
 8020f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020f9a:	fb02 f103 	mul.w	r1, r2, r3
 8020f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020fa4:	f7ff fea3 	bl	8020cee <clamp_output>

    return ARM_MATH_SUCCESS;
 8020fa8:	2300      	movs	r3, #0
}
 8020faa:	4618      	mov	r0, r3
 8020fac:	3778      	adds	r7, #120	; 0x78
 8020fae:	46bd      	mov	sp, r7
 8020fb0:	bd80      	pop	{r7, pc}
 8020fb2:	0000      	movs	r0, r0
 8020fb4:	0000      	movs	r0, r0
	...

08020fb8 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8020fb8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8020fbc:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 8020fc0:	af00      	add	r7, sp, #0
 8020fc2:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 8020fc6:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 8020fca:	6020      	str	r0, [r4, #0]
 8020fcc:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8020fd0:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 8020fd4:	6001      	str	r1, [r0, #0]
 8020fd6:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8020fda:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 8020fde:	600a      	str	r2, [r1, #0]
 8020fe0:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8020fe4:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8020fe8:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8020fea:	2201      	movs	r2, #1
 8020fec:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8020ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8020ff4:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 8020ff8:	2300      	movs	r3, #0
 8020ffa:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8020ffe:	2300      	movs	r3, #0
 8021000:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8021004:	f004 b863 	b.w	80250ce <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8021008:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802100c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8021010:	681b      	ldr	r3, [r3, #0]
 8021012:	781b      	ldrb	r3, [r3, #0]
 8021014:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 8021018:	2301      	movs	r3, #1
 802101a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 802101e:	e015      	b.n	802104c <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 8021020:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8021024:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021028:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 802102c:	681b      	ldr	r3, [r3, #0]
 802102e:	4413      	add	r3, r2
 8021030:	f993 2000 	ldrsb.w	r2, [r3]
 8021034:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8021038:	4293      	cmp	r3, r2
 802103a:	bfb8      	it	lt
 802103c:	4613      	movlt	r3, r2
 802103e:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 8021042:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8021046:	3301      	adds	r3, #1
 8021048:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 802104c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021050:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8021054:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	429a      	cmp	r2, r3
 802105c:	dbe0      	blt.n	8021020 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 802105e:	2300      	movs	r3, #0
 8021060:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 8021064:	2300      	movs	r3, #0
 8021066:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 802106a:	2300      	movs	r3, #0
 802106c:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8021070:	f001 ba24 	b.w	80224bc <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 8021074:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8021078:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802107c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	4413      	add	r3, r2
 8021084:	f993 3000 	ldrsb.w	r3, [r3]
 8021088:	461a      	mov	r2, r3
 802108a:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 802108e:	1ad3      	subs	r3, r2, r3
 8021090:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8021094:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8021098:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 802109c:	429a      	cmp	r2, r3
 802109e:	f2c1 8208 	blt.w	80224b2 <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 80210a2:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80210a6:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80210aa:	fb03 f202 	mul.w	r2, r3, r2
 80210ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80210b2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80210b6:	601a      	str	r2, [r3, #0]
 80210b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80210bc:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80210c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80210c4:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80210c8:	681b      	ldr	r3, [r3, #0]
 80210ca:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80210cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80210d0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80210d4:	2300      	movs	r3, #0
 80210d6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80210d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80210dc:	f04f 0300 	mov.w	r3, #0
 80210e0:	f607 0138 	addw	r1, r7, #2104	; 0x838
 80210e4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80210e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80210ec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	0fdb      	lsrs	r3, r3, #31
 80210f4:	b2da      	uxtb	r2, r3
 80210f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80210fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	0fdb      	lsrs	r3, r3, #31
 8021102:	b2db      	uxtb	r3, r3
 8021104:	4053      	eors	r3, r2
 8021106:	b2db      	uxtb	r3, r3
 8021108:	2b00      	cmp	r3, #0
 802110a:	d012      	beq.n	8021132 <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 802110c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8021110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021114:	2100      	movs	r1, #0
 8021116:	f1d2 0001 	rsbs	r0, r2, #1
 802111a:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 802111e:	eb61 0303 	sbc.w	r3, r1, r3
 8021122:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8021126:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 802112a:	f607 0238 	addw	r2, r7, #2104	; 0x838
 802112e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021132:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021136:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 802113a:	681b      	ldr	r3, [r3, #0]
 802113c:	17da      	asrs	r2, r3, #31
 802113e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8021142:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 8021146:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802114a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	17da      	asrs	r2, r3, #31
 8021152:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8021156:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 802115a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 802115e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021162:	460b      	mov	r3, r1
 8021164:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8021168:	fb02 f203 	mul.w	r2, r2, r3
 802116c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8021170:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 8021174:	e9c4 0100 	strd	r0, r1, [r4]
 8021178:	4601      	mov	r1, r0
 802117a:	fb01 f303 	mul.w	r3, r1, r3
 802117e:	4413      	add	r3, r2
 8021180:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8021184:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8021188:	fba2 1201 	umull	r1, r2, r2, r1
 802118c:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 8021190:	460a      	mov	r2, r1
 8021192:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 8021196:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 802119a:	4413      	add	r3, r2
 802119c:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80211a0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80211a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211a8:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 80211ac:	1851      	adds	r1, r2, r1
 80211ae:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 80211b2:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 80211b6:	414b      	adcs	r3, r1
 80211b8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80211bc:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 80211c0:	f607 0238 	addw	r2, r7, #2104	; 0x838
 80211c4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80211c8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80211cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	da0a      	bge.n	80211ea <arm_softmax_s8+0x232>
 80211d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80211d8:	1851      	adds	r1, r2, r1
 80211da:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 80211de:	f143 0300 	adc.w	r3, r3, #0
 80211e2:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80211e6:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80211ea:	f04f 0000 	mov.w	r0, #0
 80211ee:	f04f 0100 	mov.w	r1, #0
 80211f2:	0fd0      	lsrs	r0, r2, #31
 80211f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80211f8:	17d9      	asrs	r1, r3, #31
 80211fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80211fe:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8021202:	4603      	mov	r3, r0
 8021204:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021206:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802120a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 802120e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021212:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8021216:	6812      	ldr	r2, [r2, #0]
 8021218:	681b      	ldr	r3, [r3, #0]
 802121a:	429a      	cmp	r2, r3
 802121c:	d10e      	bne.n	802123c <arm_softmax_s8+0x284>
 802121e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021222:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802122c:	d106      	bne.n	802123c <arm_softmax_s8+0x284>
        result = Q31_MAX;
 802122e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021232:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8021236:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802123a:	6013      	str	r3, [r2, #0]
    return result;
 802123c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021240:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8021244:	681b      	ldr	r3, [r3, #0]
 8021246:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
    int32_t mask = 0;
 802124a:	2300      	movs	r3, #0
 802124c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 8021250:	2318      	movs	r3, #24
 8021252:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8021256:	2201      	movs	r2, #1
 8021258:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 802125c:	fa02 f303 	lsl.w	r3, r2, r3
 8021260:	1e5a      	subs	r2, r3, #1
 8021262:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8021266:	ea02 0103 	and.w	r1, r2, r3
 802126a:	2201      	movs	r2, #1
 802126c:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8021270:	fa02 f303 	lsl.w	r3, r2, r3
 8021274:	1acb      	subs	r3, r1, r3
 8021276:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 802127a:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 802127e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8021282:	1ad3      	subs	r3, r2, r3
 8021284:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8021288:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 802128c:	015b      	lsls	r3, r3, #5
 802128e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8021292:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8021296:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 802129a:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 802129e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80212a2:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 80212a6:	2300      	movs	r3, #0
 80212a8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 80212ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80212b0:	f04f 0300 	mov.w	r3, #0
 80212b4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80212b8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80212bc:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80212c0:	0fdb      	lsrs	r3, r3, #31
 80212c2:	b2da      	uxtb	r2, r3
 80212c4:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80212c8:	0fdb      	lsrs	r3, r3, #31
 80212ca:	b2db      	uxtb	r3, r3
 80212cc:	4053      	eors	r3, r2
 80212ce:	b2db      	uxtb	r3, r3
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	d012      	beq.n	80212fa <arm_softmax_s8+0x342>
        mult = 1 - mult;
 80212d4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80212d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212dc:	2100      	movs	r1, #0
 80212de:	f1d2 0001 	rsbs	r0, r2, #1
 80212e2:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 80212e6:	eb61 0303 	sbc.w	r3, r1, r3
 80212ea:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80212ee:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 80212f2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80212f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80212fa:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80212fe:	17da      	asrs	r2, r3, #31
 8021300:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8021304:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8021308:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 802130c:	17da      	asrs	r2, r3, #31
 802130e:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8021312:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 8021316:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802131a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802131e:	460b      	mov	r3, r1
 8021320:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8021324:	fb02 f203 	mul.w	r2, r2, r3
 8021328:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 802132c:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 8021330:	e9c4 0100 	strd	r0, r1, [r4]
 8021334:	4601      	mov	r1, r0
 8021336:	fb01 f303 	mul.w	r3, r1, r3
 802133a:	4413      	add	r3, r2
 802133c:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8021340:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 8021344:	fba2 8901 	umull	r8, r9, r2, r1
 8021348:	444b      	add	r3, r9
 802134a:	4699      	mov	r9, r3
 802134c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8021350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021354:	eb12 0108 	adds.w	r1, r2, r8
 8021358:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 802135c:	eb43 0309 	adc.w	r3, r3, r9
 8021360:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8021364:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8021368:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 802136c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021370:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8021374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021378:	2b00      	cmp	r3, #0
 802137a:	da0a      	bge.n	8021392 <arm_softmax_s8+0x3da>
 802137c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021380:	1851      	adds	r1, r2, r1
 8021382:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 8021386:	f143 0300 	adc.w	r3, r3, #0
 802138a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 802138e:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8021392:	f04f 0000 	mov.w	r0, #0
 8021396:	f04f 0100 	mov.w	r1, #0
 802139a:	0fd0      	lsrs	r0, r2, #31
 802139c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80213a0:	17d9      	asrs	r1, r3, #31
 80213a2:	4602      	mov	r2, r0
 80213a4:	460b      	mov	r3, r1
 80213a6:	4613      	mov	r3, r2
 80213a8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80213ac:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80213b0:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80213b4:	429a      	cmp	r2, r3
 80213b6:	d108      	bne.n	80213ca <arm_softmax_s8+0x412>
 80213b8:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80213bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80213c0:	d103      	bne.n	80213ca <arm_softmax_s8+0x412>
        result = Q31_MAX;
 80213c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80213c6:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 80213ca:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 80213ce:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 80213d2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80213d6:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 80213da:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80213de:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 80213e2:	2300      	movs	r3, #0
 80213e4:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 80213e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80213ec:	f04f 0300 	mov.w	r3, #0
 80213f0:	f607 1128 	addw	r1, r7, #2344	; 0x928
 80213f4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80213f8:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80213fc:	0fdb      	lsrs	r3, r3, #31
 80213fe:	b2da      	uxtb	r2, r3
 8021400:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8021404:	0fdb      	lsrs	r3, r3, #31
 8021406:	b2db      	uxtb	r3, r3
 8021408:	4053      	eors	r3, r2
 802140a:	b2db      	uxtb	r3, r3
 802140c:	2b00      	cmp	r3, #0
 802140e:	d012      	beq.n	8021436 <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8021410:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8021414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021418:	2100      	movs	r1, #0
 802141a:	f1d2 0001 	rsbs	r0, r2, #1
 802141e:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 8021422:	eb61 0303 	sbc.w	r3, r1, r3
 8021426:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 802142a:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 802142e:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8021432:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021436:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 802143a:	17da      	asrs	r2, r3, #31
 802143c:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8021440:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 8021444:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8021448:	17da      	asrs	r2, r3, #31
 802144a:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 802144e:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 8021452:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8021456:	e9d3 0100 	ldrd	r0, r1, [r3]
 802145a:	460b      	mov	r3, r1
 802145c:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8021460:	fb02 f203 	mul.w	r2, r2, r3
 8021464:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8021468:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 802146c:	e9c4 0100 	strd	r0, r1, [r4]
 8021470:	4601      	mov	r1, r0
 8021472:	fb01 f303 	mul.w	r3, r1, r3
 8021476:	4413      	add	r3, r2
 8021478:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 802147c:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8021480:	fba2 ab01 	umull	sl, fp, r2, r1
 8021484:	445b      	add	r3, fp
 8021486:	469b      	mov	fp, r3
 8021488:	f607 1328 	addw	r3, r7, #2344	; 0x928
 802148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021490:	eb12 010a 	adds.w	r1, r2, sl
 8021494:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8021498:	eb43 030b 	adc.w	r3, r3, fp
 802149c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80214a0:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 80214a4:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80214a8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80214ac:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80214b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	da0a      	bge.n	80214ce <arm_softmax_s8+0x516>
 80214b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80214bc:	1851      	adds	r1, r2, r1
 80214be:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80214c2:	f143 0300 	adc.w	r3, r3, #0
 80214c6:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80214ca:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80214ce:	f04f 0000 	mov.w	r0, #0
 80214d2:	f04f 0100 	mov.w	r1, #0
 80214d6:	0fd0      	lsrs	r0, r2, #31
 80214d8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80214dc:	17d9      	asrs	r1, r3, #31
 80214de:	4602      	mov	r2, r0
 80214e0:	460b      	mov	r3, r1
 80214e2:	4613      	mov	r3, r2
 80214e4:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80214e8:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 80214ec:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80214f0:	429a      	cmp	r2, r3
 80214f2:	d108      	bne.n	8021506 <arm_softmax_s8+0x54e>
 80214f4:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80214f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80214fc:	d103      	bne.n	8021506 <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 80214fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021502:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 8021506:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 802150a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 802150e:	2300      	movs	r3, #0
 8021510:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021514:	2304      	movs	r3, #4
 8021516:	3b01      	subs	r3, #1
 8021518:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 802151c:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8021520:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8021524:	4013      	ands	r3, r2
 8021526:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 802152a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 802152e:	109b      	asrs	r3, r3, #2
 8021530:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 8021534:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8021538:	105b      	asrs	r3, r3, #1
 802153a:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 802153e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8021542:	2b00      	cmp	r3, #0
 8021544:	da04      	bge.n	8021550 <arm_softmax_s8+0x598>
        threshold++;
 8021546:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 802154a:	3301      	adds	r3, #1
 802154c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8021550:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8021554:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8021558:	429a      	cmp	r2, r3
 802155a:	dd04      	ble.n	8021566 <arm_softmax_s8+0x5ae>
        result++;
 802155c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8021560:	3301      	adds	r3, #1
 8021562:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 8021566:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 802156a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 802156e:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8021572:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8021576:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 802157a:	2300      	movs	r3, #0
 802157c:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8021580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021584:	f04f 0300 	mov.w	r3, #0
 8021588:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 802158c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021590:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8021594:	0fdb      	lsrs	r3, r3, #31
 8021596:	b2da      	uxtb	r2, r3
 8021598:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 802159c:	0fdb      	lsrs	r3, r3, #31
 802159e:	b2db      	uxtb	r3, r3
 80215a0:	4053      	eors	r3, r2
 80215a2:	b2db      	uxtb	r3, r3
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d012      	beq.n	80215ce <arm_softmax_s8+0x616>
        mult = 1 - mult;
 80215a8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 80215ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215b0:	2100      	movs	r1, #0
 80215b2:	f1d2 0001 	rsbs	r0, r2, #1
 80215b6:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 80215ba:	eb61 0303 	sbc.w	r3, r1, r3
 80215be:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80215c2:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80215c6:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80215ca:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80215ce:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80215d2:	17da      	asrs	r2, r3, #31
 80215d4:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 80215d8:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 80215dc:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80215e0:	17da      	asrs	r2, r3, #31
 80215e2:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80215e6:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 80215ea:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80215ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80215f2:	460b      	mov	r3, r1
 80215f4:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 80215f8:	fb02 f203 	mul.w	r2, r2, r3
 80215fc:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8021600:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 8021604:	e9cc 0100 	strd	r0, r1, [ip]
 8021608:	4601      	mov	r1, r0
 802160a:	fb01 f303 	mul.w	r3, r1, r3
 802160e:	4413      	add	r3, r2
 8021610:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8021614:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8021618:	fba2 5601 	umull	r5, r6, r2, r1
 802161c:	4433      	add	r3, r6
 802161e:	461e      	mov	r6, r3
 8021620:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8021624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021628:	1951      	adds	r1, r2, r5
 802162a:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 802162e:	4173      	adcs	r3, r6
 8021630:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8021634:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8021638:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 802163c:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8021640:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8021644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021648:	2b00      	cmp	r3, #0
 802164a:	da0a      	bge.n	8021662 <arm_softmax_s8+0x6aa>
 802164c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021650:	1851      	adds	r1, r2, r1
 8021652:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8021656:	f143 0300 	adc.w	r3, r3, #0
 802165a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 802165e:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8021662:	f04f 0000 	mov.w	r0, #0
 8021666:	f04f 0100 	mov.w	r1, #0
 802166a:	0fd0      	lsrs	r0, r2, #31
 802166c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021670:	17d9      	asrs	r1, r3, #31
 8021672:	4602      	mov	r2, r0
 8021674:	460b      	mov	r3, r1
 8021676:	4613      	mov	r3, r2
 8021678:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802167c:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8021680:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8021684:	429a      	cmp	r2, r3
 8021686:	d108      	bne.n	802169a <arm_softmax_s8+0x6e2>
 8021688:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 802168c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021690:	d103      	bne.n	802169a <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 8021692:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021696:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 802169a:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 802169e:	4423      	add	r3, r4
 80216a0:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 80216a4:	2300      	movs	r3, #0
 80216a6:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 80216aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80216ae:	f04f 0300 	mov.w	r3, #0
 80216b2:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 80216b6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80216ba:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80216be:	0fdb      	lsrs	r3, r3, #31
 80216c0:	b2da      	uxtb	r2, r3
 80216c2:	2300      	movs	r3, #0
 80216c4:	4053      	eors	r3, r2
 80216c6:	b2db      	uxtb	r3, r3
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d012      	beq.n	80216f2 <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 80216cc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80216d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216d4:	2100      	movs	r1, #0
 80216d6:	f1d2 0001 	rsbs	r0, r2, #1
 80216da:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 80216de:	eb61 0303 	sbc.w	r3, r1, r3
 80216e2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80216e6:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 80216ea:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 80216ee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80216f2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80216f6:	17da      	asrs	r2, r3, #31
 80216f8:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80216fc:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8021700:	a3f0      	add	r3, pc, #960	; (adr r3, 8021ac4 <arm_softmax_s8+0xb0c>)
 8021702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021706:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 802170a:	fb02 f001 	mul.w	r0, r2, r1
 802170e:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8021712:	fb01 f103 	mul.w	r1, r1, r3
 8021716:	4401      	add	r1, r0
 8021718:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 802171c:	fba0 2302 	umull	r2, r3, r0, r2
 8021720:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8021724:	4613      	mov	r3, r2
 8021726:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 802172a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 802172e:	18cb      	adds	r3, r1, r3
 8021730:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8021734:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8021738:	e9d3 2300 	ldrd	r2, r3, [r3]
 802173c:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8021740:	1851      	adds	r1, r2, r1
 8021742:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8021746:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 802174a:	414b      	adcs	r3, r1
 802174c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8021750:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8021754:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8021758:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802175c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8021760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021764:	2b00      	cmp	r3, #0
 8021766:	da0a      	bge.n	802177e <arm_softmax_s8+0x7c6>
 8021768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802176c:	1851      	adds	r1, r2, r1
 802176e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8021772:	f143 0300 	adc.w	r3, r3, #0
 8021776:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 802177a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 802177e:	f04f 0000 	mov.w	r0, #0
 8021782:	f04f 0100 	mov.w	r1, #0
 8021786:	0fd0      	lsrs	r0, r2, #31
 8021788:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802178c:	17d9      	asrs	r1, r3, #31
 802178e:	4602      	mov	r2, r0
 8021790:	460b      	mov	r3, r1
 8021792:	4613      	mov	r3, r2
 8021794:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021798:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 802179c:	4bc6      	ldr	r3, [pc, #792]	; (8021ab8 <arm_softmax_s8+0xb00>)
 802179e:	429a      	cmp	r2, r3
 80217a0:	d108      	bne.n	80217b4 <arm_softmax_s8+0x7fc>
 80217a2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80217a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80217aa:	d103      	bne.n	80217b4 <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 80217ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80217b0:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 80217b4:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80217b8:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80217bc:	4413      	add	r3, r2
 80217be:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 80217c2:	2300      	movs	r3, #0
 80217c4:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 80217c8:	2302      	movs	r3, #2
 80217ca:	3b01      	subs	r3, #1
 80217cc:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 80217d0:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 80217d4:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 80217d8:	4013      	ands	r3, r2
 80217da:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 80217de:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 80217e2:	105b      	asrs	r3, r3, #1
 80217e4:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 80217e8:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 80217ec:	105b      	asrs	r3, r3, #1
 80217ee:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 80217f2:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	da04      	bge.n	8021804 <arm_softmax_s8+0x84c>
        threshold++;
 80217fa:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 80217fe:	3301      	adds	r3, #1
 8021800:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 8021804:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8021808:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 802180c:	429a      	cmp	r2, r3
 802180e:	dd04      	ble.n	802181a <arm_softmax_s8+0x862>
        result++;
 8021810:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8021814:	3301      	adds	r3, #1
 8021816:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 802181a:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 802181e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8021822:	4413      	add	r3, r2
 8021824:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8021828:	2300      	movs	r3, #0
 802182a:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 802182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021832:	f04f 0300 	mov.w	r3, #0
 8021836:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 802183a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802183e:	2200      	movs	r2, #0
 8021840:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8021844:	0fdb      	lsrs	r3, r3, #31
 8021846:	b2db      	uxtb	r3, r3
 8021848:	4053      	eors	r3, r2
 802184a:	b2db      	uxtb	r3, r3
 802184c:	2b00      	cmp	r3, #0
 802184e:	d012      	beq.n	8021876 <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8021850:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8021854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021858:	2100      	movs	r1, #0
 802185a:	f1d2 0001 	rsbs	r0, r2, #1
 802185e:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8021862:	eb61 0303 	sbc.w	r3, r1, r3
 8021866:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 802186a:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 802186e:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8021872:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021876:	a18c      	add	r1, pc, #560	; (adr r1, 8021aa8 <arm_softmax_s8+0xaf0>)
 8021878:	e9d1 0100 	ldrd	r0, r1, [r1]
 802187c:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8021880:	17da      	asrs	r2, r3, #31
 8021882:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8021886:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 802188a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 802188e:	fb03 f201 	mul.w	r2, r3, r1
 8021892:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8021896:	fb00 f303 	mul.w	r3, r0, r3
 802189a:	4413      	add	r3, r2
 802189c:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80218a0:	fba0 1202 	umull	r1, r2, r0, r2
 80218a4:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 80218a8:	460a      	mov	r2, r1
 80218aa:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 80218ae:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 80218b2:	4413      	add	r3, r2
 80218b4:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80218b8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80218bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218c0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80218c4:	1851      	adds	r1, r2, r1
 80218c6:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 80218ca:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 80218ce:	414b      	adcs	r3, r1
 80218d0:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80218d4:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 80218d8:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80218dc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80218e0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80218e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218e8:	2b00      	cmp	r3, #0
 80218ea:	da0a      	bge.n	8021902 <arm_softmax_s8+0x94a>
 80218ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80218f0:	1851      	adds	r1, r2, r1
 80218f2:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 80218f6:	f143 0300 	adc.w	r3, r3, #0
 80218fa:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80218fe:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8021902:	f04f 0000 	mov.w	r0, #0
 8021906:	f04f 0100 	mov.w	r1, #0
 802190a:	0fd0      	lsrs	r0, r2, #31
 802190c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021910:	17d9      	asrs	r1, r3, #31
 8021912:	4602      	mov	r2, r0
 8021914:	460b      	mov	r3, r1
 8021916:	4613      	mov	r3, r2
 8021918:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 802191c:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8021920:	4b66      	ldr	r3, [pc, #408]	; (8021abc <arm_softmax_s8+0xb04>)
 8021922:	4413      	add	r3, r2
 8021924:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1672461947)
 8021928:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 802192c:	1c53      	adds	r3, r2, #1
 802192e:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8021932:	2301      	movs	r3, #1
 8021934:	fa03 f202 	lsl.w	r2, r3, r2
 8021938:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 802193c:	4013      	ands	r3, r2
 802193e:	2b00      	cmp	r3, #0
 8021940:	d002      	beq.n	8021948 <arm_softmax_s8+0x990>
 8021942:	f04f 33ff 	mov.w	r3, #4294967295
 8021946:	e000      	b.n	802194a <arm_softmax_s8+0x992>
 8021948:	2300      	movs	r3, #0
 802194a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 802194e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021952:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 8021956:	2300      	movs	r3, #0
 8021958:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 802195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021960:	f04f 0300 	mov.w	r3, #0
 8021964:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8021968:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802196c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8021970:	0fdb      	lsrs	r3, r3, #31
 8021972:	b2da      	uxtb	r2, r3
 8021974:	2300      	movs	r3, #0
 8021976:	4053      	eors	r3, r2
 8021978:	b2db      	uxtb	r3, r3
 802197a:	2b00      	cmp	r3, #0
 802197c:	d012      	beq.n	80219a4 <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 802197e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8021982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021986:	2100      	movs	r1, #0
 8021988:	f1d2 0001 	rsbs	r0, r2, #1
 802198c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8021990:	eb61 0303 	sbc.w	r3, r1, r3
 8021994:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8021998:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 802199c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80219a0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80219a4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80219a8:	17da      	asrs	r2, r3, #31
 80219aa:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80219ae:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 80219b2:	a33f      	add	r3, pc, #252	; (adr r3, 8021ab0 <arm_softmax_s8+0xaf8>)
 80219b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219b8:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80219bc:	fb02 f001 	mul.w	r0, r2, r1
 80219c0:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 80219c4:	fb01 f103 	mul.w	r1, r1, r3
 80219c8:	4401      	add	r1, r0
 80219ca:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 80219ce:	fba0 2302 	umull	r2, r3, r0, r2
 80219d2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80219d6:	4613      	mov	r3, r2
 80219d8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 80219dc:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 80219e0:	18cb      	adds	r3, r1, r3
 80219e2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80219e6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80219ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219ee:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80219f2:	1851      	adds	r1, r2, r1
 80219f4:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 80219f8:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80219fc:	414b      	adcs	r3, r1
 80219fe:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8021a02:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8021a06:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8021a0a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021a0e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8021a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	da0a      	bge.n	8021a30 <arm_softmax_s8+0xa78>
 8021a1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021a1e:	1851      	adds	r1, r2, r1
 8021a20:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8021a24:	f143 0300 	adc.w	r3, r3, #0
 8021a28:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8021a2c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8021a30:	f04f 0000 	mov.w	r0, #0
 8021a34:	f04f 0100 	mov.w	r1, #0
 8021a38:	0fd0      	lsrs	r0, r2, #31
 8021a3a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021a3e:	17d9      	asrs	r1, r3, #31
 8021a40:	4602      	mov	r2, r0
 8021a42:	460b      	mov	r3, r1
 8021a44:	4613      	mov	r3, r2
 8021a46:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021a4a:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8021a4e:	4b1c      	ldr	r3, [pc, #112]	; (8021ac0 <arm_softmax_s8+0xb08>)
 8021a50:	429a      	cmp	r2, r3
 8021a52:	d108      	bne.n	8021a66 <arm_softmax_s8+0xaae>
 8021a54:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8021a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021a5c:	d103      	bne.n	8021a66 <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8021a5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021a62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8021a66:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8021a6a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021a6e:	ea02 0103 	and.w	r1, r2, r3
 8021a72:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021a76:	43da      	mvns	r2, r3
 8021a78:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021a7c:	4013      	ands	r3, r2
 8021a7e:	404b      	eors	r3, r1
 8021a80:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8021a84:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8021a88:	1c53      	adds	r3, r2, #1
 8021a8a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8021a8e:	2301      	movs	r3, #1
 8021a90:	fa03 f202 	lsl.w	r2, r3, r2
 8021a94:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8021a98:	4013      	ands	r3, r2
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d016      	beq.n	8021acc <arm_softmax_s8+0xb14>
 8021a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8021aa2:	e014      	b.n	8021ace <arm_softmax_s8+0xb16>
 8021aa4:	f3af 8000 	nop.w
 8021aa8:	70f5a894 	.word	0x70f5a894
 8021aac:	00000000 	.word	0x00000000
 8021ab0:	63afbe7b 	.word	0x63afbe7b
 8021ab4:	00000000 	.word	0x00000000
 8021ab8:	2aaaaaab 	.word	0x2aaaaaab
 8021abc:	70f5a894 	.word	0x70f5a894
 8021ac0:	63afbe7b 	.word	0x63afbe7b
 8021ac4:	2aaaaaab 	.word	0x2aaaaaab
 8021ac8:	00000000 	.word	0x00000000
 8021acc:	2300      	movs	r3, #0
 8021ace:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8021ad2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021ad6:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 8021ada:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021ade:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8021ae2:	2300      	movs	r3, #0
 8021ae4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021aea:	f04f 0300 	mov.w	r3, #0
 8021aee:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8021af2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021af6:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8021afa:	0fdb      	lsrs	r3, r3, #31
 8021afc:	b2da      	uxtb	r2, r3
 8021afe:	2300      	movs	r3, #0
 8021b00:	4053      	eors	r3, r2
 8021b02:	b2db      	uxtb	r3, r3
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d012      	beq.n	8021b2e <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8021b08:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8021b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b10:	2100      	movs	r1, #0
 8021b12:	f1d2 0001 	rsbs	r0, r2, #1
 8021b16:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8021b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8021b1e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8021b22:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8021b26:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8021b2a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021b2e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8021b32:	17da      	asrs	r2, r3, #31
 8021b34:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8021b38:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8021b3c:	a3a8      	add	r3, pc, #672	; (adr r3, 8021de0 <arm_softmax_s8+0xe28>)
 8021b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b42:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8021b46:	fb02 f001 	mul.w	r0, r2, r1
 8021b4a:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 8021b4e:	fb01 f103 	mul.w	r1, r1, r3
 8021b52:	4401      	add	r1, r0
 8021b54:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8021b58:	fba0 2302 	umull	r2, r3, r0, r2
 8021b5c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8021b60:	4613      	mov	r3, r2
 8021b62:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8021b66:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8021b6a:	18cb      	adds	r3, r1, r3
 8021b6c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8021b70:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8021b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b78:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8021b7c:	1851      	adds	r1, r2, r1
 8021b7e:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8021b82:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8021b86:	414b      	adcs	r3, r1
 8021b88:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8021b8c:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8021b90:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8021b94:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021b98:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8021b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	da0a      	bge.n	8021bba <arm_softmax_s8+0xc02>
 8021ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021ba8:	1851      	adds	r1, r2, r1
 8021baa:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8021bae:	f143 0300 	adc.w	r3, r3, #0
 8021bb2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8021bb6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8021bba:	f04f 0000 	mov.w	r0, #0
 8021bbe:	f04f 0100 	mov.w	r1, #0
 8021bc2:	0fd0      	lsrs	r0, r2, #31
 8021bc4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021bc8:	17d9      	asrs	r1, r3, #31
 8021bca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021bce:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8021bd2:	4603      	mov	r3, r0
 8021bd4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021bd6:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8021bda:	4b7f      	ldr	r3, [pc, #508]	; (8021dd8 <arm_softmax_s8+0xe20>)
 8021bdc:	429a      	cmp	r2, r3
 8021bde:	d10b      	bne.n	8021bf8 <arm_softmax_s8+0xc40>
 8021be0:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8021be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021be8:	d106      	bne.n	8021bf8 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 8021bea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021bee:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8021bf2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021bf6:	6013      	str	r3, [r2, #0]
    return result;
 8021bf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021bfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8021c00:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8021c02:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021c06:	ea02 0103 	and.w	r1, r2, r3
 8021c0a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021c0e:	43da      	mvns	r2, r3
 8021c10:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021c14:	4013      	ands	r3, r2
 8021c16:	404b      	eors	r3, r1
 8021c18:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8021c1c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8021c20:	1c53      	adds	r3, r2, #1
 8021c22:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8021c26:	2301      	movs	r3, #1
 8021c28:	fa03 f202 	lsl.w	r2, r3, r2
 8021c2c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8021c30:	4013      	ands	r3, r2
 8021c32:	2b00      	cmp	r3, #0
 8021c34:	d002      	beq.n	8021c3c <arm_softmax_s8+0xc84>
 8021c36:	f04f 33ff 	mov.w	r3, #4294967295
 8021c3a:	e000      	b.n	8021c3e <arm_softmax_s8+0xc86>
 8021c3c:	2300      	movs	r3, #0
 8021c3e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8021c42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021c46:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8021c4a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021c4e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021c50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021c54:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8021c58:	2300      	movs	r3, #0
 8021c5a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021c60:	f04f 0300 	mov.w	r3, #0
 8021c64:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8021c68:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021c6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021c70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	0fdb      	lsrs	r3, r3, #31
 8021c78:	b2da      	uxtb	r2, r3
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	4053      	eors	r3, r2
 8021c7e:	b2db      	uxtb	r3, r3
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d012      	beq.n	8021caa <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 8021c84:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8021c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c8c:	2100      	movs	r1, #0
 8021c8e:	f1d2 0001 	rsbs	r0, r2, #1
 8021c92:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 8021c96:	eb61 0303 	sbc.w	r3, r1, r3
 8021c9a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8021c9e:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 8021ca2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8021ca6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021caa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021cae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021cb2:	681b      	ldr	r3, [r3, #0]
 8021cb4:	17da      	asrs	r2, r3, #31
 8021cb6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8021cba:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 8021cbe:	a344      	add	r3, pc, #272	; (adr r3, 8021dd0 <arm_softmax_s8+0xe18>)
 8021cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cc4:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8021cc8:	fb02 f001 	mul.w	r0, r2, r1
 8021ccc:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8021cd0:	fb01 f103 	mul.w	r1, r1, r3
 8021cd4:	4401      	add	r1, r0
 8021cd6:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8021cda:	fba0 2302 	umull	r2, r3, r0, r2
 8021cde:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8021ce2:	4613      	mov	r3, r2
 8021ce4:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8021ce8:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8021cec:	18cb      	adds	r3, r1, r3
 8021cee:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8021cf2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8021cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cfa:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8021cfe:	1851      	adds	r1, r2, r1
 8021d00:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8021d04:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8021d08:	414b      	adcs	r3, r1
 8021d0a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8021d0e:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8021d12:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8021d16:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021d1a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8021d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	da0a      	bge.n	8021d3c <arm_softmax_s8+0xd84>
 8021d26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021d2a:	1851      	adds	r1, r2, r1
 8021d2c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8021d30:	f143 0300 	adc.w	r3, r3, #0
 8021d34:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8021d38:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8021d3c:	f04f 0000 	mov.w	r0, #0
 8021d40:	f04f 0100 	mov.w	r1, #0
 8021d44:	0fd0      	lsrs	r0, r2, #31
 8021d46:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021d4a:	17d9      	asrs	r1, r3, #31
 8021d4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021d50:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8021d54:	4603      	mov	r3, r0
 8021d56:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021d58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021d5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021d60:	681a      	ldr	r2, [r3, #0]
 8021d62:	4b1e      	ldr	r3, [pc, #120]	; (8021ddc <arm_softmax_s8+0xe24>)
 8021d64:	429a      	cmp	r2, r3
 8021d66:	d10e      	bne.n	8021d86 <arm_softmax_s8+0xdce>
 8021d68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021d6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021d70:	681b      	ldr	r3, [r3, #0]
 8021d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021d76:	d106      	bne.n	8021d86 <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8021d78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021d7c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8021d80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021d84:	6013      	str	r3, [r2, #0]
    return result;
 8021d86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021d8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021d8e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8021d90:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021d94:	ea02 0103 	and.w	r1, r2, r3
 8021d98:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021d9c:	43da      	mvns	r2, r3
 8021d9e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021da2:	4013      	ands	r3, r2
 8021da4:	404b      	eors	r3, r1
 8021da6:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 8021daa:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8021dae:	1c53      	adds	r3, r2, #1
 8021db0:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8021db4:	2301      	movs	r3, #1
 8021db6:	fa03 f202 	lsl.w	r2, r3, r2
 8021dba:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8021dbe:	4013      	ands	r3, r2
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d011      	beq.n	8021de8 <arm_softmax_s8+0xe30>
 8021dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8021dc8:	e00f      	b.n	8021dea <arm_softmax_s8+0xe32>
 8021dca:	bf00      	nop
 8021dcc:	f3af 8000 	nop.w
 8021dd0:	2f16ac6c 	.word	0x2f16ac6c
 8021dd4:	00000000 	.word	0x00000000
 8021dd8:	4da2cbf2 	.word	0x4da2cbf2
 8021ddc:	2f16ac6c 	.word	0x2f16ac6c
 8021de0:	4da2cbf2 	.word	0x4da2cbf2
 8021de4:	00000000 	.word	0x00000000
 8021de8:	2300      	movs	r3, #0
 8021dea:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8021dee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021df2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8021df6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021dfa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021dfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e00:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8021e04:	2300      	movs	r3, #0
 8021e06:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021e08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021e0c:	f04f 0300 	mov.w	r3, #0
 8021e10:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8021e14:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021e18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	0fdb      	lsrs	r3, r3, #31
 8021e24:	b2da      	uxtb	r2, r3
 8021e26:	2300      	movs	r3, #0
 8021e28:	4053      	eors	r3, r2
 8021e2a:	b2db      	uxtb	r3, r3
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d012      	beq.n	8021e56 <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 8021e30:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8021e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e38:	2100      	movs	r1, #0
 8021e3a:	f1d2 0001 	rsbs	r0, r2, #1
 8021e3e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8021e42:	eb61 0303 	sbc.w	r3, r1, r3
 8021e46:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8021e4a:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8021e4e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8021e52:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021e56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8021e5e:	681b      	ldr	r3, [r3, #0]
 8021e60:	17da      	asrs	r2, r3, #31
 8021e62:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8021e66:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 8021e6a:	a3ab      	add	r3, pc, #684	; (adr r3, 8022118 <arm_softmax_s8+0x1160>)
 8021e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e70:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 8021e74:	fb02 f001 	mul.w	r0, r2, r1
 8021e78:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 8021e7c:	fb01 f103 	mul.w	r1, r1, r3
 8021e80:	4401      	add	r1, r0
 8021e82:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8021e86:	fba0 2302 	umull	r2, r3, r0, r2
 8021e8a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8021e8e:	4613      	mov	r3, r2
 8021e90:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8021e94:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8021e98:	18cb      	adds	r3, r1, r3
 8021e9a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8021e9e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8021ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ea6:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 8021eaa:	1851      	adds	r1, r2, r1
 8021eac:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8021eb0:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8021eb4:	414b      	adcs	r3, r1
 8021eb6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8021eba:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8021ebe:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8021ec2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021ec6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8021eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ece:	2b00      	cmp	r3, #0
 8021ed0:	da0a      	bge.n	8021ee8 <arm_softmax_s8+0xf30>
 8021ed2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021ed6:	1851      	adds	r1, r2, r1
 8021ed8:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8021edc:	f143 0300 	adc.w	r3, r3, #0
 8021ee0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8021ee4:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8021ee8:	f04f 0000 	mov.w	r0, #0
 8021eec:	f04f 0100 	mov.w	r1, #0
 8021ef0:	0fd0      	lsrs	r0, r2, #31
 8021ef2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021ef6:	17d9      	asrs	r1, r3, #31
 8021ef8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021efc:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8021f00:	4603      	mov	r3, r0
 8021f02:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021f04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8021f0c:	681a      	ldr	r2, [r3, #0]
 8021f0e:	4b80      	ldr	r3, [pc, #512]	; (8022110 <arm_softmax_s8+0x1158>)
 8021f10:	429a      	cmp	r2, r3
 8021f12:	d10e      	bne.n	8021f32 <arm_softmax_s8+0xf7a>
 8021f14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021f22:	d106      	bne.n	8021f32 <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 8021f24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f28:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8021f2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021f30:	6013      	str	r3, [r2, #0]
    return result;
 8021f32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8021f3a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8021f3c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021f40:	ea02 0103 	and.w	r1, r2, r3
 8021f44:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8021f48:	43da      	mvns	r2, r3
 8021f4a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021f4e:	4013      	ands	r3, r2
 8021f50:	404b      	eors	r3, r1
 8021f52:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8021f56:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8021f5a:	1c53      	adds	r3, r2, #1
 8021f5c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8021f60:	2301      	movs	r3, #1
 8021f62:	fa03 f202 	lsl.w	r2, r3, r2
 8021f66:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8021f6a:	4013      	ands	r3, r2
 8021f6c:	2b00      	cmp	r3, #0
 8021f6e:	d002      	beq.n	8021f76 <arm_softmax_s8+0xfbe>
 8021f70:	f04f 33ff 	mov.w	r3, #4294967295
 8021f74:	e000      	b.n	8021f78 <arm_softmax_s8+0xfc0>
 8021f76:	2300      	movs	r3, #0
 8021f78:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8021f7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f80:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8021f84:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8021f88:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021f8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f8e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8021f92:	2300      	movs	r3, #0
 8021f94:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021f9a:	f04f 0300 	mov.w	r3, #0
 8021f9e:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8021fa2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021fa6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8021fae:	681b      	ldr	r3, [r3, #0]
 8021fb0:	0fdb      	lsrs	r3, r3, #31
 8021fb2:	b2da      	uxtb	r2, r3
 8021fb4:	2300      	movs	r3, #0
 8021fb6:	4053      	eors	r3, r2
 8021fb8:	b2db      	uxtb	r3, r3
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	d012      	beq.n	8021fe4 <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 8021fbe:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8021fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fc6:	2100      	movs	r1, #0
 8021fc8:	f1d2 0001 	rsbs	r0, r2, #1
 8021fcc:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8021fd0:	eb61 0303 	sbc.w	r3, r1, r3
 8021fd4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8021fd8:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8021fdc:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8021fe0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021fe4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8021fec:	681b      	ldr	r3, [r3, #0]
 8021fee:	17da      	asrs	r2, r3, #31
 8021ff0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8021ff4:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8021ff8:	a343      	add	r3, pc, #268	; (adr r3, 8022108 <arm_softmax_s8+0x1150>)
 8021ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ffe:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8022002:	fb02 f001 	mul.w	r0, r2, r1
 8022006:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 802200a:	fb01 f103 	mul.w	r1, r1, r3
 802200e:	4401      	add	r1, r0
 8022010:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8022014:	fba0 2302 	umull	r2, r3, r0, r2
 8022018:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 802201c:	4613      	mov	r3, r2
 802201e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8022022:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8022026:	18cb      	adds	r3, r1, r3
 8022028:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 802202c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8022030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022034:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8022038:	1851      	adds	r1, r2, r1
 802203a:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 802203e:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8022042:	414b      	adcs	r3, r1
 8022044:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8022048:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 802204c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8022050:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022054:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8022058:	e9d3 2300 	ldrd	r2, r3, [r3]
 802205c:	2b00      	cmp	r3, #0
 802205e:	da0a      	bge.n	8022076 <arm_softmax_s8+0x10be>
 8022060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022064:	1851      	adds	r1, r2, r1
 8022066:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 802206a:	f143 0300 	adc.w	r3, r3, #0
 802206e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8022072:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8022076:	f04f 0000 	mov.w	r0, #0
 802207a:	f04f 0100 	mov.w	r1, #0
 802207e:	0fd0      	lsrs	r0, r2, #31
 8022080:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022084:	17d9      	asrs	r1, r3, #31
 8022086:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802208a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 802208e:	4603      	mov	r3, r0
 8022090:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022092:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802209a:	681a      	ldr	r2, [r3, #0]
 802209c:	4b1d      	ldr	r3, [pc, #116]	; (8022114 <arm_softmax_s8+0x115c>)
 802209e:	429a      	cmp	r2, r3
 80220a0:	d10e      	bne.n	80220c0 <arm_softmax_s8+0x1108>
 80220a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80220a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80220aa:	681b      	ldr	r3, [r3, #0]
 80220ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80220b0:	d106      	bne.n	80220c0 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 80220b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80220b6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80220ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80220be:	6013      	str	r3, [r2, #0]
    return result;
 80220c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80220c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80220c8:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80220ca:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80220ce:	ea02 0103 	and.w	r1, r2, r3
 80220d2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80220d6:	43da      	mvns	r2, r3
 80220d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80220dc:	4013      	ands	r3, r2
 80220de:	404b      	eors	r3, r1
 80220e0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 80220e4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80220e8:	1c53      	adds	r3, r2, #1
 80220ea:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80220ee:	2301      	movs	r3, #1
 80220f0:	fa03 f202 	lsl.w	r2, r3, r2
 80220f4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80220f8:	4013      	ands	r3, r2
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d010      	beq.n	8022120 <arm_softmax_s8+0x1168>
 80220fe:	f04f 33ff 	mov.w	r3, #4294967295
 8022102:	e00e      	b.n	8022122 <arm_softmax_s8+0x116a>
 8022104:	f3af 8000 	nop.w
 8022108:	02582ab7 	.word	0x02582ab7
 802210c:	00000000 	.word	0x00000000
 8022110:	1152aaa4 	.word	0x1152aaa4
 8022114:	02582ab7 	.word	0x02582ab7
 8022118:	1152aaa4 	.word	0x1152aaa4
 802211c:	00000000 	.word	0x00000000
 8022120:	2300      	movs	r3, #0
 8022122:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8022126:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802212a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 802212e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022132:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022134:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022138:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 802213c:	2300      	movs	r3, #0
 802213e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022144:	f04f 0300 	mov.w	r3, #0
 8022148:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 802214c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022154:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	0fdb      	lsrs	r3, r3, #31
 802215c:	b2da      	uxtb	r2, r3
 802215e:	2300      	movs	r3, #0
 8022160:	4053      	eors	r3, r2
 8022162:	b2db      	uxtb	r3, r3
 8022164:	2b00      	cmp	r3, #0
 8022166:	d012      	beq.n	802218e <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8022168:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 802216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022170:	2100      	movs	r1, #0
 8022172:	f1d2 0001 	rsbs	r0, r2, #1
 8022176:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 802217a:	eb61 0303 	sbc.w	r3, r1, r3
 802217e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8022182:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8022186:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 802218a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802218e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022192:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	17da      	asrs	r2, r3, #31
 802219a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 802219e:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 80221a2:	4ad3      	ldr	r2, [pc, #844]	; (80224f0 <arm_softmax_s8+0x1538>)
 80221a4:	f04f 0300 	mov.w	r3, #0
 80221a8:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80221ac:	fb02 f001 	mul.w	r0, r2, r1
 80221b0:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 80221b4:	fb01 f103 	mul.w	r1, r1, r3
 80221b8:	4401      	add	r1, r0
 80221ba:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 80221be:	fba0 2302 	umull	r2, r3, r0, r2
 80221c2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80221c6:	4613      	mov	r3, r2
 80221c8:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 80221cc:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80221d0:	18cb      	adds	r3, r1, r3
 80221d2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80221d6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80221da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221de:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 80221e2:	1851      	adds	r1, r2, r1
 80221e4:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80221e8:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 80221ec:	414b      	adcs	r3, r1
 80221ee:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80221f2:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80221f6:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80221fa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80221fe:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8022202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022206:	2b00      	cmp	r3, #0
 8022208:	da0a      	bge.n	8022220 <arm_softmax_s8+0x1268>
 802220a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802220e:	1851      	adds	r1, r2, r1
 8022210:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8022214:	f143 0300 	adc.w	r3, r3, #0
 8022218:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802221c:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8022220:	f04f 0000 	mov.w	r0, #0
 8022224:	f04f 0100 	mov.w	r1, #0
 8022228:	0fd0      	lsrs	r0, r2, #31
 802222a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802222e:	17d9      	asrs	r1, r3, #31
 8022230:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022234:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8022238:	4603      	mov	r3, r0
 802223a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802223c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022240:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022244:	681a      	ldr	r2, [r3, #0]
 8022246:	4baa      	ldr	r3, [pc, #680]	; (80224f0 <arm_softmax_s8+0x1538>)
 8022248:	429a      	cmp	r2, r3
 802224a:	d10e      	bne.n	802226a <arm_softmax_s8+0x12b2>
 802224c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022250:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802225a:	d106      	bne.n	802226a <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 802225c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022260:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8022264:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022268:	6013      	str	r3, [r2, #0]
    return result;
 802226a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802226e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8022272:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8022274:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022278:	ea02 0103 	and.w	r1, r2, r3
 802227c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022280:	43da      	mvns	r2, r3
 8022282:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022286:	4013      	ands	r3, r2
 8022288:	404b      	eors	r3, r1
 802228a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 802228e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8022292:	1c53      	adds	r3, r2, #1
 8022294:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8022298:	2301      	movs	r3, #1
 802229a:	fa03 f202 	lsl.w	r2, r3, r2
 802229e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80222a2:	4013      	ands	r3, r2
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	d002      	beq.n	80222ae <arm_softmax_s8+0x12f6>
 80222a8:	f04f 33ff 	mov.w	r3, #4294967295
 80222ac:	e000      	b.n	80222b0 <arm_softmax_s8+0x12f8>
 80222ae:	2300      	movs	r3, #0
 80222b0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80222b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80222b8:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80222bc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80222c0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80222c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80222c6:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80222ca:	2300      	movs	r3, #0
 80222cc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80222ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80222d2:	f04f 0300 	mov.w	r3, #0
 80222d6:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80222da:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80222de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80222e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80222e6:	681b      	ldr	r3, [r3, #0]
 80222e8:	0fdb      	lsrs	r3, r3, #31
 80222ea:	b2da      	uxtb	r2, r3
 80222ec:	2300      	movs	r3, #0
 80222ee:	4053      	eors	r3, r2
 80222f0:	b2db      	uxtb	r3, r3
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	d012      	beq.n	802231c <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 80222f6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80222fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222fe:	2100      	movs	r1, #0
 8022300:	f1d2 0001 	rsbs	r0, r2, #1
 8022304:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8022308:	eb61 0303 	sbc.w	r3, r1, r3
 802230c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8022310:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8022314:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8022318:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802231c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022320:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	17da      	asrs	r2, r3, #31
 8022328:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 802232c:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8022330:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8022334:	f04f 0300 	mov.w	r3, #0
 8022338:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 802233c:	fb02 f001 	mul.w	r0, r2, r1
 8022340:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 8022344:	fb01 f103 	mul.w	r1, r1, r3
 8022348:	4401      	add	r1, r0
 802234a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 802234e:	fba0 2302 	umull	r2, r3, r0, r2
 8022352:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8022356:	4613      	mov	r3, r2
 8022358:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 802235c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8022360:	18cb      	adds	r3, r1, r3
 8022362:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8022366:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 802236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802236e:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8022372:	1851      	adds	r1, r2, r1
 8022374:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8022378:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 802237c:	414b      	adcs	r3, r1
 802237e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8022382:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8022386:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 802238a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802238e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8022392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022396:	2b00      	cmp	r3, #0
 8022398:	da0a      	bge.n	80223b0 <arm_softmax_s8+0x13f8>
 802239a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802239e:	1851      	adds	r1, r2, r1
 80223a0:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80223a4:	f143 0300 	adc.w	r3, r3, #0
 80223a8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80223ac:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80223b0:	f04f 0000 	mov.w	r0, #0
 80223b4:	f04f 0100 	mov.w	r1, #0
 80223b8:	0fd0      	lsrs	r0, r2, #31
 80223ba:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80223be:	17d9      	asrs	r1, r3, #31
 80223c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80223c4:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80223c8:	4603      	mov	r3, r0
 80223ca:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80223cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80223d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	2bf2      	cmp	r3, #242	; 0xf2
 80223d8:	d10e      	bne.n	80223f8 <arm_softmax_s8+0x1440>
 80223da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80223de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80223e2:	681b      	ldr	r3, [r3, #0]
 80223e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80223e8:	d106      	bne.n	80223f8 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 80223ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80223ee:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80223f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80223f6:	6013      	str	r3, [r2, #0]
    return result;
 80223f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80223fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8022400:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8022402:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022406:	ea02 0103 	and.w	r1, r2, r3
 802240a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 802240e:	43da      	mvns	r2, r3
 8022410:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022414:	4013      	ands	r3, r2
 8022416:	404b      	eors	r3, r1
 8022418:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    mask = MASK_IF_ZERO(val);
 802241c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8022420:	2b00      	cmp	r3, #0
 8022422:	d102      	bne.n	802242a <arm_softmax_s8+0x1472>
 8022424:	f04f 33ff 	mov.w	r3, #4294967295
 8022428:	e000      	b.n	802242c <arm_softmax_s8+0x1474>
 802242a:	2300      	movs	r3, #0
 802242c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8022430:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022434:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022438:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 802243c:	43da      	mvns	r2, r3
 802243e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022442:	4013      	ands	r3, r2
 8022444:	404b      	eors	r3, r1
 8022446:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 802244a:	2300      	movs	r3, #0
 802244c:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022454:	3b01      	subs	r3, #1
 8022456:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 802245a:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 802245e:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8022462:	4013      	ands	r3, r2
 8022464:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8022468:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 802246c:	131b      	asrs	r3, r3, #12
 802246e:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 8022472:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8022476:	105b      	asrs	r3, r3, #1
 8022478:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 802247c:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8022480:	2b00      	cmp	r3, #0
 8022482:	da04      	bge.n	802248e <arm_softmax_s8+0x14d6>
        threshold++;
 8022484:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8022488:	3301      	adds	r3, #1
 802248a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 802248e:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 8022492:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8022496:	429a      	cmp	r2, r3
 8022498:	dd04      	ble.n	80224a4 <arm_softmax_s8+0x14ec>
        result++;
 802249a:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 802249e:	3301      	adds	r3, #1
 80224a0:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80224a4:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80224a8:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 80224ac:	4413      	add	r3, r2
 80224ae:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 80224b2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80224b6:	3301      	adds	r3, #1
 80224b8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80224bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80224c0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80224c4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80224c8:	681b      	ldr	r3, [r3, #0]
 80224ca:	429a      	cmp	r2, r3
 80224cc:	f6fe add2 	blt.w	8021074 <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 80224d0:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 80224d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80224d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80224dc:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 80224de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80224e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d103      	bne.n	80224f4 <arm_softmax_s8+0x153c>
    return 32U;
 80224ec:	2320      	movs	r3, #32
 80224ee:	e009      	b.n	8022504 <arm_softmax_s8+0x154c>
 80224f0:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 80224f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80224f8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	fab3 f383 	clz	r3, r3
 8022502:	b2db      	uxtb	r3, r3
 8022504:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8022508:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 802250c:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8022510:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8022514:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8022518:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 802251c:	fa02 f303 	lsl.w	r3, r2, r3
 8022520:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8022524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022528:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 802252c:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 802252e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022532:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8022536:	681b      	ldr	r3, [r3, #0]
 8022538:	17da      	asrs	r2, r3, #31
 802253a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 802253e:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8022542:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022546:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 802254a:	4602      	mov	r2, r0
 802254c:	18d3      	adds	r3, r2, r3
 802254e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8022552:	460b      	mov	r3, r1
 8022554:	f143 0300 	adc.w	r3, r3, #0
 8022558:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 802255c:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8022560:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8022564:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8022568:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022570:	2b00      	cmp	r3, #0
 8022572:	db04      	blt.n	802257e <arm_softmax_s8+0x15c6>
 8022574:	f04f 0001 	mov.w	r0, #1
 8022578:	f04f 0100 	mov.w	r1, #0
 802257c:	e003      	b.n	8022586 <arm_softmax_s8+0x15ce>
 802257e:	f04f 30ff 	mov.w	r0, #4294967295
 8022582:	f04f 31ff 	mov.w	r1, #4294967295
 8022586:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802258e:	1884      	adds	r4, r0, r2
 8022590:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8022594:	eb41 0303 	adc.w	r3, r1, r3
 8022598:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 802259c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80225a0:	460b      	mov	r3, r1
 80225a2:	0fdb      	lsrs	r3, r3, #31
 80225a4:	2200      	movs	r2, #0
 80225a6:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80225aa:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80225ae:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80225b2:	4602      	mov	r2, r0
 80225b4:	189b      	adds	r3, r3, r2
 80225b6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80225ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80225be:	460a      	mov	r2, r1
 80225c0:	4153      	adcs	r3, r2
 80225c2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80225c6:	f04f 0200 	mov.w	r2, #0
 80225ca:	f04f 0300 	mov.w	r3, #0
 80225ce:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 80225d2:	084a      	lsrs	r2, r1, #1
 80225d4:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80225d8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80225dc:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80225e0:	104b      	asrs	r3, r1, #1
 80225e2:	4610      	mov	r0, r2
 80225e4:	4619      	mov	r1, r3
 80225e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80225ea:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80225ee:	4603      	mov	r3, r0
 80225f0:	6013      	str	r3, [r2, #0]
 80225f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80225f6:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80225fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80225fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8022602:	681b      	ldr	r3, [r3, #0]
 8022604:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022606:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802260a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 802260e:	2300      	movs	r3, #0
 8022610:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022616:	f04f 0300 	mov.w	r3, #0
 802261a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 802261e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022626:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 802262a:	681b      	ldr	r3, [r3, #0]
 802262c:	0fdb      	lsrs	r3, r3, #31
 802262e:	b2da      	uxtb	r2, r3
 8022630:	2301      	movs	r3, #1
 8022632:	4053      	eors	r3, r2
 8022634:	b2db      	uxtb	r3, r3
 8022636:	2b00      	cmp	r3, #0
 8022638:	d012      	beq.n	8022660 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 802263a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022642:	2100      	movs	r1, #0
 8022644:	f1d2 0001 	rsbs	r0, r2, #1
 8022648:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 802264c:	eb61 0303 	sbc.w	r3, r1, r3
 8022650:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8022654:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8022658:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802265c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022660:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022664:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8022668:	681b      	ldr	r3, [r3, #0]
 802266a:	17da      	asrs	r2, r3, #31
 802266c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8022670:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 8022674:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8022678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802267c:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8022680:	fb02 f001 	mul.w	r0, r2, r1
 8022684:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8022688:	fb01 f103 	mul.w	r1, r1, r3
 802268c:	4401      	add	r1, r0
 802268e:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8022692:	fba0 2302 	umull	r2, r3, r0, r2
 8022696:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 802269a:	4613      	mov	r3, r2
 802269c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 80226a0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80226a4:	18cb      	adds	r3, r1, r3
 80226a6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80226aa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80226ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226b2:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 80226b6:	1851      	adds	r1, r2, r1
 80226b8:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 80226bc:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 80226c0:	414b      	adcs	r3, r1
 80226c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80226c6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80226ca:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80226ce:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80226d2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80226d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	da0a      	bge.n	80226f4 <arm_softmax_s8+0x173c>
 80226de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80226e2:	1851      	adds	r1, r2, r1
 80226e4:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 80226e8:	f143 0300 	adc.w	r3, r3, #0
 80226ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80226f0:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80226f4:	f04f 0000 	mov.w	r0, #0
 80226f8:	f04f 0100 	mov.w	r1, #0
 80226fc:	0fd0      	lsrs	r0, r2, #31
 80226fe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022702:	17d9      	asrs	r1, r3, #31
 8022704:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022708:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 802270c:	4603      	mov	r3, r0
 802270e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022710:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022714:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 802271e:	d10e      	bne.n	802273e <arm_softmax_s8+0x1786>
 8022720:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022724:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8022728:	681b      	ldr	r3, [r3, #0]
 802272a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802272e:	d106      	bne.n	802273e <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8022730:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022734:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8022738:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802273c:	6013      	str	r3, [r2, #0]
    return result;
 802273e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022742:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8022746:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8022748:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802274c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8022750:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 8022754:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 8022756:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802275a:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 802275e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022762:	6013      	str	r3, [r2, #0]
 8022764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022768:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 802276c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022770:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	6013      	str	r3, [r2, #0]
 8022778:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802277c:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8022780:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022784:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802278c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022790:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8022794:	2300      	movs	r3, #0
 8022796:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802279c:	f04f 0300 	mov.w	r3, #0
 80227a0:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80227a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80227a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80227ac:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	0fdb      	lsrs	r3, r3, #31
 80227b4:	b2da      	uxtb	r2, r3
 80227b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80227ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	0fdb      	lsrs	r3, r3, #31
 80227c2:	b2db      	uxtb	r3, r3
 80227c4:	4053      	eors	r3, r2
 80227c6:	b2db      	uxtb	r3, r3
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	d012      	beq.n	80227f2 <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 80227cc:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80227d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227d4:	2100      	movs	r1, #0
 80227d6:	f1d2 0001 	rsbs	r0, r2, #1
 80227da:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 80227de:	eb61 0303 	sbc.w	r3, r1, r3
 80227e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80227e6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80227ea:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80227ee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80227f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80227f6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80227fa:	681b      	ldr	r3, [r3, #0]
 80227fc:	17da      	asrs	r2, r3, #31
 80227fe:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8022802:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8022806:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802280a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	17da      	asrs	r2, r3, #31
 8022812:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8022816:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 802281a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802281e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022822:	460b      	mov	r3, r1
 8022824:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8022828:	fb02 f203 	mul.w	r2, r2, r3
 802282c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8022830:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8022834:	e9c4 0100 	strd	r0, r1, [r4]
 8022838:	4601      	mov	r1, r0
 802283a:	fb01 f303 	mul.w	r3, r1, r3
 802283e:	4413      	add	r3, r2
 8022840:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8022844:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8022848:	fba2 1201 	umull	r1, r2, r2, r1
 802284c:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8022850:	460a      	mov	r2, r1
 8022852:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8022856:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802285a:	4413      	add	r3, r2
 802285c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8022860:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8022864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022868:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 802286c:	1851      	adds	r1, r2, r1
 802286e:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8022872:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8022876:	414b      	adcs	r3, r1
 8022878:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 802287c:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8022880:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8022884:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022888:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022890:	2b00      	cmp	r3, #0
 8022892:	da0a      	bge.n	80228aa <arm_softmax_s8+0x18f2>
 8022894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022898:	1851      	adds	r1, r2, r1
 802289a:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 802289e:	f143 0300 	adc.w	r3, r3, #0
 80228a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80228a6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80228aa:	f04f 0000 	mov.w	r0, #0
 80228ae:	f04f 0100 	mov.w	r1, #0
 80228b2:	0fd0      	lsrs	r0, r2, #31
 80228b4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80228b8:	17d9      	asrs	r1, r3, #31
 80228ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80228be:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80228c2:	4603      	mov	r3, r0
 80228c4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80228c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80228ca:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80228ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80228d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80228d6:	6812      	ldr	r2, [r2, #0]
 80228d8:	681b      	ldr	r3, [r3, #0]
 80228da:	429a      	cmp	r2, r3
 80228dc:	d10e      	bne.n	80228fc <arm_softmax_s8+0x1944>
 80228de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80228e2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80228ec:	d106      	bne.n	80228fc <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 80228ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80228f2:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80228f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80228fa:	6013      	str	r3, [r2, #0]
    return result;
 80228fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022900:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8022904:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022906:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802290a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 802290e:	681b      	ldr	r3, [r3, #0]
 8022910:	1a99      	subs	r1, r3, r2
 8022912:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022916:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 802291a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802291e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	6013      	str	r3, [r2, #0]
 8022926:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802292a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 802292e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8022930:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022934:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8022938:	2300      	movs	r3, #0
 802293a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802293c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022940:	f04f 0300 	mov.w	r3, #0
 8022944:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8022948:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802294c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022950:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8022954:	681b      	ldr	r3, [r3, #0]
 8022956:	0fdb      	lsrs	r3, r3, #31
 8022958:	b2da      	uxtb	r2, r3
 802295a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802295e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8022962:	681b      	ldr	r3, [r3, #0]
 8022964:	0fdb      	lsrs	r3, r3, #31
 8022966:	b2db      	uxtb	r3, r3
 8022968:	4053      	eors	r3, r2
 802296a:	b2db      	uxtb	r3, r3
 802296c:	2b00      	cmp	r3, #0
 802296e:	d012      	beq.n	8022996 <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8022970:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8022974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022978:	2100      	movs	r1, #0
 802297a:	f1d2 0001 	rsbs	r0, r2, #1
 802297e:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 8022982:	eb61 0303 	sbc.w	r3, r1, r3
 8022986:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 802298a:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 802298e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8022992:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022996:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802299a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 802299e:	681b      	ldr	r3, [r3, #0]
 80229a0:	17da      	asrs	r2, r3, #31
 80229a2:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80229a6:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 80229aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80229ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80229b2:	681b      	ldr	r3, [r3, #0]
 80229b4:	17da      	asrs	r2, r3, #31
 80229b6:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80229ba:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 80229be:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80229c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80229c6:	460b      	mov	r3, r1
 80229c8:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 80229cc:	fb02 f203 	mul.w	r2, r2, r3
 80229d0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80229d4:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 80229d8:	e9c4 0100 	strd	r0, r1, [r4]
 80229dc:	4601      	mov	r1, r0
 80229de:	fb01 f303 	mul.w	r3, r1, r3
 80229e2:	4413      	add	r3, r2
 80229e4:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80229e8:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 80229ec:	fba2 1201 	umull	r1, r2, r2, r1
 80229f0:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 80229f4:	460a      	mov	r2, r1
 80229f6:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 80229fa:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 80229fe:	4413      	add	r3, r2
 8022a00:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8022a04:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8022a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a0c:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8022a10:	1851      	adds	r1, r2, r1
 8022a12:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8022a16:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8022a1a:	414b      	adcs	r3, r1
 8022a1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8022a20:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8022a24:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8022a28:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022a2c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8022a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	da0a      	bge.n	8022a4e <arm_softmax_s8+0x1a96>
 8022a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022a3c:	1851      	adds	r1, r2, r1
 8022a3e:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8022a42:	f143 0300 	adc.w	r3, r3, #0
 8022a46:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8022a4a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8022a4e:	f04f 0000 	mov.w	r0, #0
 8022a52:	f04f 0100 	mov.w	r1, #0
 8022a56:	0fd0      	lsrs	r0, r2, #31
 8022a58:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022a5c:	17d9      	asrs	r1, r3, #31
 8022a5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022a62:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8022a66:	4603      	mov	r3, r0
 8022a68:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022a6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022a6e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8022a72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022a76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8022a7a:	6812      	ldr	r2, [r2, #0]
 8022a7c:	681b      	ldr	r3, [r3, #0]
 8022a7e:	429a      	cmp	r2, r3
 8022a80:	d10e      	bne.n	8022aa0 <arm_softmax_s8+0x1ae8>
 8022a82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022a86:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8022a8a:	681b      	ldr	r3, [r3, #0]
 8022a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022a90:	d106      	bne.n	8022aa0 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 8022a92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022a96:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8022a9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022a9e:	6013      	str	r3, [r2, #0]
    return result;
 8022aa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022aa4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8022aa8:	681a      	ldr	r2, [r3, #0]
 8022aaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022aae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8022ab2:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8022ab4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022ab8:	4619      	mov	r1, r3
 8022aba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022abe:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8022ac2:	1e4b      	subs	r3, r1, #1
 8022ac4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8022ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022aca:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8022ace:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ad2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8022ad6:	681b      	ldr	r3, [r3, #0]
 8022ad8:	009b      	lsls	r3, r3, #2
 8022ada:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8022adc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ae0:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8022ae4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ae8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8022aec:	6812      	ldr	r2, [r2, #0]
 8022aee:	681b      	ldr	r3, [r3, #0]
 8022af0:	429a      	cmp	r2, r3
 8022af2:	dd02      	ble.n	8022afa <arm_softmax_s8+0x1b42>
 8022af4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8022af8:	e000      	b.n	8022afc <arm_softmax_s8+0x1b44>
 8022afa:	2000      	movs	r0, #0
 8022afc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b00:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8022b04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b08:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8022b0c:	6812      	ldr	r2, [r2, #0]
 8022b0e:	681b      	ldr	r3, [r3, #0]
 8022b10:	429a      	cmp	r2, r3
 8022b12:	dd01      	ble.n	8022b18 <arm_softmax_s8+0x1b60>
 8022b14:	2200      	movs	r2, #0
 8022b16:	e001      	b.n	8022b1c <arm_softmax_s8+0x1b64>
 8022b18:	f04f 32ff 	mov.w	r2, #4294967295
 8022b1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8022b24:	681b      	ldr	r3, [r3, #0]
 8022b26:	ea02 0103 	and.w	r1, r2, r3
 8022b2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b2e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8022b32:	ea81 0300 	eor.w	r3, r1, r0
 8022b36:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8022b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b3c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8022b40:	681b      	ldr	r3, [r3, #0]
 8022b42:	425a      	negs	r2, r3
 8022b44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	4293      	cmp	r3, r2
 8022b50:	da02      	bge.n	8022b58 <arm_softmax_s8+0x1ba0>
 8022b52:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8022b56:	e000      	b.n	8022b5a <arm_softmax_s8+0x1ba2>
 8022b58:	2000      	movs	r0, #0
 8022b5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b5e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	425a      	negs	r2, r3
 8022b66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b6a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8022b6e:	681b      	ldr	r3, [r3, #0]
 8022b70:	4293      	cmp	r3, r2
 8022b72:	da01      	bge.n	8022b78 <arm_softmax_s8+0x1bc0>
 8022b74:	2200      	movs	r2, #0
 8022b76:	e001      	b.n	8022b7c <arm_softmax_s8+0x1bc4>
 8022b78:	f04f 32ff 	mov.w	r2, #4294967295
 8022b7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8022b84:	681b      	ldr	r3, [r3, #0]
 8022b86:	ea02 0103 	and.w	r1, r2, r3
 8022b8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b8e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8022b92:	ea81 0300 	eor.w	r3, r1, r0
 8022b96:	6013      	str	r3, [r2, #0]
    return result;
 8022b98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8022ba0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022ba2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ba6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8022baa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022bae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8022bb2:	681b      	ldr	r3, [r3, #0]
 8022bb4:	440b      	add	r3, r1
 8022bb6:	6013      	str	r3, [r2, #0]
 8022bb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022bbc:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8022bc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022bc4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8022bc8:	681b      	ldr	r3, [r3, #0]
 8022bca:	6013      	str	r3, [r2, #0]
 8022bcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022bd0:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8022bd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022bd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8022bdc:	681b      	ldr	r3, [r3, #0]
 8022bde:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022be0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022be4:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8022be8:	2300      	movs	r3, #0
 8022bea:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022bf0:	f04f 0300 	mov.w	r3, #0
 8022bf4:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8022bf8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022bfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c00:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	0fdb      	lsrs	r3, r3, #31
 8022c08:	b2da      	uxtb	r2, r3
 8022c0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c0e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	0fdb      	lsrs	r3, r3, #31
 8022c16:	b2db      	uxtb	r3, r3
 8022c18:	4053      	eors	r3, r2
 8022c1a:	b2db      	uxtb	r3, r3
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	d012      	beq.n	8022c46 <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8022c20:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8022c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c28:	2100      	movs	r1, #0
 8022c2a:	f1d2 0001 	rsbs	r0, r2, #1
 8022c2e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8022c32:	eb61 0303 	sbc.w	r3, r1, r3
 8022c36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8022c3a:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8022c3e:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8022c42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022c46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c4a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8022c4e:	681b      	ldr	r3, [r3, #0]
 8022c50:	17da      	asrs	r2, r3, #31
 8022c52:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8022c56:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8022c5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c5e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8022c62:	681b      	ldr	r3, [r3, #0]
 8022c64:	17da      	asrs	r2, r3, #31
 8022c66:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8022c6a:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8022c6e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022c72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022c76:	460b      	mov	r3, r1
 8022c78:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8022c7c:	fb02 f203 	mul.w	r2, r2, r3
 8022c80:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8022c84:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8022c88:	e9c4 0100 	strd	r0, r1, [r4]
 8022c8c:	4601      	mov	r1, r0
 8022c8e:	fb01 f303 	mul.w	r3, r1, r3
 8022c92:	4413      	add	r3, r2
 8022c94:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8022c98:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8022c9c:	fba2 1201 	umull	r1, r2, r2, r1
 8022ca0:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 8022ca4:	460a      	mov	r2, r1
 8022ca6:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 8022caa:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8022cae:	4413      	add	r3, r2
 8022cb0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8022cb4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8022cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cbc:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8022cc0:	1851      	adds	r1, r2, r1
 8022cc2:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8022cc6:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8022cca:	414b      	adcs	r3, r1
 8022ccc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8022cd0:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8022cd4:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8022cd8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022cdc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8022ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ce4:	2b00      	cmp	r3, #0
 8022ce6:	da0a      	bge.n	8022cfe <arm_softmax_s8+0x1d46>
 8022ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022cec:	1851      	adds	r1, r2, r1
 8022cee:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8022cf2:	f143 0300 	adc.w	r3, r3, #0
 8022cf6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8022cfa:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8022cfe:	f04f 0000 	mov.w	r0, #0
 8022d02:	f04f 0100 	mov.w	r1, #0
 8022d06:	0fd0      	lsrs	r0, r2, #31
 8022d08:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022d0c:	17d9      	asrs	r1, r3, #31
 8022d0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d12:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8022d16:	4603      	mov	r3, r0
 8022d18:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022d1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d1e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8022d22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d26:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8022d2a:	6812      	ldr	r2, [r2, #0]
 8022d2c:	681b      	ldr	r3, [r3, #0]
 8022d2e:	429a      	cmp	r2, r3
 8022d30:	d10e      	bne.n	8022d50 <arm_softmax_s8+0x1d98>
 8022d32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d36:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8022d3a:	681b      	ldr	r3, [r3, #0]
 8022d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022d40:	d106      	bne.n	8022d50 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 8022d42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d46:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8022d4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022d4e:	6013      	str	r3, [r2, #0]
    return result;
 8022d50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8022d58:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022d5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d5e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8022d62:	681b      	ldr	r3, [r3, #0]
 8022d64:	1a99      	subs	r1, r3, r2
 8022d66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d6a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8022d6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8022d76:	681b      	ldr	r3, [r3, #0]
 8022d78:	6013      	str	r3, [r2, #0]
 8022d7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d7e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8022d82:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8022d84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d88:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8022d8c:	2300      	movs	r3, #0
 8022d8e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022d90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022d94:	f04f 0300 	mov.w	r3, #0
 8022d98:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8022d9c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022da0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022da4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8022da8:	681b      	ldr	r3, [r3, #0]
 8022daa:	0fdb      	lsrs	r3, r3, #31
 8022dac:	b2da      	uxtb	r2, r3
 8022dae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022db2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8022db6:	681b      	ldr	r3, [r3, #0]
 8022db8:	0fdb      	lsrs	r3, r3, #31
 8022dba:	b2db      	uxtb	r3, r3
 8022dbc:	4053      	eors	r3, r2
 8022dbe:	b2db      	uxtb	r3, r3
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	d012      	beq.n	8022dea <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8022dc4:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8022dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dcc:	2100      	movs	r1, #0
 8022dce:	f1d2 0001 	rsbs	r0, r2, #1
 8022dd2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8022dd6:	eb61 0303 	sbc.w	r3, r1, r3
 8022dda:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8022dde:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8022de2:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8022de6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022dea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022dee:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8022df2:	681b      	ldr	r3, [r3, #0]
 8022df4:	17da      	asrs	r2, r3, #31
 8022df6:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8022dfa:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8022dfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022e02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8022e06:	681b      	ldr	r3, [r3, #0]
 8022e08:	17da      	asrs	r2, r3, #31
 8022e0a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8022e0e:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8022e12:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8022e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e1a:	460b      	mov	r3, r1
 8022e1c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8022e20:	fb02 f203 	mul.w	r2, r2, r3
 8022e24:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8022e28:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8022e2c:	e9c4 0100 	strd	r0, r1, [r4]
 8022e30:	4601      	mov	r1, r0
 8022e32:	fb01 f303 	mul.w	r3, r1, r3
 8022e36:	4413      	add	r3, r2
 8022e38:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8022e3c:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8022e40:	fba2 1201 	umull	r1, r2, r2, r1
 8022e44:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8022e48:	460a      	mov	r2, r1
 8022e4a:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8022e4e:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8022e52:	4413      	add	r3, r2
 8022e54:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8022e58:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8022e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e60:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8022e64:	1851      	adds	r1, r2, r1
 8022e66:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8022e6a:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8022e6e:	414b      	adcs	r3, r1
 8022e70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8022e74:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8022e78:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8022e7c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022e80:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8022e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e88:	2b00      	cmp	r3, #0
 8022e8a:	da0a      	bge.n	8022ea2 <arm_softmax_s8+0x1eea>
 8022e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022e90:	1851      	adds	r1, r2, r1
 8022e92:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8022e96:	f143 0300 	adc.w	r3, r3, #0
 8022e9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8022e9e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8022ea2:	f04f 0000 	mov.w	r0, #0
 8022ea6:	f04f 0100 	mov.w	r1, #0
 8022eaa:	0fd0      	lsrs	r0, r2, #31
 8022eac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022eb0:	17d9      	asrs	r1, r3, #31
 8022eb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022eb6:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8022eba:	4603      	mov	r3, r0
 8022ebc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022ebe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ec2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8022ec6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022eca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8022ece:	6812      	ldr	r2, [r2, #0]
 8022ed0:	681b      	ldr	r3, [r3, #0]
 8022ed2:	429a      	cmp	r2, r3
 8022ed4:	d10e      	bne.n	8022ef4 <arm_softmax_s8+0x1f3c>
 8022ed6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022eda:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022ee4:	d106      	bne.n	8022ef4 <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8022ee6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022eea:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8022eee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022ef2:	6013      	str	r3, [r2, #0]
    return result;
 8022ef4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8022efc:	681a      	ldr	r2, [r3, #0]
 8022efe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f02:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8022f06:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8022f08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8022f0c:	4619      	mov	r1, r3
 8022f0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f12:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8022f16:	1e4b      	subs	r3, r1, #1
 8022f18:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8022f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f1e:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8022f22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f26:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8022f2a:	681b      	ldr	r3, [r3, #0]
 8022f2c:	009b      	lsls	r3, r3, #2
 8022f2e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8022f30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f34:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8022f38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f3c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8022f40:	6812      	ldr	r2, [r2, #0]
 8022f42:	681b      	ldr	r3, [r3, #0]
 8022f44:	429a      	cmp	r2, r3
 8022f46:	dd02      	ble.n	8022f4e <arm_softmax_s8+0x1f96>
 8022f48:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8022f4c:	e000      	b.n	8022f50 <arm_softmax_s8+0x1f98>
 8022f4e:	2000      	movs	r0, #0
 8022f50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f54:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8022f58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f5c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8022f60:	6812      	ldr	r2, [r2, #0]
 8022f62:	681b      	ldr	r3, [r3, #0]
 8022f64:	429a      	cmp	r2, r3
 8022f66:	dd01      	ble.n	8022f6c <arm_softmax_s8+0x1fb4>
 8022f68:	2200      	movs	r2, #0
 8022f6a:	e001      	b.n	8022f70 <arm_softmax_s8+0x1fb8>
 8022f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8022f70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f74:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8022f78:	681b      	ldr	r3, [r3, #0]
 8022f7a:	ea02 0103 	and.w	r1, r2, r3
 8022f7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f82:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8022f86:	ea81 0300 	eor.w	r3, r1, r0
 8022f8a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8022f8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8022f94:	681b      	ldr	r3, [r3, #0]
 8022f96:	425a      	negs	r2, r3
 8022f98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f9c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8022fa0:	681b      	ldr	r3, [r3, #0]
 8022fa2:	4293      	cmp	r3, r2
 8022fa4:	da02      	bge.n	8022fac <arm_softmax_s8+0x1ff4>
 8022fa6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8022faa:	e000      	b.n	8022fae <arm_softmax_s8+0x1ff6>
 8022fac:	2000      	movs	r0, #0
 8022fae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022fb2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8022fb6:	681b      	ldr	r3, [r3, #0]
 8022fb8:	425a      	negs	r2, r3
 8022fba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022fbe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	4293      	cmp	r3, r2
 8022fc6:	da01      	bge.n	8022fcc <arm_softmax_s8+0x2014>
 8022fc8:	2200      	movs	r2, #0
 8022fca:	e001      	b.n	8022fd0 <arm_softmax_s8+0x2018>
 8022fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8022fd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022fd4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	ea02 0103 	and.w	r1, r2, r3
 8022fde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022fe2:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8022fe6:	ea81 0300 	eor.w	r3, r1, r0
 8022fea:	6013      	str	r3, [r2, #0]
    return result;
 8022fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ff0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8022ff4:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8022ff6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ffa:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8022ffe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023002:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023006:	681b      	ldr	r3, [r3, #0]
 8023008:	440b      	add	r3, r1
 802300a:	6013      	str	r3, [r2, #0]
 802300c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023010:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8023014:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023018:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 802301c:	681b      	ldr	r3, [r3, #0]
 802301e:	6013      	str	r3, [r2, #0]
 8023020:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023024:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8023028:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802302c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023030:	681b      	ldr	r3, [r3, #0]
 8023032:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023034:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023038:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 802303c:	2300      	movs	r3, #0
 802303e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023044:	f04f 0300 	mov.w	r3, #0
 8023048:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 802304c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023050:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023054:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8023058:	681b      	ldr	r3, [r3, #0]
 802305a:	0fdb      	lsrs	r3, r3, #31
 802305c:	b2da      	uxtb	r2, r3
 802305e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023062:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8023066:	681b      	ldr	r3, [r3, #0]
 8023068:	0fdb      	lsrs	r3, r3, #31
 802306a:	b2db      	uxtb	r3, r3
 802306c:	4053      	eors	r3, r2
 802306e:	b2db      	uxtb	r3, r3
 8023070:	2b00      	cmp	r3, #0
 8023072:	d012      	beq.n	802309a <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8023074:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8023078:	e9d3 2300 	ldrd	r2, r3, [r3]
 802307c:	2100      	movs	r1, #0
 802307e:	f1d2 0001 	rsbs	r0, r2, #1
 8023082:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8023086:	eb61 0303 	sbc.w	r3, r1, r3
 802308a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 802308e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8023092:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8023096:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802309a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802309e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	17da      	asrs	r2, r3, #31
 80230a6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80230aa:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 80230ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80230b2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	17da      	asrs	r2, r3, #31
 80230ba:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80230be:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 80230c2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80230c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80230ca:	460b      	mov	r3, r1
 80230cc:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 80230d0:	fb02 f203 	mul.w	r2, r2, r3
 80230d4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80230d8:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 80230dc:	e9c4 0100 	strd	r0, r1, [r4]
 80230e0:	4601      	mov	r1, r0
 80230e2:	fb01 f303 	mul.w	r3, r1, r3
 80230e6:	4413      	add	r3, r2
 80230e8:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80230ec:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80230f0:	fba2 1201 	umull	r1, r2, r2, r1
 80230f4:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 80230f8:	460a      	mov	r2, r1
 80230fa:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 80230fe:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8023102:	4413      	add	r3, r2
 8023104:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8023108:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 802310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023110:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8023114:	1851      	adds	r1, r2, r1
 8023116:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 802311a:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 802311e:	414b      	adcs	r3, r1
 8023120:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8023124:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8023128:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 802312c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023130:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8023134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023138:	2b00      	cmp	r3, #0
 802313a:	da0a      	bge.n	8023152 <arm_softmax_s8+0x219a>
 802313c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023140:	1851      	adds	r1, r2, r1
 8023142:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8023146:	f143 0300 	adc.w	r3, r3, #0
 802314a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 802314e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8023152:	f04f 0000 	mov.w	r0, #0
 8023156:	f04f 0100 	mov.w	r1, #0
 802315a:	0fd0      	lsrs	r0, r2, #31
 802315c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023160:	17d9      	asrs	r1, r3, #31
 8023162:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023166:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 802316a:	4603      	mov	r3, r0
 802316c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802316e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023172:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8023176:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802317a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 802317e:	6812      	ldr	r2, [r2, #0]
 8023180:	681b      	ldr	r3, [r3, #0]
 8023182:	429a      	cmp	r2, r3
 8023184:	d10e      	bne.n	80231a4 <arm_softmax_s8+0x21ec>
 8023186:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802318a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 802318e:	681b      	ldr	r3, [r3, #0]
 8023190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023194:	d106      	bne.n	80231a4 <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8023196:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802319a:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 802319e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80231a2:	6013      	str	r3, [r2, #0]
    return result;
 80231a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80231a8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80231ac:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80231ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80231b2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80231b6:	681b      	ldr	r3, [r3, #0]
 80231b8:	1a99      	subs	r1, r3, r2
 80231ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80231be:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 80231c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80231c6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	6013      	str	r3, [r2, #0]
 80231ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80231d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80231d6:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80231d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80231dc:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80231e0:	2300      	movs	r3, #0
 80231e2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80231e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80231e8:	f04f 0300 	mov.w	r3, #0
 80231ec:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 80231f0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80231f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80231f8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80231fc:	681b      	ldr	r3, [r3, #0]
 80231fe:	0fdb      	lsrs	r3, r3, #31
 8023200:	b2da      	uxtb	r2, r3
 8023202:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023206:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 802320a:	681b      	ldr	r3, [r3, #0]
 802320c:	0fdb      	lsrs	r3, r3, #31
 802320e:	b2db      	uxtb	r3, r3
 8023210:	4053      	eors	r3, r2
 8023212:	b2db      	uxtb	r3, r3
 8023214:	2b00      	cmp	r3, #0
 8023216:	d012      	beq.n	802323e <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8023218:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023220:	2100      	movs	r1, #0
 8023222:	f1d2 0001 	rsbs	r0, r2, #1
 8023226:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 802322a:	eb61 0303 	sbc.w	r3, r1, r3
 802322e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8023232:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8023236:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 802323a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802323e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023242:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8023246:	681b      	ldr	r3, [r3, #0]
 8023248:	17da      	asrs	r2, r3, #31
 802324a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 802324e:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8023252:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023256:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 802325a:	681b      	ldr	r3, [r3, #0]
 802325c:	17da      	asrs	r2, r3, #31
 802325e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8023262:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8023266:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 802326a:	460b      	mov	r3, r1
 802326c:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8023270:	fb02 f203 	mul.w	r2, r2, r3
 8023274:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8023278:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 802327c:	4601      	mov	r1, r0
 802327e:	fb01 f303 	mul.w	r3, r1, r3
 8023282:	4413      	add	r3, r2
 8023284:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8023288:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 802328c:	fba2 1201 	umull	r1, r2, r2, r1
 8023290:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8023294:	460a      	mov	r2, r1
 8023296:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 802329a:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 802329e:	4413      	add	r3, r2
 80232a0:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 80232a4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80232a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232ac:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 80232b0:	1851      	adds	r1, r2, r1
 80232b2:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80232b6:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 80232ba:	414b      	adcs	r3, r1
 80232bc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80232c0:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 80232c4:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80232c8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80232cc:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80232d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	da0a      	bge.n	80232ee <arm_softmax_s8+0x2336>
 80232d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80232dc:	1851      	adds	r1, r2, r1
 80232de:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80232e2:	f143 0300 	adc.w	r3, r3, #0
 80232e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80232ea:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80232ee:	f04f 0000 	mov.w	r0, #0
 80232f2:	f04f 0100 	mov.w	r1, #0
 80232f6:	0fd0      	lsrs	r0, r2, #31
 80232f8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80232fc:	17d9      	asrs	r1, r3, #31
 80232fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023302:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8023306:	4603      	mov	r3, r0
 8023308:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802330a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802330e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8023312:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023316:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 802331a:	6812      	ldr	r2, [r2, #0]
 802331c:	681b      	ldr	r3, [r3, #0]
 802331e:	429a      	cmp	r2, r3
 8023320:	d10e      	bne.n	8023340 <arm_softmax_s8+0x2388>
 8023322:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023326:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023330:	d106      	bne.n	8023340 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 8023332:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023336:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 802333a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802333e:	6013      	str	r3, [r2, #0]
    return result;
 8023340:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023344:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8023348:	681a      	ldr	r2, [r3, #0]
 802334a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802334e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8023352:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8023354:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023358:	4619      	mov	r1, r3
 802335a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802335e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8023362:	1e4b      	subs	r3, r1, #1
 8023364:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802336a:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 802336e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023372:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8023376:	681b      	ldr	r3, [r3, #0]
 8023378:	009b      	lsls	r3, r3, #2
 802337a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 802337c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023380:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8023384:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023388:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 802338c:	6812      	ldr	r2, [r2, #0]
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	429a      	cmp	r2, r3
 8023392:	dd02      	ble.n	802339a <arm_softmax_s8+0x23e2>
 8023394:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8023398:	e000      	b.n	802339c <arm_softmax_s8+0x23e4>
 802339a:	2000      	movs	r0, #0
 802339c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233a0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80233a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233a8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80233ac:	6812      	ldr	r2, [r2, #0]
 80233ae:	681b      	ldr	r3, [r3, #0]
 80233b0:	429a      	cmp	r2, r3
 80233b2:	dd01      	ble.n	80233b8 <arm_softmax_s8+0x2400>
 80233b4:	2200      	movs	r2, #0
 80233b6:	e001      	b.n	80233bc <arm_softmax_s8+0x2404>
 80233b8:	f04f 32ff 	mov.w	r2, #4294967295
 80233bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80233c4:	681b      	ldr	r3, [r3, #0]
 80233c6:	ea02 0103 	and.w	r1, r2, r3
 80233ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233ce:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80233d2:	ea81 0300 	eor.w	r3, r1, r0
 80233d6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80233d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233dc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	425a      	negs	r2, r3
 80233e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233e8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80233ec:	681b      	ldr	r3, [r3, #0]
 80233ee:	4293      	cmp	r3, r2
 80233f0:	da02      	bge.n	80233f8 <arm_softmax_s8+0x2440>
 80233f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80233f6:	e000      	b.n	80233fa <arm_softmax_s8+0x2442>
 80233f8:	2000      	movs	r0, #0
 80233fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233fe:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8023402:	681b      	ldr	r3, [r3, #0]
 8023404:	425a      	negs	r2, r3
 8023406:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802340a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 802340e:	681b      	ldr	r3, [r3, #0]
 8023410:	4293      	cmp	r3, r2
 8023412:	da05      	bge.n	8023420 <arm_softmax_s8+0x2468>
 8023414:	2200      	movs	r2, #0
 8023416:	e005      	b.n	8023424 <arm_softmax_s8+0x246c>
 8023418:	c3c3c3c4 	.word	0xc3c3c3c4
 802341c:	ffffffff 	.word	0xffffffff
 8023420:	f04f 32ff 	mov.w	r2, #4294967295
 8023424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 802342c:	681b      	ldr	r3, [r3, #0]
 802342e:	ea02 0103 	and.w	r1, r2, r3
 8023432:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023436:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 802343a:	ea81 0300 	eor.w	r3, r1, r0
 802343e:	6013      	str	r3, [r2, #0]
    return result;
 8023440:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8023448:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 802344a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802344e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8023452:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023456:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	440b      	add	r3, r1
 802345e:	6013      	str	r3, [r2, #0]
 8023460:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023464:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8023468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802346c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023470:	681b      	ldr	r3, [r3, #0]
 8023472:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8023474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023478:	4619      	mov	r1, r3
 802347a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802347e:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8023482:	1e4b      	subs	r3, r1, #1
 8023484:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023486:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802348a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 802348e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023492:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8023496:	681b      	ldr	r3, [r3, #0]
 8023498:	005b      	lsls	r3, r3, #1
 802349a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 802349c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234a0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80234a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234a8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80234ac:	6812      	ldr	r2, [r2, #0]
 80234ae:	681b      	ldr	r3, [r3, #0]
 80234b0:	429a      	cmp	r2, r3
 80234b2:	dd02      	ble.n	80234ba <arm_softmax_s8+0x2502>
 80234b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80234b8:	e000      	b.n	80234bc <arm_softmax_s8+0x2504>
 80234ba:	2000      	movs	r0, #0
 80234bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234c0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80234c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234c8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80234cc:	6812      	ldr	r2, [r2, #0]
 80234ce:	681b      	ldr	r3, [r3, #0]
 80234d0:	429a      	cmp	r2, r3
 80234d2:	dd01      	ble.n	80234d8 <arm_softmax_s8+0x2520>
 80234d4:	2200      	movs	r2, #0
 80234d6:	e001      	b.n	80234dc <arm_softmax_s8+0x2524>
 80234d8:	f04f 32ff 	mov.w	r2, #4294967295
 80234dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80234e4:	681b      	ldr	r3, [r3, #0]
 80234e6:	ea02 0103 	and.w	r1, r2, r3
 80234ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234ee:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80234f2:	ea81 0300 	eor.w	r3, r1, r0
 80234f6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80234f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234fc:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8023500:	681b      	ldr	r3, [r3, #0]
 8023502:	425a      	negs	r2, r3
 8023504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023508:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 802350c:	681b      	ldr	r3, [r3, #0]
 802350e:	4293      	cmp	r3, r2
 8023510:	da02      	bge.n	8023518 <arm_softmax_s8+0x2560>
 8023512:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8023516:	e000      	b.n	802351a <arm_softmax_s8+0x2562>
 8023518:	2000      	movs	r0, #0
 802351a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802351e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	425a      	negs	r2, r3
 8023526:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802352a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 802352e:	681b      	ldr	r3, [r3, #0]
 8023530:	4293      	cmp	r3, r2
 8023532:	da01      	bge.n	8023538 <arm_softmax_s8+0x2580>
 8023534:	2200      	movs	r2, #0
 8023536:	e001      	b.n	802353c <arm_softmax_s8+0x2584>
 8023538:	f04f 32ff 	mov.w	r2, #4294967295
 802353c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023540:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8023544:	681b      	ldr	r3, [r3, #0]
 8023546:	ea02 0103 	and.w	r1, r2, r3
 802354a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802354e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8023552:	ea81 0300 	eor.w	r3, r1, r0
 8023556:	6013      	str	r3, [r2, #0]
    return result;
 8023558:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802355c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8023560:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 8023562:	bf00      	nop
 8023564:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8023568:	2300      	movs	r3, #0
 802356a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 802356e:	f001 bd85 	b.w	802507c <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 8023572:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8023576:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802357a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 802357e:	681b      	ldr	r3, [r3, #0]
 8023580:	4413      	add	r3, r2
 8023582:	f993 3000 	ldrsb.w	r3, [r3]
 8023586:	461a      	mov	r2, r3
 8023588:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 802358c:	1ad3      	subs	r3, r2, r3
 802358e:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8023592:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8023596:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 802359a:	429a      	cmp	r2, r3
 802359c:	f2c1 8562 	blt.w	8025064 <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80235a0:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80235a4:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80235a8:	fb03 f202 	mul.w	r2, r3, r2
 80235ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80235b0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80235b4:	601a      	str	r2, [r3, #0]
 80235b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80235ba:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 80235be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80235c2:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80235ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80235ce:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80235d2:	2300      	movs	r3, #0
 80235d4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80235d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80235da:	f04f 0300 	mov.w	r3, #0
 80235de:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80235e2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80235e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80235ea:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	0fdb      	lsrs	r3, r3, #31
 80235f2:	b2da      	uxtb	r2, r3
 80235f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80235f8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	0fdb      	lsrs	r3, r3, #31
 8023600:	b2db      	uxtb	r3, r3
 8023602:	4053      	eors	r3, r2
 8023604:	b2db      	uxtb	r3, r3
 8023606:	2b00      	cmp	r3, #0
 8023608:	d012      	beq.n	8023630 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 802360a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 802360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023612:	2100      	movs	r1, #0
 8023614:	f1d2 0001 	rsbs	r0, r2, #1
 8023618:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 802361c:	eb61 0303 	sbc.w	r3, r1, r3
 8023620:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8023624:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8023628:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 802362c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023630:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023634:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	17da      	asrs	r2, r3, #31
 802363c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8023640:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8023644:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023648:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 802364c:	681b      	ldr	r3, [r3, #0]
 802364e:	17da      	asrs	r2, r3, #31
 8023650:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8023654:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8023658:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 802365c:	460b      	mov	r3, r1
 802365e:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8023662:	fb02 f203 	mul.w	r2, r2, r3
 8023666:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 802366a:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 802366e:	4601      	mov	r1, r0
 8023670:	fb01 f303 	mul.w	r3, r1, r3
 8023674:	4413      	add	r3, r2
 8023676:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 802367a:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 802367e:	fba2 1201 	umull	r1, r2, r2, r1
 8023682:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8023686:	460a      	mov	r2, r1
 8023688:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 802368c:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8023690:	4413      	add	r3, r2
 8023692:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8023696:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 802369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802369e:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80236a2:	1851      	adds	r1, r2, r1
 80236a4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80236a8:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 80236ac:	414b      	adcs	r3, r1
 80236ae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80236b2:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80236b6:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80236ba:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80236be:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80236c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	da0a      	bge.n	80236e0 <arm_softmax_s8+0x2728>
 80236ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80236ce:	1851      	adds	r1, r2, r1
 80236d0:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 80236d4:	f143 0300 	adc.w	r3, r3, #0
 80236d8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80236dc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80236e0:	f04f 0000 	mov.w	r0, #0
 80236e4:	f04f 0100 	mov.w	r1, #0
 80236e8:	0fd0      	lsrs	r0, r2, #31
 80236ea:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80236ee:	17d9      	asrs	r1, r3, #31
 80236f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80236f4:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80236f8:	4603      	mov	r3, r0
 80236fa:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80236fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023700:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8023704:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023708:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 802370c:	6812      	ldr	r2, [r2, #0]
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	429a      	cmp	r2, r3
 8023712:	d10e      	bne.n	8023732 <arm_softmax_s8+0x277a>
 8023714:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023718:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 802371c:	681b      	ldr	r3, [r3, #0]
 802371e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023722:	d106      	bne.n	8023732 <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 8023724:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023728:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 802372c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023730:	6013      	str	r3, [r2, #0]
    return result;
 8023732:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023736:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 802373a:	681a      	ldr	r2, [r3, #0]
 802373c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023740:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8023744:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8023746:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802374a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 802374e:	2300      	movs	r3, #0
 8023750:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8023752:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023756:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 802375a:	2318      	movs	r3, #24
 802375c:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 802375e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023762:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8023766:	2201      	movs	r2, #1
 8023768:	681b      	ldr	r3, [r3, #0]
 802376a:	fa02 f303 	lsl.w	r3, r2, r3
 802376e:	1e5a      	subs	r2, r3, #1
 8023770:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023774:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	ea02 0003 	and.w	r0, r2, r3
 802377e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023782:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8023786:	2201      	movs	r2, #1
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	fa02 f103 	lsl.w	r1, r2, r3
 802378e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023792:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8023796:	1a43      	subs	r3, r0, r1
 8023798:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 802379a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802379e:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 80237a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237a6:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80237aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237ae:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80237b2:	6812      	ldr	r2, [r2, #0]
 80237b4:	681b      	ldr	r3, [r3, #0]
 80237b6:	1ad3      	subs	r3, r2, r3
 80237b8:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80237ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237be:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80237c2:	681b      	ldr	r3, [r3, #0]
 80237c4:	0159      	lsls	r1, r3, #5
 80237c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237ca:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 80237ce:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 80237d2:	6013      	str	r3, [r2, #0]
 80237d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237d8:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 80237dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237e0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80237e4:	681b      	ldr	r3, [r3, #0]
 80237e6:	6013      	str	r3, [r2, #0]
 80237e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237ec:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 80237f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237f4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80237fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023800:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8023804:	2300      	movs	r3, #0
 8023806:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023808:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802380c:	f04f 0300 	mov.w	r3, #0
 8023810:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8023814:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023818:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802381c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8023820:	681b      	ldr	r3, [r3, #0]
 8023822:	0fdb      	lsrs	r3, r3, #31
 8023824:	b2da      	uxtb	r2, r3
 8023826:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802382a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 802382e:	681b      	ldr	r3, [r3, #0]
 8023830:	0fdb      	lsrs	r3, r3, #31
 8023832:	b2db      	uxtb	r3, r3
 8023834:	4053      	eors	r3, r2
 8023836:	b2db      	uxtb	r3, r3
 8023838:	2b00      	cmp	r3, #0
 802383a:	d012      	beq.n	8023862 <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 802383c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8023840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023844:	2100      	movs	r1, #0
 8023846:	f1d2 0001 	rsbs	r0, r2, #1
 802384a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 802384e:	eb61 0303 	sbc.w	r3, r1, r3
 8023852:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8023856:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 802385a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 802385e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023862:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023866:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 802386a:	681b      	ldr	r3, [r3, #0]
 802386c:	17da      	asrs	r2, r3, #31
 802386e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8023872:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8023876:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802387a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 802387e:	681b      	ldr	r3, [r3, #0]
 8023880:	17da      	asrs	r2, r3, #31
 8023882:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8023886:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 802388a:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 802388e:	460b      	mov	r3, r1
 8023890:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8023894:	fb02 f203 	mul.w	r2, r2, r3
 8023898:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 802389c:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 80238a0:	4601      	mov	r1, r0
 80238a2:	fb01 f303 	mul.w	r3, r1, r3
 80238a6:	4413      	add	r3, r2
 80238a8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80238ac:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 80238b0:	fba2 1201 	umull	r1, r2, r2, r1
 80238b4:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 80238b8:	460a      	mov	r2, r1
 80238ba:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 80238be:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80238c2:	4413      	add	r3, r2
 80238c4:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 80238c8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80238cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238d0:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 80238d4:	1851      	adds	r1, r2, r1
 80238d6:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 80238da:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 80238de:	414b      	adcs	r3, r1
 80238e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80238e4:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80238e8:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80238ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80238f0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80238f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	da0a      	bge.n	8023912 <arm_softmax_s8+0x295a>
 80238fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023900:	1851      	adds	r1, r2, r1
 8023902:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8023906:	f143 0300 	adc.w	r3, r3, #0
 802390a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 802390e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8023912:	f04f 0000 	mov.w	r0, #0
 8023916:	f04f 0100 	mov.w	r1, #0
 802391a:	0fd0      	lsrs	r0, r2, #31
 802391c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023920:	17d9      	asrs	r1, r3, #31
 8023922:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023926:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 802392a:	4603      	mov	r3, r0
 802392c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802392e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023932:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8023936:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802393a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 802393e:	6812      	ldr	r2, [r2, #0]
 8023940:	681b      	ldr	r3, [r3, #0]
 8023942:	429a      	cmp	r2, r3
 8023944:	d10e      	bne.n	8023964 <arm_softmax_s8+0x29ac>
 8023946:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802394a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 802394e:	681b      	ldr	r3, [r3, #0]
 8023950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023954:	d106      	bne.n	8023964 <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 8023956:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802395a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 802395e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023962:	6013      	str	r3, [r2, #0]
    return result;
 8023964:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023968:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 802396c:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 802396e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023972:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8023976:	601a      	str	r2, [r3, #0]
 8023978:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802397c:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8023980:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023984:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8023988:	681b      	ldr	r3, [r3, #0]
 802398a:	6013      	str	r3, [r2, #0]
 802398c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023990:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8023994:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023998:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 802399c:	681b      	ldr	r3, [r3, #0]
 802399e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80239a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80239a4:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80239a8:	2300      	movs	r3, #0
 80239aa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80239ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80239b0:	f04f 0300 	mov.w	r3, #0
 80239b4:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 80239b8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80239bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80239c0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80239c4:	681b      	ldr	r3, [r3, #0]
 80239c6:	0fdb      	lsrs	r3, r3, #31
 80239c8:	b2da      	uxtb	r2, r3
 80239ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80239ce:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	0fdb      	lsrs	r3, r3, #31
 80239d6:	b2db      	uxtb	r3, r3
 80239d8:	4053      	eors	r3, r2
 80239da:	b2db      	uxtb	r3, r3
 80239dc:	2b00      	cmp	r3, #0
 80239de:	d012      	beq.n	8023a06 <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 80239e0:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80239e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239e8:	2100      	movs	r1, #0
 80239ea:	f1d2 0001 	rsbs	r0, r2, #1
 80239ee:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 80239f2:	eb61 0303 	sbc.w	r3, r1, r3
 80239f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80239fa:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 80239fe:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8023a02:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023a06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023a0a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8023a0e:	681b      	ldr	r3, [r3, #0]
 8023a10:	17da      	asrs	r2, r3, #31
 8023a12:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8023a16:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8023a1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023a1e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8023a22:	681b      	ldr	r3, [r3, #0]
 8023a24:	17da      	asrs	r2, r3, #31
 8023a26:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8023a2a:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8023a2e:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8023a32:	460b      	mov	r3, r1
 8023a34:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8023a38:	fb02 f203 	mul.w	r2, r2, r3
 8023a3c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8023a40:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8023a44:	4601      	mov	r1, r0
 8023a46:	fb01 f303 	mul.w	r3, r1, r3
 8023a4a:	4413      	add	r3, r2
 8023a4c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8023a50:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8023a54:	fba2 1201 	umull	r1, r2, r2, r1
 8023a58:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8023a5c:	460a      	mov	r2, r1
 8023a5e:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8023a62:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8023a66:	4413      	add	r3, r2
 8023a68:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8023a6c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8023a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a74:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8023a78:	1851      	adds	r1, r2, r1
 8023a7a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8023a7e:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8023a82:	414b      	adcs	r3, r1
 8023a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8023a88:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8023a8c:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8023a90:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023a94:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8023a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	da0a      	bge.n	8023ab6 <arm_softmax_s8+0x2afe>
 8023aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023aa4:	1851      	adds	r1, r2, r1
 8023aa6:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8023aaa:	f143 0300 	adc.w	r3, r3, #0
 8023aae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8023ab2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8023ab6:	f04f 0000 	mov.w	r0, #0
 8023aba:	f04f 0100 	mov.w	r1, #0
 8023abe:	0fd0      	lsrs	r0, r2, #31
 8023ac0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023ac4:	17d9      	asrs	r1, r3, #31
 8023ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023aca:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8023ace:	4603      	mov	r3, r0
 8023ad0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023ad2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ad6:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8023ada:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ade:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8023ae2:	6812      	ldr	r2, [r2, #0]
 8023ae4:	681b      	ldr	r3, [r3, #0]
 8023ae6:	429a      	cmp	r2, r3
 8023ae8:	d10e      	bne.n	8023b08 <arm_softmax_s8+0x2b50>
 8023aea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023aee:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8023af2:	681b      	ldr	r3, [r3, #0]
 8023af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023af8:	d106      	bne.n	8023b08 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8023afa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023afe:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8023b02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023b06:	6013      	str	r3, [r2, #0]
    return result;
 8023b08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b0c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8023b10:	681a      	ldr	r2, [r3, #0]
 8023b12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b16:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8023b1a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023b1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b20:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8023b24:	2300      	movs	r3, #0
 8023b26:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023b28:	2104      	movs	r1, #4
 8023b2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b2e:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8023b32:	1e4b      	subs	r3, r1, #1
 8023b34:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8023b36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b3a:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8023b3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b42:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8023b46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b4a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8023b4e:	6812      	ldr	r2, [r2, #0]
 8023b50:	681b      	ldr	r3, [r3, #0]
 8023b52:	4013      	ands	r3, r2
 8023b54:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8023b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b5a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8023b5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b62:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	109b      	asrs	r3, r3, #2
 8023b6a:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8023b6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b70:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8023b74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b78:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8023b7c:	681b      	ldr	r3, [r3, #0]
 8023b7e:	105b      	asrs	r3, r3, #1
 8023b80:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8023b82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b86:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8023b8a:	681b      	ldr	r3, [r3, #0]
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	da0a      	bge.n	8023ba6 <arm_softmax_s8+0x2bee>
        threshold++;
 8023b90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b94:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8023b98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b9c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	3301      	adds	r3, #1
 8023ba4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8023ba6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023baa:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8023bae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023bb2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8023bb6:	6812      	ldr	r2, [r2, #0]
 8023bb8:	681b      	ldr	r3, [r3, #0]
 8023bba:	429a      	cmp	r2, r3
 8023bbc:	dd0a      	ble.n	8023bd4 <arm_softmax_s8+0x2c1c>
        result++;
 8023bbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023bc2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8023bc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023bca:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	3301      	adds	r3, #1
 8023bd2:	6013      	str	r3, [r2, #0]
    return result;
 8023bd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023bd8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8023bdc:	681c      	ldr	r4, [r3, #0]
 8023bde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023be2:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8023be6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023bea:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8023bee:	681b      	ldr	r3, [r3, #0]
 8023bf0:	6013      	str	r3, [r2, #0]
 8023bf2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023bf6:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8023bfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023bfe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8023c02:	681b      	ldr	r3, [r3, #0]
 8023c04:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023c06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c0a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8023c0e:	2300      	movs	r3, #0
 8023c10:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023c16:	f04f 0300 	mov.w	r3, #0
 8023c1a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8023c1e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023c22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c26:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	0fdb      	lsrs	r3, r3, #31
 8023c2e:	b2da      	uxtb	r2, r3
 8023c30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c34:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8023c38:	681b      	ldr	r3, [r3, #0]
 8023c3a:	0fdb      	lsrs	r3, r3, #31
 8023c3c:	b2db      	uxtb	r3, r3
 8023c3e:	4053      	eors	r3, r2
 8023c40:	b2db      	uxtb	r3, r3
 8023c42:	2b00      	cmp	r3, #0
 8023c44:	d012      	beq.n	8023c6c <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 8023c46:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8023c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c4e:	2100      	movs	r1, #0
 8023c50:	f1d2 0001 	rsbs	r0, r2, #1
 8023c54:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8023c58:	eb61 0303 	sbc.w	r3, r1, r3
 8023c5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8023c60:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8023c64:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8023c68:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8023c6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c70:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8023c74:	681b      	ldr	r3, [r3, #0]
 8023c76:	17da      	asrs	r2, r3, #31
 8023c78:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8023c7c:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8023c80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c84:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8023c88:	681b      	ldr	r3, [r3, #0]
 8023c8a:	17da      	asrs	r2, r3, #31
 8023c8c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8023c90:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8023c94:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8023c98:	460b      	mov	r3, r1
 8023c9a:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8023c9e:	fb02 f203 	mul.w	r2, r2, r3
 8023ca2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8023ca6:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 8023caa:	4601      	mov	r1, r0
 8023cac:	fb01 f303 	mul.w	r3, r1, r3
 8023cb0:	4413      	add	r3, r2
 8023cb2:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8023cb6:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8023cba:	fba2 1201 	umull	r1, r2, r2, r1
 8023cbe:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 8023cc2:	460a      	mov	r2, r1
 8023cc4:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8023cc8:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8023ccc:	4413      	add	r3, r2
 8023cce:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8023cd2:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8023cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cda:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 8023cde:	1851      	adds	r1, r2, r1
 8023ce0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8023ce4:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8023ce8:	414b      	adcs	r3, r1
 8023cea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8023cee:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8023cf2:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8023cf6:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8023cfa:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8023cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	da0a      	bge.n	8023d1c <arm_softmax_s8+0x2d64>
 8023d06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023d0a:	1851      	adds	r1, r2, r1
 8023d0c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8023d10:	f143 0300 	adc.w	r3, r3, #0
 8023d14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8023d18:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8023d1c:	f04f 0000 	mov.w	r0, #0
 8023d20:	f04f 0100 	mov.w	r1, #0
 8023d24:	0fd0      	lsrs	r0, r2, #31
 8023d26:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023d2a:	17d9      	asrs	r1, r3, #31
 8023d2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d30:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8023d34:	4603      	mov	r3, r0
 8023d36:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023d38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d3c:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8023d40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d44:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8023d48:	6812      	ldr	r2, [r2, #0]
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	429a      	cmp	r2, r3
 8023d4e:	d10e      	bne.n	8023d6e <arm_softmax_s8+0x2db6>
 8023d50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d54:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8023d58:	681b      	ldr	r3, [r3, #0]
 8023d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023d5e:	d106      	bne.n	8023d6e <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8023d60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d64:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8023d68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023d6c:	6013      	str	r3, [r2, #0]
    return result;
 8023d6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d72:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8023d76:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023d78:	18e2      	adds	r2, r4, r3
 8023d7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d7e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8023d82:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023d84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d88:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8023d8c:	2300      	movs	r3, #0
 8023d8e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023d90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023d94:	f04f 0300 	mov.w	r3, #0
 8023d98:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8023d9c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023da0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023da4:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	0fdb      	lsrs	r3, r3, #31
 8023dac:	b2da      	uxtb	r2, r3
 8023dae:	2300      	movs	r3, #0
 8023db0:	4053      	eors	r3, r2
 8023db2:	b2db      	uxtb	r3, r3
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	d012      	beq.n	8023dde <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8023db8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8023dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dc0:	2100      	movs	r1, #0
 8023dc2:	f1d2 0001 	rsbs	r0, r2, #1
 8023dc6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8023dca:	eb61 0303 	sbc.w	r3, r1, r3
 8023dce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8023dd2:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8023dd6:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8023dda:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023dde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023de2:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8023de6:	681b      	ldr	r3, [r3, #0]
 8023de8:	17da      	asrs	r2, r3, #31
 8023dea:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8023dee:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8023df2:	a3c9      	add	r3, pc, #804	; (adr r3, 8024118 <arm_softmax_s8+0x3160>)
 8023df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023df8:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8023dfc:	fb02 f001 	mul.w	r0, r2, r1
 8023e00:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8023e04:	fb01 f103 	mul.w	r1, r1, r3
 8023e08:	4401      	add	r1, r0
 8023e0a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8023e0e:	fba0 2302 	umull	r2, r3, r0, r2
 8023e12:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8023e16:	4613      	mov	r3, r2
 8023e18:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8023e1c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8023e20:	18cb      	adds	r3, r1, r3
 8023e22:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8023e26:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8023e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e2e:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8023e32:	1851      	adds	r1, r2, r1
 8023e34:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8023e38:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8023e3c:	414b      	adcs	r3, r1
 8023e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8023e42:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8023e46:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8023e4a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023e4e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8023e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e56:	2b00      	cmp	r3, #0
 8023e58:	da0a      	bge.n	8023e70 <arm_softmax_s8+0x2eb8>
 8023e5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023e5e:	1851      	adds	r1, r2, r1
 8023e60:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8023e64:	f143 0300 	adc.w	r3, r3, #0
 8023e68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8023e6c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8023e70:	f04f 0000 	mov.w	r0, #0
 8023e74:	f04f 0100 	mov.w	r1, #0
 8023e78:	0fd0      	lsrs	r0, r2, #31
 8023e7a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023e7e:	17d9      	asrs	r1, r3, #31
 8023e80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023e84:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8023e88:	4603      	mov	r3, r0
 8023e8a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023e8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023e90:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8023e94:	681a      	ldr	r2, [r3, #0]
 8023e96:	4b9e      	ldr	r3, [pc, #632]	; (8024110 <arm_softmax_s8+0x3158>)
 8023e98:	429a      	cmp	r2, r3
 8023e9a:	d10e      	bne.n	8023eba <arm_softmax_s8+0x2f02>
 8023e9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ea0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8023ea4:	681b      	ldr	r3, [r3, #0]
 8023ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023eaa:	d106      	bne.n	8023eba <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8023eac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023eb0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8023eb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023eb8:	6013      	str	r3, [r2, #0]
    return result;
 8023eba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ebe:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8023ec2:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023ec4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ec8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8023ecc:	681b      	ldr	r3, [r3, #0]
 8023ece:	441a      	add	r2, r3
 8023ed0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ed4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8023ed8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023eda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ede:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8023ee2:	2300      	movs	r3, #0
 8023ee4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8023ee6:	2102      	movs	r1, #2
 8023ee8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023eec:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8023ef0:	1e4b      	subs	r3, r1, #1
 8023ef2:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8023ef4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ef8:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8023efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f00:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8023f04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f08:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8023f0c:	6812      	ldr	r2, [r2, #0]
 8023f0e:	681b      	ldr	r3, [r3, #0]
 8023f10:	4013      	ands	r3, r2
 8023f12:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8023f14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f18:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8023f1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f20:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8023f24:	681b      	ldr	r3, [r3, #0]
 8023f26:	105b      	asrs	r3, r3, #1
 8023f28:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8023f2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f2e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8023f32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f36:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8023f3a:	681b      	ldr	r3, [r3, #0]
 8023f3c:	105b      	asrs	r3, r3, #1
 8023f3e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8023f40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f44:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8023f48:	681b      	ldr	r3, [r3, #0]
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	da0a      	bge.n	8023f64 <arm_softmax_s8+0x2fac>
        threshold++;
 8023f4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f52:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8023f56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f5a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8023f5e:	681b      	ldr	r3, [r3, #0]
 8023f60:	3301      	adds	r3, #1
 8023f62:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8023f64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f68:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8023f6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f70:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8023f74:	6812      	ldr	r2, [r2, #0]
 8023f76:	681b      	ldr	r3, [r3, #0]
 8023f78:	429a      	cmp	r2, r3
 8023f7a:	dd0a      	ble.n	8023f92 <arm_softmax_s8+0x2fda>
        result++;
 8023f7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f80:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8023f84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f88:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8023f8c:	681b      	ldr	r3, [r3, #0]
 8023f8e:	3301      	adds	r3, #1
 8023f90:	6013      	str	r3, [r2, #0]
    return result;
 8023f92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f96:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8023f9a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8023f9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023fa0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8023fa4:	681b      	ldr	r3, [r3, #0]
 8023fa6:	441a      	add	r2, r3
 8023fa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023fac:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8023fb0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8023fb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023fb6:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8023fba:	2300      	movs	r3, #0
 8023fbc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023fc2:	f04f 0300 	mov.w	r3, #0
 8023fc6:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8023fca:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023fce:	2200      	movs	r2, #0
 8023fd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023fd4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8023fd8:	681b      	ldr	r3, [r3, #0]
 8023fda:	0fdb      	lsrs	r3, r3, #31
 8023fdc:	b2db      	uxtb	r3, r3
 8023fde:	4053      	eors	r3, r2
 8023fe0:	b2db      	uxtb	r3, r3
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	d012      	beq.n	802400c <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8023fe6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8023fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fee:	2100      	movs	r1, #0
 8023ff0:	f1d2 0001 	rsbs	r0, r2, #1
 8023ff4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8023ff8:	eb61 0303 	sbc.w	r3, r1, r3
 8023ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8024000:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8024004:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8024008:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802400c:	a13e      	add	r1, pc, #248	; (adr r1, 8024108 <arm_softmax_s8+0x3150>)
 802400e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024012:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024016:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 802401a:	681b      	ldr	r3, [r3, #0]
 802401c:	17da      	asrs	r2, r3, #31
 802401e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8024022:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8024026:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 802402a:	fb03 f201 	mul.w	r2, r3, r1
 802402e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8024032:	fb00 f303 	mul.w	r3, r0, r3
 8024036:	4413      	add	r3, r2
 8024038:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 802403c:	fba0 1202 	umull	r1, r2, r0, r2
 8024040:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8024044:	460a      	mov	r2, r1
 8024046:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 802404a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 802404e:	4413      	add	r3, r2
 8024050:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8024054:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8024058:	e9d3 2300 	ldrd	r2, r3, [r3]
 802405c:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8024060:	1851      	adds	r1, r2, r1
 8024062:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8024066:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 802406a:	414b      	adcs	r3, r1
 802406c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8024070:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8024074:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8024078:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802407c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8024080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024084:	2b00      	cmp	r3, #0
 8024086:	da0a      	bge.n	802409e <arm_softmax_s8+0x30e6>
 8024088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802408c:	1851      	adds	r1, r2, r1
 802408e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8024092:	f143 0300 	adc.w	r3, r3, #0
 8024096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802409a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 802409e:	f04f 0000 	mov.w	r0, #0
 80240a2:	f04f 0100 	mov.w	r1, #0
 80240a6:	0fd0      	lsrs	r0, r2, #31
 80240a8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80240ac:	17d9      	asrs	r1, r3, #31
 80240ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240b2:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 80240b6:	4603      	mov	r3, r0
 80240b8:	6013      	str	r3, [r2, #0]
    return result;
 80240ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240be:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80240c2:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 80240c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240c8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80240cc:	4b11      	ldr	r3, [pc, #68]	; (8024114 <arm_softmax_s8+0x315c>)
 80240ce:	440b      	add	r3, r1
 80240d0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 80240d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240d6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80240da:	6819      	ldr	r1, [r3, #0]
 80240dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240e0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80240e4:	1c4b      	adds	r3, r1, #1
 80240e6:	6013      	str	r3, [r2, #0]
 80240e8:	2301      	movs	r3, #1
 80240ea:	fa03 f201 	lsl.w	r2, r3, r1
 80240ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240f2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80240f6:	681b      	ldr	r3, [r3, #0]
 80240f8:	4013      	ands	r3, r2
 80240fa:	2b00      	cmp	r3, #0
 80240fc:	d010      	beq.n	8024120 <arm_softmax_s8+0x3168>
 80240fe:	f04f 32ff 	mov.w	r2, #4294967295
 8024102:	e00e      	b.n	8024122 <arm_softmax_s8+0x316a>
 8024104:	f3af 8000 	nop.w
 8024108:	70f5a894 	.word	0x70f5a894
 802410c:	00000000 	.word	0x00000000
 8024110:	2aaaaaab 	.word	0x2aaaaaab
 8024114:	70f5a894 	.word	0x70f5a894
 8024118:	2aaaaaab 	.word	0x2aaaaaab
 802411c:	00000000 	.word	0x00000000
 8024120:	2200      	movs	r2, #0
 8024122:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024126:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802412a:	601a      	str	r2, [r3, #0]
 802412c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024130:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8024134:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024138:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802413c:	681b      	ldr	r3, [r3, #0]
 802413e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024140:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024144:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8024148:	2300      	movs	r3, #0
 802414a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802414c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024150:	f04f 0300 	mov.w	r3, #0
 8024154:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8024158:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802415c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024160:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8024164:	681b      	ldr	r3, [r3, #0]
 8024166:	0fdb      	lsrs	r3, r3, #31
 8024168:	b2da      	uxtb	r2, r3
 802416a:	2300      	movs	r3, #0
 802416c:	4053      	eors	r3, r2
 802416e:	b2db      	uxtb	r3, r3
 8024170:	2b00      	cmp	r3, #0
 8024172:	d012      	beq.n	802419a <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8024174:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8024178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802417c:	2100      	movs	r1, #0
 802417e:	f1d2 0001 	rsbs	r0, r2, #1
 8024182:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8024186:	eb61 0303 	sbc.w	r3, r1, r3
 802418a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802418e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8024192:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8024196:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802419a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802419e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	17da      	asrs	r2, r3, #31
 80241a6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 80241aa:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 80241ae:	a3c4      	add	r3, pc, #784	; (adr r3, 80244c0 <arm_softmax_s8+0x3508>)
 80241b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241b4:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 80241b8:	fb02 f001 	mul.w	r0, r2, r1
 80241bc:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80241c0:	fb01 f103 	mul.w	r1, r1, r3
 80241c4:	4401      	add	r1, r0
 80241c6:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 80241ca:	fba0 2302 	umull	r2, r3, r0, r2
 80241ce:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80241d2:	4613      	mov	r3, r2
 80241d4:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80241d8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80241dc:	18cb      	adds	r3, r1, r3
 80241de:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80241e2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80241e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241ea:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 80241ee:	1851      	adds	r1, r2, r1
 80241f0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80241f4:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 80241f8:	414b      	adcs	r3, r1
 80241fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80241fe:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8024202:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8024206:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802420a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 802420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024212:	2b00      	cmp	r3, #0
 8024214:	da0a      	bge.n	802422c <arm_softmax_s8+0x3274>
 8024216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802421a:	1851      	adds	r1, r2, r1
 802421c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8024220:	f143 0300 	adc.w	r3, r3, #0
 8024224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8024228:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 802422c:	f04f 0000 	mov.w	r0, #0
 8024230:	f04f 0100 	mov.w	r1, #0
 8024234:	0fd0      	lsrs	r0, r2, #31
 8024236:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802423a:	17d9      	asrs	r1, r3, #31
 802423c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024240:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8024244:	4603      	mov	r3, r0
 8024246:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024248:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802424c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8024250:	681a      	ldr	r2, [r3, #0]
 8024252:	4b99      	ldr	r3, [pc, #612]	; (80244b8 <arm_softmax_s8+0x3500>)
 8024254:	429a      	cmp	r2, r3
 8024256:	d10e      	bne.n	8024276 <arm_softmax_s8+0x32be>
 8024258:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802425c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8024260:	681b      	ldr	r3, [r3, #0]
 8024262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024266:	d106      	bne.n	8024276 <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8024268:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802426c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8024270:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024274:	6013      	str	r3, [r2, #0]
    return result;
 8024276:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802427a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 802427e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8024280:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024284:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024288:	681b      	ldr	r3, [r3, #0]
 802428a:	ea02 0003 	and.w	r0, r2, r3
 802428e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024292:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024296:	681b      	ldr	r3, [r3, #0]
 8024298:	43da      	mvns	r2, r3
 802429a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802429e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80242a2:	681b      	ldr	r3, [r3, #0]
 80242a4:	ea02 0103 	and.w	r1, r2, r3
 80242a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242ac:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80242b0:	ea80 0301 	eor.w	r3, r0, r1
 80242b4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80242b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80242be:	6819      	ldr	r1, [r3, #0]
 80242c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242c4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80242c8:	1c4b      	adds	r3, r1, #1
 80242ca:	6013      	str	r3, [r2, #0]
 80242cc:	2301      	movs	r3, #1
 80242ce:	fa03 f201 	lsl.w	r2, r3, r1
 80242d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242d6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80242da:	681b      	ldr	r3, [r3, #0]
 80242dc:	4013      	ands	r3, r2
 80242de:	2b00      	cmp	r3, #0
 80242e0:	d002      	beq.n	80242e8 <arm_softmax_s8+0x3330>
 80242e2:	f04f 32ff 	mov.w	r2, #4294967295
 80242e6:	e000      	b.n	80242ea <arm_softmax_s8+0x3332>
 80242e8:	2200      	movs	r2, #0
 80242ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242ee:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80242f2:	601a      	str	r2, [r3, #0]
 80242f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242f8:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 80242fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024300:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024304:	681b      	ldr	r3, [r3, #0]
 8024306:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024308:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802430c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8024310:	2300      	movs	r3, #0
 8024312:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024318:	f04f 0300 	mov.w	r3, #0
 802431c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8024320:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024324:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024328:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 802432c:	681b      	ldr	r3, [r3, #0]
 802432e:	0fdb      	lsrs	r3, r3, #31
 8024330:	b2da      	uxtb	r2, r3
 8024332:	2300      	movs	r3, #0
 8024334:	4053      	eors	r3, r2
 8024336:	b2db      	uxtb	r3, r3
 8024338:	2b00      	cmp	r3, #0
 802433a:	d012      	beq.n	8024362 <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 802433c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8024340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024344:	2100      	movs	r1, #0
 8024346:	f1d2 0001 	rsbs	r0, r2, #1
 802434a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 802434e:	eb61 0303 	sbc.w	r3, r1, r3
 8024352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8024356:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 802435a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 802435e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024362:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024366:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 802436a:	681b      	ldr	r3, [r3, #0]
 802436c:	17da      	asrs	r2, r3, #31
 802436e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8024372:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8024376:	a34e      	add	r3, pc, #312	; (adr r3, 80244b0 <arm_softmax_s8+0x34f8>)
 8024378:	e9d3 2300 	ldrd	r2, r3, [r3]
 802437c:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8024380:	fb02 f001 	mul.w	r0, r2, r1
 8024384:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8024388:	fb01 f103 	mul.w	r1, r1, r3
 802438c:	4401      	add	r1, r0
 802438e:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8024392:	fba0 2302 	umull	r2, r3, r0, r2
 8024396:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 802439a:	4613      	mov	r3, r2
 802439c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80243a0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80243a4:	18cb      	adds	r3, r1, r3
 80243a6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80243aa:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80243ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243b2:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 80243b6:	1851      	adds	r1, r2, r1
 80243b8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80243bc:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 80243c0:	414b      	adcs	r3, r1
 80243c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80243c6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80243ca:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80243ce:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80243d2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80243d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243da:	2b00      	cmp	r3, #0
 80243dc:	da0a      	bge.n	80243f4 <arm_softmax_s8+0x343c>
 80243de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80243e2:	1851      	adds	r1, r2, r1
 80243e4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80243e8:	f143 0300 	adc.w	r3, r3, #0
 80243ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80243f0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80243f4:	f04f 0000 	mov.w	r0, #0
 80243f8:	f04f 0100 	mov.w	r1, #0
 80243fc:	0fd0      	lsrs	r0, r2, #31
 80243fe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024402:	17d9      	asrs	r1, r3, #31
 8024404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024408:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 802440c:	4603      	mov	r3, r0
 802440e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024410:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024414:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8024418:	681a      	ldr	r2, [r3, #0]
 802441a:	4b28      	ldr	r3, [pc, #160]	; (80244bc <arm_softmax_s8+0x3504>)
 802441c:	429a      	cmp	r2, r3
 802441e:	d10e      	bne.n	802443e <arm_softmax_s8+0x3486>
 8024420:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024424:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8024428:	681b      	ldr	r3, [r3, #0]
 802442a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802442e:	d106      	bne.n	802443e <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8024430:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024434:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8024438:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802443c:	6013      	str	r3, [r2, #0]
    return result;
 802443e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024442:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8024446:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8024448:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802444c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024450:	681b      	ldr	r3, [r3, #0]
 8024452:	ea02 0003 	and.w	r0, r2, r3
 8024456:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802445a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802445e:	681b      	ldr	r3, [r3, #0]
 8024460:	43da      	mvns	r2, r3
 8024462:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024466:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	ea02 0103 	and.w	r1, r2, r3
 8024470:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024474:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8024478:	ea80 0301 	eor.w	r3, r0, r1
 802447c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 802447e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024482:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8024486:	6819      	ldr	r1, [r3, #0]
 8024488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802448c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8024490:	1c4b      	adds	r3, r1, #1
 8024492:	6013      	str	r3, [r2, #0]
 8024494:	2301      	movs	r3, #1
 8024496:	fa03 f201 	lsl.w	r2, r3, r1
 802449a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802449e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80244a2:	681b      	ldr	r3, [r3, #0]
 80244a4:	4013      	ands	r3, r2
 80244a6:	2b00      	cmp	r3, #0
 80244a8:	d00e      	beq.n	80244c8 <arm_softmax_s8+0x3510>
 80244aa:	f04f 32ff 	mov.w	r2, #4294967295
 80244ae:	e00c      	b.n	80244ca <arm_softmax_s8+0x3512>
 80244b0:	4da2cbf2 	.word	0x4da2cbf2
 80244b4:	00000000 	.word	0x00000000
 80244b8:	63afbe7b 	.word	0x63afbe7b
 80244bc:	4da2cbf2 	.word	0x4da2cbf2
 80244c0:	63afbe7b 	.word	0x63afbe7b
 80244c4:	00000000 	.word	0x00000000
 80244c8:	2200      	movs	r2, #0
 80244ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244ce:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80244d2:	601a      	str	r2, [r3, #0]
 80244d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244d8:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80244dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244e0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80244e4:	681b      	ldr	r3, [r3, #0]
 80244e6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80244e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244ec:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80244f0:	2300      	movs	r3, #0
 80244f2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80244f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80244f8:	f04f 0300 	mov.w	r3, #0
 80244fc:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8024500:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024508:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 802450c:	681b      	ldr	r3, [r3, #0]
 802450e:	0fdb      	lsrs	r3, r3, #31
 8024510:	b2da      	uxtb	r2, r3
 8024512:	2300      	movs	r3, #0
 8024514:	4053      	eors	r3, r2
 8024516:	b2db      	uxtb	r3, r3
 8024518:	2b00      	cmp	r3, #0
 802451a:	d012      	beq.n	8024542 <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 802451c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8024520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024524:	2100      	movs	r1, #0
 8024526:	f1d2 0001 	rsbs	r0, r2, #1
 802452a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 802452e:	eb61 0303 	sbc.w	r3, r1, r3
 8024532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8024536:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 802453a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 802453e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024542:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024546:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 802454a:	681b      	ldr	r3, [r3, #0]
 802454c:	17da      	asrs	r2, r3, #31
 802454e:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8024552:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8024556:	a3c0      	add	r3, pc, #768	; (adr r3, 8024858 <arm_softmax_s8+0x38a0>)
 8024558:	e9d3 2300 	ldrd	r2, r3, [r3]
 802455c:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8024560:	fb02 f001 	mul.w	r0, r2, r1
 8024564:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8024568:	fb01 f103 	mul.w	r1, r1, r3
 802456c:	4401      	add	r1, r0
 802456e:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 8024572:	fba0 2302 	umull	r2, r3, r0, r2
 8024576:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 802457a:	4613      	mov	r3, r2
 802457c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8024580:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8024584:	18cb      	adds	r3, r1, r3
 8024586:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 802458a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 802458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024592:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 8024596:	1851      	adds	r1, r2, r1
 8024598:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 802459c:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 80245a0:	414b      	adcs	r3, r1
 80245a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80245a6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80245aa:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80245ae:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80245b2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80245b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245ba:	2b00      	cmp	r3, #0
 80245bc:	da08      	bge.n	80245d0 <arm_softmax_s8+0x3618>
 80245be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80245c2:	1851      	adds	r1, r2, r1
 80245c4:	67b9      	str	r1, [r7, #120]	; 0x78
 80245c6:	f143 0300 	adc.w	r3, r3, #0
 80245ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80245cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80245d0:	f04f 0000 	mov.w	r0, #0
 80245d4:	f04f 0100 	mov.w	r1, #0
 80245d8:	0fd0      	lsrs	r0, r2, #31
 80245da:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80245de:	17d9      	asrs	r1, r3, #31
 80245e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80245e4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80245e8:	4603      	mov	r3, r0
 80245ea:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80245ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80245f0:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80245f4:	681a      	ldr	r2, [r3, #0]
 80245f6:	4b96      	ldr	r3, [pc, #600]	; (8024850 <arm_softmax_s8+0x3898>)
 80245f8:	429a      	cmp	r2, r3
 80245fa:	d10e      	bne.n	802461a <arm_softmax_s8+0x3662>
 80245fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024600:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8024604:	681b      	ldr	r3, [r3, #0]
 8024606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802460a:	d106      	bne.n	802461a <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 802460c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024610:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8024614:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024618:	6013      	str	r3, [r2, #0]
    return result;
 802461a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802461e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8024622:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8024624:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024628:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802462c:	681b      	ldr	r3, [r3, #0]
 802462e:	ea02 0003 	and.w	r0, r2, r3
 8024632:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024636:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802463a:	681b      	ldr	r3, [r3, #0]
 802463c:	43da      	mvns	r2, r3
 802463e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024642:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024646:	681b      	ldr	r3, [r3, #0]
 8024648:	ea02 0103 	and.w	r1, r2, r3
 802464c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024650:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8024654:	ea80 0301 	eor.w	r3, r0, r1
 8024658:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 802465a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802465e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8024662:	6819      	ldr	r1, [r3, #0]
 8024664:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024668:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 802466c:	1c4b      	adds	r3, r1, #1
 802466e:	6013      	str	r3, [r2, #0]
 8024670:	2301      	movs	r3, #1
 8024672:	fa03 f201 	lsl.w	r2, r3, r1
 8024676:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802467a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802467e:	681b      	ldr	r3, [r3, #0]
 8024680:	4013      	ands	r3, r2
 8024682:	2b00      	cmp	r3, #0
 8024684:	d002      	beq.n	802468c <arm_softmax_s8+0x36d4>
 8024686:	f04f 32ff 	mov.w	r2, #4294967295
 802468a:	e000      	b.n	802468e <arm_softmax_s8+0x36d6>
 802468c:	2200      	movs	r2, #0
 802468e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024692:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024696:	601a      	str	r2, [r3, #0]
 8024698:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802469c:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 80246a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246a4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80246a8:	681b      	ldr	r3, [r3, #0]
 80246aa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80246ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246b0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80246b4:	2300      	movs	r3, #0
 80246b6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80246b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80246bc:	f04f 0300 	mov.w	r3, #0
 80246c0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80246c4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80246c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246cc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80246d0:	681b      	ldr	r3, [r3, #0]
 80246d2:	0fdb      	lsrs	r3, r3, #31
 80246d4:	b2da      	uxtb	r2, r3
 80246d6:	2300      	movs	r3, #0
 80246d8:	4053      	eors	r3, r2
 80246da:	b2db      	uxtb	r3, r3
 80246dc:	2b00      	cmp	r3, #0
 80246de:	d010      	beq.n	8024702 <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 80246e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80246e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246e8:	2100      	movs	r1, #0
 80246ea:	f1d2 0001 	rsbs	r0, r2, #1
 80246ee:	6738      	str	r0, [r7, #112]	; 0x70
 80246f0:	eb61 0303 	sbc.w	r3, r1, r3
 80246f4:	677b      	str	r3, [r7, #116]	; 0x74
 80246f6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80246fa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80246fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024702:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024706:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 802470a:	681b      	ldr	r3, [r3, #0]
 802470c:	17da      	asrs	r2, r3, #31
 802470e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8024712:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8024716:	a34c      	add	r3, pc, #304	; (adr r3, 8024848 <arm_softmax_s8+0x3890>)
 8024718:	e9d3 2300 	ldrd	r2, r3, [r3]
 802471c:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8024720:	fb02 f001 	mul.w	r0, r2, r1
 8024724:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8024728:	fb01 f103 	mul.w	r1, r1, r3
 802472c:	4401      	add	r1, r0
 802472e:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8024732:	fba0 2302 	umull	r2, r3, r0, r2
 8024736:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 802473a:	4613      	mov	r3, r2
 802473c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8024740:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8024744:	18cb      	adds	r3, r1, r3
 8024746:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 802474a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024752:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8024756:	1851      	adds	r1, r2, r1
 8024758:	66b9      	str	r1, [r7, #104]	; 0x68
 802475a:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 802475e:	414b      	adcs	r3, r1
 8024760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8024762:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8024766:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802476a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802476e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8024772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024776:	2b00      	cmp	r3, #0
 8024778:	da08      	bge.n	802478c <arm_softmax_s8+0x37d4>
 802477a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802477e:	1851      	adds	r1, r2, r1
 8024780:	6639      	str	r1, [r7, #96]	; 0x60
 8024782:	f143 0300 	adc.w	r3, r3, #0
 8024786:	667b      	str	r3, [r7, #100]	; 0x64
 8024788:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 802478c:	f04f 0000 	mov.w	r0, #0
 8024790:	f04f 0100 	mov.w	r1, #0
 8024794:	0fd0      	lsrs	r0, r2, #31
 8024796:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802479a:	17d9      	asrs	r1, r3, #31
 802479c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247a0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80247a4:	4603      	mov	r3, r0
 80247a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80247a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247ac:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80247b0:	681a      	ldr	r2, [r3, #0]
 80247b2:	4b28      	ldr	r3, [pc, #160]	; (8024854 <arm_softmax_s8+0x389c>)
 80247b4:	429a      	cmp	r2, r3
 80247b6:	d10e      	bne.n	80247d6 <arm_softmax_s8+0x381e>
 80247b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247bc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80247c0:	681b      	ldr	r3, [r3, #0]
 80247c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80247c6:	d106      	bne.n	80247d6 <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 80247c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247cc:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80247d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80247d4:	6013      	str	r3, [r2, #0]
    return result;
 80247d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247da:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80247de:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80247e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247e4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80247e8:	681b      	ldr	r3, [r3, #0]
 80247ea:	ea02 0003 	and.w	r0, r2, r3
 80247ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247f2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80247f6:	681b      	ldr	r3, [r3, #0]
 80247f8:	43da      	mvns	r2, r3
 80247fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80247fe:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	ea02 0103 	and.w	r1, r2, r3
 8024808:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802480c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8024810:	ea80 0301 	eor.w	r3, r0, r1
 8024814:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8024816:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802481a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802481e:	6819      	ldr	r1, [r3, #0]
 8024820:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024824:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8024828:	1c4b      	adds	r3, r1, #1
 802482a:	6013      	str	r3, [r2, #0]
 802482c:	2301      	movs	r3, #1
 802482e:	fa03 f201 	lsl.w	r2, r3, r1
 8024832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024836:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802483a:	681b      	ldr	r3, [r3, #0]
 802483c:	4013      	ands	r3, r2
 802483e:	2b00      	cmp	r3, #0
 8024840:	d00e      	beq.n	8024860 <arm_softmax_s8+0x38a8>
 8024842:	f04f 32ff 	mov.w	r2, #4294967295
 8024846:	e00c      	b.n	8024862 <arm_softmax_s8+0x38aa>
 8024848:	1152aaa4 	.word	0x1152aaa4
 802484c:	00000000 	.word	0x00000000
 8024850:	2f16ac6c 	.word	0x2f16ac6c
 8024854:	1152aaa4 	.word	0x1152aaa4
 8024858:	2f16ac6c 	.word	0x2f16ac6c
 802485c:	00000000 	.word	0x00000000
 8024860:	2200      	movs	r2, #0
 8024862:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024866:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802486a:	601a      	str	r2, [r3, #0]
 802486c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024870:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8024874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024878:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802487c:	681b      	ldr	r3, [r3, #0]
 802487e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024880:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024884:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8024888:	2300      	movs	r3, #0
 802488a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802488c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024890:	f04f 0300 	mov.w	r3, #0
 8024894:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8024898:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802489c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248a0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80248a4:	681b      	ldr	r3, [r3, #0]
 80248a6:	0fdb      	lsrs	r3, r3, #31
 80248a8:	b2da      	uxtb	r2, r3
 80248aa:	2300      	movs	r3, #0
 80248ac:	4053      	eors	r3, r2
 80248ae:	b2db      	uxtb	r3, r3
 80248b0:	2b00      	cmp	r3, #0
 80248b2:	d010      	beq.n	80248d6 <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 80248b4:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80248b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248bc:	2100      	movs	r1, #0
 80248be:	f1d2 0001 	rsbs	r0, r2, #1
 80248c2:	65b8      	str	r0, [r7, #88]	; 0x58
 80248c4:	eb61 0303 	sbc.w	r3, r1, r3
 80248c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80248ca:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80248ce:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80248d2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80248d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248da:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80248de:	681b      	ldr	r3, [r3, #0]
 80248e0:	17da      	asrs	r2, r3, #31
 80248e2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80248e6:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 80248ea:	a3bd      	add	r3, pc, #756	; (adr r3, 8024be0 <arm_softmax_s8+0x3c28>)
 80248ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248f0:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80248f4:	fb02 f001 	mul.w	r0, r2, r1
 80248f8:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 80248fc:	fb01 f103 	mul.w	r1, r1, r3
 8024900:	4401      	add	r1, r0
 8024902:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8024906:	fba0 2302 	umull	r2, r3, r0, r2
 802490a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 802490e:	4613      	mov	r3, r2
 8024910:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8024914:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8024918:	18cb      	adds	r3, r1, r3
 802491a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 802491e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8024922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024926:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 802492a:	1851      	adds	r1, r2, r1
 802492c:	6539      	str	r1, [r7, #80]	; 0x50
 802492e:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8024932:	414b      	adcs	r3, r1
 8024934:	657b      	str	r3, [r7, #84]	; 0x54
 8024936:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 802493a:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 802493e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024942:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8024946:	e9d3 2300 	ldrd	r2, r3, [r3]
 802494a:	2b00      	cmp	r3, #0
 802494c:	da08      	bge.n	8024960 <arm_softmax_s8+0x39a8>
 802494e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024952:	1851      	adds	r1, r2, r1
 8024954:	64b9      	str	r1, [r7, #72]	; 0x48
 8024956:	f143 0300 	adc.w	r3, r3, #0
 802495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802495c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024960:	f04f 0000 	mov.w	r0, #0
 8024964:	f04f 0100 	mov.w	r1, #0
 8024968:	0fd0      	lsrs	r0, r2, #31
 802496a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802496e:	17d9      	asrs	r1, r3, #31
 8024970:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024974:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8024978:	4603      	mov	r3, r0
 802497a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802497c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024980:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8024984:	681a      	ldr	r2, [r3, #0]
 8024986:	4b94      	ldr	r3, [pc, #592]	; (8024bd8 <arm_softmax_s8+0x3c20>)
 8024988:	429a      	cmp	r2, r3
 802498a:	d10e      	bne.n	80249aa <arm_softmax_s8+0x39f2>
 802498c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024990:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8024994:	681b      	ldr	r3, [r3, #0]
 8024996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802499a:	d106      	bne.n	80249aa <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 802499c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249a0:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80249a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80249a8:	6013      	str	r3, [r2, #0]
    return result;
 80249aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249ae:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80249b2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80249b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249b8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80249bc:	681b      	ldr	r3, [r3, #0]
 80249be:	ea02 0003 	and.w	r0, r2, r3
 80249c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249c6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80249ca:	681b      	ldr	r3, [r3, #0]
 80249cc:	43da      	mvns	r2, r3
 80249ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249d2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80249d6:	681b      	ldr	r3, [r3, #0]
 80249d8:	ea02 0103 	and.w	r1, r2, r3
 80249dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249e0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80249e4:	ea80 0301 	eor.w	r3, r0, r1
 80249e8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 80249ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249ee:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80249f2:	6819      	ldr	r1, [r3, #0]
 80249f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249f8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80249fc:	1c4b      	adds	r3, r1, #1
 80249fe:	6013      	str	r3, [r2, #0]
 8024a00:	2301      	movs	r3, #1
 8024a02:	fa03 f201 	lsl.w	r2, r3, r1
 8024a06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a0a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024a0e:	681b      	ldr	r3, [r3, #0]
 8024a10:	4013      	ands	r3, r2
 8024a12:	2b00      	cmp	r3, #0
 8024a14:	d002      	beq.n	8024a1c <arm_softmax_s8+0x3a64>
 8024a16:	f04f 32ff 	mov.w	r2, #4294967295
 8024a1a:	e000      	b.n	8024a1e <arm_softmax_s8+0x3a66>
 8024a1c:	2200      	movs	r2, #0
 8024a1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a22:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024a26:	601a      	str	r2, [r3, #0]
 8024a28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a2c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8024a30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a34:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024a38:	681b      	ldr	r3, [r3, #0]
 8024a3a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024a3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a40:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8024a44:	2300      	movs	r3, #0
 8024a46:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024a4c:	f04f 0300 	mov.w	r3, #0
 8024a50:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8024a54:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024a58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a5c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8024a60:	681b      	ldr	r3, [r3, #0]
 8024a62:	0fdb      	lsrs	r3, r3, #31
 8024a64:	b2da      	uxtb	r2, r3
 8024a66:	2300      	movs	r3, #0
 8024a68:	4053      	eors	r3, r2
 8024a6a:	b2db      	uxtb	r3, r3
 8024a6c:	2b00      	cmp	r3, #0
 8024a6e:	d010      	beq.n	8024a92 <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8024a70:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8024a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a78:	2100      	movs	r1, #0
 8024a7a:	f1d2 0001 	rsbs	r0, r2, #1
 8024a7e:	6438      	str	r0, [r7, #64]	; 0x40
 8024a80:	eb61 0303 	sbc.w	r3, r1, r3
 8024a84:	647b      	str	r3, [r7, #68]	; 0x44
 8024a86:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8024a8a:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8024a8e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024a92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a96:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8024a9a:	681b      	ldr	r3, [r3, #0]
 8024a9c:	17da      	asrs	r2, r3, #31
 8024a9e:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8024aa2:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8024aa6:	4a4d      	ldr	r2, [pc, #308]	; (8024bdc <arm_softmax_s8+0x3c24>)
 8024aa8:	f04f 0300 	mov.w	r3, #0
 8024aac:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8024ab0:	fb02 f001 	mul.w	r0, r2, r1
 8024ab4:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8024ab8:	fb01 f103 	mul.w	r1, r1, r3
 8024abc:	4401      	add	r1, r0
 8024abe:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8024ac2:	fba0 2302 	umull	r2, r3, r0, r2
 8024ac6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8024aca:	4613      	mov	r3, r2
 8024acc:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8024ad0:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8024ad4:	18cb      	adds	r3, r1, r3
 8024ad6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8024ada:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8024ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ae2:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8024ae6:	1851      	adds	r1, r2, r1
 8024ae8:	63b9      	str	r1, [r7, #56]	; 0x38
 8024aea:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8024aee:	414b      	adcs	r3, r1
 8024af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024af2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8024af6:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8024afa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024afe:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8024b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b06:	2b00      	cmp	r3, #0
 8024b08:	da08      	bge.n	8024b1c <arm_softmax_s8+0x3b64>
 8024b0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024b0e:	1851      	adds	r1, r2, r1
 8024b10:	6339      	str	r1, [r7, #48]	; 0x30
 8024b12:	f143 0300 	adc.w	r3, r3, #0
 8024b16:	637b      	str	r3, [r7, #52]	; 0x34
 8024b18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8024b1c:	f04f 0000 	mov.w	r0, #0
 8024b20:	f04f 0100 	mov.w	r1, #0
 8024b24:	0fd0      	lsrs	r0, r2, #31
 8024b26:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024b2a:	17d9      	asrs	r1, r3, #31
 8024b2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b30:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8024b34:	4603      	mov	r3, r0
 8024b36:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b3c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8024b40:	681a      	ldr	r2, [r3, #0]
 8024b42:	4b26      	ldr	r3, [pc, #152]	; (8024bdc <arm_softmax_s8+0x3c24>)
 8024b44:	429a      	cmp	r2, r3
 8024b46:	d10e      	bne.n	8024b66 <arm_softmax_s8+0x3bae>
 8024b48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b4c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8024b50:	681b      	ldr	r3, [r3, #0]
 8024b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024b56:	d106      	bne.n	8024b66 <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8024b58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b5c:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8024b60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024b64:	6013      	str	r3, [r2, #0]
    return result;
 8024b66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b6a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8024b6e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8024b70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b74:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024b78:	681b      	ldr	r3, [r3, #0]
 8024b7a:	ea02 0003 	and.w	r0, r2, r3
 8024b7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b82:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	43da      	mvns	r2, r3
 8024b8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b8e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024b92:	681b      	ldr	r3, [r3, #0]
 8024b94:	ea02 0103 	and.w	r1, r2, r3
 8024b98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b9c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8024ba0:	ea80 0301 	eor.w	r3, r0, r1
 8024ba4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 8024ba6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024baa:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8024bae:	6819      	ldr	r1, [r3, #0]
 8024bb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024bb4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8024bb8:	1c4b      	adds	r3, r1, #1
 8024bba:	6013      	str	r3, [r2, #0]
 8024bbc:	2301      	movs	r3, #1
 8024bbe:	fa03 f201 	lsl.w	r2, r3, r1
 8024bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024bc6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024bca:	681b      	ldr	r3, [r3, #0]
 8024bcc:	4013      	ands	r3, r2
 8024bce:	2b00      	cmp	r3, #0
 8024bd0:	d00a      	beq.n	8024be8 <arm_softmax_s8+0x3c30>
 8024bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8024bd6:	e008      	b.n	8024bea <arm_softmax_s8+0x3c32>
 8024bd8:	02582ab7 	.word	0x02582ab7
 8024bdc:	000afe11 	.word	0x000afe11
 8024be0:	02582ab7 	.word	0x02582ab7
 8024be4:	00000000 	.word	0x00000000
 8024be8:	2200      	movs	r2, #0
 8024bea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024bee:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024bf2:	601a      	str	r2, [r3, #0]
 8024bf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024bf8:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8024bfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c00:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024c04:	681b      	ldr	r3, [r3, #0]
 8024c06:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024c08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c0c:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8024c10:	2300      	movs	r3, #0
 8024c12:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024c18:	f04f 0300 	mov.w	r3, #0
 8024c1c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8024c20:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024c24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c28:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8024c2c:	681b      	ldr	r3, [r3, #0]
 8024c2e:	0fdb      	lsrs	r3, r3, #31
 8024c30:	b2da      	uxtb	r2, r3
 8024c32:	2300      	movs	r3, #0
 8024c34:	4053      	eors	r3, r2
 8024c36:	b2db      	uxtb	r3, r3
 8024c38:	2b00      	cmp	r3, #0
 8024c3a:	d010      	beq.n	8024c5e <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8024c3c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8024c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c44:	2100      	movs	r1, #0
 8024c46:	f1d2 0001 	rsbs	r0, r2, #1
 8024c4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8024c4c:	eb61 0303 	sbc.w	r3, r1, r3
 8024c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024c52:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8024c56:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8024c5a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024c5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c62:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8024c66:	681b      	ldr	r3, [r3, #0]
 8024c68:	17da      	asrs	r2, r3, #31
 8024c6a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8024c6e:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8024c72:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8024c76:	f04f 0300 	mov.w	r3, #0
 8024c7a:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8024c7e:	fb02 f001 	mul.w	r0, r2, r1
 8024c82:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8024c86:	fb01 f103 	mul.w	r1, r1, r3
 8024c8a:	4401      	add	r1, r0
 8024c8c:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8024c90:	fba0 2302 	umull	r2, r3, r0, r2
 8024c94:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8024c98:	4613      	mov	r3, r2
 8024c9a:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8024c9e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8024ca2:	18cb      	adds	r3, r1, r3
 8024ca4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8024ca8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8024cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cb0:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8024cb4:	1851      	adds	r1, r2, r1
 8024cb6:	6239      	str	r1, [r7, #32]
 8024cb8:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8024cbc:	414b      	adcs	r3, r1
 8024cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8024cc0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8024cc4:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8024cc8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024ccc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8024cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cd4:	2b00      	cmp	r3, #0
 8024cd6:	da08      	bge.n	8024cea <arm_softmax_s8+0x3d32>
 8024cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024cdc:	1851      	adds	r1, r2, r1
 8024cde:	61b9      	str	r1, [r7, #24]
 8024ce0:	f143 0300 	adc.w	r3, r3, #0
 8024ce4:	61fb      	str	r3, [r7, #28]
 8024ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024cea:	f04f 0000 	mov.w	r0, #0
 8024cee:	f04f 0100 	mov.w	r1, #0
 8024cf2:	0fd0      	lsrs	r0, r2, #31
 8024cf4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024cf8:	17d9      	asrs	r1, r3, #31
 8024cfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024cfe:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8024d02:	4603      	mov	r3, r0
 8024d04:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024d06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d0a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8024d0e:	681b      	ldr	r3, [r3, #0]
 8024d10:	2bf2      	cmp	r3, #242	; 0xf2
 8024d12:	d10e      	bne.n	8024d32 <arm_softmax_s8+0x3d7a>
 8024d14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d18:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8024d1c:	681b      	ldr	r3, [r3, #0]
 8024d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024d22:	d106      	bne.n	8024d32 <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8024d24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d28:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8024d2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024d30:	6013      	str	r3, [r2, #0]
    return result;
 8024d32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d36:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8024d3a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8024d3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d40:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024d44:	681b      	ldr	r3, [r3, #0]
 8024d46:	ea02 0003 	and.w	r0, r2, r3
 8024d4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d4e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024d52:	681b      	ldr	r3, [r3, #0]
 8024d54:	43da      	mvns	r2, r3
 8024d56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d5a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	ea02 0103 	and.w	r1, r2, r3
 8024d64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d68:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8024d6c:	ea80 0301 	eor.w	r3, r0, r1
 8024d70:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8024d72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d76:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8024d7a:	681b      	ldr	r3, [r3, #0]
 8024d7c:	2b00      	cmp	r3, #0
 8024d7e:	d102      	bne.n	8024d86 <arm_softmax_s8+0x3dce>
 8024d80:	f04f 32ff 	mov.w	r2, #4294967295
 8024d84:	e000      	b.n	8024d88 <arm_softmax_s8+0x3dd0>
 8024d86:	2200      	movs	r2, #0
 8024d88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d8c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024d90:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8024d92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d96:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024d9a:	681b      	ldr	r3, [r3, #0]
 8024d9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024da0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024da4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024da8:	681b      	ldr	r3, [r3, #0]
 8024daa:	43da      	mvns	r2, r3
 8024dac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024db0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	4013      	ands	r3, r2
 8024db8:	4059      	eors	r1, r3
 8024dba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024dbe:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8024dc2:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8024dc6:	6013      	str	r3, [r2, #0]
 8024dc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024dcc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8024dd0:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8024dd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024dd6:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8024dda:	2300      	movs	r3, #0
 8024ddc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024de2:	f04f 0300 	mov.w	r3, #0
 8024de6:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8024dea:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024dee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024df2:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8024df6:	681b      	ldr	r3, [r3, #0]
 8024df8:	0fdb      	lsrs	r3, r3, #31
 8024dfa:	b2da      	uxtb	r2, r3
 8024dfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e00:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8024e04:	681b      	ldr	r3, [r3, #0]
 8024e06:	0fdb      	lsrs	r3, r3, #31
 8024e08:	b2db      	uxtb	r3, r3
 8024e0a:	4053      	eors	r3, r2
 8024e0c:	b2db      	uxtb	r3, r3
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d010      	beq.n	8024e34 <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8024e12:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8024e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e1a:	2100      	movs	r1, #0
 8024e1c:	f1d2 0001 	rsbs	r0, r2, #1
 8024e20:	6138      	str	r0, [r7, #16]
 8024e22:	eb61 0303 	sbc.w	r3, r1, r3
 8024e26:	617b      	str	r3, [r7, #20]
 8024e28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8024e2c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8024e30:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024e34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e38:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8024e3c:	681b      	ldr	r3, [r3, #0]
 8024e3e:	17da      	asrs	r2, r3, #31
 8024e40:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8024e44:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8024e48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e4c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8024e50:	681b      	ldr	r3, [r3, #0]
 8024e52:	17da      	asrs	r2, r3, #31
 8024e54:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8024e58:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8024e5c:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8024e60:	460b      	mov	r3, r1
 8024e62:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8024e66:	fb02 f203 	mul.w	r2, r2, r3
 8024e6a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8024e6e:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8024e72:	4601      	mov	r1, r0
 8024e74:	fb01 f303 	mul.w	r3, r1, r3
 8024e78:	4413      	add	r3, r2
 8024e7a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8024e7e:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8024e82:	fba2 1201 	umull	r1, r2, r2, r1
 8024e86:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8024e8a:	460a      	mov	r2, r1
 8024e8c:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8024e90:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8024e94:	4413      	add	r3, r2
 8024e96:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8024e9a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8024e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ea2:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8024ea6:	1851      	adds	r1, r2, r1
 8024ea8:	60b9      	str	r1, [r7, #8]
 8024eaa:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8024eae:	414b      	adcs	r3, r1
 8024eb0:	60fb      	str	r3, [r7, #12]
 8024eb2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8024eb6:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8024eba:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024ebe:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8024ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ec6:	2b00      	cmp	r3, #0
 8024ec8:	da08      	bge.n	8024edc <arm_softmax_s8+0x3f24>
 8024eca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024ece:	1851      	adds	r1, r2, r1
 8024ed0:	6039      	str	r1, [r7, #0]
 8024ed2:	f143 0300 	adc.w	r3, r3, #0
 8024ed6:	607b      	str	r3, [r7, #4]
 8024ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024edc:	f04f 0000 	mov.w	r0, #0
 8024ee0:	f04f 0100 	mov.w	r1, #0
 8024ee4:	0fd0      	lsrs	r0, r2, #31
 8024ee6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024eea:	17d9      	asrs	r1, r3, #31
 8024eec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024ef0:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8024ef4:	4603      	mov	r3, r0
 8024ef6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024ef8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024efc:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8024f00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f04:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8024f08:	6812      	ldr	r2, [r2, #0]
 8024f0a:	681b      	ldr	r3, [r3, #0]
 8024f0c:	429a      	cmp	r2, r3
 8024f0e:	d10e      	bne.n	8024f2e <arm_softmax_s8+0x3f76>
 8024f10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f14:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8024f18:	681b      	ldr	r3, [r3, #0]
 8024f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024f1e:	d106      	bne.n	8024f2e <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8024f20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f24:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8024f28:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024f2c:	6013      	str	r3, [r2, #0]
    return result;
 8024f2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f32:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8024f36:	681a      	ldr	r2, [r3, #0]
 8024f38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f3c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8024f40:	601a      	str	r2, [r3, #0]
 8024f42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f46:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8024f4a:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8024f4e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024f50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f54:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8024f58:	2300      	movs	r3, #0
 8024f5a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8024f5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f60:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8024f64:	2201      	movs	r2, #1
 8024f66:	681b      	ldr	r3, [r3, #0]
 8024f68:	fa02 f103 	lsl.w	r1, r2, r3
 8024f6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f70:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8024f74:	1e4b      	subs	r3, r1, #1
 8024f76:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8024f78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f7c:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8024f80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f84:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8024f88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f8c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8024f90:	6812      	ldr	r2, [r2, #0]
 8024f92:	681b      	ldr	r3, [r3, #0]
 8024f94:	4013      	ands	r3, r2
 8024f96:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8024f98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f9c:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8024fa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fa4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8024fa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8024fb0:	6812      	ldr	r2, [r2, #0]
 8024fb2:	681b      	ldr	r3, [r3, #0]
 8024fb4:	fa42 f303 	asr.w	r3, r2, r3
 8024fb8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8024fba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fbe:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8024fc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fc6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8024fca:	681b      	ldr	r3, [r3, #0]
 8024fcc:	105b      	asrs	r3, r3, #1
 8024fce:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8024fd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fd4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8024fd8:	681b      	ldr	r3, [r3, #0]
 8024fda:	2b00      	cmp	r3, #0
 8024fdc:	da0a      	bge.n	8024ff4 <arm_softmax_s8+0x403c>
        threshold++;
 8024fde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fe2:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8024fe6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fea:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8024fee:	681b      	ldr	r3, [r3, #0]
 8024ff0:	3301      	adds	r3, #1
 8024ff2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8024ff4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024ff8:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8024ffc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025000:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8025004:	6812      	ldr	r2, [r2, #0]
 8025006:	681b      	ldr	r3, [r3, #0]
 8025008:	429a      	cmp	r2, r3
 802500a:	dd0a      	ble.n	8025022 <arm_softmax_s8+0x406a>
        result++;
 802500c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025010:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8025014:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025018:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	3301      	adds	r3, #1
 8025020:	6013      	str	r3, [r2, #0]
    return result;
 8025022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025026:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 802502a:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 802502c:	3b80      	subs	r3, #128	; 0x80
 802502e:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8025032:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8025036:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 802503a:	db09      	blt.n	8025050 <arm_softmax_s8+0x4098>
 802503c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8025040:	2b7e      	cmp	r3, #126	; 0x7e
 8025042:	dc03      	bgt.n	802504c <arm_softmax_s8+0x4094>
 8025044:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8025048:	b259      	sxtb	r1, r3
 802504a:	e003      	b.n	8025054 <arm_softmax_s8+0x409c>
 802504c:	217f      	movs	r1, #127	; 0x7f
 802504e:	e001      	b.n	8025054 <arm_softmax_s8+0x409c>
 8025050:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8025054:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8025058:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 802505c:	441a      	add	r2, r3
 802505e:	460b      	mov	r3, r1
 8025060:	7013      	strb	r3, [r2, #0]
 8025062:	e006      	b.n	8025072 <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8025064:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8025068:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 802506c:	441a      	add	r2, r3
 802506e:	2380      	movs	r3, #128	; 0x80
 8025070:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8025072:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8025076:	3301      	adds	r3, #1
 8025078:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 802507c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025080:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8025084:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8025088:	681b      	ldr	r3, [r3, #0]
 802508a:	429a      	cmp	r2, r3
 802508c:	f6fe aa71 	blt.w	8023572 <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8025090:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025094:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8025098:	6819      	ldr	r1, [r3, #0]
 802509a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802509e:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 80250a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80250a6:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80250aa:	681b      	ldr	r3, [r3, #0]
 80250ac:	440b      	add	r3, r1
 80250ae:	6013      	str	r3, [r2, #0]
        output += row_size;
 80250b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80250b4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80250b8:	681a      	ldr	r2, [r3, #0]
 80250ba:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80250be:	4413      	add	r3, r2
 80250c0:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80250c4:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 80250c8:	3301      	adds	r3, #1
 80250ca:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 80250ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80250d2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80250d6:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 80250da:	681b      	ldr	r3, [r3, #0]
 80250dc:	429a      	cmp	r2, r3
 80250de:	f6fb af93 	blt.w	8021008 <arm_softmax_s8+0x50>
    }

#endif
}
 80250e2:	bf00      	nop
 80250e4:	bf00      	nop
 80250e6:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 80250ea:	46bd      	mov	sp, r7
 80250ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80250f0:	4770      	bx	lr
 80250f2:	bf00      	nop

080250f4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80250f4:	b480      	push	{r7}
 80250f6:	b089      	sub	sp, #36	; 0x24
 80250f8:	af00      	add	r7, sp, #0
 80250fa:	60f8      	str	r0, [r7, #12]
 80250fc:	60b9      	str	r1, [r7, #8]
 80250fe:	607a      	str	r2, [r7, #4]
 8025100:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8025102:	687b      	ldr	r3, [r7, #4]
 8025104:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8025108:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 802510a:	683b      	ldr	r3, [r7, #0]
 802510c:	00db      	lsls	r3, r3, #3
 802510e:	68fa      	ldr	r2, [r7, #12]
 8025110:	4413      	add	r3, r2
 8025112:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8025114:	69fb      	ldr	r3, [r7, #28]
 8025116:	ed93 7a00 	vldr	s14, [r3]
 802511a:	69bb      	ldr	r3, [r7, #24]
 802511c:	edd3 7a00 	vldr	s15, [r3]
 8025120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025124:	69fb      	ldr	r3, [r7, #28]
 8025126:	edd3 6a01 	vldr	s13, [r3, #4]
 802512a:	69bb      	ldr	r3, [r7, #24]
 802512c:	edd3 7a01 	vldr	s15, [r3, #4]
 8025130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025138:	edc7 7a04 	vstr	s15, [r7, #16]
 802513c:	69fb      	ldr	r3, [r7, #28]
 802513e:	ed93 7a00 	vldr	s14, [r3]
 8025142:	69bb      	ldr	r3, [r7, #24]
 8025144:	edd3 7a01 	vldr	s15, [r3, #4]
 8025148:	ee27 7a27 	vmul.f32	s14, s14, s15
 802514c:	69fb      	ldr	r3, [r7, #28]
 802514e:	edd3 6a01 	vldr	s13, [r3, #4]
 8025152:	69bb      	ldr	r3, [r7, #24]
 8025154:	edd3 7a00 	vldr	s15, [r3]
 8025158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802515c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025160:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8025164:	68bb      	ldr	r3, [r7, #8]
 8025166:	00db      	lsls	r3, r3, #3
 8025168:	69ba      	ldr	r2, [r7, #24]
 802516a:	4413      	add	r3, r2
 802516c:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 802516e:	68fb      	ldr	r3, [r7, #12]
 8025170:	ed93 7a00 	vldr	s14, [r3]
 8025174:	edd7 7a04 	vldr	s15, [r7, #16]
 8025178:	ee77 7a67 	vsub.f32	s15, s14, s15
 802517c:	69fb      	ldr	r3, [r7, #28]
 802517e:	edc3 7a00 	vstr	s15, [r3]
 8025182:	68fb      	ldr	r3, [r7, #12]
 8025184:	ed93 7a01 	vldr	s14, [r3, #4]
 8025188:	edd7 7a05 	vldr	s15, [r7, #20]
 802518c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025190:	69fb      	ldr	r3, [r7, #28]
 8025192:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8025196:	68fb      	ldr	r3, [r7, #12]
 8025198:	ed93 7a00 	vldr	s14, [r3]
 802519c:	edd7 7a04 	vldr	s15, [r7, #16]
 80251a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80251a4:	68fb      	ldr	r3, [r7, #12]
 80251a6:	edc3 7a00 	vstr	s15, [r3]
 80251aa:	68fb      	ldr	r3, [r7, #12]
 80251ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80251b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80251b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80251b8:	68fb      	ldr	r3, [r7, #12]
 80251ba:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 80251be:	69fb      	ldr	r3, [r7, #28]
 80251c0:	3308      	adds	r3, #8
 80251c2:	61fb      	str	r3, [r7, #28]
        ++Fout;
 80251c4:	68fb      	ldr	r3, [r7, #12]
 80251c6:	3308      	adds	r3, #8
 80251c8:	60fb      	str	r3, [r7, #12]
    }while (--m);
 80251ca:	683b      	ldr	r3, [r7, #0]
 80251cc:	3b01      	subs	r3, #1
 80251ce:	603b      	str	r3, [r7, #0]
 80251d0:	683b      	ldr	r3, [r7, #0]
 80251d2:	2b00      	cmp	r3, #0
 80251d4:	bf14      	ite	ne
 80251d6:	2301      	movne	r3, #1
 80251d8:	2300      	moveq	r3, #0
 80251da:	b2db      	uxtb	r3, r3
 80251dc:	2b00      	cmp	r3, #0
 80251de:	d000      	beq.n	80251e2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 80251e0:	e798      	b.n	8025114 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80251e2:	bf00      	nop
 80251e4:	3724      	adds	r7, #36	; 0x24
 80251e6:	46bd      	mov	sp, r7
 80251e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251ec:	4770      	bx	lr

080251ee <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80251ee:	b480      	push	{r7}
 80251f0:	b097      	sub	sp, #92	; 0x5c
 80251f2:	af00      	add	r7, sp, #0
 80251f4:	60f8      	str	r0, [r7, #12]
 80251f6:	60b9      	str	r1, [r7, #8]
 80251f8:	607a      	str	r2, [r7, #4]
 80251fa:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80251fc:	683b      	ldr	r3, [r7, #0]
 80251fe:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8025200:	683b      	ldr	r3, [r7, #0]
 8025202:	005b      	lsls	r3, r3, #1
 8025204:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 8025206:	683a      	ldr	r2, [r7, #0]
 8025208:	4613      	mov	r3, r2
 802520a:	005b      	lsls	r3, r3, #1
 802520c:	4413      	add	r3, r2
 802520e:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8025210:	687b      	ldr	r3, [r7, #4]
 8025212:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8025216:	657b      	str	r3, [r7, #84]	; 0x54
 8025218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802521a:	653b      	str	r3, [r7, #80]	; 0x50
 802521c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802521e:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8025220:	683b      	ldr	r3, [r7, #0]
 8025222:	00db      	lsls	r3, r3, #3
 8025224:	68fa      	ldr	r2, [r7, #12]
 8025226:	4413      	add	r3, r2
 8025228:	ed93 7a00 	vldr	s14, [r3]
 802522c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802522e:	edd3 7a00 	vldr	s15, [r3]
 8025232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025236:	683b      	ldr	r3, [r7, #0]
 8025238:	00db      	lsls	r3, r3, #3
 802523a:	68fa      	ldr	r2, [r7, #12]
 802523c:	4413      	add	r3, r2
 802523e:	edd3 6a01 	vldr	s13, [r3, #4]
 8025242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025244:	edd3 7a01 	vldr	s15, [r3, #4]
 8025248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802524c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025250:	edc7 7a04 	vstr	s15, [r7, #16]
 8025254:	683b      	ldr	r3, [r7, #0]
 8025256:	00db      	lsls	r3, r3, #3
 8025258:	68fa      	ldr	r2, [r7, #12]
 802525a:	4413      	add	r3, r2
 802525c:	ed93 7a00 	vldr	s14, [r3]
 8025260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025262:	edd3 7a01 	vldr	s15, [r3, #4]
 8025266:	ee27 7a27 	vmul.f32	s14, s14, s15
 802526a:	683b      	ldr	r3, [r7, #0]
 802526c:	00db      	lsls	r3, r3, #3
 802526e:	68fa      	ldr	r2, [r7, #12]
 8025270:	4413      	add	r3, r2
 8025272:	edd3 6a01 	vldr	s13, [r3, #4]
 8025276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025278:	edd3 7a00 	vldr	s15, [r3]
 802527c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025284:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8025288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802528a:	00db      	lsls	r3, r3, #3
 802528c:	68fa      	ldr	r2, [r7, #12]
 802528e:	4413      	add	r3, r2
 8025290:	ed93 7a00 	vldr	s14, [r3]
 8025294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025296:	edd3 7a00 	vldr	s15, [r3]
 802529a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802529e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80252a0:	00db      	lsls	r3, r3, #3
 80252a2:	68fa      	ldr	r2, [r7, #12]
 80252a4:	4413      	add	r3, r2
 80252a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80252aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80252b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80252b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80252b8:	edc7 7a06 	vstr	s15, [r7, #24]
 80252bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80252be:	00db      	lsls	r3, r3, #3
 80252c0:	68fa      	ldr	r2, [r7, #12]
 80252c2:	4413      	add	r3, r2
 80252c4:	ed93 7a00 	vldr	s14, [r3]
 80252c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80252ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80252d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80252d4:	00db      	lsls	r3, r3, #3
 80252d6:	68fa      	ldr	r2, [r7, #12]
 80252d8:	4413      	add	r3, r2
 80252da:	edd3 6a01 	vldr	s13, [r3, #4]
 80252de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252e0:	edd3 7a00 	vldr	s15, [r3]
 80252e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80252e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80252ec:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 80252f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80252f2:	00db      	lsls	r3, r3, #3
 80252f4:	68fa      	ldr	r2, [r7, #12]
 80252f6:	4413      	add	r3, r2
 80252f8:	ed93 7a00 	vldr	s14, [r3]
 80252fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80252fe:	edd3 7a00 	vldr	s15, [r3]
 8025302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025308:	00db      	lsls	r3, r3, #3
 802530a:	68fa      	ldr	r2, [r7, #12]
 802530c:	4413      	add	r3, r2
 802530e:	edd3 6a01 	vldr	s13, [r3, #4]
 8025312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025314:	edd3 7a01 	vldr	s15, [r3, #4]
 8025318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802531c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025320:	edc7 7a08 	vstr	s15, [r7, #32]
 8025324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025326:	00db      	lsls	r3, r3, #3
 8025328:	68fa      	ldr	r2, [r7, #12]
 802532a:	4413      	add	r3, r2
 802532c:	ed93 7a00 	vldr	s14, [r3]
 8025330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025332:	edd3 7a01 	vldr	s15, [r3, #4]
 8025336:	ee27 7a27 	vmul.f32	s14, s14, s15
 802533a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802533c:	00db      	lsls	r3, r3, #3
 802533e:	68fa      	ldr	r2, [r7, #12]
 8025340:	4413      	add	r3, r2
 8025342:	edd3 6a01 	vldr	s13, [r3, #4]
 8025346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025348:	edd3 7a00 	vldr	s15, [r3]
 802534c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025354:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8025358:	68fb      	ldr	r3, [r7, #12]
 802535a:	ed93 7a00 	vldr	s14, [r3]
 802535e:	edd7 7a06 	vldr	s15, [r7, #24]
 8025362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025366:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 802536a:	68fb      	ldr	r3, [r7, #12]
 802536c:	ed93 7a01 	vldr	s14, [r3, #4]
 8025370:	edd7 7a07 	vldr	s15, [r7, #28]
 8025374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025378:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 802537c:	68fb      	ldr	r3, [r7, #12]
 802537e:	ed93 7a00 	vldr	s14, [r3]
 8025382:	edd7 7a06 	vldr	s15, [r7, #24]
 8025386:	ee77 7a27 	vadd.f32	s15, s14, s15
 802538a:	68fb      	ldr	r3, [r7, #12]
 802538c:	edc3 7a00 	vstr	s15, [r3]
 8025390:	68fb      	ldr	r3, [r7, #12]
 8025392:	ed93 7a01 	vldr	s14, [r3, #4]
 8025396:	edd7 7a07 	vldr	s15, [r7, #28]
 802539a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802539e:	68fb      	ldr	r3, [r7, #12]
 80253a0:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 80253a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80253a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80253ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80253b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80253b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80253b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80253bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80253c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 80253c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80253c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80253cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80253d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80253d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80253d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80253dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80253e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 80253e4:	68fb      	ldr	r3, [r7, #12]
 80253e6:	ed93 7a00 	vldr	s14, [r3]
 80253ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80253ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80253f0:	00db      	lsls	r3, r3, #3
 80253f2:	68fa      	ldr	r2, [r7, #12]
 80253f4:	4413      	add	r3, r2
 80253f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80253fa:	edc3 7a00 	vstr	s15, [r3]
 80253fe:	68fb      	ldr	r3, [r7, #12]
 8025400:	ed93 7a01 	vldr	s14, [r3, #4]
 8025404:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802540a:	00db      	lsls	r3, r3, #3
 802540c:	68fa      	ldr	r2, [r7, #12]
 802540e:	4413      	add	r3, r2
 8025410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025414:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8025418:	68bb      	ldr	r3, [r7, #8]
 802541a:	00db      	lsls	r3, r3, #3
 802541c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802541e:	4413      	add	r3, r2
 8025420:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8025422:	68bb      	ldr	r3, [r7, #8]
 8025424:	011b      	lsls	r3, r3, #4
 8025426:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025428:	4413      	add	r3, r2
 802542a:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 802542c:	68ba      	ldr	r2, [r7, #8]
 802542e:	4613      	mov	r3, r2
 8025430:	005b      	lsls	r3, r3, #1
 8025432:	4413      	add	r3, r2
 8025434:	00db      	lsls	r3, r3, #3
 8025436:	461a      	mov	r2, r3
 8025438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802543a:	4413      	add	r3, r2
 802543c:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 802543e:	68fb      	ldr	r3, [r7, #12]
 8025440:	ed93 7a00 	vldr	s14, [r3]
 8025444:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8025448:	ee77 7a27 	vadd.f32	s15, s14, s15
 802544c:	68fb      	ldr	r3, [r7, #12]
 802544e:	edc3 7a00 	vstr	s15, [r3]
 8025452:	68fb      	ldr	r3, [r7, #12]
 8025454:	ed93 7a01 	vldr	s14, [r3, #4]
 8025458:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802545c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025460:	68fb      	ldr	r3, [r7, #12]
 8025462:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	685b      	ldr	r3, [r3, #4]
 802546a:	2b00      	cmp	r3, #0
 802546c:	d030      	beq.n	80254d0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 802546e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8025472:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8025476:	683b      	ldr	r3, [r7, #0]
 8025478:	00db      	lsls	r3, r3, #3
 802547a:	68fa      	ldr	r2, [r7, #12]
 802547c:	4413      	add	r3, r2
 802547e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025482:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8025486:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 802548a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 802548e:	683b      	ldr	r3, [r7, #0]
 8025490:	00db      	lsls	r3, r3, #3
 8025492:	68fa      	ldr	r2, [r7, #12]
 8025494:	4413      	add	r3, r2
 8025496:	ee77 7a27 	vadd.f32	s15, s14, s15
 802549a:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 802549e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80254a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80254a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254a8:	00db      	lsls	r3, r3, #3
 80254aa:	68fa      	ldr	r2, [r7, #12]
 80254ac:	4413      	add	r3, r2
 80254ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80254b2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 80254b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80254ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80254be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254c0:	00db      	lsls	r3, r3, #3
 80254c2:	68fa      	ldr	r2, [r7, #12]
 80254c4:	4413      	add	r3, r2
 80254c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80254ca:	edc3 7a01 	vstr	s15, [r3, #4]
 80254ce:	e02f      	b.n	8025530 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 80254d0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80254d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80254d8:	683b      	ldr	r3, [r7, #0]
 80254da:	00db      	lsls	r3, r3, #3
 80254dc:	68fa      	ldr	r2, [r7, #12]
 80254de:	4413      	add	r3, r2
 80254e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80254e4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 80254e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80254ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80254f0:	683b      	ldr	r3, [r7, #0]
 80254f2:	00db      	lsls	r3, r3, #3
 80254f4:	68fa      	ldr	r2, [r7, #12]
 80254f6:	4413      	add	r3, r2
 80254f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80254fc:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8025500:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8025504:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8025508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802550a:	00db      	lsls	r3, r3, #3
 802550c:	68fa      	ldr	r2, [r7, #12]
 802550e:	4413      	add	r3, r2
 8025510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025514:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8025518:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 802551c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8025520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025522:	00db      	lsls	r3, r3, #3
 8025524:	68fa      	ldr	r2, [r7, #12]
 8025526:	4413      	add	r3, r2
 8025528:	ee77 7a27 	vadd.f32	s15, s14, s15
 802552c:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8025530:	68fb      	ldr	r3, [r7, #12]
 8025532:	3308      	adds	r3, #8
 8025534:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8025536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025538:	3b01      	subs	r3, #1
 802553a:	64bb      	str	r3, [r7, #72]	; 0x48
 802553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802553e:	2b00      	cmp	r3, #0
 8025540:	bf14      	ite	ne
 8025542:	2301      	movne	r3, #1
 8025544:	2300      	moveq	r3, #0
 8025546:	b2db      	uxtb	r3, r3
 8025548:	2b00      	cmp	r3, #0
 802554a:	d000      	beq.n	802554e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 802554c:	e668      	b.n	8025220 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 802554e:	bf00      	nop
 8025550:	375c      	adds	r7, #92	; 0x5c
 8025552:	46bd      	mov	sp, r7
 8025554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025558:	4770      	bx	lr
	...

0802555c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 802555c:	b5b0      	push	{r4, r5, r7, lr}
 802555e:	b094      	sub	sp, #80	; 0x50
 8025560:	af00      	add	r7, sp, #0
 8025562:	60f8      	str	r0, [r7, #12]
 8025564:	60b9      	str	r1, [r7, #8]
 8025566:	607a      	str	r2, [r7, #4]
 8025568:	603b      	str	r3, [r7, #0]
     size_t k=m;
 802556a:	683b      	ldr	r3, [r7, #0]
 802556c:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 802556e:	683b      	ldr	r3, [r7, #0]
 8025570:	005b      	lsls	r3, r3, #1
 8025572:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8025574:	68bb      	ldr	r3, [r7, #8]
 8025576:	683a      	ldr	r2, [r7, #0]
 8025578:	fb02 f303 	mul.w	r3, r2, r3
 802557c:	6879      	ldr	r1, [r7, #4]
 802557e:	3321      	adds	r3, #33	; 0x21
 8025580:	f107 0210 	add.w	r2, r7, #16
 8025584:	00db      	lsls	r3, r3, #3
 8025586:	440b      	add	r3, r1
 8025588:	e893 0003 	ldmia.w	r3, {r0, r1}
 802558c:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8025590:	687b      	ldr	r3, [r7, #4]
 8025592:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8025596:	647b      	str	r3, [r7, #68]	; 0x44
 8025598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802559a:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 802559c:	683b      	ldr	r3, [r7, #0]
 802559e:	00db      	lsls	r3, r3, #3
 80255a0:	68fa      	ldr	r2, [r7, #12]
 80255a2:	4413      	add	r3, r2
 80255a4:	ed93 7a00 	vldr	s14, [r3]
 80255a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255aa:	edd3 7a00 	vldr	s15, [r3]
 80255ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80255b2:	683b      	ldr	r3, [r7, #0]
 80255b4:	00db      	lsls	r3, r3, #3
 80255b6:	68fa      	ldr	r2, [r7, #12]
 80255b8:	4413      	add	r3, r2
 80255ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80255be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80255c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80255c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80255cc:	edc7 7a08 	vstr	s15, [r7, #32]
 80255d0:	683b      	ldr	r3, [r7, #0]
 80255d2:	00db      	lsls	r3, r3, #3
 80255d4:	68fa      	ldr	r2, [r7, #12]
 80255d6:	4413      	add	r3, r2
 80255d8:	ed93 7a00 	vldr	s14, [r3]
 80255dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255de:	edd3 7a01 	vldr	s15, [r3, #4]
 80255e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80255e6:	683b      	ldr	r3, [r7, #0]
 80255e8:	00db      	lsls	r3, r3, #3
 80255ea:	68fa      	ldr	r2, [r7, #12]
 80255ec:	4413      	add	r3, r2
 80255ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80255f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255f4:	edd3 7a00 	vldr	s15, [r3]
 80255f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80255fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025600:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8025604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025606:	00db      	lsls	r3, r3, #3
 8025608:	68fa      	ldr	r2, [r7, #12]
 802560a:	4413      	add	r3, r2
 802560c:	ed93 7a00 	vldr	s14, [r3]
 8025610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025612:	edd3 7a00 	vldr	s15, [r3]
 8025616:	ee27 7a27 	vmul.f32	s14, s14, s15
 802561a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802561c:	00db      	lsls	r3, r3, #3
 802561e:	68fa      	ldr	r2, [r7, #12]
 8025620:	4413      	add	r3, r2
 8025622:	edd3 6a01 	vldr	s13, [r3, #4]
 8025626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025628:	edd3 7a01 	vldr	s15, [r3, #4]
 802562c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025634:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8025638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802563a:	00db      	lsls	r3, r3, #3
 802563c:	68fa      	ldr	r2, [r7, #12]
 802563e:	4413      	add	r3, r2
 8025640:	ed93 7a00 	vldr	s14, [r3]
 8025644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025646:	edd3 7a01 	vldr	s15, [r3, #4]
 802564a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802564e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025650:	00db      	lsls	r3, r3, #3
 8025652:	68fa      	ldr	r2, [r7, #12]
 8025654:	4413      	add	r3, r2
 8025656:	edd3 6a01 	vldr	s13, [r3, #4]
 802565a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802565c:	edd3 7a00 	vldr	s15, [r3]
 8025660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025668:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 802566c:	ed97 7a08 	vldr	s14, [r7, #32]
 8025670:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8025674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025678:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 802567c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8025680:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025688:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 802568c:	ed97 7a08 	vldr	s14, [r7, #32]
 8025690:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8025694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025698:	edc7 7a06 	vstr	s15, [r7, #24]
 802569c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80256a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80256a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80256a8:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 80256ac:	68bb      	ldr	r3, [r7, #8]
 80256ae:	00db      	lsls	r3, r3, #3
 80256b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80256b2:	4413      	add	r3, r2
 80256b4:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 80256b6:	68bb      	ldr	r3, [r7, #8]
 80256b8:	011b      	lsls	r3, r3, #4
 80256ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80256bc:	4413      	add	r3, r2
 80256be:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 80256c0:	68fb      	ldr	r3, [r7, #12]
 80256c2:	681b      	ldr	r3, [r3, #0]
 80256c4:	4618      	mov	r0, r3
 80256c6:	f7da ff49 	bl	800055c <__aeabi_f2d>
 80256ca:	4604      	mov	r4, r0
 80256cc:	460d      	mov	r5, r1
 80256ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256d0:	4618      	mov	r0, r3
 80256d2:	f7da ff43 	bl	800055c <__aeabi_f2d>
 80256d6:	f04f 0200 	mov.w	r2, #0
 80256da:	4b57      	ldr	r3, [pc, #348]	; (8025838 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 80256dc:	f7da ff96 	bl	800060c <__aeabi_dmul>
 80256e0:	4602      	mov	r2, r0
 80256e2:	460b      	mov	r3, r1
 80256e4:	4620      	mov	r0, r4
 80256e6:	4629      	mov	r1, r5
 80256e8:	f7da fdd8 	bl	800029c <__aeabi_dsub>
 80256ec:	4602      	mov	r2, r0
 80256ee:	460b      	mov	r3, r1
 80256f0:	4610      	mov	r0, r2
 80256f2:	4619      	mov	r1, r3
 80256f4:	683b      	ldr	r3, [r7, #0]
 80256f6:	00db      	lsls	r3, r3, #3
 80256f8:	68fa      	ldr	r2, [r7, #12]
 80256fa:	18d4      	adds	r4, r2, r3
 80256fc:	f7db fa7e 	bl	8000bfc <__aeabi_d2f>
 8025700:	4603      	mov	r3, r0
 8025702:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8025704:	68fb      	ldr	r3, [r7, #12]
 8025706:	685b      	ldr	r3, [r3, #4]
 8025708:	4618      	mov	r0, r3
 802570a:	f7da ff27 	bl	800055c <__aeabi_f2d>
 802570e:	4604      	mov	r4, r0
 8025710:	460d      	mov	r5, r1
 8025712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025714:	4618      	mov	r0, r3
 8025716:	f7da ff21 	bl	800055c <__aeabi_f2d>
 802571a:	f04f 0200 	mov.w	r2, #0
 802571e:	4b46      	ldr	r3, [pc, #280]	; (8025838 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8025720:	f7da ff74 	bl	800060c <__aeabi_dmul>
 8025724:	4602      	mov	r2, r0
 8025726:	460b      	mov	r3, r1
 8025728:	4620      	mov	r0, r4
 802572a:	4629      	mov	r1, r5
 802572c:	f7da fdb6 	bl	800029c <__aeabi_dsub>
 8025730:	4602      	mov	r2, r0
 8025732:	460b      	mov	r3, r1
 8025734:	4610      	mov	r0, r2
 8025736:	4619      	mov	r1, r3
 8025738:	683b      	ldr	r3, [r7, #0]
 802573a:	00db      	lsls	r3, r3, #3
 802573c:	68fa      	ldr	r2, [r7, #12]
 802573e:	18d4      	adds	r4, r2, r3
 8025740:	f7db fa5c 	bl	8000bfc <__aeabi_d2f>
 8025744:	4603      	mov	r3, r0
 8025746:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8025748:	ed97 7a06 	vldr	s14, [r7, #24]
 802574c:	edd7 7a05 	vldr	s15, [r7, #20]
 8025750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025754:	edc7 7a06 	vstr	s15, [r7, #24]
 8025758:	ed97 7a07 	vldr	s14, [r7, #28]
 802575c:	edd7 7a05 	vldr	s15, [r7, #20]
 8025760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025764:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8025768:	68fb      	ldr	r3, [r7, #12]
 802576a:	ed93 7a00 	vldr	s14, [r3]
 802576e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8025772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025776:	68fb      	ldr	r3, [r7, #12]
 8025778:	edc3 7a00 	vstr	s15, [r3]
 802577c:	68fb      	ldr	r3, [r7, #12]
 802577e:	ed93 7a01 	vldr	s14, [r3, #4]
 8025782:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8025786:	ee77 7a27 	vadd.f32	s15, s14, s15
 802578a:	68fb      	ldr	r3, [r7, #12]
 802578c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8025790:	683b      	ldr	r3, [r7, #0]
 8025792:	00db      	lsls	r3, r3, #3
 8025794:	68fa      	ldr	r2, [r7, #12]
 8025796:	4413      	add	r3, r2
 8025798:	ed93 7a00 	vldr	s14, [r3]
 802579c:	edd7 7a07 	vldr	s15, [r7, #28]
 80257a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80257a2:	00db      	lsls	r3, r3, #3
 80257a4:	68fa      	ldr	r2, [r7, #12]
 80257a6:	4413      	add	r3, r2
 80257a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80257ac:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 80257b0:	683b      	ldr	r3, [r7, #0]
 80257b2:	00db      	lsls	r3, r3, #3
 80257b4:	68fa      	ldr	r2, [r7, #12]
 80257b6:	4413      	add	r3, r2
 80257b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80257bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80257c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80257c2:	00db      	lsls	r3, r3, #3
 80257c4:	68fa      	ldr	r2, [r7, #12]
 80257c6:	4413      	add	r3, r2
 80257c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80257cc:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 80257d0:	683b      	ldr	r3, [r7, #0]
 80257d2:	00db      	lsls	r3, r3, #3
 80257d4:	68fa      	ldr	r2, [r7, #12]
 80257d6:	4413      	add	r3, r2
 80257d8:	ed93 7a00 	vldr	s14, [r3]
 80257dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80257e0:	683b      	ldr	r3, [r7, #0]
 80257e2:	00db      	lsls	r3, r3, #3
 80257e4:	68fa      	ldr	r2, [r7, #12]
 80257e6:	4413      	add	r3, r2
 80257e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80257ec:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 80257f0:	683b      	ldr	r3, [r7, #0]
 80257f2:	00db      	lsls	r3, r3, #3
 80257f4:	68fa      	ldr	r2, [r7, #12]
 80257f6:	4413      	add	r3, r2
 80257f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80257fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8025800:	683b      	ldr	r3, [r7, #0]
 8025802:	00db      	lsls	r3, r3, #3
 8025804:	68fa      	ldr	r2, [r7, #12]
 8025806:	4413      	add	r3, r2
 8025808:	ee77 7a27 	vadd.f32	s15, s14, s15
 802580c:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8025810:	68fb      	ldr	r3, [r7, #12]
 8025812:	3308      	adds	r3, #8
 8025814:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8025816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025818:	3b01      	subs	r3, #1
 802581a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802581e:	2b00      	cmp	r3, #0
 8025820:	bf14      	ite	ne
 8025822:	2301      	movne	r3, #1
 8025824:	2300      	moveq	r3, #0
 8025826:	b2db      	uxtb	r3, r3
 8025828:	2b00      	cmp	r3, #0
 802582a:	d000      	beq.n	802582e <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 802582c:	e6b6      	b.n	802559c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 802582e:	bf00      	nop
 8025830:	3750      	adds	r7, #80	; 0x50
 8025832:	46bd      	mov	sp, r7
 8025834:	bdb0      	pop	{r4, r5, r7, pc}
 8025836:	bf00      	nop
 8025838:	3fe00000 	.word	0x3fe00000

0802583c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 802583c:	b480      	push	{r7}
 802583e:	b0ab      	sub	sp, #172	; 0xac
 8025840:	af00      	add	r7, sp, #0
 8025842:	60f8      	str	r0, [r7, #12]
 8025844:	60b9      	str	r1, [r7, #8]
 8025846:	607a      	str	r2, [r7, #4]
 8025848:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 802584a:	687b      	ldr	r3, [r7, #4]
 802584c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8025850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8025854:	683b      	ldr	r3, [r7, #0]
 8025856:	68ba      	ldr	r2, [r7, #8]
 8025858:	fb02 f303 	mul.w	r3, r2, r3
 802585c:	00db      	lsls	r3, r3, #3
 802585e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8025862:	441a      	add	r2, r3
 8025864:	f107 0318 	add.w	r3, r7, #24
 8025868:	e892 0003 	ldmia.w	r2, {r0, r1}
 802586c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8025870:	683b      	ldr	r3, [r7, #0]
 8025872:	68ba      	ldr	r2, [r7, #8]
 8025874:	fb02 f303 	mul.w	r3, r2, r3
 8025878:	011b      	lsls	r3, r3, #4
 802587a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802587e:	441a      	add	r2, r3
 8025880:	f107 0310 	add.w	r3, r7, #16
 8025884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025888:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 802588c:	68fb      	ldr	r3, [r7, #12]
 802588e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8025892:	683b      	ldr	r3, [r7, #0]
 8025894:	00db      	lsls	r3, r3, #3
 8025896:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 802589a:	4413      	add	r3, r2
 802589c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 80258a0:	683b      	ldr	r3, [r7, #0]
 80258a2:	011b      	lsls	r3, r3, #4
 80258a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80258a8:	4413      	add	r3, r2
 80258aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 80258ae:	683a      	ldr	r2, [r7, #0]
 80258b0:	4613      	mov	r3, r2
 80258b2:	005b      	lsls	r3, r3, #1
 80258b4:	4413      	add	r3, r2
 80258b6:	00db      	lsls	r3, r3, #3
 80258b8:	461a      	mov	r2, r3
 80258ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80258be:	4413      	add	r3, r2
 80258c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 80258c4:	683b      	ldr	r3, [r7, #0]
 80258c6:	015b      	lsls	r3, r3, #5
 80258c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80258cc:	4413      	add	r3, r2
 80258ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 80258d2:	687b      	ldr	r3, [r7, #4]
 80258d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80258d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 80258dc:	2300      	movs	r3, #0
 80258de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80258e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80258e6:	683b      	ldr	r3, [r7, #0]
 80258e8:	429a      	cmp	r2, r3
 80258ea:	f280 82a9 	bge.w	8025e40 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 80258ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80258f2:	f107 0320 	add.w	r3, r7, #32
 80258f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80258fa:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 80258fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025902:	ed93 7a00 	vldr	s14, [r3]
 8025906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802590a:	68ba      	ldr	r2, [r7, #8]
 802590c:	fb02 f303 	mul.w	r3, r2, r3
 8025910:	00db      	lsls	r3, r3, #3
 8025912:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025916:	4413      	add	r3, r2
 8025918:	edd3 7a00 	vldr	s15, [r3]
 802591c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025920:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025924:	edd3 6a01 	vldr	s13, [r3, #4]
 8025928:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802592c:	68ba      	ldr	r2, [r7, #8]
 802592e:	fb02 f303 	mul.w	r3, r2, r3
 8025932:	00db      	lsls	r3, r3, #3
 8025934:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025938:	4413      	add	r3, r2
 802593a:	edd3 7a01 	vldr	s15, [r3, #4]
 802593e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025946:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 802594a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802594e:	ed93 7a00 	vldr	s14, [r3]
 8025952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025956:	68ba      	ldr	r2, [r7, #8]
 8025958:	fb02 f303 	mul.w	r3, r2, r3
 802595c:	00db      	lsls	r3, r3, #3
 802595e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025962:	4413      	add	r3, r2
 8025964:	edd3 7a01 	vldr	s15, [r3, #4]
 8025968:	ee27 7a27 	vmul.f32	s14, s14, s15
 802596c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025970:	edd3 6a01 	vldr	s13, [r3, #4]
 8025974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025978:	68ba      	ldr	r2, [r7, #8]
 802597a:	fb02 f303 	mul.w	r3, r2, r3
 802597e:	00db      	lsls	r3, r3, #3
 8025980:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025984:	4413      	add	r3, r2
 8025986:	edd3 7a00 	vldr	s15, [r3]
 802598a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802598e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025992:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8025996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802599a:	ed93 7a00 	vldr	s14, [r3]
 802599e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80259a2:	68ba      	ldr	r2, [r7, #8]
 80259a4:	fb02 f303 	mul.w	r3, r2, r3
 80259a8:	011b      	lsls	r3, r3, #4
 80259aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80259ae:	4413      	add	r3, r2
 80259b0:	edd3 7a00 	vldr	s15, [r3]
 80259b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80259b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80259bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80259c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80259c4:	68ba      	ldr	r2, [r7, #8]
 80259c6:	fb02 f303 	mul.w	r3, r2, r3
 80259ca:	011b      	lsls	r3, r3, #4
 80259cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80259d0:	4413      	add	r3, r2
 80259d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80259d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80259da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80259de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80259e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80259e6:	ed93 7a00 	vldr	s14, [r3]
 80259ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80259ee:	68ba      	ldr	r2, [r7, #8]
 80259f0:	fb02 f303 	mul.w	r3, r2, r3
 80259f4:	011b      	lsls	r3, r3, #4
 80259f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80259fa:	4413      	add	r3, r2
 80259fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8025a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025a08:	edd3 6a01 	vldr	s13, [r3, #4]
 8025a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025a10:	68ba      	ldr	r2, [r7, #8]
 8025a12:	fb02 f303 	mul.w	r3, r2, r3
 8025a16:	011b      	lsls	r3, r3, #4
 8025a18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025a1c:	4413      	add	r3, r2
 8025a1e:	edd3 7a00 	vldr	s15, [r3]
 8025a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025a2a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8025a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025a32:	ed93 7a00 	vldr	s14, [r3]
 8025a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025a3a:	68ba      	ldr	r2, [r7, #8]
 8025a3c:	fb03 f202 	mul.w	r2, r3, r2
 8025a40:	4613      	mov	r3, r2
 8025a42:	005b      	lsls	r3, r3, #1
 8025a44:	4413      	add	r3, r2
 8025a46:	00db      	lsls	r3, r3, #3
 8025a48:	461a      	mov	r2, r3
 8025a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025a4e:	4413      	add	r3, r2
 8025a50:	edd3 7a00 	vldr	s15, [r3]
 8025a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025a5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8025a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025a64:	68ba      	ldr	r2, [r7, #8]
 8025a66:	fb03 f202 	mul.w	r2, r3, r2
 8025a6a:	4613      	mov	r3, r2
 8025a6c:	005b      	lsls	r3, r3, #1
 8025a6e:	4413      	add	r3, r2
 8025a70:	00db      	lsls	r3, r3, #3
 8025a72:	461a      	mov	r2, r3
 8025a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025a78:	4413      	add	r3, r2
 8025a7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8025a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025a86:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8025a8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025a8e:	ed93 7a00 	vldr	s14, [r3]
 8025a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025a96:	68ba      	ldr	r2, [r7, #8]
 8025a98:	fb03 f202 	mul.w	r2, r3, r2
 8025a9c:	4613      	mov	r3, r2
 8025a9e:	005b      	lsls	r3, r3, #1
 8025aa0:	4413      	add	r3, r2
 8025aa2:	00db      	lsls	r3, r3, #3
 8025aa4:	461a      	mov	r2, r3
 8025aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025aaa:	4413      	add	r3, r2
 8025aac:	edd3 7a01 	vldr	s15, [r3, #4]
 8025ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025ab8:	edd3 6a01 	vldr	s13, [r3, #4]
 8025abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025ac0:	68ba      	ldr	r2, [r7, #8]
 8025ac2:	fb03 f202 	mul.w	r2, r3, r2
 8025ac6:	4613      	mov	r3, r2
 8025ac8:	005b      	lsls	r3, r3, #1
 8025aca:	4413      	add	r3, r2
 8025acc:	00db      	lsls	r3, r3, #3
 8025ace:	461a      	mov	r2, r3
 8025ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025ad4:	4413      	add	r3, r2
 8025ad6:	edd3 7a00 	vldr	s15, [r3]
 8025ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025ae2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8025ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025aea:	ed93 7a00 	vldr	s14, [r3]
 8025aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025af2:	68ba      	ldr	r2, [r7, #8]
 8025af4:	fb02 f303 	mul.w	r3, r2, r3
 8025af8:	015b      	lsls	r3, r3, #5
 8025afa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025afe:	4413      	add	r3, r2
 8025b00:	edd3 7a00 	vldr	s15, [r3]
 8025b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025b0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8025b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025b14:	68ba      	ldr	r2, [r7, #8]
 8025b16:	fb02 f303 	mul.w	r3, r2, r3
 8025b1a:	015b      	lsls	r3, r3, #5
 8025b1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025b20:	4413      	add	r3, r2
 8025b22:	edd3 7a01 	vldr	s15, [r3, #4]
 8025b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025b2e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8025b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025b36:	ed93 7a00 	vldr	s14, [r3]
 8025b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025b3e:	68ba      	ldr	r2, [r7, #8]
 8025b40:	fb02 f303 	mul.w	r3, r2, r3
 8025b44:	015b      	lsls	r3, r3, #5
 8025b46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025b4a:	4413      	add	r3, r2
 8025b4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8025b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025b54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025b58:	edd3 6a01 	vldr	s13, [r3, #4]
 8025b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025b60:	68ba      	ldr	r2, [r7, #8]
 8025b62:	fb02 f303 	mul.w	r3, r2, r3
 8025b66:	015b      	lsls	r3, r3, #5
 8025b68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8025b6c:	4413      	add	r3, r2
 8025b6e:	edd3 7a00 	vldr	s15, [r3]
 8025b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025b7a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8025b7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8025b82:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8025b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025b8a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8025b8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025b92:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8025b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025b9a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8025b9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8025ba2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8025ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025baa:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8025bae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025bb2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8025bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025bba:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8025bbe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8025bc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8025bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025bca:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8025bce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8025bd2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8025bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025bda:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8025bde:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8025be2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8025be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025bea:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8025bee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8025bf2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8025bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025bfa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8025bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025c02:	ed93 7a00 	vldr	s14, [r3]
 8025c06:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8025c0a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8025c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8025c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025c1a:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8025c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025c22:	ed93 7a01 	vldr	s14, [r3, #4]
 8025c26:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8025c2a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8025c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8025c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025c3a:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8025c3e:	ed97 7a08 	vldr	s14, [r7, #32]
 8025c42:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8025c46:	edd7 7a06 	vldr	s15, [r7, #24]
 8025c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025c52:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8025c56:	edd7 7a04 	vldr	s15, [r7, #16]
 8025c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025c62:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 8025c66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8025c6a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8025c6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8025c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025c7a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8025c7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8025c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025c8a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8025c8e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8025c92:	edd7 7a07 	vldr	s15, [r7, #28]
 8025c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025c9a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8025c9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8025ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025caa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8025cae:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8025cb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8025cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025cba:	eeb1 7a67 	vneg.f32	s14, s15
 8025cbe:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8025cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8025cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025cce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8025cd2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8025cd6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8025cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025ce2:	edc3 7a00 	vstr	s15, [r3]
 8025ce6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8025cea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8025cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025cf6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8025cfa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8025cfe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8025d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025d0a:	edc3 7a00 	vstr	s15, [r3]
 8025d0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8025d12:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8025d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025d1e:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8025d22:	ed97 7a08 	vldr	s14, [r7, #32]
 8025d26:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8025d2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8025d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025d36:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8025d3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8025d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025d46:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8025d4a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8025d4e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8025d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8025d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025d5e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8025d62:	edd7 7a06 	vldr	s15, [r7, #24]
 8025d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025d6e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8025d72:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8025d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8025d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025d7e:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8025d82:	edd7 7a05 	vldr	s15, [r7, #20]
 8025d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025d8e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8025d92:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8025d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8025d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025d9e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8025da2:	edd7 7a07 	vldr	s15, [r7, #28]
 8025da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025dae:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8025db2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8025db6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8025dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025dbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025dc2:	edc3 7a00 	vstr	s15, [r3]
 8025dc6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8025dca:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8025dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025dd6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8025dda:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8025dde:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8025de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025dea:	edc3 7a00 	vstr	s15, [r3]
 8025dee:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8025df2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8025df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025dfe:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8025e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025e06:	3308      	adds	r3, #8
 8025e08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8025e0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025e10:	3308      	adds	r3, #8
 8025e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8025e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025e1a:	3308      	adds	r3, #8
 8025e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8025e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025e24:	3308      	adds	r3, #8
 8025e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8025e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025e2e:	3308      	adds	r3, #8
 8025e30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 8025e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025e38:	3301      	adds	r3, #1
 8025e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8025e3e:	e550      	b.n	80258e2 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 8025e40:	bf00      	nop
 8025e42:	37ac      	adds	r7, #172	; 0xac
 8025e44:	46bd      	mov	sp, r7
 8025e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e4a:	4770      	bx	lr

08025e4c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8025e4c:	b580      	push	{r7, lr}
 8025e4e:	b08e      	sub	sp, #56	; 0x38
 8025e50:	af00      	add	r7, sp, #0
 8025e52:	60f8      	str	r0, [r7, #12]
 8025e54:	60b9      	str	r1, [r7, #8]
 8025e56:	607a      	str	r2, [r7, #4]
 8025e58:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8025e5a:	687b      	ldr	r3, [r7, #4]
 8025e5c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8025e60:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8025e62:	687b      	ldr	r3, [r7, #4]
 8025e64:	681b      	ldr	r3, [r3, #0]
 8025e66:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8025e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025e6a:	00db      	lsls	r3, r3, #3
 8025e6c:	4618      	mov	r0, r3
 8025e6e:	f000 fe8b 	bl	8026b88 <_Z9ei_mallocj>
 8025e72:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8025e74:	2300      	movs	r3, #0
 8025e76:	637b      	str	r3, [r7, #52]	; 0x34
 8025e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025e7a:	683b      	ldr	r3, [r7, #0]
 8025e7c:	429a      	cmp	r2, r3
 8025e7e:	f280 80b6 	bge.w	8025fee <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 8025e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e84:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8025e86:	2300      	movs	r3, #0
 8025e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025e8e:	429a      	cmp	r2, r3
 8025e90:	da14      	bge.n	8025ebc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 8025e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e94:	00db      	lsls	r3, r3, #3
 8025e96:	68fa      	ldr	r2, [r7, #12]
 8025e98:	18d1      	adds	r1, r2, r3
 8025e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e9c:	00db      	lsls	r3, r3, #3
 8025e9e:	69ba      	ldr	r2, [r7, #24]
 8025ea0:	4413      	add	r3, r2
 8025ea2:	460a      	mov	r2, r1
 8025ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025ea8:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8025eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025eae:	683b      	ldr	r3, [r7, #0]
 8025eb0:	4413      	add	r3, r2
 8025eb2:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8025eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025eb6:	3301      	adds	r3, #1
 8025eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025eba:	e7e6      	b.n	8025e8a <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 8025ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025ebe:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8025ec0:	2300      	movs	r3, #0
 8025ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ec8:	429a      	cmp	r2, r3
 8025eca:	f280 808c 	bge.w	8025fe6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 8025ece:	2300      	movs	r3, #0
 8025ed0:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 8025ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ed4:	00db      	lsls	r3, r3, #3
 8025ed6:	68fa      	ldr	r2, [r7, #12]
 8025ed8:	4413      	add	r3, r2
 8025eda:	69ba      	ldr	r2, [r7, #24]
 8025edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025ee0:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 8025ee4:	2301      	movs	r3, #1
 8025ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8025ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025eec:	429a      	cmp	r2, r3
 8025eee:	da72      	bge.n	8025fd6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 8025ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ef2:	68ba      	ldr	r2, [r7, #8]
 8025ef4:	fb03 f202 	mul.w	r2, r3, r2
 8025ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025efa:	4413      	add	r3, r2
 8025efc:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8025efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025f00:	69fb      	ldr	r3, [r7, #28]
 8025f02:	429a      	cmp	r2, r3
 8025f04:	db03      	blt.n	8025f0e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 8025f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025f08:	69fb      	ldr	r3, [r7, #28]
 8025f0a:	1ad3      	subs	r3, r2, r3
 8025f0c:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8025f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f10:	00db      	lsls	r3, r3, #3
 8025f12:	69ba      	ldr	r2, [r7, #24]
 8025f14:	4413      	add	r3, r2
 8025f16:	ed93 7a00 	vldr	s14, [r3]
 8025f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f1c:	00db      	lsls	r3, r3, #3
 8025f1e:	6a3a      	ldr	r2, [r7, #32]
 8025f20:	4413      	add	r3, r2
 8025f22:	edd3 7a00 	vldr	s15, [r3]
 8025f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f2c:	00db      	lsls	r3, r3, #3
 8025f2e:	69ba      	ldr	r2, [r7, #24]
 8025f30:	4413      	add	r3, r2
 8025f32:	edd3 6a01 	vldr	s13, [r3, #4]
 8025f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f38:	00db      	lsls	r3, r3, #3
 8025f3a:	6a3a      	ldr	r2, [r7, #32]
 8025f3c:	4413      	add	r3, r2
 8025f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8025f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025f4a:	edc7 7a04 	vstr	s15, [r7, #16]
 8025f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f50:	00db      	lsls	r3, r3, #3
 8025f52:	69ba      	ldr	r2, [r7, #24]
 8025f54:	4413      	add	r3, r2
 8025f56:	ed93 7a00 	vldr	s14, [r3]
 8025f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f5c:	00db      	lsls	r3, r3, #3
 8025f5e:	6a3a      	ldr	r2, [r7, #32]
 8025f60:	4413      	add	r3, r2
 8025f62:	edd3 7a01 	vldr	s15, [r3, #4]
 8025f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f6c:	00db      	lsls	r3, r3, #3
 8025f6e:	69ba      	ldr	r2, [r7, #24]
 8025f70:	4413      	add	r3, r2
 8025f72:	edd3 6a01 	vldr	s13, [r3, #4]
 8025f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f78:	00db      	lsls	r3, r3, #3
 8025f7a:	6a3a      	ldr	r2, [r7, #32]
 8025f7c:	4413      	add	r3, r2
 8025f7e:	edd3 7a00 	vldr	s15, [r3]
 8025f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025f8a:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8025f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f90:	00db      	lsls	r3, r3, #3
 8025f92:	68fa      	ldr	r2, [r7, #12]
 8025f94:	4413      	add	r3, r2
 8025f96:	ed93 7a00 	vldr	s14, [r3]
 8025f9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8025f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fa0:	00db      	lsls	r3, r3, #3
 8025fa2:	68fa      	ldr	r2, [r7, #12]
 8025fa4:	4413      	add	r3, r2
 8025fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025faa:	edc3 7a00 	vstr	s15, [r3]
 8025fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fb0:	00db      	lsls	r3, r3, #3
 8025fb2:	68fa      	ldr	r2, [r7, #12]
 8025fb4:	4413      	add	r3, r2
 8025fb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8025fba:	edd7 7a05 	vldr	s15, [r7, #20]
 8025fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fc0:	00db      	lsls	r3, r3, #3
 8025fc2:	68fa      	ldr	r2, [r7, #12]
 8025fc4:	4413      	add	r3, r2
 8025fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025fca:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8025fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fd0:	3301      	adds	r3, #1
 8025fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8025fd4:	e788      	b.n	8025ee8 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 8025fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025fd8:	683b      	ldr	r3, [r7, #0]
 8025fda:	4413      	add	r3, r2
 8025fdc:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8025fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fe0:	3301      	adds	r3, #1
 8025fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025fe4:	e76e      	b.n	8025ec4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 8025fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025fe8:	3301      	adds	r3, #1
 8025fea:	637b      	str	r3, [r7, #52]	; 0x34
 8025fec:	e744      	b.n	8025e78 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8025fee:	69b8      	ldr	r0, [r7, #24]
 8025ff0:	f000 fde4 	bl	8026bbc <_Z7ei_freePv>
}
 8025ff4:	bf00      	nop
 8025ff6:	3738      	adds	r7, #56	; 0x38
 8025ff8:	46bd      	mov	sp, r7
 8025ffa:	bd80      	pop	{r7, pc}

08025ffc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8025ffc:	b580      	push	{r7, lr}
 8025ffe:	b08a      	sub	sp, #40	; 0x28
 8026000:	af02      	add	r7, sp, #8
 8026002:	60f8      	str	r0, [r7, #12]
 8026004:	60b9      	str	r1, [r7, #8]
 8026006:	607a      	str	r2, [r7, #4]
 8026008:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 802600a:	68fb      	ldr	r3, [r7, #12]
 802600c:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 802600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026010:	1d1a      	adds	r2, r3, #4
 8026012:	62ba      	str	r2, [r7, #40]	; 0x28
 8026014:	681b      	ldr	r3, [r3, #0]
 8026016:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8026018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802601a:	1d1a      	adds	r2, r3, #4
 802601c:	62ba      	str	r2, [r7, #40]	; 0x28
 802601e:	681b      	ldr	r3, [r3, #0]
 8026020:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8026022:	69bb      	ldr	r3, [r7, #24]
 8026024:	697a      	ldr	r2, [r7, #20]
 8026026:	fb02 f303 	mul.w	r3, r2, r3
 802602a:	00db      	lsls	r3, r3, #3
 802602c:	68fa      	ldr	r2, [r7, #12]
 802602e:	4413      	add	r3, r2
 8026030:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8026032:	697b      	ldr	r3, [r7, #20]
 8026034:	2b01      	cmp	r3, #1
 8026036:	d11a      	bne.n	802606e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8026038:	68fb      	ldr	r3, [r7, #12]
 802603a:	68ba      	ldr	r2, [r7, #8]
 802603c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026040:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8026044:	683b      	ldr	r3, [r7, #0]
 8026046:	687a      	ldr	r2, [r7, #4]
 8026048:	fb02 f303 	mul.w	r3, r2, r3
 802604c:	00db      	lsls	r3, r3, #3
 802604e:	68ba      	ldr	r2, [r7, #8]
 8026050:	4413      	add	r3, r2
 8026052:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8026054:	68fb      	ldr	r3, [r7, #12]
 8026056:	3308      	adds	r3, #8
 8026058:	60fb      	str	r3, [r7, #12]
 802605a:	68fa      	ldr	r2, [r7, #12]
 802605c:	693b      	ldr	r3, [r7, #16]
 802605e:	429a      	cmp	r2, r3
 8026060:	bf14      	ite	ne
 8026062:	2301      	movne	r3, #1
 8026064:	2300      	moveq	r3, #0
 8026066:	b2db      	uxtb	r3, r3
 8026068:	2b00      	cmp	r3, #0
 802606a:	d024      	beq.n	80260b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 802606c:	e7e4      	b.n	8026038 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 802606e:	69bb      	ldr	r3, [r7, #24]
 8026070:	687a      	ldr	r2, [r7, #4]
 8026072:	fb03 f202 	mul.w	r2, r3, r2
 8026076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026078:	9301      	str	r3, [sp, #4]
 802607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802607c:	9300      	str	r3, [sp, #0]
 802607e:	683b      	ldr	r3, [r7, #0]
 8026080:	68b9      	ldr	r1, [r7, #8]
 8026082:	68f8      	ldr	r0, [r7, #12]
 8026084:	f7ff ffba 	bl	8025ffc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 8026088:	683b      	ldr	r3, [r7, #0]
 802608a:	687a      	ldr	r2, [r7, #4]
 802608c:	fb02 f303 	mul.w	r3, r2, r3
 8026090:	00db      	lsls	r3, r3, #3
 8026092:	68ba      	ldr	r2, [r7, #8]
 8026094:	4413      	add	r3, r2
 8026096:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 8026098:	697b      	ldr	r3, [r7, #20]
 802609a:	00db      	lsls	r3, r3, #3
 802609c:	68fa      	ldr	r2, [r7, #12]
 802609e:	4413      	add	r3, r2
 80260a0:	60fb      	str	r3, [r7, #12]
 80260a2:	68fa      	ldr	r2, [r7, #12]
 80260a4:	693b      	ldr	r3, [r7, #16]
 80260a6:	429a      	cmp	r2, r3
 80260a8:	bf14      	ite	ne
 80260aa:	2301      	movne	r3, #1
 80260ac:	2300      	moveq	r3, #0
 80260ae:	b2db      	uxtb	r3, r3
 80260b0:	2b00      	cmp	r3, #0
 80260b2:	d000      	beq.n	80260b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 80260b4:	e7db      	b.n	802606e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 80260b6:	69fb      	ldr	r3, [r7, #28]
 80260b8:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 80260ba:	69bb      	ldr	r3, [r7, #24]
 80260bc:	3b02      	subs	r3, #2
 80260be:	2b03      	cmp	r3, #3
 80260c0:	d826      	bhi.n	8026110 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 80260c2:	a201      	add	r2, pc, #4	; (adr r2, 80260c8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 80260c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80260c8:	080260d9 	.word	0x080260d9
 80260cc:	080260e7 	.word	0x080260e7
 80260d0:	080260f5 	.word	0x080260f5
 80260d4:	08026103 	.word	0x08026103
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80260d8:	697b      	ldr	r3, [r7, #20]
 80260da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260dc:	6879      	ldr	r1, [r7, #4]
 80260de:	68f8      	ldr	r0, [r7, #12]
 80260e0:	f7ff f808 	bl	80250f4 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 80260e4:	e01d      	b.n	8026122 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80260e6:	697b      	ldr	r3, [r7, #20]
 80260e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260ea:	6879      	ldr	r1, [r7, #4]
 80260ec:	68f8      	ldr	r0, [r7, #12]
 80260ee:	f7ff fa35 	bl	802555c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 80260f2:	e016      	b.n	8026122 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 80260f4:	697b      	ldr	r3, [r7, #20]
 80260f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260f8:	6879      	ldr	r1, [r7, #4]
 80260fa:	68f8      	ldr	r0, [r7, #12]
 80260fc:	f7ff f877 	bl	80251ee <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8026100:	e00f      	b.n	8026122 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 8026102:	697b      	ldr	r3, [r7, #20]
 8026104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026106:	6879      	ldr	r1, [r7, #4]
 8026108:	68f8      	ldr	r0, [r7, #12]
 802610a:	f7ff fb97 	bl	802583c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 802610e:	e008      	b.n	8026122 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8026110:	69bb      	ldr	r3, [r7, #24]
 8026112:	9300      	str	r3, [sp, #0]
 8026114:	697b      	ldr	r3, [r7, #20]
 8026116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026118:	6879      	ldr	r1, [r7, #4]
 802611a:	68f8      	ldr	r0, [r7, #12]
 802611c:	f7ff fe96 	bl	8025e4c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8026120:	bf00      	nop
    }
}
 8026122:	bf00      	nop
 8026124:	3720      	adds	r7, #32
 8026126:	46bd      	mov	sp, r7
 8026128:	bd80      	pop	{r7, pc}
 802612a:	bf00      	nop

0802612c <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 802612c:	b580      	push	{r7, lr}
 802612e:	b086      	sub	sp, #24
 8026130:	af00      	add	r7, sp, #0
 8026132:	6078      	str	r0, [r7, #4]
 8026134:	6039      	str	r1, [r7, #0]
    int p=4;
 8026136:	2304      	movs	r3, #4
 8026138:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 802613a:	6878      	ldr	r0, [r7, #4]
 802613c:	f7da f9fc 	bl	8000538 <__aeabi_i2d>
 8026140:	4602      	mov	r2, r0
 8026142:	460b      	mov	r3, r1
 8026144:	ec43 2b10 	vmov	d0, r2, r3
 8026148:	f009 f878 	bl	802f23c <sqrt>
 802614c:	eeb0 7a40 	vmov.f32	s14, s0
 8026150:	eef0 7a60 	vmov.f32	s15, s1
 8026154:	eeb0 0a47 	vmov.f32	s0, s14
 8026158:	eef0 0a67 	vmov.f32	s1, s15
 802615c:	f008 fdd4 	bl	802ed08 <floor>
 8026160:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8026164:	687b      	ldr	r3, [r7, #4]
 8026166:	697a      	ldr	r2, [r7, #20]
 8026168:	fb93 f2f2 	sdiv	r2, r3, r2
 802616c:	6979      	ldr	r1, [r7, #20]
 802616e:	fb01 f202 	mul.w	r2, r1, r2
 8026172:	1a9b      	subs	r3, r3, r2
 8026174:	2b00      	cmp	r3, #0
 8026176:	d01e      	beq.n	80261b6 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 8026178:	697b      	ldr	r3, [r7, #20]
 802617a:	2b02      	cmp	r3, #2
 802617c:	d005      	beq.n	802618a <_ZL9kf_factoriPi+0x5e>
 802617e:	697b      	ldr	r3, [r7, #20]
 8026180:	2b04      	cmp	r3, #4
 8026182:	d105      	bne.n	8026190 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 8026184:	2302      	movs	r3, #2
 8026186:	617b      	str	r3, [r7, #20]
 8026188:	e006      	b.n	8026198 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 802618a:	2303      	movs	r3, #3
 802618c:	617b      	str	r3, [r7, #20]
 802618e:	e003      	b.n	8026198 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 8026190:	697b      	ldr	r3, [r7, #20]
 8026192:	3302      	adds	r3, #2
 8026194:	617b      	str	r3, [r7, #20]
 8026196:	bf00      	nop
            }
            if (p > floor_sqrt)
 8026198:	6978      	ldr	r0, [r7, #20]
 802619a:	f7da f9cd 	bl	8000538 <__aeabi_i2d>
 802619e:	4602      	mov	r2, r0
 80261a0:	460b      	mov	r3, r1
 80261a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80261a6:	f7da fca3 	bl	8000af0 <__aeabi_dcmplt>
 80261aa:	4603      	mov	r3, r0
 80261ac:	2b00      	cmp	r3, #0
 80261ae:	d001      	beq.n	80261b4 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	617b      	str	r3, [r7, #20]
        while (n % p) {
 80261b4:	e7d6      	b.n	8026164 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 80261b6:	687a      	ldr	r2, [r7, #4]
 80261b8:	697b      	ldr	r3, [r7, #20]
 80261ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80261be:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 80261c0:	683b      	ldr	r3, [r7, #0]
 80261c2:	1d1a      	adds	r2, r3, #4
 80261c4:	603a      	str	r2, [r7, #0]
 80261c6:	697a      	ldr	r2, [r7, #20]
 80261c8:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 80261ca:	683b      	ldr	r3, [r7, #0]
 80261cc:	1d1a      	adds	r2, r3, #4
 80261ce:	603a      	str	r2, [r7, #0]
 80261d0:	687a      	ldr	r2, [r7, #4]
 80261d2:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 80261d4:	687b      	ldr	r3, [r7, #4]
 80261d6:	2b01      	cmp	r3, #1
 80261d8:	dd00      	ble.n	80261dc <_ZL9kf_factoriPi+0xb0>
    do {
 80261da:	e7c3      	b.n	8026164 <_ZL9kf_factoriPi+0x38>
}
 80261dc:	bf00      	nop
 80261de:	3718      	adds	r7, #24
 80261e0:	46bd      	mov	sp, r7
 80261e2:	bd80      	pop	{r7, pc}
 80261e4:	0000      	movs	r0, r0
	...

080261e8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 80261e8:	b5b0      	push	{r4, r5, r7, lr}
 80261ea:	b090      	sub	sp, #64	; 0x40
 80261ec:	af00      	add	r7, sp, #0
 80261ee:	60f8      	str	r0, [r7, #12]
 80261f0:	60b9      	str	r1, [r7, #8]
 80261f2:	607a      	str	r2, [r7, #4]
 80261f4:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 80261f6:	2300      	movs	r3, #0
 80261f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 80261fa:	68fb      	ldr	r3, [r7, #12]
 80261fc:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 80261fe:	00db      	lsls	r3, r3, #3
 8026200:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 8026202:	683b      	ldr	r3, [r7, #0]
 8026204:	2b00      	cmp	r3, #0
 8026206:	d104      	bne.n	8026212 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8026208:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802620a:	f000 fcbd 	bl	8026b88 <_Z9ei_mallocj>
 802620e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8026210:	e00c      	b.n	802622c <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8026212:	687b      	ldr	r3, [r7, #4]
 8026214:	2b00      	cmp	r3, #0
 8026216:	d006      	beq.n	8026226 <kiss_fft_alloc+0x3e>
 8026218:	683b      	ldr	r3, [r7, #0]
 802621a:	681b      	ldr	r3, [r3, #0]
 802621c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802621e:	429a      	cmp	r2, r3
 8026220:	d801      	bhi.n	8026226 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8026222:	687b      	ldr	r3, [r7, #4]
 8026224:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 8026226:	683b      	ldr	r3, [r7, #0]
 8026228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802622a:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 802622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802622e:	2b00      	cmp	r3, #0
 8026230:	f000 80a0 	beq.w	8026374 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8026234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026236:	68fa      	ldr	r2, [r7, #12]
 8026238:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 802623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802623c:	68ba      	ldr	r2, [r7, #8]
 802623e:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8026240:	68bb      	ldr	r3, [r7, #8]
 8026242:	2b00      	cmp	r3, #0
 8026244:	d048      	beq.n	80262d8 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8026246:	2300      	movs	r3, #0
 8026248:	63bb      	str	r3, [r7, #56]	; 0x38
 802624a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802624c:	68fb      	ldr	r3, [r7, #12]
 802624e:	429a      	cmp	r2, r3
 8026250:	f280 808a 	bge.w	8026368 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8026254:	a34e      	add	r3, pc, #312	; (adr r3, 8026390 <kiss_fft_alloc+0x1a8>)
 8026256:	e9d3 2300 	ldrd	r2, r3, [r3]
 802625a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 802625e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8026260:	f7da f96a 	bl	8000538 <__aeabi_i2d>
 8026264:	a34c      	add	r3, pc, #304	; (adr r3, 8026398 <kiss_fft_alloc+0x1b0>)
 8026266:	e9d3 2300 	ldrd	r2, r3, [r3]
 802626a:	f7da f9cf 	bl	800060c <__aeabi_dmul>
 802626e:	4602      	mov	r2, r0
 8026270:	460b      	mov	r3, r1
 8026272:	4614      	mov	r4, r2
 8026274:	461d      	mov	r5, r3
 8026276:	68f8      	ldr	r0, [r7, #12]
 8026278:	f7da f95e 	bl	8000538 <__aeabi_i2d>
 802627c:	4602      	mov	r2, r0
 802627e:	460b      	mov	r3, r1
 8026280:	4620      	mov	r0, r4
 8026282:	4629      	mov	r1, r5
 8026284:	f7da faec 	bl	8000860 <__aeabi_ddiv>
 8026288:	4602      	mov	r2, r0
 802628a:	460b      	mov	r3, r1
 802628c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8026290:	ed97 0b04 	vldr	d0, [r7, #16]
 8026294:	f008 fce4 	bl	802ec60 <cos>
 8026298:	ec51 0b10 	vmov	r0, r1, d0
 802629c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802629e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80262a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80262a4:	00db      	lsls	r3, r3, #3
 80262a6:	18d4      	adds	r4, r2, r3
 80262a8:	f7da fca8 	bl	8000bfc <__aeabi_d2f>
 80262ac:	4603      	mov	r3, r0
 80262ae:	6023      	str	r3, [r4, #0]
 80262b0:	ed97 0b04 	vldr	d0, [r7, #16]
 80262b4:	f008 fe28 	bl	802ef08 <sin>
 80262b8:	ec51 0b10 	vmov	r0, r1, d0
 80262bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80262be:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80262c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80262c4:	00db      	lsls	r3, r3, #3
 80262c6:	18d4      	adds	r4, r2, r3
 80262c8:	f7da fc98 	bl	8000bfc <__aeabi_d2f>
 80262cc:	4603      	mov	r3, r0
 80262ce:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 80262d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80262d2:	3301      	adds	r3, #1
 80262d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80262d6:	e7b8      	b.n	802624a <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 80262d8:	2300      	movs	r3, #0
 80262da:	63bb      	str	r3, [r7, #56]	; 0x38
 80262dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80262de:	68fb      	ldr	r3, [r7, #12]
 80262e0:	429a      	cmp	r2, r3
 80262e2:	da41      	bge.n	8026368 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 80262e4:	a32a      	add	r3, pc, #168	; (adr r3, 8026390 <kiss_fft_alloc+0x1a8>)
 80262e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 80262ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80262f0:	f7da f922 	bl	8000538 <__aeabi_i2d>
 80262f4:	a32a      	add	r3, pc, #168	; (adr r3, 80263a0 <kiss_fft_alloc+0x1b8>)
 80262f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262fa:	f7da f987 	bl	800060c <__aeabi_dmul>
 80262fe:	4602      	mov	r2, r0
 8026300:	460b      	mov	r3, r1
 8026302:	4614      	mov	r4, r2
 8026304:	461d      	mov	r5, r3
 8026306:	68f8      	ldr	r0, [r7, #12]
 8026308:	f7da f916 	bl	8000538 <__aeabi_i2d>
 802630c:	4602      	mov	r2, r0
 802630e:	460b      	mov	r3, r1
 8026310:	4620      	mov	r0, r4
 8026312:	4629      	mov	r1, r5
 8026314:	f7da faa4 	bl	8000860 <__aeabi_ddiv>
 8026318:	4602      	mov	r2, r0
 802631a:	460b      	mov	r3, r1
 802631c:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8026320:	ed97 0b08 	vldr	d0, [r7, #32]
 8026324:	f008 fc9c 	bl	802ec60 <cos>
 8026328:	ec51 0b10 	vmov	r0, r1, d0
 802632c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802632e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8026332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026334:	00db      	lsls	r3, r3, #3
 8026336:	18d4      	adds	r4, r2, r3
 8026338:	f7da fc60 	bl	8000bfc <__aeabi_d2f>
 802633c:	4603      	mov	r3, r0
 802633e:	6023      	str	r3, [r4, #0]
 8026340:	ed97 0b08 	vldr	d0, [r7, #32]
 8026344:	f008 fde0 	bl	802ef08 <sin>
 8026348:	ec51 0b10 	vmov	r0, r1, d0
 802634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802634e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8026352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026354:	00db      	lsls	r3, r3, #3
 8026356:	18d4      	adds	r4, r2, r3
 8026358:	f7da fc50 	bl	8000bfc <__aeabi_d2f>
 802635c:	4603      	mov	r3, r0
 802635e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8026360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026362:	3301      	adds	r3, #1
 8026364:	63bb      	str	r3, [r7, #56]	; 0x38
 8026366:	e7b9      	b.n	80262dc <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 8026368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802636a:	3308      	adds	r3, #8
 802636c:	4619      	mov	r1, r3
 802636e:	68f8      	ldr	r0, [r7, #12]
 8026370:	f7ff fedc 	bl	802612c <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 8026374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026376:	2b00      	cmp	r3, #0
 8026378:	d002      	beq.n	8026380 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 802637a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802637c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802637e:	601a      	str	r2, [r3, #0]
    }

    return st;
 8026380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8026382:	4618      	mov	r0, r3
 8026384:	3740      	adds	r7, #64	; 0x40
 8026386:	46bd      	mov	sp, r7
 8026388:	bdb0      	pop	{r4, r5, r7, pc}
 802638a:	bf00      	nop
 802638c:	f3af 8000 	nop.w
 8026390:	54442d18 	.word	0x54442d18
 8026394:	400921fb 	.word	0x400921fb
 8026398:	54442d18 	.word	0x54442d18
 802639c:	401921fb 	.word	0x401921fb
 80263a0:	54442d18 	.word	0x54442d18
 80263a4:	c01921fb 	.word	0xc01921fb

080263a8 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 80263a8:	b580      	push	{r7, lr}
 80263aa:	b088      	sub	sp, #32
 80263ac:	af02      	add	r7, sp, #8
 80263ae:	60f8      	str	r0, [r7, #12]
 80263b0:	60b9      	str	r1, [r7, #8]
 80263b2:	607a      	str	r2, [r7, #4]
 80263b4:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 80263b6:	68ba      	ldr	r2, [r7, #8]
 80263b8:	687b      	ldr	r3, [r7, #4]
 80263ba:	429a      	cmp	r2, r3
 80263bc:	d11d      	bne.n	80263fa <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 80263be:	68fb      	ldr	r3, [r7, #12]
 80263c0:	681b      	ldr	r3, [r3, #0]
 80263c2:	00db      	lsls	r3, r3, #3
 80263c4:	4618      	mov	r0, r3
 80263c6:	f000 fbdf 	bl	8026b88 <_Z9ei_mallocj>
 80263ca:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 80263cc:	68fb      	ldr	r3, [r7, #12]
 80263ce:	3308      	adds	r3, #8
 80263d0:	68fa      	ldr	r2, [r7, #12]
 80263d2:	9201      	str	r2, [sp, #4]
 80263d4:	9300      	str	r3, [sp, #0]
 80263d6:	683b      	ldr	r3, [r7, #0]
 80263d8:	2201      	movs	r2, #1
 80263da:	68b9      	ldr	r1, [r7, #8]
 80263dc:	6978      	ldr	r0, [r7, #20]
 80263de:	f7ff fe0d 	bl	8025ffc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 80263e2:	68fb      	ldr	r3, [r7, #12]
 80263e4:	681b      	ldr	r3, [r3, #0]
 80263e6:	00db      	lsls	r3, r3, #3
 80263e8:	461a      	mov	r2, r3
 80263ea:	6979      	ldr	r1, [r7, #20]
 80263ec:	6878      	ldr	r0, [r7, #4]
 80263ee:	f00b f82f 	bl	8031450 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 80263f2:	6978      	ldr	r0, [r7, #20]
 80263f4:	f000 fbe2 	bl	8026bbc <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 80263f8:	e00a      	b.n	8026410 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 80263fa:	68fb      	ldr	r3, [r7, #12]
 80263fc:	3308      	adds	r3, #8
 80263fe:	68fa      	ldr	r2, [r7, #12]
 8026400:	9201      	str	r2, [sp, #4]
 8026402:	9300      	str	r3, [sp, #0]
 8026404:	683b      	ldr	r3, [r7, #0]
 8026406:	2201      	movs	r2, #1
 8026408:	68b9      	ldr	r1, [r7, #8]
 802640a:	6878      	ldr	r0, [r7, #4]
 802640c:	f7ff fdf6 	bl	8025ffc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8026410:	bf00      	nop
 8026412:	3718      	adds	r7, #24
 8026414:	46bd      	mov	sp, r7
 8026416:	bd80      	pop	{r7, pc}

08026418 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8026418:	b580      	push	{r7, lr}
 802641a:	b084      	sub	sp, #16
 802641c:	af00      	add	r7, sp, #0
 802641e:	60f8      	str	r0, [r7, #12]
 8026420:	60b9      	str	r1, [r7, #8]
 8026422:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8026424:	2301      	movs	r3, #1
 8026426:	687a      	ldr	r2, [r7, #4]
 8026428:	68b9      	ldr	r1, [r7, #8]
 802642a:	68f8      	ldr	r0, [r7, #12]
 802642c:	f7ff ffbc 	bl	80263a8 <kiss_fft_stride>
}
 8026430:	bf00      	nop
 8026432:	3710      	adds	r7, #16
 8026434:	46bd      	mov	sp, r7
 8026436:	bd80      	pop	{r7, pc}

08026438 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8026438:	b5b0      	push	{r4, r5, r7, lr}
 802643a:	b090      	sub	sp, #64	; 0x40
 802643c:	af02      	add	r7, sp, #8
 802643e:	60f8      	str	r0, [r7, #12]
 8026440:	60b9      	str	r1, [r7, #8]
 8026442:	607a      	str	r2, [r7, #4]
 8026444:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8026446:	2300      	movs	r3, #0
 8026448:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 802644a:	2300      	movs	r3, #0
 802644c:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 802644e:	68fb      	ldr	r3, [r7, #12]
 8026450:	f003 0301 	and.w	r3, r3, #1
 8026454:	2b00      	cmp	r3, #0
 8026456:	d004      	beq.n	8026462 <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8026458:	4885      	ldr	r0, [pc, #532]	; (8026670 <kiss_fftr_alloc+0x238>)
 802645a:	f7df fa1c 	bl	8005896 <_Z9ei_printfPKcz>
        return NULL;
 802645e:	2300      	movs	r3, #0
 8026460:	e0f9      	b.n	8026656 <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 8026462:	68fb      	ldr	r3, [r7, #12]
 8026464:	105b      	asrs	r3, r3, #1
 8026466:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8026468:	f107 0314 	add.w	r3, r7, #20
 802646c:	2200      	movs	r2, #0
 802646e:	9200      	str	r2, [sp, #0]
 8026470:	2200      	movs	r2, #0
 8026472:	68b9      	ldr	r1, [r7, #8]
 8026474:	68f8      	ldr	r0, [r7, #12]
 8026476:	f7ff feb7 	bl	80261e8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 802647a:	68fa      	ldr	r2, [r7, #12]
 802647c:	4613      	mov	r3, r2
 802647e:	005b      	lsls	r3, r3, #1
 8026480:	4413      	add	r3, r2
 8026482:	0fda      	lsrs	r2, r3, #31
 8026484:	4413      	add	r3, r2
 8026486:	105b      	asrs	r3, r3, #1
 8026488:	00da      	lsls	r2, r3, #3
 802648a:	697b      	ldr	r3, [r7, #20]
 802648c:	4413      	add	r3, r2
 802648e:	330c      	adds	r3, #12
 8026490:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 8026492:	683b      	ldr	r3, [r7, #0]
 8026494:	2b00      	cmp	r3, #0
 8026496:	d104      	bne.n	80264a2 <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8026498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802649a:	f000 fb75 	bl	8026b88 <_Z9ei_mallocj>
 802649e:	6338      	str	r0, [r7, #48]	; 0x30
 80264a0:	e009      	b.n	80264b6 <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 80264a2:	683b      	ldr	r3, [r7, #0]
 80264a4:	681b      	ldr	r3, [r3, #0]
 80264a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80264a8:	429a      	cmp	r2, r3
 80264aa:	d801      	bhi.n	80264b0 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 80264ac:	687b      	ldr	r3, [r7, #4]
 80264ae:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 80264b0:	683b      	ldr	r3, [r7, #0]
 80264b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80264b4:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 80264b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264b8:	2b00      	cmp	r3, #0
 80264ba:	d101      	bne.n	80264c0 <kiss_fftr_alloc+0x88>
        return NULL;
 80264bc:	2300      	movs	r3, #0
 80264be:	e0ca      	b.n	8026656 <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 80264c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264c2:	f103 020c 	add.w	r2, r3, #12
 80264c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264c8:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 80264ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264cc:	681a      	ldr	r2, [r3, #0]
 80264ce:	697b      	ldr	r3, [r7, #20]
 80264d0:	441a      	add	r2, r3
 80264d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264d4:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 80264d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264d8:	685a      	ldr	r2, [r3, #4]
 80264da:	68fb      	ldr	r3, [r7, #12]
 80264dc:	00db      	lsls	r3, r3, #3
 80264de:	441a      	add	r2, r3
 80264e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264e2:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 80264e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264e6:	681a      	ldr	r2, [r3, #0]
 80264e8:	f107 0314 	add.w	r3, r7, #20
 80264ec:	2100      	movs	r1, #0
 80264ee:	9100      	str	r1, [sp, #0]
 80264f0:	68b9      	ldr	r1, [r7, #8]
 80264f2:	68f8      	ldr	r0, [r7, #12]
 80264f4:	f7ff fe78 	bl	80261e8 <kiss_fft_alloc>

    if (inverse_fft) {
 80264f8:	68bb      	ldr	r3, [r7, #8]
 80264fa:	2b00      	cmp	r3, #0
 80264fc:	d052      	beq.n	80265a4 <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 80264fe:	2300      	movs	r3, #0
 8026500:	637b      	str	r3, [r7, #52]	; 0x34
 8026502:	68fb      	ldr	r3, [r7, #12]
 8026504:	0fda      	lsrs	r2, r3, #31
 8026506:	4413      	add	r3, r2
 8026508:	105b      	asrs	r3, r3, #1
 802650a:	461a      	mov	r2, r3
 802650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802650e:	4293      	cmp	r3, r2
 8026510:	f280 809a 	bge.w	8026648 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8026514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026516:	3301      	adds	r3, #1
 8026518:	4618      	mov	r0, r3
 802651a:	f7da f80d 	bl	8000538 <__aeabi_i2d>
 802651e:	4604      	mov	r4, r0
 8026520:	460d      	mov	r5, r1
 8026522:	68f8      	ldr	r0, [r7, #12]
 8026524:	f7da f808 	bl	8000538 <__aeabi_i2d>
 8026528:	4602      	mov	r2, r0
 802652a:	460b      	mov	r3, r1
 802652c:	4620      	mov	r0, r4
 802652e:	4629      	mov	r1, r5
 8026530:	f7da f996 	bl	8000860 <__aeabi_ddiv>
 8026534:	4602      	mov	r2, r0
 8026536:	460b      	mov	r3, r1
 8026538:	4610      	mov	r0, r2
 802653a:	4619      	mov	r1, r3
 802653c:	f04f 0200 	mov.w	r2, #0
 8026540:	4b4c      	ldr	r3, [pc, #304]	; (8026674 <kiss_fftr_alloc+0x23c>)
 8026542:	f7d9 fead 	bl	80002a0 <__adddf3>
 8026546:	4602      	mov	r2, r0
 8026548:	460b      	mov	r3, r1
 802654a:	4610      	mov	r0, r2
 802654c:	4619      	mov	r1, r3
            double phase =
 802654e:	a344      	add	r3, pc, #272	; (adr r3, 8026660 <kiss_fftr_alloc+0x228>)
 8026550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026554:	f7da f85a 	bl	800060c <__aeabi_dmul>
 8026558:	4602      	mov	r2, r0
 802655a:	460b      	mov	r3, r1
 802655c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8026560:	ed97 0b06 	vldr	d0, [r7, #24]
 8026564:	f008 fb7c 	bl	802ec60 <cos>
 8026568:	ec51 0b10 	vmov	r0, r1, d0
 802656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802656e:	689a      	ldr	r2, [r3, #8]
 8026570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026572:	00db      	lsls	r3, r3, #3
 8026574:	18d4      	adds	r4, r2, r3
 8026576:	f7da fb41 	bl	8000bfc <__aeabi_d2f>
 802657a:	4603      	mov	r3, r0
 802657c:	6023      	str	r3, [r4, #0]
 802657e:	ed97 0b06 	vldr	d0, [r7, #24]
 8026582:	f008 fcc1 	bl	802ef08 <sin>
 8026586:	ec51 0b10 	vmov	r0, r1, d0
 802658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802658c:	689a      	ldr	r2, [r3, #8]
 802658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026590:	00db      	lsls	r3, r3, #3
 8026592:	18d4      	adds	r4, r2, r3
 8026594:	f7da fb32 	bl	8000bfc <__aeabi_d2f>
 8026598:	4603      	mov	r3, r0
 802659a:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 802659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802659e:	3301      	adds	r3, #1
 80265a0:	637b      	str	r3, [r7, #52]	; 0x34
 80265a2:	e7ae      	b.n	8026502 <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 80265a4:	2300      	movs	r3, #0
 80265a6:	637b      	str	r3, [r7, #52]	; 0x34
 80265a8:	68fb      	ldr	r3, [r7, #12]
 80265aa:	0fda      	lsrs	r2, r3, #31
 80265ac:	4413      	add	r3, r2
 80265ae:	105b      	asrs	r3, r3, #1
 80265b0:	461a      	mov	r2, r3
 80265b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80265b4:	4293      	cmp	r3, r2
 80265b6:	da47      	bge.n	8026648 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 80265b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80265ba:	3301      	adds	r3, #1
 80265bc:	4618      	mov	r0, r3
 80265be:	f7d9 ffbb 	bl	8000538 <__aeabi_i2d>
 80265c2:	4604      	mov	r4, r0
 80265c4:	460d      	mov	r5, r1
 80265c6:	68f8      	ldr	r0, [r7, #12]
 80265c8:	f7d9 ffb6 	bl	8000538 <__aeabi_i2d>
 80265cc:	4602      	mov	r2, r0
 80265ce:	460b      	mov	r3, r1
 80265d0:	4620      	mov	r0, r4
 80265d2:	4629      	mov	r1, r5
 80265d4:	f7da f944 	bl	8000860 <__aeabi_ddiv>
 80265d8:	4602      	mov	r2, r0
 80265da:	460b      	mov	r3, r1
 80265dc:	4610      	mov	r0, r2
 80265de:	4619      	mov	r1, r3
 80265e0:	f04f 0200 	mov.w	r2, #0
 80265e4:	4b23      	ldr	r3, [pc, #140]	; (8026674 <kiss_fftr_alloc+0x23c>)
 80265e6:	f7d9 fe5b 	bl	80002a0 <__adddf3>
 80265ea:	4602      	mov	r2, r0
 80265ec:	460b      	mov	r3, r1
 80265ee:	4610      	mov	r0, r2
 80265f0:	4619      	mov	r1, r3
            double phase =
 80265f2:	a31d      	add	r3, pc, #116	; (adr r3, 8026668 <kiss_fftr_alloc+0x230>)
 80265f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265f8:	f7da f808 	bl	800060c <__aeabi_dmul>
 80265fc:	4602      	mov	r2, r0
 80265fe:	460b      	mov	r3, r1
 8026600:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8026604:	ed97 0b08 	vldr	d0, [r7, #32]
 8026608:	f008 fb2a 	bl	802ec60 <cos>
 802660c:	ec51 0b10 	vmov	r0, r1, d0
 8026610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026612:	689a      	ldr	r2, [r3, #8]
 8026614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026616:	00db      	lsls	r3, r3, #3
 8026618:	18d4      	adds	r4, r2, r3
 802661a:	f7da faef 	bl	8000bfc <__aeabi_d2f>
 802661e:	4603      	mov	r3, r0
 8026620:	6023      	str	r3, [r4, #0]
 8026622:	ed97 0b08 	vldr	d0, [r7, #32]
 8026626:	f008 fc6f 	bl	802ef08 <sin>
 802662a:	ec51 0b10 	vmov	r0, r1, d0
 802662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026630:	689a      	ldr	r2, [r3, #8]
 8026632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026634:	00db      	lsls	r3, r3, #3
 8026636:	18d4      	adds	r4, r2, r3
 8026638:	f7da fae0 	bl	8000bfc <__aeabi_d2f>
 802663c:	4603      	mov	r3, r0
 802663e:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8026640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026642:	3301      	adds	r3, #1
 8026644:	637b      	str	r3, [r7, #52]	; 0x34
 8026646:	e7af      	b.n	80265a8 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 8026648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802664a:	2b00      	cmp	r3, #0
 802664c:	d002      	beq.n	8026654 <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 802664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026652:	601a      	str	r2, [r3, #0]
    }

    return st;
 8026654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8026656:	4618      	mov	r0, r3
 8026658:	3738      	adds	r7, #56	; 0x38
 802665a:	46bd      	mov	sp, r7
 802665c:	bdb0      	pop	{r4, r5, r7, pc}
 802665e:	bf00      	nop
 8026660:	54442d18 	.word	0x54442d18
 8026664:	400921fb 	.word	0x400921fb
 8026668:	54442d18 	.word	0x54442d18
 802666c:	c00921fb 	.word	0xc00921fb
 8026670:	08033820 	.word	0x08033820
 8026674:	3fe00000 	.word	0x3fe00000

08026678 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8026678:	b580      	push	{r7, lr}
 802667a:	b092      	sub	sp, #72	; 0x48
 802667c:	af00      	add	r7, sp, #0
 802667e:	60f8      	str	r0, [r7, #12]
 8026680:	60b9      	str	r1, [r7, #8]
 8026682:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8026684:	68fb      	ldr	r3, [r7, #12]
 8026686:	681b      	ldr	r3, [r3, #0]
 8026688:	685b      	ldr	r3, [r3, #4]
 802668a:	2b00      	cmp	r3, #0
 802668c:	d002      	beq.n	8026694 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 802668e:	4887      	ldr	r0, [pc, #540]	; (80268ac <kiss_fftr+0x234>)
 8026690:	f7df f901 	bl	8005896 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8026694:	68fb      	ldr	r3, [r7, #12]
 8026696:	681b      	ldr	r3, [r3, #0]
 8026698:	681b      	ldr	r3, [r3, #0]
 802669a:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 802669c:	68fb      	ldr	r3, [r7, #12]
 802669e:	6818      	ldr	r0, [r3, #0]
 80266a0:	68fb      	ldr	r3, [r7, #12]
 80266a2:	685b      	ldr	r3, [r3, #4]
 80266a4:	461a      	mov	r2, r3
 80266a6:	68b9      	ldr	r1, [r7, #8]
 80266a8:	f7ff feb6 	bl	8026418 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 80266ac:	68fb      	ldr	r3, [r7, #12]
 80266ae:	685b      	ldr	r3, [r3, #4]
 80266b0:	681b      	ldr	r3, [r3, #0]
 80266b2:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 80266b4:	68fb      	ldr	r3, [r7, #12]
 80266b6:	685b      	ldr	r3, [r3, #4]
 80266b8:	685b      	ldr	r3, [r3, #4]
 80266ba:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 80266bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80266c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80266c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 80266ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80266d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80266d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80266d8:	00db      	lsls	r3, r3, #3
 80266da:	687a      	ldr	r2, [r7, #4]
 80266dc:	4413      	add	r3, r2
 80266de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80266e2:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 80266e6:	687b      	ldr	r3, [r7, #4]
 80266e8:	f04f 0200 	mov.w	r2, #0
 80266ec:	605a      	str	r2, [r3, #4]
 80266ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80266f0:	00db      	lsls	r3, r3, #3
 80266f2:	687a      	ldr	r2, [r7, #4]
 80266f4:	4413      	add	r3, r2
 80266f6:	687a      	ldr	r2, [r7, #4]
 80266f8:	6852      	ldr	r2, [r2, #4]
 80266fa:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 80266fc:	2301      	movs	r3, #1
 80266fe:	647b      	str	r3, [r7, #68]	; 0x44
 8026700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026702:	0fda      	lsrs	r2, r3, #31
 8026704:	4413      	add	r3, r2
 8026706:	105b      	asrs	r3, r3, #1
 8026708:	461a      	mov	r2, r3
 802670a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802670c:	4293      	cmp	r3, r2
 802670e:	f300 80c9 	bgt.w	80268a4 <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 8026712:	68fb      	ldr	r3, [r7, #12]
 8026714:	685a      	ldr	r2, [r3, #4]
 8026716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026718:	00db      	lsls	r3, r3, #3
 802671a:	441a      	add	r2, r3
 802671c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026724:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8026728:	68fb      	ldr	r3, [r7, #12]
 802672a:	685a      	ldr	r2, [r3, #4]
 802672c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802672e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026730:	1acb      	subs	r3, r1, r3
 8026732:	00db      	lsls	r3, r3, #3
 8026734:	4413      	add	r3, r2
 8026736:	681b      	ldr	r3, [r3, #0]
 8026738:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 802673a:	68fb      	ldr	r3, [r7, #12]
 802673c:	685a      	ldr	r2, [r3, #4]
 802673e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026742:	1acb      	subs	r3, r1, r3
 8026744:	00db      	lsls	r3, r3, #3
 8026746:	4413      	add	r3, r2
 8026748:	edd3 7a01 	vldr	s15, [r3, #4]
 802674c:	eef1 7a67 	vneg.f32	s15, s15
 8026750:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8026754:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8026758:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 802675c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026760:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8026764:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8026768:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 802676c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026770:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8026774:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8026778:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 802677c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026780:	edc7 7a08 	vstr	s15, [r7, #32]
 8026784:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8026788:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 802678c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026790:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8026794:	ed97 7a08 	vldr	s14, [r7, #32]
 8026798:	68fb      	ldr	r3, [r7, #12]
 802679a:	689a      	ldr	r2, [r3, #8]
 802679c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802679e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80267a2:	3b01      	subs	r3, #1
 80267a4:	00db      	lsls	r3, r3, #3
 80267a6:	4413      	add	r3, r2
 80267a8:	edd3 7a00 	vldr	s15, [r3]
 80267ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80267b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80267b4:	68fb      	ldr	r3, [r7, #12]
 80267b6:	689a      	ldr	r2, [r3, #8]
 80267b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80267ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80267be:	3b01      	subs	r3, #1
 80267c0:	00db      	lsls	r3, r3, #3
 80267c2:	4413      	add	r3, r2
 80267c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80267c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80267cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80267d0:	edc7 7a06 	vstr	s15, [r7, #24]
 80267d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80267d8:	68fb      	ldr	r3, [r7, #12]
 80267da:	689a      	ldr	r2, [r3, #8]
 80267dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80267de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80267e2:	3b01      	subs	r3, #1
 80267e4:	00db      	lsls	r3, r3, #3
 80267e6:	4413      	add	r3, r2
 80267e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80267ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80267f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80267f4:	68fb      	ldr	r3, [r7, #12]
 80267f6:	689a      	ldr	r2, [r3, #8]
 80267f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80267fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80267fe:	3b01      	subs	r3, #1
 8026800:	00db      	lsls	r3, r3, #3
 8026802:	4413      	add	r3, r2
 8026804:	edd3 7a00 	vldr	s15, [r3]
 8026808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802680c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026810:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8026814:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8026818:	edd7 7a06 	vldr	s15, [r7, #24]
 802681c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026822:	00db      	lsls	r3, r3, #3
 8026824:	687a      	ldr	r2, [r7, #4]
 8026826:	4413      	add	r3, r2
 8026828:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802682c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026830:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8026834:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8026838:	edd7 7a07 	vldr	s15, [r7, #28]
 802683c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026842:	00db      	lsls	r3, r3, #3
 8026844:	687a      	ldr	r2, [r7, #4]
 8026846:	4413      	add	r3, r2
 8026848:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802684c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026850:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8026854:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8026858:	edd7 7a06 	vldr	s15, [r7, #24]
 802685c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026864:	1ad3      	subs	r3, r2, r3
 8026866:	00db      	lsls	r3, r3, #3
 8026868:	687a      	ldr	r2, [r7, #4]
 802686a:	4413      	add	r3, r2
 802686c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8026870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026874:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8026878:	ed97 7a07 	vldr	s14, [r7, #28]
 802687c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8026880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026888:	1ad3      	subs	r3, r2, r3
 802688a:	00db      	lsls	r3, r3, #3
 802688c:	687a      	ldr	r2, [r7, #4]
 802688e:	4413      	add	r3, r2
 8026890:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8026894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026898:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 802689c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802689e:	3301      	adds	r3, #1
 80268a0:	647b      	str	r3, [r7, #68]	; 0x44
 80268a2:	e72d      	b.n	8026700 <kiss_fftr+0x88>
    }
}
 80268a4:	bf00      	nop
 80268a6:	3748      	adds	r7, #72	; 0x48
 80268a8:	46bd      	mov	sp, r7
 80268aa:	bd80      	pop	{r7, pc}
 80268ac:	0803383c 	.word	0x0803383c

080268b0 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 80268b0:	b580      	push	{r7, lr}
 80268b2:	b082      	sub	sp, #8
 80268b4:	af00      	add	r7, sp, #0
 80268b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80268ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80268be:	f008 fd1f 	bl	802f300 <log10f>
 80268c2:	eef0 7a40 	vmov.f32	s15, s0
 80268c6:	eeb0 0a67 	vmov.f32	s0, s15
 80268ca:	3708      	adds	r7, #8
 80268cc:	46bd      	mov	sp, r7
 80268ce:	bd80      	pop	{r7, pc}

080268d0 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 80268d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80268d2:	b083      	sub	sp, #12
 80268d4:	af00      	add	r7, sp, #0
 80268d6:	ed87 0b00 	vstr	d0, [r7]
 80268da:	683c      	ldr	r4, [r7, #0]
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80268e2:	2301      	movs	r3, #1
 80268e4:	461e      	mov	r6, r3
 80268e6:	f04f 32ff 	mov.w	r2, #4294967295
 80268ea:	4b10      	ldr	r3, [pc, #64]	; (802692c <_ZSt5isinfd+0x5c>)
 80268ec:	4620      	mov	r0, r4
 80268ee:	4629      	mov	r1, r5
 80268f0:	f7da f926 	bl	8000b40 <__aeabi_dcmpun>
 80268f4:	4603      	mov	r3, r0
 80268f6:	2b00      	cmp	r3, #0
 80268f8:	d10b      	bne.n	8026912 <_ZSt5isinfd+0x42>
 80268fa:	f04f 32ff 	mov.w	r2, #4294967295
 80268fe:	4b0b      	ldr	r3, [pc, #44]	; (802692c <_ZSt5isinfd+0x5c>)
 8026900:	4620      	mov	r0, r4
 8026902:	4629      	mov	r1, r5
 8026904:	f7da f8fe 	bl	8000b04 <__aeabi_dcmple>
 8026908:	4603      	mov	r3, r0
 802690a:	2b00      	cmp	r3, #0
 802690c:	d101      	bne.n	8026912 <_ZSt5isinfd+0x42>
 802690e:	2300      	movs	r3, #0
 8026910:	461e      	mov	r6, r3
 8026912:	b2f3      	uxtb	r3, r6
 8026914:	f083 0301 	eor.w	r3, r3, #1
 8026918:	b2db      	uxtb	r3, r3
 802691a:	2b00      	cmp	r3, #0
 802691c:	bf14      	ite	ne
 802691e:	2301      	movne	r3, #1
 8026920:	2300      	moveq	r3, #0
 8026922:	b2db      	uxtb	r3, r3
 8026924:	4618      	mov	r0, r3
 8026926:	370c      	adds	r7, #12
 8026928:	46bd      	mov	sp, r7
 802692a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802692c:	7fefffff 	.word	0x7fefffff

08026930 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8026930:	b480      	push	{r7}
 8026932:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8026934:	2300      	movs	r3, #0
}
 8026936:	4618      	mov	r0, r3
 8026938:	46bd      	mov	sp, r7
 802693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802693e:	4770      	bx	lr

08026940 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8026940:	b5b0      	push	{r4, r5, r7, lr}
 8026942:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8026944:	f7e1 f862 	bl	8007a0c <HAL_GetTick>
 8026948:	4603      	mov	r3, r0
 802694a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802694e:	fb02 f303 	mul.w	r3, r2, r3
 8026952:	2200      	movs	r2, #0
 8026954:	461c      	mov	r4, r3
 8026956:	4615      	mov	r5, r2
 8026958:	4622      	mov	r2, r4
 802695a:	462b      	mov	r3, r5
}
 802695c:	4610      	mov	r0, r2
 802695e:	4619      	mov	r1, r3
 8026960:	bdb0      	pop	{r4, r5, r7, pc}
 8026962:	0000      	movs	r0, r0
 8026964:	0000      	movs	r0, r0
	...

08026968 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8026968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802696c:	b08c      	sub	sp, #48	; 0x30
 802696e:	af00      	add	r7, sp, #0
 8026970:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8026974:	466b      	mov	r3, sp
 8026976:	4698      	mov	r8, r3
    float n = f;
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 802697c:	4b7e      	ldr	r3, [pc, #504]	; (8026b78 <_Z15ei_printf_floatf+0x210>)
 802697e:	681b      	ldr	r3, [r3, #0]
 8026980:	1e5e      	subs	r6, r3, #1
 8026982:	623e      	str	r6, [r7, #32]
 8026984:	4633      	mov	r3, r6
 8026986:	3301      	adds	r3, #1
 8026988:	2200      	movs	r2, #0
 802698a:	461c      	mov	r4, r3
 802698c:	4615      	mov	r5, r2
 802698e:	f04f 0200 	mov.w	r2, #0
 8026992:	f04f 0300 	mov.w	r3, #0
 8026996:	00eb      	lsls	r3, r5, #3
 8026998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802699c:	00e2      	lsls	r2, r4, #3
 802699e:	4633      	mov	r3, r6
 80269a0:	3301      	adds	r3, #1
 80269a2:	2200      	movs	r2, #0
 80269a4:	4618      	mov	r0, r3
 80269a6:	4611      	mov	r1, r2
 80269a8:	f04f 0200 	mov.w	r2, #0
 80269ac:	f04f 0300 	mov.w	r3, #0
 80269b0:	00cb      	lsls	r3, r1, #3
 80269b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80269b6:	00c2      	lsls	r2, r0, #3
 80269b8:	4633      	mov	r3, r6
 80269ba:	3301      	adds	r3, #1
 80269bc:	3307      	adds	r3, #7
 80269be:	08db      	lsrs	r3, r3, #3
 80269c0:	00db      	lsls	r3, r3, #3
 80269c2:	ebad 0d03 	sub.w	sp, sp, r3
 80269c6:	466b      	mov	r3, sp
 80269c8:	3300      	adds	r3, #0
 80269ca:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 80269cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80269d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80269d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269d8:	d106      	bne.n	80269e8 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 80269da:	69fb      	ldr	r3, [r7, #28]
 80269dc:	4967      	ldr	r1, [pc, #412]	; (8026b7c <_Z15ei_printf_floatf+0x214>)
 80269de:	461a      	mov	r2, r3
 80269e0:	460b      	mov	r3, r1
 80269e2:	881b      	ldrh	r3, [r3, #0]
 80269e4:	8013      	strh	r3, [r2, #0]
 80269e6:	e0b6      	b.n	8026b56 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 80269e8:	69fb      	ldr	r3, [r7, #28]
 80269ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 80269ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80269f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80269f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269f8:	bf4c      	ite	mi
 80269fa:	2301      	movmi	r3, #1
 80269fc:	2300      	movpl	r3, #0
 80269fe:	b2db      	uxtb	r3, r3
 8026a00:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8026a02:	69bb      	ldr	r3, [r7, #24]
 8026a04:	2b00      	cmp	r3, #0
 8026a06:	d005      	beq.n	8026a14 <_Z15ei_printf_floatf+0xac>
            n = -n;
 8026a08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8026a0c:	eef1 7a67 	vneg.f32	s15, s15
 8026a10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8026a14:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8026a18:	f7ff ff4a 	bl	80268b0 <_ZSt5log10f>
 8026a1c:	eef0 7a40 	vmov.f32	s15, s0
 8026a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026a24:	ee17 3a90 	vmov	r3, s15
 8026a28:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8026a2a:	69bb      	ldr	r3, [r7, #24]
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	d004      	beq.n	8026a3a <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8026a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026a32:	1c5a      	adds	r2, r3, #1
 8026a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8026a36:	222d      	movs	r2, #45	; 0x2d
 8026a38:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8026a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	dc01      	bgt.n	8026a44 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8026a40:	2300      	movs	r3, #0
 8026a42:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8026a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026a46:	f7d9 fd89 	bl	800055c <__aeabi_f2d>
 8026a4a:	4b4d      	ldr	r3, [pc, #308]	; (8026b80 <_Z15ei_printf_floatf+0x218>)
 8026a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a50:	2401      	movs	r4, #1
 8026a52:	f7da f86b 	bl	8000b2c <__aeabi_dcmpgt>
 8026a56:	4603      	mov	r3, r0
 8026a58:	2b00      	cmp	r3, #0
 8026a5a:	d101      	bne.n	8026a60 <_Z15ei_printf_floatf+0xf8>
 8026a5c:	2300      	movs	r3, #0
 8026a5e:	461c      	mov	r4, r3
 8026a60:	b2e3      	uxtb	r3, r4
 8026a62:	f083 0301 	eor.w	r3, r3, #1
 8026a66:	b2db      	uxtb	r3, r3
 8026a68:	2b00      	cmp	r3, #0
 8026a6a:	d002      	beq.n	8026a72 <_Z15ei_printf_floatf+0x10a>
 8026a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026a6e:	2b00      	cmp	r3, #0
 8026a70:	db6e      	blt.n	8026b50 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8026a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026a74:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8026b70 <_Z15ei_printf_floatf+0x208>
 8026a78:	f000 f8ab 	bl	8026bd2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8026a7c:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8026a80:	f04f 0200 	mov.w	r2, #0
 8026a84:	f04f 0300 	mov.w	r3, #0
 8026a88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8026a8c:	f7da f84e 	bl	8000b2c <__aeabi_dcmpgt>
 8026a90:	4603      	mov	r3, r0
 8026a92:	2b00      	cmp	r3, #0
 8026a94:	d00b      	beq.n	8026aae <_Z15ei_printf_floatf+0x146>
 8026a96:	ed97 0b04 	vldr	d0, [r7, #16]
 8026a9a:	f7ff ff19 	bl	80268d0 <_ZSt5isinfd>
 8026a9e:	4603      	mov	r3, r0
 8026aa0:	f083 0301 	eor.w	r3, r3, #1
 8026aa4:	b2db      	uxtb	r3, r3
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	d001      	beq.n	8026aae <_Z15ei_printf_floatf+0x146>
 8026aaa:	2301      	movs	r3, #1
 8026aac:	e000      	b.n	8026ab0 <_Z15ei_printf_floatf+0x148>
 8026aae:	2300      	movs	r3, #0
 8026ab0:	2b00      	cmp	r3, #0
 8026ab2:	d03a      	beq.n	8026b2a <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8026ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026ab6:	f7d9 fd51 	bl	800055c <__aeabi_f2d>
 8026aba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8026abe:	f7d9 fecf 	bl	8000860 <__aeabi_ddiv>
 8026ac2:	4602      	mov	r2, r0
 8026ac4:	460b      	mov	r3, r1
 8026ac6:	ec43 2b17 	vmov	d7, r2, r3
 8026aca:	eeb0 0a47 	vmov.f32	s0, s14
 8026ace:	eef0 0a67 	vmov.f32	s1, s15
 8026ad2:	f008 f919 	bl	802ed08 <floor>
 8026ad6:	ec53 2b10 	vmov	r2, r3, d0
 8026ada:	4610      	mov	r0, r2
 8026adc:	4619      	mov	r1, r3
 8026ade:	f7da f845 	bl	8000b6c <__aeabi_d2iz>
 8026ae2:	4603      	mov	r3, r0
 8026ae4:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8026ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026ae8:	f7d9 fd38 	bl	800055c <__aeabi_f2d>
 8026aec:	4604      	mov	r4, r0
 8026aee:	460d      	mov	r5, r1
 8026af0:	68f8      	ldr	r0, [r7, #12]
 8026af2:	f7d9 fd21 	bl	8000538 <__aeabi_i2d>
 8026af6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8026afa:	f7d9 fd87 	bl	800060c <__aeabi_dmul>
 8026afe:	4602      	mov	r2, r0
 8026b00:	460b      	mov	r3, r1
 8026b02:	4620      	mov	r0, r4
 8026b04:	4629      	mov	r1, r5
 8026b06:	f7d9 fbc9 	bl	800029c <__aeabi_dsub>
 8026b0a:	4602      	mov	r2, r0
 8026b0c:	460b      	mov	r3, r1
 8026b0e:	4610      	mov	r0, r2
 8026b10:	4619      	mov	r1, r3
 8026b12:	f7da f873 	bl	8000bfc <__aeabi_d2f>
 8026b16:	4603      	mov	r3, r0
 8026b18:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8026b1a:	68fb      	ldr	r3, [r7, #12]
 8026b1c:	b2da      	uxtb	r2, r3
 8026b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b20:	1c59      	adds	r1, r3, #1
 8026b22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8026b24:	3230      	adds	r2, #48	; 0x30
 8026b26:	b2d2      	uxtb	r2, r2
 8026b28:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8026b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026b2c:	2b00      	cmp	r3, #0
 8026b2e:	d10b      	bne.n	8026b48 <_Z15ei_printf_floatf+0x1e0>
 8026b30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8026b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8026b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b3c:	dd04      	ble.n	8026b48 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8026b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b40:	1c5a      	adds	r2, r3, #1
 8026b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8026b44:	222e      	movs	r2, #46	; 0x2e
 8026b46:	701a      	strb	r2, [r3, #0]
            m--;
 8026b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026b4a:	3b01      	subs	r3, #1
 8026b4c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8026b4e:	e779      	b.n	8026a44 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8026b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b52:	2200      	movs	r2, #0
 8026b54:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8026b56:	69f9      	ldr	r1, [r7, #28]
 8026b58:	480a      	ldr	r0, [pc, #40]	; (8026b84 <_Z15ei_printf_floatf+0x21c>)
 8026b5a:	f7de fe9c 	bl	8005896 <_Z9ei_printfPKcz>
 8026b5e:	46c5      	mov	sp, r8
}
 8026b60:	bf00      	nop
 8026b62:	3730      	adds	r7, #48	; 0x30
 8026b64:	46bd      	mov	sp, r7
 8026b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b6a:	bf00      	nop
 8026b6c:	f3af 8000 	nop.w
 8026b70:	00000000 	.word	0x00000000
 8026b74:	40240000 	.word	0x40240000
 8026b78:	20000450 	.word	0x20000450
 8026b7c:	08033864 	.word	0x08033864
 8026b80:	20000448 	.word	0x20000448
 8026b84:	08033868 	.word	0x08033868

08026b88 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8026b88:	b580      	push	{r7, lr}
 8026b8a:	b082      	sub	sp, #8
 8026b8c:	af00      	add	r7, sp, #0
 8026b8e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8026b90:	6878      	ldr	r0, [r7, #4]
 8026b92:	f00a fc4d 	bl	8031430 <malloc>
 8026b96:	4603      	mov	r3, r0
}
 8026b98:	4618      	mov	r0, r3
 8026b9a:	3708      	adds	r7, #8
 8026b9c:	46bd      	mov	sp, r7
 8026b9e:	bd80      	pop	{r7, pc}

08026ba0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8026ba0:	b580      	push	{r7, lr}
 8026ba2:	b082      	sub	sp, #8
 8026ba4:	af00      	add	r7, sp, #0
 8026ba6:	6078      	str	r0, [r7, #4]
 8026ba8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8026baa:	6839      	ldr	r1, [r7, #0]
 8026bac:	6878      	ldr	r0, [r7, #4]
 8026bae:	f00a fbf7 	bl	80313a0 <calloc>
 8026bb2:	4603      	mov	r3, r0
}
 8026bb4:	4618      	mov	r0, r3
 8026bb6:	3708      	adds	r7, #8
 8026bb8:	46bd      	mov	sp, r7
 8026bba:	bd80      	pop	{r7, pc}

08026bbc <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8026bbc:	b580      	push	{r7, lr}
 8026bbe:	b082      	sub	sp, #8
 8026bc0:	af00      	add	r7, sp, #0
 8026bc2:	6078      	str	r0, [r7, #4]
    free(ptr);
 8026bc4:	6878      	ldr	r0, [r7, #4]
 8026bc6:	f00a fc3b 	bl	8031440 <free>
}
 8026bca:	bf00      	nop
 8026bcc:	3708      	adds	r7, #8
 8026bce:	46bd      	mov	sp, r7
 8026bd0:	bd80      	pop	{r7, pc}

08026bd2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8026bd2:	b580      	push	{r7, lr}
 8026bd4:	b084      	sub	sp, #16
 8026bd6:	af00      	add	r7, sp, #0
 8026bd8:	ed87 0b02 	vstr	d0, [r7, #8]
 8026bdc:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8026bde:	6878      	ldr	r0, [r7, #4]
 8026be0:	f7d9 fcaa 	bl	8000538 <__aeabi_i2d>
 8026be4:	4602      	mov	r2, r0
 8026be6:	460b      	mov	r3, r1
 8026be8:	ec43 2b11 	vmov	d1, r2, r3
 8026bec:	ed97 0b02 	vldr	d0, [r7, #8]
 8026bf0:	f008 fab4 	bl	802f15c <pow>
 8026bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8026bf8:	eef0 7a60 	vmov.f32	s15, s1
    }
 8026bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8026c00:	eef0 0a67 	vmov.f32	s1, s15
 8026c04:	3710      	adds	r7, #16
 8026c06:	46bd      	mov	sp, r7
 8026c08:	bd80      	pop	{r7, pc}
	...

08026c0c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8026c0c:	b480      	push	{r7}
 8026c0e:	b083      	sub	sp, #12
 8026c10:	af00      	add	r7, sp, #0
 8026c12:	4603      	mov	r3, r0
 8026c14:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8026c16:	79fb      	ldrb	r3, [r7, #7]
 8026c18:	2b10      	cmp	r3, #16
 8026c1a:	d847      	bhi.n	8026cac <TfLiteTypeGetName+0xa0>
 8026c1c:	a201      	add	r2, pc, #4	; (adr r2, 8026c24 <TfLiteTypeGetName+0x18>)
 8026c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026c22:	bf00      	nop
 8026c24:	08026c69 	.word	0x08026c69
 8026c28:	08026c6d 	.word	0x08026c6d
 8026c2c:	08026c75 	.word	0x08026c75
 8026c30:	08026c7d 	.word	0x08026c7d
 8026c34:	08026c85 	.word	0x08026c85
 8026c38:	08026c99 	.word	0x08026c99
 8026c3c:	08026c8d 	.word	0x08026c8d
 8026c40:	08026c71 	.word	0x08026c71
 8026c44:	08026c91 	.word	0x08026c91
 8026c48:	08026c81 	.word	0x08026c81
 8026c4c:	08026c9d 	.word	0x08026c9d
 8026c50:	08026ca1 	.word	0x08026ca1
 8026c54:	08026c95 	.word	0x08026c95
 8026c58:	08026c89 	.word	0x08026c89
 8026c5c:	08026ca5 	.word	0x08026ca5
 8026c60:	08026ca9 	.word	0x08026ca9
 8026c64:	08026c79 	.word	0x08026c79
    case kTfLiteNoType:
      return "NOTYPE";
 8026c68:	4b14      	ldr	r3, [pc, #80]	; (8026cbc <TfLiteTypeGetName+0xb0>)
 8026c6a:	e020      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8026c6c:	4b14      	ldr	r3, [pc, #80]	; (8026cc0 <TfLiteTypeGetName+0xb4>)
 8026c6e:	e01e      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8026c70:	4b14      	ldr	r3, [pc, #80]	; (8026cc4 <TfLiteTypeGetName+0xb8>)
 8026c72:	e01c      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8026c74:	4b14      	ldr	r3, [pc, #80]	; (8026cc8 <TfLiteTypeGetName+0xbc>)
 8026c76:	e01a      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8026c78:	4b14      	ldr	r3, [pc, #80]	; (8026ccc <TfLiteTypeGetName+0xc0>)
 8026c7a:	e018      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8026c7c:	4b14      	ldr	r3, [pc, #80]	; (8026cd0 <TfLiteTypeGetName+0xc4>)
 8026c7e:	e016      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8026c80:	4b14      	ldr	r3, [pc, #80]	; (8026cd4 <TfLiteTypeGetName+0xc8>)
 8026c82:	e014      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8026c84:	4b14      	ldr	r3, [pc, #80]	; (8026cd8 <TfLiteTypeGetName+0xcc>)
 8026c86:	e012      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8026c88:	4b14      	ldr	r3, [pc, #80]	; (8026cdc <TfLiteTypeGetName+0xd0>)
 8026c8a:	e010      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8026c8c:	4b14      	ldr	r3, [pc, #80]	; (8026ce0 <TfLiteTypeGetName+0xd4>)
 8026c8e:	e00e      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8026c90:	4b14      	ldr	r3, [pc, #80]	; (8026ce4 <TfLiteTypeGetName+0xd8>)
 8026c92:	e00c      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8026c94:	4b14      	ldr	r3, [pc, #80]	; (8026ce8 <TfLiteTypeGetName+0xdc>)
 8026c96:	e00a      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8026c98:	4b14      	ldr	r3, [pc, #80]	; (8026cec <TfLiteTypeGetName+0xe0>)
 8026c9a:	e008      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8026c9c:	4b14      	ldr	r3, [pc, #80]	; (8026cf0 <TfLiteTypeGetName+0xe4>)
 8026c9e:	e006      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8026ca0:	4b14      	ldr	r3, [pc, #80]	; (8026cf4 <TfLiteTypeGetName+0xe8>)
 8026ca2:	e004      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8026ca4:	4b14      	ldr	r3, [pc, #80]	; (8026cf8 <TfLiteTypeGetName+0xec>)
 8026ca6:	e002      	b.n	8026cae <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8026ca8:	4b14      	ldr	r3, [pc, #80]	; (8026cfc <TfLiteTypeGetName+0xf0>)
 8026caa:	e000      	b.n	8026cae <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8026cac:	4b14      	ldr	r3, [pc, #80]	; (8026d00 <TfLiteTypeGetName+0xf4>)
}
 8026cae:	4618      	mov	r0, r3
 8026cb0:	370c      	adds	r7, #12
 8026cb2:	46bd      	mov	sp, r7
 8026cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cb8:	4770      	bx	lr
 8026cba:	bf00      	nop
 8026cbc:	0803386c 	.word	0x0803386c
 8026cc0:	08033874 	.word	0x08033874
 8026cc4:	0803387c 	.word	0x0803387c
 8026cc8:	08033884 	.word	0x08033884
 8026ccc:	0803388c 	.word	0x0803388c
 8026cd0:	08033894 	.word	0x08033894
 8026cd4:	0803389c 	.word	0x0803389c
 8026cd8:	080338a4 	.word	0x080338a4
 8026cdc:	080338ac 	.word	0x080338ac
 8026ce0:	080338b4 	.word	0x080338b4
 8026ce4:	080338bc 	.word	0x080338bc
 8026ce8:	080338c8 	.word	0x080338c8
 8026cec:	080338d4 	.word	0x080338d4
 8026cf0:	080338dc 	.word	0x080338dc
 8026cf4:	080338e4 	.word	0x080338e4
 8026cf8:	080338ec 	.word	0x080338ec
 8026cfc:	080338f8 	.word	0x080338f8
 8026d00:	08033900 	.word	0x08033900

08026d04 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8026d04:	b480      	push	{r7}
 8026d06:	af00      	add	r7, sp, #0
 8026d08:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026d0c:	4618      	mov	r0, r3
 8026d0e:	46bd      	mov	sp, r7
 8026d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d14:	4770      	bx	lr
	...

08026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8026d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026d1c:	b088      	sub	sp, #32
 8026d1e:	af00      	add	r7, sp, #0
 8026d20:	ed87 0b02 	vstr	d0, [r7, #8]
 8026d24:	6078      	str	r0, [r7, #4]
 8026d26:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8026d28:	f04f 0200 	mov.w	r2, #0
 8026d2c:	f04f 0300 	mov.w	r3, #0
 8026d30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026d34:	f7d9 fed2 	bl	8000adc <__aeabi_dcmpeq>
 8026d38:	4603      	mov	r3, r0
 8026d3a:	2b00      	cmp	r3, #0
 8026d3c:	d006      	beq.n	8026d4c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	2200      	movs	r2, #0
 8026d42:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8026d44:	683b      	ldr	r3, [r7, #0]
 8026d46:	2200      	movs	r2, #0
 8026d48:	601a      	str	r2, [r3, #0]
    return;
 8026d4a:	e068      	b.n	8026e1e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8026d4c:	6838      	ldr	r0, [r7, #0]
 8026d4e:	ed97 0b02 	vldr	d0, [r7, #8]
 8026d52:	f008 f859 	bl	802ee08 <frexp>
 8026d56:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8026d5a:	f04f 0200 	mov.w	r2, #0
 8026d5e:	4b32      	ldr	r3, [pc, #200]	; (8026e28 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8026d60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8026d64:	f7d9 fc52 	bl	800060c <__aeabi_dmul>
 8026d68:	4602      	mov	r2, r0
 8026d6a:	460b      	mov	r3, r1
 8026d6c:	ec43 2b17 	vmov	d7, r2, r3
 8026d70:	eeb0 0a47 	vmov.f32	s0, s14
 8026d74:	eef0 0a67 	vmov.f32	s1, s15
 8026d78:	f000 f962 	bl	8027040 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8026d7c:	ec53 2b10 	vmov	r2, r3, d0
 8026d80:	4610      	mov	r0, r2
 8026d82:	4619      	mov	r1, r3
 8026d84:	f7d9 ffda 	bl	8000d3c <__aeabi_d2lz>
 8026d88:	4602      	mov	r2, r0
 8026d8a:	460b      	mov	r3, r1
 8026d8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8026d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026d94:	4925      	ldr	r1, [pc, #148]	; (8026e2c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8026d96:	428a      	cmp	r2, r1
 8026d98:	f173 0300 	sbcs.w	r3, r3, #0
 8026d9c:	db01      	blt.n	8026da2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8026d9e:	f00a fad9 	bl	8031354 <abort>
  if (q_fixed == (1ll << 31)) {
 8026da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026da6:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8026daa:	430b      	orrs	r3, r1
 8026dac:	d118      	bne.n	8026de0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8026dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026db2:	0fd9      	lsrs	r1, r3, #31
 8026db4:	2000      	movs	r0, #0
 8026db6:	468a      	mov	sl, r1
 8026db8:	4683      	mov	fp, r0
 8026dba:	eb1a 0402 	adds.w	r4, sl, r2
 8026dbe:	eb4b 0503 	adc.w	r5, fp, r3
 8026dc2:	f04f 0200 	mov.w	r2, #0
 8026dc6:	f04f 0300 	mov.w	r3, #0
 8026dca:	0862      	lsrs	r2, r4, #1
 8026dcc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8026dd0:	106b      	asrs	r3, r5, #1
 8026dd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8026dd6:	683b      	ldr	r3, [r7, #0]
 8026dd8:	681b      	ldr	r3, [r3, #0]
 8026dda:	1c5a      	adds	r2, r3, #1
 8026ddc:	683b      	ldr	r3, [r7, #0]
 8026dde:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8026de0:	f7ff ff90 	bl	8026d04 <_ZNSt14numeric_limitsIlE3maxEv>
 8026de4:	4603      	mov	r3, r0
 8026de6:	17da      	asrs	r2, r3, #31
 8026de8:	4698      	mov	r8, r3
 8026dea:	4691      	mov	r9, r2
 8026dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026df0:	4590      	cmp	r8, r2
 8026df2:	eb79 0303 	sbcs.w	r3, r9, r3
 8026df6:	da01      	bge.n	8026dfc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8026df8:	f00a faac 	bl	8031354 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8026dfc:	683b      	ldr	r3, [r7, #0]
 8026dfe:	681b      	ldr	r3, [r3, #0]
 8026e00:	f113 0f1f 	cmn.w	r3, #31
 8026e04:	da08      	bge.n	8026e18 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8026e06:	683b      	ldr	r3, [r7, #0]
 8026e08:	2200      	movs	r2, #0
 8026e0a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8026e0c:	f04f 0200 	mov.w	r2, #0
 8026e10:	f04f 0300 	mov.w	r3, #0
 8026e14:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8026e18:	69ba      	ldr	r2, [r7, #24]
 8026e1a:	687b      	ldr	r3, [r7, #4]
 8026e1c:	601a      	str	r2, [r3, #0]
}
 8026e1e:	3720      	adds	r7, #32
 8026e20:	46bd      	mov	sp, r7
 8026e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8026e26:	bf00      	nop
 8026e28:	41e00000 	.word	0x41e00000
 8026e2c:	80000001 	.word	0x80000001

08026e30 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8026e30:	b580      	push	{r7, lr}
 8026e32:	b084      	sub	sp, #16
 8026e34:	af00      	add	r7, sp, #0
 8026e36:	ed87 0b02 	vstr	d0, [r7, #8]
 8026e3a:	6078      	str	r0, [r7, #4]
 8026e3c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8026e3e:	f04f 0200 	mov.w	r2, #0
 8026e42:	4b0d      	ldr	r3, [pc, #52]	; (8026e78 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8026e44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026e48:	f7d9 fe70 	bl	8000b2c <__aeabi_dcmpgt>
 8026e4c:	4603      	mov	r3, r0
 8026e4e:	2b00      	cmp	r3, #0
 8026e50:	d101      	bne.n	8026e56 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8026e52:	f00a fa7f 	bl	8031354 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8026e56:	6839      	ldr	r1, [r7, #0]
 8026e58:	6878      	ldr	r0, [r7, #4]
 8026e5a:	ed97 0b02 	vldr	d0, [r7, #8]
 8026e5e:	f7ff ff5b 	bl	8026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8026e62:	683b      	ldr	r3, [r7, #0]
 8026e64:	681b      	ldr	r3, [r3, #0]
 8026e66:	2b00      	cmp	r3, #0
 8026e68:	da01      	bge.n	8026e6e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8026e6a:	f00a fa73 	bl	8031354 <abort>
}
 8026e6e:	bf00      	nop
 8026e70:	3710      	adds	r7, #16
 8026e72:	46bd      	mov	sp, r7
 8026e74:	bd80      	pop	{r7, pc}
 8026e76:	bf00      	nop
 8026e78:	3ff00000 	.word	0x3ff00000

08026e7c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8026e7c:	b580      	push	{r7, lr}
 8026e7e:	b082      	sub	sp, #8
 8026e80:	af00      	add	r7, sp, #0
 8026e82:	6078      	str	r0, [r7, #4]
 8026e84:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026e86:	683b      	ldr	r3, [r7, #0]
 8026e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026e8c:	687b      	ldr	r3, [r7, #4]
 8026e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e92:	f7d9 fe2d 	bl	8000af0 <__aeabi_dcmplt>
 8026e96:	4603      	mov	r3, r0
 8026e98:	2b00      	cmp	r3, #0
 8026e9a:	d001      	beq.n	8026ea0 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8026e9c:	683b      	ldr	r3, [r7, #0]
 8026e9e:	e000      	b.n	8026ea2 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8026ea0:	687b      	ldr	r3, [r7, #4]
    }
 8026ea2:	4618      	mov	r0, r3
 8026ea4:	3708      	adds	r7, #8
 8026ea6:	46bd      	mov	sp, r7
 8026ea8:	bd80      	pop	{r7, pc}
 8026eaa:	0000      	movs	r0, r0
 8026eac:	0000      	movs	r0, r0
	...

08026eb0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8026eb0:	b5b0      	push	{r4, r5, r7, lr}
 8026eb2:	b08e      	sub	sp, #56	; 0x38
 8026eb4:	af00      	add	r7, sp, #0
 8026eb6:	ed87 0b06 	vstr	d0, [r7, #24]
 8026eba:	ed87 1b04 	vstr	d1, [r7, #16]
 8026ebe:	60f8      	str	r0, [r7, #12]
 8026ec0:	60b9      	str	r1, [r7, #8]
 8026ec2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8026ec4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8026ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8026ecc:	f7d9 fb9e 	bl	800060c <__aeabi_dmul>
 8026ed0:	4602      	mov	r2, r0
 8026ed2:	460b      	mov	r3, r1
 8026ed4:	4614      	mov	r4, r2
 8026ed6:	461d      	mov	r5, r3
 8026ed8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8026edc:	68fb      	ldr	r3, [r7, #12]
 8026ede:	fa22 f303 	lsr.w	r3, r2, r3
 8026ee2:	4618      	mov	r0, r3
 8026ee4:	f7d9 fb28 	bl	8000538 <__aeabi_i2d>
 8026ee8:	4602      	mov	r2, r0
 8026eea:	460b      	mov	r3, r1
 8026eec:	4620      	mov	r0, r4
 8026eee:	4629      	mov	r1, r5
 8026ef0:	f7d9 fb8c 	bl	800060c <__aeabi_dmul>
 8026ef4:	4602      	mov	r2, r0
 8026ef6:	460b      	mov	r3, r1
 8026ef8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8026efc:	a30e      	add	r3, pc, #56	; (adr r3, 8026f38 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8026efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8026f06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8026f0a:	f107 0320 	add.w	r3, r7, #32
 8026f0e:	4611      	mov	r1, r2
 8026f10:	4618      	mov	r0, r3
 8026f12:	f7ff ffb3 	bl	8026e7c <_ZSt3minIdERKT_S2_S2_>
 8026f16:	4603      	mov	r3, r0
 8026f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8026f20:	6879      	ldr	r1, [r7, #4]
 8026f22:	68b8      	ldr	r0, [r7, #8]
 8026f24:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8026f28:	f7ff ff82 	bl	8026e30 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8026f2c:	bf00      	nop
 8026f2e:	3738      	adds	r7, #56	; 0x38
 8026f30:	46bd      	mov	sp, r7
 8026f32:	bdb0      	pop	{r4, r5, r7, pc}
 8026f34:	f3af 8000 	nop.w
 8026f38:	ffc00000 	.word	0xffc00000
 8026f3c:	41dfffff 	.word	0x41dfffff

08026f40 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8026f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f44:	b087      	sub	sp, #28
 8026f46:	af00      	add	r7, sp, #0
 8026f48:	60f8      	str	r0, [r7, #12]
 8026f4a:	60b9      	str	r1, [r7, #8]
 8026f4c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8026f4e:	2201      	movs	r2, #1
 8026f50:	68fb      	ldr	r3, [r7, #12]
 8026f52:	fa02 f303 	lsl.w	r3, r2, r3
 8026f56:	3b01      	subs	r3, #1
 8026f58:	4618      	mov	r0, r3
 8026f5a:	f7d9 faed 	bl	8000538 <__aeabi_i2d>
 8026f5e:	4682      	mov	sl, r0
 8026f60:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8026f62:	687a      	ldr	r2, [r7, #4]
 8026f64:	68fb      	ldr	r3, [r7, #12]
 8026f66:	1ad1      	subs	r1, r2, r3
 8026f68:	f04f 0201 	mov.w	r2, #1
 8026f6c:	f04f 0300 	mov.w	r3, #0
 8026f70:	f1a1 0620 	sub.w	r6, r1, #32
 8026f74:	f1c1 0020 	rsb	r0, r1, #32
 8026f78:	fa03 f901 	lsl.w	r9, r3, r1
 8026f7c:	fa02 f606 	lsl.w	r6, r2, r6
 8026f80:	ea49 0906 	orr.w	r9, r9, r6
 8026f84:	fa22 f000 	lsr.w	r0, r2, r0
 8026f88:	ea49 0900 	orr.w	r9, r9, r0
 8026f8c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8026f90:	4640      	mov	r0, r8
 8026f92:	4649      	mov	r1, r9
 8026f94:	f7d9 fb0c 	bl	80005b0 <__aeabi_l2d>
 8026f98:	4602      	mov	r2, r0
 8026f9a:	460b      	mov	r3, r1
 8026f9c:	4650      	mov	r0, sl
 8026f9e:	4659      	mov	r1, fp
 8026fa0:	f7d9 fb34 	bl	800060c <__aeabi_dmul>
 8026fa4:	4602      	mov	r2, r0
 8026fa6:	460b      	mov	r3, r1
 8026fa8:	4690      	mov	r8, r2
 8026faa:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8026fac:	f04f 0201 	mov.w	r2, #1
 8026fb0:	f04f 0300 	mov.w	r3, #0
 8026fb4:	68b9      	ldr	r1, [r7, #8]
 8026fb6:	f1a1 0620 	sub.w	r6, r1, #32
 8026fba:	f1c1 0020 	rsb	r0, r1, #32
 8026fbe:	fa03 f501 	lsl.w	r5, r3, r1
 8026fc2:	fa02 f606 	lsl.w	r6, r2, r6
 8026fc6:	4335      	orrs	r5, r6
 8026fc8:	fa22 f000 	lsr.w	r0, r2, r0
 8026fcc:	4305      	orrs	r5, r0
 8026fce:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8026fd2:	4620      	mov	r0, r4
 8026fd4:	4629      	mov	r1, r5
 8026fd6:	f7d9 faeb 	bl	80005b0 <__aeabi_l2d>
 8026fda:	4602      	mov	r2, r0
 8026fdc:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8026fde:	4640      	mov	r0, r8
 8026fe0:	4649      	mov	r1, r9
 8026fe2:	f7d9 fc3d 	bl	8000860 <__aeabi_ddiv>
 8026fe6:	4602      	mov	r2, r0
 8026fe8:	460b      	mov	r3, r1
 8026fea:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8026fee:	ed97 0b04 	vldr	d0, [r7, #16]
 8026ff2:	f007 fe89 	bl	802ed08 <floor>
 8026ff6:	ec53 2b10 	vmov	r2, r3, d0
 8026ffa:	4610      	mov	r0, r2
 8026ffc:	4619      	mov	r1, r3
 8026ffe:	f7d9 fdb5 	bl	8000b6c <__aeabi_d2iz>
 8027002:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8027004:	4618      	mov	r0, r3
 8027006:	371c      	adds	r7, #28
 8027008:	46bd      	mov	sp, r7
 802700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802700e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 802700e:	b480      	push	{r7}
 8027010:	b083      	sub	sp, #12
 8027012:	af00      	add	r7, sp, #0
 8027014:	6078      	str	r0, [r7, #4]
 8027016:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8027018:	683b      	ldr	r3, [r7, #0]
 802701a:	ed93 7a00 	vldr	s14, [r3]
 802701e:	687b      	ldr	r3, [r7, #4]
 8027020:	edd3 7a00 	vldr	s15, [r3]
 8027024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802702c:	d501      	bpl.n	8027032 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 802702e:	683b      	ldr	r3, [r7, #0]
 8027030:	e000      	b.n	8027034 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8027032:	687b      	ldr	r3, [r7, #4]
    }
 8027034:	4618      	mov	r0, r3
 8027036:	370c      	adds	r7, #12
 8027038:	46bd      	mov	sp, r7
 802703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802703e:	4770      	bx	lr

08027040 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8027040:	b580      	push	{r7, lr}
 8027042:	b082      	sub	sp, #8
 8027044:	af00      	add	r7, sp, #0
 8027046:	ed87 0b00 	vstr	d0, [r7]
 802704a:	ed97 0b00 	vldr	d0, [r7]
 802704e:	f007 ff13 	bl	802ee78 <round>
 8027052:	eeb0 7a40 	vmov.f32	s14, s0
 8027056:	eef0 7a60 	vmov.f32	s15, s1
 802705a:	eeb0 0a47 	vmov.f32	s0, s14
 802705e:	eef0 0a67 	vmov.f32	s1, s15
 8027062:	3708      	adds	r7, #8
 8027064:	46bd      	mov	sp, r7
 8027066:	bd80      	pop	{r7, pc}

08027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8027068:	b580      	push	{r7, lr}
 802706a:	b082      	sub	sp, #8
 802706c:	af00      	add	r7, sp, #0
 802706e:	ed87 0a01 	vstr	s0, [r7, #4]
 8027072:	ed97 0a01 	vldr	s0, [r7, #4]
 8027076:	f7da fbd0 	bl	800181a <_ZSt5roundf>
 802707a:	eef0 7a40 	vmov.f32	s15, s0
 802707e:	eeb0 0a67 	vmov.f32	s0, s15
 8027082:	3708      	adds	r7, #8
 8027084:	46bd      	mov	sp, r7
 8027086:	bd80      	pop	{r7, pc}

08027088 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8027088:	b480      	push	{r7}
 802708a:	af00      	add	r7, sp, #0
 802708c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8027090:	4618      	mov	r0, r3
 8027092:	46bd      	mov	sp, r7
 8027094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027098:	4770      	bx	lr

0802709a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 802709a:	b480      	push	{r7}
 802709c:	af00      	add	r7, sp, #0
 802709e:	237f      	movs	r3, #127	; 0x7f
 80270a0:	4618      	mov	r0, r3
 80270a2:	46bd      	mov	sp, r7
 80270a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270a8:	4770      	bx	lr

080270aa <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 80270aa:	b480      	push	{r7}
 80270ac:	af00      	add	r7, sp, #0
 80270ae:	2300      	movs	r3, #0
 80270b0:	4618      	mov	r0, r3
 80270b2:	46bd      	mov	sp, r7
 80270b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270b8:	4770      	bx	lr

080270ba <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80270ba:	b480      	push	{r7}
 80270bc:	af00      	add	r7, sp, #0
 80270be:	23ff      	movs	r3, #255	; 0xff
 80270c0:	4618      	mov	r0, r3
 80270c2:	46bd      	mov	sp, r7
 80270c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270c8:	4770      	bx	lr
	...

080270cc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80270cc:	b480      	push	{r7}
 80270ce:	af00      	add	r7, sp, #0
 80270d0:	4b02      	ldr	r3, [pc, #8]	; (80270dc <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80270d2:	4618      	mov	r0, r3
 80270d4:	46bd      	mov	sp, r7
 80270d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270da:	4770      	bx	lr
 80270dc:	ffff8000 	.word	0xffff8000

080270e0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80270e0:	b480      	push	{r7}
 80270e2:	af00      	add	r7, sp, #0
 80270e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80270e8:	4618      	mov	r0, r3
 80270ea:	46bd      	mov	sp, r7
 80270ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270f0:	4770      	bx	lr

080270f2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80270f2:	b480      	push	{r7}
 80270f4:	b083      	sub	sp, #12
 80270f6:	af00      	add	r7, sp, #0
 80270f8:	6078      	str	r0, [r7, #4]
 80270fa:	687b      	ldr	r3, [r7, #4]
 80270fc:	689b      	ldr	r3, [r3, #8]
 80270fe:	681b      	ldr	r3, [r3, #0]
 8027100:	4618      	mov	r0, r3
 8027102:	370c      	adds	r7, #12
 8027104:	46bd      	mov	sp, r7
 8027106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802710a:	4770      	bx	lr

0802710c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 802710c:	b480      	push	{r7}
 802710e:	b083      	sub	sp, #12
 8027110:	af00      	add	r7, sp, #0
 8027112:	6078      	str	r0, [r7, #4]
 8027114:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 8027116:	687b      	ldr	r3, [r7, #4]
 8027118:	689a      	ldr	r2, [r3, #8]
 802711a:	683b      	ldr	r3, [r7, #0]
 802711c:	009b      	lsls	r3, r3, #2
 802711e:	4413      	add	r3, r2
 8027120:	685b      	ldr	r3, [r3, #4]
}
 8027122:	4618      	mov	r0, r3
 8027124:	370c      	adds	r7, #12
 8027126:	46bd      	mov	sp, r7
 8027128:	f85d 7b04 	ldr.w	r7, [sp], #4
 802712c:	4770      	bx	lr

0802712e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 802712e:	b4b0      	push	{r4, r5, r7}
 8027130:	b087      	sub	sp, #28
 8027132:	af00      	add	r7, sp, #0
 8027134:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 8027136:	f04f 0001 	mov.w	r0, #1
 802713a:	f04f 0100 	mov.w	r1, #0
 802713e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8027142:	2100      	movs	r1, #0
 8027144:	60f9      	str	r1, [r7, #12]
 8027146:	6879      	ldr	r1, [r7, #4]
 8027148:	6809      	ldr	r1, [r1, #0]
 802714a:	68f8      	ldr	r0, [r7, #12]
 802714c:	4288      	cmp	r0, r1
 802714e:	da1b      	bge.n	8027188 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 8027150:	6878      	ldr	r0, [r7, #4]
 8027152:	68f9      	ldr	r1, [r7, #12]
 8027154:	0089      	lsls	r1, r1, #2
 8027156:	4401      	add	r1, r0
 8027158:	6849      	ldr	r1, [r1, #4]
 802715a:	17c8      	asrs	r0, r1, #31
 802715c:	460c      	mov	r4, r1
 802715e:	4605      	mov	r5, r0
 8027160:	6979      	ldr	r1, [r7, #20]
 8027162:	fb04 f001 	mul.w	r0, r4, r1
 8027166:	6939      	ldr	r1, [r7, #16]
 8027168:	fb05 f101 	mul.w	r1, r5, r1
 802716c:	4401      	add	r1, r0
 802716e:	6938      	ldr	r0, [r7, #16]
 8027170:	fba0 2304 	umull	r2, r3, r0, r4
 8027174:	4419      	add	r1, r3
 8027176:	460b      	mov	r3, r1
 8027178:	e9c7 2304 	strd	r2, r3, [r7, #16]
 802717c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8027180:	68f9      	ldr	r1, [r7, #12]
 8027182:	3101      	adds	r1, #1
 8027184:	60f9      	str	r1, [r7, #12]
 8027186:	e7de      	b.n	8027146 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 8027188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 802718c:	4610      	mov	r0, r2
 802718e:	4619      	mov	r1, r3
 8027190:	371c      	adds	r7, #28
 8027192:	46bd      	mov	sp, r7
 8027194:	bcb0      	pop	{r4, r5, r7}
 8027196:	4770      	bx	lr

08027198 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 8027198:	b580      	push	{r7, lr}
 802719a:	b082      	sub	sp, #8
 802719c:	af00      	add	r7, sp, #0
 802719e:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 80271a0:	687b      	ldr	r3, [r7, #4]
 80271a2:	689b      	ldr	r3, [r3, #8]
 80271a4:	4618      	mov	r0, r3
 80271a6:	f7ff ffc2 	bl	802712e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 80271aa:	4602      	mov	r2, r0
 80271ac:	460b      	mov	r3, r1
}
 80271ae:	4610      	mov	r0, r2
 80271b0:	4619      	mov	r1, r3
 80271b2:	3708      	adds	r7, #8
 80271b4:	46bd      	mov	sp, r7
 80271b6:	bd80      	pop	{r7, pc}

080271b8 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80271b8:	b480      	push	{r7}
 80271ba:	b083      	sub	sp, #12
 80271bc:	af00      	add	r7, sp, #0
 80271be:	ed87 0b00 	vstr	d0, [r7]
 80271c2:	683a      	ldr	r2, [r7, #0]
 80271c4:	6879      	ldr	r1, [r7, #4]
 80271c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80271ca:	ec43 2b17 	vmov	d7, r2, r3
 80271ce:	eeb0 0a47 	vmov.f32	s0, s14
 80271d2:	eef0 0a67 	vmov.f32	s1, s15
 80271d6:	370c      	adds	r7, #12
 80271d8:	46bd      	mov	sp, r7
 80271da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271de:	4770      	bx	lr

080271e0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80271e0:	b580      	push	{r7, lr}
 80271e2:	b082      	sub	sp, #8
 80271e4:	af00      	add	r7, sp, #0
 80271e6:	6078      	str	r0, [r7, #4]
 80271e8:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	689b      	ldr	r3, [r3, #8]
 80271ee:	2b00      	cmp	r3, #0
 80271f0:	d005      	beq.n	80271fe <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	689a      	ldr	r2, [r3, #8]
 80271f6:	683b      	ldr	r3, [r7, #0]
 80271f8:	019b      	lsls	r3, r3, #6
 80271fa:	4413      	add	r3, r2
 80271fc:	e006      	b.n	802720c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 80271fe:	687b      	ldr	r3, [r7, #4]
 8027200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027202:	6839      	ldr	r1, [r7, #0]
 8027204:	6878      	ldr	r0, [r7, #4]
 8027206:	4798      	blx	r3
 8027208:	4603      	mov	r3, r0
 802720a:	bf00      	nop
  }
}
 802720c:	4618      	mov	r0, r3
 802720e:	3708      	adds	r7, #8
 8027210:	46bd      	mov	sp, r7
 8027212:	bd80      	pop	{r7, pc}

08027214 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8027214:	b480      	push	{r7}
 8027216:	b087      	sub	sp, #28
 8027218:	af00      	add	r7, sp, #0
 802721a:	60f8      	str	r0, [r7, #12]
 802721c:	60b9      	str	r1, [r7, #8]
 802721e:	607a      	str	r2, [r7, #4]
 8027220:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8027222:	68bb      	ldr	r3, [r7, #8]
 8027224:	2b00      	cmp	r3, #0
 8027226:	db0f      	blt.n	8027248 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8027228:	68ba      	ldr	r2, [r7, #8]
 802722a:	687b      	ldr	r3, [r7, #4]
 802722c:	429a      	cmp	r2, r3
 802722e:	da0b      	bge.n	8027248 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8027230:	68bb      	ldr	r3, [r7, #8]
 8027232:	009b      	lsls	r3, r3, #2
 8027234:	683a      	ldr	r2, [r7, #0]
 8027236:	4413      	add	r3, r2
 8027238:	681b      	ldr	r3, [r3, #0]
 802723a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 802723c:	697b      	ldr	r3, [r7, #20]
 802723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027242:	d001      	beq.n	8027248 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8027244:	697b      	ldr	r3, [r7, #20]
 8027246:	e001      	b.n	802724c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8027248:	f04f 33ff 	mov.w	r3, #4294967295
}
 802724c:	4618      	mov	r0, r3
 802724e:	371c      	adds	r7, #28
 8027250:	46bd      	mov	sp, r7
 8027252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027256:	4770      	bx	lr

08027258 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8027258:	b580      	push	{r7, lr}
 802725a:	b086      	sub	sp, #24
 802725c:	af00      	add	r7, sp, #0
 802725e:	60f8      	str	r0, [r7, #12]
 8027260:	60b9      	str	r1, [r7, #8]
 8027262:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8027264:	68bb      	ldr	r3, [r7, #8]
 8027266:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8027268:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 802726a:	68bb      	ldr	r3, [r7, #8]
 802726c:	681b      	ldr	r3, [r3, #0]
 802726e:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8027270:	6879      	ldr	r1, [r7, #4]
 8027272:	68f8      	ldr	r0, [r7, #12]
 8027274:	f7ff ffce 	bl	8027214 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8027278:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 802727a:	697b      	ldr	r3, [r7, #20]
 802727c:	2b00      	cmp	r3, #0
 802727e:	da01      	bge.n	8027284 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8027280:	2300      	movs	r3, #0
 8027282:	e005      	b.n	8027290 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8027284:	6979      	ldr	r1, [r7, #20]
 8027286:	68f8      	ldr	r0, [r7, #12]
 8027288:	f7ff ffaa 	bl	80271e0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 802728c:	4603      	mov	r3, r0
 802728e:	bf00      	nop
}
 8027290:	4618      	mov	r0, r3
 8027292:	3718      	adds	r7, #24
 8027294:	46bd      	mov	sp, r7
 8027296:	bd80      	pop	{r7, pc}

08027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8027298:	b580      	push	{r7, lr}
 802729a:	b084      	sub	sp, #16
 802729c:	af00      	add	r7, sp, #0
 802729e:	60f8      	str	r0, [r7, #12]
 80272a0:	60b9      	str	r1, [r7, #8]
 80272a2:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 80272a4:	687a      	ldr	r2, [r7, #4]
 80272a6:	68b9      	ldr	r1, [r7, #8]
 80272a8:	68f8      	ldr	r0, [r7, #12]
 80272aa:	f7ff ffd5 	bl	8027258 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 80272ae:	4603      	mov	r3, r0
}
 80272b0:	4618      	mov	r0, r3
 80272b2:	3710      	adds	r7, #16
 80272b4:	46bd      	mov	sp, r7
 80272b6:	bd80      	pop	{r7, pc}

080272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 80272b8:	b580      	push	{r7, lr}
 80272ba:	b086      	sub	sp, #24
 80272bc:	af00      	add	r7, sp, #0
 80272be:	60f8      	str	r0, [r7, #12]
 80272c0:	60b9      	str	r1, [r7, #8]
 80272c2:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80272c4:	68bb      	ldr	r3, [r7, #8]
 80272c6:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80272c8:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80272ca:	68bb      	ldr	r3, [r7, #8]
 80272cc:	685b      	ldr	r3, [r3, #4]
 80272ce:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80272d0:	6879      	ldr	r1, [r7, #4]
 80272d2:	68f8      	ldr	r0, [r7, #12]
 80272d4:	f7ff ff9e 	bl	8027214 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80272d8:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80272da:	697b      	ldr	r3, [r7, #20]
 80272dc:	2b00      	cmp	r3, #0
 80272de:	da01      	bge.n	80272e4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80272e0:	2300      	movs	r3, #0
 80272e2:	e005      	b.n	80272f0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80272e4:	6979      	ldr	r1, [r7, #20]
 80272e6:	68f8      	ldr	r0, [r7, #12]
 80272e8:	f7ff ff7a 	bl	80271e0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80272ec:	4603      	mov	r3, r0
 80272ee:	bf00      	nop
}
 80272f0:	4618      	mov	r0, r3
 80272f2:	3718      	adds	r7, #24
 80272f4:	46bd      	mov	sp, r7
 80272f6:	bd80      	pop	{r7, pc}

080272f8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80272f8:	b580      	push	{r7, lr}
 80272fa:	b084      	sub	sp, #16
 80272fc:	af00      	add	r7, sp, #0
 80272fe:	60f8      	str	r0, [r7, #12]
 8027300:	60b9      	str	r1, [r7, #8]
 8027302:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8027304:	687a      	ldr	r2, [r7, #4]
 8027306:	68b9      	ldr	r1, [r7, #8]
 8027308:	68f8      	ldr	r0, [r7, #12]
 802730a:	f7ff ffc5 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802730e:	4603      	mov	r3, r0
}
 8027310:	4618      	mov	r0, r3
 8027312:	3710      	adds	r7, #16
 8027314:	46bd      	mov	sp, r7
 8027316:	bd80      	pop	{r7, pc}

08027318 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8027318:	b5b0      	push	{r4, r5, r7, lr}
 802731a:	b09c      	sub	sp, #112	; 0x70
 802731c:	af04      	add	r7, sp, #16
 802731e:	60f8      	str	r0, [r7, #12]
 8027320:	60b9      	str	r1, [r7, #8]
 8027322:	607a      	str	r2, [r7, #4]
 8027324:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8027326:	68bb      	ldr	r3, [r7, #8]
 8027328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802732c:	2b01      	cmp	r3, #1
 802732e:	d013      	beq.n	8027358 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 8027330:	68fb      	ldr	r3, [r7, #12]
 8027332:	695c      	ldr	r4, [r3, #20]
 8027334:	68bb      	ldr	r3, [r7, #8]
 8027336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802733a:	461a      	mov	r2, r3
 802733c:	2301      	movs	r3, #1
 802733e:	9303      	str	r3, [sp, #12]
 8027340:	9202      	str	r2, [sp, #8]
 8027342:	4b98      	ldr	r3, [pc, #608]	; (80275a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 8027344:	9301      	str	r3, [sp, #4]
 8027346:	4b98      	ldr	r3, [pc, #608]	; (80275a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 8027348:	9300      	str	r3, [sp, #0]
 802734a:	23e0      	movs	r3, #224	; 0xe0
 802734c:	4a97      	ldr	r2, [pc, #604]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 802734e:	4998      	ldr	r1, [pc, #608]	; (80275b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8027350:	68f8      	ldr	r0, [r7, #12]
 8027352:	47a0      	blx	r4
 8027354:	2301      	movs	r3, #1
 8027356:	e173      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8027358:	687b      	ldr	r3, [r7, #4]
 802735a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802735e:	2b01      	cmp	r3, #1
 8027360:	d013      	beq.n	802738a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 8027362:	68fb      	ldr	r3, [r7, #12]
 8027364:	695c      	ldr	r4, [r3, #20]
 8027366:	687b      	ldr	r3, [r7, #4]
 8027368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802736c:	461a      	mov	r2, r3
 802736e:	2301      	movs	r3, #1
 8027370:	9303      	str	r3, [sp, #12]
 8027372:	9202      	str	r2, [sp, #8]
 8027374:	4b8b      	ldr	r3, [pc, #556]	; (80275a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 8027376:	9301      	str	r3, [sp, #4]
 8027378:	4b8e      	ldr	r3, [pc, #568]	; (80275b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 802737a:	9300      	str	r3, [sp, #0]
 802737c:	23e2      	movs	r3, #226	; 0xe2
 802737e:	4a8b      	ldr	r2, [pc, #556]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8027380:	498b      	ldr	r1, [pc, #556]	; (80275b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8027382:	68f8      	ldr	r0, [r7, #12]
 8027384:	47a0      	blx	r4
 8027386:	2301      	movs	r3, #1
 8027388:	e15a      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 802738a:	687b      	ldr	r3, [r7, #4]
 802738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802738e:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 8027390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027392:	2b00      	cmp	r3, #0
 8027394:	d10a      	bne.n	80273ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 8027396:	68fb      	ldr	r3, [r7, #12]
 8027398:	695c      	ldr	r4, [r3, #20]
 802739a:	4b87      	ldr	r3, [pc, #540]	; (80275b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 802739c:	9300      	str	r3, [sp, #0]
 802739e:	23ed      	movs	r3, #237	; 0xed
 80273a0:	4a82      	ldr	r2, [pc, #520]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80273a2:	4986      	ldr	r1, [pc, #536]	; (80275bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80273a4:	68f8      	ldr	r0, [r7, #12]
 80273a6:	47a0      	blx	r4
 80273a8:	2301      	movs	r3, #1
 80273aa:	e149      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 80273ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80273ae:	681b      	ldr	r3, [r3, #0]
 80273b0:	2b00      	cmp	r3, #0
 80273b2:	d10a      	bne.n	80273ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 80273b4:	68fb      	ldr	r3, [r7, #12]
 80273b6:	695c      	ldr	r4, [r3, #20]
 80273b8:	4b81      	ldr	r3, [pc, #516]	; (80275c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 80273ba:	9300      	str	r3, [sp, #0]
 80273bc:	23ee      	movs	r3, #238	; 0xee
 80273be:	4a7b      	ldr	r2, [pc, #492]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80273c0:	497e      	ldr	r1, [pc, #504]	; (80275bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80273c2:	68f8      	ldr	r0, [r7, #12]
 80273c4:	47a0      	blx	r4
 80273c6:	2301      	movs	r3, #1
 80273c8:	e13a      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 80273ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80273cc:	681b      	ldr	r3, [r3, #0]
 80273ce:	681b      	ldr	r3, [r3, #0]
 80273d0:	2b01      	cmp	r3, #1
 80273d2:	bfcc      	ite	gt
 80273d4:	2301      	movgt	r3, #1
 80273d6:	2300      	movle	r3, #0
 80273d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 80273dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80273e0:	2b00      	cmp	r3, #0
 80273e2:	d067      	beq.n	80274b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 80273e4:	68bb      	ldr	r3, [r7, #8]
 80273e6:	781b      	ldrb	r3, [r3, #0]
 80273e8:	2b09      	cmp	r3, #9
 80273ea:	d00e      	beq.n	802740a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80273ec:	68bb      	ldr	r3, [r7, #8]
 80273ee:	781b      	ldrb	r3, [r3, #0]
 80273f0:	2b07      	cmp	r3, #7
 80273f2:	d00a      	beq.n	802740a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80273f4:	68fb      	ldr	r3, [r7, #12]
 80273f6:	695c      	ldr	r4, [r3, #20]
 80273f8:	4b72      	ldr	r3, [pc, #456]	; (80275c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 80273fa:	9300      	str	r3, [sp, #0]
 80273fc:	23f2      	movs	r3, #242	; 0xf2
 80273fe:	4a6b      	ldr	r2, [pc, #428]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8027400:	496e      	ldr	r1, [pc, #440]	; (80275bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 8027402:	68f8      	ldr	r0, [r7, #12]
 8027404:	47a0      	blx	r4
 8027406:	2301      	movs	r3, #1
 8027408:	e11a      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 802740a:	687b      	ldr	r3, [r7, #4]
 802740c:	781b      	ldrb	r3, [r3, #0]
 802740e:	2b09      	cmp	r3, #9
 8027410:	d012      	beq.n	8027438 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 8027412:	68fb      	ldr	r3, [r7, #12]
 8027414:	695c      	ldr	r4, [r3, #20]
 8027416:	687b      	ldr	r3, [r7, #4]
 8027418:	781b      	ldrb	r3, [r3, #0]
 802741a:	461a      	mov	r2, r3
 802741c:	2309      	movs	r3, #9
 802741e:	9303      	str	r3, [sp, #12]
 8027420:	9202      	str	r2, [sp, #8]
 8027422:	4b69      	ldr	r3, [pc, #420]	; (80275c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 8027424:	9301      	str	r3, [sp, #4]
 8027426:	4b69      	ldr	r3, [pc, #420]	; (80275cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 8027428:	9300      	str	r3, [sp, #0]
 802742a:	23f4      	movs	r3, #244	; 0xf4
 802742c:	4a5f      	ldr	r2, [pc, #380]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 802742e:	4960      	ldr	r1, [pc, #384]	; (80275b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8027430:	68f8      	ldr	r0, [r7, #12]
 8027432:	47a0      	blx	r4
 8027434:	2301      	movs	r3, #1
 8027436:	e103      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8027438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802743a:	681b      	ldr	r3, [r3, #0]
 802743c:	681b      	ldr	r3, [r3, #0]
 802743e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027442:	429a      	cmp	r2, r3
 8027444:	d013      	beq.n	802746e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 8027446:	68fb      	ldr	r3, [r7, #12]
 8027448:	695c      	ldr	r4, [r3, #20]
 802744a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802744c:	681b      	ldr	r3, [r3, #0]
 802744e:	681b      	ldr	r3, [r3, #0]
 8027450:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027454:	9203      	str	r2, [sp, #12]
 8027456:	9302      	str	r3, [sp, #8]
 8027458:	4b5d      	ldr	r3, [pc, #372]	; (80275d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 802745a:	9301      	str	r3, [sp, #4]
 802745c:	4b5d      	ldr	r3, [pc, #372]	; (80275d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 802745e:	9300      	str	r3, [sp, #0]
 8027460:	23f5      	movs	r3, #245	; 0xf5
 8027462:	4a52      	ldr	r2, [pc, #328]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8027464:	4952      	ldr	r1, [pc, #328]	; (80275b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8027466:	68f8      	ldr	r0, [r7, #12]
 8027468:	47a0      	blx	r4
 802746a:	2301      	movs	r3, #1
 802746c:	e0e8      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 802746e:	687b      	ldr	r3, [r7, #4]
 8027470:	689a      	ldr	r2, [r3, #8]
 8027472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027474:	689b      	ldr	r3, [r3, #8]
 8027476:	009b      	lsls	r3, r3, #2
 8027478:	4413      	add	r3, r2
 802747a:	685b      	ldr	r3, [r3, #4]
 802747c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027480:	429a      	cmp	r2, r3
 8027482:	d017      	beq.n	80274b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 8027484:	68fb      	ldr	r3, [r7, #12]
 8027486:	695c      	ldr	r4, [r3, #20]
 8027488:	687b      	ldr	r3, [r7, #4]
 802748a:	689a      	ldr	r2, [r3, #8]
 802748c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802748e:	689b      	ldr	r3, [r3, #8]
 8027490:	009b      	lsls	r3, r3, #2
 8027492:	4413      	add	r3, r2
 8027494:	685b      	ldr	r3, [r3, #4]
 8027496:	9303      	str	r3, [sp, #12]
 8027498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802749c:	9302      	str	r3, [sp, #8]
 802749e:	4b4e      	ldr	r3, [pc, #312]	; (80275d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 80274a0:	9301      	str	r3, [sp, #4]
 80274a2:	4b4b      	ldr	r3, [pc, #300]	; (80275d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 80274a4:	9300      	str	r3, [sp, #0]
 80274a6:	23f6      	movs	r3, #246	; 0xf6
 80274a8:	4a40      	ldr	r2, [pc, #256]	; (80275ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80274aa:	4941      	ldr	r1, [pc, #260]	; (80275b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80274ac:	68f8      	ldr	r0, [r7, #12]
 80274ae:	47a0      	blx	r4
 80274b0:	2301      	movs	r3, #1
 80274b2:	e0c5      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 80274b4:	68bb      	ldr	r3, [r7, #8]
 80274b6:	68db      	ldr	r3, [r3, #12]
 80274b8:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 80274ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80274bc:	68db      	ldr	r3, [r3, #12]
 80274be:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 80274c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80274c2:	681b      	ldr	r3, [r3, #0]
 80274c4:	3304      	adds	r3, #4
 80274c6:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 80274c8:	2300      	movs	r3, #0
 80274ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80274cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80274ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80274d2:	429a      	cmp	r2, r3
 80274d4:	da47      	bge.n	8027566 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 80274d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80274da:	2b00      	cmp	r3, #0
 80274dc:	d005      	beq.n	80274ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 80274de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80274e0:	009b      	lsls	r3, r3, #2
 80274e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80274e4:	4413      	add	r3, r2
 80274e6:	681b      	ldr	r3, [r3, #0]
 80274e8:	e001      	b.n	80274ee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 80274ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80274ec:	681b      	ldr	r3, [r3, #0]
 80274ee:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 80274f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80274f2:	f7d9 f833 	bl	800055c <__aeabi_f2d>
 80274f6:	4602      	mov	r2, r0
 80274f8:	460b      	mov	r3, r1
 80274fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 80274fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8027500:	f7d9 f82c 	bl	800055c <__aeabi_f2d>
 8027504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8027508:	f7d9 f880 	bl	800060c <__aeabi_dmul>
 802750c:	4602      	mov	r2, r0
 802750e:	460b      	mov	r3, r1
 8027510:	4614      	mov	r4, r2
 8027512:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 8027514:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8027516:	f7d9 f821 	bl	800055c <__aeabi_f2d>
 802751a:	4602      	mov	r2, r0
 802751c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 802751e:	4620      	mov	r0, r4
 8027520:	4629      	mov	r1, r5
 8027522:	f7d9 f99d 	bl	8000860 <__aeabi_ddiv>
 8027526:	4602      	mov	r2, r0
 8027528:	460b      	mov	r3, r1
 802752a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 802752e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8027532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8027536:	4611      	mov	r1, r2
 8027538:	4618      	mov	r0, r3
 802753a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 802753e:	f7ff fbeb 	bl	8026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 8027542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027544:	009b      	lsls	r3, r3, #2
 8027546:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802754a:	4413      	add	r3, r2
 802754c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802754e:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8027550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027552:	009b      	lsls	r3, r3, #2
 8027554:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027558:	4413      	add	r3, r2
 802755a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802755c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 802755e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027560:	3301      	adds	r3, #1
 8027562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8027564:	e7b2      	b.n	80274cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 8027566:	68bb      	ldr	r3, [r7, #8]
 8027568:	781b      	ldrb	r3, [r3, #0]
 802756a:	2b03      	cmp	r3, #3
 802756c:	d146      	bne.n	80275fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 802756e:	f04f 0200 	mov.w	r2, #0
 8027572:	f04f 0300 	mov.w	r3, #0
 8027576:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 802757a:	f107 0318 	add.w	r3, r7, #24
 802757e:	9301      	str	r3, [sp, #4]
 8027580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027582:	9300      	str	r3, [sp, #0]
 8027584:	683b      	ldr	r3, [r7, #0]
 8027586:	687a      	ldr	r2, [r7, #4]
 8027588:	68b9      	ldr	r1, [r7, #8]
 802758a:	68f8      	ldr	r0, [r7, #12]
 802758c:	f000 f85c 	bl	8027648 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8027590:	4603      	mov	r3, r0
 8027592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8027596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802759a:	2b00      	cmp	r3, #0
 802759c:	d01e      	beq.n	80275dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 802759e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80275a2:	e04d      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 80275a4:	08033a18 	.word	0x08033a18
 80275a8:	08033a34 	.word	0x08033a34
 80275ac:	08033970 	.word	0x08033970
 80275b0:	080339fc 	.word	0x080339fc
 80275b4:	08033a50 	.word	0x08033a50
 80275b8:	08033a84 	.word	0x08033a84
 80275bc:	08033a6c 	.word	0x08033a6c
 80275c0:	08033a98 	.word	0x08033a98
 80275c4:	08033ab4 	.word	0x08033ab4
 80275c8:	08033af0 	.word	0x08033af0
 80275cc:	08033afc 	.word	0x08033afc
 80275d0:	08033b0c 	.word	0x08033b0c
 80275d4:	08033b1c 	.word	0x08033b1c
 80275d8:	08033b40 	.word	0x08033b40
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 80275dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80275e0:	f107 0314 	add.w	r3, r7, #20
 80275e4:	4619      	mov	r1, r3
 80275e6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80275e8:	eeb0 0a47 	vmov.f32	s0, s14
 80275ec:	eef0 0a67 	vmov.f32	s1, s15
 80275f0:	f7ff fb92 	bl	8026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 80275f4:	697b      	ldr	r3, [r7, #20]
 80275f6:	425a      	negs	r2, r3
 80275f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80275fa:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80275fc:	68bb      	ldr	r3, [r7, #8]
 80275fe:	781b      	ldrb	r3, [r3, #0]
 8027600:	2b09      	cmp	r3, #9
 8027602:	d007      	beq.n	8027614 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 8027604:	68bb      	ldr	r3, [r7, #8]
 8027606:	781b      	ldrb	r3, [r3, #0]
 8027608:	2b03      	cmp	r3, #3
 802760a:	d003      	beq.n	8027614 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 802760c:	68bb      	ldr	r3, [r7, #8]
 802760e:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8027610:	2b07      	cmp	r3, #7
 8027612:	d114      	bne.n	802763e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8027614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027616:	7819      	ldrb	r1, [r3, #0]
 8027618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802761c:	9300      	str	r3, [sp, #0]
 802761e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8027622:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8027624:	68f8      	ldr	r0, [r7, #12]
 8027626:	f000 f99b 	bl	8027960 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802762a:	4603      	mov	r3, r0
 802762c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8027630:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8027634:	2b00      	cmp	r3, #0
 8027636:	d002      	beq.n	802763e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 8027638:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802763c:	e000      	b.n	8027640 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 802763e:	2300      	movs	r3, #0
}
 8027640:	4618      	mov	r0, r3
 8027642:	3760      	adds	r7, #96	; 0x60
 8027644:	46bd      	mov	sp, r7
 8027646:	bdb0      	pop	{r4, r5, r7, pc}

08027648 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8027648:	b5b0      	push	{r4, r5, r7, lr}
 802764a:	b08e      	sub	sp, #56	; 0x38
 802764c:	af02      	add	r7, sp, #8
 802764e:	60f8      	str	r0, [r7, #12]
 8027650:	60b9      	str	r1, [r7, #8]
 8027652:	607a      	str	r2, [r7, #4]
 8027654:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8027656:	68bb      	ldr	r3, [r7, #8]
 8027658:	68db      	ldr	r3, [r3, #12]
 802765a:	4618      	mov	r0, r3
 802765c:	f7d8 ff7e 	bl	800055c <__aeabi_f2d>
 8027660:	4604      	mov	r4, r0
 8027662:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8027664:	687b      	ldr	r3, [r7, #4]
 8027666:	68db      	ldr	r3, [r3, #12]
 8027668:	4618      	mov	r0, r3
 802766a:	f7d8 ff77 	bl	800055c <__aeabi_f2d>
 802766e:	4602      	mov	r2, r0
 8027670:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8027672:	4620      	mov	r0, r4
 8027674:	4629      	mov	r1, r5
 8027676:	f7d8 ffc9 	bl	800060c <__aeabi_dmul>
 802767a:	4602      	mov	r2, r0
 802767c:	460b      	mov	r3, r1
 802767e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8027682:	683b      	ldr	r3, [r7, #0]
 8027684:	2b00      	cmp	r3, #0
 8027686:	d04b      	beq.n	8027720 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8027688:	683b      	ldr	r3, [r7, #0]
 802768a:	68db      	ldr	r3, [r3, #12]
 802768c:	4618      	mov	r0, r3
 802768e:	f7d8 ff65 	bl	800055c <__aeabi_f2d>
 8027692:	4602      	mov	r2, r0
 8027694:	460b      	mov	r3, r1
 8027696:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 802769a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802769e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80276a2:	f7d8 fdfb 	bl	800029c <__aeabi_dsub>
 80276a6:	4602      	mov	r2, r0
 80276a8:	460b      	mov	r3, r1
 80276aa:	ec43 2b17 	vmov	d7, r2, r3
 80276ae:	eeb0 0a47 	vmov.f32	s0, s14
 80276b2:	eef0 0a67 	vmov.f32	s1, s15
 80276b6:	f7ff fd7f 	bl	80271b8 <_ZSt3absd>
 80276ba:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80276be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80276c0:	68db      	ldr	r3, [r3, #12]
 80276c2:	4618      	mov	r0, r3
 80276c4:	f7d8 ff4a 	bl	800055c <__aeabi_f2d>
 80276c8:	4602      	mov	r2, r0
 80276ca:	460b      	mov	r3, r1
 80276cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80276d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80276d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80276d8:	f7d9 f8c2 	bl	8000860 <__aeabi_ddiv>
 80276dc:	4602      	mov	r2, r0
 80276de:	460b      	mov	r3, r1
 80276e0:	4610      	mov	r0, r2
 80276e2:	4619      	mov	r1, r3
 80276e4:	2301      	movs	r3, #1
 80276e6:	461c      	mov	r4, r3
 80276e8:	a318      	add	r3, pc, #96	; (adr r3, 802774c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80276ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80276ee:	f7d9 fa09 	bl	8000b04 <__aeabi_dcmple>
 80276f2:	4603      	mov	r3, r0
 80276f4:	2b00      	cmp	r3, #0
 80276f6:	d101      	bne.n	80276fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80276f8:	2300      	movs	r3, #0
 80276fa:	461c      	mov	r4, r3
 80276fc:	b2e3      	uxtb	r3, r4
 80276fe:	f083 0301 	eor.w	r3, r3, #1
 8027702:	b2db      	uxtb	r3, r3
 8027704:	2b00      	cmp	r3, #0
 8027706:	d00b      	beq.n	8027720 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8027708:	68fb      	ldr	r3, [r7, #12]
 802770a:	695c      	ldr	r4, [r3, #20]
 802770c:	4b0c      	ldr	r3, [pc, #48]	; (8027740 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 802770e:	9300      	str	r3, [sp, #0]
 8027710:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8027714:	4a0b      	ldr	r2, [pc, #44]	; (8027744 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8027716:	490c      	ldr	r1, [pc, #48]	; (8027748 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8027718:	68f8      	ldr	r0, [r7, #12]
 802771a:	47a0      	blx	r4
 802771c:	2301      	movs	r3, #1
 802771e:	e009      	b.n	8027734 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8027720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027722:	9300      	str	r3, [sp, #0]
 8027724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027726:	687a      	ldr	r2, [r7, #4]
 8027728:	68b9      	ldr	r1, [r7, #8]
 802772a:	68f8      	ldr	r0, [r7, #12]
 802772c:	f000 f812 	bl	8027754 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8027730:	4603      	mov	r3, r0
                                          multiplier);
 8027732:	bf00      	nop
}
 8027734:	4618      	mov	r0, r3
 8027736:	3730      	adds	r7, #48	; 0x30
 8027738:	46bd      	mov	sp, r7
 802773a:	bdb0      	pop	{r4, r5, r7, pc}
 802773c:	f3af 8000 	nop.w
 8027740:	08033b80 	.word	0x08033b80
 8027744:	08033970 	.word	0x08033970
 8027748:	08033a6c 	.word	0x08033a6c
 802774c:	47ae147b 	.word	0x47ae147b
 8027750:	3f947ae1 	.word	0x3f947ae1

08027754 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8027754:	b590      	push	{r4, r7, lr}
 8027756:	b089      	sub	sp, #36	; 0x24
 8027758:	af02      	add	r7, sp, #8
 802775a:	60f8      	str	r0, [r7, #12]
 802775c:	60b9      	str	r1, [r7, #8]
 802775e:	607a      	str	r2, [r7, #4]
 8027760:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8027762:	68bb      	ldr	r3, [r7, #8]
 8027764:	ed93 7a03 	vldr	s14, [r3, #12]
 8027768:	687b      	ldr	r3, [r7, #4]
 802776a:	edd3 7a03 	vldr	s15, [r3, #12]
 802776e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8027772:	ee17 0a90 	vmov	r0, s15
 8027776:	f7d8 fef1 	bl	800055c <__aeabi_f2d>
 802777a:	4602      	mov	r2, r0
 802777c:	460b      	mov	r3, r1
 802777e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8027782:	2301      	movs	r3, #1
 8027784:	461c      	mov	r4, r3
 8027786:	f04f 0200 	mov.w	r2, #0
 802778a:	f04f 0300 	mov.w	r3, #0
 802778e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8027792:	f7d9 f9c1 	bl	8000b18 <__aeabi_dcmpge>
 8027796:	4603      	mov	r3, r0
 8027798:	2b00      	cmp	r3, #0
 802779a:	d101      	bne.n	80277a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 802779c:	2300      	movs	r3, #0
 802779e:	461c      	mov	r4, r3
 80277a0:	b2e3      	uxtb	r3, r4
 80277a2:	f083 0301 	eor.w	r3, r3, #1
 80277a6:	b2db      	uxtb	r3, r3
 80277a8:	2b00      	cmp	r3, #0
 80277aa:	d00b      	beq.n	80277c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 80277ac:	68fb      	ldr	r3, [r7, #12]
 80277ae:	695c      	ldr	r4, [r3, #20]
 80277b0:	4b0f      	ldr	r3, [pc, #60]	; (80277f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 80277b2:	9300      	str	r3, [sp, #0]
 80277b4:	f240 1351 	movw	r3, #337	; 0x151
 80277b8:	4a0e      	ldr	r2, [pc, #56]	; (80277f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80277ba:	490f      	ldr	r1, [pc, #60]	; (80277f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80277bc:	68f8      	ldr	r0, [r7, #12]
 80277be:	47a0      	blx	r4
 80277c0:	2301      	movs	r3, #1
 80277c2:	e010      	b.n	80277e6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80277c4:	683b      	ldr	r3, [r7, #0]
 80277c6:	68db      	ldr	r3, [r3, #12]
 80277c8:	4618      	mov	r0, r3
 80277ca:	f7d8 fec7 	bl	800055c <__aeabi_f2d>
 80277ce:	4602      	mov	r2, r0
 80277d0:	460b      	mov	r3, r1
 80277d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80277d6:	f7d9 f843 	bl	8000860 <__aeabi_ddiv>
 80277da:	4602      	mov	r2, r0
 80277dc:	460b      	mov	r3, r1
 80277de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80277e0:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 80277e4:	2300      	movs	r3, #0
}
 80277e6:	4618      	mov	r0, r3
 80277e8:	371c      	adds	r7, #28
 80277ea:	46bd      	mov	sp, r7
 80277ec:	bd90      	pop	{r4, r7, pc}
 80277ee:	bf00      	nop
 80277f0:	08033ba4 	.word	0x08033ba4
 80277f4:	08033970 	.word	0x08033970
 80277f8:	08033a6c 	.word	0x08033a6c

080277fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 80277fc:	b580      	push	{r7, lr}
 80277fe:	b082      	sub	sp, #8
 8027800:	af00      	add	r7, sp, #0
 8027802:	6078      	str	r0, [r7, #4]
 8027804:	ed87 0a00 	vstr	s0, [r7]
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 802780e:	ed97 7a00 	vldr	s14, [r7]
 8027812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8027816:	eeb0 0a66 	vmov.f32	s0, s13
 802781a:	f7ff fc25 	bl	8027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802781e:	eef0 7a40 	vmov.f32	s15, s0
 8027822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027826:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 802782a:	687b      	ldr	r3, [r7, #4]
 802782c:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 802782e:	4413      	add	r3, r2
  };
 8027830:	4618      	mov	r0, r3
 8027832:	3708      	adds	r7, #8
 8027834:	46bd      	mov	sp, r7
 8027836:	bd80      	pop	{r7, pc}

08027838 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8027838:	b580      	push	{r7, lr}
 802783a:	b08e      	sub	sp, #56	; 0x38
 802783c:	af00      	add	r7, sp, #0
 802783e:	60b9      	str	r1, [r7, #8]
 8027840:	607a      	str	r2, [r7, #4]
 8027842:	603b      	str	r3, [r7, #0]
 8027844:	4603      	mov	r3, r0
 8027846:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8027848:	683b      	ldr	r3, [r7, #0]
 802784a:	68db      	ldr	r3, [r3, #12]
 802784c:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 802784e:	683b      	ldr	r3, [r7, #0]
 8027850:	691b      	ldr	r3, [r3, #16]
 8027852:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8027854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027856:	617b      	str	r3, [r7, #20]
 8027858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802785a:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 802785c:	7bfb      	ldrb	r3, [r7, #15]
 802785e:	2b01      	cmp	r3, #1
 8027860:	d118      	bne.n	8027894 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8027862:	f107 0314 	add.w	r3, r7, #20
 8027866:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 802795c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 802786a:	4618      	mov	r0, r3
 802786c:	f7ff ffc6 	bl	80277fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8027870:	4603      	mov	r3, r0
 8027872:	61fb      	str	r3, [r7, #28]
 8027874:	f107 021c 	add.w	r2, r7, #28
 8027878:	f107 0308 	add.w	r3, r7, #8
 802787c:	4611      	mov	r1, r2
 802787e:	4618      	mov	r0, r3
 8027880:	f000 f8d6 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 8027884:	4603      	mov	r3, r0
 8027886:	681a      	ldr	r2, [r3, #0]
 8027888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802788a:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 802788c:	687a      	ldr	r2, [r7, #4]
 802788e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027890:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8027892:	e05f      	b.n	8027954 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8027894:	7bfb      	ldrb	r3, [r7, #15]
 8027896:	2b03      	cmp	r3, #3
 8027898:	d129      	bne.n	80278ee <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 802789a:	f107 0314 	add.w	r3, r7, #20
 802789e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 802795c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80278a2:	4618      	mov	r0, r3
 80278a4:	f7ff ffaa 	bl	80277fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80278a8:	4603      	mov	r3, r0
 80278aa:	623b      	str	r3, [r7, #32]
 80278ac:	f107 0220 	add.w	r2, r7, #32
 80278b0:	f107 0308 	add.w	r3, r7, #8
 80278b4:	4611      	mov	r1, r2
 80278b6:	4618      	mov	r0, r3
 80278b8:	f000 f8ba 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 80278bc:	4603      	mov	r3, r0
 80278be:	681a      	ldr	r2, [r3, #0]
 80278c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80278c2:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 80278c4:	f107 0314 	add.w	r3, r7, #20
 80278c8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80278cc:	4618      	mov	r0, r3
 80278ce:	f7ff ff95 	bl	80277fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80278d2:	4603      	mov	r3, r0
 80278d4:	627b      	str	r3, [r7, #36]	; 0x24
 80278d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80278da:	1d3b      	adds	r3, r7, #4
 80278dc:	4611      	mov	r1, r2
 80278de:	4618      	mov	r0, r3
 80278e0:	f000 f892 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 80278e4:	4603      	mov	r3, r0
 80278e6:	681a      	ldr	r2, [r3, #0]
 80278e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80278ea:	601a      	str	r2, [r3, #0]
}
 80278ec:	e032      	b.n	8027954 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 80278ee:	7bfb      	ldrb	r3, [r7, #15]
 80278f0:	2b02      	cmp	r3, #2
 80278f2:	d129      	bne.n	8027948 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 80278f4:	f107 0314 	add.w	r3, r7, #20
 80278f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80278fc:	4618      	mov	r0, r3
 80278fe:	f7ff ff7d 	bl	80277fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8027902:	4603      	mov	r3, r0
 8027904:	62bb      	str	r3, [r7, #40]	; 0x28
 8027906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802790a:	f107 0308 	add.w	r3, r7, #8
 802790e:	4611      	mov	r1, r2
 8027910:	4618      	mov	r0, r3
 8027912:	f000 f88d 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 8027916:	4603      	mov	r3, r0
 8027918:	681a      	ldr	r2, [r3, #0]
 802791a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802791c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 802791e:	f107 0314 	add.w	r3, r7, #20
 8027922:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027926:	4618      	mov	r0, r3
 8027928:	f7ff ff68 	bl	80277fc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 802792c:	4603      	mov	r3, r0
 802792e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027930:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8027934:	1d3b      	adds	r3, r7, #4
 8027936:	4611      	mov	r1, r2
 8027938:	4618      	mov	r0, r3
 802793a:	f000 f865 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 802793e:	4603      	mov	r3, r0
 8027940:	681a      	ldr	r2, [r3, #0]
 8027942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027944:	601a      	str	r2, [r3, #0]
}
 8027946:	e005      	b.n	8027954 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8027948:	68ba      	ldr	r2, [r7, #8]
 802794a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802794c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 802794e:	687a      	ldr	r2, [r7, #4]
 8027950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027952:	601a      	str	r2, [r3, #0]
}
 8027954:	bf00      	nop
 8027956:	3738      	adds	r7, #56	; 0x38
 8027958:	46bd      	mov	sp, r7
 802795a:	bd80      	pop	{r7, pc}
 802795c:	00000000 	.word	0x00000000

08027960 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8027960:	b590      	push	{r4, r7, lr}
 8027962:	b089      	sub	sp, #36	; 0x24
 8027964:	af02      	add	r7, sp, #8
 8027966:	60f8      	str	r0, [r7, #12]
 8027968:	607a      	str	r2, [r7, #4]
 802796a:	603b      	str	r3, [r7, #0]
 802796c:	460b      	mov	r3, r1
 802796e:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8027970:	2300      	movs	r3, #0
 8027972:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8027974:	2300      	movs	r3, #0
 8027976:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8027978:	687b      	ldr	r3, [r7, #4]
 802797a:	781b      	ldrb	r3, [r3, #0]
 802797c:	2b03      	cmp	r3, #3
 802797e:	d108      	bne.n	8027992 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8027980:	f7ff fb93 	bl	80270aa <_ZNSt14numeric_limitsIhE3minEv>
 8027984:	4603      	mov	r3, r0
 8027986:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8027988:	f7ff fb97 	bl	80270ba <_ZNSt14numeric_limitsIhE3maxEv>
 802798c:	4603      	mov	r3, r0
 802798e:	613b      	str	r3, [r7, #16]
 8027990:	e025      	b.n	80279de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8027992:	687b      	ldr	r3, [r7, #4]
 8027994:	781b      	ldrb	r3, [r3, #0]
 8027996:	2b09      	cmp	r3, #9
 8027998:	d108      	bne.n	80279ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 802799a:	f7ff fb75 	bl	8027088 <_ZNSt14numeric_limitsIaE3minEv>
 802799e:	4603      	mov	r3, r0
 80279a0:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80279a2:	f7ff fb7a 	bl	802709a <_ZNSt14numeric_limitsIaE3maxEv>
 80279a6:	4603      	mov	r3, r0
 80279a8:	613b      	str	r3, [r7, #16]
 80279aa:	e018      	b.n	80279de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80279ac:	687b      	ldr	r3, [r7, #4]
 80279ae:	781b      	ldrb	r3, [r3, #0]
 80279b0:	2b07      	cmp	r3, #7
 80279b2:	d108      	bne.n	80279c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80279b4:	f7ff fb8a 	bl	80270cc <_ZNSt14numeric_limitsIsE3minEv>
 80279b8:	4603      	mov	r3, r0
 80279ba:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80279bc:	f7ff fb90 	bl	80270e0 <_ZNSt14numeric_limitsIsE3maxEv>
 80279c0:	4603      	mov	r3, r0
 80279c2:	613b      	str	r3, [r7, #16]
 80279c4:	e00b      	b.n	80279de <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80279c6:	68fb      	ldr	r3, [r7, #12]
 80279c8:	695c      	ldr	r4, [r3, #20]
 80279ca:	4b0c      	ldr	r3, [pc, #48]	; (80279fc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 80279cc:	9300      	str	r3, [sp, #0]
 80279ce:	f44f 73c2 	mov.w	r3, #388	; 0x184
 80279d2:	4a0b      	ldr	r2, [pc, #44]	; (8027a00 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80279d4:	490b      	ldr	r1, [pc, #44]	; (8027a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80279d6:	68f8      	ldr	r0, [r7, #12]
 80279d8:	47a0      	blx	r4
 80279da:	2301      	movs	r3, #1
 80279dc:	e00a      	b.n	80279f4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 80279de:	7af8      	ldrb	r0, [r7, #11]
 80279e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80279e2:	9301      	str	r3, [sp, #4]
 80279e4:	683b      	ldr	r3, [r7, #0]
 80279e6:	9300      	str	r3, [sp, #0]
 80279e8:	687b      	ldr	r3, [r7, #4]
 80279ea:	693a      	ldr	r2, [r7, #16]
 80279ec:	6979      	ldr	r1, [r7, #20]
 80279ee:	f7ff ff23 	bl	8027838 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 80279f2:	2300      	movs	r3, #0
}
 80279f4:	4618      	mov	r0, r3
 80279f6:	371c      	adds	r7, #28
 80279f8:	46bd      	mov	sp, r7
 80279fa:	bd90      	pop	{r4, r7, pc}
 80279fc:	08033bc0 	.word	0x08033bc0
 8027a00:	08033970 	.word	0x08033970
 8027a04:	08033a6c 	.word	0x08033a6c

08027a08 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8027a08:	b480      	push	{r7}
 8027a0a:	b083      	sub	sp, #12
 8027a0c:	af00      	add	r7, sp, #0
 8027a0e:	6078      	str	r0, [r7, #4]
 8027a10:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8027a12:	683b      	ldr	r3, [r7, #0]
 8027a14:	681a      	ldr	r2, [r3, #0]
 8027a16:	687b      	ldr	r3, [r7, #4]
 8027a18:	681b      	ldr	r3, [r3, #0]
 8027a1a:	429a      	cmp	r2, r3
 8027a1c:	da01      	bge.n	8027a22 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8027a1e:	683b      	ldr	r3, [r7, #0]
 8027a20:	e000      	b.n	8027a24 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8027a22:	687b      	ldr	r3, [r7, #4]
    }
 8027a24:	4618      	mov	r0, r3
 8027a26:	370c      	adds	r7, #12
 8027a28:	46bd      	mov	sp, r7
 8027a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a2e:	4770      	bx	lr

08027a30 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8027a30:	b480      	push	{r7}
 8027a32:	b083      	sub	sp, #12
 8027a34:	af00      	add	r7, sp, #0
 8027a36:	6078      	str	r0, [r7, #4]
 8027a38:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8027a3a:	687b      	ldr	r3, [r7, #4]
 8027a3c:	681a      	ldr	r2, [r3, #0]
 8027a3e:	683b      	ldr	r3, [r7, #0]
 8027a40:	681b      	ldr	r3, [r3, #0]
 8027a42:	429a      	cmp	r2, r3
 8027a44:	da01      	bge.n	8027a4a <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8027a46:	683b      	ldr	r3, [r7, #0]
 8027a48:	e000      	b.n	8027a4c <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8027a4a:	687b      	ldr	r3, [r7, #4]
    }
 8027a4c:	4618      	mov	r0, r3
 8027a4e:	370c      	adds	r7, #12
 8027a50:	46bd      	mov	sp, r7
 8027a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a56:	4770      	bx	lr

08027a58 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8027a58:	b480      	push	{r7}
 8027a5a:	b083      	sub	sp, #12
 8027a5c:	af00      	add	r7, sp, #0
 8027a5e:	6078      	str	r0, [r7, #4]
 8027a60:	687b      	ldr	r3, [r7, #4]
 8027a62:	2200      	movs	r2, #0
 8027a64:	601a      	str	r2, [r3, #0]
 8027a66:	687b      	ldr	r3, [r7, #4]
 8027a68:	4618      	mov	r0, r3
 8027a6a:	370c      	adds	r7, #12
 8027a6c:	46bd      	mov	sp, r7
 8027a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a72:	4770      	bx	lr

08027a74 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8027a74:	b580      	push	{r7, lr}
 8027a76:	b084      	sub	sp, #16
 8027a78:	af00      	add	r7, sp, #0
 8027a7a:	60f8      	str	r0, [r7, #12]
 8027a7c:	60b9      	str	r1, [r7, #8]
 8027a7e:	607a      	str	r2, [r7, #4]
 8027a80:	68fb      	ldr	r3, [r7, #12]
 8027a82:	2200      	movs	r2, #0
 8027a84:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8027a86:	687a      	ldr	r2, [r7, #4]
 8027a88:	68b9      	ldr	r1, [r7, #8]
 8027a8a:	68f8      	ldr	r0, [r7, #12]
 8027a8c:	f000 f866 	bl	8027b5c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8027a90:	68fb      	ldr	r3, [r7, #12]
 8027a92:	4618      	mov	r0, r3
 8027a94:	3710      	adds	r7, #16
 8027a96:	46bd      	mov	sp, r7
 8027a98:	bd80      	pop	{r7, pc}

08027a9a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8027a9a:	b580      	push	{r7, lr}
 8027a9c:	b082      	sub	sp, #8
 8027a9e:	af00      	add	r7, sp, #0
 8027aa0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8027aa2:	687b      	ldr	r3, [r7, #4]
 8027aa4:	681b      	ldr	r3, [r3, #0]
 8027aa6:	2b05      	cmp	r3, #5
 8027aa8:	dd08      	ble.n	8027abc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8027aaa:	687b      	ldr	r3, [r7, #4]
 8027aac:	685b      	ldr	r3, [r3, #4]
 8027aae:	2b00      	cmp	r3, #0
 8027ab0:	d004      	beq.n	8027abc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8027ab2:	687b      	ldr	r3, [r7, #4]
 8027ab4:	685b      	ldr	r3, [r3, #4]
 8027ab6:	4618      	mov	r0, r3
 8027ab8:	f006 fff8 	bl	802eaac <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8027abc:	687b      	ldr	r3, [r7, #4]
 8027abe:	4618      	mov	r0, r3
 8027ac0:	3708      	adds	r7, #8
 8027ac2:	46bd      	mov	sp, r7
 8027ac4:	bd80      	pop	{r7, pc}

08027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8027ac6:	b480      	push	{r7}
 8027ac8:	b083      	sub	sp, #12
 8027aca:	af00      	add	r7, sp, #0
 8027acc:	6078      	str	r0, [r7, #4]
 8027ace:	687b      	ldr	r3, [r7, #4]
 8027ad0:	681b      	ldr	r3, [r3, #0]
 8027ad2:	4618      	mov	r0, r3
 8027ad4:	370c      	adds	r7, #12
 8027ad6:	46bd      	mov	sp, r7
 8027ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027adc:	4770      	bx	lr

08027ade <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8027ade:	b480      	push	{r7}
 8027ae0:	b083      	sub	sp, #12
 8027ae2:	af00      	add	r7, sp, #0
 8027ae4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8027ae6:	687b      	ldr	r3, [r7, #4]
 8027ae8:	681b      	ldr	r3, [r3, #0]
 8027aea:	2b05      	cmp	r3, #5
 8027aec:	dd02      	ble.n	8027af4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8027aee:	687b      	ldr	r3, [r7, #4]
 8027af0:	685b      	ldr	r3, [r3, #4]
 8027af2:	e001      	b.n	8027af8 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8027af4:	687b      	ldr	r3, [r7, #4]
 8027af6:	3304      	adds	r3, #4
  }
 8027af8:	4618      	mov	r0, r3
 8027afa:	370c      	adds	r7, #12
 8027afc:	46bd      	mov	sp, r7
 8027afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b02:	4770      	bx	lr

08027b04 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8027b04:	b580      	push	{r7, lr}
 8027b06:	b082      	sub	sp, #8
 8027b08:	af00      	add	r7, sp, #0
 8027b0a:	6078      	str	r0, [r7, #4]
 8027b0c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	681b      	ldr	r3, [r3, #0]
 8027b12:	2b05      	cmp	r3, #5
 8027b14:	dd08      	ble.n	8027b28 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8027b16:	687b      	ldr	r3, [r7, #4]
 8027b18:	685b      	ldr	r3, [r3, #4]
 8027b1a:	2b00      	cmp	r3, #0
 8027b1c:	d004      	beq.n	8027b28 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8027b1e:	687b      	ldr	r3, [r7, #4]
 8027b20:	685b      	ldr	r3, [r3, #4]
 8027b22:	4618      	mov	r0, r3
 8027b24:	f006 ffc2 	bl	802eaac <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8027b28:	687b      	ldr	r3, [r7, #4]
 8027b2a:	683a      	ldr	r2, [r7, #0]
 8027b2c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8027b2e:	683b      	ldr	r3, [r7, #0]
 8027b30:	2b05      	cmp	r3, #5
 8027b32:	dd0f      	ble.n	8027b54 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8027b34:	683b      	ldr	r3, [r7, #0]
 8027b36:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8027b3a:	4293      	cmp	r3, r2
 8027b3c:	d201      	bcs.n	8027b42 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8027b3e:	009b      	lsls	r3, r3, #2
 8027b40:	e001      	b.n	8027b46 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8027b42:	f04f 33ff 	mov.w	r3, #4294967295
 8027b46:	4618      	mov	r0, r3
 8027b48:	f006 ffc3 	bl	802ead2 <_Znaj>
 8027b4c:	4603      	mov	r3, r0
 8027b4e:	461a      	mov	r2, r3
 8027b50:	687b      	ldr	r3, [r7, #4]
 8027b52:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8027b54:	bf00      	nop
 8027b56:	3708      	adds	r7, #8
 8027b58:	46bd      	mov	sp, r7
 8027b5a:	bd80      	pop	{r7, pc}

08027b5c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8027b5c:	b580      	push	{r7, lr}
 8027b5e:	b086      	sub	sp, #24
 8027b60:	af00      	add	r7, sp, #0
 8027b62:	60f8      	str	r0, [r7, #12]
 8027b64:	60b9      	str	r1, [r7, #8]
 8027b66:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8027b68:	68b9      	ldr	r1, [r7, #8]
 8027b6a:	68f8      	ldr	r0, [r7, #12]
 8027b6c:	f7ff ffca 	bl	8027b04 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8027b70:	68f8      	ldr	r0, [r7, #12]
 8027b72:	f7ff ffb4 	bl	8027ade <_ZN6tflite12RuntimeShape8DimsDataEv>
 8027b76:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8027b78:	68bb      	ldr	r3, [r7, #8]
 8027b7a:	009b      	lsls	r3, r3, #2
 8027b7c:	461a      	mov	r2, r3
 8027b7e:	6879      	ldr	r1, [r7, #4]
 8027b80:	6978      	ldr	r0, [r7, #20]
 8027b82:	f009 fc65 	bl	8031450 <memcpy>
  }
 8027b86:	bf00      	nop
 8027b88:	3718      	adds	r7, #24
 8027b8a:	46bd      	mov	sp, r7
 8027b8c:	bd80      	pop	{r7, pc}

08027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8027b8e:	b580      	push	{r7, lr}
 8027b90:	b086      	sub	sp, #24
 8027b92:	af00      	add	r7, sp, #0
 8027b94:	6078      	str	r0, [r7, #4]
 8027b96:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8027b98:	683b      	ldr	r3, [r7, #0]
 8027b9a:	2b00      	cmp	r3, #0
 8027b9c:	d103      	bne.n	8027ba6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8027b9e:	6878      	ldr	r0, [r7, #4]
 8027ba0:	f7ff ff5a 	bl	8027a58 <_ZN6tflite12RuntimeShapeC1Ev>
 8027ba4:	e00d      	b.n	8027bc2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8027ba6:	683b      	ldr	r3, [r7, #0]
 8027ba8:	689b      	ldr	r3, [r3, #8]
 8027baa:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8027bac:	697b      	ldr	r3, [r7, #20]
 8027bae:	681b      	ldr	r3, [r3, #0]
 8027bb0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8027bb2:	697b      	ldr	r3, [r7, #20]
 8027bb4:	3304      	adds	r3, #4
 8027bb6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8027bb8:	68fa      	ldr	r2, [r7, #12]
 8027bba:	6939      	ldr	r1, [r7, #16]
 8027bbc:	6878      	ldr	r0, [r7, #4]
 8027bbe:	f7ff ff59 	bl	8027a74 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8027bc2:	6878      	ldr	r0, [r7, #4]
 8027bc4:	3718      	adds	r7, #24
 8027bc6:	46bd      	mov	sp, r7
 8027bc8:	bd80      	pop	{r7, pc}
	...

08027bcc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8027bcc:	b480      	push	{r7}
 8027bce:	b083      	sub	sp, #12
 8027bd0:	af00      	add	r7, sp, #0
 8027bd2:	4603      	mov	r3, r0
 8027bd4:	6039      	str	r1, [r7, #0]
 8027bd6:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8027bd8:	79fb      	ldrb	r3, [r7, #7]
 8027bda:	3b01      	subs	r3, #1
 8027bdc:	2b0f      	cmp	r3, #15
 8027bde:	d857      	bhi.n	8027c90 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8027be0:	a201      	add	r2, pc, #4	; (adr r2, 8027be8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8027be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027be6:	bf00      	nop
 8027be8:	08027c31 	.word	0x08027c31
 8027bec:	08027c49 	.word	0x08027c49
 8027bf0:	08027c59 	.word	0x08027c59
 8027bf4:	08027c69 	.word	0x08027c69
 8027bf8:	08027c91 	.word	0x08027c91
 8027bfc:	08027c79 	.word	0x08027c79
 8027c00:	08027c41 	.word	0x08027c41
 8027c04:	08027c81 	.word	0x08027c81
 8027c08:	08027c61 	.word	0x08027c61
 8027c0c:	08027c29 	.word	0x08027c29
 8027c10:	08027c39 	.word	0x08027c39
 8027c14:	08027c89 	.word	0x08027c89
 8027c18:	08027c71 	.word	0x08027c71
 8027c1c:	08027c91 	.word	0x08027c91
 8027c20:	08027c91 	.word	0x08027c91
 8027c24:	08027c51 	.word	0x08027c51
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8027c28:	683b      	ldr	r3, [r7, #0]
 8027c2a:	2202      	movs	r2, #2
 8027c2c:	601a      	str	r2, [r3, #0]
      break;
 8027c2e:	e031      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8027c30:	683b      	ldr	r3, [r7, #0]
 8027c32:	2204      	movs	r2, #4
 8027c34:	601a      	str	r2, [r3, #0]
      break;
 8027c36:	e02d      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8027c38:	683b      	ldr	r3, [r7, #0]
 8027c3a:	2208      	movs	r2, #8
 8027c3c:	601a      	str	r2, [r3, #0]
      break;
 8027c3e:	e029      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8027c40:	683b      	ldr	r3, [r7, #0]
 8027c42:	2202      	movs	r2, #2
 8027c44:	601a      	str	r2, [r3, #0]
      break;
 8027c46:	e025      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8027c48:	683b      	ldr	r3, [r7, #0]
 8027c4a:	2204      	movs	r2, #4
 8027c4c:	601a      	str	r2, [r3, #0]
      break;
 8027c4e:	e021      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 8027c50:	683b      	ldr	r3, [r7, #0]
 8027c52:	2204      	movs	r2, #4
 8027c54:	601a      	str	r2, [r3, #0]
      break;
 8027c56:	e01d      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8027c58:	683b      	ldr	r3, [r7, #0]
 8027c5a:	2201      	movs	r2, #1
 8027c5c:	601a      	str	r2, [r3, #0]
      break;
 8027c5e:	e019      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8027c60:	683b      	ldr	r3, [r7, #0]
 8027c62:	2201      	movs	r2, #1
 8027c64:	601a      	str	r2, [r3, #0]
      break;
 8027c66:	e015      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8027c68:	683b      	ldr	r3, [r7, #0]
 8027c6a:	2208      	movs	r2, #8
 8027c6c:	601a      	str	r2, [r3, #0]
      break;
 8027c6e:	e011      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8027c70:	683b      	ldr	r3, [r7, #0]
 8027c72:	2208      	movs	r2, #8
 8027c74:	601a      	str	r2, [r3, #0]
      break;
 8027c76:	e00d      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 8027c78:	683b      	ldr	r3, [r7, #0]
 8027c7a:	2201      	movs	r2, #1
 8027c7c:	601a      	str	r2, [r3, #0]
      break;
 8027c7e:	e009      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8027c80:	683b      	ldr	r3, [r7, #0]
 8027c82:	2208      	movs	r2, #8
 8027c84:	601a      	str	r2, [r3, #0]
      break;
 8027c86:	e005      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8027c88:	683b      	ldr	r3, [r7, #0]
 8027c8a:	2210      	movs	r2, #16
 8027c8c:	601a      	str	r2, [r3, #0]
      break;
 8027c8e:	e001      	b.n	8027c94 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 8027c90:	2301      	movs	r3, #1
 8027c92:	e000      	b.n	8027c96 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 8027c94:	2300      	movs	r3, #0
}
 8027c96:	4618      	mov	r0, r3
 8027c98:	370c      	adds	r7, #12
 8027c9a:	46bd      	mov	sp, r7
 8027c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ca0:	4770      	bx	lr
 8027ca2:	bf00      	nop

08027ca4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 8027ca4:	b480      	push	{r7}
 8027ca6:	b085      	sub	sp, #20
 8027ca8:	af00      	add	r7, sp, #0
 8027caa:	6078      	str	r0, [r7, #4]
  int result = 1;
 8027cac:	2301      	movs	r3, #1
 8027cae:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8027cb0:	2300      	movs	r3, #0
 8027cb2:	60bb      	str	r3, [r7, #8]
 8027cb4:	687b      	ldr	r3, [r7, #4]
 8027cb6:	681b      	ldr	r3, [r3, #0]
 8027cb8:	68ba      	ldr	r2, [r7, #8]
 8027cba:	429a      	cmp	r2, r3
 8027cbc:	da0c      	bge.n	8027cd8 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 8027cbe:	687a      	ldr	r2, [r7, #4]
 8027cc0:	68bb      	ldr	r3, [r7, #8]
 8027cc2:	009b      	lsls	r3, r3, #2
 8027cc4:	4413      	add	r3, r2
 8027cc6:	685a      	ldr	r2, [r3, #4]
 8027cc8:	68fb      	ldr	r3, [r7, #12]
 8027cca:	fb02 f303 	mul.w	r3, r2, r3
 8027cce:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8027cd0:	68bb      	ldr	r3, [r7, #8]
 8027cd2:	3301      	adds	r3, #1
 8027cd4:	60bb      	str	r3, [r7, #8]
 8027cd6:	e7ed      	b.n	8027cb4 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 8027cd8:	68fb      	ldr	r3, [r7, #12]
}
 8027cda:	4618      	mov	r0, r3
 8027cdc:	3714      	adds	r7, #20
 8027cde:	46bd      	mov	sp, r7
 8027ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ce4:	4770      	bx	lr

08027ce6 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8027ce6:	b480      	push	{r7}
 8027ce8:	af00      	add	r7, sp, #0
 8027cea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8027cee:	4618      	mov	r0, r3
 8027cf0:	46bd      	mov	sp, r7
 8027cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cf6:	4770      	bx	lr

08027cf8 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8027cf8:	b480      	push	{r7}
 8027cfa:	af00      	add	r7, sp, #0
 8027cfc:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8027d00:	ee07 3a90 	vmov	s15, r3
 8027d04:	eeb0 0a67 	vmov.f32	s0, s15
 8027d08:	46bd      	mov	sp, r7
 8027d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d0e:	4770      	bx	lr

08027d10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8027d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027d14:	b092      	sub	sp, #72	; 0x48
 8027d16:	af00      	add	r7, sp, #0
 8027d18:	61f8      	str	r0, [r7, #28]
 8027d1a:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8027d1c:	69fa      	ldr	r2, [r7, #28]
 8027d1e:	69bb      	ldr	r3, [r7, #24]
 8027d20:	429a      	cmp	r2, r3
 8027d22:	d107      	bne.n	8027d34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8027d24:	f7ff ffdf 	bl	8027ce6 <_ZNSt14numeric_limitsIlE3minEv>
 8027d28:	4602      	mov	r2, r0
 8027d2a:	69fb      	ldr	r3, [r7, #28]
 8027d2c:	4293      	cmp	r3, r2
 8027d2e:	d101      	bne.n	8027d34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8027d30:	2301      	movs	r3, #1
 8027d32:	e000      	b.n	8027d36 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8027d34:	2300      	movs	r3, #0
 8027d36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8027d3a:	69fb      	ldr	r3, [r7, #28]
 8027d3c:	17da      	asrs	r2, r3, #31
 8027d3e:	60bb      	str	r3, [r7, #8]
 8027d40:	60fa      	str	r2, [r7, #12]
 8027d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8027d46:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8027d4a:	69bb      	ldr	r3, [r7, #24]
 8027d4c:	17da      	asrs	r2, r3, #31
 8027d4e:	603b      	str	r3, [r7, #0]
 8027d50:	607a      	str	r2, [r7, #4]
 8027d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027d56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8027d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027d5e:	fb03 f202 	mul.w	r2, r3, r2
 8027d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027d66:	fb01 f303 	mul.w	r3, r1, r3
 8027d6a:	4413      	add	r3, r2
 8027d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027d70:	fba1 4502 	umull	r4, r5, r1, r2
 8027d74:	442b      	add	r3, r5
 8027d76:	461d      	mov	r5, r3
 8027d78:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8027d7c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8027d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027d84:	2b00      	cmp	r3, #0
 8027d86:	db02      	blt.n	8027d8e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8027d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8027d8c:	e000      	b.n	8027d90 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8027d8e:	4b1a      	ldr	r3, [pc, #104]	; (8027df8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8027d90:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8027d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d94:	17da      	asrs	r2, r3, #31
 8027d96:	4698      	mov	r8, r3
 8027d98:	4691      	mov	r9, r2
 8027d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027d9e:	eb18 0102 	adds.w	r1, r8, r2
 8027da2:	6139      	str	r1, [r7, #16]
 8027da4:	eb49 0303 	adc.w	r3, r9, r3
 8027da8:	617b      	str	r3, [r7, #20]
 8027daa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8027dae:	2b00      	cmp	r3, #0
 8027db0:	da07      	bge.n	8027dc2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8027db2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027db6:	eb12 0a01 	adds.w	sl, r2, r1
 8027dba:	f143 0b00 	adc.w	fp, r3, #0
 8027dbe:	4652      	mov	r2, sl
 8027dc0:	465b      	mov	r3, fp
 8027dc2:	f04f 0000 	mov.w	r0, #0
 8027dc6:	f04f 0100 	mov.w	r1, #0
 8027dca:	0fd0      	lsrs	r0, r2, #31
 8027dcc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8027dd0:	17d9      	asrs	r1, r3, #31
 8027dd2:	4602      	mov	r2, r0
 8027dd4:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8027dd6:	4613      	mov	r3, r2
 8027dd8:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8027dda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8027dde:	2b00      	cmp	r3, #0
 8027de0:	d003      	beq.n	8027dea <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8027de2:	f7fe ff8f 	bl	8026d04 <_ZNSt14numeric_limitsIlE3maxEv>
 8027de6:	4603      	mov	r3, r0
 8027de8:	e000      	b.n	8027dec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8027dea:	6a3b      	ldr	r3, [r7, #32]
}
 8027dec:	4618      	mov	r0, r3
 8027dee:	3748      	adds	r7, #72	; 0x48
 8027df0:	46bd      	mov	sp, r7
 8027df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8027df6:	bf00      	nop
 8027df8:	c0000001 	.word	0xc0000001

08027dfc <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8027dfc:	b580      	push	{r7, lr}
 8027dfe:	b082      	sub	sp, #8
 8027e00:	af00      	add	r7, sp, #0
 8027e02:	6078      	str	r0, [r7, #4]
 8027e04:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8027e06:	683b      	ldr	r3, [r7, #0]
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	da01      	bge.n	8027e10 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8027e0c:	f009 faa2 	bl	8031354 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8027e10:	687b      	ldr	r3, [r7, #4]
 8027e12:	681b      	ldr	r3, [r3, #0]
 8027e14:	683a      	ldr	r2, [r7, #0]
 8027e16:	429a      	cmp	r2, r3
 8027e18:	db01      	blt.n	8027e1e <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8027e1a:	f009 fa9b 	bl	8031354 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8027e1e:	687b      	ldr	r3, [r7, #4]
 8027e20:	681b      	ldr	r3, [r3, #0]
 8027e22:	2b05      	cmp	r3, #5
 8027e24:	dd06      	ble.n	8027e34 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8027e26:	687b      	ldr	r3, [r7, #4]
 8027e28:	685a      	ldr	r2, [r3, #4]
 8027e2a:	683b      	ldr	r3, [r7, #0]
 8027e2c:	009b      	lsls	r3, r3, #2
 8027e2e:	4413      	add	r3, r2
 8027e30:	681b      	ldr	r3, [r3, #0]
 8027e32:	e004      	b.n	8027e3e <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8027e34:	687a      	ldr	r2, [r7, #4]
 8027e36:	683b      	ldr	r3, [r7, #0]
 8027e38:	009b      	lsls	r3, r3, #2
 8027e3a:	4413      	add	r3, r2
 8027e3c:	685b      	ldr	r3, [r3, #4]
  }
 8027e3e:	4618      	mov	r0, r3
 8027e40:	3708      	adds	r7, #8
 8027e42:	46bd      	mov	sp, r7
 8027e44:	bd80      	pop	{r7, pc}

08027e46 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8027e46:	b480      	push	{r7}
 8027e48:	b083      	sub	sp, #12
 8027e4a:	af00      	add	r7, sp, #0
 8027e4c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8027e4e:	687b      	ldr	r3, [r7, #4]
 8027e50:	681b      	ldr	r3, [r3, #0]
 8027e52:	2b05      	cmp	r3, #5
 8027e54:	dd02      	ble.n	8027e5c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8027e56:	687b      	ldr	r3, [r7, #4]
 8027e58:	685b      	ldr	r3, [r3, #4]
 8027e5a:	e001      	b.n	8027e60 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8027e5c:	687b      	ldr	r3, [r7, #4]
 8027e5e:	3304      	adds	r3, #4
  }
 8027e60:	4618      	mov	r0, r3
 8027e62:	370c      	adds	r7, #12
 8027e64:	46bd      	mov	sp, r7
 8027e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e6a:	4770      	bx	lr

08027e6c <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8027e6c:	b580      	push	{r7, lr}
 8027e6e:	b086      	sub	sp, #24
 8027e70:	af00      	add	r7, sp, #0
 8027e72:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8027e74:	2301      	movs	r3, #1
 8027e76:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8027e78:	6878      	ldr	r0, [r7, #4]
 8027e7a:	f7ff ffe4 	bl	8027e46 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8027e7e:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8027e80:	2300      	movs	r3, #0
 8027e82:	613b      	str	r3, [r7, #16]
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	681b      	ldr	r3, [r3, #0]
 8027e88:	693a      	ldr	r2, [r7, #16]
 8027e8a:	429a      	cmp	r2, r3
 8027e8c:	da0c      	bge.n	8027ea8 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8027e8e:	693b      	ldr	r3, [r7, #16]
 8027e90:	009b      	lsls	r3, r3, #2
 8027e92:	68fa      	ldr	r2, [r7, #12]
 8027e94:	4413      	add	r3, r2
 8027e96:	681a      	ldr	r2, [r3, #0]
 8027e98:	697b      	ldr	r3, [r7, #20]
 8027e9a:	fb02 f303 	mul.w	r3, r2, r3
 8027e9e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8027ea0:	693b      	ldr	r3, [r7, #16]
 8027ea2:	3301      	adds	r3, #1
 8027ea4:	613b      	str	r3, [r7, #16]
 8027ea6:	e7ed      	b.n	8027e84 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8027ea8:	697b      	ldr	r3, [r7, #20]
  }
 8027eaa:	4618      	mov	r0, r3
 8027eac:	3718      	adds	r7, #24
 8027eae:	46bd      	mov	sp, r7
 8027eb0:	bd80      	pop	{r7, pc}

08027eb2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8027eb2:	b590      	push	{r4, r7, lr}
 8027eb4:	b085      	sub	sp, #20
 8027eb6:	af00      	add	r7, sp, #0
 8027eb8:	6078      	str	r0, [r7, #4]
 8027eba:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8027ebc:	6878      	ldr	r0, [r7, #4]
 8027ebe:	f7ff fe02 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027ec2:	4604      	mov	r4, r0
 8027ec4:	6838      	ldr	r0, [r7, #0]
 8027ec6:	f7ff fdfe 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027eca:	4603      	mov	r3, r0
 8027ecc:	429c      	cmp	r4, r3
 8027ece:	d001      	beq.n	8027ed4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8027ed0:	f009 fa40 	bl	8031354 <abort>
  const int dims_count = shape.DimensionsCount();
 8027ed4:	6878      	ldr	r0, [r7, #4]
 8027ed6:	f7ff fdf6 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8027eda:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8027edc:	2300      	movs	r3, #0
 8027ede:	60fb      	str	r3, [r7, #12]
 8027ee0:	68fa      	ldr	r2, [r7, #12]
 8027ee2:	68bb      	ldr	r3, [r7, #8]
 8027ee4:	429a      	cmp	r2, r3
 8027ee6:	da11      	bge.n	8027f0c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8027ee8:	68f9      	ldr	r1, [r7, #12]
 8027eea:	6878      	ldr	r0, [r7, #4]
 8027eec:	f7ff ff86 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8027ef0:	4604      	mov	r4, r0
 8027ef2:	68f9      	ldr	r1, [r7, #12]
 8027ef4:	6838      	ldr	r0, [r7, #0]
 8027ef6:	f7ff ff81 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8027efa:	4603      	mov	r3, r0
 8027efc:	429c      	cmp	r4, r3
 8027efe:	d001      	beq.n	8027f04 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8027f00:	f009 fa28 	bl	8031354 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8027f04:	68fb      	ldr	r3, [r7, #12]
 8027f06:	3301      	adds	r3, #1
 8027f08:	60fb      	str	r3, [r7, #12]
 8027f0a:	e7e9      	b.n	8027ee0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8027f0c:	6878      	ldr	r0, [r7, #4]
 8027f0e:	f7ff ffad 	bl	8027e6c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8027f12:	4603      	mov	r3, r0
}
 8027f14:	4618      	mov	r0, r3
 8027f16:	3714      	adds	r7, #20
 8027f18:	46bd      	mov	sp, r7
 8027f1a:	bd90      	pop	{r4, r7, pc}

08027f1c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8027f1c:	b580      	push	{r7, lr}
 8027f1e:	b086      	sub	sp, #24
 8027f20:	af00      	add	r7, sp, #0
 8027f22:	60f8      	str	r0, [r7, #12]
 8027f24:	60b9      	str	r1, [r7, #8]
 8027f26:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8027f28:	687b      	ldr	r3, [r7, #4]
 8027f2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027f2e:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8027f30:	687b      	ldr	r3, [r7, #4]
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	dc02      	bgt.n	8027f3c <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8027f36:	687b      	ldr	r3, [r7, #4]
 8027f38:	425b      	negs	r3, r3
 8027f3a:	e000      	b.n	8027f3e <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8027f3c:	2300      	movs	r3, #0
 8027f3e:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8027f40:	68fa      	ldr	r2, [r7, #12]
 8027f42:	697b      	ldr	r3, [r7, #20]
 8027f44:	fa02 f303 	lsl.w	r3, r2, r3
 8027f48:	68b9      	ldr	r1, [r7, #8]
 8027f4a:	4618      	mov	r0, r3
 8027f4c:	f7ff fee0 	bl	8027d10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8027f50:	4603      	mov	r3, r0
 8027f52:	6939      	ldr	r1, [r7, #16]
 8027f54:	4618      	mov	r0, r3
 8027f56:	f000 fb4b 	bl	80285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8027f5a:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8027f5c:	4618      	mov	r0, r3
 8027f5e:	3718      	adds	r7, #24
 8027f60:	46bd      	mov	sp, r7
 8027f62:	bd80      	pop	{r7, pc}

08027f64 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8027f64:	b580      	push	{r7, lr}
 8027f66:	b084      	sub	sp, #16
 8027f68:	af00      	add	r7, sp, #0
 8027f6a:	60f8      	str	r0, [r7, #12]
 8027f6c:	60b9      	str	r1, [r7, #8]
 8027f6e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8027f70:	68fb      	ldr	r3, [r7, #12]
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d101      	bne.n	8027f7a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8027f76:	f009 f9ed 	bl	8031354 <abort>
  TFLITE_DCHECK(node != nullptr);
 8027f7a:	68bb      	ldr	r3, [r7, #8]
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	d101      	bne.n	8027f84 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8027f80:	f009 f9e8 	bl	8031354 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8027f84:	68fb      	ldr	r3, [r7, #12]
 8027f86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8027f88:	68bb      	ldr	r3, [r7, #8]
 8027f8a:	6819      	ldr	r1, [r3, #0]
 8027f8c:	687b      	ldr	r3, [r7, #4]
 8027f8e:	009b      	lsls	r3, r3, #2
 8027f90:	440b      	add	r3, r1
 8027f92:	685b      	ldr	r3, [r3, #4]
 8027f94:	4619      	mov	r1, r3
 8027f96:	68f8      	ldr	r0, [r7, #12]
 8027f98:	4790      	blx	r2
 8027f9a:	4603      	mov	r3, r0
}
 8027f9c:	4618      	mov	r0, r3
 8027f9e:	3710      	adds	r7, #16
 8027fa0:	46bd      	mov	sp, r7
 8027fa2:	bd80      	pop	{r7, pc}

08027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8027fa4:	b580      	push	{r7, lr}
 8027fa6:	b084      	sub	sp, #16
 8027fa8:	af00      	add	r7, sp, #0
 8027faa:	60f8      	str	r0, [r7, #12]
 8027fac:	60b9      	str	r1, [r7, #8]
 8027fae:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8027fb0:	687a      	ldr	r2, [r7, #4]
 8027fb2:	68b9      	ldr	r1, [r7, #8]
 8027fb4:	68f8      	ldr	r0, [r7, #12]
 8027fb6:	f7ff ffd5 	bl	8027f64 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8027fba:	4603      	mov	r3, r0
}
 8027fbc:	4618      	mov	r0, r3
 8027fbe:	3710      	adds	r7, #16
 8027fc0:	46bd      	mov	sp, r7
 8027fc2:	bd80      	pop	{r7, pc}

08027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8027fc4:	b580      	push	{r7, lr}
 8027fc6:	b084      	sub	sp, #16
 8027fc8:	af00      	add	r7, sp, #0
 8027fca:	60f8      	str	r0, [r7, #12]
 8027fcc:	60b9      	str	r1, [r7, #8]
 8027fce:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8027fd0:	68fb      	ldr	r3, [r7, #12]
 8027fd2:	2b00      	cmp	r3, #0
 8027fd4:	d101      	bne.n	8027fda <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8027fd6:	f009 f9bd 	bl	8031354 <abort>
  TFLITE_DCHECK(node != nullptr);
 8027fda:	68bb      	ldr	r3, [r7, #8]
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d101      	bne.n	8027fe4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8027fe0:	f009 f9b8 	bl	8031354 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8027fe4:	68fb      	ldr	r3, [r7, #12]
 8027fe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8027fe8:	68bb      	ldr	r3, [r7, #8]
 8027fea:	6859      	ldr	r1, [r3, #4]
 8027fec:	687b      	ldr	r3, [r7, #4]
 8027fee:	009b      	lsls	r3, r3, #2
 8027ff0:	440b      	add	r3, r1
 8027ff2:	685b      	ldr	r3, [r3, #4]
 8027ff4:	4619      	mov	r1, r3
 8027ff6:	68f8      	ldr	r0, [r7, #12]
 8027ff8:	4790      	blx	r2
 8027ffa:	4603      	mov	r3, r0
}
 8027ffc:	4618      	mov	r0, r3
 8027ffe:	3710      	adds	r7, #16
 8028000:	46bd      	mov	sp, r7
 8028002:	bd80      	pop	{r7, pc}

08028004 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8028004:	b580      	push	{r7, lr}
 8028006:	b08a      	sub	sp, #40	; 0x28
 8028008:	af00      	add	r7, sp, #0
 802800a:	60f8      	str	r0, [r7, #12]
 802800c:	60b9      	str	r1, [r7, #8]
 802800e:	607a      	str	r2, [r7, #4]
 8028010:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8028012:	6879      	ldr	r1, [r7, #4]
 8028014:	68f8      	ldr	r0, [r7, #12]
 8028016:	f7ff ff4c 	bl	8027eb2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 802801a:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 802801c:	2300      	movs	r3, #0
 802801e:	627b      	str	r3, [r7, #36]	; 0x24
 8028020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028022:	6a3b      	ldr	r3, [r7, #32]
 8028024:	429a      	cmp	r2, r3
 8028026:	da1d      	bge.n	8028064 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8028028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802802a:	009b      	lsls	r3, r3, #2
 802802c:	68ba      	ldr	r2, [r7, #8]
 802802e:	4413      	add	r3, r2
 8028030:	681b      	ldr	r3, [r3, #0]
 8028032:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8028034:	f04f 0300 	mov.w	r3, #0
 8028038:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 802803a:	edd7 7a07 	vldr	s15, [r7, #28]
 802803e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8028042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028046:	d501      	bpl.n	802804c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8028048:	69bb      	ldr	r3, [r7, #24]
 802804a:	e000      	b.n	802804e <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 802804c:	69fb      	ldr	r3, [r7, #28]
 802804e:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8028050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028052:	009b      	lsls	r3, r3, #2
 8028054:	683a      	ldr	r2, [r7, #0]
 8028056:	4413      	add	r3, r2
 8028058:	697a      	ldr	r2, [r7, #20]
 802805a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 802805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802805e:	3301      	adds	r3, #1
 8028060:	627b      	str	r3, [r7, #36]	; 0x24
 8028062:	e7dd      	b.n	8028020 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8028064:	bf00      	nop
 8028066:	3728      	adds	r7, #40	; 0x28
 8028068:	46bd      	mov	sp, r7
 802806a:	bd80      	pop	{r7, pc}

0802806c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 802806c:	b580      	push	{r7, lr}
 802806e:	b08a      	sub	sp, #40	; 0x28
 8028070:	af00      	add	r7, sp, #0
 8028072:	60f8      	str	r0, [r7, #12]
 8028074:	60b9      	str	r1, [r7, #8]
 8028076:	607a      	str	r2, [r7, #4]
 8028078:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 802807a:	6879      	ldr	r1, [r7, #4]
 802807c:	68f8      	ldr	r0, [r7, #12]
 802807e:	f7ff ff18 	bl	8027eb2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8028082:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8028084:	2300      	movs	r3, #0
 8028086:	627b      	str	r3, [r7, #36]	; 0x24
 8028088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802808a:	6a3b      	ldr	r3, [r7, #32]
 802808c:	429a      	cmp	r2, r3
 802808e:	da2a      	bge.n	80280e6 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8028090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028092:	009b      	lsls	r3, r3, #2
 8028094:	68ba      	ldr	r2, [r7, #8]
 8028096:	4413      	add	r3, r2
 8028098:	681b      	ldr	r3, [r3, #0]
 802809a:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 802809c:	4b14      	ldr	r3, [pc, #80]	; (80280f0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 802809e:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 80280a0:	f04f 0300 	mov.w	r3, #0
 80280a4:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 80280a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80280aa:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80280ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80280b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280b6:	dd01      	ble.n	80280bc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 80280b8:	69bb      	ldr	r3, [r7, #24]
 80280ba:	e009      	b.n	80280d0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 80280bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80280c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80280c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280c8:	d501      	bpl.n	80280ce <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 80280ca:	697b      	ldr	r3, [r7, #20]
 80280cc:	e000      	b.n	80280d0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 80280ce:	69fb      	ldr	r3, [r7, #28]
 80280d0:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 80280d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280d4:	009b      	lsls	r3, r3, #2
 80280d6:	683a      	ldr	r2, [r7, #0]
 80280d8:	4413      	add	r3, r2
 80280da:	693a      	ldr	r2, [r7, #16]
 80280dc:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80280de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280e0:	3301      	adds	r3, #1
 80280e2:	627b      	str	r3, [r7, #36]	; 0x24
 80280e4:	e7d0      	b.n	8028088 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 80280e6:	bf00      	nop
 80280e8:	3728      	adds	r7, #40	; 0x28
 80280ea:	46bd      	mov	sp, r7
 80280ec:	bd80      	pop	{r7, pc}
 80280ee:	bf00      	nop
 80280f0:	40c00000 	.word	0x40c00000

080280f4 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 80280f4:	b580      	push	{r7, lr}
 80280f6:	b084      	sub	sp, #16
 80280f8:	af00      	add	r7, sp, #0
 80280fa:	60f8      	str	r0, [r7, #12]
 80280fc:	60b9      	str	r1, [r7, #8]
 80280fe:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8028100:	68fb      	ldr	r3, [r7, #12]
 8028102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028104:	2b00      	cmp	r3, #0
 8028106:	d101      	bne.n	802810c <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8028108:	f009 f924 	bl	8031354 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 802810c:	68fb      	ldr	r3, [r7, #12]
 802810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028110:	211c      	movs	r1, #28
 8028112:	68f8      	ldr	r0, [r7, #12]
 8028114:	4798      	blx	r3
 8028116:	4603      	mov	r3, r0
}
 8028118:	4618      	mov	r0, r3
 802811a:	3710      	adds	r7, #16
 802811c:	46bd      	mov	sp, r7
 802811e:	bd80      	pop	{r7, pc}

08028120 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8028120:	b590      	push	{r4, r7, lr}
 8028122:	b089      	sub	sp, #36	; 0x24
 8028124:	af02      	add	r7, sp, #8
 8028126:	6078      	str	r0, [r7, #4]
 8028128:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 802812a:	683b      	ldr	r3, [r7, #0]
 802812c:	691b      	ldr	r3, [r3, #16]
 802812e:	2b00      	cmp	r3, #0
 8028130:	d101      	bne.n	8028136 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8028132:	f009 f90f 	bl	8031354 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8028136:	683b      	ldr	r3, [r7, #0]
 8028138:	691b      	ldr	r3, [r3, #16]
 802813a:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 802813c:	2200      	movs	r2, #0
 802813e:	6839      	ldr	r1, [r7, #0]
 8028140:	6878      	ldr	r0, [r7, #4]
 8028142:	f7ff f8a9 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8028146:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8028148:	693b      	ldr	r3, [r7, #16]
 802814a:	2b00      	cmp	r3, #0
 802814c:	d10a      	bne.n	8028164 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 802814e:	687b      	ldr	r3, [r7, #4]
 8028150:	695c      	ldr	r4, [r3, #20]
 8028152:	4b1a      	ldr	r3, [pc, #104]	; (80281bc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8028154:	9300      	str	r3, [sp, #0]
 8028156:	238e      	movs	r3, #142	; 0x8e
 8028158:	4a19      	ldr	r2, [pc, #100]	; (80281c0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 802815a:	491a      	ldr	r1, [pc, #104]	; (80281c4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 802815c:	6878      	ldr	r0, [r7, #4]
 802815e:	47a0      	blx	r4
 8028160:	2301      	movs	r3, #1
 8028162:	e027      	b.n	80281b4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8028164:	2200      	movs	r2, #0
 8028166:	6839      	ldr	r1, [r7, #0]
 8028168:	6878      	ldr	r0, [r7, #4]
 802816a:	f7ff f8a5 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802816e:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8028170:	68fb      	ldr	r3, [r7, #12]
 8028172:	2b00      	cmp	r3, #0
 8028174:	d10a      	bne.n	802818c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8028176:	687b      	ldr	r3, [r7, #4]
 8028178:	695c      	ldr	r4, [r3, #20]
 802817a:	4b13      	ldr	r3, [pc, #76]	; (80281c8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 802817c:	9300      	str	r3, [sp, #0]
 802817e:	2390      	movs	r3, #144	; 0x90
 8028180:	4a0f      	ldr	r2, [pc, #60]	; (80281c0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8028182:	4910      	ldr	r1, [pc, #64]	; (80281c4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8028184:	6878      	ldr	r0, [r7, #4]
 8028186:	47a0      	blx	r4
 8028188:	2301      	movs	r3, #1
 802818a:	e013      	b.n	80281b4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 802818c:	693b      	ldr	r3, [r7, #16]
 802818e:	781b      	ldrb	r3, [r3, #0]
 8028190:	2b09      	cmp	r3, #9
 8028192:	d105      	bne.n	80281a0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8028194:	697a      	ldr	r2, [r7, #20]
 8028196:	68f9      	ldr	r1, [r7, #12]
 8028198:	6938      	ldr	r0, [r7, #16]
 802819a:	f000 fa9d 	bl	80286d8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 802819e:	e008      	b.n	80281b2 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 80281a0:	693b      	ldr	r3, [r7, #16]
 80281a2:	781b      	ldrb	r3, [r3, #0]
 80281a4:	2b03      	cmp	r3, #3
 80281a6:	d104      	bne.n	80281b2 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 80281a8:	697a      	ldr	r2, [r7, #20]
 80281aa:	68f9      	ldr	r1, [r7, #12]
 80281ac:	6938      	ldr	r0, [r7, #16]
 80281ae:	f000 fb35 	bl	802881c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 80281b2:	2300      	movs	r3, #0
}
 80281b4:	4618      	mov	r0, r3
 80281b6:	371c      	adds	r7, #28
 80281b8:	46bd      	mov	sp, r7
 80281ba:	bd90      	pop	{r4, r7, pc}
 80281bc:	08033ce4 	.word	0x08033ce4
 80281c0:	08033c40 	.word	0x08033c40
 80281c4:	08033ccc 	.word	0x08033ccc
 80281c8:	08033cf8 	.word	0x08033cf8

080281cc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 80281cc:	b590      	push	{r4, r7, lr}
 80281ce:	b0ad      	sub	sp, #180	; 0xb4
 80281d0:	af02      	add	r7, sp, #8
 80281d2:	6078      	str	r0, [r7, #4]
 80281d4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80281d6:	683b      	ldr	r3, [r7, #0]
 80281d8:	691b      	ldr	r3, [r3, #16]
 80281da:	2b00      	cmp	r3, #0
 80281dc:	d101      	bne.n	80281e2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 80281de:	f009 f8b9 	bl	8031354 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 80281e2:	683b      	ldr	r3, [r7, #0]
 80281e4:	691b      	ldr	r3, [r3, #16]
 80281e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80281ea:	2200      	movs	r2, #0
 80281ec:	6839      	ldr	r1, [r7, #0]
 80281ee:	6878      	ldr	r0, [r7, #4]
 80281f0:	f7ff fed8 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80281f4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80281f8:	2200      	movs	r2, #0
 80281fa:	6839      	ldr	r1, [r7, #0]
 80281fc:	6878      	ldr	r0, [r7, #4]
 80281fe:	f7ff fee1 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8028202:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8028206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802820a:	7a1b      	ldrb	r3, [r3, #8]
 802820c:	2b09      	cmp	r3, #9
 802820e:	d032      	beq.n	8028276 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8028210:	2b09      	cmp	r3, #9
 8028212:	f300 808c 	bgt.w	802832e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8028216:	2b01      	cmp	r3, #1
 8028218:	d002      	beq.n	8028220 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 802821a:	2b03      	cmp	r3, #3
 802821c:	d059      	beq.n	80282d2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 802821e:	e086      	b.n	802832e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8028220:	f107 030c 	add.w	r3, r7, #12
 8028224:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8028228:	4618      	mov	r0, r3
 802822a:	f002 ff89 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 802822e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8028232:	f000 fb95 	bl	8028960 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8028236:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8028238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802823c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8028240:	4618      	mov	r0, r3
 8028242:	f002 ff7d 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8028246:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 802824a:	f000 fb98 	bl	802897e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 802824e:	4603      	mov	r3, r0
 8028250:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028254:	f107 000c 	add.w	r0, r7, #12
 8028258:	4621      	mov	r1, r4
 802825a:	f7ff fed3 	bl	8028004 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 802825e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028262:	4618      	mov	r0, r3
 8028264:	f7ff fc19 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8028268:	f107 030c 	add.w	r3, r7, #12
 802826c:	4618      	mov	r0, r3
 802826e:	f7ff fc14 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8028272:	2300      	movs	r3, #0
 8028274:	e069      	b.n	802834a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8028276:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802827a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802827e:	4618      	mov	r0, r3
 8028280:	f002 ff5e 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8028284:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8028288:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 802828c:	4618      	mov	r0, r3
 802828e:	f002 ff57 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8028292:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8028296:	f000 fb83 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802829a:	4604      	mov	r4, r0
 802829c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80282a0:	f000 fb8d 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80282a4:	4603      	mov	r3, r0
 80282a6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80282aa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80282ae:	9300      	str	r3, [sp, #0]
 80282b0:	4623      	mov	r3, r4
 80282b2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80282b6:	f000 fb93 	bl	80289e0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 80282ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80282be:	4618      	mov	r0, r3
 80282c0:	f7ff fbeb 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80282c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80282c8:	4618      	mov	r0, r3
 80282ca:	f7ff fbe6 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80282ce:	2300      	movs	r3, #0
 80282d0:	e03b      	b.n	802834a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80282d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80282d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80282da:	4618      	mov	r0, r3
 80282dc:	f002 ff30 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 80282e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80282e4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80282e8:	4618      	mov	r0, r3
 80282ea:	f002 ff29 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80282ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80282f2:	f000 fbc1 	bl	8028a78 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80282f6:	4604      	mov	r4, r0
 80282f8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80282fc:	f000 fbcb 	bl	8028a96 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8028300:	4603      	mov	r3, r0
 8028302:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8028306:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 802830a:	9300      	str	r3, [sp, #0]
 802830c:	4623      	mov	r3, r4
 802830e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8028312:	f000 fbd1 	bl	8028ab8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8028316:	f107 0384 	add.w	r3, r7, #132	; 0x84
 802831a:	4618      	mov	r0, r3
 802831c:	f7ff fbbd 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8028320:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8028324:	4618      	mov	r0, r3
 8028326:	f7ff fbb8 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 802832a:	2300      	movs	r3, #0
 802832c:	e00d      	b.n	802834a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	695c      	ldr	r4, [r3, #20]
 8028332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028336:	7a1b      	ldrb	r3, [r3, #8]
 8028338:	4618      	mov	r0, r3
 802833a:	f7fe fc67 	bl	8026c0c <TfLiteTypeGetName>
 802833e:	4603      	mov	r3, r0
 8028340:	461a      	mov	r2, r3
 8028342:	4904      	ldr	r1, [pc, #16]	; (8028354 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8028344:	6878      	ldr	r0, [r7, #4]
 8028346:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8028348:	2301      	movs	r3, #1
    }
  }
}
 802834a:	4618      	mov	r0, r3
 802834c:	37ac      	adds	r7, #172	; 0xac
 802834e:	46bd      	mov	sp, r7
 8028350:	bd90      	pop	{r4, r7, pc}
 8028352:	bf00      	nop
 8028354:	08033d0c 	.word	0x08033d0c

08028358 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 8028358:	b580      	push	{r7, lr}
 802835a:	b084      	sub	sp, #16
 802835c:	af00      	add	r7, sp, #0
 802835e:	60f8      	str	r0, [r7, #12]
 8028360:	60b9      	str	r1, [r7, #8]
 8028362:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8028364:	68fb      	ldr	r3, [r7, #12]
 8028366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028368:	2b00      	cmp	r3, #0
 802836a:	d101      	bne.n	8028370 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 802836c:	f008 fff2 	bl	8031354 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 8028370:	68fb      	ldr	r3, [r7, #12]
 8028372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028374:	2104      	movs	r1, #4
 8028376:	68f8      	ldr	r0, [r7, #12]
 8028378:	4798      	blx	r3
 802837a:	4603      	mov	r3, r0
}
 802837c:	4618      	mov	r0, r3
 802837e:	3710      	adds	r7, #16
 8028380:	46bd      	mov	sp, r7
 8028382:	bd80      	pop	{r7, pc}

08028384 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8028384:	b590      	push	{r4, r7, lr}
 8028386:	b087      	sub	sp, #28
 8028388:	af02      	add	r7, sp, #8
 802838a:	6078      	str	r0, [r7, #4]
 802838c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 802838e:	683b      	ldr	r3, [r7, #0]
 8028390:	691b      	ldr	r3, [r3, #16]
 8028392:	2b00      	cmp	r3, #0
 8028394:	d101      	bne.n	802839a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8028396:	f008 ffdd 	bl	8031354 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 802839a:	683b      	ldr	r3, [r7, #0]
 802839c:	691b      	ldr	r3, [r3, #16]
 802839e:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80283a0:	2200      	movs	r2, #0
 80283a2:	6839      	ldr	r1, [r7, #0]
 80283a4:	6878      	ldr	r0, [r7, #4]
 80283a6:	f7fe ff77 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80283aa:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 80283ac:	68bb      	ldr	r3, [r7, #8]
 80283ae:	2b00      	cmp	r3, #0
 80283b0:	d10a      	bne.n	80283c8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80283b2:	687b      	ldr	r3, [r7, #4]
 80283b4:	695c      	ldr	r4, [r3, #20]
 80283b6:	4b20      	ldr	r3, [pc, #128]	; (8028438 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 80283b8:	9300      	str	r3, [sp, #0]
 80283ba:	23cd      	movs	r3, #205	; 0xcd
 80283bc:	4a1f      	ldr	r2, [pc, #124]	; (802843c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 80283be:	4920      	ldr	r1, [pc, #128]	; (8028440 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 80283c0:	6878      	ldr	r0, [r7, #4]
 80283c2:	47a0      	blx	r4
 80283c4:	2301      	movs	r3, #1
 80283c6:	e033      	b.n	8028430 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 80283c8:	68bb      	ldr	r3, [r7, #8]
 80283ca:	781b      	ldrb	r3, [r3, #0]
 80283cc:	2b09      	cmp	r3, #9
 80283ce:	d115      	bne.n	80283fc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 80283d0:	68bb      	ldr	r3, [r7, #8]
 80283d2:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 80283d6:	68bb      	ldr	r3, [r7, #8]
 80283d8:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 80283da:	4618      	mov	r0, r3
 80283dc:	eef0 0a67 	vmov.f32	s1, s15
 80283e0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80283e4:	f000 fbb3 	bl	8028b4e <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 80283e8:	4603      	mov	r3, r0
 80283ea:	461a      	mov	r2, r3
 80283ec:	68fb      	ldr	r3, [r7, #12]
 80283ee:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 80283f0:	68bb      	ldr	r3, [r7, #8]
 80283f2:	691b      	ldr	r3, [r3, #16]
 80283f4:	b25a      	sxtb	r2, r3
 80283f6:	68fb      	ldr	r3, [r7, #12]
 80283f8:	705a      	strb	r2, [r3, #1]
 80283fa:	e018      	b.n	802842e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 80283fc:	68bb      	ldr	r3, [r7, #8]
 80283fe:	781b      	ldrb	r3, [r3, #0]
 8028400:	2b03      	cmp	r3, #3
 8028402:	d114      	bne.n	802842e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8028404:	68bb      	ldr	r3, [r7, #8]
 8028406:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 802840a:	68bb      	ldr	r3, [r7, #8]
 802840c:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 802840e:	4618      	mov	r0, r3
 8028410:	eef0 0a67 	vmov.f32	s1, s15
 8028414:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8028418:	f000 fbe8 	bl	8028bec <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 802841c:	4603      	mov	r3, r0
 802841e:	461a      	mov	r2, r3
 8028420:	68fb      	ldr	r3, [r7, #12]
 8028422:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 8028424:	68bb      	ldr	r3, [r7, #8]
 8028426:	691b      	ldr	r3, [r3, #16]
 8028428:	b2da      	uxtb	r2, r3
 802842a:	68fb      	ldr	r3, [r7, #12]
 802842c:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 802842e:	2300      	movs	r3, #0
}
 8028430:	4618      	mov	r0, r3
 8028432:	3714      	adds	r7, #20
 8028434:	46bd      	mov	sp, r7
 8028436:	bd90      	pop	{r4, r7, pc}
 8028438:	08033ce4 	.word	0x08033ce4
 802843c:	08033c40 	.word	0x08033c40
 8028440:	08033ccc 	.word	0x08033ccc

08028444 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 8028444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028446:	b0ad      	sub	sp, #180	; 0xb4
 8028448:	af02      	add	r7, sp, #8
 802844a:	6078      	str	r0, [r7, #4]
 802844c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 802844e:	683b      	ldr	r3, [r7, #0]
 8028450:	691b      	ldr	r3, [r3, #16]
 8028452:	2b00      	cmp	r3, #0
 8028454:	d101      	bne.n	802845a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8028456:	f008 ff7d 	bl	8031354 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 802845a:	683b      	ldr	r3, [r7, #0]
 802845c:	691b      	ldr	r3, [r3, #16]
 802845e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8028462:	2200      	movs	r2, #0
 8028464:	6839      	ldr	r1, [r7, #0]
 8028466:	6878      	ldr	r0, [r7, #4]
 8028468:	f7ff fd9c 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802846c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8028470:	2200      	movs	r2, #0
 8028472:	6839      	ldr	r1, [r7, #0]
 8028474:	6878      	ldr	r0, [r7, #4]
 8028476:	f7ff fda5 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802847a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 802847e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028482:	7a1b      	ldrb	r3, [r3, #8]
 8028484:	2b09      	cmp	r3, #9
 8028486:	d032      	beq.n	80284ee <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8028488:	2b09      	cmp	r3, #9
 802848a:	f300 809c 	bgt.w	80285c6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 802848e:	2b01      	cmp	r3, #1
 8028490:	d002      	beq.n	8028498 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8028492:	2b03      	cmp	r3, #3
 8028494:	d062      	beq.n	802855c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 8028496:	e096      	b.n	80285c6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8028498:	f107 030c 	add.w	r3, r7, #12
 802849c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80284a0:	4618      	mov	r0, r3
 80284a2:	f002 fe4d 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80284a6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80284aa:	f000 fa59 	bl	8028960 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80284ae:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 80284b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80284b4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80284b8:	4618      	mov	r0, r3
 80284ba:	f002 fe41 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80284be:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80284c2:	f000 fa5c 	bl	802897e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80284c6:	4603      	mov	r3, r0
 80284c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80284cc:	f107 000c 	add.w	r0, r7, #12
 80284d0:	4621      	mov	r1, r4
 80284d2:	f7ff fdcb 	bl	802806c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 80284d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80284da:	4618      	mov	r0, r3
 80284dc:	f7ff fadd 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80284e0:	f107 030c 	add.w	r3, r7, #12
 80284e4:	4618      	mov	r0, r3
 80284e6:	f7ff fad8 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80284ea:	2300      	movs	r3, #0
 80284ec:	e079      	b.n	80285e2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80284ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80284f2:	f993 4001 	ldrsb.w	r4, [r3, #1]
 80284f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80284fa:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 80284fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8028502:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8028506:	4618      	mov	r0, r3
 8028508:	f002 fe1a 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 802850c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8028510:	f000 fa46 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8028514:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 8028516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802851a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 802851e:	4618      	mov	r0, r3
 8028520:	f002 fe0e 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8028524:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8028528:	f000 fa49 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802852c:	4603      	mov	r3, r0
 802852e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8028532:	9301      	str	r3, [sp, #4]
 8028534:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8028538:	9300      	str	r3, [sp, #0]
 802853a:	4633      	mov	r3, r6
 802853c:	4629      	mov	r1, r5
 802853e:	4620      	mov	r0, r4
 8028540:	f000 fba3 	bl	8028c8a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 8028544:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8028548:	4618      	mov	r0, r3
 802854a:	f7ff faa6 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 802854e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8028552:	4618      	mov	r0, r3
 8028554:	f7ff faa1 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8028558:	2300      	movs	r3, #0
 802855a:	e042      	b.n	80285e2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 802855c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8028560:	78dc      	ldrb	r4, [r3, #3]
 8028562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8028566:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 8028568:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802856c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8028570:	4618      	mov	r0, r3
 8028572:	f002 fde5 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8028576:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 802857a:	f000 fa7d 	bl	8028a78 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 802857e:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 8028580:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8028584:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8028588:	4618      	mov	r0, r3
 802858a:	f002 fdd9 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 802858e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8028592:	f000 fa80 	bl	8028a96 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8028596:	4603      	mov	r3, r0
 8028598:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802859c:	9301      	str	r3, [sp, #4]
 802859e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80285a2:	9300      	str	r3, [sp, #0]
 80285a4:	4633      	mov	r3, r6
 80285a6:	4629      	mov	r1, r5
 80285a8:	4620      	mov	r0, r4
 80285aa:	f000 fbad 	bl	8028d08 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 80285ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80285b2:	4618      	mov	r0, r3
 80285b4:	f7ff fa71 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 80285b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80285bc:	4618      	mov	r0, r3
 80285be:	f7ff fa6c 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80285c2:	2300      	movs	r3, #0
 80285c4:	e00d      	b.n	80285e2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80285c6:	687b      	ldr	r3, [r7, #4]
 80285c8:	695c      	ldr	r4, [r3, #20]
 80285ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80285ce:	7a1b      	ldrb	r3, [r3, #8]
 80285d0:	4618      	mov	r0, r3
 80285d2:	f7fe fb1b 	bl	8026c0c <TfLiteTypeGetName>
 80285d6:	4603      	mov	r3, r0
 80285d8:	461a      	mov	r2, r3
 80285da:	4904      	ldr	r1, [pc, #16]	; (80285ec <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 80285dc:	6878      	ldr	r0, [r7, #4]
 80285de:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80285e0:	2301      	movs	r3, #1
    }
  }
}
 80285e2:	4618      	mov	r0, r3
 80285e4:	37ac      	adds	r7, #172	; 0xac
 80285e6:	46bd      	mov	sp, r7
 80285e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80285ea:	bf00      	nop
 80285ec:	08033d0c 	.word	0x08033d0c

080285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 80285f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285f2:	b089      	sub	sp, #36	; 0x24
 80285f4:	af00      	add	r7, sp, #0
 80285f6:	6078      	str	r0, [r7, #4]
 80285f8:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80285fa:	6839      	ldr	r1, [r7, #0]
 80285fc:	2900      	cmp	r1, #0
 80285fe:	da06      	bge.n	802860e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8028600:	4b31      	ldr	r3, [pc, #196]	; (80286c8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8028602:	4a32      	ldr	r2, [pc, #200]	; (80286cc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8028604:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8028608:	4831      	ldr	r0, [pc, #196]	; (80286d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 802860a:	f008 feab 	bl	8031364 <__assert_func>
  assert(exponent <= 31);
 802860e:	6839      	ldr	r1, [r7, #0]
 8028610:	291f      	cmp	r1, #31
 8028612:	dd06      	ble.n	8028622 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8028614:	4b2f      	ldr	r3, [pc, #188]	; (80286d4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8028616:	4a2d      	ldr	r2, [pc, #180]	; (80286cc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8028618:	f240 1167 	movw	r1, #359	; 0x167
 802861c:	482c      	ldr	r0, [pc, #176]	; (80286d0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 802861e:	f008 fea1 	bl	8031364 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8028622:	f04f 0001 	mov.w	r0, #1
 8028626:	f04f 0100 	mov.w	r1, #0
 802862a:	683c      	ldr	r4, [r7, #0]
 802862c:	f1a4 0620 	sub.w	r6, r4, #32
 8028630:	f1c4 0520 	rsb	r5, r4, #32
 8028634:	fa01 f304 	lsl.w	r3, r1, r4
 8028638:	fa00 f606 	lsl.w	r6, r0, r6
 802863c:	4333      	orrs	r3, r6
 802863e:	fa20 f505 	lsr.w	r5, r0, r5
 8028642:	432b      	orrs	r3, r5
 8028644:	fa00 f204 	lsl.w	r2, r0, r4
 8028648:	4613      	mov	r3, r2
 802864a:	3b01      	subs	r3, #1
 802864c:	4618      	mov	r0, r3
 802864e:	f000 fb93 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8028652:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8028654:	2000      	movs	r0, #0
 8028656:	f000 fb8f 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802865a:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 802865c:	2001      	movs	r0, #1
 802865e:	f000 fb8b 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8028662:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8028664:	69f9      	ldr	r1, [r7, #28]
 8028666:	6878      	ldr	r0, [r7, #4]
 8028668:	f000 fb91 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802866c:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 802866e:	2101      	movs	r1, #1
 8028670:	69f8      	ldr	r0, [r7, #28]
 8028672:	f000 fb9a 	bl	8028daa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8028676:	4604      	mov	r4, r0
 8028678:	69b9      	ldr	r1, [r7, #24]
 802867a:	6878      	ldr	r0, [r7, #4]
 802867c:	f000 fba4 	bl	8028dc8 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8028680:	4603      	mov	r3, r0
 8028682:	6979      	ldr	r1, [r7, #20]
 8028684:	4618      	mov	r0, r3
 8028686:	f000 fb82 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802868a:	4603      	mov	r3, r0
 802868c:	4619      	mov	r1, r3
 802868e:	4620      	mov	r0, r4
 8028690:	f000 fbae 	bl	8028df0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8028694:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8028696:	6839      	ldr	r1, [r7, #0]
 8028698:	6878      	ldr	r0, [r7, #4]
 802869a:	f000 fb86 	bl	8028daa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 802869e:	4604      	mov	r4, r0
 80286a0:	68f9      	ldr	r1, [r7, #12]
 80286a2:	6938      	ldr	r0, [r7, #16]
 80286a4:	f000 fbb2 	bl	8028e0c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80286a8:	4603      	mov	r3, r0
 80286aa:	6979      	ldr	r1, [r7, #20]
 80286ac:	4618      	mov	r0, r3
 80286ae:	f000 fb6e 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80286b2:	4603      	mov	r3, r0
 80286b4:	4619      	mov	r1, r3
 80286b6:	4620      	mov	r0, r4
 80286b8:	f000 fb9a 	bl	8028df0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80286bc:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 80286be:	4618      	mov	r0, r3
 80286c0:	3724      	adds	r7, #36	; 0x24
 80286c2:	46bd      	mov	sp, r7
 80286c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80286c6:	bf00      	nop
 80286c8:	08033d78 	.word	0x08033d78
 80286cc:	08033d88 	.word	0x08033d88
 80286d0:	08033de4 	.word	0x08033de4
 80286d4:	08033e70 	.word	0x08033e70

080286d8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 80286d8:	b590      	push	{r4, r7, lr}
 80286da:	b099      	sub	sp, #100	; 0x64
 80286dc:	af00      	add	r7, sp, #0
 80286de:	60f8      	str	r0, [r7, #12]
 80286e0:	60b9      	str	r1, [r7, #8]
 80286e2:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80286e4:	f04f 0300 	mov.w	r3, #0
 80286e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80286ea:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80286ee:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80286f0:	68fb      	ldr	r3, [r7, #12]
 80286f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80286f6:	68bb      	ldr	r3, [r7, #8]
 80286f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80286fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8028700:	ee16 0a90 	vmov	r0, s13
 8028704:	f7d7 ff2a 	bl	800055c <__aeabi_f2d>
 8028708:	4602      	mov	r2, r0
 802870a:	460b      	mov	r3, r1
 802870c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8028710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028714:	68f9      	ldr	r1, [r7, #12]
 8028716:	4618      	mov	r0, r3
 8028718:	f7ff fa39 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 802871c:	f107 0310 	add.w	r3, r7, #16
 8028720:	68b9      	ldr	r1, [r7, #8]
 8028722:	4618      	mov	r0, r3
 8028724:	f7ff fa33 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8028728:	687b      	ldr	r3, [r7, #4]
 802872a:	f103 0214 	add.w	r2, r3, #20
 802872e:	687b      	ldr	r3, [r7, #4]
 8028730:	3318      	adds	r3, #24
 8028732:	4619      	mov	r1, r3
 8028734:	4610      	mov	r0, r2
 8028736:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 802873a:	f7fe faed 	bl	8026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 802873e:	f7fe fca3 	bl	8027088 <_ZNSt14numeric_limitsIaE3minEv>
 8028742:	4603      	mov	r3, r0
 8028744:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8028746:	68bb      	ldr	r3, [r7, #8]
 8028748:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 802874a:	68bb      	ldr	r3, [r7, #8]
 802874c:	edd3 7a03 	vldr	s15, [r3, #12]
 8028750:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8028754:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8028758:	eeb0 0a66 	vmov.f32	s0, s13
 802875c:	f006 fcda 	bl	802f114 <roundf>
 8028760:	eef0 7a40 	vmov.f32	s15, s0
 8028764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028768:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 802876c:	4423      	add	r3, r4
 802876e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8028770:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8028774:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028778:	4611      	mov	r1, r2
 802877a:	4618      	mov	r0, r3
 802877c:	f7ff f958 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 8028780:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8028782:	681a      	ldr	r2, [r3, #0]
 8028784:	687b      	ldr	r3, [r7, #4]
 8028786:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8028788:	f7ff fab6 	bl	8027cf8 <_ZNSt14numeric_limitsIfE8infinityEv>
 802878c:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8028790:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8028794:	eef4 7a47 	vcmp.f32	s15, s14
 8028798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802879c:	d103      	bne.n	80287a6 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 802879e:	f7fe fc7c 	bl	802709a <_ZNSt14numeric_limitsIaE3maxEv>
 80287a2:	4603      	mov	r3, r0
 80287a4:	e022      	b.n	80287ec <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80287a6:	f7fe fc78 	bl	802709a <_ZNSt14numeric_limitsIaE3maxEv>
 80287aa:	4603      	mov	r3, r0
 80287ac:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80287ae:	68bb      	ldr	r3, [r7, #8]
 80287b0:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80287b2:	68bb      	ldr	r3, [r7, #8]
 80287b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80287b8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80287bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80287c0:	eeb0 0a66 	vmov.f32	s0, s13
 80287c4:	f006 fca6 	bl	802f114 <roundf>
 80287c8:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 80287cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80287d0:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 80287d4:	4423      	add	r3, r4
 80287d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80287d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80287dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80287e0:	4611      	mov	r1, r2
 80287e2:	4618      	mov	r0, r3
 80287e4:	f7ff f910 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 80287e8:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80287ea:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80287ec:	687a      	ldr	r2, [r7, #4]
 80287ee:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80287f0:	68fb      	ldr	r3, [r7, #12]
 80287f2:	691a      	ldr	r2, [r3, #16]
 80287f4:	687b      	ldr	r3, [r7, #4]
 80287f6:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80287f8:	68bb      	ldr	r3, [r7, #8]
 80287fa:	691a      	ldr	r2, [r3, #16]
 80287fc:	687b      	ldr	r3, [r7, #4]
 80287fe:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8028800:	f107 0310 	add.w	r3, r7, #16
 8028804:	4618      	mov	r0, r3
 8028806:	f7ff f948 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 802880a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802880e:	4618      	mov	r0, r3
 8028810:	f7ff f943 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8028814:	bf00      	nop
 8028816:	3764      	adds	r7, #100	; 0x64
 8028818:	46bd      	mov	sp, r7
 802881a:	bd90      	pop	{r4, r7, pc}

0802881c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 802881c:	b590      	push	{r4, r7, lr}
 802881e:	b099      	sub	sp, #100	; 0x64
 8028820:	af00      	add	r7, sp, #0
 8028822:	60f8      	str	r0, [r7, #12]
 8028824:	60b9      	str	r1, [r7, #8]
 8028826:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8028828:	f04f 0300 	mov.w	r3, #0
 802882c:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 802882e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8028832:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8028834:	68fb      	ldr	r3, [r7, #12]
 8028836:	ed93 7a03 	vldr	s14, [r3, #12]
 802883a:	68bb      	ldr	r3, [r7, #8]
 802883c:	edd3 7a03 	vldr	s15, [r3, #12]
 8028840:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8028844:	ee16 0a90 	vmov	r0, s13
 8028848:	f7d7 fe88 	bl	800055c <__aeabi_f2d>
 802884c:	4602      	mov	r2, r0
 802884e:	460b      	mov	r3, r1
 8028850:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8028854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028858:	68f9      	ldr	r1, [r7, #12]
 802885a:	4618      	mov	r0, r3
 802885c:	f7ff f997 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8028860:	f107 0310 	add.w	r3, r7, #16
 8028864:	68b9      	ldr	r1, [r7, #8]
 8028866:	4618      	mov	r0, r3
 8028868:	f7ff f991 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	f103 0214 	add.w	r2, r3, #20
 8028872:	687b      	ldr	r3, [r7, #4]
 8028874:	3318      	adds	r3, #24
 8028876:	4619      	mov	r1, r3
 8028878:	4610      	mov	r0, r2
 802887a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 802887e:	f7fe fa4b 	bl	8026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8028882:	f7fe fc12 	bl	80270aa <_ZNSt14numeric_limitsIhE3minEv>
 8028886:	4603      	mov	r3, r0
 8028888:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 802888a:	68bb      	ldr	r3, [r7, #8]
 802888c:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 802888e:	68bb      	ldr	r3, [r7, #8]
 8028890:	edd3 7a03 	vldr	s15, [r3, #12]
 8028894:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8028898:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802889c:	eeb0 0a66 	vmov.f32	s0, s13
 80288a0:	f006 fc38 	bl	802f114 <roundf>
 80288a4:	eef0 7a40 	vmov.f32	s15, s0
 80288a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80288ac:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 80288b0:	4423      	add	r3, r4
 80288b2:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80288b4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80288b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80288bc:	4611      	mov	r1, r2
 80288be:	4618      	mov	r0, r3
 80288c0:	f7ff f8b6 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 80288c4:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80288c6:	681a      	ldr	r2, [r3, #0]
 80288c8:	687b      	ldr	r3, [r7, #4]
 80288ca:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80288cc:	f7ff fa14 	bl	8027cf8 <_ZNSt14numeric_limitsIfE8infinityEv>
 80288d0:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80288d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80288d8:	eef4 7a47 	vcmp.f32	s15, s14
 80288dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80288e0:	d103      	bne.n	80288ea <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 80288e2:	f7fe fbea 	bl	80270ba <_ZNSt14numeric_limitsIhE3maxEv>
 80288e6:	4603      	mov	r3, r0
 80288e8:	e022      	b.n	8028930 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80288ea:	f7fe fbe6 	bl	80270ba <_ZNSt14numeric_limitsIhE3maxEv>
 80288ee:	4603      	mov	r3, r0
 80288f0:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80288f2:	68bb      	ldr	r3, [r7, #8]
 80288f4:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80288f6:	68bb      	ldr	r3, [r7, #8]
 80288f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80288fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8028900:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8028904:	eeb0 0a66 	vmov.f32	s0, s13
 8028908:	f006 fc04 	bl	802f114 <roundf>
 802890c:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8028910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028914:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8028918:	4423      	add	r3, r4
 802891a:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 802891c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8028920:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8028924:	4611      	mov	r1, r2
 8028926:	4618      	mov	r0, r3
 8028928:	f7ff f86e 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 802892c:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 802892e:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8028930:	687a      	ldr	r2, [r7, #4]
 8028932:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8028934:	68fb      	ldr	r3, [r7, #12]
 8028936:	691a      	ldr	r2, [r3, #16]
 8028938:	687b      	ldr	r3, [r7, #4]
 802893a:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 802893c:	68bb      	ldr	r3, [r7, #8]
 802893e:	691a      	ldr	r2, [r3, #16]
 8028940:	687b      	ldr	r3, [r7, #4]
 8028942:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8028944:	f107 0310 	add.w	r3, r7, #16
 8028948:	4618      	mov	r0, r3
 802894a:	f7ff f8a6 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 802894e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028952:	4618      	mov	r0, r3
 8028954:	f7ff f8a1 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8028958:	bf00      	nop
 802895a:	3764      	adds	r7, #100	; 0x64
 802895c:	46bd      	mov	sp, r7
 802895e:	bd90      	pop	{r4, r7, pc}

08028960 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8028960:	b580      	push	{r7, lr}
 8028962:	b082      	sub	sp, #8
 8028964:	af00      	add	r7, sp, #0
 8028966:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8028968:	687b      	ldr	r3, [r7, #4]
 802896a:	2b00      	cmp	r3, #0
 802896c:	d101      	bne.n	8028972 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 802896e:	f008 fcf1 	bl	8031354 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8028972:	687b      	ldr	r3, [r7, #4]
 8028974:	681b      	ldr	r3, [r3, #0]
}
 8028976:	4618      	mov	r0, r3
 8028978:	3708      	adds	r7, #8
 802897a:	46bd      	mov	sp, r7
 802897c:	bd80      	pop	{r7, pc}

0802897e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 802897e:	b480      	push	{r7}
 8028980:	b083      	sub	sp, #12
 8028982:	af00      	add	r7, sp, #0
 8028984:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8028986:	687b      	ldr	r3, [r7, #4]
 8028988:	2b00      	cmp	r3, #0
 802898a:	d002      	beq.n	8028992 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 802898c:	687b      	ldr	r3, [r7, #4]
 802898e:	681b      	ldr	r3, [r3, #0]
 8028990:	e000      	b.n	8028994 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8028992:	2300      	movs	r3, #0
}
 8028994:	4618      	mov	r0, r3
 8028996:	370c      	adds	r7, #12
 8028998:	46bd      	mov	sp, r7
 802899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802899e:	4770      	bx	lr

080289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80289a0:	b580      	push	{r7, lr}
 80289a2:	b082      	sub	sp, #8
 80289a4:	af00      	add	r7, sp, #0
 80289a6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80289a8:	687b      	ldr	r3, [r7, #4]
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d101      	bne.n	80289b2 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 80289ae:	f008 fcd1 	bl	8031354 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80289b2:	687b      	ldr	r3, [r7, #4]
 80289b4:	681b      	ldr	r3, [r3, #0]
}
 80289b6:	4618      	mov	r0, r3
 80289b8:	3708      	adds	r7, #8
 80289ba:	46bd      	mov	sp, r7
 80289bc:	bd80      	pop	{r7, pc}

080289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80289be:	b480      	push	{r7}
 80289c0:	b083      	sub	sp, #12
 80289c2:	af00      	add	r7, sp, #0
 80289c4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80289c6:	687b      	ldr	r3, [r7, #4]
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d002      	beq.n	80289d2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 80289cc:	687b      	ldr	r3, [r7, #4]
 80289ce:	681b      	ldr	r3, [r3, #0]
 80289d0:	e000      	b.n	80289d4 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 80289d2:	2300      	movs	r3, #0
}
 80289d4:	4618      	mov	r0, r3
 80289d6:	370c      	adds	r7, #12
 80289d8:	46bd      	mov	sp, r7
 80289da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289de:	4770      	bx	lr

080289e0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80289e0:	b590      	push	{r4, r7, lr}
 80289e2:	b089      	sub	sp, #36	; 0x24
 80289e4:	af00      	add	r7, sp, #0
 80289e6:	60f8      	str	r0, [r7, #12]
 80289e8:	60b9      	str	r1, [r7, #8]
 80289ea:	607a      	str	r2, [r7, #4]
 80289ec:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80289ee:	6879      	ldr	r1, [r7, #4]
 80289f0:	68b8      	ldr	r0, [r7, #8]
 80289f2:	f7ff fa5e 	bl	8027eb2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80289f6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80289f8:	2300      	movs	r3, #0
 80289fa:	61fb      	str	r3, [r7, #28]
 80289fc:	69fa      	ldr	r2, [r7, #28]
 80289fe:	69bb      	ldr	r3, [r7, #24]
 8028a00:	429a      	cmp	r2, r3
 8028a02:	da35      	bge.n	8028a70 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8028a04:	69fb      	ldr	r3, [r7, #28]
 8028a06:	683a      	ldr	r2, [r7, #0]
 8028a08:	4413      	add	r3, r2
 8028a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8028a0e:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8028a10:	68fb      	ldr	r3, [r7, #12]
 8028a12:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8028a14:	68fb      	ldr	r3, [r7, #12]
 8028a16:	68db      	ldr	r3, [r3, #12]
 8028a18:	697a      	ldr	r2, [r7, #20]
 8028a1a:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8028a1c:	68fb      	ldr	r3, [r7, #12]
 8028a1e:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8028a20:	68fb      	ldr	r3, [r7, #12]
 8028a22:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8028a24:	461a      	mov	r2, r3
 8028a26:	f7ff fa79 	bl	8027f1c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8028a2a:	4603      	mov	r3, r0
        data.params.output_offset +
 8028a2c:	4423      	add	r3, r4
    int32_t clamped =
 8028a2e:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8028a30:	68fb      	ldr	r3, [r7, #12]
 8028a32:	3304      	adds	r3, #4
 8028a34:	f107 0210 	add.w	r2, r7, #16
 8028a38:	4611      	mov	r1, r2
 8028a3a:	4618      	mov	r0, r3
 8028a3c:	f7fe fff8 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 8028a40:	4603      	mov	r3, r0
 8028a42:	681b      	ldr	r3, [r3, #0]
 8028a44:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8028a46:	68fb      	ldr	r3, [r7, #12]
 8028a48:	3308      	adds	r3, #8
 8028a4a:	f107 0210 	add.w	r2, r7, #16
 8028a4e:	4611      	mov	r1, r2
 8028a50:	4618      	mov	r0, r3
 8028a52:	f7fe ffd9 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 8028a56:	4603      	mov	r3, r0
 8028a58:	681b      	ldr	r3, [r3, #0]
 8028a5a:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8028a5c:	6939      	ldr	r1, [r7, #16]
 8028a5e:	69fb      	ldr	r3, [r7, #28]
 8028a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028a62:	4413      	add	r3, r2
 8028a64:	b24a      	sxtb	r2, r1
 8028a66:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8028a68:	69fb      	ldr	r3, [r7, #28]
 8028a6a:	3301      	adds	r3, #1
 8028a6c:	61fb      	str	r3, [r7, #28]
 8028a6e:	e7c5      	b.n	80289fc <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8028a70:	bf00      	nop
 8028a72:	3724      	adds	r7, #36	; 0x24
 8028a74:	46bd      	mov	sp, r7
 8028a76:	bd90      	pop	{r4, r7, pc}

08028a78 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8028a78:	b580      	push	{r7, lr}
 8028a7a:	b082      	sub	sp, #8
 8028a7c:	af00      	add	r7, sp, #0
 8028a7e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8028a80:	687b      	ldr	r3, [r7, #4]
 8028a82:	2b00      	cmp	r3, #0
 8028a84:	d101      	bne.n	8028a8a <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8028a86:	f008 fc65 	bl	8031354 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8028a8a:	687b      	ldr	r3, [r7, #4]
 8028a8c:	681b      	ldr	r3, [r3, #0]
}
 8028a8e:	4618      	mov	r0, r3
 8028a90:	3708      	adds	r7, #8
 8028a92:	46bd      	mov	sp, r7
 8028a94:	bd80      	pop	{r7, pc}

08028a96 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8028a96:	b480      	push	{r7}
 8028a98:	b083      	sub	sp, #12
 8028a9a:	af00      	add	r7, sp, #0
 8028a9c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	2b00      	cmp	r3, #0
 8028aa2:	d002      	beq.n	8028aaa <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8028aa4:	687b      	ldr	r3, [r7, #4]
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	e000      	b.n	8028aac <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8028aaa:	2300      	movs	r3, #0
}
 8028aac:	4618      	mov	r0, r3
 8028aae:	370c      	adds	r7, #12
 8028ab0:	46bd      	mov	sp, r7
 8028ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ab6:	4770      	bx	lr

08028ab8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8028ab8:	b590      	push	{r4, r7, lr}
 8028aba:	b089      	sub	sp, #36	; 0x24
 8028abc:	af00      	add	r7, sp, #0
 8028abe:	60f8      	str	r0, [r7, #12]
 8028ac0:	60b9      	str	r1, [r7, #8]
 8028ac2:	607a      	str	r2, [r7, #4]
 8028ac4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8028ac6:	6879      	ldr	r1, [r7, #4]
 8028ac8:	68b8      	ldr	r0, [r7, #8]
 8028aca:	f7ff f9f2 	bl	8027eb2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8028ace:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8028ad0:	2300      	movs	r3, #0
 8028ad2:	61fb      	str	r3, [r7, #28]
 8028ad4:	69fa      	ldr	r2, [r7, #28]
 8028ad6:	69bb      	ldr	r3, [r7, #24]
 8028ad8:	429a      	cmp	r2, r3
 8028ada:	da34      	bge.n	8028b46 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8028adc:	69fb      	ldr	r3, [r7, #28]
 8028ade:	683a      	ldr	r2, [r7, #0]
 8028ae0:	4413      	add	r3, r2
 8028ae2:	781b      	ldrb	r3, [r3, #0]
 8028ae4:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8028ae6:	68fb      	ldr	r3, [r7, #12]
 8028ae8:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8028aea:	68fb      	ldr	r3, [r7, #12]
 8028aec:	68db      	ldr	r3, [r3, #12]
 8028aee:	697a      	ldr	r2, [r7, #20]
 8028af0:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8028af2:	68fb      	ldr	r3, [r7, #12]
 8028af4:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8028af6:	68fb      	ldr	r3, [r7, #12]
 8028af8:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8028afa:	461a      	mov	r2, r3
 8028afc:	f7ff fa0e 	bl	8027f1c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8028b00:	4603      	mov	r3, r0
        data.params.output_offset +
 8028b02:	4423      	add	r3, r4
    int32_t clamped =
 8028b04:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8028b06:	68fb      	ldr	r3, [r7, #12]
 8028b08:	3304      	adds	r3, #4
 8028b0a:	f107 0210 	add.w	r2, r7, #16
 8028b0e:	4611      	mov	r1, r2
 8028b10:	4618      	mov	r0, r3
 8028b12:	f7fe ff8d 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 8028b16:	4603      	mov	r3, r0
 8028b18:	681b      	ldr	r3, [r3, #0]
 8028b1a:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8028b1c:	68fb      	ldr	r3, [r7, #12]
 8028b1e:	3308      	adds	r3, #8
 8028b20:	f107 0210 	add.w	r2, r7, #16
 8028b24:	4611      	mov	r1, r2
 8028b26:	4618      	mov	r0, r3
 8028b28:	f7fe ff6e 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 8028b2c:	4603      	mov	r3, r0
 8028b2e:	681b      	ldr	r3, [r3, #0]
 8028b30:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8028b32:	6939      	ldr	r1, [r7, #16]
 8028b34:	69fb      	ldr	r3, [r7, #28]
 8028b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028b38:	4413      	add	r3, r2
 8028b3a:	b2ca      	uxtb	r2, r1
 8028b3c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8028b3e:	69fb      	ldr	r3, [r7, #28]
 8028b40:	3301      	adds	r3, #1
 8028b42:	61fb      	str	r3, [r7, #28]
 8028b44:	e7c6      	b.n	8028ad4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8028b46:	bf00      	nop
 8028b48:	3724      	adds	r7, #36	; 0x24
 8028b4a:	46bd      	mov	sp, r7
 8028b4c:	bd90      	pop	{r4, r7, pc}

08028b4e <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8028b4e:	b5b0      	push	{r4, r5, r7, lr}
 8028b50:	b088      	sub	sp, #32
 8028b52:	af00      	add	r7, sp, #0
 8028b54:	ed87 0a03 	vstr	s0, [r7, #12]
 8028b58:	edc7 0a02 	vstr	s1, [r7, #8]
 8028b5c:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8028b5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8028b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8028b66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8028b6a:	ee16 0a90 	vmov	r0, s13
 8028b6e:	f7d7 fcf5 	bl	800055c <__aeabi_f2d>
 8028b72:	4602      	mov	r2, r0
 8028b74:	460b      	mov	r3, r1
 8028b76:	ec43 2b10 	vmov	d0, r2, r3
 8028b7a:	f006 f97d 	bl	802ee78 <round>
 8028b7e:	ec55 4b10 	vmov	r4, r5, d0
 8028b82:	6878      	ldr	r0, [r7, #4]
 8028b84:	f7d7 fcd8 	bl	8000538 <__aeabi_i2d>
 8028b88:	4602      	mov	r2, r0
 8028b8a:	460b      	mov	r3, r1
 8028b8c:	4620      	mov	r0, r4
 8028b8e:	4629      	mov	r1, r5
 8028b90:	f7d7 fb86 	bl	80002a0 <__adddf3>
 8028b94:	4602      	mov	r2, r0
 8028b96:	460b      	mov	r3, r1
 8028b98:	4610      	mov	r0, r2
 8028b9a:	4619      	mov	r1, r3
 8028b9c:	f7d7 ffe6 	bl	8000b6c <__aeabi_d2iz>
 8028ba0:	4603      	mov	r3, r0
 8028ba2:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8028ba4:	f7fe fa70 	bl	8027088 <_ZNSt14numeric_limitsIaE3minEv>
 8028ba8:	4603      	mov	r3, r0
 8028baa:	61bb      	str	r3, [r7, #24]
 8028bac:	f107 0214 	add.w	r2, r7, #20
 8028bb0:	f107 0318 	add.w	r3, r7, #24
 8028bb4:	4611      	mov	r1, r2
 8028bb6:	4618      	mov	r0, r3
 8028bb8:	f7fe ff3a 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 8028bbc:	4603      	mov	r3, r0
  result =
 8028bbe:	681b      	ldr	r3, [r3, #0]
 8028bc0:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8028bc2:	f7fe fa6a 	bl	802709a <_ZNSt14numeric_limitsIaE3maxEv>
 8028bc6:	4603      	mov	r3, r0
 8028bc8:	61fb      	str	r3, [r7, #28]
 8028bca:	f107 0214 	add.w	r2, r7, #20
 8028bce:	f107 031c 	add.w	r3, r7, #28
 8028bd2:	4611      	mov	r1, r2
 8028bd4:	4618      	mov	r0, r3
 8028bd6:	f7fe ff17 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 8028bda:	4603      	mov	r3, r0
  result =
 8028bdc:	681b      	ldr	r3, [r3, #0]
 8028bde:	617b      	str	r3, [r7, #20]
  return result;
 8028be0:	697b      	ldr	r3, [r7, #20]
 8028be2:	b25b      	sxtb	r3, r3
}
 8028be4:	4618      	mov	r0, r3
 8028be6:	3720      	adds	r7, #32
 8028be8:	46bd      	mov	sp, r7
 8028bea:	bdb0      	pop	{r4, r5, r7, pc}

08028bec <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8028bec:	b5b0      	push	{r4, r5, r7, lr}
 8028bee:	b088      	sub	sp, #32
 8028bf0:	af00      	add	r7, sp, #0
 8028bf2:	ed87 0a03 	vstr	s0, [r7, #12]
 8028bf6:	edc7 0a02 	vstr	s1, [r7, #8]
 8028bfa:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8028bfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8028c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8028c04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8028c08:	ee16 0a90 	vmov	r0, s13
 8028c0c:	f7d7 fca6 	bl	800055c <__aeabi_f2d>
 8028c10:	4602      	mov	r2, r0
 8028c12:	460b      	mov	r3, r1
 8028c14:	ec43 2b10 	vmov	d0, r2, r3
 8028c18:	f006 f92e 	bl	802ee78 <round>
 8028c1c:	ec55 4b10 	vmov	r4, r5, d0
 8028c20:	6878      	ldr	r0, [r7, #4]
 8028c22:	f7d7 fc89 	bl	8000538 <__aeabi_i2d>
 8028c26:	4602      	mov	r2, r0
 8028c28:	460b      	mov	r3, r1
 8028c2a:	4620      	mov	r0, r4
 8028c2c:	4629      	mov	r1, r5
 8028c2e:	f7d7 fb37 	bl	80002a0 <__adddf3>
 8028c32:	4602      	mov	r2, r0
 8028c34:	460b      	mov	r3, r1
 8028c36:	4610      	mov	r0, r2
 8028c38:	4619      	mov	r1, r3
 8028c3a:	f7d7 ff97 	bl	8000b6c <__aeabi_d2iz>
 8028c3e:	4603      	mov	r3, r0
 8028c40:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8028c42:	f7fe fa32 	bl	80270aa <_ZNSt14numeric_limitsIhE3minEv>
 8028c46:	4603      	mov	r3, r0
 8028c48:	61bb      	str	r3, [r7, #24]
 8028c4a:	f107 0214 	add.w	r2, r7, #20
 8028c4e:	f107 0318 	add.w	r3, r7, #24
 8028c52:	4611      	mov	r1, r2
 8028c54:	4618      	mov	r0, r3
 8028c56:	f7fe feeb 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 8028c5a:	4603      	mov	r3, r0
  result =
 8028c5c:	681b      	ldr	r3, [r3, #0]
 8028c5e:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8028c60:	f7fe fa2b 	bl	80270ba <_ZNSt14numeric_limitsIhE3maxEv>
 8028c64:	4603      	mov	r3, r0
 8028c66:	61fb      	str	r3, [r7, #28]
 8028c68:	f107 0214 	add.w	r2, r7, #20
 8028c6c:	f107 031c 	add.w	r3, r7, #28
 8028c70:	4611      	mov	r1, r2
 8028c72:	4618      	mov	r0, r3
 8028c74:	f7fe fec8 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 8028c78:	4603      	mov	r3, r0
  result =
 8028c7a:	681b      	ldr	r3, [r3, #0]
 8028c7c:	617b      	str	r3, [r7, #20]
  return result;
 8028c7e:	697b      	ldr	r3, [r7, #20]
 8028c80:	b2db      	uxtb	r3, r3
}
 8028c82:	4618      	mov	r0, r3
 8028c84:	3720      	adds	r7, #32
 8028c86:	46bd      	mov	sp, r7
 8028c88:	bdb0      	pop	{r4, r5, r7, pc}

08028c8a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8028c8a:	b580      	push	{r7, lr}
 8028c8c:	b088      	sub	sp, #32
 8028c8e:	af00      	add	r7, sp, #0
 8028c90:	60ba      	str	r2, [r7, #8]
 8028c92:	607b      	str	r3, [r7, #4]
 8028c94:	4603      	mov	r3, r0
 8028c96:	73fb      	strb	r3, [r7, #15]
 8028c98:	460b      	mov	r3, r1
 8028c9a:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8028c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028c9e:	68b8      	ldr	r0, [r7, #8]
 8028ca0:	f7ff f907 	bl	8027eb2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8028ca4:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8028ca6:	2300      	movs	r3, #0
 8028ca8:	61fb      	str	r3, [r7, #28]
 8028caa:	69fa      	ldr	r2, [r7, #28]
 8028cac:	69bb      	ldr	r3, [r7, #24]
 8028cae:	429a      	cmp	r2, r3
 8028cb0:	da26      	bge.n	8028d00 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8028cb2:	69fb      	ldr	r3, [r7, #28]
 8028cb4:	687a      	ldr	r2, [r7, #4]
 8028cb6:	4413      	add	r3, r2
 8028cb8:	781b      	ldrb	r3, [r3, #0]
 8028cba:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8028cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8028cc0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8028cc4:	429a      	cmp	r2, r3
 8028cc6:	dd04      	ble.n	8028cd2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8028cc8:	f107 030e 	add.w	r3, r7, #14
 8028ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8028cd0:	e00c      	b.n	8028cec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8028cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028cd6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8028cda:	429a      	cmp	r2, r3
 8028cdc:	da04      	bge.n	8028ce8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8028cde:	f107 030f 	add.w	r3, r7, #15
 8028ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8028ce6:	e001      	b.n	8028cec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8028ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028cec:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8028cee:	69fb      	ldr	r3, [r7, #28]
 8028cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028cf2:	4413      	add	r3, r2
 8028cf4:	7dba      	ldrb	r2, [r7, #22]
 8028cf6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8028cf8:	69fb      	ldr	r3, [r7, #28]
 8028cfa:	3301      	adds	r3, #1
 8028cfc:	61fb      	str	r3, [r7, #28]
 8028cfe:	e7d4      	b.n	8028caa <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8028d00:	bf00      	nop
 8028d02:	3720      	adds	r7, #32
 8028d04:	46bd      	mov	sp, r7
 8028d06:	bd80      	pop	{r7, pc}

08028d08 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8028d08:	b580      	push	{r7, lr}
 8028d0a:	b088      	sub	sp, #32
 8028d0c:	af00      	add	r7, sp, #0
 8028d0e:	60ba      	str	r2, [r7, #8]
 8028d10:	607b      	str	r3, [r7, #4]
 8028d12:	4603      	mov	r3, r0
 8028d14:	73fb      	strb	r3, [r7, #15]
 8028d16:	460b      	mov	r3, r1
 8028d18:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8028d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028d1c:	68b8      	ldr	r0, [r7, #8]
 8028d1e:	f7ff f8c8 	bl	8027eb2 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8028d22:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8028d24:	2300      	movs	r3, #0
 8028d26:	61fb      	str	r3, [r7, #28]
 8028d28:	69fa      	ldr	r2, [r7, #28]
 8028d2a:	69bb      	ldr	r3, [r7, #24]
 8028d2c:	429a      	cmp	r2, r3
 8028d2e:	da1f      	bge.n	8028d70 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8028d30:	69fb      	ldr	r3, [r7, #28]
 8028d32:	687a      	ldr	r2, [r7, #4]
 8028d34:	4413      	add	r3, r2
 8028d36:	781b      	ldrb	r3, [r3, #0]
 8028d38:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8028d3a:	7bbb      	ldrb	r3, [r7, #14]
 8028d3c:	7dfa      	ldrb	r2, [r7, #23]
 8028d3e:	429a      	cmp	r2, r3
 8028d40:	d903      	bls.n	8028d4a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8028d42:	f107 030e 	add.w	r3, r7, #14
 8028d46:	781b      	ldrb	r3, [r3, #0]
 8028d48:	e008      	b.n	8028d5c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8028d4a:	7bfb      	ldrb	r3, [r7, #15]
 8028d4c:	7dfa      	ldrb	r2, [r7, #23]
 8028d4e:	429a      	cmp	r2, r3
 8028d50:	d203      	bcs.n	8028d5a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8028d52:	f107 030f 	add.w	r3, r7, #15
 8028d56:	781b      	ldrb	r3, [r3, #0]
 8028d58:	e000      	b.n	8028d5c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8028d5a:	7dfb      	ldrb	r3, [r7, #23]
 8028d5c:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8028d5e:	69fb      	ldr	r3, [r7, #28]
 8028d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028d62:	4413      	add	r3, r2
 8028d64:	7dba      	ldrb	r2, [r7, #22]
 8028d66:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8028d68:	69fb      	ldr	r3, [r7, #28]
 8028d6a:	3301      	adds	r3, #1
 8028d6c:	61fb      	str	r3, [r7, #28]
 8028d6e:	e7db      	b.n	8028d28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8028d70:	bf00      	nop
 8028d72:	3720      	adds	r7, #32
 8028d74:	46bd      	mov	sp, r7
 8028d76:	bd80      	pop	{r7, pc}

08028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8028d78:	b480      	push	{r7}
 8028d7a:	b083      	sub	sp, #12
 8028d7c:	af00      	add	r7, sp, #0
 8028d7e:	6078      	str	r0, [r7, #4]
  return x;
 8028d80:	687b      	ldr	r3, [r7, #4]
}
 8028d82:	4618      	mov	r0, r3
 8028d84:	370c      	adds	r7, #12
 8028d86:	46bd      	mov	sp, r7
 8028d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d8c:	4770      	bx	lr

08028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8028d8e:	b480      	push	{r7}
 8028d90:	b083      	sub	sp, #12
 8028d92:	af00      	add	r7, sp, #0
 8028d94:	6078      	str	r0, [r7, #4]
 8028d96:	6039      	str	r1, [r7, #0]
  return a & b;
 8028d98:	687a      	ldr	r2, [r7, #4]
 8028d9a:	683b      	ldr	r3, [r7, #0]
 8028d9c:	4013      	ands	r3, r2
}
 8028d9e:	4618      	mov	r0, r3
 8028da0:	370c      	adds	r7, #12
 8028da2:	46bd      	mov	sp, r7
 8028da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028da8:	4770      	bx	lr

08028daa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8028daa:	b480      	push	{r7}
 8028dac:	b083      	sub	sp, #12
 8028dae:	af00      	add	r7, sp, #0
 8028db0:	6078      	str	r0, [r7, #4]
 8028db2:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8028db4:	687a      	ldr	r2, [r7, #4]
 8028db6:	683b      	ldr	r3, [r7, #0]
 8028db8:	fa42 f303 	asr.w	r3, r2, r3
}
 8028dbc:	4618      	mov	r0, r3
 8028dbe:	370c      	adds	r7, #12
 8028dc0:	46bd      	mov	sp, r7
 8028dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028dc6:	4770      	bx	lr

08028dc8 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8028dc8:	b580      	push	{r7, lr}
 8028dca:	b082      	sub	sp, #8
 8028dcc:	af00      	add	r7, sp, #0
 8028dce:	6078      	str	r0, [r7, #4]
 8028dd0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8028dd2:	687a      	ldr	r2, [r7, #4]
 8028dd4:	683b      	ldr	r3, [r7, #0]
 8028dd6:	429a      	cmp	r2, r3
 8028dd8:	bfb4      	ite	lt
 8028dda:	2301      	movlt	r3, #1
 8028ddc:	2300      	movge	r3, #0
 8028dde:	b2db      	uxtb	r3, r3
 8028de0:	4618      	mov	r0, r3
 8028de2:	f000 f827 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8028de6:	4603      	mov	r3, r0
}
 8028de8:	4618      	mov	r0, r3
 8028dea:	3708      	adds	r7, #8
 8028dec:	46bd      	mov	sp, r7
 8028dee:	bd80      	pop	{r7, pc}

08028df0 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8028df0:	b480      	push	{r7}
 8028df2:	b083      	sub	sp, #12
 8028df4:	af00      	add	r7, sp, #0
 8028df6:	6078      	str	r0, [r7, #4]
 8028df8:	6039      	str	r1, [r7, #0]
  return a + b;
 8028dfa:	687a      	ldr	r2, [r7, #4]
 8028dfc:	683b      	ldr	r3, [r7, #0]
 8028dfe:	4413      	add	r3, r2
}
 8028e00:	4618      	mov	r0, r3
 8028e02:	370c      	adds	r7, #12
 8028e04:	46bd      	mov	sp, r7
 8028e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e0a:	4770      	bx	lr

08028e0c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8028e0c:	b580      	push	{r7, lr}
 8028e0e:	b082      	sub	sp, #8
 8028e10:	af00      	add	r7, sp, #0
 8028e12:	6078      	str	r0, [r7, #4]
 8028e14:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8028e16:	687a      	ldr	r2, [r7, #4]
 8028e18:	683b      	ldr	r3, [r7, #0]
 8028e1a:	429a      	cmp	r2, r3
 8028e1c:	bfcc      	ite	gt
 8028e1e:	2301      	movgt	r3, #1
 8028e20:	2300      	movle	r3, #0
 8028e22:	b2db      	uxtb	r3, r3
 8028e24:	4618      	mov	r0, r3
 8028e26:	f000 f805 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8028e2a:	4603      	mov	r3, r0
}
 8028e2c:	4618      	mov	r0, r3
 8028e2e:	3708      	adds	r7, #8
 8028e30:	46bd      	mov	sp, r7
 8028e32:	bd80      	pop	{r7, pc}

08028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8028e34:	b580      	push	{r7, lr}
 8028e36:	b082      	sub	sp, #8
 8028e38:	af00      	add	r7, sp, #0
 8028e3a:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8028e3c:	687b      	ldr	r3, [r7, #4]
 8028e3e:	2b00      	cmp	r3, #0
 8028e40:	d004      	beq.n	8028e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8028e42:	2000      	movs	r0, #0
 8028e44:	f000 f807 	bl	8028e56 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8028e48:	4603      	mov	r3, r0
 8028e4a:	e000      	b.n	8028e4e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8028e4c:	2300      	movs	r3, #0
}
 8028e4e:	4618      	mov	r0, r3
 8028e50:	3708      	adds	r7, #8
 8028e52:	46bd      	mov	sp, r7
 8028e54:	bd80      	pop	{r7, pc}

08028e56 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8028e56:	b480      	push	{r7}
 8028e58:	b083      	sub	sp, #12
 8028e5a:	af00      	add	r7, sp, #0
 8028e5c:	6078      	str	r0, [r7, #4]
  return ~a;
 8028e5e:	687b      	ldr	r3, [r7, #4]
 8028e60:	43db      	mvns	r3, r3
}
 8028e62:	4618      	mov	r0, r3
 8028e64:	370c      	adds	r7, #12
 8028e66:	46bd      	mov	sp, r7
 8028e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e6c:	4770      	bx	lr
	...

08028e70 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8028e70:	b480      	push	{r7}
 8028e72:	af00      	add	r7, sp, #0
 8028e74:	4b04      	ldr	r3, [pc, #16]	; (8028e88 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8028e76:	ee07 3a90 	vmov	s15, r3
 8028e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8028e7e:	46bd      	mov	sp, r7
 8028e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e84:	4770      	bx	lr
 8028e86:	bf00      	nop
 8028e88:	7f7fffff 	.word	0x7f7fffff

08028e8c <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8028e8c:	b480      	push	{r7}
 8028e8e:	af00      	add	r7, sp, #0
 8028e90:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8028e94:	ee07 3a90 	vmov	s15, r3
 8028e98:	eeb0 0a67 	vmov.f32	s0, s15
 8028e9c:	46bd      	mov	sp, r7
 8028e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ea2:	4770      	bx	lr

08028ea4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8028ea4:	b480      	push	{r7}
 8028ea6:	b083      	sub	sp, #12
 8028ea8:	af00      	add	r7, sp, #0
 8028eaa:	6078      	str	r0, [r7, #4]
 8028eac:	687b      	ldr	r3, [r7, #4]
 8028eae:	3304      	adds	r3, #4
 8028eb0:	4618      	mov	r0, r3
 8028eb2:	370c      	adds	r7, #12
 8028eb4:	46bd      	mov	sp, r7
 8028eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028eba:	4770      	bx	lr

08028ebc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8028ebc:	b580      	push	{r7, lr}
 8028ebe:	b086      	sub	sp, #24
 8028ec0:	af00      	add	r7, sp, #0
 8028ec2:	60f8      	str	r0, [r7, #12]
 8028ec4:	60b9      	str	r1, [r7, #8]
 8028ec6:	607a      	str	r2, [r7, #4]
 8028ec8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8028eca:	68f8      	ldr	r0, [r7, #12]
 8028ecc:	f7fe fdfb 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8028ed0:	4603      	mov	r3, r0
 8028ed2:	2b04      	cmp	r3, #4
 8028ed4:	d001      	beq.n	8028eda <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8028ed6:	f008 fa3d 	bl	8031354 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8028eda:	68f8      	ldr	r0, [r7, #12]
 8028edc:	f7ff ffe2 	bl	8028ea4 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8028ee0:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8028ee2:	68bb      	ldr	r3, [r7, #8]
 8028ee4:	2b00      	cmp	r3, #0
 8028ee6:	db04      	blt.n	8028ef2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8028ee8:	697b      	ldr	r3, [r7, #20]
 8028eea:	681b      	ldr	r3, [r3, #0]
 8028eec:	68ba      	ldr	r2, [r7, #8]
 8028eee:	429a      	cmp	r2, r3
 8028ef0:	db01      	blt.n	8028ef6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 8028ef2:	f008 fa2f 	bl	8031354 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8028ef6:	687b      	ldr	r3, [r7, #4]
 8028ef8:	2b00      	cmp	r3, #0
 8028efa:	db05      	blt.n	8028f08 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8028efc:	697b      	ldr	r3, [r7, #20]
 8028efe:	3304      	adds	r3, #4
 8028f00:	681b      	ldr	r3, [r3, #0]
 8028f02:	687a      	ldr	r2, [r7, #4]
 8028f04:	429a      	cmp	r2, r3
 8028f06:	db01      	blt.n	8028f0c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8028f08:	f008 fa24 	bl	8031354 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8028f0c:	683b      	ldr	r3, [r7, #0]
 8028f0e:	2b00      	cmp	r3, #0
 8028f10:	db05      	blt.n	8028f1e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 8028f12:	697b      	ldr	r3, [r7, #20]
 8028f14:	3308      	adds	r3, #8
 8028f16:	681b      	ldr	r3, [r3, #0]
 8028f18:	683a      	ldr	r2, [r7, #0]
 8028f1a:	429a      	cmp	r2, r3
 8028f1c:	db01      	blt.n	8028f22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8028f1e:	f008 fa19 	bl	8031354 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8028f22:	6a3b      	ldr	r3, [r7, #32]
 8028f24:	2b00      	cmp	r3, #0
 8028f26:	db05      	blt.n	8028f34 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8028f28:	697b      	ldr	r3, [r7, #20]
 8028f2a:	330c      	adds	r3, #12
 8028f2c:	681b      	ldr	r3, [r3, #0]
 8028f2e:	6a3a      	ldr	r2, [r7, #32]
 8028f30:	429a      	cmp	r2, r3
 8028f32:	db01      	blt.n	8028f38 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8028f34:	f008 fa0e 	bl	8031354 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8028f38:	697b      	ldr	r3, [r7, #20]
 8028f3a:	3304      	adds	r3, #4
 8028f3c:	681b      	ldr	r3, [r3, #0]
 8028f3e:	68ba      	ldr	r2, [r7, #8]
 8028f40:	fb03 f202 	mul.w	r2, r3, r2
 8028f44:	687b      	ldr	r3, [r7, #4]
 8028f46:	4413      	add	r3, r2
 8028f48:	697a      	ldr	r2, [r7, #20]
 8028f4a:	3208      	adds	r2, #8
 8028f4c:	6812      	ldr	r2, [r2, #0]
 8028f4e:	fb03 f202 	mul.w	r2, r3, r2
 8028f52:	683b      	ldr	r3, [r7, #0]
 8028f54:	4413      	add	r3, r2
 8028f56:	697a      	ldr	r2, [r7, #20]
 8028f58:	320c      	adds	r2, #12
 8028f5a:	6812      	ldr	r2, [r2, #0]
 8028f5c:	fb03 f202 	mul.w	r2, r3, r2
 8028f60:	6a3b      	ldr	r3, [r7, #32]
 8028f62:	4413      	add	r3, r2
}
 8028f64:	4618      	mov	r0, r3
 8028f66:	3718      	adds	r7, #24
 8028f68:	46bd      	mov	sp, r7
 8028f6a:	bd80      	pop	{r7, pc}

08028f6c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8028f6c:	b580      	push	{r7, lr}
 8028f6e:	b084      	sub	sp, #16
 8028f70:	af00      	add	r7, sp, #0
 8028f72:	4603      	mov	r3, r0
 8028f74:	60b9      	str	r1, [r7, #8]
 8028f76:	607a      	str	r2, [r7, #4]
 8028f78:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8028f7a:	7bfb      	ldrb	r3, [r7, #15]
 8028f7c:	2b01      	cmp	r3, #1
 8028f7e:	d10b      	bne.n	8028f98 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8028f80:	68bb      	ldr	r3, [r7, #8]
 8028f82:	f04f 0200 	mov.w	r2, #0
 8028f86:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8028f88:	f7ff ff72 	bl	8028e70 <_ZNSt14numeric_limitsIfE3maxEv>
 8028f8c:	eef0 7a40 	vmov.f32	s15, s0
 8028f90:	687b      	ldr	r3, [r7, #4]
 8028f92:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8028f96:	e023      	b.n	8028fe0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8028f98:	7bfb      	ldrb	r3, [r7, #15]
 8028f9a:	2b03      	cmp	r3, #3
 8028f9c:	d107      	bne.n	8028fae <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8028f9e:	68bb      	ldr	r3, [r7, #8]
 8028fa0:	f04f 0200 	mov.w	r2, #0
 8028fa4:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8028fa6:	687b      	ldr	r3, [r7, #4]
 8028fa8:	4a0f      	ldr	r2, [pc, #60]	; (8028fe8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8028faa:	601a      	str	r2, [r3, #0]
}
 8028fac:	e018      	b.n	8028fe0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8028fae:	7bfb      	ldrb	r3, [r7, #15]
 8028fb0:	2b02      	cmp	r3, #2
 8028fb2:	d107      	bne.n	8028fc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8028fb4:	68bb      	ldr	r3, [r7, #8]
 8028fb6:	4a0d      	ldr	r2, [pc, #52]	; (8028fec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8028fb8:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8028fba:	687b      	ldr	r3, [r7, #4]
 8028fbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8028fc0:	601a      	str	r2, [r3, #0]
}
 8028fc2:	e00d      	b.n	8028fe0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8028fc4:	f7ff ff62 	bl	8028e8c <_ZNSt14numeric_limitsIfE6lowestEv>
 8028fc8:	eef0 7a40 	vmov.f32	s15, s0
 8028fcc:	68bb      	ldr	r3, [r7, #8]
 8028fce:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8028fd2:	f7ff ff4d 	bl	8028e70 <_ZNSt14numeric_limitsIfE3maxEv>
 8028fd6:	eef0 7a40 	vmov.f32	s15, s0
 8028fda:	687b      	ldr	r3, [r7, #4]
 8028fdc:	edc3 7a00 	vstr	s15, [r3]
}
 8028fe0:	bf00      	nop
 8028fe2:	3710      	adds	r7, #16
 8028fe4:	46bd      	mov	sp, r7
 8028fe6:	bd80      	pop	{r7, pc}
 8028fe8:	40c00000 	.word	0x40c00000
 8028fec:	bf800000 	.word	0xbf800000

08028ff0 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8028ff0:	b480      	push	{r7}
 8028ff2:	b083      	sub	sp, #12
 8028ff4:	af00      	add	r7, sp, #0
 8028ff6:	6078      	str	r0, [r7, #4]
 8028ff8:	687b      	ldr	r3, [r7, #4]
 8028ffa:	681b      	ldr	r3, [r3, #0]
 8028ffc:	681b      	ldr	r3, [r3, #0]
 8028ffe:	4618      	mov	r0, r3
 8029000:	370c      	adds	r7, #12
 8029002:	46bd      	mov	sp, r7
 8029004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029008:	4770      	bx	lr

0802900a <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 802900a:	b480      	push	{r7}
 802900c:	b083      	sub	sp, #12
 802900e:	af00      	add	r7, sp, #0
 8029010:	6078      	str	r0, [r7, #4]
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	685b      	ldr	r3, [r3, #4]
 8029016:	681b      	ldr	r3, [r3, #0]
 8029018:	4618      	mov	r0, r3
 802901a:	370c      	adds	r7, #12
 802901c:	46bd      	mov	sp, r7
 802901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029022:	4770      	bx	lr

08029024 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8029024:	b580      	push	{r7, lr}
 8029026:	b082      	sub	sp, #8
 8029028:	af00      	add	r7, sp, #0
 802902a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 802902c:	687b      	ldr	r3, [r7, #4]
 802902e:	2b00      	cmp	r3, #0
 8029030:	d101      	bne.n	8029036 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8029032:	f008 f98f 	bl	8031354 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8029036:	687b      	ldr	r3, [r7, #4]
 8029038:	681b      	ldr	r3, [r3, #0]
}
 802903a:	4618      	mov	r0, r3
 802903c:	3708      	adds	r7, #8
 802903e:	46bd      	mov	sp, r7
 8029040:	bd80      	pop	{r7, pc}

08029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8029042:	b590      	push	{r4, r7, lr}
 8029044:	b087      	sub	sp, #28
 8029046:	af00      	add	r7, sp, #0
 8029048:	60f8      	str	r0, [r7, #12]
 802904a:	60b9      	str	r1, [r7, #8]
 802904c:	607a      	str	r2, [r7, #4]
 802904e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8029050:	68b9      	ldr	r1, [r7, #8]
 8029052:	68f8      	ldr	r0, [r7, #12]
 8029054:	f7fe fed2 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029058:	4604      	mov	r4, r0
 802905a:	6839      	ldr	r1, [r7, #0]
 802905c:	6878      	ldr	r0, [r7, #4]
 802905e:	f7fe fecd 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029062:	4603      	mov	r3, r0
 8029064:	429c      	cmp	r4, r3
 8029066:	d001      	beq.n	802906c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8029068:	f008 f974 	bl	8031354 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 802906c:	68b9      	ldr	r1, [r7, #8]
 802906e:	68f8      	ldr	r0, [r7, #12]
 8029070:	f7fe fec4 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029074:	4603      	mov	r3, r0
 8029076:	613b      	str	r3, [r7, #16]
 8029078:	6839      	ldr	r1, [r7, #0]
 802907a:	6878      	ldr	r0, [r7, #4]
 802907c:	f7fe febe 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029080:	4603      	mov	r3, r0
 8029082:	617b      	str	r3, [r7, #20]
 8029084:	f107 0214 	add.w	r2, r7, #20
 8029088:	f107 0310 	add.w	r3, r7, #16
 802908c:	4611      	mov	r1, r2
 802908e:	4618      	mov	r0, r3
 8029090:	f7fe fcba 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 8029094:	4603      	mov	r3, r0
 8029096:	681b      	ldr	r3, [r3, #0]
}
 8029098:	4618      	mov	r0, r3
 802909a:	371c      	adds	r7, #28
 802909c:	46bd      	mov	sp, r7
 802909e:	bd90      	pop	{r4, r7, pc}

080290a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 80290a0:	b590      	push	{r4, r7, lr}
 80290a2:	b0a9      	sub	sp, #164	; 0xa4
 80290a4:	af02      	add	r7, sp, #8
 80290a6:	60f8      	str	r0, [r7, #12]
 80290a8:	60b9      	str	r1, [r7, #8]
 80290aa:	607a      	str	r2, [r7, #4]
 80290ac:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 80290ae:	68fb      	ldr	r3, [r7, #12]
 80290b0:	695b      	ldr	r3, [r3, #20]
 80290b2:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 80290b4:	68fb      	ldr	r3, [r7, #12]
 80290b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80290ba:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 80290bc:	68fb      	ldr	r3, [r7, #12]
 80290be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80290c2:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 80290c4:	68fb      	ldr	r3, [r7, #12]
 80290c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80290ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 80290cc:	68fb      	ldr	r3, [r7, #12]
 80290ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80290d2:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 80290d4:	68fb      	ldr	r3, [r7, #12]
 80290d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80290da:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 80290dc:	68fb      	ldr	r3, [r7, #12]
 80290de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80290e2:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 80290e4:	68fb      	ldr	r3, [r7, #12]
 80290e6:	69db      	ldr	r3, [r3, #28]
 80290e8:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 80290ea:	68fb      	ldr	r3, [r7, #12]
 80290ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80290ee:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 80290f0:	68fb      	ldr	r3, [r7, #12]
 80290f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80290f4:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80290f6:	69ba      	ldr	r2, [r7, #24]
 80290f8:	697b      	ldr	r3, [r7, #20]
 80290fa:	429a      	cmp	r2, r3
 80290fc:	dd01      	ble.n	8029102 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 80290fe:	f008 f929 	bl	8031354 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8029102:	6838      	ldr	r0, [r7, #0]
 8029104:	f7fe fcdf 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8029108:	4603      	mov	r3, r0
 802910a:	2b04      	cmp	r3, #4
 802910c:	d001      	beq.n	8029112 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 802910e:	f008 f921 	bl	8031354 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8029112:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8029116:	f7fe fcd6 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802911a:	4603      	mov	r3, r0
 802911c:	2b04      	cmp	r3, #4
 802911e:	d001      	beq.n	8029124 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8029120:	f008 f918 	bl	8031354 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8029124:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8029128:	f7fe fccd 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802912c:	4603      	mov	r3, r0
 802912e:	2b04      	cmp	r3, #4
 8029130:	d001      	beq.n	8029136 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8029132:	f008 f90f 	bl	8031354 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8029136:	2300      	movs	r3, #0
 8029138:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 802913c:	2100      	movs	r1, #0
 802913e:	6838      	ldr	r0, [r7, #0]
 8029140:	f7ff ff7f 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029144:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8029146:	2303      	movs	r3, #3
 8029148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802914c:	2103      	movs	r1, #3
 802914e:	6838      	ldr	r0, [r7, #0]
 8029150:	f7ff ff77 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029154:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8029156:	2303      	movs	r3, #3
 8029158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 802915c:	2100      	movs	r1, #0
 802915e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8029162:	f7ff ff6e 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029166:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8029168:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802916c:	2b00      	cmp	r3, #0
 802916e:	d009      	beq.n	8029184 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8029170:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8029174:	f7fe fe7a 	bl	8027e6c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8029178:	4602      	mov	r2, r0
 802917a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802917c:	4293      	cmp	r3, r2
 802917e:	d001      	beq.n	8029184 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8029180:	f008 f8e8 	bl	8031354 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8029184:	2101      	movs	r1, #1
 8029186:	6838      	ldr	r0, [r7, #0]
 8029188:	f7fe fe38 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802918c:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 802918e:	2102      	movs	r1, #2
 8029190:	6838      	ldr	r0, [r7, #0]
 8029192:	f7fe fe33 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029196:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8029198:	2101      	movs	r1, #1
 802919a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 802919e:	f7fe fe2d 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 80291a2:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 80291a4:	2102      	movs	r1, #2
 80291a6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80291aa:	f7fe fe27 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 80291ae:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 80291b0:	2101      	movs	r1, #1
 80291b2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80291b6:	f7fe fe21 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 80291ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 80291bc:	2102      	movs	r1, #2
 80291be:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80291c2:	f7fe fe1b 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 80291c6:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 80291c8:	2300      	movs	r3, #0
 80291ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80291ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80291d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80291d4:	429a      	cmp	r2, r3
 80291d6:	f280 8113 	bge.w	8029400 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80291da:	2300      	movs	r3, #0
 80291dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80291e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80291e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80291e6:	429a      	cmp	r2, r3
 80291e8:	f280 8104 	bge.w	80293f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 80291ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80291f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80291f2:	fb03 f202 	mul.w	r2, r3, r2
 80291f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80291f8:	1ad3      	subs	r3, r2, r3
 80291fa:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80291fc:	2300      	movs	r3, #0
 80291fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8029202:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8029206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029208:	429a      	cmp	r2, r3
 802920a:	f280 80ed 	bge.w	80293e8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 802920e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029212:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8029214:	fb03 f202 	mul.w	r2, r3, r2
 8029218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802921a:	1ad3      	subs	r3, r2, r3
 802921c:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 802921e:	2300      	movs	r3, #0
 8029220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8029224:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8029228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802922a:	429a      	cmp	r2, r3
 802922c:	f280 80d6 	bge.w	80293dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8029230:	2300      	movs	r3, #0
 8029232:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8029234:	2300      	movs	r3, #0
 8029236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802923a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802923e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029240:	429a      	cmp	r2, r3
 8029242:	da76      	bge.n	8029332 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8029244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8029246:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802924a:	fb02 f303 	mul.w	r3, r2, r3
 802924e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029250:	4413      	add	r3, r2
 8029252:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8029254:	2300      	movs	r3, #0
 8029256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802925a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802925e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029260:	429a      	cmp	r2, r3
 8029262:	da60      	bge.n	8029326 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8029264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8029266:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802926a:	fb02 f303 	mul.w	r3, r2, r3
 802926e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029270:	4413      	add	r3, r2
 8029272:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8029274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029276:	2b00      	cmp	r3, #0
 8029278:	db0c      	blt.n	8029294 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 802927a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802927c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802927e:	429a      	cmp	r2, r3
 8029280:	da08      	bge.n	8029294 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8029282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029284:	2b00      	cmp	r3, #0
 8029286:	db05      	blt.n	8029294 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8029288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802928a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802928c:	429a      	cmp	r2, r3
 802928e:	da01      	bge.n	8029294 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8029290:	2301      	movs	r3, #1
 8029292:	e000      	b.n	8029296 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8029294:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8029296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 802929a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802929e:	f083 0301 	eor.w	r3, r3, #1
 80292a2:	b2db      	uxtb	r3, r3
 80292a4:	2b00      	cmp	r3, #0
 80292a6:	d137      	bne.n	8029318 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80292a8:	2300      	movs	r3, #0
 80292aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80292ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80292ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80292b0:	429a      	cmp	r2, r3
 80292b2:	da32      	bge.n	802931a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 80292b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80292b6:	9300      	str	r3, [sp, #0]
 80292b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80292ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80292bc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80292c0:	6838      	ldr	r0, [r7, #0]
 80292c2:	f7ff fdfb 	bl	8028ebc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80292c6:	4603      	mov	r3, r0
 80292c8:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 80292ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80292ce:	4413      	add	r3, r2
 80292d0:	f993 3000 	ldrsb.w	r3, [r3]
 80292d4:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 80292d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80292d8:	9300      	str	r3, [sp, #0]
 80292da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80292de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80292e2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80292e6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80292ea:	f7ff fde7 	bl	8028ebc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80292ee:	4603      	mov	r3, r0
 80292f0:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 80292f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80292f6:	4413      	add	r3, r2
 80292f8:	f993 3000 	ldrsb.w	r3, [r3]
 80292fc:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 80292fe:	6a3a      	ldr	r2, [r7, #32]
 8029300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029302:	4413      	add	r3, r2
 8029304:	69fa      	ldr	r2, [r7, #28]
 8029306:	fb03 f202 	mul.w	r2, r3, r2
 802930a:	693b      	ldr	r3, [r7, #16]
 802930c:	4413      	add	r3, r2
 802930e:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8029310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029312:	3301      	adds	r3, #1
 8029314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8029316:	e7c9      	b.n	80292ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 8029318:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 802931a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802931e:	3301      	adds	r3, #1
 8029320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8029324:	e799      	b.n	802925a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8029326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802932a:	3301      	adds	r3, #1
 802932c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8029330:	e783      	b.n	802923a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 8029332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8029336:	2b00      	cmp	r3, #0
 8029338:	d009      	beq.n	802934e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 802933a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802933e:	009b      	lsls	r3, r3, #2
 8029340:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8029344:	4413      	add	r3, r2
 8029346:	681a      	ldr	r2, [r3, #0]
 8029348:	693b      	ldr	r3, [r7, #16]
 802934a:	4413      	add	r3, r2
 802934c:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 802934e:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8029350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029354:	009b      	lsls	r3, r3, #2
 8029356:	68ba      	ldr	r2, [r7, #8]
 8029358:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 802935a:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 802935c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029360:	009b      	lsls	r3, r3, #2
 8029362:	687a      	ldr	r2, [r7, #4]
 8029364:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8029366:	681b      	ldr	r3, [r3, #0]
 8029368:	461a      	mov	r2, r3
 802936a:	f7fe fdd7 	bl	8027f1c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 802936e:	4603      	mov	r3, r0
 8029370:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8029372:	693a      	ldr	r2, [r7, #16]
 8029374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029376:	4413      	add	r3, r2
 8029378:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 802937a:	f107 0218 	add.w	r2, r7, #24
 802937e:	f107 0310 	add.w	r3, r7, #16
 8029382:	4611      	mov	r1, r2
 8029384:	4618      	mov	r0, r3
 8029386:	f7fe fb53 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 802938a:	4603      	mov	r3, r0
 802938c:	681b      	ldr	r3, [r3, #0]
 802938e:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8029390:	f107 0214 	add.w	r2, r7, #20
 8029394:	f107 0310 	add.w	r3, r7, #16
 8029398:	4611      	mov	r1, r2
 802939a:	4618      	mov	r0, r3
 802939c:	f7fe fb34 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 80293a0:	4603      	mov	r3, r0
 80293a2:	681b      	ldr	r3, [r3, #0]
 80293a4:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80293a6:	693c      	ldr	r4, [r7, #16]
 80293a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80293ac:	9300      	str	r3, [sp, #0]
 80293ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80293b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80293b6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80293ba:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80293be:	f7ff fd7d 	bl	8028ebc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80293c2:	4603      	mov	r3, r0
 80293c4:	461a      	mov	r2, r3
 80293c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80293ca:	4413      	add	r3, r2
 80293cc:	b262      	sxtb	r2, r4
 80293ce:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80293d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80293d4:	3301      	adds	r3, #1
 80293d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80293da:	e723      	b.n	8029224 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80293dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80293e0:	3301      	adds	r3, #1
 80293e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80293e6:	e70c      	b.n	8029202 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80293e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80293ec:	3301      	adds	r3, #1
 80293ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80293f2:	e6f5      	b.n	80291e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 80293f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80293f8:	3301      	adds	r3, #1
 80293fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80293fe:	e6e6      	b.n	80291ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8029400:	bf00      	nop
 8029402:	379c      	adds	r7, #156	; 0x9c
 8029404:	46bd      	mov	sp, r7
 8029406:	bd90      	pop	{r4, r7, pc}

08029408 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8029408:	b580      	push	{r7, lr}
 802940a:	b084      	sub	sp, #16
 802940c:	af00      	add	r7, sp, #0
 802940e:	60f8      	str	r0, [r7, #12]
 8029410:	60b9      	str	r1, [r7, #8]
 8029412:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8029414:	68fb      	ldr	r3, [r7, #12]
 8029416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029418:	2b00      	cmp	r3, #0
 802941a:	d101      	bne.n	8029420 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 802941c:	f007 ff9a 	bl	8031354 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8029420:	68fb      	ldr	r3, [r7, #12]
 8029422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029424:	2138      	movs	r1, #56	; 0x38
 8029426:	68f8      	ldr	r0, [r7, #12]
 8029428:	4798      	blx	r3
 802942a:	4603      	mov	r3, r0
}
 802942c:	4618      	mov	r0, r3
 802942e:	3710      	adds	r7, #16
 8029430:	46bd      	mov	sp, r7
 8029432:	bd80      	pop	{r7, pc}

08029434 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8029434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029436:	b0b7      	sub	sp, #220	; 0xdc
 8029438:	af08      	add	r7, sp, #32
 802943a:	60f8      	str	r0, [r7, #12]
 802943c:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 802943e:	68bb      	ldr	r3, [r7, #8]
 8029440:	691b      	ldr	r3, [r3, #16]
 8029442:	2b00      	cmp	r3, #0
 8029444:	d101      	bne.n	802944a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8029446:	f007 ff85 	bl	8031354 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802944a:	68bb      	ldr	r3, [r7, #8]
 802944c:	695b      	ldr	r3, [r3, #20]
 802944e:	2b00      	cmp	r3, #0
 8029450:	d101      	bne.n	8029456 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8029452:	f007 ff7f 	bl	8031354 <abort>

  int32_t buf_size = 0;
 8029456:	2300      	movs	r3, #0
 8029458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 802945c:	68bb      	ldr	r3, [r7, #8]
 802945e:	695b      	ldr	r3, [r3, #20]
 8029460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 8029464:	68bb      	ldr	r3, [r7, #8]
 8029466:	691b      	ldr	r3, [r3, #16]
 8029468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 802946c:	4ba2      	ldr	r3, [pc, #648]	; (80296f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 802946e:	681b      	ldr	r3, [r3, #0]
 8029470:	461a      	mov	r2, r3
 8029472:	68b9      	ldr	r1, [r7, #8]
 8029474:	68f8      	ldr	r0, [r7, #12]
 8029476:	f7fd ff0f 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802947a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 802947e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8029482:	2b00      	cmp	r3, #0
 8029484:	d10a      	bne.n	802949c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 8029486:	68fb      	ldr	r3, [r7, #12]
 8029488:	695c      	ldr	r4, [r3, #20]
 802948a:	4b9c      	ldr	r3, [pc, #624]	; (80296fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 802948c:	9300      	str	r3, [sp, #0]
 802948e:	233d      	movs	r3, #61	; 0x3d
 8029490:	4a9b      	ldr	r2, [pc, #620]	; (8029700 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 8029492:	499c      	ldr	r1, [pc, #624]	; (8029704 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 8029494:	68f8      	ldr	r0, [r7, #12]
 8029496:	47a0      	blx	r4
 8029498:	2401      	movs	r4, #1
 802949a:	e128      	b.n	80296ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 802949c:	4b9a      	ldr	r3, [pc, #616]	; (8029708 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 802949e:	681b      	ldr	r3, [r3, #0]
 80294a0:	461a      	mov	r2, r3
 80294a2:	68b9      	ldr	r1, [r7, #8]
 80294a4:	68f8      	ldr	r0, [r7, #12]
 80294a6:	f7fd fef7 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80294aa:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 80294ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80294b2:	2b00      	cmp	r3, #0
 80294b4:	d10a      	bne.n	80294cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 80294b6:	68fb      	ldr	r3, [r7, #12]
 80294b8:	695c      	ldr	r4, [r3, #20]
 80294ba:	4b94      	ldr	r3, [pc, #592]	; (802970c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 80294bc:	9300      	str	r3, [sp, #0]
 80294be:	233f      	movs	r3, #63	; 0x3f
 80294c0:	4a8f      	ldr	r2, [pc, #572]	; (8029700 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 80294c2:	4990      	ldr	r1, [pc, #576]	; (8029704 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 80294c4:	68f8      	ldr	r0, [r7, #12]
 80294c6:	47a0      	blx	r4
 80294c8:	2401      	movs	r4, #1
 80294ca:	e110      	b.n	80296ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 80294cc:	4b90      	ldr	r3, [pc, #576]	; (8029710 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 80294ce:	681b      	ldr	r3, [r3, #0]
 80294d0:	461a      	mov	r2, r3
 80294d2:	68b9      	ldr	r1, [r7, #8]
 80294d4:	68f8      	ldr	r0, [r7, #12]
 80294d6:	f7fd feef 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80294da:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 80294de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80294e2:	2b00      	cmp	r3, #0
 80294e4:	d10a      	bne.n	80294fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 80294e6:	68fb      	ldr	r3, [r7, #12]
 80294e8:	695c      	ldr	r4, [r3, #20]
 80294ea:	4b8a      	ldr	r3, [pc, #552]	; (8029714 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 80294ec:	9300      	str	r3, [sp, #0]
 80294ee:	2341      	movs	r3, #65	; 0x41
 80294f0:	4a83      	ldr	r2, [pc, #524]	; (8029700 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 80294f2:	4984      	ldr	r1, [pc, #528]	; (8029704 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 80294f4:	68f8      	ldr	r0, [r7, #12]
 80294f6:	47a0      	blx	r4
 80294f8:	2401      	movs	r4, #1
 80294fa:	e0f8      	b.n	80296ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>

  RuntimeShape input_shape = GetTensorShape(input);
 80294fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8029500:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8029504:	4618      	mov	r0, r3
 8029506:	f7fe fb42 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 802950a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802950e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8029512:	4618      	mov	r0, r3
 8029514:	f7fe fb3b 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8029518:	f107 0268 	add.w	r2, r7, #104	; 0x68
 802951c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8029520:	2300      	movs	r3, #0
 8029522:	2100      	movs	r1, #0
 8029524:	f7ff fd8d 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029528:	4603      	mov	r3, r0
 802952a:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 802952c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8029530:	689b      	ldr	r3, [r3, #8]
 8029532:	689b      	ldr	r3, [r3, #8]
 8029534:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 8029536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802953a:	689b      	ldr	r3, [r3, #8]
 802953c:	68db      	ldr	r3, [r3, #12]
 802953e:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 8029540:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8029544:	2103      	movs	r1, #3
 8029546:	4618      	mov	r0, r3
 8029548:	f7fe fc58 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802954c:	4603      	mov	r3, r0
 802954e:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 8029550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8029554:	2103      	movs	r1, #3
 8029556:	4618      	mov	r0, r3
 8029558:	f7fe fc50 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802955c:	4603      	mov	r3, r0
 802955e:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 8029560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8029564:	689b      	ldr	r3, [r3, #8]
 8029566:	689b      	ldr	r3, [r3, #8]
 8029568:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 802956a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802956e:	689b      	ldr	r3, [r3, #8]
 8029570:	68db      	ldr	r3, [r3, #12]
 8029572:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 8029574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029576:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 8029578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802957a:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 802957c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029580:	689b      	ldr	r3, [r3, #8]
 8029582:	689b      	ldr	r3, [r3, #8]
 8029584:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 8029586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802958a:	689b      	ldr	r3, [r3, #8]
 802958c:	68db      	ldr	r3, [r3, #12]
 802958e:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 8029590:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8029594:	2103      	movs	r1, #3
 8029596:	4618      	mov	r0, r3
 8029598:	f7fe fc30 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802959c:	4603      	mov	r3, r0
 802959e:	647b      	str	r3, [r7, #68]	; 0x44
  // Dynamically allocate per-channel quantization parameters.
  // TODO(#42883): This allocation is done even for non-int8 cases to get around
  // a bug in kernel_util.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 80295a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80295a4:	689a      	ldr	r2, [r3, #8]
 80295a6:	4b5c      	ldr	r3, [pc, #368]	; (8029718 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 80295a8:	681b      	ldr	r3, [r3, #0]
 80295aa:	009b      	lsls	r3, r3, #2
 80295ac:	4413      	add	r3, r2
 80295ae:	685b      	ldr	r3, [r3, #4]
 80295b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  data->reference_op_data.per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80295b4:	68fb      	ldr	r3, [r7, #12]
 80295b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 80295b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80295bc:	0092      	lsls	r2, r2, #2
 80295be:	4611      	mov	r1, r2
 80295c0:	68f8      	ldr	r0, [r7, #12]
 80295c2:	4798      	blx	r3
 80295c4:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 80295c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80295ca:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80295cc:	68fb      	ldr	r3, [r7, #12]
 80295ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 80295d0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80295d4:	0092      	lsls	r2, r2, #2
 80295d6:	4611      	mov	r1, r2
 80295d8:	68f8      	ldr	r0, [r7, #12]
 80295da:	4798      	blx	r3
 80295dc:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 80295de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80295e2:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 80295e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80295e6:	607b      	str	r3, [r7, #4]
 80295e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80295ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80295ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80295ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80295f0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80295f2:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 80295f6:	782d      	ldrb	r5, [r5, #0]
 80295f8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80295fc:	9606      	str	r6, [sp, #24]
 80295fe:	9505      	str	r5, [sp, #20]
 8029600:	9404      	str	r4, [sp, #16]
 8029602:	9003      	str	r0, [sp, #12]
 8029604:	9102      	str	r1, [sp, #8]
 8029606:	9201      	str	r2, [sp, #4]
 8029608:	9300      	str	r3, [sp, #0]
 802960a:	687b      	ldr	r3, [r7, #4]
 802960c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8029610:	68b9      	ldr	r1, [r7, #8]
 8029612:	68f8      	ldr	r0, [r7, #12]
 8029614:	f000 fcdc 	bl	8029fd0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 8029618:	4603      	mov	r3, r0
 802961a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 802961e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8029622:	2b00      	cmp	r3, #0
 8029624:	d002      	beq.n	802962c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
 8029626:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 802962a:	e056      	b.n	80296da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 802962c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8029630:	781b      	ldrb	r3, [r3, #0]
 8029632:	2b09      	cmp	r3, #9
 8029634:	d134      	bne.n	80296a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 8029636:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802963a:	691b      	ldr	r3, [r3, #16]
 802963c:	425b      	negs	r3, r3
 802963e:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 8029640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029644:	691b      	ldr	r3, [r3, #16]
 8029646:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 8029648:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802964c:	689b      	ldr	r3, [r3, #8]
 802964e:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 8029650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8029654:	685b      	ldr	r3, [r3, #4]
 8029656:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 8029658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802965c:	695b      	ldr	r3, [r3, #20]
 802965e:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 8029660:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8029664:	691b      	ldr	r3, [r3, #16]
 8029666:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 8029668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802966c:	685b      	ldr	r3, [r3, #4]
 802966e:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 8029670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029674:	681b      	ldr	r3, [r3, #0]
 8029676:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 8029678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802967e:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 8029680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8029684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029686:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 8029688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802968c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8029690:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8029694:	f107 0010 	add.w	r0, r7, #16
 8029698:	f7ed fdb7 	bl	801720a <arm_convolve_wrapper_s8_get_buffer_size>
 802969c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
  }

  if (buf_size > 0) {
 80296a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80296a4:	2b00      	cmp	r3, #0
 80296a6:	dd12      	ble.n	80296ce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80296a8:	68fb      	ldr	r3, [r7, #12]
 80296aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80296ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80296b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80296b4:	3234      	adds	r2, #52	; 0x34
 80296b6:	68f8      	ldr	r0, [r7, #12]
 80296b8:	4798      	blx	r3
 80296ba:	4603      	mov	r3, r0
 80296bc:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80296c0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 80296c4:	2b00      	cmp	r3, #0
 80296c6:	d007      	beq.n	80296d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
 80296c8:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 80296cc:	e005      	b.n	80296da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
 80296ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80296d2:	f04f 32ff 	mov.w	r2, #4294967295
 80296d6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 80296d8:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 80296da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80296de:	4618      	mov	r0, r3
 80296e0:	f7fe f9db 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 80296e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80296e8:	4618      	mov	r0, r3
 80296ea:	f7fe f9d6 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80296ee:	4623      	mov	r3, r4
 80296f0:	4618      	mov	r0, r3
 80296f2:	37bc      	adds	r7, #188	; 0xbc
 80296f4:	46bd      	mov	sp, r7
 80296f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80296f8:	08035f38 	.word	0x08035f38
 80296fc:	08033f20 	.word	0x08033f20
 8029700:	08033e80 	.word	0x08033e80
 8029704:	08033f08 	.word	0x08033f08
 8029708:	08035f3c 	.word	0x08035f3c
 802970c:	08033f34 	.word	0x08033f34
 8029710:	08035f44 	.word	0x08035f44
 8029714:	08033f48 	.word	0x08033f48
 8029718:	08035f48 	.word	0x08035f48

0802971c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 802971c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802971e:	b0ef      	sub	sp, #444	; 0x1bc
 8029720:	af08      	add	r7, sp, #32
 8029722:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8029726:	f5a4 74c2 	sub.w	r4, r4, #388	; 0x184
 802972a:	6020      	str	r0, [r4, #0]
 802972c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8029730:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 8029734:	6001      	str	r1, [r0, #0]
 8029736:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 802973a:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 802973e:	600a      	str	r2, [r1, #0]
 8029740:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8029744:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8029748:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 802974a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802974e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8029752:	681b      	ldr	r3, [r3, #0]
 8029754:	695b      	ldr	r3, [r3, #20]
 8029756:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 802975a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802975e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8029762:	681b      	ldr	r3, [r3, #0]
 8029764:	691b      	ldr	r3, [r3, #16]
 8029766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 802976a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802976e:	2b01      	cmp	r3, #1
 8029770:	f040 81d2 	bne.w	8029b18 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
 8029774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029778:	2b01      	cmp	r3, #1
 802977a:	f040 81cd 	bne.w	8029b18 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 802977e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029782:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029786:	681b      	ldr	r3, [r3, #0]
 8029788:	691b      	ldr	r3, [r3, #16]
 802978a:	425b      	negs	r3, r3
 802978c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 8029790:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029794:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029798:	681b      	ldr	r3, [r3, #0]
 802979a:	699b      	ldr	r3, [r3, #24]
 802979c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 80297a0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80297a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80297a8:	681b      	ldr	r3, [r3, #0]
 80297aa:	689b      	ldr	r3, [r3, #8]
 80297ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 80297b0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80297b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80297b8:	681b      	ldr	r3, [r3, #0]
 80297ba:	685b      	ldr	r3, [r3, #4]
 80297bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 80297c0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80297c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80297c8:	681b      	ldr	r3, [r3, #0]
 80297ca:	685b      	ldr	r3, [r3, #4]
 80297cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 80297d0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80297d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80297d8:	681b      	ldr	r3, [r3, #0]
 80297da:	681b      	ldr	r3, [r3, #0]
 80297dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 80297e0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80297e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80297e8:	681b      	ldr	r3, [r3, #0]
 80297ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80297ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 80297f0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80297f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80297f8:	681b      	ldr	r3, [r3, #0]
 80297fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80297fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 8029800:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029804:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029808:	681b      	ldr	r3, [r3, #0]
 802980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 802980c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 8029810:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029814:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029818:	681b      	ldr	r3, [r3, #0]
 802981a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 802981c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8029820:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8029824:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8029828:	4618      	mov	r0, r3
 802982a:	f001 fc89 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802982e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029836:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 802983a:	4618      	mov	r0, r3
 802983c:	f001 fc80 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8029840:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029844:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8029848:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 802984c:	4618      	mov	r0, r3
 802984e:	f001 fc77 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8029852:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029856:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802985a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 802985e:	4618      	mov	r0, r3
 8029860:	f001 fc6e 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8029864:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8029868:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802986c:	429a      	cmp	r2, r3
 802986e:	dd01      	ble.n	8029874 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x158>
 8029870:	f007 fd70 	bl	8031354 <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8029874:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8029878:	4618      	mov	r0, r3
 802987a:	f7fe f924 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802987e:	4603      	mov	r3, r0
 8029880:	2b04      	cmp	r3, #4
 8029882:	d001      	beq.n	8029888 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x16c>
 8029884:	f007 fd66 	bl	8031354 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8029888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802988c:	4618      	mov	r0, r3
 802988e:	f7fe f91a 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8029892:	4603      	mov	r3, r0
 8029894:	2b04      	cmp	r3, #4
 8029896:	d001      	beq.n	802989c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x180>
 8029898:	f007 fd5c 	bl	8031354 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 802989c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80298a0:	4618      	mov	r0, r3
 80298a2:	f7fe f910 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80298a6:	4603      	mov	r3, r0
 80298a8:	2b04      	cmp	r3, #4
 80298aa:	d001      	beq.n	80298b0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x194>
 80298ac:	f007 fd52 	bl	8031354 <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80298b0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80298b4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80298b8:	2300      	movs	r3, #0
 80298ba:	2100      	movs	r1, #0
 80298bc:	f7ff fbc1 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80298c0:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80298c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80298c8:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80298cc:	2303      	movs	r3, #3
 80298ce:	2103      	movs	r1, #3
 80298d0:	f7ff fbb7 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80298d4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80298d8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80298dc:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80298e0:	2303      	movs	r3, #3
 80298e2:	2100      	movs	r1, #0
 80298e4:	f7ff fbad 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80298e8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80298ec:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80298f0:	f7ff f856 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80298f4:	4603      	mov	r3, r0
 80298f6:	2b00      	cmp	r3, #0
 80298f8:	bf14      	ite	ne
 80298fa:	2301      	movne	r3, #1
 80298fc:	2300      	moveq	r3, #0
 80298fe:	b2db      	uxtb	r3, r3
 8029900:	2b00      	cmp	r3, #0
 8029902:	d00b      	beq.n	802991c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8029904:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029908:	4618      	mov	r0, r3
 802990a:	f7fe faaf 	bl	8027e6c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 802990e:	4602      	mov	r2, r0
 8029910:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8029914:	4293      	cmp	r3, r2
 8029916:	d001      	beq.n	802991c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
 8029918:	f007 fd1c 	bl	8031354 <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 802991c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029920:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8029924:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8029928:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 802992a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802992e:	2101      	movs	r1, #1
 8029930:	4618      	mov	r0, r3
 8029932:	f7fe fa63 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029936:	4602      	mov	r2, r0
 8029938:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802993c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8029940:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8029942:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8029946:	2102      	movs	r1, #2
 8029948:	4618      	mov	r0, r3
 802994a:	f7fe fa57 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802994e:	4602      	mov	r2, r0
 8029950:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029954:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8029958:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 802995a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802995e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8029962:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8029966:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 8029968:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802996c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8029970:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8029974:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 8029976:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802997a:	2101      	movs	r1, #1
 802997c:	4618      	mov	r0, r3
 802997e:	f7fe fa3d 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029982:	4602      	mov	r2, r0
 8029984:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029988:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 802998c:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 802998e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8029992:	2102      	movs	r1, #2
 8029994:	4618      	mov	r0, r3
 8029996:	f7fe fa31 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802999a:	4602      	mov	r2, r0
 802999c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80299a0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80299a4:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 80299a6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80299aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80299ae:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80299b2:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 80299b4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80299b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80299bc:	2201      	movs	r2, #1
 80299be:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 80299c0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80299c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80299c8:	2201      	movs	r2, #1
 80299ca:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 80299cc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80299d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80299d4:	2201      	movs	r2, #1
 80299d6:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 80299d8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80299dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80299e0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80299e4:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80299e6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80299ea:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80299ee:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80299f2:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80299f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80299f8:	2101      	movs	r1, #1
 80299fa:	4618      	mov	r0, r3
 80299fc:	f7fe f9fe 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029a00:	4602      	mov	r2, r0
 8029a02:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a06:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8029a0a:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 8029a0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8029a10:	2102      	movs	r1, #2
 8029a12:	4618      	mov	r0, r3
 8029a14:	f7fe f9f2 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 8029a18:	4602      	mov	r2, r0
 8029a1a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a1e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8029a22:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8029a24:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8029a2c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8029a30:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8029a32:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a36:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8029a3a:	2200      	movs	r2, #0
 8029a3c:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 8029a3e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8029a46:	2200      	movs	r2, #0
 8029a48:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 8029a4a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029a52:	681b      	ldr	r3, [r3, #0]
 8029a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029a56:	2b00      	cmp	r3, #0
 8029a58:	db17      	blt.n	8029a8a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x36e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8029a5a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8029a62:	681b      	ldr	r3, [r3, #0]
 8029a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029a66:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8029a6a:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8029a6e:	6812      	ldr	r2, [r2, #0]
 8029a70:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8029a72:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8029a76:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8029a7a:	6810      	ldr	r0, [r2, #0]
 8029a7c:	4798      	blx	r3
 8029a7e:	4602      	mov	r2, r0
 8029a80:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029a84:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8029a88:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 8029a8a:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8029a8e:	f7fe ff87 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8029a92:	4605      	mov	r5, r0
 8029a94:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8029a98:	f7fe ff82 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8029a9c:	4606      	mov	r6, r0
 8029a9e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8029aa2:	f7ff fabf 	bl	8029024 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8029aa6:	6078      	str	r0, [r7, #4]
 8029aa8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8029aac:	f7fe ff87 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8029ab0:	4603      	mov	r3, r0
 8029ab2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8029ab6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8029aba:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8029abe:	f107 001c 	add.w	r0, r7, #28
 8029ac2:	9306      	str	r3, [sp, #24]
 8029ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029ac8:	9305      	str	r3, [sp, #20]
 8029aca:	687b      	ldr	r3, [r7, #4]
 8029acc:	9304      	str	r3, [sp, #16]
 8029ace:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8029ad2:	9303      	str	r3, [sp, #12]
 8029ad4:	9602      	str	r6, [sp, #8]
 8029ad6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8029ada:	9301      	str	r3, [sp, #4]
 8029adc:	9500      	str	r5, [sp, #0]
 8029ade:	4623      	mov	r3, r4
 8029ae0:	f7ed fb13 	bl	801710a <arm_convolve_wrapper_s8>
 8029ae4:	4603      	mov	r3, r0
 8029ae6:	2b00      	cmp	r3, #0
 8029ae8:	d001      	beq.n	8029aee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3d2>
 8029aea:	f007 fc33 	bl	8031354 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8029aee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029af2:	4618      	mov	r0, r3
 8029af4:	f7fd ffd1 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8029af8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8029afc:	4618      	mov	r0, r3
 8029afe:	f7fd ffcc 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8029b02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8029b06:	4618      	mov	r0, r3
 8029b08:	f7fd ffc7 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8029b0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8029b10:	4618      	mov	r0, r3
 8029b12:	f7fd ffc2 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 8029b16:	e075      	b.n	8029c04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x4e8>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 8029b18:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029b1c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029b20:	681a      	ldr	r2, [r3, #0]
 8029b22:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8029b26:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029b2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8029b2e:	6819      	ldr	r1, [r3, #0]
 8029b30:	f000 f9fd 	bl	8029f2e <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 8029b34:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029b38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029b3c:	681b      	ldr	r3, [r3, #0]
 8029b3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 8029b40:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8029b44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8029b48:	681b      	ldr	r3, [r3, #0]
 8029b4a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 8029b4c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8029b50:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8029b54:	4618      	mov	r0, r3
 8029b56:	f001 faf3 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8029b5a:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8029b5e:	f7fe ff1f 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8029b62:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8029b64:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8029b68:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8029b6c:	4618      	mov	r0, r3
 8029b6e:	f001 fae7 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8029b72:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8029b76:	f7fe ff13 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8029b7a:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8029b7c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8029b80:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8029b84:	4618      	mov	r0, r3
 8029b86:	f001 fadb 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8029b8a:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8029b8e:	f7ff fa49 	bl	8029024 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8029b92:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8029b94:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8029b98:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8029b9c:	4618      	mov	r0, r3
 8029b9e:	f001 facf 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8029ba2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8029ba6:	f7fe ff0a 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8029baa:	4603      	mov	r3, r0
 8029bac:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8029bb0:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8029bb4:	9306      	str	r3, [sp, #24]
 8029bb6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8029bba:	9305      	str	r3, [sp, #20]
 8029bbc:	683b      	ldr	r3, [r7, #0]
 8029bbe:	9304      	str	r3, [sp, #16]
 8029bc0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8029bc4:	9303      	str	r3, [sp, #12]
 8029bc6:	687b      	ldr	r3, [r7, #4]
 8029bc8:	9302      	str	r3, [sp, #8]
 8029bca:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8029bce:	9301      	str	r3, [sp, #4]
 8029bd0:	9600      	str	r6, [sp, #0]
 8029bd2:	4613      	mov	r3, r2
 8029bd4:	462a      	mov	r2, r5
 8029bd6:	4621      	mov	r1, r4
 8029bd8:	f7ff fa62 	bl	80290a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8029bdc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8029be0:	4618      	mov	r0, r3
 8029be2:	f7fd ff5a 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 8029be6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8029bea:	4618      	mov	r0, r3
 8029bec:	f7fd ff55 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8029bf0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8029bf4:	4618      	mov	r0, r3
 8029bf6:	f7fd ff50 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 8029bfa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8029bfe:	4618      	mov	r0, r3
 8029c00:	f7fd ff4b 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 8029c04:	2300      	movs	r3, #0
}
 8029c06:	4618      	mov	r0, r3
 8029c08:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8029c0c:	46bd      	mov	sp, r7
 8029c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08029c10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8029c10:	b590      	push	{r4, r7, lr}
 8029c12:	b0bb      	sub	sp, #236	; 0xec
 8029c14:	af06      	add	r7, sp, #24
 8029c16:	6078      	str	r0, [r7, #4]
 8029c18:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 8029c1a:	4b5a      	ldr	r3, [pc, #360]	; (8029d84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x174>)
 8029c1c:	681b      	ldr	r3, [r3, #0]
 8029c1e:	461a      	mov	r2, r3
 8029c20:	6839      	ldr	r1, [r7, #0]
 8029c22:	6878      	ldr	r0, [r7, #4]
 8029c24:	f7fe f9be 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8029c28:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 8029c2c:	4b56      	ldr	r3, [pc, #344]	; (8029d88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>)
 8029c2e:	681b      	ldr	r3, [r3, #0]
 8029c30:	461a      	mov	r2, r3
 8029c32:	6839      	ldr	r1, [r7, #0]
 8029c34:	6878      	ldr	r0, [r7, #4]
 8029c36:	f7fe f9b5 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8029c3a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 8029c3e:	6838      	ldr	r0, [r7, #0]
 8029c40:	f7ff f9d6 	bl	8028ff0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8029c44:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 8029c46:	2b03      	cmp	r3, #3
 8029c48:	d108      	bne.n	8029c5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c>
 8029c4a:	4b50      	ldr	r3, [pc, #320]	; (8029d8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17c>)
 8029c4c:	681b      	ldr	r3, [r3, #0]
 8029c4e:	461a      	mov	r2, r3
 8029c50:	6839      	ldr	r1, [r7, #0]
 8029c52:	6878      	ldr	r0, [r7, #4]
 8029c54:	f7fe f9a6 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8029c58:	4603      	mov	r3, r0
 8029c5a:	e000      	b.n	8029c5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 8029c5c:	2300      	movs	r3, #0
          : nullptr;
 8029c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 8029c62:	4b4b      	ldr	r3, [pc, #300]	; (8029d90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>)
 8029c64:	681b      	ldr	r3, [r3, #0]
 8029c66:	461a      	mov	r2, r3
 8029c68:	6839      	ldr	r1, [r7, #0]
 8029c6a:	6878      	ldr	r0, [r7, #4]
 8029c6c:	f7fe f9aa 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8029c70:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 8029c74:	683b      	ldr	r3, [r7, #0]
 8029c76:	695b      	ldr	r3, [r3, #20]
 8029c78:	2b00      	cmp	r3, #0
 8029c7a:	d101      	bne.n	8029c80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 8029c7c:	f007 fb6a 	bl	8031354 <abort>
  const auto& params =
 8029c80:	683b      	ldr	r3, [r7, #0]
 8029c82:	695b      	ldr	r3, [r3, #20]
 8029c84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 8029c88:	683b      	ldr	r3, [r7, #0]
 8029c8a:	691b      	ldr	r3, [r3, #16]
 8029c8c:	2b00      	cmp	r3, #0
 8029c8e:	d101      	bne.n	8029c94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 8029c90:	f007 fb60 	bl	8031354 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8029c94:	683b      	ldr	r3, [r7, #0]
 8029c96:	691b      	ldr	r3, [r3, #16]
 8029c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8029c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029ca0:	7a1a      	ldrb	r2, [r3, #8]
 8029ca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8029ca6:	7a1b      	ldrb	r3, [r3, #8]
 8029ca8:	429a      	cmp	r2, r3
 8029caa:	d016      	beq.n	8029cda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
 8029cac:	687b      	ldr	r3, [r7, #4]
 8029cae:	695c      	ldr	r4, [r3, #20]
 8029cb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029cb4:	7a1b      	ldrb	r3, [r3, #8]
 8029cb6:	461a      	mov	r2, r3
 8029cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8029cbc:	7a1b      	ldrb	r3, [r3, #8]
 8029cbe:	9303      	str	r3, [sp, #12]
 8029cc0:	9202      	str	r2, [sp, #8]
 8029cc2:	4b34      	ldr	r3, [pc, #208]	; (8029d94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>)
 8029cc4:	9301      	str	r3, [sp, #4]
 8029cc6:	4b34      	ldr	r3, [pc, #208]	; (8029d98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8029cc8:	9300      	str	r3, [sp, #0]
 8029cca:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8029cce:	4a33      	ldr	r2, [pc, #204]	; (8029d9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>)
 8029cd0:	4933      	ldr	r1, [pc, #204]	; (8029da0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x190>)
 8029cd2:	6878      	ldr	r0, [r7, #4]
 8029cd4:	47a0      	blx	r4
 8029cd6:	2301      	movs	r3, #1
 8029cd8:	e04f      	b.n	8029d7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8029cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029cde:	7a1a      	ldrb	r2, [r3, #8]
 8029ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8029ce4:	7a1b      	ldrb	r3, [r3, #8]
 8029ce6:	429a      	cmp	r2, r3
 8029ce8:	d006      	beq.n	8029cf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>
 8029cea:	687b      	ldr	r3, [r7, #4]
 8029cec:	695b      	ldr	r3, [r3, #20]
 8029cee:	492d      	ldr	r1, [pc, #180]	; (8029da4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x194>)
 8029cf0:	6878      	ldr	r0, [r7, #4]
 8029cf2:	4798      	blx	r3
 8029cf4:	2301      	movs	r3, #1
 8029cf6:	e040      	b.n	8029d7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
                     "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 8029cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029cfc:	7a1b      	ldrb	r3, [r3, #8]
 8029cfe:	2b01      	cmp	r3, #1
 8029d00:	d002      	beq.n	8029d08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>
 8029d02:	2b09      	cmp	r3, #9
 8029d04:	d011      	beq.n	8029d2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11a>
 8029d06:	e028      	b.n	8029d5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_CONV_2D_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8029d08:	687b      	ldr	r3, [r7, #4]
 8029d0a:	695c      	ldr	r4, [r3, #20]
 8029d0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029d10:	7a1b      	ldrb	r3, [r3, #8]
 8029d12:	4618      	mov	r0, r3
 8029d14:	f7fc ff7a 	bl	8026c0c <TfLiteTypeGetName>
 8029d18:	4602      	mov	r2, r0
 8029d1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029d1e:	7a1b      	ldrb	r3, [r3, #8]
 8029d20:	4921      	ldr	r1, [pc, #132]	; (8029da8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x198>)
 8029d22:	6878      	ldr	r0, [r7, #4]
 8029d24:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8029d26:	2301      	movs	r3, #1
 8029d28:	e027      	b.n	8029d7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 8029d2a:	2300      	movs	r3, #0
 8029d2c:	9304      	str	r3, [sp, #16]
 8029d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8029d32:	9303      	str	r3, [sp, #12]
 8029d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8029d38:	9302      	str	r3, [sp, #8]
 8029d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8029d3e:	9301      	str	r3, [sp, #4]
 8029d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029d44:	9300      	str	r3, [sp, #0]
 8029d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8029d4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8029d4e:	6839      	ldr	r1, [r7, #0]
 8029d50:	6878      	ldr	r0, [r7, #4]
 8029d52:	f7ff fce3 	bl	802971c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 8029d56:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 8029d58:	e00f      	b.n	8029d7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8029d5a:	687b      	ldr	r3, [r7, #4]
 8029d5c:	695c      	ldr	r4, [r3, #20]
 8029d5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029d62:	7a1b      	ldrb	r3, [r3, #8]
 8029d64:	4618      	mov	r0, r3
 8029d66:	f7fc ff51 	bl	8026c0c <TfLiteTypeGetName>
 8029d6a:	4602      	mov	r2, r0
 8029d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8029d70:	7a1b      	ldrb	r3, [r3, #8]
 8029d72:	490d      	ldr	r1, [pc, #52]	; (8029da8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x198>)
 8029d74:	6878      	ldr	r0, [r7, #4]
 8029d76:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8029d78:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8029d7a:	4618      	mov	r0, r3
 8029d7c:	37d4      	adds	r7, #212	; 0xd4
 8029d7e:	46bd      	mov	sp, r7
 8029d80:	bd90      	pop	{r4, r7, pc}
 8029d82:	bf00      	nop
 8029d84:	08035f38 	.word	0x08035f38
 8029d88:	08035f3c 	.word	0x08035f3c
 8029d8c:	08035f40 	.word	0x08035f40
 8029d90:	08035f44 	.word	0x08035f44
 8029d94:	08033f78 	.word	0x08033f78
 8029d98:	08033f88 	.word	0x08033f88
 8029d9c:	08033e80 	.word	0x08033e80
 8029da0:	08033f5c 	.word	0x08033f5c
 8029da4:	08033f94 	.word	0x08033f94
 8029da8:	0803404c 	.word	0x0803404c

08029dac <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8029dac:	b4b0      	push	{r4, r5, r7}
 8029dae:	b083      	sub	sp, #12
 8029db0:	af00      	add	r7, sp, #0
 8029db2:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8029db4:	687b      	ldr	r3, [r7, #4]
 8029db6:	4a07      	ldr	r2, [pc, #28]	; (8029dd4 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 8029db8:	461c      	mov	r4, r3
 8029dba:	4615      	mov	r5, r2
 8029dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8029dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8029dc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8029dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8029dc8:	6878      	ldr	r0, [r7, #4]
 8029dca:	370c      	adds	r7, #12
 8029dcc:	46bd      	mov	sp, r7
 8029dce:	bcb0      	pop	{r4, r5, r7}
 8029dd0:	4770      	bx	lr
 8029dd2:	bf00      	nop
 8029dd4:	08034068 	.word	0x08034068

08029dd8 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8029dd8:	b480      	push	{r7}
 8029dda:	b087      	sub	sp, #28
 8029ddc:	af00      	add	r7, sp, #0
 8029dde:	60f8      	str	r0, [r7, #12]
 8029de0:	60b9      	str	r1, [r7, #8]
 8029de2:	607a      	str	r2, [r7, #4]
 8029de4:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8029de6:	683b      	ldr	r3, [r7, #0]
 8029de8:	3b01      	subs	r3, #1
 8029dea:	68ba      	ldr	r2, [r7, #8]
 8029dec:	fb02 f303 	mul.w	r3, r2, r3
 8029df0:	3301      	adds	r3, #1
 8029df2:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8029df4:	6a3b      	ldr	r3, [r7, #32]
 8029df6:	3b01      	subs	r3, #1
 8029df8:	68fa      	ldr	r2, [r7, #12]
 8029dfa:	fb03 f202 	mul.w	r2, r3, r2
 8029dfe:	697b      	ldr	r3, [r7, #20]
 8029e00:	441a      	add	r2, r3
  int total_padding =
 8029e02:	687b      	ldr	r3, [r7, #4]
 8029e04:	1ad3      	subs	r3, r2, r3
 8029e06:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8029e08:	693b      	ldr	r3, [r7, #16]
 8029e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029e0e:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8029e10:	693b      	ldr	r3, [r7, #16]
 8029e12:	2b00      	cmp	r3, #0
 8029e14:	f003 0301 	and.w	r3, r3, #1
 8029e18:	bfb8      	it	lt
 8029e1a:	425b      	neglt	r3, r3
 8029e1c:	461a      	mov	r2, r3
 8029e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e20:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8029e22:	693b      	ldr	r3, [r7, #16]
 8029e24:	0fda      	lsrs	r2, r3, #31
 8029e26:	4413      	add	r3, r2
 8029e28:	105b      	asrs	r3, r3, #1
}
 8029e2a:	4618      	mov	r0, r3
 8029e2c:	371c      	adds	r7, #28
 8029e2e:	46bd      	mov	sp, r7
 8029e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e34:	4770      	bx	lr

08029e36 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8029e36:	b480      	push	{r7}
 8029e38:	b087      	sub	sp, #28
 8029e3a:	af00      	add	r7, sp, #0
 8029e3c:	60b9      	str	r1, [r7, #8]
 8029e3e:	607a      	str	r2, [r7, #4]
 8029e40:	603b      	str	r3, [r7, #0]
 8029e42:	4603      	mov	r3, r0
 8029e44:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	3b01      	subs	r3, #1
 8029e4a:	6a3a      	ldr	r2, [r7, #32]
 8029e4c:	fb02 f303 	mul.w	r3, r2, r3
 8029e50:	3301      	adds	r3, #1
 8029e52:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 8029e54:	683b      	ldr	r3, [r7, #0]
 8029e56:	2b00      	cmp	r3, #0
 8029e58:	d101      	bne.n	8029e5e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 8029e5a:	2300      	movs	r3, #0
 8029e5c:	e017      	b.n	8029e8e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 8029e5e:	7bfb      	ldrb	r3, [r7, #15]
 8029e60:	2b01      	cmp	r3, #1
 8029e62:	d002      	beq.n	8029e6a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 8029e64:	2b02      	cmp	r3, #2
 8029e66:	d008      	beq.n	8029e7a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 8029e68:	e010      	b.n	8029e8c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8029e6a:	68ba      	ldr	r2, [r7, #8]
 8029e6c:	683b      	ldr	r3, [r7, #0]
 8029e6e:	4413      	add	r3, r2
 8029e70:	1e5a      	subs	r2, r3, #1
 8029e72:	683b      	ldr	r3, [r7, #0]
 8029e74:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e78:	e009      	b.n	8029e8e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8029e7a:	68ba      	ldr	r2, [r7, #8]
 8029e7c:	683b      	ldr	r3, [r7, #0]
 8029e7e:	441a      	add	r2, r3
 8029e80:	697b      	ldr	r3, [r7, #20]
 8029e82:	1ad2      	subs	r2, r2, r3
 8029e84:	683b      	ldr	r3, [r7, #0]
 8029e86:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e8a:	e000      	b.n	8029e8e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 8029e8c:	2300      	movs	r3, #0
  }
}
 8029e8e:	4618      	mov	r0, r3
 8029e90:	371c      	adds	r7, #28
 8029e92:	46bd      	mov	sp, r7
 8029e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e98:	4770      	bx	lr

08029e9a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8029e9a:	b580      	push	{r7, lr}
 8029e9c:	b088      	sub	sp, #32
 8029e9e:	af02      	add	r7, sp, #8
 8029ea0:	60f8      	str	r0, [r7, #12]
 8029ea2:	60b9      	str	r1, [r7, #8]
 8029ea4:	607a      	str	r2, [r7, #4]
 8029ea6:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8029ea8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8029eac:	6a3b      	ldr	r3, [r7, #32]
 8029eae:	9300      	str	r3, [sp, #0]
 8029eb0:	687b      	ldr	r3, [r7, #4]
 8029eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8029eb6:	f7ff ffbe 	bl	8029e36 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8029eba:	4602      	mov	r2, r0
 8029ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029ebe:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8029ec0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8029ec4:	683b      	ldr	r3, [r7, #0]
 8029ec6:	9300      	str	r3, [sp, #0]
 8029ec8:	68bb      	ldr	r3, [r7, #8]
 8029eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029ece:	f7ff ffb2 	bl	8029e36 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8029ed2:	4602      	mov	r2, r0
 8029ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029ed6:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8029ed8:	2300      	movs	r3, #0
 8029eda:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8029edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029ede:	681b      	ldr	r3, [r3, #0]
 8029ee0:	f107 0214 	add.w	r2, r7, #20
 8029ee4:	9201      	str	r2, [sp, #4]
 8029ee6:	9300      	str	r3, [sp, #0]
 8029ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029eec:	6839      	ldr	r1, [r7, #0]
 8029eee:	68b8      	ldr	r0, [r7, #8]
 8029ef0:	f7ff ff72 	bl	8029dd8 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8029ef4:	4602      	mov	r2, r0
  padding_values.height =
 8029ef6:	68fb      	ldr	r3, [r7, #12]
 8029ef8:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8029efa:	697a      	ldr	r2, [r7, #20]
 8029efc:	68fb      	ldr	r3, [r7, #12]
 8029efe:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8029f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029f02:	681b      	ldr	r3, [r3, #0]
 8029f04:	f107 0214 	add.w	r2, r7, #20
 8029f08:	9201      	str	r2, [sp, #4]
 8029f0a:	9300      	str	r3, [sp, #0]
 8029f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029f10:	6a39      	ldr	r1, [r7, #32]
 8029f12:	6878      	ldr	r0, [r7, #4]
 8029f14:	f7ff ff60 	bl	8029dd8 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8029f18:	4602      	mov	r2, r0
  padding_values.width =
 8029f1a:	68fb      	ldr	r3, [r7, #12]
 8029f1c:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8029f1e:	697a      	ldr	r2, [r7, #20]
 8029f20:	68fb      	ldr	r3, [r7, #12]
 8029f22:	609a      	str	r2, [r3, #8]
  return padding_values;
 8029f24:	bf00      	nop
}
 8029f26:	68f8      	ldr	r0, [r7, #12]
 8029f28:	3718      	adds	r7, #24
 8029f2a:	46bd      	mov	sp, r7
 8029f2c:	bd80      	pop	{r7, pc}

08029f2e <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
}

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 8029f2e:	b580      	push	{r7, lr}
 8029f30:	b084      	sub	sp, #16
 8029f32:	af00      	add	r7, sp, #0
 8029f34:	60f8      	str	r0, [r7, #12]
 8029f36:	60b9      	str	r1, [r7, #8]
 8029f38:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 8029f3a:	687b      	ldr	r3, [r7, #4]
 8029f3c:	691b      	ldr	r3, [r3, #16]
 8029f3e:	425a      	negs	r2, r3
 8029f40:	68fb      	ldr	r3, [r7, #12]
 8029f42:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 8029f44:	687b      	ldr	r3, [r7, #4]
 8029f46:	695b      	ldr	r3, [r3, #20]
 8029f48:	425a      	negs	r2, r3
 8029f4a:	68fb      	ldr	r3, [r7, #12]
 8029f4c:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 8029f4e:	687b      	ldr	r3, [r7, #4]
 8029f50:	699a      	ldr	r2, [r3, #24]
 8029f52:	68fb      	ldr	r3, [r7, #12]
 8029f54:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 8029f56:	687b      	ldr	r3, [r7, #4]
 8029f58:	69da      	ldr	r2, [r3, #28]
 8029f5a:	68fb      	ldr	r3, [r7, #12]
 8029f5c:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 8029f5e:	687b      	ldr	r3, [r7, #4]
 8029f60:	6a1b      	ldr	r3, [r3, #32]
 8029f62:	425a      	negs	r2, r3
 8029f64:	68fb      	ldr	r3, [r7, #12]
 8029f66:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 8029f68:	68bb      	ldr	r3, [r7, #8]
 8029f6a:	781b      	ldrb	r3, [r3, #0]
 8029f6c:	4618      	mov	r0, r3
 8029f6e:	f001 f909 	bl	802b184 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 8029f72:	4603      	mov	r3, r0
 8029f74:	461a      	mov	r2, r3
 8029f76:	68fb      	ldr	r3, [r7, #12]
 8029f78:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 8029f7a:	687b      	ldr	r3, [r7, #4]
 8029f7c:	685b      	ldr	r3, [r3, #4]
 8029f7e:	b21a      	sxth	r2, r3
 8029f80:	68fb      	ldr	r3, [r7, #12]
 8029f82:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 8029f84:	687b      	ldr	r3, [r7, #4]
 8029f86:	681b      	ldr	r3, [r3, #0]
 8029f88:	b21a      	sxth	r2, r3
 8029f8a:	68fb      	ldr	r3, [r7, #12]
 8029f8c:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 8029f8e:	68bb      	ldr	r3, [r7, #8]
 8029f90:	689b      	ldr	r3, [r3, #8]
 8029f92:	b21a      	sxth	r2, r3
 8029f94:	68fb      	ldr	r3, [r7, #12]
 8029f96:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 8029f98:	68bb      	ldr	r3, [r7, #8]
 8029f9a:	685b      	ldr	r3, [r3, #4]
 8029f9c:	b21a      	sxth	r2, r3
 8029f9e:	68fb      	ldr	r3, [r7, #12]
 8029fa0:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 8029fa2:	68bb      	ldr	r3, [r7, #8]
 8029fa4:	695b      	ldr	r3, [r3, #20]
 8029fa6:	b21a      	sxth	r2, r3
 8029fa8:	68fb      	ldr	r3, [r7, #12]
 8029faa:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 8029fac:	68bb      	ldr	r3, [r7, #8]
 8029fae:	691b      	ldr	r3, [r3, #16]
 8029fb0:	b21a      	sxth	r2, r3
 8029fb2:	68fb      	ldr	r3, [r7, #12]
 8029fb4:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 8029fb6:	687b      	ldr	r3, [r7, #4]
 8029fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029fba:	68fb      	ldr	r3, [r7, #12]
 8029fbc:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8029fbe:	687b      	ldr	r3, [r7, #4]
 8029fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029fc2:	68fb      	ldr	r3, [r7, #12]
 8029fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 8029fc6:	bf00      	nop
}
 8029fc8:	68f8      	ldr	r0, [r7, #12]
 8029fca:	3710      	adds	r7, #16
 8029fcc:	46bd      	mov	sp, r7
 8029fce:	bd80      	pop	{r7, pc}

08029fd0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 8029fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029fd2:	b09d      	sub	sp, #116	; 0x74
 8029fd4:	af0a      	add	r7, sp, #40	; 0x28
 8029fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8029fd8:	6239      	str	r1, [r7, #32]
 8029fda:	61fa      	str	r2, [r7, #28]
 8029fdc:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8029fde:	6a3b      	ldr	r3, [r7, #32]
 8029fe0:	681b      	ldr	r3, [r3, #0]
 8029fe2:	681b      	ldr	r3, [r3, #0]
 8029fe4:	2b03      	cmp	r3, #3
 8029fe6:	bf0c      	ite	eq
 8029fe8:	2301      	moveq	r3, #1
 8029fea:	2300      	movne	r3, #0
 8029fec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8029ff0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8029ff4:	f083 0301 	eor.w	r3, r3, #1
 8029ff8:	b2db      	uxtb	r3, r3
 8029ffa:	2b00      	cmp	r3, #0
 8029ffc:	d00f      	beq.n	802a01e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 8029ffe:	6a3b      	ldr	r3, [r7, #32]
 802a000:	681b      	ldr	r3, [r3, #0]
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	2b02      	cmp	r3, #2
 802a006:	d00a      	beq.n	802a01e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 802a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a00a:	695c      	ldr	r4, [r3, #20]
 802a00c:	4b68      	ldr	r3, [pc, #416]	; (802a1b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 802a00e:	9300      	str	r3, [sp, #0]
 802a010:	2356      	movs	r3, #86	; 0x56
 802a012:	4a68      	ldr	r2, [pc, #416]	; (802a1b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802a014:	4968      	ldr	r1, [pc, #416]	; (802a1b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802a016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a018:	47a0      	blx	r4
 802a01a:	2301      	movs	r3, #1
 802a01c:	e0c4      	b.n	802a1a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 802a01e:	6a3b      	ldr	r3, [r7, #32]
 802a020:	685b      	ldr	r3, [r3, #4]
 802a022:	681b      	ldr	r3, [r3, #0]
 802a024:	2b01      	cmp	r3, #1
 802a026:	d012      	beq.n	802a04e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 802a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a02a:	695c      	ldr	r4, [r3, #20]
 802a02c:	6a3b      	ldr	r3, [r7, #32]
 802a02e:	685b      	ldr	r3, [r3, #4]
 802a030:	681b      	ldr	r3, [r3, #0]
 802a032:	2201      	movs	r2, #1
 802a034:	9203      	str	r2, [sp, #12]
 802a036:	9302      	str	r3, [sp, #8]
 802a038:	4b60      	ldr	r3, [pc, #384]	; (802a1bc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 802a03a:	9301      	str	r3, [sp, #4]
 802a03c:	4b60      	ldr	r3, [pc, #384]	; (802a1c0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 802a03e:	9300      	str	r3, [sp, #0]
 802a040:	2357      	movs	r3, #87	; 0x57
 802a042:	4a5c      	ldr	r2, [pc, #368]	; (802a1b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802a044:	495f      	ldr	r1, [pc, #380]	; (802a1c4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 802a046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a048:	47a0      	blx	r4
 802a04a:	2301      	movs	r3, #1
 802a04c:	e0ac      	b.n	802a1a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 802a04e:	69fb      	ldr	r3, [r7, #28]
 802a050:	781b      	ldrb	r3, [r3, #0]
 802a052:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 802a056:	69fb      	ldr	r3, [r7, #28]
 802a058:	6899      	ldr	r1, [r3, #8]
 802a05a:	69fb      	ldr	r3, [r7, #28]
 802a05c:	685c      	ldr	r4, [r3, #4]
 802a05e:	69fb      	ldr	r3, [r7, #28]
 802a060:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 802a062:	69fb      	ldr	r3, [r7, #28]
 802a064:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 802a066:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 802a068:	f107 0008 	add.w	r0, r7, #8
 802a06c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802a070:	9207      	str	r2, [sp, #28]
 802a072:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802a076:	9206      	str	r2, [sp, #24]
 802a078:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802a07c:	9205      	str	r2, [sp, #20]
 802a07e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802a080:	9204      	str	r2, [sp, #16]
 802a082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802a084:	9203      	str	r2, [sp, #12]
 802a086:	69ba      	ldr	r2, [r7, #24]
 802a088:	9202      	str	r2, [sp, #8]
 802a08a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802a08c:	9201      	str	r2, [sp, #4]
 802a08e:	9300      	str	r3, [sp, #0]
 802a090:	462b      	mov	r3, r5
 802a092:	4622      	mov	r2, r4
 802a094:	f7ff ff01 	bl	8029e9a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 802a098:	4634      	mov	r4, r6
 802a09a:	f107 0308 	add.w	r3, r7, #8
 802a09e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a0a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 802a0a4:	2200      	movs	r2, #0
 802a0a6:	6a39      	ldr	r1, [r7, #32]
 802a0a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a0aa:	f7fd f8f5 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802a0ae:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 802a0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a0b2:	2b00      	cmp	r3, #0
 802a0b4:	d10a      	bne.n	802a0cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 802a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0b8:	695c      	ldr	r4, [r3, #20]
 802a0ba:	4b43      	ldr	r3, [pc, #268]	; (802a1c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 802a0bc:	9300      	str	r3, [sp, #0]
 802a0be:	2361      	movs	r3, #97	; 0x61
 802a0c0:	4a3c      	ldr	r2, [pc, #240]	; (802a1b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802a0c2:	493d      	ldr	r1, [pc, #244]	; (802a1b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802a0c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a0c6:	47a0      	blx	r4
 802a0c8:	2301      	movs	r3, #1
 802a0ca:	e06d      	b.n	802a1a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 802a0cc:	2201      	movs	r2, #1
 802a0ce:	6a39      	ldr	r1, [r7, #32]
 802a0d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a0d2:	f7fd f8e1 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802a0d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 802a0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a0da:	2b00      	cmp	r3, #0
 802a0dc:	d10a      	bne.n	802a0f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 802a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0e0:	695c      	ldr	r4, [r3, #20]
 802a0e2:	4b3a      	ldr	r3, [pc, #232]	; (802a1cc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 802a0e4:	9300      	str	r3, [sp, #0]
 802a0e6:	2363      	movs	r3, #99	; 0x63
 802a0e8:	4a32      	ldr	r2, [pc, #200]	; (802a1b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802a0ea:	4933      	ldr	r1, [pc, #204]	; (802a1b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802a0ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a0ee:	47a0      	blx	r4
 802a0f0:	2301      	movs	r3, #1
 802a0f2:	e059      	b.n	802a1a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 802a0f4:	2202      	movs	r2, #2
 802a0f6:	6a39      	ldr	r1, [r7, #32]
 802a0f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a0fa:	f7fd f8fd 	bl	80272f8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 802a0fe:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 802a100:	2200      	movs	r2, #0
 802a102:	6a39      	ldr	r1, [r7, #32]
 802a104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a106:	f7fd f8d7 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802a10a:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 802a10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a10e:	2b00      	cmp	r3, #0
 802a110:	d10a      	bne.n	802a128 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 802a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a114:	695c      	ldr	r4, [r3, #20]
 802a116:	4b2e      	ldr	r3, [pc, #184]	; (802a1d0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 802a118:	9300      	str	r3, [sp, #0]
 802a11a:	2367      	movs	r3, #103	; 0x67
 802a11c:	4a25      	ldr	r2, [pc, #148]	; (802a1b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802a11e:	4926      	ldr	r1, [pc, #152]	; (802a1b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802a120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a122:	47a0      	blx	r4
 802a124:	2301      	movs	r3, #1
 802a126:	e03f      	b.n	802a1a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 802a128:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 802a12c:	2b01      	cmp	r3, #1
 802a12e:	d02e      	beq.n	802a18e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 802a130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a132:	689b      	ldr	r3, [r3, #8]
 802a134:	685b      	ldr	r3, [r3, #4]
 802a136:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 802a138:	69fb      	ldr	r3, [r7, #28]
 802a13a:	330c      	adds	r3, #12
 802a13c:	607b      	str	r3, [r7, #4]
 802a13e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802a140:	321c      	adds	r2, #28
 802a142:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 802a144:	3120      	adds	r1, #32
 802a146:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 802a148:	302c      	adds	r0, #44	; 0x2c
 802a14a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 802a14c:	3430      	adds	r4, #48	; 0x30
 802a14e:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 802a150:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 802a152:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 802a154:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 802a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a158:	9308      	str	r3, [sp, #32]
 802a15a:	9607      	str	r6, [sp, #28]
 802a15c:	9506      	str	r5, [sp, #24]
 802a15e:	9405      	str	r4, [sp, #20]
 802a160:	9004      	str	r0, [sp, #16]
 802a162:	9103      	str	r1, [sp, #12]
 802a164:	9202      	str	r2, [sp, #8]
 802a166:	687b      	ldr	r3, [r7, #4]
 802a168:	9301      	str	r3, [sp, #4]
 802a16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a16c:	9300      	str	r3, [sp, #0]
 802a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802a172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802a174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a176:	f7fd f8cf 	bl	8027318 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 802a17a:	4603      	mov	r3, r0
 802a17c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 802a180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802a184:	2b00      	cmp	r3, #0
 802a186:	d002      	beq.n	802a18e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 802a188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802a18c:	e00c      	b.n	802a1a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 802a18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a190:	691a      	ldr	r2, [r3, #16]
 802a192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802a194:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 802a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a198:	691a      	ldr	r2, [r3, #16]
 802a19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802a19c:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 802a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a1a0:	691a      	ldr	r2, [r3, #16]
 802a1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802a1a4:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 802a1a6:	2300      	movs	r3, #0
}
 802a1a8:	4618      	mov	r0, r3
 802a1aa:	374c      	adds	r7, #76	; 0x4c
 802a1ac:	46bd      	mov	sp, r7
 802a1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a1b0:	08034234 	.word	0x08034234
 802a1b4:	08034190 	.word	0x08034190
 802a1b8:	0803421c 	.word	0x0803421c
 802a1bc:	08034274 	.word	0x08034274
 802a1c0:	08034278 	.word	0x08034278
 802a1c4:	08034258 	.word	0x08034258
 802a1c8:	0803428c 	.word	0x0803428c
 802a1cc:	080342a0 	.word	0x080342a0
 802a1d0:	080342b4 	.word	0x080342b4

0802a1d4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 802a1d4:	b580      	push	{r7, lr}
 802a1d6:	b082      	sub	sp, #8
 802a1d8:	af00      	add	r7, sp, #0
 802a1da:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 802a1dc:	687b      	ldr	r3, [r7, #4]
 802a1de:	2b00      	cmp	r3, #0
 802a1e0:	d101      	bne.n	802a1e6 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 802a1e2:	f007 f8b7 	bl	8031354 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 802a1e6:	687b      	ldr	r3, [r7, #4]
 802a1e8:	681b      	ldr	r3, [r3, #0]
}
 802a1ea:	4618      	mov	r0, r3
 802a1ec:	3708      	adds	r7, #8
 802a1ee:	46bd      	mov	sp, r7
 802a1f0:	bd80      	pop	{r7, pc}

0802a1f2 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 802a1f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802a1f6:	b090      	sub	sp, #64	; 0x40
 802a1f8:	af00      	add	r7, sp, #0
 802a1fa:	61f8      	str	r0, [r7, #28]
 802a1fc:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 802a1fe:	69fb      	ldr	r3, [r7, #28]
 802a200:	17da      	asrs	r2, r3, #31
 802a202:	613b      	str	r3, [r7, #16]
 802a204:	617a      	str	r2, [r7, #20]
 802a206:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802a20a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 802a20e:	69bb      	ldr	r3, [r7, #24]
 802a210:	17da      	asrs	r2, r3, #31
 802a212:	60bb      	str	r3, [r7, #8]
 802a214:	60fa      	str	r2, [r7, #12]
 802a216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a21a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 802a21e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 802a222:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802a226:	1886      	adds	r6, r0, r2
 802a228:	603e      	str	r6, [r7, #0]
 802a22a:	eb41 0303 	adc.w	r3, r1, r3
 802a22e:	607b      	str	r3, [r7, #4]
 802a230:	e9d7 2300 	ldrd	r2, r3, [r7]
 802a234:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 802a238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802a23c:	2b00      	cmp	r3, #0
 802a23e:	db04      	blt.n	802a24a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 802a240:	f04f 0201 	mov.w	r2, #1
 802a244:	f04f 0300 	mov.w	r3, #0
 802a248:	e003      	b.n	802a252 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 802a24a:	f04f 32ff 	mov.w	r2, #4294967295
 802a24e:	f04f 33ff 	mov.w	r3, #4294967295
 802a252:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 802a256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802a25a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802a25e:	eb10 0802 	adds.w	r8, r0, r2
 802a262:	eb41 0903 	adc.w	r9, r1, r3
 802a266:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 802a26a:	2200      	movs	r2, #0
 802a26c:	469a      	mov	sl, r3
 802a26e:	4693      	mov	fp, r2
 802a270:	eb1a 0408 	adds.w	r4, sl, r8
 802a274:	eb4b 0509 	adc.w	r5, fp, r9
 802a278:	f04f 0200 	mov.w	r2, #0
 802a27c:	f04f 0300 	mov.w	r3, #0
 802a280:	0862      	lsrs	r2, r4, #1
 802a282:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 802a286:	106b      	asrs	r3, r5, #1
 802a288:	4613      	mov	r3, r2
}
 802a28a:	4618      	mov	r0, r3
 802a28c:	3740      	adds	r7, #64	; 0x40
 802a28e:	46bd      	mov	sp, r7
 802a290:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802a294:	4770      	bx	lr

0802a296 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 802a296:	b580      	push	{r7, lr}
 802a298:	b084      	sub	sp, #16
 802a29a:	af00      	add	r7, sp, #0
 802a29c:	60f8      	str	r0, [r7, #12]
 802a29e:	60b9      	str	r1, [r7, #8]
 802a2a0:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 802a2a2:	68fa      	ldr	r2, [r7, #12]
 802a2a4:	687b      	ldr	r3, [r7, #4]
 802a2a6:	fa02 f303 	lsl.w	r3, r2, r3
 802a2aa:	68b9      	ldr	r1, [r7, #8]
 802a2ac:	4618      	mov	r0, r3
 802a2ae:	f7fd fd2f 	bl	8027d10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802a2b2:	4603      	mov	r3, r0
}
 802a2b4:	4618      	mov	r0, r3
 802a2b6:	3710      	adds	r7, #16
 802a2b8:	46bd      	mov	sp, r7
 802a2ba:	bd80      	pop	{r7, pc}

0802a2bc <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 802a2bc:	b580      	push	{r7, lr}
 802a2be:	b088      	sub	sp, #32
 802a2c0:	af00      	add	r7, sp, #0
 802a2c2:	60f8      	str	r0, [r7, #12]
 802a2c4:	60b9      	str	r1, [r7, #8]
 802a2c6:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 802a2c8:	68fb      	ldr	r3, [r7, #12]
 802a2ca:	4618      	mov	r0, r3
 802a2cc:	f000 f821 	bl	802a312 <_ZN6tflite17CountLeadingZerosImEEiT_>
 802a2d0:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 802a2d2:	68ba      	ldr	r2, [r7, #8]
 802a2d4:	69fb      	ldr	r3, [r7, #28]
 802a2d6:	1ad2      	subs	r2, r2, r3
 802a2d8:	687b      	ldr	r3, [r7, #4]
 802a2da:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 802a2dc:	68fa      	ldr	r2, [r7, #12]
 802a2de:	69fb      	ldr	r3, [r7, #28]
 802a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 802a2e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 802a2e8:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 802a2ea:	69b8      	ldr	r0, [r7, #24]
 802a2ec:	f000 f823 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802a2f0:	4603      	mov	r3, r0
 802a2f2:	4618      	mov	r0, r3
 802a2f4:	f000 f830 	bl	802a358 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 802a2f8:	4603      	mov	r3, r0
 802a2fa:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 802a2fc:	f107 0314 	add.w	r3, r7, #20
 802a300:	4618      	mov	r0, r3
 802a302:	f000 f889 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802a306:	4603      	mov	r3, r0
 802a308:	681b      	ldr	r3, [r3, #0]
}
 802a30a:	4618      	mov	r0, r3
 802a30c:	3720      	adds	r7, #32
 802a30e:	46bd      	mov	sp, r7
 802a310:	bd80      	pop	{r7, pc}

0802a312 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 802a312:	b480      	push	{r7}
 802a314:	b083      	sub	sp, #12
 802a316:	af00      	add	r7, sp, #0
 802a318:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 802a31a:	687b      	ldr	r3, [r7, #4]
 802a31c:	2b00      	cmp	r3, #0
 802a31e:	d003      	beq.n	802a328 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 802a320:	687b      	ldr	r3, [r7, #4]
 802a322:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 802a326:	e000      	b.n	802a32a <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 802a328:	2320      	movs	r3, #32
}
 802a32a:	4618      	mov	r0, r3
 802a32c:	370c      	adds	r7, #12
 802a32e:	46bd      	mov	sp, r7
 802a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a334:	4770      	bx	lr

0802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 802a336:	b580      	push	{r7, lr}
 802a338:	b084      	sub	sp, #16
 802a33a:	af00      	add	r7, sp, #0
 802a33c:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 802a33e:	f107 030c 	add.w	r3, r7, #12
 802a342:	4618      	mov	r0, r3
 802a344:	f000 f868 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802a348:	4602      	mov	r2, r0
 802a34a:	687b      	ldr	r3, [r7, #4]
 802a34c:	6013      	str	r3, [r2, #0]
    return retval;
 802a34e:	68fb      	ldr	r3, [r7, #12]
  }
 802a350:	4618      	mov	r0, r3
 802a352:	3710      	adds	r7, #16
 802a354:	46bd      	mov	sp, r7
 802a356:	bd80      	pop	{r7, pc}

0802a358 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 802a358:	b580      	push	{r7, lr}
 802a35a:	b08a      	sub	sp, #40	; 0x28
 802a35c:	af00      	add	r7, sp, #0
 802a35e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 802a360:	f000 f879 	bl	802a456 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 802a364:	4603      	mov	r3, r0
 802a366:	4619      	mov	r1, r3
 802a368:	6878      	ldr	r0, [r7, #4]
 802a36a:	f000 f87f 	bl	802a46c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802a36e:	4603      	mov	r3, r0
 802a370:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 802a372:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 802a376:	f000 f8ab 	bl	802a4d0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 802a37a:	4603      	mov	r3, r0
 802a37c:	4618      	mov	r0, r3
 802a37e:	f000 f893 	bl	802a4a8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 802a382:	4603      	mov	r3, r0
 802a384:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 802a386:	4823      	ldr	r0, [pc, #140]	; (802a414 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 802a388:	f000 f8a2 	bl	802a4d0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 802a38c:	4603      	mov	r3, r0
 802a38e:	4618      	mov	r0, r3
 802a390:	f000 f88a 	bl	802a4a8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 802a394:	4603      	mov	r3, r0
 802a396:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 802a398:	69b9      	ldr	r1, [r7, #24]
 802a39a:	6a38      	ldr	r0, [r7, #32]
 802a39c:	f000 f8a5 	bl	802a4ea <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802a3a0:	4603      	mov	r3, r0
 802a3a2:	4619      	mov	r1, r3
 802a3a4:	69f8      	ldr	r0, [r7, #28]
 802a3a6:	f000 f8c2 	bl	802a52e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802a3aa:	4603      	mov	r3, r0
 802a3ac:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 802a3ae:	2300      	movs	r3, #0
 802a3b0:	627b      	str	r3, [r7, #36]	; 0x24
 802a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a3b4:	2b02      	cmp	r3, #2
 802a3b6:	dc21      	bgt.n	802a3fc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 802a3b8:	6979      	ldr	r1, [r7, #20]
 802a3ba:	6a38      	ldr	r0, [r7, #32]
 802a3bc:	f000 f895 	bl	802a4ea <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802a3c0:	4603      	mov	r3, r0
 802a3c2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 802a3c4:	f000 f8d1 	bl	802a56a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 802a3c8:	4603      	mov	r3, r0
 802a3ca:	6939      	ldr	r1, [r7, #16]
 802a3cc:	4618      	mov	r0, r3
 802a3ce:	f000 f8d5 	bl	802a57c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802a3d2:	4603      	mov	r3, r0
 802a3d4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 802a3d6:	68f9      	ldr	r1, [r7, #12]
 802a3d8:	6978      	ldr	r0, [r7, #20]
 802a3da:	f000 f8ed 	bl	802a5b8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802a3de:	4603      	mov	r3, r0
 802a3e0:	4618      	mov	r0, r3
 802a3e2:	f000 f90b 	bl	802a5fc <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802a3e6:	4603      	mov	r3, r0
 802a3e8:	4619      	mov	r1, r3
 802a3ea:	6978      	ldr	r0, [r7, #20]
 802a3ec:	f000 f89f 	bl	802a52e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802a3f0:	4603      	mov	r3, r0
 802a3f2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 802a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a3f6:	3301      	adds	r3, #1
 802a3f8:	627b      	str	r3, [r7, #36]	; 0x24
 802a3fa:	e7da      	b.n	802a3b2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 802a3fc:	6978      	ldr	r0, [r7, #20]
 802a3fe:	f000 f917 	bl	802a630 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 802a402:	4603      	mov	r3, r0
 802a404:	4618      	mov	r0, r3
 802a406:	f000 f929 	bl	802a65c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802a40a:	4603      	mov	r3, r0
}
 802a40c:	4618      	mov	r0, r3
 802a40e:	3728      	adds	r7, #40	; 0x28
 802a410:	46bd      	mov	sp, r7
 802a412:	bd80      	pop	{r7, pc}
 802a414:	c3c3c3c4 	.word	0xc3c3c3c4

0802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 802a418:	b480      	push	{r7}
 802a41a:	b083      	sub	sp, #12
 802a41c:	af00      	add	r7, sp, #0
 802a41e:	6078      	str	r0, [r7, #4]
 802a420:	687b      	ldr	r3, [r7, #4]
 802a422:	4618      	mov	r0, r3
 802a424:	370c      	adds	r7, #12
 802a426:	46bd      	mov	sp, r7
 802a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a42c:	4770      	bx	lr

0802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802a42e:	b590      	push	{r4, r7, lr}
 802a430:	b085      	sub	sp, #20
 802a432:	af00      	add	r7, sp, #0
 802a434:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802a436:	f107 030c 	add.w	r3, r7, #12
 802a43a:	4618      	mov	r0, r3
 802a43c:	f7ff ffec 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802a440:	4604      	mov	r4, r0
 802a442:	6878      	ldr	r0, [r7, #4]
 802a444:	f7fe fc98 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a448:	4603      	mov	r3, r0
 802a44a:	6023      	str	r3, [r4, #0]
    return retval;
 802a44c:	68fb      	ldr	r3, [r7, #12]
  }
 802a44e:	4618      	mov	r0, r3
 802a450:	3714      	adds	r7, #20
 802a452:	46bd      	mov	sp, r7
 802a454:	bd90      	pop	{r4, r7, pc}

0802a456 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 802a456:	b580      	push	{r7, lr}
 802a458:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 802a45a:	f000 f927 	bl	802a6ac <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 802a45e:	4603      	mov	r3, r0
 802a460:	4618      	mov	r0, r3
 802a462:	f7ff ffe4 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802a466:	4603      	mov	r3, r0
  }
 802a468:	4618      	mov	r0, r3
 802a46a:	bd80      	pop	{r7, pc}

0802a46c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 802a46c:	b590      	push	{r4, r7, lr}
 802a46e:	b083      	sub	sp, #12
 802a470:	af00      	add	r7, sp, #0
 802a472:	6078      	str	r0, [r7, #4]
 802a474:	6039      	str	r1, [r7, #0]
 802a476:	1d3b      	adds	r3, r7, #4
 802a478:	4618      	mov	r0, r3
 802a47a:	f7ff ffcd 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802a47e:	4603      	mov	r3, r0
 802a480:	681c      	ldr	r4, [r3, #0]
 802a482:	463b      	mov	r3, r7
 802a484:	4618      	mov	r0, r3
 802a486:	f7ff ffc7 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802a48a:	4603      	mov	r3, r0
 802a48c:	681b      	ldr	r3, [r3, #0]
 802a48e:	4619      	mov	r1, r3
 802a490:	4620      	mov	r0, r4
 802a492:	f7ff feae 	bl	802a1f2 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 802a496:	4603      	mov	r3, r0
 802a498:	4618      	mov	r0, r3
 802a49a:	f7ff ff4c 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802a49e:	4603      	mov	r3, r0
 802a4a0:	4618      	mov	r0, r3
 802a4a2:	370c      	adds	r7, #12
 802a4a4:	46bd      	mov	sp, r7
 802a4a6:	bd90      	pop	{r4, r7, pc}

0802a4a8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802a4a8:	b590      	push	{r4, r7, lr}
 802a4aa:	b085      	sub	sp, #20
 802a4ac:	af00      	add	r7, sp, #0
 802a4ae:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802a4b0:	f107 030c 	add.w	r3, r7, #12
 802a4b4:	4618      	mov	r0, r3
 802a4b6:	f000 f900 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a4ba:	4604      	mov	r4, r0
 802a4bc:	6878      	ldr	r0, [r7, #4]
 802a4be:	f7fe fc5b 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a4c2:	4603      	mov	r3, r0
 802a4c4:	6023      	str	r3, [r4, #0]
    return retval;
 802a4c6:	68fb      	ldr	r3, [r7, #12]
  }
 802a4c8:	4618      	mov	r0, r3
 802a4ca:	3714      	adds	r7, #20
 802a4cc:	46bd      	mov	sp, r7
 802a4ce:	bd90      	pop	{r4, r7, pc}

0802a4d0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 802a4d0:	b580      	push	{r7, lr}
 802a4d2:	b082      	sub	sp, #8
 802a4d4:	af00      	add	r7, sp, #0
 802a4d6:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 802a4d8:	2100      	movs	r1, #0
 802a4da:	6878      	ldr	r0, [r7, #4]
 802a4dc:	f7fe f888 	bl	80285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802a4e0:	4603      	mov	r3, r0
}
 802a4e2:	4618      	mov	r0, r3
 802a4e4:	3708      	adds	r7, #8
 802a4e6:	46bd      	mov	sp, r7
 802a4e8:	bd80      	pop	{r7, pc}

0802a4ea <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 802a4ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a4ec:	b085      	sub	sp, #20
 802a4ee:	af00      	add	r7, sp, #0
 802a4f0:	6078      	str	r0, [r7, #4]
 802a4f2:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 802a4f4:	1d3b      	adds	r3, r7, #4
 802a4f6:	4618      	mov	r0, r3
 802a4f8:	f7ff ff8e 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802a4fc:	4603      	mov	r3, r0
 802a4fe:	681d      	ldr	r5, [r3, #0]
 802a500:	463b      	mov	r3, r7
 802a502:	4618      	mov	r0, r3
 802a504:	f000 f8d9 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a508:	4603      	mov	r3, r0
 802a50a:	681e      	ldr	r6, [r3, #0]
 802a50c:	f107 030c 	add.w	r3, r7, #12
 802a510:	4618      	mov	r0, r3
 802a512:	f000 f8d2 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a516:	4604      	mov	r4, r0
 802a518:	4631      	mov	r1, r6
 802a51a:	4628      	mov	r0, r5
 802a51c:	f7fd fbf8 	bl	8027d10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802a520:	4603      	mov	r3, r0
 802a522:	6023      	str	r3, [r4, #0]
  return c;
 802a524:	68fb      	ldr	r3, [r7, #12]
}
 802a526:	4618      	mov	r0, r3
 802a528:	3714      	adds	r7, #20
 802a52a:	46bd      	mov	sp, r7
 802a52c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802a52e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 802a52e:	b590      	push	{r4, r7, lr}
 802a530:	b083      	sub	sp, #12
 802a532:	af00      	add	r7, sp, #0
 802a534:	6078      	str	r0, [r7, #4]
 802a536:	6039      	str	r1, [r7, #0]
 802a538:	1d3b      	adds	r3, r7, #4
 802a53a:	4618      	mov	r0, r3
 802a53c:	f000 f8bd 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a540:	4603      	mov	r3, r0
 802a542:	681c      	ldr	r4, [r3, #0]
 802a544:	463b      	mov	r3, r7
 802a546:	4618      	mov	r0, r3
 802a548:	f000 f8b7 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a54c:	4603      	mov	r3, r0
 802a54e:	681b      	ldr	r3, [r3, #0]
 802a550:	4619      	mov	r1, r3
 802a552:	4620      	mov	r0, r4
 802a554:	f7fe fc4c 	bl	8028df0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802a558:	4603      	mov	r3, r0
 802a55a:	4618      	mov	r0, r3
 802a55c:	f000 f8b8 	bl	802a6d0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 802a560:	4603      	mov	r3, r0
 802a562:	4618      	mov	r0, r3
 802a564:	370c      	adds	r7, #12
 802a566:	46bd      	mov	sp, r7
 802a568:	bd90      	pop	{r4, r7, pc}

0802a56a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 802a56a:	b580      	push	{r7, lr}
 802a56c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 802a56e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 802a572:	f7ff ff99 	bl	802a4a8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 802a576:	4603      	mov	r3, r0
  }
 802a578:	4618      	mov	r0, r3
 802a57a:	bd80      	pop	{r7, pc}

0802a57c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 802a57c:	b590      	push	{r4, r7, lr}
 802a57e:	b083      	sub	sp, #12
 802a580:	af00      	add	r7, sp, #0
 802a582:	6078      	str	r0, [r7, #4]
 802a584:	6039      	str	r1, [r7, #0]
 802a586:	1d3b      	adds	r3, r7, #4
 802a588:	4618      	mov	r0, r3
 802a58a:	f000 f896 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a58e:	4603      	mov	r3, r0
 802a590:	681c      	ldr	r4, [r3, #0]
 802a592:	463b      	mov	r3, r7
 802a594:	4618      	mov	r0, r3
 802a596:	f000 f890 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a59a:	4603      	mov	r3, r0
 802a59c:	681b      	ldr	r3, [r3, #0]
 802a59e:	4619      	mov	r1, r3
 802a5a0:	4620      	mov	r0, r4
 802a5a2:	f000 f875 	bl	802a690 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 802a5a6:	4603      	mov	r3, r0
 802a5a8:	4618      	mov	r0, r3
 802a5aa:	f000 f891 	bl	802a6d0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 802a5ae:	4603      	mov	r3, r0
 802a5b0:	4618      	mov	r0, r3
 802a5b2:	370c      	adds	r7, #12
 802a5b4:	46bd      	mov	sp, r7
 802a5b6:	bd90      	pop	{r4, r7, pc}

0802a5b8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 802a5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a5ba:	b085      	sub	sp, #20
 802a5bc:	af00      	add	r7, sp, #0
 802a5be:	6078      	str	r0, [r7, #4]
 802a5c0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 802a5c2:	1d3b      	adds	r3, r7, #4
 802a5c4:	4618      	mov	r0, r3
 802a5c6:	f000 f878 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a5ca:	4603      	mov	r3, r0
 802a5cc:	681d      	ldr	r5, [r3, #0]
 802a5ce:	463b      	mov	r3, r7
 802a5d0:	4618      	mov	r0, r3
 802a5d2:	f000 f872 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a5d6:	4603      	mov	r3, r0
 802a5d8:	681e      	ldr	r6, [r3, #0]
 802a5da:	f107 030c 	add.w	r3, r7, #12
 802a5de:	4618      	mov	r0, r3
 802a5e0:	f000 f887 	bl	802a6f2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 802a5e4:	4604      	mov	r4, r0
 802a5e6:	4631      	mov	r1, r6
 802a5e8:	4628      	mov	r0, r5
 802a5ea:	f7fd fb91 	bl	8027d10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802a5ee:	4603      	mov	r3, r0
 802a5f0:	6023      	str	r3, [r4, #0]
  return c;
 802a5f2:	68fb      	ldr	r3, [r7, #12]
}
 802a5f4:	4618      	mov	r0, r3
 802a5f6:	3714      	adds	r7, #20
 802a5f8:	46bd      	mov	sp, r7
 802a5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802a5fc <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802a5fc:	b5b0      	push	{r4, r5, r7, lr}
 802a5fe:	b084      	sub	sp, #16
 802a600:	af00      	add	r7, sp, #0
 802a602:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802a604:	1d3b      	adds	r3, r7, #4
 802a606:	4618      	mov	r0, r3
 802a608:	f000 f873 	bl	802a6f2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 802a60c:	4603      	mov	r3, r0
 802a60e:	681d      	ldr	r5, [r3, #0]
 802a610:	f107 030c 	add.w	r3, r7, #12
 802a614:	4618      	mov	r0, r3
 802a616:	f000 f850 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a61a:	4604      	mov	r4, r0
 802a61c:	4628      	mov	r0, r5
 802a61e:	f000 f873 	bl	802a708 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 802a622:	4603      	mov	r3, r0
 802a624:	6023      	str	r3, [r4, #0]
  return result;
 802a626:	68fb      	ldr	r3, [r7, #12]
}
 802a628:	4618      	mov	r0, r3
 802a62a:	3710      	adds	r7, #16
 802a62c:	46bd      	mov	sp, r7
 802a62e:	bdb0      	pop	{r4, r5, r7, pc}

0802a630 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 802a630:	b590      	push	{r4, r7, lr}
 802a632:	b085      	sub	sp, #20
 802a634:	af00      	add	r7, sp, #0
 802a636:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 802a638:	1d3b      	adds	r3, r7, #4
 802a63a:	4618      	mov	r0, r3
 802a63c:	f000 f83d 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a640:	4604      	mov	r4, r0
 802a642:	f107 030c 	add.w	r3, r7, #12
 802a646:	4618      	mov	r0, r3
 802a648:	f000 f86a 	bl	802a720 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 802a64c:	4602      	mov	r2, r0
 802a64e:	6823      	ldr	r3, [r4, #0]
 802a650:	6013      	str	r3, [r2, #0]
  return c;
 802a652:	68fb      	ldr	r3, [r7, #12]
}
 802a654:	4618      	mov	r0, r3
 802a656:	3714      	adds	r7, #20
 802a658:	46bd      	mov	sp, r7
 802a65a:	bd90      	pop	{r4, r7, pc}

0802a65c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802a65c:	b5b0      	push	{r4, r5, r7, lr}
 802a65e:	b084      	sub	sp, #16
 802a660:	af00      	add	r7, sp, #0
 802a662:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802a664:	1d3b      	adds	r3, r7, #4
 802a666:	4618      	mov	r0, r3
 802a668:	f000 f85a 	bl	802a720 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 802a66c:	4603      	mov	r3, r0
 802a66e:	681d      	ldr	r5, [r3, #0]
 802a670:	f107 030c 	add.w	r3, r7, #12
 802a674:	4618      	mov	r0, r3
 802a676:	f7ff fecf 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802a67a:	4604      	mov	r4, r0
 802a67c:	4628      	mov	r0, r5
 802a67e:	f000 f85a 	bl	802a736 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 802a682:	4603      	mov	r3, r0
 802a684:	6023      	str	r3, [r4, #0]
  return result;
 802a686:	68fb      	ldr	r3, [r7, #12]
}
 802a688:	4618      	mov	r0, r3
 802a68a:	3710      	adds	r7, #16
 802a68c:	46bd      	mov	sp, r7
 802a68e:	bdb0      	pop	{r4, r5, r7, pc}

0802a690 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 802a690:	b480      	push	{r7}
 802a692:	b083      	sub	sp, #12
 802a694:	af00      	add	r7, sp, #0
 802a696:	6078      	str	r0, [r7, #4]
 802a698:	6039      	str	r1, [r7, #0]
  return a - b;
 802a69a:	687a      	ldr	r2, [r7, #4]
 802a69c:	683b      	ldr	r3, [r7, #0]
 802a69e:	1ad3      	subs	r3, r2, r3
}
 802a6a0:	4618      	mov	r0, r3
 802a6a2:	370c      	adds	r7, #12
 802a6a4:	46bd      	mov	sp, r7
 802a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6aa:	4770      	bx	lr

0802a6ac <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 802a6ac:	b580      	push	{r7, lr}
 802a6ae:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 802a6b0:	f7fc fb28 	bl	8026d04 <_ZNSt14numeric_limitsIlE3maxEv>
 802a6b4:	4603      	mov	r3, r0
  }
 802a6b6:	4618      	mov	r0, r3
 802a6b8:	bd80      	pop	{r7, pc}

0802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 802a6ba:	b480      	push	{r7}
 802a6bc:	b083      	sub	sp, #12
 802a6be:	af00      	add	r7, sp, #0
 802a6c0:	6078      	str	r0, [r7, #4]
 802a6c2:	687b      	ldr	r3, [r7, #4]
 802a6c4:	4618      	mov	r0, r3
 802a6c6:	370c      	adds	r7, #12
 802a6c8:	46bd      	mov	sp, r7
 802a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6ce:	4770      	bx	lr

0802a6d0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 802a6d0:	b580      	push	{r7, lr}
 802a6d2:	b084      	sub	sp, #16
 802a6d4:	af00      	add	r7, sp, #0
 802a6d6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 802a6d8:	f107 030c 	add.w	r3, r7, #12
 802a6dc:	4618      	mov	r0, r3
 802a6de:	f7ff ffec 	bl	802a6ba <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802a6e2:	4602      	mov	r2, r0
 802a6e4:	687b      	ldr	r3, [r7, #4]
 802a6e6:	6013      	str	r3, [r2, #0]
    return retval;
 802a6e8:	68fb      	ldr	r3, [r7, #12]
  }
 802a6ea:	4618      	mov	r0, r3
 802a6ec:	3710      	adds	r7, #16
 802a6ee:	46bd      	mov	sp, r7
 802a6f0:	bd80      	pop	{r7, pc}

0802a6f2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 802a6f2:	b480      	push	{r7}
 802a6f4:	b083      	sub	sp, #12
 802a6f6:	af00      	add	r7, sp, #0
 802a6f8:	6078      	str	r0, [r7, #4]
 802a6fa:	687b      	ldr	r3, [r7, #4]
 802a6fc:	4618      	mov	r0, r3
 802a6fe:	370c      	adds	r7, #12
 802a700:	46bd      	mov	sp, r7
 802a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a706:	4770      	bx	lr

0802a708 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802a708:	b580      	push	{r7, lr}
 802a70a:	b082      	sub	sp, #8
 802a70c:	af00      	add	r7, sp, #0
 802a70e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802a710:	6878      	ldr	r0, [r7, #4]
 802a712:	f000 f81d 	bl	802a750 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 802a716:	4603      	mov	r3, r0
}
 802a718:	4618      	mov	r0, r3
 802a71a:	3708      	adds	r7, #8
 802a71c:	46bd      	mov	sp, r7
 802a71e:	bd80      	pop	{r7, pc}

0802a720 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 802a720:	b480      	push	{r7}
 802a722:	b083      	sub	sp, #12
 802a724:	af00      	add	r7, sp, #0
 802a726:	6078      	str	r0, [r7, #4]
 802a728:	687b      	ldr	r3, [r7, #4]
 802a72a:	4618      	mov	r0, r3
 802a72c:	370c      	adds	r7, #12
 802a72e:	46bd      	mov	sp, r7
 802a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a734:	4770      	bx	lr

0802a736 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802a736:	b580      	push	{r7, lr}
 802a738:	b082      	sub	sp, #8
 802a73a:	af00      	add	r7, sp, #0
 802a73c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802a73e:	6878      	ldr	r0, [r7, #4]
 802a740:	f000 f848 	bl	802a7d4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 802a744:	4603      	mov	r3, r0
}
 802a746:	4618      	mov	r0, r3
 802a748:	3708      	adds	r7, #8
 802a74a:	46bd      	mov	sp, r7
 802a74c:	bd80      	pop	{r7, pc}
	...

0802a750 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802a750:	b580      	push	{r7, lr}
 802a752:	b08a      	sub	sp, #40	; 0x28
 802a754:	af00      	add	r7, sp, #0
 802a756:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 802a758:	f7fd fac5 	bl	8027ce6 <_ZNSt14numeric_limitsIlE3minEv>
 802a75c:	4603      	mov	r3, r0
 802a75e:	4618      	mov	r0, r3
 802a760:	f7fe fb0a 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a764:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 802a766:	f7fc facd 	bl	8026d04 <_ZNSt14numeric_limitsIlE3maxEv>
 802a76a:	4603      	mov	r3, r0
 802a76c:	4618      	mov	r0, r3
 802a76e:	f7fe fb03 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a772:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 802a774:	2320      	movs	r3, #32
 802a776:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 802a778:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 802a77c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 802a77e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 802a782:	f7fe faf9 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a786:	4603      	mov	r3, r0
 802a788:	4619      	mov	r1, r3
 802a78a:	6878      	ldr	r0, [r7, #4]
 802a78c:	f7fe fb3e 	bl	8028e0c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 802a790:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 802a792:	480f      	ldr	r0, [pc, #60]	; (802a7d0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 802a794:	f7fe faf0 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a798:	4603      	mov	r3, r0
 802a79a:	4619      	mov	r1, r3
 802a79c:	6878      	ldr	r0, [r7, #4]
 802a79e:	f7fe fb13 	bl	8028dc8 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 802a7a2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 802a7a4:	2102      	movs	r1, #2
 802a7a6:	6878      	ldr	r0, [r7, #4]
 802a7a8:	f000 f856 	bl	802a858 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 802a7ac:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 802a7ae:	68fa      	ldr	r2, [r7, #12]
 802a7b0:	6a39      	ldr	r1, [r7, #32]
 802a7b2:	6978      	ldr	r0, [r7, #20]
 802a7b4:	f000 f894 	bl	802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802a7b8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 802a7ba:	68fa      	ldr	r2, [r7, #12]
 802a7bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802a7be:	6938      	ldr	r0, [r7, #16]
 802a7c0:	f000 f88e 	bl	802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802a7c4:	60f8      	str	r0, [r7, #12]
    return result;
 802a7c6:	68fb      	ldr	r3, [r7, #12]
  }
 802a7c8:	4618      	mov	r0, r3
 802a7ca:	3728      	adds	r7, #40	; 0x28
 802a7cc:	46bd      	mov	sp, r7
 802a7ce:	bd80      	pop	{r7, pc}
 802a7d0:	e0000001 	.word	0xe0000001

0802a7d4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802a7d4:	b580      	push	{r7, lr}
 802a7d6:	b08a      	sub	sp, #40	; 0x28
 802a7d8:	af00      	add	r7, sp, #0
 802a7da:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 802a7dc:	f7fd fa83 	bl	8027ce6 <_ZNSt14numeric_limitsIlE3minEv>
 802a7e0:	4603      	mov	r3, r0
 802a7e2:	4618      	mov	r0, r3
 802a7e4:	f7fe fac8 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a7e8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 802a7ea:	f7fc fa8b 	bl	8026d04 <_ZNSt14numeric_limitsIlE3maxEv>
 802a7ee:	4603      	mov	r3, r0
 802a7f0:	4618      	mov	r0, r3
 802a7f2:	f7fe fac1 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a7f6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 802a7f8:	2320      	movs	r3, #32
 802a7fa:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 802a7fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802a800:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 802a802:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 802a806:	f7fe fab7 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a80a:	4603      	mov	r3, r0
 802a80c:	4619      	mov	r1, r3
 802a80e:	6878      	ldr	r0, [r7, #4]
 802a810:	f7fe fafc 	bl	8028e0c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 802a814:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 802a816:	480f      	ldr	r0, [pc, #60]	; (802a854 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 802a818:	f7fe faae 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802a81c:	4603      	mov	r3, r0
 802a81e:	4619      	mov	r1, r3
 802a820:	6878      	ldr	r0, [r7, #4]
 802a822:	f7fe fad1 	bl	8028dc8 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 802a826:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 802a828:	2101      	movs	r1, #1
 802a82a:	6878      	ldr	r0, [r7, #4]
 802a82c:	f000 f814 	bl	802a858 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 802a830:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 802a832:	68fa      	ldr	r2, [r7, #12]
 802a834:	6a39      	ldr	r1, [r7, #32]
 802a836:	6978      	ldr	r0, [r7, #20]
 802a838:	f000 f852 	bl	802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802a83c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 802a83e:	68fa      	ldr	r2, [r7, #12]
 802a840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802a842:	6938      	ldr	r0, [r7, #16]
 802a844:	f000 f84c 	bl	802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802a848:	60f8      	str	r0, [r7, #12]
    return result;
 802a84a:	68fb      	ldr	r3, [r7, #12]
  }
 802a84c:	4618      	mov	r0, r3
 802a84e:	3728      	adds	r7, #40	; 0x28
 802a850:	46bd      	mov	sp, r7
 802a852:	bd80      	pop	{r7, pc}
 802a854:	c0000001 	.word	0xc0000001

0802a858 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 802a858:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 802a85c:	b089      	sub	sp, #36	; 0x24
 802a85e:	af00      	add	r7, sp, #0
 802a860:	6078      	str	r0, [r7, #4]
 802a862:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 802a864:	6879      	ldr	r1, [r7, #4]
 802a866:	17c8      	asrs	r0, r1, #31
 802a868:	4688      	mov	r8, r1
 802a86a:	4681      	mov	r9, r0
 802a86c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 802a870:	2001      	movs	r0, #1
 802a872:	6839      	ldr	r1, [r7, #0]
 802a874:	fa00 f101 	lsl.w	r1, r0, r1
 802a878:	17c8      	asrs	r0, r1, #31
 802a87a:	460c      	mov	r4, r1
 802a87c:	4605      	mov	r5, r0
 802a87e:	69f9      	ldr	r1, [r7, #28]
 802a880:	fb04 f001 	mul.w	r0, r4, r1
 802a884:	69b9      	ldr	r1, [r7, #24]
 802a886:	fb05 f101 	mul.w	r1, r5, r1
 802a88a:	4401      	add	r1, r0
 802a88c:	69b8      	ldr	r0, [r7, #24]
 802a88e:	fba0 2304 	umull	r2, r3, r0, r4
 802a892:	4419      	add	r1, r3
 802a894:	460b      	mov	r3, r1
 802a896:	e9c7 2304 	strd	r2, r3, [r7, #16]
 802a89a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 802a89e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a8a2:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 802a8a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802a8a8:	60bb      	str	r3, [r7, #8]
             ? min
 802a8aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802a8ae:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 802a8b2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 802a8b6:	db0b      	blt.n	802a8d0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 802a8b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802a8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 802a8c0:	f173 0300 	sbcs.w	r3, r3, #0
 802a8c4:	da01      	bge.n	802a8ca <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 802a8c6:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 802a8c8:	e004      	b.n	802a8d4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 802a8ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 802a8ce:	e001      	b.n	802a8d4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 802a8d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 802a8d4:	4618      	mov	r0, r3
 802a8d6:	3724      	adds	r7, #36	; 0x24
 802a8d8:	46bd      	mov	sp, r7
 802a8da:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 802a8de:	4770      	bx	lr

0802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 802a8e0:	b590      	push	{r4, r7, lr}
 802a8e2:	b085      	sub	sp, #20
 802a8e4:	af00      	add	r7, sp, #0
 802a8e6:	60f8      	str	r0, [r7, #12]
 802a8e8:	60b9      	str	r1, [r7, #8]
 802a8ea:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 802a8ec:	68b9      	ldr	r1, [r7, #8]
 802a8ee:	68f8      	ldr	r0, [r7, #12]
 802a8f0:	f7fe fa4d 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802a8f4:	4604      	mov	r4, r0
 802a8f6:	68f8      	ldr	r0, [r7, #12]
 802a8f8:	f7fe faad 	bl	8028e56 <_ZN8gemmlowp6BitNotIlEET_S1_>
 802a8fc:	4603      	mov	r3, r0
 802a8fe:	6879      	ldr	r1, [r7, #4]
 802a900:	4618      	mov	r0, r3
 802a902:	f7fe fa44 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802a906:	4603      	mov	r3, r0
 802a908:	4619      	mov	r1, r3
 802a90a:	4620      	mov	r0, r4
 802a90c:	f000 f805 	bl	802a91a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 802a910:	4603      	mov	r3, r0
}
 802a912:	4618      	mov	r0, r3
 802a914:	3714      	adds	r7, #20
 802a916:	46bd      	mov	sp, r7
 802a918:	bd90      	pop	{r4, r7, pc}

0802a91a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 802a91a:	b480      	push	{r7}
 802a91c:	b083      	sub	sp, #12
 802a91e:	af00      	add	r7, sp, #0
 802a920:	6078      	str	r0, [r7, #4]
 802a922:	6039      	str	r1, [r7, #0]
  return a ^ b;
 802a924:	687a      	ldr	r2, [r7, #4]
 802a926:	683b      	ldr	r3, [r7, #0]
 802a928:	4053      	eors	r3, r2
}
 802a92a:	4618      	mov	r0, r3
 802a92c:	370c      	adds	r7, #12
 802a92e:	46bd      	mov	sp, r7
 802a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a934:	4770      	bx	lr

0802a936 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 802a936:	b580      	push	{r7, lr}
 802a938:	b084      	sub	sp, #16
 802a93a:	af00      	add	r7, sp, #0
 802a93c:	60f8      	str	r0, [r7, #12]
 802a93e:	60b9      	str	r1, [r7, #8]
 802a940:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802a942:	68fb      	ldr	r3, [r7, #12]
 802a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a946:	2b00      	cmp	r3, #0
 802a948:	d101      	bne.n	802a94e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 802a94a:	f006 fd03 	bl	8031354 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 802a94e:	68fb      	ldr	r3, [r7, #12]
 802a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a952:	2124      	movs	r1, #36	; 0x24
 802a954:	68f8      	ldr	r0, [r7, #12]
 802a956:	4798      	blx	r3
 802a958:	4603      	mov	r3, r0
}
 802a95a:	4618      	mov	r0, r3
 802a95c:	3710      	adds	r7, #16
 802a95e:	46bd      	mov	sp, r7
 802a960:	bd80      	pop	{r7, pc}
	...

0802a964 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 802a964:	b5b0      	push	{r4, r5, r7, lr}
 802a966:	b0a0      	sub	sp, #128	; 0x80
 802a968:	af04      	add	r7, sp, #16
 802a96a:	6078      	str	r0, [r7, #4]
 802a96c:	6039      	str	r1, [r7, #0]
 802a96e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 802a970:	683b      	ldr	r3, [r7, #0]
 802a972:	691b      	ldr	r3, [r3, #16]
 802a974:	2b00      	cmp	r3, #0
 802a976:	d101      	bne.n	802a97c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 802a978:	f006 fcec 	bl	8031354 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802a97c:	683b      	ldr	r3, [r7, #0]
 802a97e:	695b      	ldr	r3, [r3, #20]
 802a980:	2b00      	cmp	r3, #0
 802a982:	d101      	bne.n	802a988 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 802a984:	f006 fce6 	bl	8031354 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 802a988:	683b      	ldr	r3, [r7, #0]
 802a98a:	691b      	ldr	r3, [r3, #16]
 802a98c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 802a98e:	683b      	ldr	r3, [r7, #0]
 802a990:	695b      	ldr	r3, [r3, #20]
 802a992:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 802a994:	4b81      	ldr	r3, [pc, #516]	; (802ab9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 802a996:	681b      	ldr	r3, [r3, #0]
 802a998:	461a      	mov	r2, r3
 802a99a:	6839      	ldr	r1, [r7, #0]
 802a99c:	6878      	ldr	r0, [r7, #4]
 802a99e:	f7fc fc7b 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802a9a2:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 802a9a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802a9a6:	2b00      	cmp	r3, #0
 802a9a8:	d10a      	bne.n	802a9c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 802a9aa:	687b      	ldr	r3, [r7, #4]
 802a9ac:	695c      	ldr	r4, [r3, #20]
 802a9ae:	4b7c      	ldr	r3, [pc, #496]	; (802aba0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802a9b0:	9300      	str	r3, [sp, #0]
 802a9b2:	2340      	movs	r3, #64	; 0x40
 802a9b4:	4a7b      	ldr	r2, [pc, #492]	; (802aba4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802a9b6:	497c      	ldr	r1, [pc, #496]	; (802aba8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802a9b8:	6878      	ldr	r0, [r7, #4]
 802a9ba:	47a0      	blx	r4
 802a9bc:	2401      	movs	r4, #1
 802a9be:	e0e7      	b.n	802ab90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 802a9c0:	4b7a      	ldr	r3, [pc, #488]	; (802abac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 802a9c2:	681b      	ldr	r3, [r3, #0]
 802a9c4:	461a      	mov	r2, r3
 802a9c6:	6839      	ldr	r1, [r7, #0]
 802a9c8:	6878      	ldr	r0, [r7, #4]
 802a9ca:	f7fc fc65 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802a9ce:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 802a9d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802a9d2:	2b00      	cmp	r3, #0
 802a9d4:	d10a      	bne.n	802a9ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 802a9d6:	687b      	ldr	r3, [r7, #4]
 802a9d8:	695c      	ldr	r4, [r3, #20]
 802a9da:	4b75      	ldr	r3, [pc, #468]	; (802abb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 802a9dc:	9300      	str	r3, [sp, #0]
 802a9de:	2343      	movs	r3, #67	; 0x43
 802a9e0:	4a70      	ldr	r2, [pc, #448]	; (802aba4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802a9e2:	4971      	ldr	r1, [pc, #452]	; (802aba8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802a9e4:	6878      	ldr	r0, [r7, #4]
 802a9e6:	47a0      	blx	r4
 802a9e8:	2401      	movs	r4, #1
 802a9ea:	e0d1      	b.n	802ab90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 802a9ec:	4b71      	ldr	r3, [pc, #452]	; (802abb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 802a9ee:	681b      	ldr	r3, [r3, #0]
 802a9f0:	461a      	mov	r2, r3
 802a9f2:	6839      	ldr	r1, [r7, #0]
 802a9f4:	6878      	ldr	r0, [r7, #4]
 802a9f6:	f7fc fc7f 	bl	80272f8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 802a9fa:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 802a9fc:	4b6e      	ldr	r3, [pc, #440]	; (802abb8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 802a9fe:	681b      	ldr	r3, [r3, #0]
 802aa00:	461a      	mov	r2, r3
 802aa02:	6839      	ldr	r1, [r7, #0]
 802aa04:	6878      	ldr	r0, [r7, #4]
 802aa06:	f7fc fc57 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802aa0a:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 802aa0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802aa0e:	2b00      	cmp	r3, #0
 802aa10:	d10a      	bne.n	802aa28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 802aa12:	687b      	ldr	r3, [r7, #4]
 802aa14:	695c      	ldr	r4, [r3, #20]
 802aa16:	4b69      	ldr	r3, [pc, #420]	; (802abbc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 802aa18:	9300      	str	r3, [sp, #0]
 802aa1a:	2347      	movs	r3, #71	; 0x47
 802aa1c:	4a61      	ldr	r2, [pc, #388]	; (802aba4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802aa1e:	4962      	ldr	r1, [pc, #392]	; (802aba8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802aa20:	6878      	ldr	r0, [r7, #4]
 802aa22:	47a0      	blx	r4
 802aa24:	2401      	movs	r4, #1
 802aa26:	e0b3      	b.n	802ab90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 802aa28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802aa2a:	781a      	ldrb	r2, [r3, #0]
 802aa2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802aa2e:	781b      	ldrb	r3, [r3, #0]
 802aa30:	429a      	cmp	r2, r3
 802aa32:	d01a      	beq.n	802aa6a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 802aa34:	687b      	ldr	r3, [r7, #4]
 802aa36:	695c      	ldr	r4, [r3, #20]
 802aa38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802aa3a:	781b      	ldrb	r3, [r3, #0]
 802aa3c:	4618      	mov	r0, r3
 802aa3e:	f7fc f8e5 	bl	8026c0c <TfLiteTypeGetName>
 802aa42:	4605      	mov	r5, r0
 802aa44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802aa46:	781b      	ldrb	r3, [r3, #0]
 802aa48:	4618      	mov	r0, r3
 802aa4a:	f7fc f8df 	bl	8026c0c <TfLiteTypeGetName>
 802aa4e:	4603      	mov	r3, r0
 802aa50:	9303      	str	r3, [sp, #12]
 802aa52:	9502      	str	r5, [sp, #8]
 802aa54:	4b5a      	ldr	r3, [pc, #360]	; (802abc0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 802aa56:	9301      	str	r3, [sp, #4]
 802aa58:	4b5a      	ldr	r3, [pc, #360]	; (802abc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 802aa5a:	9300      	str	r3, [sp, #0]
 802aa5c:	2349      	movs	r3, #73	; 0x49
 802aa5e:	4a51      	ldr	r2, [pc, #324]	; (802aba4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802aa60:	4959      	ldr	r1, [pc, #356]	; (802abc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 802aa62:	6878      	ldr	r0, [r7, #4]
 802aa64:	47a0      	blx	r4
 802aa66:	2401      	movs	r4, #1
 802aa68:	e092      	b.n	802ab90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 802aa6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802aa6c:	781a      	ldrb	r2, [r3, #0]
 802aa6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802aa70:	781b      	ldrb	r3, [r3, #0]
 802aa72:	429a      	cmp	r2, r3
 802aa74:	d006      	beq.n	802aa84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 802aa76:	687b      	ldr	r3, [r7, #4]
 802aa78:	695b      	ldr	r3, [r3, #20]
 802aa7a:	4954      	ldr	r1, [pc, #336]	; (802abcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 802aa7c:	6878      	ldr	r0, [r7, #4]
 802aa7e:	4798      	blx	r3
 802aa80:	2401      	movs	r4, #1
 802aa82:	e085      	b.n	802ab90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 802aa84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802aa86:	f04f 32ff 	mov.w	r2, #4294967295
 802aa8a:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 802aa8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802aa8e:	7819      	ldrb	r1, [r3, #0]
 802aa90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802aa92:	781a      	ldrb	r2, [r3, #0]
 802aa94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802aa96:	9303      	str	r3, [sp, #12]
 802aa98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802aa9a:	9302      	str	r3, [sp, #8]
 802aa9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802aa9e:	9301      	str	r3, [sp, #4]
 802aaa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802aaa2:	9300      	str	r3, [sp, #0]
 802aaa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802aaa6:	6878      	ldr	r0, [r7, #4]
 802aaa8:	f000 fae4 	bl	802b074 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 802aaac:	4603      	mov	r3, r0
 802aaae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 802aab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802aab6:	2b00      	cmp	r3, #0
 802aab8:	d002      	beq.n	802aac0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 802aaba:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 802aabe:	e067      	b.n	802ab90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 802aac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802aac2:	781b      	ldrb	r3, [r3, #0]
 802aac4:	2b09      	cmp	r3, #9
 802aac6:	d162      	bne.n	802ab8e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 802aac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aacc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 802aace:	4618      	mov	r0, r3
 802aad0:	f7fd f85d 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 802aad4:	f107 0318 	add.w	r3, r7, #24
 802aad8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802aada:	4618      	mov	r0, r3
 802aadc:	f7fd f857 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 802aae0:	f107 0318 	add.w	r3, r7, #24
 802aae4:	4618      	mov	r0, r3
 802aae6:	f7fc ffee 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802aaea:	4603      	mov	r3, r0
 802aaec:	2b02      	cmp	r3, #2
 802aaee:	d001      	beq.n	802aaf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 802aaf0:	f006 fc30 	bl	8031354 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 802aaf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aaf8:	4618      	mov	r0, r3
 802aafa:	f7fc ffe4 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802aafe:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 802ab00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ab02:	1e5a      	subs	r2, r3, #1
 802ab04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ab08:	4611      	mov	r1, r2
 802ab0a:	4618      	mov	r0, r3
 802ab0c:	f7fd f976 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802ab10:	4603      	mov	r3, r0
 802ab12:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 802ab14:	2301      	movs	r3, #1
 802ab16:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 802ab18:	2301      	movs	r3, #1
 802ab1a:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 802ab1c:	f107 0318 	add.w	r3, r7, #24
 802ab20:	2101      	movs	r1, #1
 802ab22:	4618      	mov	r0, r3
 802ab24:	f7fd f96a 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802ab28:	4603      	mov	r3, r0
 802ab2a:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 802ab2c:	f107 0308 	add.w	r3, r7, #8
 802ab30:	4618      	mov	r0, r3
 802ab32:	f7ee fb28 	bl	8019186 <arm_fully_connected_s8_get_buffer_size>
 802ab36:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 802ab38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ab3a:	2b00      	cmp	r3, #0
 802ab3c:	dd11      	ble.n	802ab62 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 802ab3e:	687b      	ldr	r3, [r7, #4]
 802ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ab42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802ab44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802ab46:	3220      	adds	r2, #32
 802ab48:	6878      	ldr	r0, [r7, #4]
 802ab4a:	4798      	blx	r3
 802ab4c:	4603      	mov	r3, r0
 802ab4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 802ab52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 802ab56:	2b00      	cmp	r3, #0
 802ab58:	d007      	beq.n	802ab6a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 802ab5a:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 802ab5e:	2500      	movs	r5, #0
 802ab60:	e004      	b.n	802ab6c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 802ab62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802ab64:	f04f 32ff 	mov.w	r2, #4294967295
 802ab68:	621a      	str	r2, [r3, #32]
 802ab6a:	2501      	movs	r5, #1
 802ab6c:	f107 0318 	add.w	r3, r7, #24
 802ab70:	4618      	mov	r0, r3
 802ab72:	f7fc ff92 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
 802ab76:	2d01      	cmp	r5, #1
 802ab78:	d001      	beq.n	802ab7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 802ab7a:	2500      	movs	r5, #0
 802ab7c:	e000      	b.n	802ab80 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 802ab7e:	2501      	movs	r5, #1
 802ab80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ab84:	4618      	mov	r0, r3
 802ab86:	f7fc ff88 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
 802ab8a:	2d01      	cmp	r5, #1
 802ab8c:	d100      	bne.n	802ab90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 802ab8e:	2400      	movs	r4, #0
}
 802ab90:	4623      	mov	r3, r4
 802ab92:	4618      	mov	r0, r3
 802ab94:	3770      	adds	r7, #112	; 0x70
 802ab96:	46bd      	mov	sp, r7
 802ab98:	bdb0      	pop	{r4, r5, r7, pc}
 802ab9a:	bf00      	nop
 802ab9c:	08035f4c 	.word	0x08035f4c
 802aba0:	08034470 	.word	0x08034470
 802aba4:	080343c8 	.word	0x080343c8
 802aba8:	08034458 	.word	0x08034458
 802abac:	08035f50 	.word	0x08035f50
 802abb0:	08034484 	.word	0x08034484
 802abb4:	08035f54 	.word	0x08035f54
 802abb8:	08035f58 	.word	0x08035f58
 802abbc:	08034498 	.word	0x08034498
 802abc0:	080344c8 	.word	0x080344c8
 802abc4:	080344d8 	.word	0x080344d8
 802abc8:	080344ac 	.word	0x080344ac
 802abcc:	080344e4 	.word	0x080344e4

0802abd0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 802abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802abd2:	b0bf      	sub	sp, #252	; 0xfc
 802abd4:	af08      	add	r7, sp, #32
 802abd6:	6178      	str	r0, [r7, #20]
 802abd8:	6139      	str	r1, [r7, #16]
 802abda:	60fa      	str	r2, [r7, #12]
 802abdc:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802abde:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802abe2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 802abe6:	4618      	mov	r0, r3
 802abe8:	f000 faaa 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 802abec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802abf0:	4618      	mov	r0, r3
 802abf2:	f7fc ff68 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802abf6:	4603      	mov	r3, r0
 802abf8:	2b02      	cmp	r3, #2
 802abfa:	d001      	beq.n	802ac00 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 802abfc:	f006 fbaa 	bl	8031354 <abort>
  const int batches = output_shape.Dims(0);
 802ac00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802ac04:	2100      	movs	r1, #0
 802ac06:	4618      	mov	r0, r3
 802ac08:	f7fd f8f8 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802ac0c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 802ac10:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802ac14:	2101      	movs	r1, #1
 802ac16:	4618      	mov	r0, r3
 802ac18:	f7fd f8f0 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802ac1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 802ac20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802ac24:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 802ac28:	4618      	mov	r0, r3
 802ac2a:	f000 fa89 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 802ac2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802ac32:	4618      	mov	r0, r3
 802ac34:	f7fc ff47 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802ac38:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 802ac3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802ac40:	1e5a      	subs	r2, r3, #1
 802ac42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802ac46:	4611      	mov	r1, r2
 802ac48:	4618      	mov	r0, r3
 802ac4a:	f7fd f8d7 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802ac4e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802ac52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802ac56:	68b9      	ldr	r1, [r7, #8]
 802ac58:	4618      	mov	r0, r3
 802ac5a:	f000 fa71 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 802ac5e:	68fb      	ldr	r3, [r7, #12]
 802ac60:	695b      	ldr	r3, [r3, #20]
 802ac62:	425b      	negs	r3, r3
 802ac64:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 802ac66:	68fb      	ldr	r3, [r7, #12]
 802ac68:	69db      	ldr	r3, [r3, #28]
 802ac6a:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 802ac6c:	68fb      	ldr	r3, [r7, #12]
 802ac6e:	699b      	ldr	r3, [r3, #24]
 802ac70:	425b      	negs	r3, r3
 802ac72:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 802ac74:	68fb      	ldr	r3, [r7, #12]
 802ac76:	689b      	ldr	r3, [r3, #8]
 802ac78:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 802ac7a:	68fb      	ldr	r3, [r7, #12]
 802ac7c:	68db      	ldr	r3, [r3, #12]
 802ac7e:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 802ac80:	68fb      	ldr	r3, [r7, #12]
 802ac82:	681b      	ldr	r3, [r3, #0]
 802ac84:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 802ac86:	68fb      	ldr	r3, [r7, #12]
 802ac88:	685b      	ldr	r3, [r3, #4]
 802ac8a:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 802ac8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802ac90:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 802ac92:	2301      	movs	r3, #1
 802ac94:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 802ac96:	2301      	movs	r3, #1
 802ac98:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 802ac9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802ac9e:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 802aca0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802aca4:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 802aca6:	2301      	movs	r3, #1
 802aca8:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 802acaa:	2301      	movs	r3, #1
 802acac:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 802acae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802acb2:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 802acb4:	2301      	movs	r3, #1
 802acb6:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 802acb8:	2301      	movs	r3, #1
 802acba:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 802acbc:	2301      	movs	r3, #1
 802acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 802acc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802acc4:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 802acc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802acca:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 802accc:	2301      	movs	r3, #1
 802acce:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 802acd0:	2301      	movs	r3, #1
 802acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 802acd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802acd8:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 802acda:	2300      	movs	r3, #0
 802acdc:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 802acde:	2300      	movs	r3, #0
 802ace0:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 802ace2:	68fb      	ldr	r3, [r7, #12]
 802ace4:	6a1b      	ldr	r3, [r3, #32]
 802ace6:	2b00      	cmp	r3, #0
 802ace8:	db08      	blt.n	802acfc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 802acea:	697b      	ldr	r3, [r7, #20]
 802acec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802acee:	68fa      	ldr	r2, [r7, #12]
 802acf0:	6a12      	ldr	r2, [r2, #32]
 802acf2:	4611      	mov	r1, r2
 802acf4:	6978      	ldr	r0, [r7, #20]
 802acf6:	4798      	blx	r3
 802acf8:	4603      	mov	r3, r0
 802acfa:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 802acfc:	68b8      	ldr	r0, [r7, #8]
 802acfe:	f7fd fe4f 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802ad02:	4605      	mov	r5, r0
 802ad04:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 802ad08:	f7fd fe4a 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802ad0c:	4606      	mov	r6, r0
 802ad0e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 802ad12:	f7fe f987 	bl	8029024 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 802ad16:	6078      	str	r0, [r7, #4]
 802ad18:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 802ad1c:	f7fd fe4f 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802ad20:	4603      	mov	r3, r0
 802ad22:	f107 0454 	add.w	r4, r7, #84	; 0x54
 802ad26:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802ad2a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 802ad2e:	f107 001c 	add.w	r0, r7, #28
 802ad32:	9306      	str	r3, [sp, #24]
 802ad34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ad38:	9305      	str	r3, [sp, #20]
 802ad3a:	687b      	ldr	r3, [r7, #4]
 802ad3c:	9304      	str	r3, [sp, #16]
 802ad3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802ad42:	9303      	str	r3, [sp, #12]
 802ad44:	9602      	str	r6, [sp, #8]
 802ad46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802ad4a:	9301      	str	r3, [sp, #4]
 802ad4c:	9500      	str	r5, [sp, #0]
 802ad4e:	4623      	mov	r3, r4
 802ad50:	f7ee f9d2 	bl	80190f8 <arm_fully_connected_s8>
 802ad54:	4603      	mov	r3, r0
 802ad56:	2b00      	cmp	r3, #0
 802ad58:	bf14      	ite	ne
 802ad5a:	2301      	movne	r3, #1
 802ad5c:	2300      	moveq	r3, #0
 802ad5e:	b2db      	uxtb	r3, r3
 802ad60:	2b00      	cmp	r3, #0
 802ad62:	d03e      	beq.n	802ade2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 802ad64:	697b      	ldr	r3, [r7, #20]
 802ad66:	695c      	ldr	r4, [r3, #20]
 802ad68:	68b8      	ldr	r0, [r7, #8]
 802ad6a:	f7fd fe19 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802ad6e:	4606      	mov	r6, r0
 802ad70:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 802ad74:	f7fd fe14 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802ad78:	6078      	str	r0, [r7, #4]
 802ad7a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 802ad7e:	f7fe f951 	bl	8029024 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 802ad82:	6038      	str	r0, [r7, #0]
 802ad84:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 802ad88:	f7fd fe19 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802ad8c:	4603      	mov	r3, r0
 802ad8e:	f107 0554 	add.w	r5, r7, #84	; 0x54
 802ad92:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802ad96:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 802ad9a:	f107 001c 	add.w	r0, r7, #28
 802ad9e:	9306      	str	r3, [sp, #24]
 802ada0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ada4:	9305      	str	r3, [sp, #20]
 802ada6:	683b      	ldr	r3, [r7, #0]
 802ada8:	9304      	str	r3, [sp, #16]
 802adaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802adae:	9303      	str	r3, [sp, #12]
 802adb0:	687b      	ldr	r3, [r7, #4]
 802adb2:	9302      	str	r3, [sp, #8]
 802adb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802adb8:	9301      	str	r3, [sp, #4]
 802adba:	9600      	str	r6, [sp, #0]
 802adbc:	462b      	mov	r3, r5
 802adbe:	f7ee f99b 	bl	80190f8 <arm_fully_connected_s8>
 802adc2:	4603      	mov	r3, r0
 802adc4:	461a      	mov	r2, r3
 802adc6:	2300      	movs	r3, #0
 802adc8:	9303      	str	r3, [sp, #12]
 802adca:	9202      	str	r2, [sp, #8]
 802adcc:	4b0f      	ldr	r3, [pc, #60]	; (802ae0c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 802adce:	9301      	str	r3, [sp, #4]
 802add0:	4b0f      	ldr	r3, [pc, #60]	; (802ae10 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 802add2:	9300      	str	r3, [sp, #0]
 802add4:	23a6      	movs	r3, #166	; 0xa6
 802add6:	4a0f      	ldr	r2, [pc, #60]	; (802ae14 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 802add8:	490f      	ldr	r1, [pc, #60]	; (802ae18 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 802adda:	6978      	ldr	r0, [r7, #20]
 802addc:	47a0      	blx	r4
 802adde:	2401      	movs	r4, #1
 802ade0:	e000      	b.n	802ade4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 802ade2:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802ade4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802ade8:	4618      	mov	r0, r3
 802adea:	f7fc fe56 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 802adee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802adf2:	4618      	mov	r0, r3
 802adf4:	f7fc fe51 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802adf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802adfc:	4618      	mov	r0, r3
 802adfe:	f7fc fe4c 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
}
 802ae02:	4623      	mov	r3, r4
 802ae04:	4618      	mov	r0, r3
 802ae06:	37dc      	adds	r7, #220	; 0xdc
 802ae08:	46bd      	mov	sp, r7
 802ae0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ae0c:	080345c4 	.word	0x080345c4
 802ae10:	080345d8 	.word	0x080345d8
 802ae14:	080343c8 	.word	0x080343c8
 802ae18:	080345a8 	.word	0x080345a8

0802ae1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 802ae1c:	b590      	push	{r4, r7, lr}
 802ae1e:	b0d1      	sub	sp, #324	; 0x144
 802ae20:	af04      	add	r7, sp, #16
 802ae22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802ae2a:	6018      	str	r0, [r3, #0]
 802ae2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802ae34:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802ae36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802ae3e:	681b      	ldr	r3, [r3, #0]
 802ae40:	695b      	ldr	r3, [r3, #20]
 802ae42:	2b00      	cmp	r3, #0
 802ae44:	d101      	bne.n	802ae4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 802ae46:	f006 fa85 	bl	8031354 <abort>
  const auto* params =
 802ae4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802ae52:	681b      	ldr	r3, [r3, #0]
 802ae54:	695b      	ldr	r3, [r3, #20]
 802ae56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 802ae5a:	4b67      	ldr	r3, [pc, #412]	; (802aff8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 802ae5c:	681a      	ldr	r2, [r3, #0]
 802ae5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae62:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802ae66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802ae6e:	6809      	ldr	r1, [r1, #0]
 802ae70:	6818      	ldr	r0, [r3, #0]
 802ae72:	f7fd f897 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802ae76:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 802ae7a:	4b60      	ldr	r3, [pc, #384]	; (802affc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 802ae7c:	681a      	ldr	r2, [r3, #0]
 802ae7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae82:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802ae86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802ae8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802ae8e:	6809      	ldr	r1, [r1, #0]
 802ae90:	6818      	ldr	r0, [r3, #0]
 802ae92:	f7fd f887 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802ae96:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 802ae9a:	4b59      	ldr	r3, [pc, #356]	; (802b000 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 802ae9c:	681a      	ldr	r2, [r3, #0]
 802ae9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802aea2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802aea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802aeaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802aeae:	6809      	ldr	r1, [r1, #0]
 802aeb0:	6818      	ldr	r0, [r3, #0]
 802aeb2:	f7fd f877 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802aeb6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 802aeba:	4b52      	ldr	r3, [pc, #328]	; (802b004 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 802aebc:	681a      	ldr	r2, [r3, #0]
 802aebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802aec2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802aec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802aeca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802aece:	6809      	ldr	r1, [r1, #0]
 802aed0:	6818      	ldr	r0, [r3, #0]
 802aed2:	f7fd f877 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802aed6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 802aeda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802aede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802aee2:	681b      	ldr	r3, [r3, #0]
 802aee4:	691b      	ldr	r3, [r3, #16]
 802aee6:	2b00      	cmp	r3, #0
 802aee8:	d101      	bne.n	802aeee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 802aeea:	f006 fa33 	bl	8031354 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802aeee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802aef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802aef6:	681b      	ldr	r3, [r3, #0]
 802aef8:	691b      	ldr	r3, [r3, #16]
 802aefa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 802aefe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802af02:	7a1b      	ldrb	r3, [r3, #8]
 802af04:	2b09      	cmp	r3, #9
 802af06:	d021      	beq.n	802af4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 802af08:	2b09      	cmp	r3, #9
 802af0a:	dc55      	bgt.n	802afb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 802af0c:	2b01      	cmp	r3, #1
 802af0e:	d002      	beq.n	802af16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 802af10:	2b03      	cmp	r3, #3
 802af12:	d036      	beq.n	802af82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 802af14:	e050      	b.n	802afb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802af16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802af1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802af1e:	681b      	ldr	r3, [r3, #0]
 802af20:	695c      	ldr	r4, [r3, #20]
 802af22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802af26:	7a1b      	ldrb	r3, [r3, #8]
 802af28:	4618      	mov	r0, r3
 802af2a:	f7fb fe6f 	bl	8026c0c <TfLiteTypeGetName>
 802af2e:	4602      	mov	r2, r0
 802af30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802af34:	7a1b      	ldrb	r3, [r3, #8]
 802af36:	4619      	mov	r1, r3
 802af38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802af3c:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802af40:	460b      	mov	r3, r1
 802af42:	4931      	ldr	r1, [pc, #196]	; (802b008 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802af44:	6800      	ldr	r0, [r0, #0]
 802af46:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802af48:	2301      	movs	r3, #1
 802af4a:	e04f      	b.n	802afec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 802af4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802af50:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802af54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802af58:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802af5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802af60:	9302      	str	r3, [sp, #8]
 802af62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802af66:	9301      	str	r3, [sp, #4]
 802af68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802af6c:	9300      	str	r3, [sp, #0]
 802af6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802af72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802af76:	6809      	ldr	r1, [r1, #0]
 802af78:	6800      	ldr	r0, [r0, #0]
 802af7a:	f7ff fe29 	bl	802abd0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 802af7e:	4603      	mov	r3, r0
                               output);
 802af80:	e034      	b.n	802afec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802af82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802af86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802af8a:	681b      	ldr	r3, [r3, #0]
 802af8c:	695c      	ldr	r4, [r3, #20]
 802af8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802af92:	7a1b      	ldrb	r3, [r3, #8]
 802af94:	4618      	mov	r0, r3
 802af96:	f7fb fe39 	bl	8026c0c <TfLiteTypeGetName>
 802af9a:	4602      	mov	r2, r0
 802af9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802afa0:	7a1b      	ldrb	r3, [r3, #8]
 802afa2:	4619      	mov	r1, r3
 802afa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802afa8:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802afac:	460b      	mov	r3, r1
 802afae:	4916      	ldr	r1, [pc, #88]	; (802b008 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802afb0:	6800      	ldr	r0, [r0, #0]
 802afb2:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802afb4:	2301      	movs	r3, #1
 802afb6:	e019      	b.n	802afec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802afb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802afbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802afc0:	681b      	ldr	r3, [r3, #0]
 802afc2:	695c      	ldr	r4, [r3, #20]
 802afc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802afc8:	7a1b      	ldrb	r3, [r3, #8]
 802afca:	4618      	mov	r0, r3
 802afcc:	f7fb fe1e 	bl	8026c0c <TfLiteTypeGetName>
 802afd0:	4602      	mov	r2, r0
 802afd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802afd6:	7a1b      	ldrb	r3, [r3, #8]
 802afd8:	4619      	mov	r1, r3
 802afda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802afde:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802afe2:	460b      	mov	r3, r1
 802afe4:	4908      	ldr	r1, [pc, #32]	; (802b008 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802afe6:	6800      	ldr	r0, [r0, #0]
 802afe8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802afea:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 802afec:	4618      	mov	r0, r3
 802afee:	f507 779a 	add.w	r7, r7, #308	; 0x134
 802aff2:	46bd      	mov	sp, r7
 802aff4:	bd90      	pop	{r4, r7, pc}
 802aff6:	bf00      	nop
 802aff8:	08035f4c 	.word	0x08035f4c
 802affc:	08035f50 	.word	0x08035f50
 802b000:	08035f54 	.word	0x08035f54
 802b004:	08035f58 	.word	0x08035f58
 802b008:	080346fc 	.word	0x080346fc

0802b00c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 802b00c:	b4b0      	push	{r4, r5, r7}
 802b00e:	b083      	sub	sp, #12
 802b010:	af00      	add	r7, sp, #0
 802b012:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 802b014:	4b13      	ldr	r3, [pc, #76]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b016:	4a14      	ldr	r2, [pc, #80]	; (802b068 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 802b018:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 802b01a:	4b12      	ldr	r3, [pc, #72]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b01c:	2200      	movs	r2, #0
 802b01e:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 802b020:	4b10      	ldr	r3, [pc, #64]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b022:	4a12      	ldr	r2, [pc, #72]	; (802b06c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 802b024:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 802b026:	4b0f      	ldr	r3, [pc, #60]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b028:	4a11      	ldr	r2, [pc, #68]	; (802b070 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 802b02a:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 802b02c:	4b0d      	ldr	r3, [pc, #52]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b02e:	2200      	movs	r2, #0
 802b030:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 802b032:	4b0c      	ldr	r3, [pc, #48]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b034:	2200      	movs	r2, #0
 802b036:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 802b038:	4b0a      	ldr	r3, [pc, #40]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b03a:	2200      	movs	r2, #0
 802b03c:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 802b03e:	4b09      	ldr	r3, [pc, #36]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b040:	2200      	movs	r2, #0
 802b042:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 802b044:	687b      	ldr	r3, [r7, #4]
 802b046:	4a07      	ldr	r2, [pc, #28]	; (802b064 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802b048:	461c      	mov	r4, r3
 802b04a:	4615      	mov	r5, r2
 802b04c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802b04e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802b050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802b054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802b058:	6878      	ldr	r0, [r7, #4]
 802b05a:	370c      	adds	r7, #12
 802b05c:	46bd      	mov	sp, r7
 802b05e:	bcb0      	pop	{r4, r5, r7}
 802b060:	4770      	bx	lr
 802b062:	bf00      	nop
 802b064:	200008e0 	.word	0x200008e0
 802b068:	0802a937 	.word	0x0802a937
 802b06c:	0802a965 	.word	0x0802a965
 802b070:	0802ae1d 	.word	0x0802ae1d

0802b074 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 802b074:	b580      	push	{r7, lr}
 802b076:	b08a      	sub	sp, #40	; 0x28
 802b078:	af02      	add	r7, sp, #8
 802b07a:	60f8      	str	r0, [r7, #12]
 802b07c:	607b      	str	r3, [r7, #4]
 802b07e:	460b      	mov	r3, r1
 802b080:	72fb      	strb	r3, [r7, #11]
 802b082:	4613      	mov	r3, r2
 802b084:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 802b086:	7abb      	ldrb	r3, [r7, #10]
 802b088:	2b01      	cmp	r3, #1
 802b08a:	d03e      	beq.n	802b10a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 802b08c:	f04f 0200 	mov.w	r2, #0
 802b090:	f04f 0300 	mov.w	r3, #0
 802b094:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 802b098:	f107 0310 	add.w	r3, r7, #16
 802b09c:	9301      	str	r3, [sp, #4]
 802b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0a0:	9300      	str	r3, [sp, #0]
 802b0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b0a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b0a6:	6879      	ldr	r1, [r7, #4]
 802b0a8:	68f8      	ldr	r0, [r7, #12]
 802b0aa:	f7fc facd 	bl	8027648 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 802b0ae:	4603      	mov	r3, r0
 802b0b0:	77fb      	strb	r3, [r7, #31]
 802b0b2:	7ffb      	ldrb	r3, [r7, #31]
 802b0b4:	2b00      	cmp	r3, #0
 802b0b6:	d001      	beq.n	802b0bc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 802b0b8:	7ffb      	ldrb	r3, [r7, #31]
 802b0ba:	e027      	b.n	802b10c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 802b0bc:	ed97 7b04 	vldr	d7, [r7, #16]
 802b0c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802b0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b0c4:	3304      	adds	r3, #4
 802b0c6:	4619      	mov	r1, r3
 802b0c8:	4610      	mov	r0, r2
 802b0ca:	eeb0 0a47 	vmov.f32	s0, s14
 802b0ce:	eef0 0a67 	vmov.f32	s1, s15
 802b0d2:	f7fb fe21 	bl	8026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 802b0d6:	687b      	ldr	r3, [r7, #4]
 802b0d8:	691a      	ldr	r2, [r3, #16]
 802b0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b0dc:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 802b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b0e0:	691a      	ldr	r2, [r3, #16]
 802b0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b0e4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 802b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0e8:	691a      	ldr	r2, [r3, #16]
 802b0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b0ec:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 802b0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b0f0:	f103 0208 	add.w	r2, r3, #8
 802b0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b0f6:	330c      	adds	r3, #12
 802b0f8:	7af9      	ldrb	r1, [r7, #11]
 802b0fa:	9300      	str	r3, [sp, #0]
 802b0fc:	4613      	mov	r3, r2
 802b0fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b100:	68f8      	ldr	r0, [r7, #12]
 802b102:	f7fc fc2d 	bl	8027960 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802b106:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 802b108:	e000      	b.n	802b10c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 802b10a:	2300      	movs	r3, #0
}
 802b10c:	4618      	mov	r0, r3
 802b10e:	3720      	adds	r7, #32
 802b110:	46bd      	mov	sp, r7
 802b112:	bd80      	pop	{r7, pc}

0802b114 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 802b114:	b480      	push	{r7}
 802b116:	b083      	sub	sp, #12
 802b118:	af00      	add	r7, sp, #0
 802b11a:	6078      	str	r0, [r7, #4]
 802b11c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 802b11e:	687b      	ldr	r3, [r7, #4]
 802b120:	f9b3 2000 	ldrsh.w	r2, [r3]
 802b124:	683b      	ldr	r3, [r7, #0]
 802b126:	f9b3 3000 	ldrsh.w	r3, [r3]
 802b12a:	429a      	cmp	r2, r3
 802b12c:	da01      	bge.n	802b132 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 802b12e:	683b      	ldr	r3, [r7, #0]
 802b130:	e000      	b.n	802b134 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 802b132:	687b      	ldr	r3, [r7, #4]
    }
 802b134:	4618      	mov	r0, r3
 802b136:	370c      	adds	r7, #12
 802b138:	46bd      	mov	sp, r7
 802b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b13e:	4770      	bx	lr

0802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 802b140:	b580      	push	{r7, lr}
 802b142:	b086      	sub	sp, #24
 802b144:	af00      	add	r7, sp, #0
 802b146:	6078      	str	r0, [r7, #4]
 802b148:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 802b14a:	683b      	ldr	r3, [r7, #0]
 802b14c:	2b00      	cmp	r3, #0
 802b14e:	d003      	beq.n	802b158 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 802b150:	683b      	ldr	r3, [r7, #0]
 802b152:	685b      	ldr	r3, [r3, #4]
 802b154:	2b00      	cmp	r3, #0
 802b156:	d103      	bne.n	802b160 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 802b158:	6878      	ldr	r0, [r7, #4]
 802b15a:	f7fc fc7d 	bl	8027a58 <_ZN6tflite12RuntimeShapeC1Ev>
 802b15e:	e00d      	b.n	802b17c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 802b160:	683b      	ldr	r3, [r7, #0]
 802b162:	685b      	ldr	r3, [r3, #4]
 802b164:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 802b166:	697b      	ldr	r3, [r7, #20]
 802b168:	681b      	ldr	r3, [r3, #0]
 802b16a:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 802b16c:	697b      	ldr	r3, [r7, #20]
 802b16e:	3304      	adds	r3, #4
 802b170:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 802b172:	68fa      	ldr	r2, [r7, #12]
 802b174:	6939      	ldr	r1, [r7, #16]
 802b176:	6878      	ldr	r0, [r7, #4]
 802b178:	f7fc fc7c 	bl	8027a74 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 802b17c:	6878      	ldr	r0, [r7, #4]
 802b17e:	3718      	adds	r7, #24
 802b180:	46bd      	mov	sp, r7
 802b182:	bd80      	pop	{r7, pc}

0802b184 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 802b184:	b480      	push	{r7}
 802b186:	b083      	sub	sp, #12
 802b188:	af00      	add	r7, sp, #0
 802b18a:	4603      	mov	r3, r0
 802b18c:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 802b18e:	79fb      	ldrb	r3, [r7, #7]
 802b190:	2b01      	cmp	r3, #1
 802b192:	d002      	beq.n	802b19a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 802b194:	2b02      	cmp	r3, #2
 802b196:	d002      	beq.n	802b19e <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 802b198:	e003      	b.n	802b1a2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 802b19a:	2301      	movs	r3, #1
 802b19c:	e002      	b.n	802b1a4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 802b19e:	2302      	movs	r3, #2
 802b1a0:	e000      	b.n	802b1a4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 802b1a2:	2300      	movs	r3, #0
  }
}
 802b1a4:	4618      	mov	r0, r3
 802b1a6:	370c      	adds	r7, #12
 802b1a8:	46bd      	mov	sp, r7
 802b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1ae:	4770      	bx	lr

0802b1b0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 802b1b0:	b580      	push	{r7, lr}
 802b1b2:	b086      	sub	sp, #24
 802b1b4:	af00      	add	r7, sp, #0
 802b1b6:	6078      	str	r0, [r7, #4]
 802b1b8:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 802b1ba:	6878      	ldr	r0, [r7, #4]
 802b1bc:	f7fc fc83 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b1c0:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 802b1c2:	683b      	ldr	r3, [r7, #0]
 802b1c4:	2b00      	cmp	r3, #0
 802b1c6:	db03      	blt.n	802b1d0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 802b1c8:	683a      	ldr	r2, [r7, #0]
 802b1ca:	68fb      	ldr	r3, [r7, #12]
 802b1cc:	429a      	cmp	r2, r3
 802b1ce:	db01      	blt.n	802b1d4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 802b1d0:	f006 f8c0 	bl	8031354 <abort>
  const auto* dims_data = shape.DimsData();
 802b1d4:	6878      	ldr	r0, [r7, #4]
 802b1d6:	f7fc fe36 	bl	8027e46 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 802b1da:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 802b1dc:	2301      	movs	r3, #1
 802b1de:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 802b1e0:	2300      	movs	r3, #0
 802b1e2:	613b      	str	r3, [r7, #16]
 802b1e4:	693a      	ldr	r2, [r7, #16]
 802b1e6:	68fb      	ldr	r3, [r7, #12]
 802b1e8:	429a      	cmp	r2, r3
 802b1ea:	da12      	bge.n	802b212 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 802b1ec:	693a      	ldr	r2, [r7, #16]
 802b1ee:	683b      	ldr	r3, [r7, #0]
 802b1f0:	429a      	cmp	r2, r3
 802b1f2:	d005      	beq.n	802b200 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 802b1f4:	693b      	ldr	r3, [r7, #16]
 802b1f6:	009b      	lsls	r3, r3, #2
 802b1f8:	68ba      	ldr	r2, [r7, #8]
 802b1fa:	4413      	add	r3, r2
 802b1fc:	681b      	ldr	r3, [r3, #0]
 802b1fe:	e000      	b.n	802b202 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 802b200:	2301      	movs	r3, #1
 802b202:	697a      	ldr	r2, [r7, #20]
 802b204:	fb02 f303 	mul.w	r3, r2, r3
 802b208:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 802b20a:	693b      	ldr	r3, [r7, #16]
 802b20c:	3301      	adds	r3, #1
 802b20e:	613b      	str	r3, [r7, #16]
 802b210:	e7e8      	b.n	802b1e4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 802b212:	697b      	ldr	r3, [r7, #20]
}
 802b214:	4618      	mov	r0, r3
 802b216:	3718      	adds	r7, #24
 802b218:	46bd      	mov	sp, r7
 802b21a:	bd80      	pop	{r7, pc}

0802b21c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 802b21c:	b590      	push	{r4, r7, lr}
 802b21e:	b087      	sub	sp, #28
 802b220:	af00      	add	r7, sp, #0
 802b222:	60f8      	str	r0, [r7, #12]
 802b224:	60b9      	str	r1, [r7, #8]
 802b226:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 802b228:	68f8      	ldr	r0, [r7, #12]
 802b22a:	f7fc fc4c 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b22e:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 802b230:	2300      	movs	r3, #0
 802b232:	617b      	str	r3, [r7, #20]
 802b234:	697a      	ldr	r2, [r7, #20]
 802b236:	693b      	ldr	r3, [r7, #16]
 802b238:	429a      	cmp	r2, r3
 802b23a:	da15      	bge.n	802b268 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 802b23c:	697a      	ldr	r2, [r7, #20]
 802b23e:	68bb      	ldr	r3, [r7, #8]
 802b240:	429a      	cmp	r2, r3
 802b242:	d00d      	beq.n	802b260 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 802b244:	6979      	ldr	r1, [r7, #20]
 802b246:	68f8      	ldr	r0, [r7, #12]
 802b248:	f7fc fdd8 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802b24c:	4604      	mov	r4, r0
 802b24e:	6979      	ldr	r1, [r7, #20]
 802b250:	6878      	ldr	r0, [r7, #4]
 802b252:	f7fc fdd3 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802b256:	4603      	mov	r3, r0
 802b258:	429c      	cmp	r4, r3
 802b25a:	d001      	beq.n	802b260 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 802b25c:	f006 f87a 	bl	8031354 <abort>
  for (int i = 0; i < dims_count; ++i) {
 802b260:	697b      	ldr	r3, [r7, #20]
 802b262:	3301      	adds	r3, #1
 802b264:	617b      	str	r3, [r7, #20]
 802b266:	e7e5      	b.n	802b234 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 802b268:	68b9      	ldr	r1, [r7, #8]
 802b26a:	68f8      	ldr	r0, [r7, #12]
 802b26c:	f7ff ffa0 	bl	802b1b0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 802b270:	4603      	mov	r3, r0
}
 802b272:	4618      	mov	r0, r3
 802b274:	371c      	adds	r7, #28
 802b276:	46bd      	mov	sp, r7
 802b278:	bd90      	pop	{r4, r7, pc}

0802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 802b27a:	b580      	push	{r7, lr}
 802b27c:	b082      	sub	sp, #8
 802b27e:	af00      	add	r7, sp, #0
 802b280:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 802b282:	2100      	movs	r1, #0
 802b284:	6878      	ldr	r0, [r7, #4]
 802b286:	f7fd f9b3 	bl	80285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802b28a:	4603      	mov	r3, r0
}
 802b28c:	4618      	mov	r0, r3
 802b28e:	3708      	adds	r7, #8
 802b290:	46bd      	mov	sp, r7
 802b292:	bd80      	pop	{r7, pc}

0802b294 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802b294:	b580      	push	{r7, lr}
 802b296:	b082      	sub	sp, #8
 802b298:	af00      	add	r7, sp, #0
 802b29a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802b29c:	6878      	ldr	r0, [r7, #4]
 802b29e:	f000 f805 	bl	802b2ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 802b2a2:	4603      	mov	r3, r0
}
 802b2a4:	4618      	mov	r0, r3
 802b2a6:	3708      	adds	r7, #8
 802b2a8:	46bd      	mov	sp, r7
 802b2aa:	bd80      	pop	{r7, pc}

0802b2ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802b2ac:	b580      	push	{r7, lr}
 802b2ae:	b082      	sub	sp, #8
 802b2b0:	af00      	add	r7, sp, #0
 802b2b2:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 802b2b4:	2101      	movs	r1, #1
 802b2b6:	6878      	ldr	r0, [r7, #4]
 802b2b8:	f7fd f99a 	bl	80285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802b2bc:	4603      	mov	r3, r0
  }
 802b2be:	4618      	mov	r0, r3
 802b2c0:	3708      	adds	r7, #8
 802b2c2:	46bd      	mov	sp, r7
 802b2c4:	bd80      	pop	{r7, pc}

0802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 802b2c6:	b590      	push	{r4, r7, lr}
 802b2c8:	b085      	sub	sp, #20
 802b2ca:	af00      	add	r7, sp, #0
 802b2cc:	60f8      	str	r0, [r7, #12]
 802b2ce:	60b9      	str	r1, [r7, #8]
 802b2d0:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 802b2d2:	f107 0308 	add.w	r3, r7, #8
 802b2d6:	4618      	mov	r0, r3
 802b2d8:	f7ff f89e 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b2dc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802b2de:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 802b2e0:	1d3b      	adds	r3, r7, #4
 802b2e2:	4618      	mov	r0, r3
 802b2e4:	f7ff f898 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b2e8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802b2ea:	681b      	ldr	r3, [r3, #0]
 802b2ec:	461a      	mov	r2, r3
 802b2ee:	4621      	mov	r1, r4
 802b2f0:	68f8      	ldr	r0, [r7, #12]
 802b2f2:	f7ff faf5 	bl	802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802b2f6:	4603      	mov	r3, r0
 802b2f8:	4618      	mov	r0, r3
 802b2fa:	f7ff f81c 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802b2fe:	4603      	mov	r3, r0
}
 802b300:	4618      	mov	r0, r3
 802b302:	3714      	adds	r7, #20
 802b304:	46bd      	mov	sp, r7
 802b306:	bd90      	pop	{r4, r7, pc}

0802b308 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 802b308:	b580      	push	{r7, lr}
 802b30a:	b082      	sub	sp, #8
 802b30c:	af00      	add	r7, sp, #0
 802b30e:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 802b310:	687b      	ldr	r3, [r7, #4]
 802b312:	2b00      	cmp	r3, #0
 802b314:	bf0c      	ite	eq
 802b316:	2301      	moveq	r3, #1
 802b318:	2300      	movne	r3, #0
 802b31a:	b2db      	uxtb	r3, r3
 802b31c:	4618      	mov	r0, r3
 802b31e:	f7fd fd89 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802b322:	4603      	mov	r3, r0
}
 802b324:	4618      	mov	r0, r3
 802b326:	3708      	adds	r7, #8
 802b328:	46bd      	mov	sp, r7
 802b32a:	bd80      	pop	{r7, pc}

0802b32c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 802b32c:	b580      	push	{r7, lr}
 802b32e:	b08a      	sub	sp, #40	; 0x28
 802b330:	af00      	add	r7, sp, #0
 802b332:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 802b334:	482c      	ldr	r0, [pc, #176]	; (802b3e8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 802b336:	f7ff ffa0 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802b33a:	4603      	mov	r3, r0
 802b33c:	4618      	mov	r0, r3
 802b33e:	f7ff f876 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802b342:	4603      	mov	r3, r0
 802b344:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 802b346:	4829      	ldr	r0, [pc, #164]	; (802b3ec <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 802b348:	f7ff ff97 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802b34c:	4603      	mov	r3, r0
 802b34e:	4618      	mov	r0, r3
 802b350:	f7ff f86d 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802b354:	4603      	mov	r3, r0
 802b356:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 802b358:	f000 f86c 	bl	802b434 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 802b35c:	4603      	mov	r3, r0
 802b35e:	4619      	mov	r1, r3
 802b360:	6878      	ldr	r0, [r7, #4]
 802b362:	f000 f870 	bl	802b446 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b366:	4603      	mov	r3, r0
 802b368:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 802b36a:	69f9      	ldr	r1, [r7, #28]
 802b36c:	69f8      	ldr	r0, [r7, #28]
 802b36e:	f000 f83f 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b372:	4603      	mov	r3, r0
 802b374:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 802b376:	69f9      	ldr	r1, [r7, #28]
 802b378:	69b8      	ldr	r0, [r7, #24]
 802b37a:	f000 f839 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b37e:	4603      	mov	r3, r0
 802b380:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 802b382:	69b9      	ldr	r1, [r7, #24]
 802b384:	69b8      	ldr	r0, [r7, #24]
 802b386:	f000 f833 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b38a:	4603      	mov	r3, r0
 802b38c:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 802b38e:	6938      	ldr	r0, [r7, #16]
 802b390:	f000 f877 	bl	802b482 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 802b394:	4603      	mov	r3, r0
 802b396:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 802b398:	6979      	ldr	r1, [r7, #20]
 802b39a:	68f8      	ldr	r0, [r7, #12]
 802b39c:	f000 f853 	bl	802b446 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b3a0:	4603      	mov	r3, r0
 802b3a2:	6a39      	ldr	r1, [r7, #32]
 802b3a4:	4618      	mov	r0, r3
 802b3a6:	f000 f823 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b3aa:	4603      	mov	r3, r0
 802b3ac:	69b9      	ldr	r1, [r7, #24]
 802b3ae:	4618      	mov	r0, r3
 802b3b0:	f000 f849 	bl	802b446 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b3b4:	4603      	mov	r3, r0
 802b3b6:	4618      	mov	r0, r3
 802b3b8:	f000 f879 	bl	802b4ae <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 802b3bc:	4603      	mov	r3, r0
 802b3be:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 802b3c0:	68b9      	ldr	r1, [r7, #8]
 802b3c2:	69f8      	ldr	r0, [r7, #28]
 802b3c4:	f000 f83f 	bl	802b446 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b3c8:	4603      	mov	r3, r0
 802b3ca:	4619      	mov	r1, r3
 802b3cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802b3ce:	f000 f80f 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b3d2:	4603      	mov	r3, r0
 802b3d4:	4619      	mov	r1, r3
 802b3d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802b3d8:	f000 f87f 	bl	802b4da <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b3dc:	4603      	mov	r3, r0
}
 802b3de:	4618      	mov	r0, r3
 802b3e0:	3728      	adds	r7, #40	; 0x28
 802b3e2:	46bd      	mov	sp, r7
 802b3e4:	bd80      	pop	{r7, pc}
 802b3e6:	bf00      	nop
 802b3e8:	70f5a894 	.word	0x70f5a894
 802b3ec:	2aaaaaab 	.word	0x2aaaaaab

0802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 802b3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b3f2:	b085      	sub	sp, #20
 802b3f4:	af00      	add	r7, sp, #0
 802b3f6:	6078      	str	r0, [r7, #4]
 802b3f8:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 802b3fa:	1d3b      	adds	r3, r7, #4
 802b3fc:	4618      	mov	r0, r3
 802b3fe:	f7ff f80b 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b402:	4603      	mov	r3, r0
 802b404:	681d      	ldr	r5, [r3, #0]
 802b406:	463b      	mov	r3, r7
 802b408:	4618      	mov	r0, r3
 802b40a:	f7ff f805 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b40e:	4603      	mov	r3, r0
 802b410:	681e      	ldr	r6, [r3, #0]
 802b412:	f107 030c 	add.w	r3, r7, #12
 802b416:	4618      	mov	r0, r3
 802b418:	f7fe fffe 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b41c:	4604      	mov	r4, r0
 802b41e:	4631      	mov	r1, r6
 802b420:	4628      	mov	r0, r5
 802b422:	f7fc fc75 	bl	8027d10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802b426:	4603      	mov	r3, r0
 802b428:	6023      	str	r3, [r4, #0]
  return c;
 802b42a:	68fb      	ldr	r3, [r7, #12]
}
 802b42c:	4618      	mov	r0, r3
 802b42e:	3714      	adds	r7, #20
 802b430:	46bd      	mov	sp, r7
 802b432:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b434 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 802b434:	b580      	push	{r7, lr}
 802b436:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 802b438:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 802b43c:	f7fe fff7 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802b440:	4603      	mov	r3, r0
  }
 802b442:	4618      	mov	r0, r3
 802b444:	bd80      	pop	{r7, pc}

0802b446 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 802b446:	b590      	push	{r4, r7, lr}
 802b448:	b083      	sub	sp, #12
 802b44a:	af00      	add	r7, sp, #0
 802b44c:	6078      	str	r0, [r7, #4]
 802b44e:	6039      	str	r1, [r7, #0]
 802b450:	1d3b      	adds	r3, r7, #4
 802b452:	4618      	mov	r0, r3
 802b454:	f7fe ffe0 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b458:	4603      	mov	r3, r0
 802b45a:	681c      	ldr	r4, [r3, #0]
 802b45c:	463b      	mov	r3, r7
 802b45e:	4618      	mov	r0, r3
 802b460:	f7fe ffda 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b464:	4603      	mov	r3, r0
 802b466:	681b      	ldr	r3, [r3, #0]
 802b468:	4619      	mov	r1, r3
 802b46a:	4620      	mov	r0, r4
 802b46c:	f7fd fcc0 	bl	8028df0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802b470:	4603      	mov	r3, r0
 802b472:	4618      	mov	r0, r3
 802b474:	f7fe ff5f 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802b478:	4603      	mov	r3, r0
 802b47a:	4618      	mov	r0, r3
 802b47c:	370c      	adds	r7, #12
 802b47e:	46bd      	mov	sp, r7
 802b480:	bd90      	pop	{r4, r7, pc}

0802b482 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 802b482:	b580      	push	{r7, lr}
 802b484:	b082      	sub	sp, #8
 802b486:	af00      	add	r7, sp, #0
 802b488:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 802b48a:	1d3b      	adds	r3, r7, #4
 802b48c:	4618      	mov	r0, r3
 802b48e:	f7fe ffc3 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b492:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802b494:	681b      	ldr	r3, [r3, #0]
 802b496:	4618      	mov	r0, r3
 802b498:	f000 f83d 	bl	802b516 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 802b49c:	4603      	mov	r3, r0
 802b49e:	4618      	mov	r0, r3
 802b4a0:	f7fe ff49 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802b4a4:	4603      	mov	r3, r0
}
 802b4a6:	4618      	mov	r0, r3
 802b4a8:	3708      	adds	r7, #8
 802b4aa:	46bd      	mov	sp, r7
 802b4ac:	bd80      	pop	{r7, pc}

0802b4ae <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 802b4ae:	b580      	push	{r7, lr}
 802b4b0:	b082      	sub	sp, #8
 802b4b2:	af00      	add	r7, sp, #0
 802b4b4:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 802b4b6:	1d3b      	adds	r3, r7, #4
 802b4b8:	4618      	mov	r0, r3
 802b4ba:	f7fe ffad 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b4be:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802b4c0:	681b      	ldr	r3, [r3, #0]
 802b4c2:	4618      	mov	r0, r3
 802b4c4:	f7ff fee6 	bl	802b294 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 802b4c8:	4603      	mov	r3, r0
 802b4ca:	4618      	mov	r0, r3
 802b4cc:	f7fe ff33 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802b4d0:	4603      	mov	r3, r0
}
 802b4d2:	4618      	mov	r0, r3
 802b4d4:	3708      	adds	r7, #8
 802b4d6:	46bd      	mov	sp, r7
 802b4d8:	bd80      	pop	{r7, pc}

0802b4da <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 802b4da:	b590      	push	{r4, r7, lr}
 802b4dc:	b083      	sub	sp, #12
 802b4de:	af00      	add	r7, sp, #0
 802b4e0:	6078      	str	r0, [r7, #4]
 802b4e2:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 802b4e4:	1d3b      	adds	r3, r7, #4
 802b4e6:	4618      	mov	r0, r3
 802b4e8:	f7fe ff96 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b4ec:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802b4ee:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 802b4f0:	463b      	mov	r3, r7
 802b4f2:	4618      	mov	r0, r3
 802b4f4:	f7fe ff90 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b4f8:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802b4fa:	681b      	ldr	r3, [r3, #0]
 802b4fc:	4619      	mov	r1, r3
 802b4fe:	4620      	mov	r0, r4
 802b500:	f000 f815 	bl	802b52e <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 802b504:	4603      	mov	r3, r0
 802b506:	4618      	mov	r0, r3
 802b508:	f7fe ff15 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802b50c:	4603      	mov	r3, r0
}
 802b50e:	4618      	mov	r0, r3
 802b510:	370c      	adds	r7, #12
 802b512:	46bd      	mov	sp, r7
 802b514:	bd90      	pop	{r4, r7, pc}

0802b516 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802b516:	b580      	push	{r7, lr}
 802b518:	b082      	sub	sp, #8
 802b51a:	af00      	add	r7, sp, #0
 802b51c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802b51e:	6878      	ldr	r0, [r7, #4]
 802b520:	f000 f813 	bl	802b54a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 802b524:	4603      	mov	r3, r0
}
 802b526:	4618      	mov	r0, r3
 802b528:	3708      	adds	r7, #8
 802b52a:	46bd      	mov	sp, r7
 802b52c:	bd80      	pop	{r7, pc}

0802b52e <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 802b52e:	b580      	push	{r7, lr}
 802b530:	b082      	sub	sp, #8
 802b532:	af00      	add	r7, sp, #0
 802b534:	6078      	str	r0, [r7, #4]
 802b536:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 802b538:	6839      	ldr	r1, [r7, #0]
 802b53a:	6878      	ldr	r0, [r7, #4]
 802b53c:	f000 f812 	bl	802b564 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 802b540:	4603      	mov	r3, r0
}
 802b542:	4618      	mov	r0, r3
 802b544:	3708      	adds	r7, #8
 802b546:	46bd      	mov	sp, r7
 802b548:	bd80      	pop	{r7, pc}

0802b54a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802b54a:	b580      	push	{r7, lr}
 802b54c:	b082      	sub	sp, #8
 802b54e:	af00      	add	r7, sp, #0
 802b550:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 802b552:	2102      	movs	r1, #2
 802b554:	6878      	ldr	r0, [r7, #4]
 802b556:	f7fd f84b 	bl	80285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802b55a:	4603      	mov	r3, r0
  }
 802b55c:	4618      	mov	r0, r3
 802b55e:	3708      	adds	r7, #8
 802b560:	46bd      	mov	sp, r7
 802b562:	bd80      	pop	{r7, pc}

0802b564 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 802b564:	b580      	push	{r7, lr}
 802b566:	b082      	sub	sp, #8
 802b568:	af00      	add	r7, sp, #0
 802b56a:	6078      	str	r0, [r7, #4]
 802b56c:	6039      	str	r1, [r7, #0]
 802b56e:	6839      	ldr	r1, [r7, #0]
 802b570:	6878      	ldr	r0, [r7, #4]
 802b572:	f7fd fc3d 	bl	8028df0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802b576:	4603      	mov	r3, r0
 802b578:	4618      	mov	r0, r3
 802b57a:	3708      	adds	r7, #8
 802b57c:	46bd      	mov	sp, r7
 802b57e:	bd80      	pop	{r7, pc}

0802b580 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 802b580:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b582:	b099      	sub	sp, #100	; 0x64
 802b584:	af08      	add	r7, sp, #32
 802b586:	6278      	str	r0, [r7, #36]	; 0x24
 802b588:	6239      	str	r1, [r7, #32]
 802b58a:	61fa      	str	r2, [r7, #28]
 802b58c:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 802b58e:	2101      	movs	r1, #1
 802b590:	69f8      	ldr	r0, [r7, #28]
 802b592:	f7fb fdbb 	bl	802710c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 802b596:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 802b598:	2102      	movs	r1, #2
 802b59a:	69f8      	ldr	r0, [r7, #28]
 802b59c:	f7fb fdb6 	bl	802710c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 802b5a0:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 802b5a2:	6a3b      	ldr	r3, [r7, #32]
 802b5a4:	689d      	ldr	r5, [r3, #8]
 802b5a6:	6a3b      	ldr	r3, [r7, #32]
 802b5a8:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 802b5aa:	6a3b      	ldr	r3, [r7, #32]
 802b5ac:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 802b5ae:	6a3a      	ldr	r2, [r7, #32]
 802b5b0:	68d2      	ldr	r2, [r2, #12]
 802b5b2:	6a39      	ldr	r1, [r7, #32]
 802b5b4:	7809      	ldrb	r1, [r1, #0]
 802b5b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802b5b8:	6078      	str	r0, [r7, #4]
 802b5ba:	f107 0408 	add.w	r4, r7, #8
 802b5be:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 802b5c2:	9007      	str	r0, [sp, #28]
 802b5c4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 802b5c8:	9006      	str	r0, [sp, #24]
 802b5ca:	9105      	str	r1, [sp, #20]
 802b5cc:	9204      	str	r2, [sp, #16]
 802b5ce:	9303      	str	r3, [sp, #12]
 802b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b5d2:	9302      	str	r3, [sp, #8]
 802b5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b5d6:	9301      	str	r3, [sp, #4]
 802b5d8:	2301      	movs	r3, #1
 802b5da:	9300      	str	r3, [sp, #0]
 802b5dc:	2301      	movs	r3, #1
 802b5de:	4632      	mov	r2, r6
 802b5e0:	4629      	mov	r1, r5
 802b5e2:	4620      	mov	r0, r4
 802b5e4:	f7fe fc59 	bl	8029e9a <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 802b5e8:	687c      	ldr	r4, [r7, #4]
 802b5ea:	f107 0308 	add.w	r3, r7, #8
 802b5ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802b5f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 802b5f4:	69fb      	ldr	r3, [r7, #28]
 802b5f6:	781b      	ldrb	r3, [r3, #0]
 802b5f8:	2b01      	cmp	r3, #1
 802b5fa:	d10a      	bne.n	802b612 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 802b5fc:	6a3b      	ldr	r3, [r7, #32]
 802b5fe:	7d18      	ldrb	r0, [r3, #20]
 802b600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b602:	f103 011c 	add.w	r1, r3, #28
 802b606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b608:	3320      	adds	r3, #32
 802b60a:	461a      	mov	r2, r3
 802b60c:	f7fd fcae 	bl	8028f6c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 802b610:	e01e      	b.n	802b650 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 802b612:	6a3b      	ldr	r3, [r7, #32]
 802b614:	7d19      	ldrb	r1, [r3, #20]
 802b616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b618:	f103 0214 	add.w	r2, r3, #20
 802b61c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b61e:	3318      	adds	r3, #24
 802b620:	9300      	str	r3, [sp, #0]
 802b622:	4613      	mov	r3, r2
 802b624:	69ba      	ldr	r2, [r7, #24]
 802b626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802b628:	f7fc f99a 	bl	8027960 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802b62c:	4603      	mov	r3, r0
 802b62e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802b632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b636:	2b00      	cmp	r3, #0
 802b638:	d002      	beq.n	802b640 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 802b63a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b63e:	e00c      	b.n	802b65a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 802b640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b642:	695a      	ldr	r2, [r3, #20]
 802b644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b646:	699b      	ldr	r3, [r3, #24]
 802b648:	429a      	cmp	r2, r3
 802b64a:	dd01      	ble.n	802b650 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 802b64c:	f005 fe82 	bl	8031354 <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 802b650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b652:	f04f 32ff 	mov.w	r2, #4294967295
 802b656:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 802b658:	2300      	movs	r3, #0
}
 802b65a:	4618      	mov	r0, r3
 802b65c:	3744      	adds	r7, #68	; 0x44
 802b65e:	46bd      	mov	sp, r7
 802b660:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b662 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:
}

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 802b662:	b590      	push	{r4, r7, lr}
 802b664:	b0ab      	sub	sp, #172	; 0xac
 802b666:	af04      	add	r7, sp, #16
 802b668:	60f8      	str	r0, [r7, #12]
 802b66a:	60b9      	str	r1, [r7, #8]
 802b66c:	607a      	str	r2, [r7, #4]
 802b66e:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802b670:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802b674:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 802b678:	4618      	mov	r0, r3
 802b67a:	f7ff fd61 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802b67e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b682:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 802b686:	4618      	mov	r0, r3
 802b688:	f7ff fd5a 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 802b68c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802b690:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 802b694:	2303      	movs	r3, #3
 802b696:	2103      	movs	r1, #3
 802b698:	f7fd fcd3 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802b69c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 802b6a0:	2301      	movs	r3, #1
 802b6a2:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 802b6a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802b6a8:	2101      	movs	r1, #1
 802b6aa:	4618      	mov	r0, r3
 802b6ac:	f7fc fba6 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802b6b0:	4603      	mov	r3, r0
 802b6b2:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 802b6b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802b6b8:	2102      	movs	r1, #2
 802b6ba:	4618      	mov	r0, r3
 802b6bc:	f7fc fb9e 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802b6c0:	4603      	mov	r3, r0
 802b6c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 802b6c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802b6c8:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 802b6ca:	2301      	movs	r3, #1
 802b6cc:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 802b6ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b6d2:	2101      	movs	r1, #1
 802b6d4:	4618      	mov	r0, r3
 802b6d6:	f7fc fb91 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802b6da:	4603      	mov	r3, r0
 802b6dc:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 802b6de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b6e2:	2102      	movs	r1, #2
 802b6e4:	4618      	mov	r0, r3
 802b6e6:	f7fc fb89 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802b6ea:	4603      	mov	r3, r0
 802b6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 802b6ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802b6f2:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 802b6f4:	687b      	ldr	r3, [r7, #4]
 802b6f6:	689b      	ldr	r3, [r3, #8]
 802b6f8:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 802b6fa:	687b      	ldr	r3, [r7, #4]
 802b6fc:	685b      	ldr	r3, [r3, #4]
 802b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 802b700:	683b      	ldr	r3, [r7, #0]
 802b702:	685b      	ldr	r3, [r3, #4]
 802b704:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 802b706:	683b      	ldr	r3, [r7, #0]
 802b708:	681b      	ldr	r3, [r3, #0]
 802b70a:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 802b70c:	683b      	ldr	r3, [r7, #0]
 802b70e:	695b      	ldr	r3, [r3, #20]
 802b710:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 802b712:	683b      	ldr	r3, [r7, #0]
 802b714:	699b      	ldr	r3, [r3, #24]
 802b716:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 802b718:	2301      	movs	r3, #1
 802b71a:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 802b71c:	687b      	ldr	r3, [r7, #4]
 802b71e:	691b      	ldr	r3, [r3, #16]
 802b720:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 802b722:	687b      	ldr	r3, [r7, #4]
 802b724:	68db      	ldr	r3, [r3, #12]
 802b726:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 802b728:	2301      	movs	r3, #1
 802b72a:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 802b72c:	2300      	movs	r3, #0
 802b72e:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 802b730:	2300      	movs	r3, #0
 802b732:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 802b734:	683b      	ldr	r3, [r7, #0]
 802b736:	691b      	ldr	r3, [r3, #16]
 802b738:	2b00      	cmp	r3, #0
 802b73a:	db08      	blt.n	802b74e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 802b73c:	68fb      	ldr	r3, [r7, #12]
 802b73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b740:	683a      	ldr	r2, [r7, #0]
 802b742:	6912      	ldr	r2, [r2, #16]
 802b744:	4611      	mov	r1, r2
 802b746:	68f8      	ldr	r0, [r7, #12]
 802b748:	4798      	blx	r3
 802b74a:	4603      	mov	r3, r0
 802b74c:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 802b74e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 802b752:	f7fd f925 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802b756:	4604      	mov	r4, r0
 802b758:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 802b75c:	f7fd f92f 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802b760:	4603      	mov	r3, r0
 802b762:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802b766:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 802b76a:	f107 0014 	add.w	r0, r7, #20
 802b76e:	9302      	str	r3, [sp, #8]
 802b770:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802b774:	9301      	str	r3, [sp, #4]
 802b776:	f107 031c 	add.w	r3, r7, #28
 802b77a:	9300      	str	r3, [sp, #0]
 802b77c:	4623      	mov	r3, r4
 802b77e:	f7f5 fb4f 	bl	8020e20 <arm_max_pool_s8>
 802b782:	4603      	mov	r3, r0
 802b784:	2b00      	cmp	r3, #0
 802b786:	d001      	beq.n	802b78c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 802b788:	f005 fde4 	bl	8031354 <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 802b78c:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802b78e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b792:	4618      	mov	r0, r3
 802b794:	f7fc f981 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802b798:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802b79c:	4618      	mov	r0, r3
 802b79e:	f7fc f97c 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 802b7a2:	4623      	mov	r3, r4
}
 802b7a4:	4618      	mov	r0, r3
 802b7a6:	379c      	adds	r7, #156	; 0x9c
 802b7a8:	46bd      	mov	sp, r7
 802b7aa:	bd90      	pop	{r4, r7, pc}

0802b7ac <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 802b7ac:	b580      	push	{r7, lr}
 802b7ae:	b084      	sub	sp, #16
 802b7b0:	af00      	add	r7, sp, #0
 802b7b2:	60f8      	str	r0, [r7, #12]
 802b7b4:	60b9      	str	r1, [r7, #8]
 802b7b6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802b7b8:	68fb      	ldr	r3, [r7, #12]
 802b7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b7bc:	2b00      	cmp	r3, #0
 802b7be:	d101      	bne.n	802b7c4 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 802b7c0:	f005 fdc8 	bl	8031354 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 802b7c4:	68fb      	ldr	r3, [r7, #12]
 802b7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b7c8:	2124      	movs	r1, #36	; 0x24
 802b7ca:	68f8      	ldr	r0, [r7, #12]
 802b7cc:	4798      	blx	r3
 802b7ce:	4603      	mov	r3, r0
}
 802b7d0:	4618      	mov	r0, r3
 802b7d2:	3710      	adds	r7, #16
 802b7d4:	46bd      	mov	sp, r7
 802b7d6:	bd80      	pop	{r7, pc}

0802b7d8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 802b7d8:	b590      	push	{r4, r7, lr}
 802b7da:	b08b      	sub	sp, #44	; 0x2c
 802b7dc:	af02      	add	r7, sp, #8
 802b7de:	6078      	str	r0, [r7, #4]
 802b7e0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 802b7e2:	683b      	ldr	r3, [r7, #0]
 802b7e4:	691b      	ldr	r3, [r3, #16]
 802b7e6:	2b00      	cmp	r3, #0
 802b7e8:	d101      	bne.n	802b7ee <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 802b7ea:	f005 fdb3 	bl	8031354 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802b7ee:	683b      	ldr	r3, [r7, #0]
 802b7f0:	695b      	ldr	r3, [r3, #20]
 802b7f2:	2b00      	cmp	r3, #0
 802b7f4:	d101      	bne.n	802b7fa <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 802b7f6:	f005 fdad 	bl	8031354 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 802b7fa:	683b      	ldr	r3, [r7, #0]
 802b7fc:	691b      	ldr	r3, [r3, #16]
 802b7fe:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802b800:	683b      	ldr	r3, [r7, #0]
 802b802:	695b      	ldr	r3, [r3, #20]
 802b804:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 802b806:	2200      	movs	r2, #0
 802b808:	6839      	ldr	r1, [r7, #0]
 802b80a:	6878      	ldr	r0, [r7, #4]
 802b80c:	f7fb fd44 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802b810:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 802b812:	697b      	ldr	r3, [r7, #20]
 802b814:	2b00      	cmp	r3, #0
 802b816:	d10b      	bne.n	802b830 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 802b818:	687b      	ldr	r3, [r7, #4]
 802b81a:	695c      	ldr	r4, [r3, #20]
 802b81c:	4b19      	ldr	r3, [pc, #100]	; (802b884 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 802b81e:	9300      	str	r3, [sp, #0]
 802b820:	f44f 738e 	mov.w	r3, #284	; 0x11c
 802b824:	4a18      	ldr	r2, [pc, #96]	; (802b888 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 802b826:	4919      	ldr	r1, [pc, #100]	; (802b88c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 802b828:	6878      	ldr	r0, [r7, #4]
 802b82a:	47a0      	blx	r4
 802b82c:	2301      	movs	r3, #1
 802b82e:	e024      	b.n	802b87a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 802b830:	2200      	movs	r2, #0
 802b832:	6839      	ldr	r1, [r7, #0]
 802b834:	6878      	ldr	r0, [r7, #4]
 802b836:	f7fb fd3f 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802b83a:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 802b83c:	693b      	ldr	r3, [r7, #16]
 802b83e:	2b00      	cmp	r3, #0
 802b840:	d10b      	bne.n	802b85a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x82>
 802b842:	687b      	ldr	r3, [r7, #4]
 802b844:	695c      	ldr	r4, [r3, #20]
 802b846:	4b12      	ldr	r3, [pc, #72]	; (802b890 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 802b848:	9300      	str	r3, [sp, #0]
 802b84a:	f44f 738f 	mov.w	r3, #286	; 0x11e
 802b84e:	4a0e      	ldr	r2, [pc, #56]	; (802b888 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 802b850:	490e      	ldr	r1, [pc, #56]	; (802b88c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 802b852:	6878      	ldr	r0, [r7, #4]
 802b854:	47a0      	blx	r4
 802b856:	2301      	movs	r3, #1
 802b858:	e00f      	b.n	802b87a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 802b85a:	69fb      	ldr	r3, [r7, #28]
 802b85c:	9300      	str	r3, [sp, #0]
 802b85e:	693b      	ldr	r3, [r7, #16]
 802b860:	697a      	ldr	r2, [r7, #20]
 802b862:	69b9      	ldr	r1, [r7, #24]
 802b864:	6878      	ldr	r0, [r7, #4]
 802b866:	f7ff fe8b 	bl	802b580 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 802b86a:	4603      	mov	r3, r0
 802b86c:	73fb      	strb	r3, [r7, #15]
 802b86e:	7bfb      	ldrb	r3, [r7, #15]
 802b870:	2b00      	cmp	r3, #0
 802b872:	d001      	beq.n	802b878 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 802b874:	7bfb      	ldrb	r3, [r7, #15]
 802b876:	e000      	b.n	802b87a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  return kTfLiteOk;
 802b878:	2300      	movs	r3, #0
}
 802b87a:	4618      	mov	r0, r3
 802b87c:	3724      	adds	r7, #36	; 0x24
 802b87e:	46bd      	mov	sp, r7
 802b880:	bd90      	pop	{r4, r7, pc}
 802b882:	bf00      	nop
 802b884:	080347b8 	.word	0x080347b8
 802b888:	08034718 	.word	0x08034718
 802b88c:	080347a0 	.word	0x080347a0
 802b890:	080347cc 	.word	0x080347cc

0802b894 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 802b894:	b5b0      	push	{r4, r5, r7, lr}
 802b896:	b09a      	sub	sp, #104	; 0x68
 802b898:	af02      	add	r7, sp, #8
 802b89a:	6078      	str	r0, [r7, #4]
 802b89c:	6039      	str	r1, [r7, #0]
 802b89e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 802b8a0:	683b      	ldr	r3, [r7, #0]
 802b8a2:	691b      	ldr	r3, [r3, #16]
 802b8a4:	2b00      	cmp	r3, #0
 802b8a6:	d101      	bne.n	802b8ac <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 802b8a8:	f005 fd54 	bl	8031354 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802b8ac:	683b      	ldr	r3, [r7, #0]
 802b8ae:	695b      	ldr	r3, [r3, #20]
 802b8b0:	2b00      	cmp	r3, #0
 802b8b2:	d101      	bne.n	802b8b8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 802b8b4:	f005 fd4e 	bl	8031354 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 802b8b8:	683b      	ldr	r3, [r7, #0]
 802b8ba:	691b      	ldr	r3, [r3, #16]
 802b8bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802b8be:	683b      	ldr	r3, [r7, #0]
 802b8c0:	695b      	ldr	r3, [r3, #20]
 802b8c2:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 802b8c4:	2200      	movs	r2, #0
 802b8c6:	6839      	ldr	r1, [r7, #0]
 802b8c8:	6878      	ldr	r0, [r7, #4]
 802b8ca:	f7fb fce5 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802b8ce:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 802b8d0:	2200      	movs	r2, #0
 802b8d2:	6839      	ldr	r1, [r7, #0]
 802b8d4:	6878      	ldr	r0, [r7, #4]
 802b8d6:	f7fb fcef 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802b8da:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 802b8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b8de:	9300      	str	r3, [sp, #0]
 802b8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b8e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802b8e6:	6878      	ldr	r0, [r7, #4]
 802b8e8:	f7ff fe4a 	bl	802b580 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 802b8ec:	4603      	mov	r3, r0
 802b8ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 802b8f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802b8f6:	2b00      	cmp	r3, #0
 802b8f8:	d002      	beq.n	802b900 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 802b8fa:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 802b8fe:	e064      	b.n	802b9ca <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 802b900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b902:	781b      	ldrb	r3, [r3, #0]
 802b904:	2b09      	cmp	r3, #9
 802b906:	d15f      	bne.n	802b9c8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 802b908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b90c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802b90e:	4618      	mov	r0, r3
 802b910:	f7fc f93d 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 802b914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b918:	4618      	mov	r0, r3
 802b91a:	f7fc f8d4 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b91e:	4603      	mov	r3, r0
 802b920:	2b04      	cmp	r3, #4
 802b922:	d001      	beq.n	802b928 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 802b924:	f005 fd16 	bl	8031354 <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 802b928:	f107 030c 	add.w	r3, r7, #12
 802b92c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802b92e:	4618      	mov	r0, r3
 802b930:	f7fc f92d 	bl	8027b8e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 802b934:	f107 030c 	add.w	r3, r7, #12
 802b938:	4618      	mov	r0, r3
 802b93a:	f7fc f8c4 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b93e:	4603      	mov	r3, r0
 802b940:	2b04      	cmp	r3, #4
 802b942:	d001      	beq.n	802b948 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 802b944:	f005 fd06 	bl	8031354 <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 802b948:	f107 020c 	add.w	r2, r7, #12
 802b94c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802b950:	2303      	movs	r3, #3
 802b952:	2103      	movs	r1, #3
 802b954:	f7fd fb75 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802b958:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 802b95a:	f107 030c 	add.w	r3, r7, #12
 802b95e:	2102      	movs	r1, #2
 802b960:	4618      	mov	r0, r3
 802b962:	f7fc fa4b 	bl	8027dfc <_ZNK6tflite12RuntimeShape4DimsEi>
 802b966:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 802b968:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802b96a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802b96c:	f7f5 f92b 	bl	8020bc6 <arm_avgpool_s8_get_buffer_size>
 802b970:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 802b972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b974:	2b00      	cmp	r3, #0
 802b976:	dd11      	ble.n	802b99c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 802b978:	687b      	ldr	r3, [r7, #4]
 802b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b97c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802b97e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802b980:	3210      	adds	r2, #16
 802b982:	6878      	ldr	r0, [r7, #4]
 802b984:	4798      	blx	r3
 802b986:	4603      	mov	r3, r0
 802b988:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 802b98c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802b990:	2b00      	cmp	r3, #0
 802b992:	d007      	beq.n	802b9a4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 802b994:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 802b998:	2500      	movs	r5, #0
 802b99a:	e004      	b.n	802b9a6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 802b99c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b99e:	f04f 32ff 	mov.w	r2, #4294967295
 802b9a2:	611a      	str	r2, [r3, #16]
 802b9a4:	2501      	movs	r5, #1
 802b9a6:	f107 030c 	add.w	r3, r7, #12
 802b9aa:	4618      	mov	r0, r3
 802b9ac:	f7fc f875 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
 802b9b0:	2d01      	cmp	r5, #1
 802b9b2:	d001      	beq.n	802b9b8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 802b9b4:	2500      	movs	r5, #0
 802b9b6:	e000      	b.n	802b9ba <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
 802b9b8:	2501      	movs	r5, #1
 802b9ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b9be:	4618      	mov	r0, r3
 802b9c0:	f7fc f86b 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
 802b9c4:	2d01      	cmp	r5, #1
 802b9c6:	d100      	bne.n	802b9ca <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 802b9c8:	2400      	movs	r4, #0
}
 802b9ca:	4623      	mov	r3, r4
 802b9cc:	4618      	mov	r0, r3
 802b9ce:	3760      	adds	r7, #96	; 0x60
 802b9d0:	46bd      	mov	sp, r7
 802b9d2:	bdb0      	pop	{r4, r5, r7, pc}

0802b9d4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 802b9d4:	b590      	push	{r4, r7, lr}
 802b9d6:	b087      	sub	sp, #28
 802b9d8:	af00      	add	r7, sp, #0
 802b9da:	6078      	str	r0, [r7, #4]
 802b9dc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802b9de:	683b      	ldr	r3, [r7, #0]
 802b9e0:	695b      	ldr	r3, [r3, #20]
 802b9e2:	2b00      	cmp	r3, #0
 802b9e4:	d101      	bne.n	802b9ea <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 802b9e6:	f005 fcb5 	bl	8031354 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802b9ea:	683b      	ldr	r3, [r7, #0]
 802b9ec:	695b      	ldr	r3, [r3, #20]
 802b9ee:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 802b9f0:	683b      	ldr	r3, [r7, #0]
 802b9f2:	691b      	ldr	r3, [r3, #16]
 802b9f4:	2b00      	cmp	r3, #0
 802b9f6:	d101      	bne.n	802b9fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 802b9f8:	f005 fcac 	bl	8031354 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802b9fc:	683b      	ldr	r3, [r7, #0]
 802b9fe:	691b      	ldr	r3, [r3, #16]
 802ba00:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802ba02:	2200      	movs	r2, #0
 802ba04:	6839      	ldr	r1, [r7, #0]
 802ba06:	6878      	ldr	r0, [r7, #4]
 802ba08:	f7fc facc 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802ba0c:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 802ba0e:	2200      	movs	r2, #0
 802ba10:	6839      	ldr	r1, [r7, #0]
 802ba12:	6878      	ldr	r0, [r7, #4]
 802ba14:	f7fc fad6 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802ba18:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 802ba1a:	68fb      	ldr	r3, [r7, #12]
 802ba1c:	7a1b      	ldrb	r3, [r3, #8]
 802ba1e:	2b09      	cmp	r3, #9
 802ba20:	d024      	beq.n	802ba6c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x98>
 802ba22:	2b09      	cmp	r3, #9
 802ba24:	dc31      	bgt.n	802ba8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 802ba26:	2b01      	cmp	r3, #1
 802ba28:	d002      	beq.n	802ba30 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 802ba2a:	2b03      	cmp	r3, #3
 802ba2c:	d00f      	beq.n	802ba4e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
 802ba2e:	e02c      	b.n	802ba8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb6>
    case kTfLiteFloat32:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802ba30:	687b      	ldr	r3, [r7, #4]
 802ba32:	695c      	ldr	r4, [r3, #20]
 802ba34:	68fb      	ldr	r3, [r7, #12]
 802ba36:	7a1b      	ldrb	r3, [r3, #8]
 802ba38:	4618      	mov	r0, r3
 802ba3a:	f7fb f8e7 	bl	8026c0c <TfLiteTypeGetName>
 802ba3e:	4602      	mov	r2, r0
 802ba40:	68fb      	ldr	r3, [r7, #12]
 802ba42:	7a1b      	ldrb	r3, [r3, #8]
 802ba44:	4919      	ldr	r1, [pc, #100]	; (802baac <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802ba46:	6878      	ldr	r0, [r7, #4]
 802ba48:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802ba4a:	2301      	movs	r3, #1
 802ba4c:	e02a      	b.n	802baa4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>

      AverageEvalFloat(context, node, params, data, input, output);
      break;
    case kTfLiteUInt8:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802ba4e:	687b      	ldr	r3, [r7, #4]
 802ba50:	695c      	ldr	r4, [r3, #20]
 802ba52:	68fb      	ldr	r3, [r7, #12]
 802ba54:	7a1b      	ldrb	r3, [r3, #8]
 802ba56:	4618      	mov	r0, r3
 802ba58:	f7fb f8d8 	bl	8026c0c <TfLiteTypeGetName>
 802ba5c:	4602      	mov	r2, r0
 802ba5e:	68fb      	ldr	r3, [r7, #12]
 802ba60:	7a1b      	ldrb	r3, [r3, #8]
 802ba62:	4912      	ldr	r1, [pc, #72]	; (802baac <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802ba64:	6878      	ldr	r0, [r7, #4]
 802ba66:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802ba68:	2301      	movs	r3, #1
 802ba6a:	e01b      	b.n	802baa4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>

      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    case kTfLiteInt8:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802ba6c:	687b      	ldr	r3, [r7, #4]
 802ba6e:	695c      	ldr	r4, [r3, #20]
 802ba70:	68fb      	ldr	r3, [r7, #12]
 802ba72:	7a1b      	ldrb	r3, [r3, #8]
 802ba74:	4618      	mov	r0, r3
 802ba76:	f7fb f8c9 	bl	8026c0c <TfLiteTypeGetName>
 802ba7a:	4602      	mov	r2, r0
 802ba7c:	68fb      	ldr	r3, [r7, #12]
 802ba7e:	7a1b      	ldrb	r3, [r3, #8]
 802ba80:	490a      	ldr	r1, [pc, #40]	; (802baac <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802ba82:	6878      	ldr	r0, [r7, #4]
 802ba84:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802ba86:	2301      	movs	r3, #1
 802ba88:	e00c      	b.n	802baa4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>
      #endif

      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 802ba8a:	687b      	ldr	r3, [r7, #4]
 802ba8c:	695c      	ldr	r4, [r3, #20]
 802ba8e:	68fb      	ldr	r3, [r7, #12]
 802ba90:	7a1b      	ldrb	r3, [r3, #8]
 802ba92:	4618      	mov	r0, r3
 802ba94:	f7fb f8ba 	bl	8026c0c <TfLiteTypeGetName>
 802ba98:	4603      	mov	r3, r0
 802ba9a:	461a      	mov	r2, r3
 802ba9c:	4904      	ldr	r1, [pc, #16]	; (802bab0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xdc>)
 802ba9e:	6878      	ldr	r0, [r7, #4]
 802baa0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 802baa2:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 802baa4:	4618      	mov	r0, r3
 802baa6:	371c      	adds	r7, #28
 802baa8:	46bd      	mov	sp, r7
 802baaa:	bd90      	pop	{r4, r7, pc}
 802baac:	080347e0 	.word	0x080347e0
 802bab0:	080347fc 	.word	0x080347fc

0802bab4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 802bab4:	b590      	push	{r4, r7, lr}
 802bab6:	b089      	sub	sp, #36	; 0x24
 802bab8:	af02      	add	r7, sp, #8
 802baba:	6078      	str	r0, [r7, #4]
 802babc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802babe:	683b      	ldr	r3, [r7, #0]
 802bac0:	695b      	ldr	r3, [r3, #20]
 802bac2:	2b00      	cmp	r3, #0
 802bac4:	d101      	bne.n	802baca <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 802bac6:	f005 fc45 	bl	8031354 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802baca:	683b      	ldr	r3, [r7, #0]
 802bacc:	695b      	ldr	r3, [r3, #20]
 802bace:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 802bad0:	683b      	ldr	r3, [r7, #0]
 802bad2:	691b      	ldr	r3, [r3, #16]
 802bad4:	2b00      	cmp	r3, #0
 802bad6:	d101      	bne.n	802badc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 802bad8:	f005 fc3c 	bl	8031354 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802badc:	683b      	ldr	r3, [r7, #0]
 802bade:	691b      	ldr	r3, [r3, #16]
 802bae0:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802bae2:	2200      	movs	r2, #0
 802bae4:	6839      	ldr	r1, [r7, #0]
 802bae6:	6878      	ldr	r0, [r7, #4]
 802bae8:	f7fc fa5c 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802baec:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 802baee:	2200      	movs	r2, #0
 802baf0:	6839      	ldr	r1, [r7, #0]
 802baf2:	6878      	ldr	r0, [r7, #4]
 802baf4:	f7fc fa66 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802baf8:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 802bafa:	68fb      	ldr	r3, [r7, #12]
 802bafc:	7a1b      	ldrb	r3, [r3, #8]
 802bafe:	2b09      	cmp	r3, #9
 802bb00:	d024      	beq.n	802bb4c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x98>
 802bb02:	2b09      	cmp	r3, #9
 802bb04:	dc2f      	bgt.n	802bb66 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb2>
 802bb06:	2b01      	cmp	r3, #1
 802bb08:	d002      	beq.n	802bb10 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 802bb0a:	2b03      	cmp	r3, #3
 802bb0c:	d00f      	beq.n	802bb2e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
 802bb0e:	e02a      	b.n	802bb66 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb2>
    case kTfLiteFloat32:
      #if EI_TFLITE_DISABLE_MAX_POOL_2D_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802bb10:	687b      	ldr	r3, [r7, #4]
 802bb12:	695c      	ldr	r4, [r3, #20]
 802bb14:	68fb      	ldr	r3, [r7, #12]
 802bb16:	7a1b      	ldrb	r3, [r3, #8]
 802bb18:	4618      	mov	r0, r3
 802bb1a:	f7fb f877 	bl	8026c0c <TfLiteTypeGetName>
 802bb1e:	4602      	mov	r2, r0
 802bb20:	68fb      	ldr	r3, [r7, #12]
 802bb22:	7a1b      	ldrb	r3, [r3, #8]
 802bb24:	4918      	ldr	r1, [pc, #96]	; (802bb88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>)
 802bb26:	6878      	ldr	r0, [r7, #4]
 802bb28:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802bb2a:	2301      	movs	r3, #1
 802bb2c:	e028      	b.n	802bb80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>

      MaxEvalFloat(context, node, params, data, input, output);
      break;
    case kTfLiteUInt8:
      #if EI_TFLITE_DISABLE_MAX_POOL_2D_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802bb2e:	687b      	ldr	r3, [r7, #4]
 802bb30:	695c      	ldr	r4, [r3, #20]
 802bb32:	68fb      	ldr	r3, [r7, #12]
 802bb34:	7a1b      	ldrb	r3, [r3, #8]
 802bb36:	4618      	mov	r0, r3
 802bb38:	f7fb f868 	bl	8026c0c <TfLiteTypeGetName>
 802bb3c:	4602      	mov	r2, r0
 802bb3e:	68fb      	ldr	r3, [r7, #12]
 802bb40:	7a1b      	ldrb	r3, [r3, #8]
 802bb42:	4911      	ldr	r1, [pc, #68]	; (802bb88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>)
 802bb44:	6878      	ldr	r0, [r7, #4]
 802bb46:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802bb48:	2301      	movs	r3, #1
 802bb4a:	e019      	b.n	802bb80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      MaxEvalInt8(context, node, params, data, input, output);
 802bb4c:	68bb      	ldr	r3, [r7, #8]
 802bb4e:	9301      	str	r3, [sp, #4]
 802bb50:	68fb      	ldr	r3, [r7, #12]
 802bb52:	9300      	str	r3, [sp, #0]
 802bb54:	693b      	ldr	r3, [r7, #16]
 802bb56:	697a      	ldr	r2, [r7, #20]
 802bb58:	6839      	ldr	r1, [r7, #0]
 802bb5a:	6878      	ldr	r0, [r7, #4]
 802bb5c:	f7ff fd81 	bl	802b662 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 802bb60:	bf00      	nop
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
 802bb62:	2300      	movs	r3, #0
 802bb64:	e00c      	b.n	802bb80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 802bb66:	687b      	ldr	r3, [r7, #4]
 802bb68:	695c      	ldr	r4, [r3, #20]
 802bb6a:	68fb      	ldr	r3, [r7, #12]
 802bb6c:	7a1b      	ldrb	r3, [r3, #8]
 802bb6e:	4618      	mov	r0, r3
 802bb70:	f7fb f84c 	bl	8026c0c <TfLiteTypeGetName>
 802bb74:	4603      	mov	r3, r0
 802bb76:	461a      	mov	r2, r3
 802bb78:	4904      	ldr	r1, [pc, #16]	; (802bb8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802bb7a:	6878      	ldr	r0, [r7, #4]
 802bb7c:	47a0      	blx	r4
      return kTfLiteError;
 802bb7e:	2301      	movs	r3, #1
}
 802bb80:	4618      	mov	r0, r3
 802bb82:	371c      	adds	r7, #28
 802bb84:	46bd      	mov	sp, r7
 802bb86:	bd90      	pop	{r4, r7, pc}
 802bb88:	080347e0 	.word	0x080347e0
 802bb8c:	08034828 	.word	0x08034828

0802bb90 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 802bb90:	b4b0      	push	{r4, r5, r7}
 802bb92:	b083      	sub	sp, #12
 802bb94:	af00      	add	r7, sp, #0
 802bb96:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 802bb98:	687b      	ldr	r3, [r7, #4]
 802bb9a:	4a07      	ldr	r2, [pc, #28]	; (802bbb8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x28>)
 802bb9c:	461c      	mov	r4, r3
 802bb9e:	4615      	mov	r5, r2
 802bba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802bba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802bba4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802bba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802bbac:	6878      	ldr	r0, [r7, #4]
 802bbae:	370c      	adds	r7, #12
 802bbb0:	46bd      	mov	sp, r7
 802bbb2:	bcb0      	pop	{r4, r5, r7}
 802bbb4:	4770      	bx	lr
 802bbb6:	bf00      	nop
 802bbb8:	0803486c 	.word	0x0803486c

0802bbbc <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 802bbbc:	b480      	push	{r7}
 802bbbe:	b083      	sub	sp, #12
 802bbc0:	af00      	add	r7, sp, #0
 802bbc2:	6078      	str	r0, [r7, #4]
 802bbc4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 802bbc6:	687b      	ldr	r3, [r7, #4]
 802bbc8:	781a      	ldrb	r2, [r3, #0]
 802bbca:	683b      	ldr	r3, [r7, #0]
 802bbcc:	781b      	ldrb	r3, [r3, #0]
 802bbce:	429a      	cmp	r2, r3
 802bbd0:	d201      	bcs.n	802bbd6 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 802bbd2:	683b      	ldr	r3, [r7, #0]
 802bbd4:	e000      	b.n	802bbd8 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 802bbd6:	687b      	ldr	r3, [r7, #4]
    }
 802bbd8:	4618      	mov	r0, r3
 802bbda:	370c      	adds	r7, #12
 802bbdc:	46bd      	mov	sp, r7
 802bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bbe2:	4770      	bx	lr

0802bbe4 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 802bbe4:	b480      	push	{r7}
 802bbe6:	b083      	sub	sp, #12
 802bbe8:	af00      	add	r7, sp, #0
 802bbea:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 802bbec:	687b      	ldr	r3, [r7, #4]
 802bbee:	2b00      	cmp	r3, #0
 802bbf0:	d002      	beq.n	802bbf8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 802bbf2:	687b      	ldr	r3, [r7, #4]
 802bbf4:	681b      	ldr	r3, [r3, #0]
 802bbf6:	e000      	b.n	802bbfa <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 802bbf8:	2300      	movs	r3, #0
}
 802bbfa:	4618      	mov	r0, r3
 802bbfc:	370c      	adds	r7, #12
 802bbfe:	46bd      	mov	sp, r7
 802bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bc04:	4770      	bx	lr
	...

0802bc08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 802bc08:	b5b0      	push	{r4, r5, r7, lr}
 802bc0a:	b08e      	sub	sp, #56	; 0x38
 802bc0c:	af04      	add	r7, sp, #16
 802bc0e:	6078      	str	r0, [r7, #4]
 802bc10:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 802bc12:	2200      	movs	r2, #0
 802bc14:	6839      	ldr	r1, [r7, #0]
 802bc16:	6878      	ldr	r0, [r7, #4]
 802bc18:	f7fb fb3e 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802bc1c:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 802bc1e:	69bb      	ldr	r3, [r7, #24]
 802bc20:	2b00      	cmp	r3, #0
 802bc22:	d10a      	bne.n	802bc3a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 802bc24:	687b      	ldr	r3, [r7, #4]
 802bc26:	695c      	ldr	r4, [r3, #20]
 802bc28:	4b62      	ldr	r3, [pc, #392]	; (802bdb4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 802bc2a:	9300      	str	r3, [sp, #0]
 802bc2c:	2323      	movs	r3, #35	; 0x23
 802bc2e:	4a62      	ldr	r2, [pc, #392]	; (802bdb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802bc30:	4962      	ldr	r1, [pc, #392]	; (802bdbc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 802bc32:	6878      	ldr	r0, [r7, #4]
 802bc34:	47a0      	blx	r4
 802bc36:	2301      	movs	r3, #1
 802bc38:	e0b8      	b.n	802bdac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 802bc3a:	2200      	movs	r2, #0
 802bc3c:	6839      	ldr	r1, [r7, #0]
 802bc3e:	6878      	ldr	r0, [r7, #4]
 802bc40:	f7fb fb3a 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802bc44:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 802bc46:	697b      	ldr	r3, [r7, #20]
 802bc48:	2b00      	cmp	r3, #0
 802bc4a:	d10a      	bne.n	802bc62 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 802bc4c:	687b      	ldr	r3, [r7, #4]
 802bc4e:	695c      	ldr	r4, [r3, #20]
 802bc50:	4b5b      	ldr	r3, [pc, #364]	; (802bdc0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 802bc52:	9300      	str	r3, [sp, #0]
 802bc54:	2325      	movs	r3, #37	; 0x25
 802bc56:	4a58      	ldr	r2, [pc, #352]	; (802bdb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802bc58:	4958      	ldr	r1, [pc, #352]	; (802bdbc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 802bc5a:	6878      	ldr	r0, [r7, #4]
 802bc5c:	47a0      	blx	r4
 802bc5e:	2301      	movs	r3, #1
 802bc60:	e0a4      	b.n	802bdac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 802bc62:	69b8      	ldr	r0, [r7, #24]
 802bc64:	f7fb fa98 	bl	8027198 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 802bc68:	4602      	mov	r2, r0
 802bc6a:	460b      	mov	r3, r1
 802bc6c:	4613      	mov	r3, r2
 802bc6e:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 802bc70:	697b      	ldr	r3, [r7, #20]
 802bc72:	689b      	ldr	r3, [r3, #8]
 802bc74:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802bc76:	6838      	ldr	r0, [r7, #0]
 802bc78:	f7fd f9ba 	bl	8028ff0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802bc7c:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 802bc7e:	2b01      	cmp	r3, #1
 802bc80:	d109      	bne.n	802bc96 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 802bc82:	68fb      	ldr	r3, [r7, #12]
 802bc84:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802bc86:	2b01      	cmp	r3, #1
 802bc88:	d105      	bne.n	802bc96 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 802bc8a:	68fb      	ldr	r3, [r7, #12]
 802bc8c:	685b      	ldr	r3, [r3, #4]
 802bc8e:	2b00      	cmp	r3, #0
 802bc90:	d101      	bne.n	802bc96 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 802bc92:	2301      	movs	r3, #1
 802bc94:	e000      	b.n	802bc98 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 802bc96:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802bc98:	2b00      	cmp	r3, #0
 802bc9a:	d002      	beq.n	802bca2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 802bc9c:	68fb      	ldr	r3, [r7, #12]
 802bc9e:	2200      	movs	r2, #0
 802bca0:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 802bca2:	2301      	movs	r3, #1
 802bca4:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 802bca6:	f04f 33ff 	mov.w	r3, #4294967295
 802bcaa:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 802bcac:	2300      	movs	r3, #0
 802bcae:	61fb      	str	r3, [r7, #28]
 802bcb0:	68fb      	ldr	r3, [r7, #12]
 802bcb2:	681b      	ldr	r3, [r3, #0]
 802bcb4:	69fa      	ldr	r2, [r7, #28]
 802bcb6:	429a      	cmp	r2, r3
 802bcb8:	da2b      	bge.n	802bd12 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 802bcba:	68fa      	ldr	r2, [r7, #12]
 802bcbc:	69fb      	ldr	r3, [r7, #28]
 802bcbe:	009b      	lsls	r3, r3, #2
 802bcc0:	4413      	add	r3, r2
 802bcc2:	685b      	ldr	r3, [r3, #4]
 802bcc4:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 802bcc6:	68bb      	ldr	r3, [r7, #8]
 802bcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bccc:	d118      	bne.n	802bd00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 802bcce:	6a3b      	ldr	r3, [r7, #32]
 802bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bcd4:	d011      	beq.n	802bcfa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	695c      	ldr	r4, [r3, #20]
 802bcda:	f04f 33ff 	mov.w	r3, #4294967295
 802bcde:	9303      	str	r3, [sp, #12]
 802bce0:	6a3b      	ldr	r3, [r7, #32]
 802bce2:	9302      	str	r3, [sp, #8]
 802bce4:	4b37      	ldr	r3, [pc, #220]	; (802bdc4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 802bce6:	9301      	str	r3, [sp, #4]
 802bce8:	4b37      	ldr	r3, [pc, #220]	; (802bdc8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 802bcea:	9300      	str	r3, [sp, #0]
 802bcec:	233a      	movs	r3, #58	; 0x3a
 802bcee:	4a32      	ldr	r2, [pc, #200]	; (802bdb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802bcf0:	4936      	ldr	r1, [pc, #216]	; (802bdcc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 802bcf2:	6878      	ldr	r0, [r7, #4]
 802bcf4:	47a0      	blx	r4
 802bcf6:	2301      	movs	r3, #1
 802bcf8:	e058      	b.n	802bdac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 802bcfa:	69fb      	ldr	r3, [r7, #28]
 802bcfc:	623b      	str	r3, [r7, #32]
 802bcfe:	e004      	b.n	802bd0a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 802bd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd02:	68ba      	ldr	r2, [r7, #8]
 802bd04:	fb02 f303 	mul.w	r3, r2, r3
 802bd08:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 802bd0a:	69fb      	ldr	r3, [r7, #28]
 802bd0c:	3301      	adds	r3, #1
 802bd0e:	61fb      	str	r3, [r7, #28]
 802bd10:	e7ce      	b.n	802bcb0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 802bd12:	6a3b      	ldr	r3, [r7, #32]
 802bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bd18:	d011      	beq.n	802bd3e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 802bd1a:	693a      	ldr	r2, [r7, #16]
 802bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd1e:	fb92 f2f3 	sdiv	r2, r2, r3
 802bd22:	68f9      	ldr	r1, [r7, #12]
 802bd24:	6a3b      	ldr	r3, [r7, #32]
 802bd26:	009b      	lsls	r3, r3, #2
 802bd28:	440b      	add	r3, r1
 802bd2a:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 802bd2c:	68fa      	ldr	r2, [r7, #12]
 802bd2e:	6a3b      	ldr	r3, [r7, #32]
 802bd30:	009b      	lsls	r3, r3, #2
 802bd32:	4413      	add	r3, r2
 802bd34:	685a      	ldr	r2, [r3, #4]
 802bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd38:	fb02 f303 	mul.w	r3, r2, r3
 802bd3c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 802bd3e:	69bb      	ldr	r3, [r7, #24]
 802bd40:	781a      	ldrb	r2, [r3, #0]
 802bd42:	697b      	ldr	r3, [r7, #20]
 802bd44:	781b      	ldrb	r3, [r3, #0]
 802bd46:	429a      	cmp	r2, r3
 802bd48:	d01a      	beq.n	802bd80 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 802bd4a:	687b      	ldr	r3, [r7, #4]
 802bd4c:	695c      	ldr	r4, [r3, #20]
 802bd4e:	69bb      	ldr	r3, [r7, #24]
 802bd50:	781b      	ldrb	r3, [r3, #0]
 802bd52:	4618      	mov	r0, r3
 802bd54:	f7fa ff5a 	bl	8026c0c <TfLiteTypeGetName>
 802bd58:	4605      	mov	r5, r0
 802bd5a:	697b      	ldr	r3, [r7, #20]
 802bd5c:	781b      	ldrb	r3, [r3, #0]
 802bd5e:	4618      	mov	r0, r3
 802bd60:	f7fa ff54 	bl	8026c0c <TfLiteTypeGetName>
 802bd64:	4603      	mov	r3, r0
 802bd66:	9303      	str	r3, [sp, #12]
 802bd68:	9502      	str	r5, [sp, #8]
 802bd6a:	4b19      	ldr	r3, [pc, #100]	; (802bdd0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 802bd6c:	9301      	str	r3, [sp, #4]
 802bd6e:	4b19      	ldr	r3, [pc, #100]	; (802bdd4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 802bd70:	9300      	str	r3, [sp, #0]
 802bd72:	2345      	movs	r3, #69	; 0x45
 802bd74:	4a10      	ldr	r2, [pc, #64]	; (802bdb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802bd76:	4918      	ldr	r1, [pc, #96]	; (802bdd8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 802bd78:	6878      	ldr	r0, [r7, #4]
 802bd7a:	47a0      	blx	r4
 802bd7c:	2301      	movs	r3, #1
 802bd7e:	e015      	b.n	802bdac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 802bd80:	693a      	ldr	r2, [r7, #16]
 802bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd84:	429a      	cmp	r2, r3
 802bd86:	d010      	beq.n	802bdaa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 802bd88:	687b      	ldr	r3, [r7, #4]
 802bd8a:	695c      	ldr	r4, [r3, #20]
 802bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd8e:	9303      	str	r3, [sp, #12]
 802bd90:	693b      	ldr	r3, [r7, #16]
 802bd92:	9302      	str	r3, [sp, #8]
 802bd94:	4b11      	ldr	r3, [pc, #68]	; (802bddc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 802bd96:	9301      	str	r3, [sp, #4]
 802bd98:	4b11      	ldr	r3, [pc, #68]	; (802bde0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 802bd9a:	9300      	str	r3, [sp, #0]
 802bd9c:	2346      	movs	r3, #70	; 0x46
 802bd9e:	4a06      	ldr	r2, [pc, #24]	; (802bdb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802bda0:	490a      	ldr	r1, [pc, #40]	; (802bdcc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 802bda2:	6878      	ldr	r0, [r7, #4]
 802bda4:	47a0      	blx	r4
 802bda6:	2301      	movs	r3, #1
 802bda8:	e000      	b.n	802bdac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 802bdaa:	2300      	movs	r3, #0
}
 802bdac:	4618      	mov	r0, r3
 802bdae:	3728      	adds	r7, #40	; 0x28
 802bdb0:	46bd      	mov	sp, r7
 802bdb2:	bdb0      	pop	{r4, r5, r7, pc}
 802bdb4:	08034940 	.word	0x08034940
 802bdb8:	080348a0 	.word	0x080348a0
 802bdbc:	08034928 	.word	0x08034928
 802bdc0:	08034954 	.word	0x08034954
 802bdc4:	08034984 	.word	0x08034984
 802bdc8:	08034988 	.word	0x08034988
 802bdcc:	08034968 	.word	0x08034968
 802bdd0:	080349b0 	.word	0x080349b0
 802bdd4:	080349c0 	.word	0x080349c0
 802bdd8:	08034994 	.word	0x08034994
 802bddc:	080349cc 	.word	0x080349cc
 802bde0:	080349e0 	.word	0x080349e0

0802bde4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 802bde4:	b590      	push	{r4, r7, lr}
 802bde6:	b087      	sub	sp, #28
 802bde8:	af04      	add	r7, sp, #16
 802bdea:	6078      	str	r0, [r7, #4]
 802bdec:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 802bdee:	6838      	ldr	r0, [r7, #0]
 802bdf0:	f7fd f8fe 	bl	8028ff0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802bdf4:	4603      	mov	r3, r0
 802bdf6:	2b01      	cmp	r3, #1
 802bdf8:	d007      	beq.n	802be0a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 802bdfa:	6838      	ldr	r0, [r7, #0]
 802bdfc:	f7fd f8f8 	bl	8028ff0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802be00:	4603      	mov	r3, r0
 802be02:	2b02      	cmp	r3, #2
 802be04:	d001      	beq.n	802be0a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 802be06:	2301      	movs	r3, #1
 802be08:	e000      	b.n	802be0c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 802be0a:	2300      	movs	r3, #0
 802be0c:	2b00      	cmp	r3, #0
 802be0e:	d00a      	beq.n	802be26 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 802be10:	687b      	ldr	r3, [r7, #4]
 802be12:	695c      	ldr	r4, [r3, #20]
 802be14:	4b27      	ldr	r3, [pc, #156]	; (802beb4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 802be16:	9300      	str	r3, [sp, #0]
 802be18:	234b      	movs	r3, #75	; 0x4b
 802be1a:	4a27      	ldr	r2, [pc, #156]	; (802beb8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 802be1c:	4927      	ldr	r1, [pc, #156]	; (802bebc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 802be1e:	6878      	ldr	r0, [r7, #4]
 802be20:	47a0      	blx	r4
 802be22:	2301      	movs	r3, #1
 802be24:	e041      	b.n	802beaa <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 802be26:	6838      	ldr	r0, [r7, #0]
 802be28:	f7fd f8ef 	bl	802900a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802be2c:	4603      	mov	r3, r0
 802be2e:	2b01      	cmp	r3, #1
 802be30:	bf14      	ite	ne
 802be32:	2301      	movne	r3, #1
 802be34:	2300      	moveq	r3, #0
 802be36:	b2db      	uxtb	r3, r3
 802be38:	2b00      	cmp	r3, #0
 802be3a:	d013      	beq.n	802be64 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 802be3c:	687b      	ldr	r3, [r7, #4]
 802be3e:	695c      	ldr	r4, [r3, #20]
 802be40:	6838      	ldr	r0, [r7, #0]
 802be42:	f7fd f8e2 	bl	802900a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802be46:	4603      	mov	r3, r0
 802be48:	2201      	movs	r2, #1
 802be4a:	9203      	str	r2, [sp, #12]
 802be4c:	9302      	str	r3, [sp, #8]
 802be4e:	4b1c      	ldr	r3, [pc, #112]	; (802bec0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 802be50:	9301      	str	r3, [sp, #4]
 802be52:	4b1c      	ldr	r3, [pc, #112]	; (802bec4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 802be54:	9300      	str	r3, [sp, #0]
 802be56:	234c      	movs	r3, #76	; 0x4c
 802be58:	4a17      	ldr	r2, [pc, #92]	; (802beb8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 802be5a:	491b      	ldr	r1, [pc, #108]	; (802bec8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 802be5c:	6878      	ldr	r0, [r7, #4]
 802be5e:	47a0      	blx	r4
 802be60:	2301      	movs	r3, #1
 802be62:	e022      	b.n	802beaa <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 802be64:	6839      	ldr	r1, [r7, #0]
 802be66:	6878      	ldr	r0, [r7, #4]
 802be68:	f7ff fece 	bl	802bc08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 802be6c:	4603      	mov	r3, r0
 802be6e:	2b00      	cmp	r3, #0
 802be70:	bf14      	ite	ne
 802be72:	2301      	movne	r3, #1
 802be74:	2300      	moveq	r3, #0
 802be76:	b2db      	uxtb	r3, r3
 802be78:	2b00      	cmp	r3, #0
 802be7a:	d015      	beq.n	802bea8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 802be7c:	687b      	ldr	r3, [r7, #4]
 802be7e:	695c      	ldr	r4, [r3, #20]
 802be80:	6839      	ldr	r1, [r7, #0]
 802be82:	6878      	ldr	r0, [r7, #4]
 802be84:	f7ff fec0 	bl	802bc08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 802be88:	4603      	mov	r3, r0
 802be8a:	461a      	mov	r2, r3
 802be8c:	2300      	movs	r3, #0
 802be8e:	9303      	str	r3, [sp, #12]
 802be90:	9202      	str	r2, [sp, #8]
 802be92:	4b0e      	ldr	r3, [pc, #56]	; (802becc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 802be94:	9301      	str	r3, [sp, #4]
 802be96:	4b0e      	ldr	r3, [pc, #56]	; (802bed0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 802be98:	9300      	str	r3, [sp, #0]
 802be9a:	234d      	movs	r3, #77	; 0x4d
 802be9c:	4a06      	ldr	r2, [pc, #24]	; (802beb8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 802be9e:	490a      	ldr	r1, [pc, #40]	; (802bec8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 802bea0:	6878      	ldr	r0, [r7, #4]
 802bea2:	47a0      	blx	r4
 802bea4:	2301      	movs	r3, #1
 802bea6:	e000      	b.n	802beaa <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 802bea8:	2300      	movs	r3, #0
}
 802beaa:	4618      	mov	r0, r3
 802beac:	370c      	adds	r7, #12
 802beae:	46bd      	mov	sp, r7
 802beb0:	bd90      	pop	{r4, r7, pc}
 802beb2:	bf00      	nop
 802beb4:	080349f4 	.word	0x080349f4
 802beb8:	080348a0 	.word	0x080348a0
 802bebc:	08034928 	.word	0x08034928
 802bec0:	08034a24 	.word	0x08034a24
 802bec4:	08034a28 	.word	0x08034a28
 802bec8:	08034968 	.word	0x08034968
 802becc:	08034a3c 	.word	0x08034a3c
 802bed0:	08034a48 	.word	0x08034a48

0802bed4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 802bed4:	b580      	push	{r7, lr}
 802bed6:	b088      	sub	sp, #32
 802bed8:	af00      	add	r7, sp, #0
 802beda:	6078      	str	r0, [r7, #4]
 802bedc:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802bede:	2200      	movs	r2, #0
 802bee0:	6839      	ldr	r1, [r7, #0]
 802bee2:	6878      	ldr	r0, [r7, #4]
 802bee4:	f7fc f85e 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802bee8:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 802beea:	2200      	movs	r2, #0
 802beec:	6839      	ldr	r1, [r7, #0]
 802beee:	6878      	ldr	r0, [r7, #4]
 802bef0:	f7fc f868 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802bef4:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 802bef6:	69bb      	ldr	r3, [r7, #24]
 802bef8:	7a1b      	ldrb	r3, [r3, #8]
 802befa:	f107 020c 	add.w	r2, r7, #12
 802befe:	4611      	mov	r1, r2
 802bf00:	4618      	mov	r0, r3
 802bf02:	f7fb fe63 	bl	8027bcc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 802bf06:	4603      	mov	r3, r0
 802bf08:	74fb      	strb	r3, [r7, #19]
 802bf0a:	7cfb      	ldrb	r3, [r7, #19]
 802bf0c:	2b00      	cmp	r3, #0
 802bf0e:	d001      	beq.n	802bf14 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 802bf10:	7cfb      	ldrb	r3, [r7, #19]
 802bf12:	e024      	b.n	802bf5e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 802bf14:	69bb      	ldr	r3, [r7, #24]
 802bf16:	685b      	ldr	r3, [r3, #4]
 802bf18:	4618      	mov	r0, r3
 802bf1a:	f7fb fec3 	bl	8027ca4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 802bf1e:	4602      	mov	r2, r0
 802bf20:	68fb      	ldr	r3, [r7, #12]
 802bf22:	fb02 f303 	mul.w	r3, r2, r3
 802bf26:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 802bf28:	69bb      	ldr	r3, [r7, #24]
 802bf2a:	681a      	ldr	r2, [r3, #0]
 802bf2c:	697b      	ldr	r3, [r7, #20]
 802bf2e:	681b      	ldr	r3, [r3, #0]
 802bf30:	429a      	cmp	r2, r3
 802bf32:	d013      	beq.n	802bf5c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 802bf34:	2300      	movs	r3, #0
 802bf36:	61fb      	str	r3, [r7, #28]
 802bf38:	68fb      	ldr	r3, [r7, #12]
 802bf3a:	69fa      	ldr	r2, [r7, #28]
 802bf3c:	429a      	cmp	r2, r3
 802bf3e:	d20d      	bcs.n	802bf5c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 802bf40:	69bb      	ldr	r3, [r7, #24]
 802bf42:	681a      	ldr	r2, [r3, #0]
 802bf44:	69fb      	ldr	r3, [r7, #28]
 802bf46:	441a      	add	r2, r3
 802bf48:	697b      	ldr	r3, [r7, #20]
 802bf4a:	6819      	ldr	r1, [r3, #0]
 802bf4c:	69fb      	ldr	r3, [r7, #28]
 802bf4e:	440b      	add	r3, r1
 802bf50:	7812      	ldrb	r2, [r2, #0]
 802bf52:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 802bf54:	69fb      	ldr	r3, [r7, #28]
 802bf56:	3301      	adds	r3, #1
 802bf58:	61fb      	str	r3, [r7, #28]
 802bf5a:	e7ed      	b.n	802bf38 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 802bf5c:	2300      	movs	r3, #0
}
 802bf5e:	4618      	mov	r0, r3
 802bf60:	3720      	adds	r7, #32
 802bf62:	46bd      	mov	sp, r7
 802bf64:	bd80      	pop	{r7, pc}
	...

0802bf68 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 802bf68:	b4b0      	push	{r4, r5, r7}
 802bf6a:	b083      	sub	sp, #12
 802bf6c:	af00      	add	r7, sp, #0
 802bf6e:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 802bf70:	687b      	ldr	r3, [r7, #4]
 802bf72:	4a07      	ldr	r2, [pc, #28]	; (802bf90 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 802bf74:	461c      	mov	r4, r3
 802bf76:	4615      	mov	r5, r2
 802bf78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802bf7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802bf7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802bf80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802bf84:	6878      	ldr	r0, [r7, #4]
 802bf86:	370c      	adds	r7, #12
 802bf88:	46bd      	mov	sp, r7
 802bf8a:	bcb0      	pop	{r4, r5, r7}
 802bf8c:	4770      	bx	lr
 802bf8e:	bf00      	nop
 802bf90:	08034a68 	.word	0x08034a68

0802bf94 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 802bf94:	b580      	push	{r7, lr}
 802bf96:	b086      	sub	sp, #24
 802bf98:	af00      	add	r7, sp, #0
 802bf9a:	4603      	mov	r3, r0
 802bf9c:	6039      	str	r1, [r7, #0]
 802bf9e:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 802bfa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802bfa4:	11db      	asrs	r3, r3, #7
 802bfa6:	b21b      	sxth	r3, r3
 802bfa8:	b29b      	uxth	r3, r3
 802bfaa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802bfae:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 802bfb0:	8afb      	ldrh	r3, [r7, #22]
 802bfb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802bfb6:	d306      	bcc.n	802bfc6 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 802bfb8:	4b1a      	ldr	r3, [pc, #104]	; (802c024 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 802bfba:	4a1b      	ldr	r2, [pc, #108]	; (802c028 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 802bfbc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 802bfc0:	481a      	ldr	r0, [pc, #104]	; (802c02c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 802bfc2:	f005 f9cf 	bl	8031364 <__assert_func>
  int16_t offset = value & 0x7f;
 802bfc6:	88fb      	ldrh	r3, [r7, #6]
 802bfc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802bfcc:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 802bfce:	8afb      	ldrh	r3, [r7, #22]
 802bfd0:	005b      	lsls	r3, r3, #1
 802bfd2:	683a      	ldr	r2, [r7, #0]
 802bfd4:	4413      	add	r3, r2
 802bfd6:	881b      	ldrh	r3, [r3, #0]
 802bfd8:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 802bfda:	8afb      	ldrh	r3, [r7, #22]
 802bfdc:	3301      	adds	r3, #1
 802bfde:	005b      	lsls	r3, r3, #1
 802bfe0:	683a      	ldr	r2, [r7, #0]
 802bfe2:	4413      	add	r3, r2
 802bfe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 802bfe8:	b29a      	uxth	r2, r3
 802bfea:	8afb      	ldrh	r3, [r7, #22]
 802bfec:	005b      	lsls	r3, r3, #1
 802bfee:	6839      	ldr	r1, [r7, #0]
 802bff0:	440b      	add	r3, r1
 802bff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 802bff6:	b29b      	uxth	r3, r3
 802bff8:	1ad3      	subs	r3, r2, r3
 802bffa:	b29b      	uxth	r3, r3
 802bffc:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 802bffe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 802c002:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802c006:	fb02 f303 	mul.w	r3, r2, r3
 802c00a:	3340      	adds	r3, #64	; 0x40
 802c00c:	11db      	asrs	r3, r3, #7
 802c00e:	60fb      	str	r3, [r7, #12]
  return base + delta;
 802c010:	68fb      	ldr	r3, [r7, #12]
 802c012:	b29a      	uxth	r2, r3
 802c014:	8a7b      	ldrh	r3, [r7, #18]
 802c016:	4413      	add	r3, r2
 802c018:	b29b      	uxth	r3, r3
 802c01a:	b21b      	sxth	r3, r3
}
 802c01c:	4618      	mov	r0, r3
 802c01e:	3718      	adds	r7, #24
 802c020:	46bd      	mov	sp, r7
 802c022:	bd80      	pop	{r7, pc}
 802c024:	08034a88 	.word	0x08034a88
 802c028:	08034ab4 	.word	0x08034ab4
 802c02c:	08034af8 	.word	0x08034af8

0802c030 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 802c030:	b580      	push	{r7, lr}
 802c032:	b08a      	sub	sp, #40	; 0x28
 802c034:	af00      	add	r7, sp, #0
 802c036:	60f8      	str	r0, [r7, #12]
 802c038:	60b9      	str	r1, [r7, #8]
 802c03a:	607a      	str	r2, [r7, #4]
 802c03c:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 802c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c040:	687a      	ldr	r2, [r7, #4]
 802c042:	fb03 f202 	mul.w	r2, r3, r2
 802c046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c048:	4413      	add	r3, r2
 802c04a:	005b      	lsls	r3, r3, #1
 802c04c:	68ba      	ldr	r2, [r7, #8]
 802c04e:	4413      	add	r3, r2
 802c050:	f9b3 3000 	ldrsh.w	r3, [r3]
 802c054:	461a      	mov	r2, r3
 802c056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802c05a:	1ad3      	subs	r3, r2, r3
 802c05c:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 802c05e:	68fb      	ldr	r3, [r7, #12]
 802c060:	6899      	ldr	r1, [r3, #8]
 802c062:	68fb      	ldr	r3, [r7, #12]
 802c064:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 802c066:	461a      	mov	r2, r3
 802c068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802c06a:	f7fb ff57 	bl	8027f1c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 802c06e:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 802c070:	6a3b      	ldr	r3, [r7, #32]
 802c072:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 802c076:	337f      	adds	r3, #127	; 0x7f
 802c078:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 802c07a:	4b12      	ldr	r3, [pc, #72]	; (802c0c4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 802c07c:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 802c07e:	f107 0214 	add.w	r2, r7, #20
 802c082:	f107 0310 	add.w	r3, r7, #16
 802c086:	4611      	mov	r1, r2
 802c088:	4618      	mov	r0, r3
 802c08a:	f7fb fcd1 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 802c08e:	4602      	mov	r2, r0
 802c090:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c094:	61bb      	str	r3, [r7, #24]
 802c096:	f107 0318 	add.w	r3, r7, #24
 802c09a:	4619      	mov	r1, r3
 802c09c:	4610      	mov	r0, r2
 802c09e:	f7fb fcb3 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 802c0a2:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 802c0a4:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 802c0a6:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 802c0a8:	68fb      	ldr	r3, [r7, #12]
 802c0aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802c0ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c0b0:	4611      	mov	r1, r2
 802c0b2:	4618      	mov	r0, r3
 802c0b4:	f7ff ff6e 	bl	802bf94 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 802c0b8:	4603      	mov	r3, r0
}
 802c0ba:	4618      	mov	r0, r3
 802c0bc:	3728      	adds	r7, #40	; 0x28
 802c0be:	46bd      	mov	sp, r7
 802c0c0:	bd80      	pop	{r7, pc}
 802c0c2:	bf00      	nop
 802c0c4:	ffff8000 	.word	0xffff8000

0802c0c8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 802c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c0cc:	b0ab      	sub	sp, #172	; 0xac
 802c0ce:	af02      	add	r7, sp, #8
 802c0d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 802c0d2:	63b9      	str	r1, [r7, #56]	; 0x38
 802c0d4:	637a      	str	r2, [r7, #52]	; 0x34
 802c0d6:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 802c0d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802c0da:	f7fb fcf4 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802c0de:	4603      	mov	r3, r0
 802c0e0:	3b01      	subs	r3, #1
 802c0e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 802c0e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c0e8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 802c0ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802c0ee:	f7ff f895 	bl	802b21c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 802c0f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802c0f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802c0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c0fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 802c100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802c102:	f7fc ff9e 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802c106:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 802c10a:	2300      	movs	r3, #0
 802c10c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802c110:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802c114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802c118:	429a      	cmp	r2, r3
 802c11a:	f280 8157 	bge.w	802c3cc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 802c11e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802c122:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 802c126:	2300      	movs	r3, #0
 802c128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802c12c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802c130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802c134:	429a      	cmp	r2, r3
 802c136:	da1c      	bge.n	802c172 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 802c138:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802c13c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802c140:	fb03 f202 	mul.w	r2, r3, r2
 802c144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802c148:	4413      	add	r3, r2
 802c14a:	005a      	lsls	r2, r3, #1
 802c14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c14e:	441a      	add	r2, r3
 802c150:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 802c154:	4611      	mov	r1, r2
 802c156:	4618      	mov	r0, r3
 802c158:	f7fe ffdc 	bl	802b114 <_ZSt3maxIsERKT_S2_S2_>
 802c15c:	4603      	mov	r3, r0
 802c15e:	f9b3 3000 	ldrsh.w	r3, [r3]
 802c162:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 802c166:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802c16a:	3301      	adds	r3, #1
 802c16c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802c170:	e7dc      	b.n	802c12c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 802c172:	2300      	movs	r3, #0
 802c174:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 802c178:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802c17c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802c180:	fb02 f303 	mul.w	r3, r2, r3
 802c184:	005a      	lsls	r2, r3, #1
 802c186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802c18a:	4413      	add	r3, r2
 802c18c:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 802c18e:	2300      	movs	r3, #0
 802c190:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802c194:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802c198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802c19c:	429a      	cmp	r2, r3
 802c19e:	da28      	bge.n	802c1f2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 802c1a0:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 802c1a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802c1a8:	005a      	lsls	r2, r3, #1
 802c1aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802c1ac:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 802c1ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802c1b2:	9301      	str	r3, [sp, #4]
 802c1b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802c1b8:	9300      	str	r3, [sp, #0]
 802c1ba:	460b      	mov	r3, r1
 802c1bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802c1c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802c1c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802c1c4:	f7ff ff34 	bl	802c030 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 802c1c8:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 802c1ca:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 802c1cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802c1d0:	005a      	lsls	r2, r3, #1
 802c1d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802c1d4:	4413      	add	r3, r2
 802c1d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 802c1da:	461a      	mov	r2, r3
 802c1dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802c1e0:	4413      	add	r3, r2
 802c1e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 802c1e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802c1ea:	3301      	adds	r3, #1
 802c1ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802c1f0:	e7d0      	b.n	802c194 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 802c1f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802c1f6:	4618      	mov	r0, r3
 802c1f8:	f7fe f88b 	bl	802a312 <_ZN6tflite17CountLeadingZerosImEEiT_>
 802c1fc:	4603      	mov	r3, r0
 802c1fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 802c202:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802c206:	17da      	asrs	r2, r3, #31
 802c208:	623b      	str	r3, [r7, #32]
 802c20a:	627a      	str	r2, [r7, #36]	; 0x24
 802c20c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 802c210:	1e59      	subs	r1, r3, #1
 802c212:	f1a1 0320 	sub.w	r3, r1, #32
 802c216:	f1c1 0220 	rsb	r2, r1, #32
 802c21a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802c21c:	fa00 f901 	lsl.w	r9, r0, r1
 802c220:	6a38      	ldr	r0, [r7, #32]
 802c222:	fa00 f303 	lsl.w	r3, r0, r3
 802c226:	ea49 0903 	orr.w	r9, r9, r3
 802c22a:	6a3b      	ldr	r3, [r7, #32]
 802c22c:	fa23 f202 	lsr.w	r2, r3, r2
 802c230:	ea49 0902 	orr.w	r9, r9, r2
 802c234:	6a3b      	ldr	r3, [r7, #32]
 802c236:	fa03 f801 	lsl.w	r8, r3, r1
 802c23a:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 802c23e:	61bb      	str	r3, [r7, #24]
 802c240:	f149 0300 	adc.w	r3, r9, #0
 802c244:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 802c246:	f04f 0200 	mov.w	r2, #0
 802c24a:	f04f 0300 	mov.w	r3, #0
 802c24e:	69b9      	ldr	r1, [r7, #24]
 802c250:	0b8a      	lsrs	r2, r1, #14
 802c252:	69f9      	ldr	r1, [r7, #28]
 802c254:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 802c258:	69f9      	ldr	r1, [r7, #28]
 802c25a:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 802c25c:	4613      	mov	r3, r2
 802c25e:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 802c260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c262:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 802c266:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 802c268:	4b5b      	ldr	r3, [pc, #364]	; (802c3d8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 802c26a:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 802c26c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802c270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802c274:	4611      	mov	r1, r2
 802c276:	4618      	mov	r0, r3
 802c278:	f7fb fbda 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 802c27c:	4602      	mov	r2, r0
 802c27e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c282:	657b      	str	r3, [r7, #84]	; 0x54
 802c284:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802c288:	4619      	mov	r1, r3
 802c28a:	4610      	mov	r0, r2
 802c28c:	f7fb fbbc 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 802c290:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 802c292:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 802c294:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 802c298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 802c29c:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 802c2a0:	4611      	mov	r1, r2
 802c2a2:	4618      	mov	r0, r3
 802c2a4:	f7ff fe76 	bl	802bf94 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 802c2a8:	4603      	mov	r3, r0
 802c2aa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 802c2ae:	2300      	movs	r3, #0
 802c2b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802c2b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802c2b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802c2bc:	429a      	cmp	r2, r3
 802c2be:	da7f      	bge.n	802c3c0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 802c2c0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 802c2c4:	f1c3 031f 	rsb	r3, r3, #31
 802c2c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 802c2cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 802c2d0:	1e5a      	subs	r2, r3, #1
 802c2d2:	2301      	movs	r3, #1
 802c2d4:	4093      	lsls	r3, r2
 802c2d6:	17da      	asrs	r2, r3, #31
 802c2d8:	603b      	str	r3, [r7, #0]
 802c2da:	607a      	str	r2, [r7, #4]
 802c2dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 802c2e0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 802c2e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802c2e8:	005a      	lsls	r2, r3, #1
 802c2ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802c2ec:	4413      	add	r3, r2
 802c2ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 802c2f2:	b21b      	sxth	r3, r3
 802c2f4:	17da      	asrs	r2, r3, #31
 802c2f6:	613b      	str	r3, [r7, #16]
 802c2f8:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 802c2fa:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 802c2fe:	17da      	asrs	r2, r3, #31
 802c300:	60bb      	str	r3, [r7, #8]
 802c302:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 802c304:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802c308:	460b      	mov	r3, r1
 802c30a:	68ba      	ldr	r2, [r7, #8]
 802c30c:	fb02 f203 	mul.w	r2, r2, r3
 802c310:	68fb      	ldr	r3, [r7, #12]
 802c312:	e9c7 0104 	strd	r0, r1, [r7, #16]
 802c316:	4601      	mov	r1, r0
 802c318:	fb01 f303 	mul.w	r3, r1, r3
 802c31c:	4413      	add	r3, r2
 802c31e:	693a      	ldr	r2, [r7, #16]
 802c320:	68b9      	ldr	r1, [r7, #8]
 802c322:	fba2 ab01 	umull	sl, fp, r2, r1
 802c326:	445b      	add	r3, fp
 802c328:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 802c32a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 802c32e:	eb1a 0502 	adds.w	r5, sl, r2
 802c332:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 802c336:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 802c33a:	f1c1 0320 	rsb	r3, r1, #32
 802c33e:	f1b1 0220 	subs.w	r2, r1, #32
 802c342:	fa25 f001 	lsr.w	r0, r5, r1
 802c346:	62b8      	str	r0, [r7, #40]	; 0x28
 802c348:	fa06 f303 	lsl.w	r3, r6, r3
 802c34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c34e:	ea40 0003 	orr.w	r0, r0, r3
 802c352:	62b8      	str	r0, [r7, #40]	; 0x28
 802c354:	d404      	bmi.n	802c360 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 802c356:	fa46 f202 	asr.w	r2, r6, r2
 802c35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c35c:	4313      	orrs	r3, r2
 802c35e:	62bb      	str	r3, [r7, #40]	; 0x28
 802c360:	fa46 f301 	asr.w	r3, r6, r1
 802c364:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 802c366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c368:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 802c36a:	2300      	movs	r3, #0
 802c36c:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 802c36e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802c372:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802c376:	4611      	mov	r1, r2
 802c378:	4618      	mov	r0, r3
 802c37a:	f7fb fb59 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 802c37e:	4602      	mov	r2, r0
 802c380:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c384:	65fb      	str	r3, [r7, #92]	; 0x5c
 802c386:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802c38a:	4619      	mov	r1, r3
 802c38c:	4610      	mov	r0, r2
 802c38e:	f7fb fb3b 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 802c392:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 802c394:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 802c396:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802c39a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802c39e:	fb03 f202 	mul.w	r2, r3, r2
 802c3a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802c3a6:	4413      	add	r3, r2
 802c3a8:	005a      	lsls	r2, r3, #1
 802c3aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802c3ae:	441a      	add	r2, r3
 802c3b0:	b20b      	sxth	r3, r1
 802c3b2:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 802c3b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802c3b8:	3301      	adds	r3, #1
 802c3ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802c3be:	e779      	b.n	802c2b4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 802c3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802c3c4:	3301      	adds	r3, #1
 802c3c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802c3ca:	e6a1      	b.n	802c110 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 802c3cc:	bf00      	nop
 802c3ce:	37a4      	adds	r7, #164	; 0xa4
 802c3d0:	46bd      	mov	sp, r7
 802c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c3d6:	bf00      	nop
 802c3d8:	ffff8000 	.word	0xffff8000

0802c3dc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 802c3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c3e0:	b0bc      	sub	sp, #240	; 0xf0
 802c3e2:	af04      	add	r7, sp, #16
 802c3e4:	60f8      	str	r0, [r7, #12]
 802c3e6:	60b9      	str	r1, [r7, #8]
 802c3e8:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 802c3ea:	68fb      	ldr	r3, [r7, #12]
 802c3ec:	7a1b      	ldrb	r3, [r3, #8]
 802c3ee:	2b03      	cmp	r3, #3
 802c3f0:	d127      	bne.n	802c442 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 802c3f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802c3f6:	68f9      	ldr	r1, [r7, #12]
 802c3f8:	4618      	mov	r0, r3
 802c3fa:	f7fe fea1 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 802c3fe:	68f8      	ldr	r0, [r7, #12]
 802c400:	f7fc fb3a 	bl	8028a78 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 802c404:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 802c406:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802c40a:	68b9      	ldr	r1, [r7, #8]
 802c40c:	4618      	mov	r0, r3
 802c40e:	f7fe fe97 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 802c412:	68b8      	ldr	r0, [r7, #8]
 802c414:	f7fc fb3f 	bl	8028a96 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 802c418:	4602      	mov	r2, r0
 802c41a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802c41e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 802c422:	9200      	str	r2, [sp, #0]
 802c424:	4622      	mov	r2, r4
 802c426:	6878      	ldr	r0, [r7, #4]
 802c428:	f000 f930 	bl	802c68c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 802c42c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802c430:	4618      	mov	r0, r3
 802c432:	f7fb fb32 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 802c436:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802c43a:	4618      	mov	r0, r3
 802c43c:	f7fb fb2d 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
 802c440:	e080      	b.n	802c544 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 802c442:	68fb      	ldr	r3, [r7, #12]
 802c444:	7a1b      	ldrb	r3, [r3, #8]
 802c446:	2b09      	cmp	r3, #9
 802c448:	d153      	bne.n	802c4f2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 802c44a:	68bb      	ldr	r3, [r7, #8]
 802c44c:	7a1b      	ldrb	r3, [r3, #8]
 802c44e:	2b07      	cmp	r3, #7
 802c450:	d077      	beq.n	802c542 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 802c452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802c456:	68f9      	ldr	r1, [r7, #12]
 802c458:	4618      	mov	r0, r3
 802c45a:	f7fe fe71 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 802c45e:	f107 0314 	add.w	r3, r7, #20
 802c462:	68b9      	ldr	r1, [r7, #8]
 802c464:	4618      	mov	r0, r3
 802c466:	f7fe fe6b 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 802c46a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802c46e:	4618      	mov	r0, r3
 802c470:	f7fb fb29 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802c474:	4603      	mov	r3, r0
 802c476:	3b01      	subs	r3, #1
 802c478:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 802c47c:	f107 0214 	add.w	r2, r7, #20
 802c480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802c484:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 802c488:	4618      	mov	r0, r3
 802c48a:	f7fe fec7 	bl	802b21c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 802c48e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802c492:	f107 0214 	add.w	r2, r7, #20
 802c496:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 802c49a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c49e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 802c4a2:	f7fc fdce 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802c4a6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 802c4aa:	68f8      	ldr	r0, [r7, #12]
 802c4ac:	f7fc fa78 	bl	80289a0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802c4b0:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 802c4b2:	687b      	ldr	r3, [r7, #4]
 802c4b4:	689e      	ldr	r6, [r3, #8]
 802c4b6:	687b      	ldr	r3, [r7, #4]
 802c4b8:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 802c4ba:	687b      	ldr	r3, [r7, #4]
 802c4bc:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 802c4be:	68b8      	ldr	r0, [r7, #8]
 802c4c0:	f7fc fa7d 	bl	80289be <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802c4c4:	4603      	mov	r3, r0
 802c4c6:	9302      	str	r3, [sp, #8]
 802c4c8:	9501      	str	r5, [sp, #4]
 802c4ca:	9400      	str	r4, [sp, #0]
 802c4cc:	4633      	mov	r3, r6
 802c4ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 802c4d2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 802c4d6:	4640      	mov	r0, r8
 802c4d8:	f7f4 fd6e 	bl	8020fb8 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 802c4dc:	f107 0314 	add.w	r3, r7, #20
 802c4e0:	4618      	mov	r0, r3
 802c4e2:	f7fb fada 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 802c4e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802c4ea:	4618      	mov	r0, r3
 802c4ec:	f7fb fad5 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
 802c4f0:	e028      	b.n	802c544 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 802c4f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802c4f6:	68f9      	ldr	r1, [r7, #12]
 802c4f8:	4618      	mov	r0, r3
 802c4fa:	f7fe fe21 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 802c4fe:	68f8      	ldr	r0, [r7, #12]
 802c500:	f7fd fe68 	bl	802a1d4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 802c504:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 802c506:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802c50a:	68b9      	ldr	r1, [r7, #8]
 802c50c:	4618      	mov	r0, r3
 802c50e:	f7fe fe17 	bl	802b140 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 802c512:	68b8      	ldr	r0, [r7, #8]
 802c514:	f7ff fb66 	bl	802bbe4 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 802c518:	4602      	mov	r2, r0
 802c51a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802c51e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802c522:	9200      	str	r2, [sp, #0]
 802c524:	4622      	mov	r2, r4
 802c526:	6878      	ldr	r0, [r7, #4]
 802c528:	f7ff fdce 	bl	802c0c8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 802c52c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802c530:	4618      	mov	r0, r3
 802c532:	f7fb fab2 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 802c536:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802c53a:	4618      	mov	r0, r3
 802c53c:	f7fb faad 	bl	8027a9a <_ZN6tflite12RuntimeShapeD1Ev>
 802c540:	e000      	b.n	802c544 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 802c542:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 802c544:	37e0      	adds	r7, #224	; 0xe0
 802c546:	46bd      	mov	sp, r7
 802c548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c54c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 802c54c:	b5b0      	push	{r4, r5, r7, lr}
 802c54e:	b09e      	sub	sp, #120	; 0x78
 802c550:	af00      	add	r7, sp, #0
 802c552:	6078      	str	r0, [r7, #4]
 802c554:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 802c556:	2200      	movs	r2, #0
 802c558:	6839      	ldr	r1, [r7, #0]
 802c55a:	6878      	ldr	r0, [r7, #4]
 802c55c:	f7fb fd22 	bl	8027fa4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802c560:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 802c562:	2200      	movs	r2, #0
 802c564:	6839      	ldr	r1, [r7, #0]
 802c566:	6878      	ldr	r0, [r7, #4]
 802c568:	f7fb fd2c 	bl	8027fc4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802c56c:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 802c56e:	683b      	ldr	r3, [r7, #0]
 802c570:	691b      	ldr	r3, [r3, #16]
 802c572:	2b00      	cmp	r3, #0
 802c574:	d101      	bne.n	802c57a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 802c576:	f004 feed 	bl	8031354 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 802c57a:	683b      	ldr	r3, [r7, #0]
 802c57c:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 802c57e:	f107 0408 	add.w	r4, r7, #8
 802c582:	461d      	mov	r5, r3
 802c584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802c586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802c588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802c58a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802c58c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802c58e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802c590:	e895 0003 	ldmia.w	r5, {r0, r1}
 802c594:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 802c598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c59a:	7a1b      	ldrb	r3, [r3, #8]
 802c59c:	3b01      	subs	r3, #1
 802c59e:	2b08      	cmp	r3, #8
 802c5a0:	d84a      	bhi.n	802c638 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 802c5a2:	a201      	add	r2, pc, #4	; (adr r2, 802c5a8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 802c5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c5a8:	0802c5cd 	.word	0x0802c5cd
 802c5ac:	0802c639 	.word	0x0802c639
 802c5b0:	0802c5fd 	.word	0x0802c5fd
 802c5b4:	0802c639 	.word	0x0802c639
 802c5b8:	0802c639 	.word	0x0802c639
 802c5bc:	0802c639 	.word	0x0802c639
 802c5c0:	0802c61b 	.word	0x0802c61b
 802c5c4:	0802c639 	.word	0x0802c639
 802c5c8:	0802c5eb 	.word	0x0802c5eb
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c5cc:	687b      	ldr	r3, [r7, #4]
 802c5ce:	695c      	ldr	r4, [r3, #20]
 802c5d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c5d2:	7a1b      	ldrb	r3, [r3, #8]
 802c5d4:	4618      	mov	r0, r3
 802c5d6:	f7fa fb19 	bl	8026c0c <TfLiteTypeGetName>
 802c5da:	4602      	mov	r2, r0
 802c5dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c5de:	7a1b      	ldrb	r3, [r3, #8]
 802c5e0:	491e      	ldr	r1, [pc, #120]	; (802c65c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802c5e2:	6878      	ldr	r0, [r7, #4]
 802c5e4:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c5e6:	2301      	movs	r3, #1
 802c5e8:	e034      	b.n	802c654 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 802c5ea:	f107 0308 	add.w	r3, r7, #8
 802c5ee:	461a      	mov	r2, r3
 802c5f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 802c5f2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 802c5f4:	f7ff fef2 	bl	802c3dc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 802c5f8:	2300      	movs	r3, #0
 802c5fa:	e02b      	b.n	802c654 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c5fc:	687b      	ldr	r3, [r7, #4]
 802c5fe:	695c      	ldr	r4, [r3, #20]
 802c600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c602:	7a1b      	ldrb	r3, [r3, #8]
 802c604:	4618      	mov	r0, r3
 802c606:	f7fa fb01 	bl	8026c0c <TfLiteTypeGetName>
 802c60a:	4602      	mov	r2, r0
 802c60c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c60e:	7a1b      	ldrb	r3, [r3, #8]
 802c610:	4912      	ldr	r1, [pc, #72]	; (802c65c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802c612:	6878      	ldr	r0, [r7, #4]
 802c614:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c616:	2301      	movs	r3, #1
 802c618:	e01c      	b.n	802c654 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c61a:	687b      	ldr	r3, [r7, #4]
 802c61c:	695c      	ldr	r4, [r3, #20]
 802c61e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c620:	7a1b      	ldrb	r3, [r3, #8]
 802c622:	4618      	mov	r0, r3
 802c624:	f7fa faf2 	bl	8026c0c <TfLiteTypeGetName>
 802c628:	4602      	mov	r2, r0
 802c62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c62c:	7a1b      	ldrb	r3, [r3, #8]
 802c62e:	490b      	ldr	r1, [pc, #44]	; (802c65c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802c630:	6878      	ldr	r0, [r7, #4]
 802c632:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c634:	2301      	movs	r3, #1
 802c636:	e00d      	b.n	802c654 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c638:	687b      	ldr	r3, [r7, #4]
 802c63a:	695c      	ldr	r4, [r3, #20]
 802c63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c63e:	7a1b      	ldrb	r3, [r3, #8]
 802c640:	4618      	mov	r0, r3
 802c642:	f7fa fae3 	bl	8026c0c <TfLiteTypeGetName>
 802c646:	4602      	mov	r2, r0
 802c648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c64a:	7a1b      	ldrb	r3, [r3, #8]
 802c64c:	4903      	ldr	r1, [pc, #12]	; (802c65c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802c64e:	6878      	ldr	r0, [r7, #4]
 802c650:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c652:	2301      	movs	r3, #1
  }
}
 802c654:	4618      	mov	r0, r3
 802c656:	3778      	adds	r7, #120	; 0x78
 802c658:	46bd      	mov	sp, r7
 802c65a:	bdb0      	pop	{r4, r5, r7, pc}
 802c65c:	08034b80 	.word	0x08034b80

0802c660 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 802c660:	b4b0      	push	{r4, r5, r7}
 802c662:	b083      	sub	sp, #12
 802c664:	af00      	add	r7, sp, #0
 802c666:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 802c668:	687b      	ldr	r3, [r7, #4]
 802c66a:	4a07      	ldr	r2, [pc, #28]	; (802c688 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 802c66c:	461c      	mov	r4, r3
 802c66e:	4615      	mov	r5, r2
 802c670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802c672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802c674:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802c678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802c67c:	6878      	ldr	r0, [r7, #4]
 802c67e:	370c      	adds	r7, #12
 802c680:	46bd      	mov	sp, r7
 802c682:	bcb0      	pop	{r4, r5, r7}
 802c684:	4770      	bx	lr
 802c686:	bf00      	nop
 802c688:	08034b9c 	.word	0x08034b9c

0802c68c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 802c68c:	b590      	push	{r4, r7, lr}
 802c68e:	b09f      	sub	sp, #124	; 0x7c
 802c690:	af00      	add	r7, sp, #0
 802c692:	60f8      	str	r0, [r7, #12]
 802c694:	60b9      	str	r1, [r7, #8]
 802c696:	607a      	str	r2, [r7, #4]
 802c698:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 802c69a:	68fb      	ldr	r3, [r7, #12]
 802c69c:	689b      	ldr	r3, [r3, #8]
 802c69e:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 802c6a0:	68fb      	ldr	r3, [r7, #12]
 802c6a2:	68db      	ldr	r3, [r3, #12]
 802c6a4:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 802c6a6:	68fb      	ldr	r3, [r7, #12]
 802c6a8:	699b      	ldr	r3, [r3, #24]
 802c6aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 802c6ac:	68b8      	ldr	r0, [r7, #8]
 802c6ae:	f7fb fa0a 	bl	8027ac6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802c6b2:	4603      	mov	r3, r0
 802c6b4:	3b01      	subs	r3, #1
 802c6b6:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 802c6b8:	683a      	ldr	r2, [r7, #0]
 802c6ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802c6bc:	68b8      	ldr	r0, [r7, #8]
 802c6be:	f7fe fdad 	bl	802b21c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 802c6c2:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802c6c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c6c6:	683a      	ldr	r2, [r7, #0]
 802c6c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802c6ca:	68b8      	ldr	r0, [r7, #8]
 802c6cc:	f7fc fcb9 	bl	8029042 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802c6d0:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 802c6d2:	2300      	movs	r3, #0
 802c6d4:	677b      	str	r3, [r7, #116]	; 0x74
 802c6d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802c6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c6da:	429a      	cmp	r2, r3
 802c6dc:	f280 80ed 	bge.w	802c8ba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 802c6e0:	2300      	movs	r3, #0
 802c6e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 802c6e6:	2300      	movs	r3, #0
 802c6e8:	673b      	str	r3, [r7, #112]	; 0x70
 802c6ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802c6ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c6ee:	429a      	cmp	r2, r3
 802c6f0:	da16      	bge.n	802c720 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 802c6f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c6f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c6f6:	fb03 f202 	mul.w	r2, r3, r2
 802c6fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802c6fc:	4413      	add	r3, r2
 802c6fe:	461a      	mov	r2, r3
 802c700:	687b      	ldr	r3, [r7, #4]
 802c702:	441a      	add	r2, r3
 802c704:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 802c708:	4611      	mov	r1, r2
 802c70a:	4618      	mov	r0, r3
 802c70c:	f7ff fa56 	bl	802bbbc <_ZSt3maxIhERKT_S2_S2_>
 802c710:	4603      	mov	r3, r0
 802c712:	781b      	ldrb	r3, [r3, #0]
 802c714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 802c718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802c71a:	3301      	adds	r3, #1
 802c71c:	673b      	str	r3, [r7, #112]	; 0x70
 802c71e:	e7e4      	b.n	802c6ea <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 802c720:	f000 f8cf 	bl	802c8c2 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 802c724:	4603      	mov	r3, r0
 802c726:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 802c728:	2300      	movs	r3, #0
 802c72a:	66fb      	str	r3, [r7, #108]	; 0x6c
 802c72c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802c72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c730:	429a      	cmp	r2, r3
 802c732:	da2f      	bge.n	802c794 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 802c734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c736:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c738:	fb03 f202 	mul.w	r2, r3, r2
 802c73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802c73e:	4413      	add	r3, r2
 802c740:	461a      	mov	r2, r3
 802c742:	687b      	ldr	r3, [r7, #4]
 802c744:	4413      	add	r3, r2
 802c746:	781b      	ldrb	r3, [r3, #0]
 802c748:	461a      	mov	r2, r3
 802c74a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 802c74e:	1ad3      	subs	r3, r2, r3
 802c750:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 802c752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c756:	429a      	cmp	r2, r3
 802c758:	db18      	blt.n	802c78c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 802c75a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802c75c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802c75e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802c760:	f7fd fd99 	bl	802a296 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 802c764:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 802c766:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 802c768:	f000 f8b3 	bl	802c8d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802c76c:	4603      	mov	r3, r0
 802c76e:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 802c770:	69f8      	ldr	r0, [r7, #28]
 802c772:	f000 f8dd 	bl	802c930 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 802c776:	4603      	mov	r3, r0
 802c778:	4618      	mov	r0, r3
 802c77a:	f000 fa21 	bl	802cbc0 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802c77e:	4603      	mov	r3, r0
 802c780:	4619      	mov	r1, r3
 802c782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c784:	f000 f8b6 	bl	802c8f4 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c788:	4603      	mov	r3, r0
 802c78a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 802c78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802c78e:	3301      	adds	r3, #1
 802c790:	66fb      	str	r3, [r7, #108]	; 0x6c
 802c792:	e7cb      	b.n	802c72c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 802c794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802c798:	4618      	mov	r0, r3
 802c79a:	f000 fa2b 	bl	802cbf4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802c79e:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 802c7a0:	681b      	ldr	r3, [r3, #0]
 802c7a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802c7a6:	210c      	movs	r1, #12
 802c7a8:	4618      	mov	r0, r3
 802c7aa:	f7fd fd87 	bl	802a2bc <_ZN6tflite13GetReciprocalEliPi>
 802c7ae:	4603      	mov	r3, r0
 802c7b0:	4618      	mov	r0, r3
 802c7b2:	f7fd fdc0 	bl	802a336 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802c7b6:	4603      	mov	r3, r0
 802c7b8:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 802c7ba:	2300      	movs	r3, #0
 802c7bc:	66bb      	str	r3, [r7, #104]	; 0x68
 802c7be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802c7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c7c2:	429a      	cmp	r2, r3
 802c7c4:	da75      	bge.n	802c8b2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 802c7c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c7c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c7ca:	fb03 f202 	mul.w	r2, r3, r2
 802c7ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802c7d0:	4413      	add	r3, r2
 802c7d2:	461a      	mov	r2, r3
 802c7d4:	687b      	ldr	r3, [r7, #4]
 802c7d6:	4413      	add	r3, r2
 802c7d8:	781b      	ldrb	r3, [r3, #0]
 802c7da:	461a      	mov	r2, r3
 802c7dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 802c7e0:	1ad3      	subs	r3, r2, r3
 802c7e2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 802c7e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802c7e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c7e8:	429a      	cmp	r2, r3
 802c7ea:	db50      	blt.n	802c88e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 802c7ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802c7ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802c7f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802c7f2:	f7fd fd50 	bl	802a296 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 802c7f6:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 802c7f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 802c7fa:	f000 f86a 	bl	802c8d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802c7fe:	4603      	mov	r3, r0
 802c800:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 802c802:	69b8      	ldr	r0, [r7, #24]
 802c804:	f000 f894 	bl	802c930 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 802c808:	4603      	mov	r3, r0
 802c80a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 802c80c:	6979      	ldr	r1, [r7, #20]
 802c80e:	6a38      	ldr	r0, [r7, #32]
 802c810:	f7fe fdee 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802c814:	4603      	mov	r3, r0
 802c816:	633b      	str	r3, [r7, #48]	; 0x30
 802c818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802c81c:	4618      	mov	r0, r3
 802c81e:	f7fd fdfb 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c822:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 802c824:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 802c826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c828:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 802c82a:	4611      	mov	r1, r2
 802c82c:	4618      	mov	r0, r3
 802c82e:	f7fb fedf 	bl	80285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802c832:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 802c834:	f7fa fc39 	bl	80270aa <_ZNSt14numeric_limitsIhE3minEv>
 802c838:	4603      	mov	r3, r0
 802c83a:	461a      	mov	r2, r3
            unsat_output +
 802c83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c83e:	4413      	add	r3, r2
        const int32_t shifted_output =
 802c840:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 802c842:	f7fa fc3a 	bl	80270ba <_ZNSt14numeric_limitsIhE3maxEv>
 802c846:	4603      	mov	r3, r0
 802c848:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 802c84a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802c84e:	f107 0310 	add.w	r3, r7, #16
 802c852:	4611      	mov	r1, r2
 802c854:	4618      	mov	r0, r3
 802c856:	f7fb f8d7 	bl	8027a08 <_ZSt3minIlERKT_S2_S2_>
 802c85a:	4604      	mov	r4, r0
 802c85c:	f7fa fc25 	bl	80270aa <_ZNSt14numeric_limitsIhE3minEv>
 802c860:	4603      	mov	r3, r0
 802c862:	63bb      	str	r3, [r7, #56]	; 0x38
 802c864:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802c868:	4619      	mov	r1, r3
 802c86a:	4620      	mov	r0, r4
 802c86c:	f7fb f8e0 	bl	8027a30 <_ZSt3maxIlERKT_S2_S2_>
 802c870:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 802c872:	6819      	ldr	r1, [r3, #0]
 802c874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c878:	fb03 f202 	mul.w	r2, r3, r2
 802c87c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802c87e:	4413      	add	r3, r2
 802c880:	461a      	mov	r2, r3
 802c882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802c886:	4413      	add	r3, r2
 802c888:	b2ca      	uxtb	r2, r1
 802c88a:	701a      	strb	r2, [r3, #0]
 802c88c:	e00d      	b.n	802c8aa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 802c88e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c892:	fb03 f202 	mul.w	r2, r3, r2
 802c896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802c898:	4413      	add	r3, r2
 802c89a:	461a      	mov	r2, r3
 802c89c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802c8a0:	189c      	adds	r4, r3, r2
 802c8a2:	f7fa fc02 	bl	80270aa <_ZNSt14numeric_limitsIhE3minEv>
 802c8a6:	4603      	mov	r3, r0
 802c8a8:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 802c8aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802c8ac:	3301      	adds	r3, #1
 802c8ae:	66bb      	str	r3, [r7, #104]	; 0x68
 802c8b0:	e785      	b.n	802c7be <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 802c8b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c8b4:	3301      	adds	r3, #1
 802c8b6:	677b      	str	r3, [r7, #116]	; 0x74
 802c8b8:	e70d      	b.n	802c6d6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 802c8ba:	bf00      	nop
 802c8bc:	377c      	adds	r7, #124	; 0x7c
 802c8be:	46bd      	mov	sp, r7
 802c8c0:	bd90      	pop	{r4, r7, pc}

0802c8c2 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 802c8c2:	b580      	push	{r7, lr}
 802c8c4:	af00      	add	r7, sp, #0
 802c8c6:	2000      	movs	r0, #0
 802c8c8:	f000 f99f 	bl	802cc0a <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 802c8cc:	4603      	mov	r3, r0
 802c8ce:	4618      	mov	r0, r3
 802c8d0:	bd80      	pop	{r7, pc}

0802c8d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 802c8d2:	b580      	push	{r7, lr}
 802c8d4:	b084      	sub	sp, #16
 802c8d6:	af00      	add	r7, sp, #0
 802c8d8:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 802c8da:	f107 030c 	add.w	r3, r7, #12
 802c8de:	4618      	mov	r0, r3
 802c8e0:	f000 f9a7 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802c8e4:	4602      	mov	r2, r0
 802c8e6:	687b      	ldr	r3, [r7, #4]
 802c8e8:	6013      	str	r3, [r2, #0]
    return retval;
 802c8ea:	68fb      	ldr	r3, [r7, #12]
  }
 802c8ec:	4618      	mov	r0, r3
 802c8ee:	3710      	adds	r7, #16
 802c8f0:	46bd      	mov	sp, r7
 802c8f2:	bd80      	pop	{r7, pc}

0802c8f4 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 802c8f4:	b590      	push	{r4, r7, lr}
 802c8f6:	b083      	sub	sp, #12
 802c8f8:	af00      	add	r7, sp, #0
 802c8fa:	6078      	str	r0, [r7, #4]
 802c8fc:	6039      	str	r1, [r7, #0]
 802c8fe:	1d3b      	adds	r3, r7, #4
 802c900:	4618      	mov	r0, r3
 802c902:	f000 f977 	bl	802cbf4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802c906:	4603      	mov	r3, r0
 802c908:	681c      	ldr	r4, [r3, #0]
 802c90a:	463b      	mov	r3, r7
 802c90c:	4618      	mov	r0, r3
 802c90e:	f000 f971 	bl	802cbf4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802c912:	4603      	mov	r3, r0
 802c914:	681b      	ldr	r3, [r3, #0]
 802c916:	4619      	mov	r1, r3
 802c918:	4620      	mov	r0, r4
 802c91a:	f7fc fa69 	bl	8028df0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802c91e:	4603      	mov	r3, r0
 802c920:	4618      	mov	r0, r3
 802c922:	f000 f991 	bl	802cc48 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 802c926:	4603      	mov	r3, r0
 802c928:	4618      	mov	r0, r3
 802c92a:	370c      	adds	r7, #12
 802c92c:	46bd      	mov	sp, r7
 802c92e:	bd90      	pop	{r4, r7, pc}

0802c930 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 802c930:	b590      	push	{r4, r7, lr}
 802c932:	b091      	sub	sp, #68	; 0x44
 802c934:	af00      	add	r7, sp, #0
 802c936:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 802c938:	f000 f997 	bl	802cc6a <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 802c93c:	4603      	mov	r3, r0
 802c93e:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 802c940:	2001      	movs	r0, #1
 802c942:	f000 f99b 	bl	802cc7c <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 802c946:	4603      	mov	r3, r0
 802c948:	4619      	mov	r1, r3
 802c94a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802c94c:	f000 f9aa 	bl	802cca4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c950:	4603      	mov	r3, r0
 802c952:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 802c954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802c956:	6878      	ldr	r0, [r7, #4]
 802c958:	f000 f9c2 	bl	802cce0 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c95c:	4603      	mov	r3, r0
 802c95e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802c960:	4618      	mov	r0, r3
 802c962:	f000 f99f 	bl	802cca4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c966:	4603      	mov	r3, r0
 802c968:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 802c96a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802c96c:	f000 f9d6 	bl	802cd1c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802c970:	4603      	mov	r3, r0
 802c972:	4618      	mov	r0, r3
 802c974:	f7fe fcda 	bl	802b32c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 802c978:	4603      	mov	r3, r0
 802c97a:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 802c97c:	6879      	ldr	r1, [r7, #4]
 802c97e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802c980:	f000 f990 	bl	802cca4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c984:	4603      	mov	r3, r0
 802c986:	63bb      	str	r3, [r7, #56]	; 0x38
 802c988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802c98c:	4618      	mov	r0, r3
 802c98e:	f000 f950 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802c992:	4603      	mov	r3, r0
 802c994:	681b      	ldr	r3, [r3, #0]
 802c996:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 802c998:	4883      	ldr	r0, [pc, #524]	; (802cba8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 802c99a:	f7fe fc6e 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802c99e:	4603      	mov	r3, r0
 802c9a0:	4618      	mov	r0, r3
 802c9a2:	f7fd fd44 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802c9a6:	4603      	mov	r3, r0
 802c9a8:	627b      	str	r3, [r7, #36]	; 0x24
 802c9aa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 802c9ae:	f7fc f9e3 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802c9b2:	4603      	mov	r3, r0
 802c9b4:	4619      	mov	r1, r3
 802c9b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802c9b8:	f7fc f9e9 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802c9bc:	4603      	mov	r3, r0
 802c9be:	4618      	mov	r0, r3
 802c9c0:	f7fc fa38 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802c9c4:	4604      	mov	r4, r0
 802c9c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802c9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c9ca:	f7fe fd11 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802c9ce:	4603      	mov	r3, r0
 802c9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c9d2:	4619      	mov	r1, r3
 802c9d4:	4620      	mov	r0, r4
 802c9d6:	f7fe fc76 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802c9da:	4603      	mov	r3, r0
 802c9dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 802c9de:	4873      	ldr	r0, [pc, #460]	; (802cbac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 802c9e0:	f7fe fc4b 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802c9e4:	4603      	mov	r3, r0
 802c9e6:	4618      	mov	r0, r3
 802c9e8:	f7fd fd21 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802c9ec:	4603      	mov	r3, r0
 802c9ee:	623b      	str	r3, [r7, #32]
 802c9f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 802c9f4:	f7fc f9c0 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802c9f8:	4603      	mov	r3, r0
 802c9fa:	4619      	mov	r1, r3
 802c9fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802c9fe:	f7fc f9c6 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802ca02:	4603      	mov	r3, r0
 802ca04:	4618      	mov	r0, r3
 802ca06:	f7fc fa15 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802ca0a:	4604      	mov	r4, r0
 802ca0c:	6a39      	ldr	r1, [r7, #32]
 802ca0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ca10:	f7fe fcee 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802ca14:	4603      	mov	r3, r0
 802ca16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ca18:	4619      	mov	r1, r3
 802ca1a:	4620      	mov	r0, r4
 802ca1c:	f7fe fc53 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802ca20:	4603      	mov	r3, r0
 802ca22:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 802ca24:	4862      	ldr	r0, [pc, #392]	; (802cbb0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 802ca26:	f7fe fc28 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802ca2a:	4603      	mov	r3, r0
 802ca2c:	4618      	mov	r0, r3
 802ca2e:	f7fd fcfe 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802ca32:	4603      	mov	r3, r0
 802ca34:	61fb      	str	r3, [r7, #28]
 802ca36:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 802ca3a:	f7fc f99d 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802ca3e:	4603      	mov	r3, r0
 802ca40:	4619      	mov	r1, r3
 802ca42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802ca44:	f7fc f9a3 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802ca48:	4603      	mov	r3, r0
 802ca4a:	4618      	mov	r0, r3
 802ca4c:	f7fc f9f2 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802ca50:	4604      	mov	r4, r0
 802ca52:	69f9      	ldr	r1, [r7, #28]
 802ca54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ca56:	f7fe fccb 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802ca5a:	4603      	mov	r3, r0
 802ca5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ca5e:	4619      	mov	r1, r3
 802ca60:	4620      	mov	r0, r4
 802ca62:	f7fe fc30 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802ca66:	4603      	mov	r3, r0
 802ca68:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 802ca6a:	4852      	ldr	r0, [pc, #328]	; (802cbb4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 802ca6c:	f7fe fc05 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802ca70:	4603      	mov	r3, r0
 802ca72:	4618      	mov	r0, r3
 802ca74:	f7fd fcdb 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802ca78:	4603      	mov	r3, r0
 802ca7a:	61bb      	str	r3, [r7, #24]
 802ca7c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 802ca80:	f7fc f97a 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802ca84:	4603      	mov	r3, r0
 802ca86:	4619      	mov	r1, r3
 802ca88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802ca8a:	f7fc f980 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802ca8e:	4603      	mov	r3, r0
 802ca90:	4618      	mov	r0, r3
 802ca92:	f7fc f9cf 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802ca96:	4604      	mov	r4, r0
 802ca98:	69b9      	ldr	r1, [r7, #24]
 802ca9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802ca9c:	f7fe fca8 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802caa0:	4603      	mov	r3, r0
 802caa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802caa4:	4619      	mov	r1, r3
 802caa6:	4620      	mov	r0, r4
 802caa8:	f7fe fc0d 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802caac:	4603      	mov	r3, r0
 802caae:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 802cab0:	4841      	ldr	r0, [pc, #260]	; (802cbb8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 802cab2:	f7fe fbe2 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802cab6:	4603      	mov	r3, r0
 802cab8:	4618      	mov	r0, r3
 802caba:	f7fd fcb8 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802cabe:	4603      	mov	r3, r0
 802cac0:	617b      	str	r3, [r7, #20]
 802cac2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 802cac6:	f7fc f957 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802caca:	4603      	mov	r3, r0
 802cacc:	4619      	mov	r1, r3
 802cace:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802cad0:	f7fc f95d 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802cad4:	4603      	mov	r3, r0
 802cad6:	4618      	mov	r0, r3
 802cad8:	f7fc f9ac 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802cadc:	4604      	mov	r4, r0
 802cade:	6979      	ldr	r1, [r7, #20]
 802cae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802cae2:	f7fe fc85 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802cae6:	4603      	mov	r3, r0
 802cae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802caea:	4619      	mov	r1, r3
 802caec:	4620      	mov	r0, r4
 802caee:	f7fe fbea 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802caf2:	4603      	mov	r3, r0
 802caf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 802caf6:	4831      	ldr	r0, [pc, #196]	; (802cbbc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 802caf8:	f7fe fbbf 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802cafc:	4603      	mov	r3, r0
 802cafe:	4618      	mov	r0, r3
 802cb00:	f7fd fc95 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802cb04:	4603      	mov	r3, r0
 802cb06:	613b      	str	r3, [r7, #16]
 802cb08:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 802cb0c:	f7fc f934 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802cb10:	4603      	mov	r3, r0
 802cb12:	4619      	mov	r1, r3
 802cb14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802cb16:	f7fc f93a 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802cb1a:	4603      	mov	r3, r0
 802cb1c:	4618      	mov	r0, r3
 802cb1e:	f7fc f989 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802cb22:	4604      	mov	r4, r0
 802cb24:	6939      	ldr	r1, [r7, #16]
 802cb26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802cb28:	f7fe fc62 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802cb2c:	4603      	mov	r3, r0
 802cb2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cb30:	4619      	mov	r1, r3
 802cb32:	4620      	mov	r0, r4
 802cb34:	f7fe fbc7 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802cb38:	4603      	mov	r3, r0
 802cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 802cb3c:	20f2      	movs	r0, #242	; 0xf2
 802cb3e:	f7fe fb9c 	bl	802b27a <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802cb42:	4603      	mov	r3, r0
 802cb44:	4618      	mov	r0, r3
 802cb46:	f7fd fc72 	bl	802a42e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802cb4a:	4603      	mov	r3, r0
 802cb4c:	60fb      	str	r3, [r7, #12]
 802cb4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 802cb52:	f7fc f911 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802cb56:	4603      	mov	r3, r0
 802cb58:	4619      	mov	r1, r3
 802cb5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802cb5c:	f7fc f917 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802cb60:	4603      	mov	r3, r0
 802cb62:	4618      	mov	r0, r3
 802cb64:	f7fc f966 	bl	8028e34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802cb68:	4604      	mov	r4, r0
 802cb6a:	68f9      	ldr	r1, [r7, #12]
 802cb6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802cb6e:	f7fe fc3f 	bl	802b3f0 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802cb72:	4603      	mov	r3, r0
 802cb74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cb76:	4619      	mov	r1, r3
 802cb78:	4620      	mov	r0, r4
 802cb7a:	f7fe fba4 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802cb7e:	4603      	mov	r3, r0
 802cb80:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 802cb82:	6878      	ldr	r0, [r7, #4]
 802cb84:	f000 f8e4 	bl	802cd50 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 802cb88:	4604      	mov	r4, r0
 802cb8a:	f7fd fc64 	bl	802a456 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 802cb8e:	4603      	mov	r3, r0
 802cb90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802cb92:	4619      	mov	r1, r3
 802cb94:	4620      	mov	r0, r4
 802cb96:	f7fe fb96 	bl	802b2c6 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802cb9a:	4603      	mov	r3, r0
 802cb9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 802cb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 802cba0:	4618      	mov	r0, r3
 802cba2:	3744      	adds	r7, #68	; 0x44
 802cba4:	46bd      	mov	sp, r7
 802cba6:	bd90      	pop	{r4, r7, pc}
 802cba8:	63afbe7b 	.word	0x63afbe7b
 802cbac:	4da2cbf2 	.word	0x4da2cbf2
 802cbb0:	2f16ac6c 	.word	0x2f16ac6c
 802cbb4:	1152aaa4 	.word	0x1152aaa4
 802cbb8:	02582ab7 	.word	0x02582ab7
 802cbbc:	000afe11 	.word	0x000afe11

0802cbc0 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802cbc0:	b5b0      	push	{r4, r5, r7, lr}
 802cbc2:	b084      	sub	sp, #16
 802cbc4:	af00      	add	r7, sp, #0
 802cbc6:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802cbc8:	1d3b      	adds	r3, r7, #4
 802cbca:	4618      	mov	r0, r3
 802cbcc:	f7fd fc24 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802cbd0:	4603      	mov	r3, r0
 802cbd2:	681d      	ldr	r5, [r3, #0]
 802cbd4:	f107 030c 	add.w	r3, r7, #12
 802cbd8:	4618      	mov	r0, r3
 802cbda:	f000 f80b 	bl	802cbf4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802cbde:	4604      	mov	r4, r0
 802cbe0:	4628      	mov	r0, r5
 802cbe2:	f000 f8c7 	bl	802cd74 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 802cbe6:	4603      	mov	r3, r0
 802cbe8:	6023      	str	r3, [r4, #0]
  return result;
 802cbea:	68fb      	ldr	r3, [r7, #12]
}
 802cbec:	4618      	mov	r0, r3
 802cbee:	3710      	adds	r7, #16
 802cbf0:	46bd      	mov	sp, r7
 802cbf2:	bdb0      	pop	{r4, r5, r7, pc}

0802cbf4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 802cbf4:	b480      	push	{r7}
 802cbf6:	b083      	sub	sp, #12
 802cbf8:	af00      	add	r7, sp, #0
 802cbfa:	6078      	str	r0, [r7, #4]
 802cbfc:	687b      	ldr	r3, [r7, #4]
 802cbfe:	4618      	mov	r0, r3
 802cc00:	370c      	adds	r7, #12
 802cc02:	46bd      	mov	sp, r7
 802cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc08:	4770      	bx	lr

0802cc0a <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802cc0a:	b590      	push	{r4, r7, lr}
 802cc0c:	b085      	sub	sp, #20
 802cc0e:	af00      	add	r7, sp, #0
 802cc10:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802cc12:	f107 030c 	add.w	r3, r7, #12
 802cc16:	4618      	mov	r0, r3
 802cc18:	f7ff ffec 	bl	802cbf4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802cc1c:	4604      	mov	r4, r0
 802cc1e:	6878      	ldr	r0, [r7, #4]
 802cc20:	f7fc f8aa 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802cc24:	4603      	mov	r3, r0
 802cc26:	6023      	str	r3, [r4, #0]
    return retval;
 802cc28:	68fb      	ldr	r3, [r7, #12]
  }
 802cc2a:	4618      	mov	r0, r3
 802cc2c:	3714      	adds	r7, #20
 802cc2e:	46bd      	mov	sp, r7
 802cc30:	bd90      	pop	{r4, r7, pc}

0802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 802cc32:	b480      	push	{r7}
 802cc34:	b083      	sub	sp, #12
 802cc36:	af00      	add	r7, sp, #0
 802cc38:	6078      	str	r0, [r7, #4]
 802cc3a:	687b      	ldr	r3, [r7, #4]
 802cc3c:	4618      	mov	r0, r3
 802cc3e:	370c      	adds	r7, #12
 802cc40:	46bd      	mov	sp, r7
 802cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc46:	4770      	bx	lr

0802cc48 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 802cc48:	b580      	push	{r7, lr}
 802cc4a:	b084      	sub	sp, #16
 802cc4c:	af00      	add	r7, sp, #0
 802cc4e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 802cc50:	f107 030c 	add.w	r3, r7, #12
 802cc54:	4618      	mov	r0, r3
 802cc56:	f7ff ffcd 	bl	802cbf4 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802cc5a:	4602      	mov	r2, r0
 802cc5c:	687b      	ldr	r3, [r7, #4]
 802cc5e:	6013      	str	r3, [r2, #0]
    return retval;
 802cc60:	68fb      	ldr	r3, [r7, #12]
  }
 802cc62:	4618      	mov	r0, r3
 802cc64:	3710      	adds	r7, #16
 802cc66:	46bd      	mov	sp, r7
 802cc68:	bd80      	pop	{r7, pc}

0802cc6a <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 802cc6a:	b580      	push	{r7, lr}
 802cc6c:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 802cc6e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 802cc72:	f000 f803 	bl	802cc7c <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 802cc76:	4603      	mov	r3, r0
  }
 802cc78:	4618      	mov	r0, r3
 802cc7a:	bd80      	pop	{r7, pc}

0802cc7c <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802cc7c:	b590      	push	{r4, r7, lr}
 802cc7e:	b085      	sub	sp, #20
 802cc80:	af00      	add	r7, sp, #0
 802cc82:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802cc84:	f107 030c 	add.w	r3, r7, #12
 802cc88:	4618      	mov	r0, r3
 802cc8a:	f7ff ffd2 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802cc8e:	4604      	mov	r4, r0
 802cc90:	6878      	ldr	r0, [r7, #4]
 802cc92:	f7fc f871 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802cc96:	4603      	mov	r3, r0
 802cc98:	6023      	str	r3, [r4, #0]
    return retval;
 802cc9a:	68fb      	ldr	r3, [r7, #12]
  }
 802cc9c:	4618      	mov	r0, r3
 802cc9e:	3714      	adds	r7, #20
 802cca0:	46bd      	mov	sp, r7
 802cca2:	bd90      	pop	{r4, r7, pc}

0802cca4 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 802cca4:	b590      	push	{r4, r7, lr}
 802cca6:	b083      	sub	sp, #12
 802cca8:	af00      	add	r7, sp, #0
 802ccaa:	6078      	str	r0, [r7, #4]
 802ccac:	6039      	str	r1, [r7, #0]
 802ccae:	1d3b      	adds	r3, r7, #4
 802ccb0:	4618      	mov	r0, r3
 802ccb2:	f7ff ffbe 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802ccb6:	4603      	mov	r3, r0
 802ccb8:	681c      	ldr	r4, [r3, #0]
 802ccba:	463b      	mov	r3, r7
 802ccbc:	4618      	mov	r0, r3
 802ccbe:	f7ff ffb8 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802ccc2:	4603      	mov	r3, r0
 802ccc4:	681b      	ldr	r3, [r3, #0]
 802ccc6:	4619      	mov	r1, r3
 802ccc8:	4620      	mov	r0, r4
 802ccca:	f7fd fce1 	bl	802a690 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 802ccce:	4603      	mov	r3, r0
 802ccd0:	4618      	mov	r0, r3
 802ccd2:	f7ff fdfe 	bl	802c8d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802ccd6:	4603      	mov	r3, r0
 802ccd8:	4618      	mov	r0, r3
 802ccda:	370c      	adds	r7, #12
 802ccdc:	46bd      	mov	sp, r7
 802ccde:	bd90      	pop	{r4, r7, pc}

0802cce0 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 802cce0:	b590      	push	{r4, r7, lr}
 802cce2:	b083      	sub	sp, #12
 802cce4:	af00      	add	r7, sp, #0
 802cce6:	6078      	str	r0, [r7, #4]
 802cce8:	6039      	str	r1, [r7, #0]
 802ccea:	1d3b      	adds	r3, r7, #4
 802ccec:	4618      	mov	r0, r3
 802ccee:	f7ff ffa0 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802ccf2:	4603      	mov	r3, r0
 802ccf4:	681c      	ldr	r4, [r3, #0]
 802ccf6:	463b      	mov	r3, r7
 802ccf8:	4618      	mov	r0, r3
 802ccfa:	f7ff ff9a 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802ccfe:	4603      	mov	r3, r0
 802cd00:	681b      	ldr	r3, [r3, #0]
 802cd02:	4619      	mov	r1, r3
 802cd04:	4620      	mov	r0, r4
 802cd06:	f7fc f842 	bl	8028d8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802cd0a:	4603      	mov	r3, r0
 802cd0c:	4618      	mov	r0, r3
 802cd0e:	f7ff fde0 	bl	802c8d2 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802cd12:	4603      	mov	r3, r0
 802cd14:	4618      	mov	r0, r3
 802cd16:	370c      	adds	r7, #12
 802cd18:	46bd      	mov	sp, r7
 802cd1a:	bd90      	pop	{r4, r7, pc}

0802cd1c <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802cd1c:	b5b0      	push	{r4, r5, r7, lr}
 802cd1e:	b084      	sub	sp, #16
 802cd20:	af00      	add	r7, sp, #0
 802cd22:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802cd24:	1d3b      	adds	r3, r7, #4
 802cd26:	4618      	mov	r0, r3
 802cd28:	f7ff ff83 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802cd2c:	4603      	mov	r3, r0
 802cd2e:	681d      	ldr	r5, [r3, #0]
 802cd30:	f107 030c 	add.w	r3, r7, #12
 802cd34:	4618      	mov	r0, r3
 802cd36:	f7fd fb6f 	bl	802a418 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802cd3a:	4604      	mov	r4, r0
 802cd3c:	4628      	mov	r0, r5
 802cd3e:	f000 f825 	bl	802cd8c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 802cd42:	4603      	mov	r3, r0
 802cd44:	6023      	str	r3, [r4, #0]
  return result;
 802cd46:	68fb      	ldr	r3, [r7, #12]
}
 802cd48:	4618      	mov	r0, r3
 802cd4a:	3710      	adds	r7, #16
 802cd4c:	46bd      	mov	sp, r7
 802cd4e:	bdb0      	pop	{r4, r5, r7, pc}

0802cd50 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 802cd50:	b580      	push	{r7, lr}
 802cd52:	b082      	sub	sp, #8
 802cd54:	af00      	add	r7, sp, #0
 802cd56:	6078      	str	r0, [r7, #4]
 802cd58:	1d3b      	adds	r3, r7, #4
 802cd5a:	4618      	mov	r0, r3
 802cd5c:	f7ff ff69 	bl	802cc32 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802cd60:	4603      	mov	r3, r0
 802cd62:	681b      	ldr	r3, [r3, #0]
 802cd64:	4618      	mov	r0, r3
 802cd66:	f7fe facf 	bl	802b308 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 802cd6a:	4603      	mov	r3, r0
 802cd6c:	4618      	mov	r0, r3
 802cd6e:	3708      	adds	r7, #8
 802cd70:	46bd      	mov	sp, r7
 802cd72:	bd80      	pop	{r7, pc}

0802cd74 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802cd74:	b580      	push	{r7, lr}
 802cd76:	b082      	sub	sp, #8
 802cd78:	af00      	add	r7, sp, #0
 802cd7a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802cd7c:	6878      	ldr	r0, [r7, #4]
 802cd7e:	f000 f811 	bl	802cda4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 802cd82:	4603      	mov	r3, r0
}
 802cd84:	4618      	mov	r0, r3
 802cd86:	3708      	adds	r7, #8
 802cd88:	46bd      	mov	sp, r7
 802cd8a:	bd80      	pop	{r7, pc}

0802cd8c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802cd8c:	b580      	push	{r7, lr}
 802cd8e:	b082      	sub	sp, #8
 802cd90:	af00      	add	r7, sp, #0
 802cd92:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802cd94:	6878      	ldr	r0, [r7, #4]
 802cd96:	f000 f813 	bl	802cdc0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 802cd9a:	4603      	mov	r3, r0
}
 802cd9c:	4618      	mov	r0, r3
 802cd9e:	3708      	adds	r7, #8
 802cda0:	46bd      	mov	sp, r7
 802cda2:	bd80      	pop	{r7, pc}

0802cda4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802cda4:	b580      	push	{r7, lr}
 802cda6:	b082      	sub	sp, #8
 802cda8:	af00      	add	r7, sp, #0
 802cdaa:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 802cdac:	210c      	movs	r1, #12
 802cdae:	6878      	ldr	r0, [r7, #4]
 802cdb0:	f7fb fc1e 	bl	80285f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802cdb4:	4603      	mov	r3, r0
  }
 802cdb6:	4618      	mov	r0, r3
 802cdb8:	3708      	adds	r7, #8
 802cdba:	46bd      	mov	sp, r7
 802cdbc:	bd80      	pop	{r7, pc}
	...

0802cdc0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802cdc0:	b580      	push	{r7, lr}
 802cdc2:	b08a      	sub	sp, #40	; 0x28
 802cdc4:	af00      	add	r7, sp, #0
 802cdc6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 802cdc8:	f7fa ff8d 	bl	8027ce6 <_ZNSt14numeric_limitsIlE3minEv>
 802cdcc:	4603      	mov	r3, r0
 802cdce:	4618      	mov	r0, r3
 802cdd0:	f7fb ffd2 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802cdd4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 802cdd6:	f7f9 ff95 	bl	8026d04 <_ZNSt14numeric_limitsIlE3maxEv>
 802cdda:	4603      	mov	r3, r0
 802cddc:	4618      	mov	r0, r3
 802cdde:	f7fb ffcb 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802cde2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 802cde4:	2320      	movs	r3, #32
 802cde6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 802cde8:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 802cdec:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 802cdee:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 802cdf2:	f7fb ffc1 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802cdf6:	4603      	mov	r3, r0
 802cdf8:	4619      	mov	r1, r3
 802cdfa:	6878      	ldr	r0, [r7, #4]
 802cdfc:	f7fc f806 	bl	8028e0c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 802ce00:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 802ce02:	480f      	ldr	r0, [pc, #60]	; (802ce40 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 802ce04:	f7fb ffb8 	bl	8028d78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802ce08:	4603      	mov	r3, r0
 802ce0a:	4619      	mov	r1, r3
 802ce0c:	6878      	ldr	r0, [r7, #4]
 802ce0e:	f7fb ffdb 	bl	8028dc8 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 802ce12:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 802ce14:	2105      	movs	r1, #5
 802ce16:	6878      	ldr	r0, [r7, #4]
 802ce18:	f7fd fd1e 	bl	802a858 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 802ce1c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 802ce1e:	68fa      	ldr	r2, [r7, #12]
 802ce20:	6a39      	ldr	r1, [r7, #32]
 802ce22:	6978      	ldr	r0, [r7, #20]
 802ce24:	f7fd fd5c 	bl	802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802ce28:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 802ce2a:	68fa      	ldr	r2, [r7, #12]
 802ce2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802ce2e:	6938      	ldr	r0, [r7, #16]
 802ce30:	f7fd fd56 	bl	802a8e0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802ce34:	60f8      	str	r0, [r7, #12]
    return result;
 802ce36:	68fb      	ldr	r3, [r7, #12]
  }
 802ce38:	4618      	mov	r0, r3
 802ce3a:	3728      	adds	r7, #40	; 0x28
 802ce3c:	46bd      	mov	sp, r7
 802ce3e:	bd80      	pop	{r7, pc}
 802ce40:	fc000001 	.word	0xfc000001

0802ce44 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 802ce44:	b580      	push	{r7, lr}
 802ce46:	ed2d 8b02 	vpush	{d8}
 802ce4a:	b094      	sub	sp, #80	; 0x50
 802ce4c:	af00      	add	r7, sp, #0
 802ce4e:	6178      	str	r0, [r7, #20]
 802ce50:	ed87 0a04 	vstr	s0, [r7, #16]
 802ce54:	edc7 0a03 	vstr	s1, [r7, #12]
 802ce58:	60b9      	str	r1, [r7, #8]
 802ce5a:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 802ce5c:	ed97 7a03 	vldr	s14, [r7, #12]
 802ce60:	edd7 7a04 	vldr	s15, [r7, #16]
 802ce64:	ee77 6a67 	vsub.f32	s13, s14, s15
 802ce68:	687b      	ldr	r3, [r7, #4]
 802ce6a:	3b01      	subs	r3, #1
 802ce6c:	ee07 3a90 	vmov	s15, r3
 802ce70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802ce74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802ce78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 802ce7c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 802ce80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802ce84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802ce88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 802ce8c:	2300      	movs	r3, #0
 802ce8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ce90:	687b      	ldr	r3, [r7, #4]
 802ce92:	3b01      	subs	r3, #1
 802ce94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ce96:	429a      	cmp	r2, r3
 802ce98:	f280 80c0 	bge.w	802d01c <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 802ce9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ce9e:	ee07 3a90 	vmov	s15, r3
 802cea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802cea6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802ceaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 802ceae:	edd7 7a04 	vldr	s15, [r7, #16]
 802ceb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 802ceb6:	697b      	ldr	r3, [r7, #20]
 802ceb8:	eeb0 0a67 	vmov.f32	s0, s15
 802cebc:	4798      	blx	r3
 802cebe:	eef0 7a40 	vmov.f32	s15, s0
 802cec2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 802d094 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802cec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 802ceca:	eeb0 0a67 	vmov.f32	s0, s15
 802cece:	f7fa f8cb 	bl	8027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802ced2:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 802ced6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ced8:	3301      	adds	r3, #1
 802ceda:	ee07 3a90 	vmov	s15, r3
 802cede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802cee2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802cee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 802ceea:	edd7 7a04 	vldr	s15, [r7, #16]
 802ceee:	ee77 7a27 	vadd.f32	s15, s14, s15
 802cef2:	697b      	ldr	r3, [r7, #20]
 802cef4:	eeb0 0a67 	vmov.f32	s0, s15
 802cef8:	4798      	blx	r3
 802cefa:	eef0 7a40 	vmov.f32	s15, s0
 802cefe:	ed9f 7a65 	vldr	s14, [pc, #404]	; 802d094 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802cf02:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 802cf06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cf08:	ee07 3a90 	vmov	s15, r3
 802cf0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802cf10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802cf14:	ee27 7a27 	vmul.f32	s14, s14, s15
 802cf18:	edd7 7a04 	vldr	s15, [r7, #16]
 802cf1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 802cf20:	697b      	ldr	r3, [r7, #20]
 802cf22:	eeb0 0a67 	vmov.f32	s0, s15
 802cf26:	4798      	blx	r3
 802cf28:	eef0 7a40 	vmov.f32	s15, s0
 802cf2c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 802d094 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802cf30:	ee67 7a87 	vmul.f32	s15, s15, s14
 802cf34:	eeb0 0a67 	vmov.f32	s0, s15
 802cf38:	f7fa f896 	bl	8027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802cf3c:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 802cf40:	ee78 7a27 	vadd.f32	s15, s16, s15
 802cf44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802cf48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802cf4c:	eeb0 0a47 	vmov.f32	s0, s14
 802cf50:	f7fa f88a 	bl	8027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802cf54:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 802cf58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cf5a:	ee07 3a90 	vmov	s15, r3
 802cf5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802cf62:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802cf66:	ee27 7a27 	vmul.f32	s14, s14, s15
 802cf6a:	edd7 7a04 	vldr	s15, [r7, #16]
 802cf6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 802cf72:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 802cf76:	ee77 7a27 	vadd.f32	s15, s14, s15
 802cf7a:	697b      	ldr	r3, [r7, #20]
 802cf7c:	eeb0 0a67 	vmov.f32	s0, s15
 802cf80:	4798      	blx	r3
 802cf82:	eef0 7a40 	vmov.f32	s15, s0
 802cf86:	ed9f 7a43 	vldr	s14, [pc, #268]	; 802d094 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802cf8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802cf8e:	eeb0 0a67 	vmov.f32	s0, s15
 802cf92:	f7fa f869 	bl	8027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802cf96:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 802cf9a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 802cf9e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 802cfa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 802cfa6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 802cfaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 802cfae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802cfb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802cfb6:	eeb0 0a47 	vmov.f32	s0, s14
 802cfba:	f7fa f855 	bl	8027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802cfbe:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 802cfc2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 802cfc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 802cfca:	ee77 7a67 	vsub.f32	s15, s14, s15
 802cfce:	edc7 7a06 	vstr	s15, [r7, #24]
 802cfd2:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 802cfd6:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 802cfd8:	f107 021c 	add.w	r2, r7, #28
 802cfdc:	f107 0318 	add.w	r3, r7, #24
 802cfe0:	4611      	mov	r1, r2
 802cfe2:	4618      	mov	r0, r3
 802cfe4:	f7d8 fe1b 	bl	8005c1e <_ZSt3maxIfERKT_S2_S2_>
 802cfe8:	4602      	mov	r2, r0
 802cfea:	4b2b      	ldr	r3, [pc, #172]	; (802d098 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 802cfec:	623b      	str	r3, [r7, #32]
 802cfee:	f107 0320 	add.w	r3, r7, #32
 802cff2:	4619      	mov	r1, r3
 802cff4:	4610      	mov	r0, r2
 802cff6:	f7fa f80a 	bl	802700e <_ZSt3minIfERKT_S2_S2_>
 802cffa:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 802cffc:	edd3 7a00 	vldr	s15, [r3]
 802d000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d002:	005b      	lsls	r3, r3, #1
 802d004:	68ba      	ldr	r2, [r7, #8]
 802d006:	4413      	add	r3, r2
 802d008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d00c:	ee17 2a90 	vmov	r2, s15
 802d010:	b212      	sxth	r2, r2
 802d012:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 802d014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d016:	3301      	adds	r3, #1
 802d018:	64fb      	str	r3, [r7, #76]	; 0x4c
 802d01a:	e739      	b.n	802ce90 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 802d01c:	697b      	ldr	r3, [r7, #20]
 802d01e:	ed97 0a03 	vldr	s0, [r7, #12]
 802d022:	4798      	blx	r3
 802d024:	eef0 7a40 	vmov.f32	s15, s0
 802d028:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 802d094 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802d02c:	ee67 7a87 	vmul.f32	s15, s15, s14
 802d030:	eeb0 0a67 	vmov.f32	s0, s15
 802d034:	f7fa f818 	bl	8027068 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802d038:	eef0 7a40 	vmov.f32	s15, s0
 802d03c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 802d040:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 802d044:	62bb      	str	r3, [r7, #40]	; 0x28
 802d046:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802d04a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802d04e:	4611      	mov	r1, r2
 802d050:	4618      	mov	r0, r3
 802d052:	f7d8 fde4 	bl	8005c1e <_ZSt3maxIfERKT_S2_S2_>
 802d056:	4602      	mov	r2, r0
 802d058:	4b0f      	ldr	r3, [pc, #60]	; (802d098 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 802d05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d05c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802d060:	4619      	mov	r1, r3
 802d062:	4610      	mov	r0, r2
 802d064:	f7f9 ffd3 	bl	802700e <_ZSt3minIfERKT_S2_S2_>
 802d068:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 802d06a:	edd3 7a00 	vldr	s15, [r3]
 802d06e:	687b      	ldr	r3, [r7, #4]
 802d070:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802d074:	3b01      	subs	r3, #1
 802d076:	005b      	lsls	r3, r3, #1
 802d078:	68ba      	ldr	r2, [r7, #8]
 802d07a:	4413      	add	r3, r2
 802d07c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d080:	ee17 2a90 	vmov	r2, s15
 802d084:	b212      	sxth	r2, r2
 802d086:	801a      	strh	r2, [r3, #0]
}
 802d088:	bf00      	nop
 802d08a:	3750      	adds	r7, #80	; 0x50
 802d08c:	46bd      	mov	sp, r7
 802d08e:	ecbd 8b02 	vpop	{d8}
 802d092:	bd80      	pop	{r7, pc}
 802d094:	47000000 	.word	0x47000000
 802d098:	46fffe00 	.word	0x46fffe00
 802d09c:	00000000 	.word	0x00000000

0802d0a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 802d0a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802d0a4:	b090      	sub	sp, #64	; 0x40
 802d0a6:	af06      	add	r7, sp, #24
 802d0a8:	60f8      	str	r0, [r7, #12]
 802d0aa:	60b9      	str	r1, [r7, #8]
 802d0ac:	607a      	str	r2, [r7, #4]
 802d0ae:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 802d0b0:	68bb      	ldr	r3, [r7, #8]
 802d0b2:	781b      	ldrb	r3, [r3, #0]
 802d0b4:	2b09      	cmp	r3, #9
 802d0b6:	d004      	beq.n	802d0c2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 802d0b8:	68bb      	ldr	r3, [r7, #8]
 802d0ba:	781b      	ldrb	r3, [r3, #0]
 802d0bc:	2b07      	cmp	r3, #7
 802d0be:	f040 81b6 	bne.w	802d42e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 802d0c2:	68bb      	ldr	r3, [r7, #8]
 802d0c4:	781b      	ldrb	r3, [r3, #0]
 802d0c6:	2b07      	cmp	r3, #7
 802d0c8:	d156      	bne.n	802d178 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 802d0ca:	687b      	ldr	r3, [r7, #4]
 802d0cc:	691b      	ldr	r3, [r3, #16]
 802d0ce:	2b00      	cmp	r3, #0
 802d0d0:	d011      	beq.n	802d0f6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 802d0d2:	68fb      	ldr	r3, [r7, #12]
 802d0d4:	695c      	ldr	r4, [r3, #20]
 802d0d6:	687b      	ldr	r3, [r7, #4]
 802d0d8:	691b      	ldr	r3, [r3, #16]
 802d0da:	2200      	movs	r2, #0
 802d0dc:	9203      	str	r2, [sp, #12]
 802d0de:	9302      	str	r3, [sp, #8]
 802d0e0:	4ba1      	ldr	r3, [pc, #644]	; (802d368 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 802d0e2:	9301      	str	r3, [sp, #4]
 802d0e4:	4ba1      	ldr	r3, [pc, #644]	; (802d36c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 802d0e6:	9300      	str	r3, [sp, #0]
 802d0e8:	2325      	movs	r3, #37	; 0x25
 802d0ea:	4aa1      	ldr	r2, [pc, #644]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d0ec:	49a1      	ldr	r1, [pc, #644]	; (802d374 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 802d0ee:	68f8      	ldr	r0, [r7, #12]
 802d0f0:	47a0      	blx	r4
 802d0f2:	2301      	movs	r3, #1
 802d0f4:	e1e0      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 802d0f6:	687b      	ldr	r3, [r7, #4]
 802d0f8:	edd3 7a03 	vldr	s15, [r3, #12]
 802d0fc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 802d378 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802d100:	eef4 7ac7 	vcmpe.f32	s15, s14
 802d104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d108:	dd07      	ble.n	802d11a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 802d10a:	687b      	ldr	r3, [r7, #4]
 802d10c:	edd3 7a03 	vldr	s15, [r3, #12]
 802d110:	ed9f 7a99 	vldr	s14, [pc, #612]	; 802d378 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802d114:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d118:	e006      	b.n	802d128 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 802d11a:	687b      	ldr	r3, [r7, #4]
 802d11c:	edd3 7a03 	vldr	s15, [r3, #12]
 802d120:	ed9f 7a95 	vldr	s14, [pc, #596]	; 802d378 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802d124:	ee77 7a67 	vsub.f32	s15, s14, s15
 802d128:	edc7 7a08 	vstr	s15, [r7, #32]
 802d12c:	edd7 7a08 	vldr	s15, [r7, #32]
 802d130:	ed9f 7a92 	vldr	s14, [pc, #584]	; 802d37c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 802d134:	eef4 7ac7 	vcmpe.f32	s15, s14
 802d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d13c:	f340 80dd 	ble.w	802d2fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 802d140:	68fb      	ldr	r3, [r7, #12]
 802d142:	695c      	ldr	r4, [r3, #20]
 802d144:	687b      	ldr	r3, [r7, #4]
 802d146:	68db      	ldr	r3, [r3, #12]
 802d148:	4618      	mov	r0, r3
 802d14a:	f7d3 fa07 	bl	800055c <__aeabi_f2d>
 802d14e:	4602      	mov	r2, r0
 802d150:	460b      	mov	r3, r1
 802d152:	f04f 0000 	mov.w	r0, #0
 802d156:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 802d15a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802d15e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802d162:	4b87      	ldr	r3, [pc, #540]	; (802d380 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 802d164:	9301      	str	r3, [sp, #4]
 802d166:	4b87      	ldr	r3, [pc, #540]	; (802d384 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 802d168:	9300      	str	r3, [sp, #0]
 802d16a:	2326      	movs	r3, #38	; 0x26
 802d16c:	4a80      	ldr	r2, [pc, #512]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d16e:	4986      	ldr	r1, [pc, #536]	; (802d388 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 802d170:	68f8      	ldr	r0, [r7, #12]
 802d172:	47a0      	blx	r4
 802d174:	2301      	movs	r3, #1
 802d176:	e19f      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 802d178:	68bb      	ldr	r3, [r7, #8]
 802d17a:	781b      	ldrb	r3, [r3, #0]
 802d17c:	2b09      	cmp	r3, #9
 802d17e:	d018      	beq.n	802d1b2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 802d180:	68fb      	ldr	r3, [r7, #12]
 802d182:	695c      	ldr	r4, [r3, #20]
 802d184:	68bb      	ldr	r3, [r7, #8]
 802d186:	781b      	ldrb	r3, [r3, #0]
 802d188:	4618      	mov	r0, r3
 802d18a:	f7f9 fd3f 	bl	8026c0c <TfLiteTypeGetName>
 802d18e:	4605      	mov	r5, r0
 802d190:	2009      	movs	r0, #9
 802d192:	f7f9 fd3b 	bl	8026c0c <TfLiteTypeGetName>
 802d196:	4603      	mov	r3, r0
 802d198:	9303      	str	r3, [sp, #12]
 802d19a:	9502      	str	r5, [sp, #8]
 802d19c:	4b7b      	ldr	r3, [pc, #492]	; (802d38c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 802d19e:	9301      	str	r3, [sp, #4]
 802d1a0:	4b7b      	ldr	r3, [pc, #492]	; (802d390 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 802d1a2:	9300      	str	r3, [sp, #0]
 802d1a4:	2329      	movs	r3, #41	; 0x29
 802d1a6:	4a72      	ldr	r2, [pc, #456]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d1a8:	497a      	ldr	r1, [pc, #488]	; (802d394 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 802d1aa:	68f8      	ldr	r0, [r7, #12]
 802d1ac:	47a0      	blx	r4
 802d1ae:	2301      	movs	r3, #1
 802d1b0:	e182      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 802d1b2:	687b      	ldr	r3, [r7, #4]
 802d1b4:	781b      	ldrb	r3, [r3, #0]
 802d1b6:	2b07      	cmp	r3, #7
 802d1b8:	d155      	bne.n	802d266 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 802d1ba:	687b      	ldr	r3, [r7, #4]
 802d1bc:	691b      	ldr	r3, [r3, #16]
 802d1be:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802d1c2:	d011      	beq.n	802d1e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 802d1c4:	68fb      	ldr	r3, [r7, #12]
 802d1c6:	695c      	ldr	r4, [r3, #20]
 802d1c8:	687b      	ldr	r3, [r7, #4]
 802d1ca:	691b      	ldr	r3, [r3, #16]
 802d1cc:	4a72      	ldr	r2, [pc, #456]	; (802d398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 802d1ce:	9203      	str	r2, [sp, #12]
 802d1d0:	9302      	str	r3, [sp, #8]
 802d1d2:	4b72      	ldr	r3, [pc, #456]	; (802d39c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 802d1d4:	9301      	str	r3, [sp, #4]
 802d1d6:	4b65      	ldr	r3, [pc, #404]	; (802d36c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 802d1d8:	9300      	str	r3, [sp, #0]
 802d1da:	232b      	movs	r3, #43	; 0x2b
 802d1dc:	4a64      	ldr	r2, [pc, #400]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d1de:	4965      	ldr	r1, [pc, #404]	; (802d374 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 802d1e0:	68f8      	ldr	r0, [r7, #12]
 802d1e2:	47a0      	blx	r4
 802d1e4:	2301      	movs	r3, #1
 802d1e6:	e167      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 802d1e8:	687b      	ldr	r3, [r7, #4]
 802d1ea:	edd3 7a03 	vldr	s15, [r3, #12]
 802d1ee:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 802d3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 802d1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 802d1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d1fa:	dd07      	ble.n	802d20c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 802d1fc:	687b      	ldr	r3, [r7, #4]
 802d1fe:	edd3 7a03 	vldr	s15, [r3, #12]
 802d202:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802d3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 802d206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d20a:	e006      	b.n	802d21a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 802d20c:	687b      	ldr	r3, [r7, #4]
 802d20e:	edd3 7a03 	vldr	s15, [r3, #12]
 802d212:	ed9f 7a63 	vldr	s14, [pc, #396]	; 802d3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 802d216:	ee77 7a67 	vsub.f32	s15, s14, s15
 802d21a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 802d21e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802d222:	ed9f 7a60 	vldr	s14, [pc, #384]	; 802d3a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 802d226:	eef4 7ac7 	vcmpe.f32	s15, s14
 802d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d22e:	dd64      	ble.n	802d2fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 802d230:	68fb      	ldr	r3, [r7, #12]
 802d232:	695c      	ldr	r4, [r3, #20]
 802d234:	687b      	ldr	r3, [r7, #4]
 802d236:	68db      	ldr	r3, [r3, #12]
 802d238:	4618      	mov	r0, r3
 802d23a:	f7d3 f98f 	bl	800055c <__aeabi_f2d>
 802d23e:	4602      	mov	r2, r0
 802d240:	460b      	mov	r3, r1
 802d242:	f04f 0000 	mov.w	r0, #0
 802d246:	4958      	ldr	r1, [pc, #352]	; (802d3a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 802d248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802d24c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802d250:	4b56      	ldr	r3, [pc, #344]	; (802d3ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 802d252:	9301      	str	r3, [sp, #4]
 802d254:	4b4b      	ldr	r3, [pc, #300]	; (802d384 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 802d256:	9300      	str	r3, [sp, #0]
 802d258:	232c      	movs	r3, #44	; 0x2c
 802d25a:	4a45      	ldr	r2, [pc, #276]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d25c:	494a      	ldr	r1, [pc, #296]	; (802d388 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 802d25e:	68f8      	ldr	r0, [r7, #12]
 802d260:	47a0      	blx	r4
 802d262:	2301      	movs	r3, #1
 802d264:	e128      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 802d266:	687b      	ldr	r3, [r7, #4]
 802d268:	781b      	ldrb	r3, [r3, #0]
 802d26a:	2b09      	cmp	r3, #9
 802d26c:	d018      	beq.n	802d2a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 802d26e:	68fb      	ldr	r3, [r7, #12]
 802d270:	695c      	ldr	r4, [r3, #20]
 802d272:	687b      	ldr	r3, [r7, #4]
 802d274:	781b      	ldrb	r3, [r3, #0]
 802d276:	4618      	mov	r0, r3
 802d278:	f7f9 fcc8 	bl	8026c0c <TfLiteTypeGetName>
 802d27c:	4605      	mov	r5, r0
 802d27e:	2009      	movs	r0, #9
 802d280:	f7f9 fcc4 	bl	8026c0c <TfLiteTypeGetName>
 802d284:	4603      	mov	r3, r0
 802d286:	9303      	str	r3, [sp, #12]
 802d288:	9502      	str	r5, [sp, #8]
 802d28a:	4b40      	ldr	r3, [pc, #256]	; (802d38c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 802d28c:	9301      	str	r3, [sp, #4]
 802d28e:	4b48      	ldr	r3, [pc, #288]	; (802d3b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 802d290:	9300      	str	r3, [sp, #0]
 802d292:	232f      	movs	r3, #47	; 0x2f
 802d294:	4a36      	ldr	r2, [pc, #216]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d296:	493f      	ldr	r1, [pc, #252]	; (802d394 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 802d298:	68f8      	ldr	r0, [r7, #12]
 802d29a:	47a0      	blx	r4
 802d29c:	2301      	movs	r3, #1
 802d29e:	e10b      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 802d2a0:	687b      	ldr	r3, [r7, #4]
 802d2a2:	691b      	ldr	r3, [r3, #16]
 802d2a4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 802d2a8:	d012      	beq.n	802d2d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 802d2aa:	68fb      	ldr	r3, [r7, #12]
 802d2ac:	695c      	ldr	r4, [r3, #20]
 802d2ae:	687b      	ldr	r3, [r7, #4]
 802d2b0:	691b      	ldr	r3, [r3, #16]
 802d2b2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 802d2b6:	9203      	str	r2, [sp, #12]
 802d2b8:	9302      	str	r3, [sp, #8]
 802d2ba:	4b3e      	ldr	r3, [pc, #248]	; (802d3b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 802d2bc:	9301      	str	r3, [sp, #4]
 802d2be:	4b2b      	ldr	r3, [pc, #172]	; (802d36c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 802d2c0:	9300      	str	r3, [sp, #0]
 802d2c2:	2330      	movs	r3, #48	; 0x30
 802d2c4:	4a2a      	ldr	r2, [pc, #168]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d2c6:	492b      	ldr	r1, [pc, #172]	; (802d374 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 802d2c8:	68f8      	ldr	r0, [r7, #12]
 802d2ca:	47a0      	blx	r4
 802d2cc:	2301      	movs	r3, #1
 802d2ce:	e0f3      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 802d2d0:	687b      	ldr	r3, [r7, #4]
 802d2d2:	edd3 7a03 	vldr	s15, [r3, #12]
 802d2d6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802d3b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 802d2da:	eef4 7a47 	vcmp.f32	s15, s14
 802d2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d2e2:	d00a      	beq.n	802d2fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 802d2e4:	68fb      	ldr	r3, [r7, #12]
 802d2e6:	695c      	ldr	r4, [r3, #20]
 802d2e8:	4b34      	ldr	r3, [pc, #208]	; (802d3bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 802d2ea:	9300      	str	r3, [sp, #0]
 802d2ec:	2331      	movs	r3, #49	; 0x31
 802d2ee:	4a20      	ldr	r2, [pc, #128]	; (802d370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802d2f0:	4933      	ldr	r1, [pc, #204]	; (802d3c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 802d2f2:	68f8      	ldr	r0, [r7, #12]
 802d2f4:	47a0      	blx	r4
 802d2f6:	2301      	movs	r3, #1
 802d2f8:	e0de      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 802d2fa:	68bb      	ldr	r3, [r7, #8]
 802d2fc:	781b      	ldrb	r3, [r3, #0]
 802d2fe:	2b07      	cmp	r3, #7
 802d300:	d160      	bne.n	802d3c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 802d302:	68bb      	ldr	r3, [r7, #8]
 802d304:	68db      	ldr	r3, [r3, #12]
 802d306:	4618      	mov	r0, r3
 802d308:	f7d3 f928 	bl	800055c <__aeabi_f2d>
 802d30c:	4604      	mov	r4, r0
 802d30e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 802d310:	683b      	ldr	r3, [r7, #0]
 802d312:	681b      	ldr	r3, [r3, #0]
 802d314:	4618      	mov	r0, r3
 802d316:	f7d3 f921 	bl	800055c <__aeabi_f2d>
 802d31a:	4602      	mov	r2, r0
 802d31c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 802d31e:	4620      	mov	r0, r4
 802d320:	4629      	mov	r1, r5
 802d322:	f7d3 f973 	bl	800060c <__aeabi_dmul>
 802d326:	4602      	mov	r2, r0
 802d328:	460b      	mov	r3, r1
 802d32a:	4610      	mov	r0, r2
 802d32c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 802d32e:	a30c      	add	r3, pc, #48	; (adr r3, 802d360 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 802d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d334:	f7d3 fa94 	bl	8000860 <__aeabi_ddiv>
 802d338:	4602      	mov	r2, r0
 802d33a:	460b      	mov	r3, r1
 802d33c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 802d340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d342:	3308      	adds	r3, #8
 802d344:	f107 0214 	add.w	r2, r7, #20
 802d348:	4611      	mov	r1, r2
 802d34a:	4618      	mov	r0, r3
 802d34c:	ed97 0b06 	vldr	d0, [r7, #24]
 802d350:	f7f9 fce2 	bl	8026d18 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 802d354:	697a      	ldr	r2, [r7, #20]
 802d356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d358:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 802d35a:	e0ac      	b.n	802d4b6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 802d35c:	f3af 8000 	nop.w
 802d360:	00140014 	.word	0x00140014
 802d364:	3f240014 	.word	0x3f240014
 802d368:	08034d70 	.word	0x08034d70
 802d36c:	08034d74 	.word	0x08034d74
 802d370:	08034cc4 	.word	0x08034cc4
 802d374:	08034d54 	.word	0x08034d54
 802d378:	38000000 	.word	0x38000000
 802d37c:	3303126f 	.word	0x3303126f
 802d380:	08034db0 	.word	0x08034db0
 802d384:	08034dbc 	.word	0x08034dbc
 802d388:	08034d90 	.word	0x08034d90
 802d38c:	08034df0 	.word	0x08034df0
 802d390:	08034dfc 	.word	0x08034dfc
 802d394:	08034dd4 	.word	0x08034dd4
 802d398:	ffff8000 	.word	0xffff8000
 802d39c:	08034e08 	.word	0x08034e08
 802d3a0:	37800000 	.word	0x37800000
 802d3a4:	3283126f 	.word	0x3283126f
 802d3a8:	3ef00000 	.word	0x3ef00000
 802d3ac:	08034e10 	.word	0x08034e10
 802d3b0:	08034e1c 	.word	0x08034e1c
 802d3b4:	08034e2c 	.word	0x08034e2c
 802d3b8:	3b800000 	.word	0x3b800000
 802d3bc:	08034e4c 	.word	0x08034e4c
 802d3c0:	08034e34 	.word	0x08034e34
          static_cast<double>(params->beta),
 802d3c4:	683b      	ldr	r3, [r7, #0]
 802d3c6:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 802d3c8:	4618      	mov	r0, r3
 802d3ca:	f7d3 f8c7 	bl	800055c <__aeabi_f2d>
 802d3ce:	4680      	mov	r8, r0
 802d3d0:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 802d3d2:	68bb      	ldr	r3, [r7, #8]
 802d3d4:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 802d3d6:	4618      	mov	r0, r3
 802d3d8:	f7d3 f8c0 	bl	800055c <__aeabi_f2d>
 802d3dc:	4682      	mov	sl, r0
 802d3de:	468b      	mov	fp, r1
 802d3e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d3e2:	3308      	adds	r3, #8
 802d3e4:	f107 0210 	add.w	r2, r7, #16
 802d3e8:	4619      	mov	r1, r3
 802d3ea:	2005      	movs	r0, #5
 802d3ec:	ec4b ab11 	vmov	d1, sl, fp
 802d3f0:	ec49 8b10 	vmov	d0, r8, r9
 802d3f4:	f7f9 fd5c 	bl	8026eb0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 802d3f8:	693a      	ldr	r2, [r7, #16]
 802d3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d3fc:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 802d3fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d400:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 802d402:	221f      	movs	r2, #31
 802d404:	4619      	mov	r1, r3
 802d406:	2005      	movs	r0, #5
 802d408:	f7f9 fd9a 	bl	8026f40 <_ZN6tflite20CalculateInputRadiusEiii>
 802d40c:	4603      	mov	r3, r0
 802d40e:	4618      	mov	r0, r3
 802d410:	f7d3 f892 	bl	8000538 <__aeabi_i2d>
 802d414:	4602      	mov	r2, r0
 802d416:	460b      	mov	r3, r1
 802d418:	4614      	mov	r4, r2
 802d41a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 802d41e:	4620      	mov	r0, r4
 802d420:	4629      	mov	r1, r5
 802d422:	f7d3 fba3 	bl	8000b6c <__aeabi_d2iz>
 802d426:	4602      	mov	r2, r0
 802d428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802d42a:	619a      	str	r2, [r3, #24]
    }
 802d42c:	e043      	b.n	802d4b6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 802d42e:	68bb      	ldr	r3, [r7, #8]
 802d430:	781b      	ldrb	r3, [r3, #0]
 802d432:	2b01      	cmp	r3, #1
 802d434:	d018      	beq.n	802d468 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 802d436:	68fb      	ldr	r3, [r7, #12]
 802d438:	695c      	ldr	r4, [r3, #20]
 802d43a:	68bb      	ldr	r3, [r7, #8]
 802d43c:	781b      	ldrb	r3, [r3, #0]
 802d43e:	4618      	mov	r0, r3
 802d440:	f7f9 fbe4 	bl	8026c0c <TfLiteTypeGetName>
 802d444:	4605      	mov	r5, r0
 802d446:	2001      	movs	r0, #1
 802d448:	f7f9 fbe0 	bl	8026c0c <TfLiteTypeGetName>
 802d44c:	4603      	mov	r3, r0
 802d44e:	9303      	str	r3, [sp, #12]
 802d450:	9502      	str	r5, [sp, #8]
 802d452:	4b1c      	ldr	r3, [pc, #112]	; (802d4c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 802d454:	9301      	str	r3, [sp, #4]
 802d456:	4b1c      	ldr	r3, [pc, #112]	; (802d4c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 802d458:	9300      	str	r3, [sp, #0]
 802d45a:	234e      	movs	r3, #78	; 0x4e
 802d45c:	4a1b      	ldr	r2, [pc, #108]	; (802d4cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 802d45e:	491c      	ldr	r1, [pc, #112]	; (802d4d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 802d460:	68f8      	ldr	r0, [r7, #12]
 802d462:	47a0      	blx	r4
 802d464:	2301      	movs	r3, #1
 802d466:	e027      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 802d468:	687b      	ldr	r3, [r7, #4]
 802d46a:	781b      	ldrb	r3, [r3, #0]
 802d46c:	2b01      	cmp	r3, #1
 802d46e:	d018      	beq.n	802d4a2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 802d470:	68fb      	ldr	r3, [r7, #12]
 802d472:	695c      	ldr	r4, [r3, #20]
 802d474:	687b      	ldr	r3, [r7, #4]
 802d476:	781b      	ldrb	r3, [r3, #0]
 802d478:	4618      	mov	r0, r3
 802d47a:	f7f9 fbc7 	bl	8026c0c <TfLiteTypeGetName>
 802d47e:	4605      	mov	r5, r0
 802d480:	2001      	movs	r0, #1
 802d482:	f7f9 fbc3 	bl	8026c0c <TfLiteTypeGetName>
 802d486:	4603      	mov	r3, r0
 802d488:	9303      	str	r3, [sp, #12]
 802d48a:	9502      	str	r5, [sp, #8]
 802d48c:	4b0d      	ldr	r3, [pc, #52]	; (802d4c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 802d48e:	9301      	str	r3, [sp, #4]
 802d490:	4b10      	ldr	r3, [pc, #64]	; (802d4d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 802d492:	9300      	str	r3, [sp, #0]
 802d494:	234f      	movs	r3, #79	; 0x4f
 802d496:	4a0d      	ldr	r2, [pc, #52]	; (802d4cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 802d498:	490d      	ldr	r1, [pc, #52]	; (802d4d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 802d49a:	68f8      	ldr	r0, [r7, #12]
 802d49c:	47a0      	blx	r4
 802d49e:	2301      	movs	r3, #1
 802d4a0:	e00a      	b.n	802d4b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 802d4a2:	683b      	ldr	r3, [r7, #0]
 802d4a4:	681b      	ldr	r3, [r3, #0]
 802d4a6:	4618      	mov	r0, r3
 802d4a8:	f7d3 f858 	bl	800055c <__aeabi_f2d>
 802d4ac:	4602      	mov	r2, r0
 802d4ae:	460b      	mov	r3, r1
 802d4b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802d4b2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 802d4b6:	2300      	movs	r3, #0
}
 802d4b8:	4618      	mov	r0, r3
 802d4ba:	3728      	adds	r7, #40	; 0x28
 802d4bc:	46bd      	mov	sp, r7
 802d4be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802d4c2:	bf00      	nop
 802d4c4:	08034e70 	.word	0x08034e70
 802d4c8:	08034dfc 	.word	0x08034dfc
 802d4cc:	08034cc4 	.word	0x08034cc4
 802d4d0:	08034dd4 	.word	0x08034dd4
 802d4d4:	08034e1c 	.word	0x08034e1c

0802d4d8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 802d4d8:	b580      	push	{r7, lr}
 802d4da:	b084      	sub	sp, #16
 802d4dc:	af00      	add	r7, sp, #0
 802d4de:	60f8      	str	r0, [r7, #12]
 802d4e0:	60b9      	str	r1, [r7, #8]
 802d4e2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802d4e4:	68fb      	ldr	r3, [r7, #12]
 802d4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d4e8:	2b00      	cmp	r3, #0
 802d4ea:	d101      	bne.n	802d4f0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 802d4ec:	f003 ff32 	bl	8031354 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 802d4f0:	68fb      	ldr	r3, [r7, #12]
 802d4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d4f4:	2138      	movs	r1, #56	; 0x38
 802d4f6:	68f8      	ldr	r0, [r7, #12]
 802d4f8:	4798      	blx	r3
 802d4fa:	4603      	mov	r3, r0
}
 802d4fc:	4618      	mov	r0, r3
 802d4fe:	3710      	adds	r7, #16
 802d500:	46bd      	mov	sp, r7
 802d502:	bd80      	pop	{r7, pc}

0802d504 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 802d504:	b580      	push	{r7, lr}
 802d506:	b082      	sub	sp, #8
 802d508:	af00      	add	r7, sp, #0
 802d50a:	6078      	str	r0, [r7, #4]
 802d50c:	ed87 0a00 	vstr	s0, [r7]
 802d510:	ed97 0a00 	vldr	s0, [r7]
 802d514:	f7d4 f961 	bl	80017da <_ZSt3expf>
 802d518:	eef0 7a40 	vmov.f32	s15, s0
 802d51c:	eeb0 0a67 	vmov.f32	s0, s15
 802d520:	3708      	adds	r7, #8
 802d522:	46bd      	mov	sp, r7
 802d524:	bd80      	pop	{r7, pc}

0802d526 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 802d526:	b580      	push	{r7, lr}
 802d528:	b082      	sub	sp, #8
 802d52a:	af00      	add	r7, sp, #0
 802d52c:	ed87 0a01 	vstr	s0, [r7, #4]
 802d530:	ed97 0a01 	vldr	s0, [r7, #4]
 802d534:	2000      	movs	r0, #0
 802d536:	f7ff ffe5 	bl	802d504 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 802d53a:	eef0 7a40 	vmov.f32	s15, s0
 802d53e:	eeb0 0a67 	vmov.f32	s0, s15
 802d542:	3708      	adds	r7, #8
 802d544:	46bd      	mov	sp, r7
 802d546:	bd80      	pop	{r7, pc}

0802d548 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 802d548:	b480      	push	{r7}
 802d54a:	b083      	sub	sp, #12
 802d54c:	af00      	add	r7, sp, #0
 802d54e:	6078      	str	r0, [r7, #4]
 802d550:	4b03      	ldr	r3, [pc, #12]	; (802d560 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 802d552:	4618      	mov	r0, r3
 802d554:	370c      	adds	r7, #12
 802d556:	46bd      	mov	sp, r7
 802d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d55c:	4770      	bx	lr
 802d55e:	bf00      	nop
 802d560:	0802d527 	.word	0x0802d527

0802d564 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 802d564:	b480      	push	{r7}
 802d566:	b083      	sub	sp, #12
 802d568:	af00      	add	r7, sp, #0
 802d56a:	6078      	str	r0, [r7, #4]
 802d56c:	ed87 0a00 	vstr	s0, [r7]
 802d570:	edd7 7a00 	vldr	s15, [r7]
 802d574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d578:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d57c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d580:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802d584:	eef0 7a66 	vmov.f32	s15, s13
 802d588:	eeb0 0a67 	vmov.f32	s0, s15
 802d58c:	370c      	adds	r7, #12
 802d58e:	46bd      	mov	sp, r7
 802d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d594:	4770      	bx	lr

0802d596 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 802d596:	b580      	push	{r7, lr}
 802d598:	b082      	sub	sp, #8
 802d59a:	af00      	add	r7, sp, #0
 802d59c:	ed87 0a01 	vstr	s0, [r7, #4]
 802d5a0:	ed97 0a01 	vldr	s0, [r7, #4]
 802d5a4:	2000      	movs	r0, #0
 802d5a6:	f7ff ffdd 	bl	802d564 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 802d5aa:	eef0 7a40 	vmov.f32	s15, s0
 802d5ae:	eeb0 0a67 	vmov.f32	s0, s15
 802d5b2:	3708      	adds	r7, #8
 802d5b4:	46bd      	mov	sp, r7
 802d5b6:	bd80      	pop	{r7, pc}

0802d5b8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 802d5b8:	b480      	push	{r7}
 802d5ba:	b083      	sub	sp, #12
 802d5bc:	af00      	add	r7, sp, #0
 802d5be:	6078      	str	r0, [r7, #4]
 802d5c0:	4b03      	ldr	r3, [pc, #12]	; (802d5d0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 802d5c2:	4618      	mov	r0, r3
 802d5c4:	370c      	adds	r7, #12
 802d5c6:	46bd      	mov	sp, r7
 802d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5cc:	4770      	bx	lr
 802d5ce:	bf00      	nop
 802d5d0:	0802d597 	.word	0x0802d597

0802d5d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 802d5d4:	b590      	push	{r4, r7, lr}
 802d5d6:	b08f      	sub	sp, #60	; 0x3c
 802d5d8:	af04      	add	r7, sp, #16
 802d5da:	6078      	str	r0, [r7, #4]
 802d5dc:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 802d5de:	6838      	ldr	r0, [r7, #0]
 802d5e0:	f7fb fd06 	bl	8028ff0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802d5e4:	4603      	mov	r3, r0
 802d5e6:	2b01      	cmp	r3, #1
 802d5e8:	bf14      	ite	ne
 802d5ea:	2301      	movne	r3, #1
 802d5ec:	2300      	moveq	r3, #0
 802d5ee:	b2db      	uxtb	r3, r3
 802d5f0:	2b00      	cmp	r3, #0
 802d5f2:	d013      	beq.n	802d61c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 802d5f4:	687b      	ldr	r3, [r7, #4]
 802d5f6:	695c      	ldr	r4, [r3, #20]
 802d5f8:	6838      	ldr	r0, [r7, #0]
 802d5fa:	f7fb fcf9 	bl	8028ff0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802d5fe:	4603      	mov	r3, r0
 802d600:	2201      	movs	r2, #1
 802d602:	9203      	str	r2, [sp, #12]
 802d604:	9302      	str	r3, [sp, #8]
 802d606:	4b7c      	ldr	r3, [pc, #496]	; (802d7f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 802d608:	9301      	str	r3, [sp, #4]
 802d60a:	4b7c      	ldr	r3, [pc, #496]	; (802d7fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 802d60c:	9300      	str	r3, [sp, #0]
 802d60e:	235d      	movs	r3, #93	; 0x5d
 802d610:	4a7b      	ldr	r2, [pc, #492]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d612:	497c      	ldr	r1, [pc, #496]	; (802d804 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802d614:	6878      	ldr	r0, [r7, #4]
 802d616:	47a0      	blx	r4
 802d618:	2301      	movs	r3, #1
 802d61a:	e146      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 802d61c:	6838      	ldr	r0, [r7, #0]
 802d61e:	f7fb fcf4 	bl	802900a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802d622:	4603      	mov	r3, r0
 802d624:	2b01      	cmp	r3, #1
 802d626:	bf14      	ite	ne
 802d628:	2301      	movne	r3, #1
 802d62a:	2300      	moveq	r3, #0
 802d62c:	b2db      	uxtb	r3, r3
 802d62e:	2b00      	cmp	r3, #0
 802d630:	d013      	beq.n	802d65a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 802d632:	687b      	ldr	r3, [r7, #4]
 802d634:	695c      	ldr	r4, [r3, #20]
 802d636:	6838      	ldr	r0, [r7, #0]
 802d638:	f7fb fce7 	bl	802900a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802d63c:	4603      	mov	r3, r0
 802d63e:	2201      	movs	r2, #1
 802d640:	9203      	str	r2, [sp, #12]
 802d642:	9302      	str	r3, [sp, #8]
 802d644:	4b6c      	ldr	r3, [pc, #432]	; (802d7f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 802d646:	9301      	str	r3, [sp, #4]
 802d648:	4b6f      	ldr	r3, [pc, #444]	; (802d808 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 802d64a:	9300      	str	r3, [sp, #0]
 802d64c:	235e      	movs	r3, #94	; 0x5e
 802d64e:	4a6c      	ldr	r2, [pc, #432]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d650:	496c      	ldr	r1, [pc, #432]	; (802d804 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802d652:	6878      	ldr	r0, [r7, #4]
 802d654:	47a0      	blx	r4
 802d656:	2301      	movs	r3, #1
 802d658:	e127      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 802d65a:	2200      	movs	r2, #0
 802d65c:	6839      	ldr	r1, [r7, #0]
 802d65e:	6878      	ldr	r0, [r7, #4]
 802d660:	f7f9 fe1a 	bl	8027298 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802d664:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 802d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d668:	2b00      	cmp	r3, #0
 802d66a:	d10a      	bne.n	802d682 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 802d66c:	687b      	ldr	r3, [r7, #4]
 802d66e:	695c      	ldr	r4, [r3, #20]
 802d670:	4b66      	ldr	r3, [pc, #408]	; (802d80c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 802d672:	9300      	str	r3, [sp, #0]
 802d674:	2360      	movs	r3, #96	; 0x60
 802d676:	4a62      	ldr	r2, [pc, #392]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d678:	4965      	ldr	r1, [pc, #404]	; (802d810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802d67a:	6878      	ldr	r0, [r7, #4]
 802d67c:	47a0      	blx	r4
 802d67e:	2301      	movs	r3, #1
 802d680:	e113      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 802d682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802d684:	f7f9 fd35 	bl	80270f2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 802d688:	4603      	mov	r3, r0
 802d68a:	2b00      	cmp	r3, #0
 802d68c:	bfd4      	ite	le
 802d68e:	2301      	movle	r3, #1
 802d690:	2300      	movgt	r3, #0
 802d692:	b2db      	uxtb	r3, r3
 802d694:	2b00      	cmp	r3, #0
 802d696:	d00a      	beq.n	802d6ae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 802d698:	687b      	ldr	r3, [r7, #4]
 802d69a:	695c      	ldr	r4, [r3, #20]
 802d69c:	4b5d      	ldr	r3, [pc, #372]	; (802d814 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802d69e:	9300      	str	r3, [sp, #0]
 802d6a0:	2361      	movs	r3, #97	; 0x61
 802d6a2:	4a57      	ldr	r2, [pc, #348]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d6a4:	495a      	ldr	r1, [pc, #360]	; (802d810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802d6a6:	6878      	ldr	r0, [r7, #4]
 802d6a8:	47a0      	blx	r4
 802d6aa:	2301      	movs	r3, #1
 802d6ac:	e0fd      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 802d6ae:	2200      	movs	r2, #0
 802d6b0:	6839      	ldr	r1, [r7, #0]
 802d6b2:	6878      	ldr	r0, [r7, #4]
 802d6b4:	f7f9 fe00 	bl	80272b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802d6b8:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 802d6ba:	6a3b      	ldr	r3, [r7, #32]
 802d6bc:	2b00      	cmp	r3, #0
 802d6be:	d10a      	bne.n	802d6d6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 802d6c0:	687b      	ldr	r3, [r7, #4]
 802d6c2:	695c      	ldr	r4, [r3, #20]
 802d6c4:	4b54      	ldr	r3, [pc, #336]	; (802d818 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802d6c6:	9300      	str	r3, [sp, #0]
 802d6c8:	2363      	movs	r3, #99	; 0x63
 802d6ca:	4a4d      	ldr	r2, [pc, #308]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d6cc:	4950      	ldr	r1, [pc, #320]	; (802d810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802d6ce:	6878      	ldr	r0, [r7, #4]
 802d6d0:	47a0      	blx	r4
 802d6d2:	2301      	movs	r3, #1
 802d6d4:	e0e9      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 802d6d6:	683b      	ldr	r3, [r7, #0]
 802d6d8:	691b      	ldr	r3, [r3, #16]
 802d6da:	2b00      	cmp	r3, #0
 802d6dc:	d10a      	bne.n	802d6f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 802d6de:	687b      	ldr	r3, [r7, #4]
 802d6e0:	695c      	ldr	r4, [r3, #20]
 802d6e2:	4b4e      	ldr	r3, [pc, #312]	; (802d81c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 802d6e4:	9300      	str	r3, [sp, #0]
 802d6e6:	2365      	movs	r3, #101	; 0x65
 802d6e8:	4a45      	ldr	r2, [pc, #276]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d6ea:	4949      	ldr	r1, [pc, #292]	; (802d810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802d6ec:	6878      	ldr	r0, [r7, #4]
 802d6ee:	47a0      	blx	r4
 802d6f0:	2301      	movs	r3, #1
 802d6f2:	e0da      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 802d6f4:	683b      	ldr	r3, [r7, #0]
 802d6f6:	691b      	ldr	r3, [r3, #16]
 802d6f8:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 802d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d6fc:	781b      	ldrb	r3, [r3, #0]
 802d6fe:	2b07      	cmp	r3, #7
 802d700:	d12f      	bne.n	802d762 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 802d702:	687b      	ldr	r3, [r7, #4]
 802d704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d706:	f240 4102 	movw	r1, #1026	; 0x402
 802d70a:	6878      	ldr	r0, [r7, #4]
 802d70c:	4798      	blx	r3
 802d70e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 802d710:	69bb      	ldr	r3, [r7, #24]
 802d712:	2b00      	cmp	r3, #0
 802d714:	d10a      	bne.n	802d72c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 802d716:	687b      	ldr	r3, [r7, #4]
 802d718:	695c      	ldr	r4, [r3, #20]
 802d71a:	4b41      	ldr	r3, [pc, #260]	; (802d820 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 802d71c:	9300      	str	r3, [sp, #0]
 802d71e:	236b      	movs	r3, #107	; 0x6b
 802d720:	4a37      	ldr	r2, [pc, #220]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d722:	493b      	ldr	r1, [pc, #236]	; (802d810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802d724:	6878      	ldr	r0, [r7, #4]
 802d726:	47a0      	blx	r4
 802d728:	2301      	movs	r3, #1
 802d72a:	e0be      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 802d72c:	69fb      	ldr	r3, [r7, #28]
 802d72e:	69ba      	ldr	r2, [r7, #24]
 802d730:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 802d732:	687b      	ldr	r3, [r7, #4]
 802d734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d736:	f240 4102 	movw	r1, #1026	; 0x402
 802d73a:	6878      	ldr	r0, [r7, #4]
 802d73c:	4798      	blx	r3
 802d73e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 802d740:	697b      	ldr	r3, [r7, #20]
 802d742:	2b00      	cmp	r3, #0
 802d744:	d10a      	bne.n	802d75c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 802d746:	687b      	ldr	r3, [r7, #4]
 802d748:	695c      	ldr	r4, [r3, #20]
 802d74a:	4b36      	ldr	r3, [pc, #216]	; (802d824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 802d74c:	9300      	str	r3, [sp, #0]
 802d74e:	236f      	movs	r3, #111	; 0x6f
 802d750:	4a2b      	ldr	r2, [pc, #172]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d752:	492f      	ldr	r1, [pc, #188]	; (802d810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802d754:	6878      	ldr	r0, [r7, #4]
 802d756:	47a0      	blx	r4
 802d758:	2301      	movs	r3, #1
 802d75a:	e0a6      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 802d75c:	69fb      	ldr	r3, [r7, #28]
 802d75e:	697a      	ldr	r2, [r7, #20]
 802d760:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 802d762:	6a3b      	ldr	r3, [r7, #32]
 802d764:	781b      	ldrb	r3, [r3, #0]
 802d766:	2b07      	cmp	r3, #7
 802d768:	d112      	bne.n	802d790 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 802d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d76c:	781b      	ldrb	r3, [r3, #0]
 802d76e:	2b09      	cmp	r3, #9
 802d770:	d028      	beq.n	802d7c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 802d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d774:	781b      	ldrb	r3, [r3, #0]
 802d776:	2b07      	cmp	r3, #7
 802d778:	d024      	beq.n	802d7c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 802d77a:	687b      	ldr	r3, [r7, #4]
 802d77c:	695c      	ldr	r4, [r3, #20]
 802d77e:	4b2a      	ldr	r3, [pc, #168]	; (802d828 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 802d780:	9300      	str	r3, [sp, #0]
 802d782:	2375      	movs	r3, #117	; 0x75
 802d784:	4a1e      	ldr	r2, [pc, #120]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d786:	4922      	ldr	r1, [pc, #136]	; (802d810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802d788:	6878      	ldr	r0, [r7, #4]
 802d78a:	47a0      	blx	r4
 802d78c:	2301      	movs	r3, #1
 802d78e:	e08c      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 802d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d792:	781a      	ldrb	r2, [r3, #0]
 802d794:	6a3b      	ldr	r3, [r7, #32]
 802d796:	781b      	ldrb	r3, [r3, #0]
 802d798:	429a      	cmp	r2, r3
 802d79a:	d013      	beq.n	802d7c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 802d79c:	687b      	ldr	r3, [r7, #4]
 802d79e:	695c      	ldr	r4, [r3, #20]
 802d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d7a2:	781b      	ldrb	r3, [r3, #0]
 802d7a4:	461a      	mov	r2, r3
 802d7a6:	6a3b      	ldr	r3, [r7, #32]
 802d7a8:	781b      	ldrb	r3, [r3, #0]
 802d7aa:	9303      	str	r3, [sp, #12]
 802d7ac:	9202      	str	r2, [sp, #8]
 802d7ae:	4b1f      	ldr	r3, [pc, #124]	; (802d82c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 802d7b0:	9301      	str	r3, [sp, #4]
 802d7b2:	4b1f      	ldr	r3, [pc, #124]	; (802d830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 802d7b4:	9300      	str	r3, [sp, #0]
 802d7b6:	2378      	movs	r3, #120	; 0x78
 802d7b8:	4a11      	ldr	r2, [pc, #68]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d7ba:	4912      	ldr	r1, [pc, #72]	; (802d804 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802d7bc:	6878      	ldr	r0, [r7, #4]
 802d7be:	47a0      	blx	r4
 802d7c0:	2301      	movs	r3, #1
 802d7c2:	e072      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 802d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d7c6:	781b      	ldrb	r3, [r3, #0]
 802d7c8:	2b07      	cmp	r3, #7
 802d7ca:	d161      	bne.n	802d890 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 802d7cc:	6a3b      	ldr	r3, [r7, #32]
 802d7ce:	691b      	ldr	r3, [r3, #16]
 802d7d0:	2b00      	cmp	r3, #0
 802d7d2:	d035      	beq.n	802d840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 802d7d4:	687b      	ldr	r3, [r7, #4]
 802d7d6:	695c      	ldr	r4, [r3, #20]
 802d7d8:	6a3b      	ldr	r3, [r7, #32]
 802d7da:	691b      	ldr	r3, [r3, #16]
 802d7dc:	2200      	movs	r2, #0
 802d7de:	9203      	str	r2, [sp, #12]
 802d7e0:	9302      	str	r3, [sp, #8]
 802d7e2:	4b14      	ldr	r3, [pc, #80]	; (802d834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 802d7e4:	9301      	str	r3, [sp, #4]
 802d7e6:	4b14      	ldr	r3, [pc, #80]	; (802d838 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 802d7e8:	9300      	str	r3, [sp, #0]
 802d7ea:	237d      	movs	r3, #125	; 0x7d
 802d7ec:	4a04      	ldr	r2, [pc, #16]	; (802d800 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802d7ee:	4905      	ldr	r1, [pc, #20]	; (802d804 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802d7f0:	6878      	ldr	r0, [r7, #4]
 802d7f2:	47a0      	blx	r4
 802d7f4:	2301      	movs	r3, #1
 802d7f6:	e058      	b.n	802d8aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 802d7f8:	08034e80 	.word	0x08034e80
 802d7fc:	08034e84 	.word	0x08034e84
 802d800:	08034cc4 	.word	0x08034cc4
 802d804:	08034d54 	.word	0x08034d54
 802d808:	08034e94 	.word	0x08034e94
 802d80c:	08034ea8 	.word	0x08034ea8
 802d810:	08034e34 	.word	0x08034e34
 802d814:	08034ebc 	.word	0x08034ebc
 802d818:	08034ed8 	.word	0x08034ed8
 802d81c:	08034eec 	.word	0x08034eec
 802d820:	08034f08 	.word	0x08034f08
 802d824:	08034f20 	.word	0x08034f20
 802d828:	08034f44 	.word	0x08034f44
 802d82c:	08034e1c 	.word	0x08034e1c
 802d830:	08034dfc 	.word	0x08034dfc
 802d834:	08034d70 	.word	0x08034d70
 802d838:	08034d74 	.word	0x08034d74
 802d83c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 802d840:	f107 0308 	add.w	r3, r7, #8
 802d844:	4618      	mov	r0, r3
 802d846:	f7ff fe7f 	bl	802d548 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 802d84a:	69fb      	ldr	r3, [r7, #28]
 802d84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d84e:	f240 2201 	movw	r2, #513	; 0x201
 802d852:	4619      	mov	r1, r3
 802d854:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 802d83c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 802d858:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 802d85c:	f7ff faf2 	bl	802ce44 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 802d860:	f107 030c 	add.w	r3, r7, #12
 802d864:	4618      	mov	r0, r3
 802d866:	f7ff fea7 	bl	802d5b8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 802d86a:	69fb      	ldr	r3, [r7, #28]
 802d86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d86e:	f240 2201 	movw	r2, #513	; 0x201
 802d872:	4619      	mov	r1, r3
 802d874:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 802d878:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 802d83c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 802d87c:	f7ff fae2 	bl	802ce44 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 802d880:	6a3b      	ldr	r3, [r7, #32]
 802d882:	691a      	ldr	r2, [r3, #16]
 802d884:	69fb      	ldr	r3, [r7, #28]
 802d886:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 802d888:	6a3b      	ldr	r3, [r7, #32]
 802d88a:	68da      	ldr	r2, [r3, #12]
 802d88c:	69fb      	ldr	r3, [r7, #28]
 802d88e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 802d890:	683b      	ldr	r3, [r7, #0]
 802d892:	695b      	ldr	r3, [r3, #20]
 802d894:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 802d896:	69fb      	ldr	r3, [r7, #28]
 802d898:	9300      	str	r3, [sp, #0]
 802d89a:	693b      	ldr	r3, [r7, #16]
 802d89c:	6a3a      	ldr	r2, [r7, #32]
 802d89e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802d8a0:	6878      	ldr	r0, [r7, #4]
 802d8a2:	f7ff fbfd 	bl	802d0a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 802d8a6:	4603      	mov	r3, r0
 802d8a8:	bf00      	nop
}
 802d8aa:	4618      	mov	r0, r3
 802d8ac:	372c      	adds	r7, #44	; 0x2c
 802d8ae:	46bd      	mov	sp, r7
 802d8b0:	bd90      	pop	{r4, r7, pc}
 802d8b2:	bf00      	nop

0802d8b4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 802d8b4:	b580      	push	{r7, lr}
 802d8b6:	b084      	sub	sp, #16
 802d8b8:	af00      	add	r7, sp, #0
 802d8ba:	6078      	str	r0, [r7, #4]
 802d8bc:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 802d8be:	4b21      	ldr	r3, [pc, #132]	; (802d944 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802d8c0:	681a      	ldr	r2, [r3, #0]
 802d8c2:	683b      	ldr	r3, [r7, #0]
 802d8c4:	425b      	negs	r3, r3
 802d8c6:	441a      	add	r2, r3
 802d8c8:	4b1f      	ldr	r3, [pc, #124]	; (802d948 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 802d8ca:	681b      	ldr	r3, [r3, #0]
 802d8cc:	429a      	cmp	r2, r3
 802d8ce:	d224      	bcs.n	802d91a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 802d8d0:	4b1e      	ldr	r3, [pc, #120]	; (802d94c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 802d8d2:	681b      	ldr	r3, [r3, #0]
 802d8d4:	2b09      	cmp	r3, #9
 802d8d6:	d906      	bls.n	802d8e6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 802d8d8:	683b      	ldr	r3, [r7, #0]
 802d8da:	4619      	mov	r1, r3
 802d8dc:	481c      	ldr	r0, [pc, #112]	; (802d950 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 802d8de:	f7d7 ffda 	bl	8005896 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 802d8e2:	2300      	movs	r3, #0
 802d8e4:	e029      	b.n	802d93a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 802d8e6:	2101      	movs	r1, #1
 802d8e8:	6838      	ldr	r0, [r7, #0]
 802d8ea:	f7f9 f959 	bl	8026ba0 <_Z9ei_callocjj>
 802d8ee:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 802d8f0:	68fb      	ldr	r3, [r7, #12]
 802d8f2:	2b00      	cmp	r3, #0
 802d8f4:	d106      	bne.n	802d904 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 802d8f6:	683b      	ldr	r3, [r7, #0]
 802d8f8:	4619      	mov	r1, r3
 802d8fa:	4816      	ldr	r0, [pc, #88]	; (802d954 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 802d8fc:	f7d7 ffcb 	bl	8005896 <_Z9ei_printfPKcz>
      return NULL;
 802d900:	2300      	movs	r3, #0
 802d902:	e01a      	b.n	802d93a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 802d904:	4b11      	ldr	r3, [pc, #68]	; (802d94c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 802d906:	681b      	ldr	r3, [r3, #0]
 802d908:	1c5a      	adds	r2, r3, #1
 802d90a:	4910      	ldr	r1, [pc, #64]	; (802d94c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 802d90c:	600a      	str	r2, [r1, #0]
 802d90e:	4912      	ldr	r1, [pc, #72]	; (802d958 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 802d910:	68fa      	ldr	r2, [r7, #12]
 802d912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 802d916:	68fb      	ldr	r3, [r7, #12]
 802d918:	e00f      	b.n	802d93a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 802d91a:	4b0a      	ldr	r3, [pc, #40]	; (802d944 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802d91c:	681a      	ldr	r2, [r3, #0]
 802d91e:	683b      	ldr	r3, [r7, #0]
 802d920:	425b      	negs	r3, r3
 802d922:	4413      	add	r3, r2
 802d924:	4a07      	ldr	r2, [pc, #28]	; (802d944 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802d926:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 802d928:	4b06      	ldr	r3, [pc, #24]	; (802d944 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802d92a:	681b      	ldr	r3, [r3, #0]
 802d92c:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 802d92e:	683a      	ldr	r2, [r7, #0]
 802d930:	2100      	movs	r1, #0
 802d932:	68f8      	ldr	r0, [r7, #12]
 802d934:	f003 fdb4 	bl	80314a0 <memset>

  return ptr;
 802d938:	68fb      	ldr	r3, [r7, #12]
}
 802d93a:	4618      	mov	r0, r3
 802d93c:	3710      	adds	r7, #16
 802d93e:	46bd      	mov	sp, r7
 802d940:	bd80      	pop	{r7, pc}
 802d942:	bf00      	nop
 802d944:	20000908 	.word	0x20000908
 802d948:	20000904 	.word	0x20000904
 802d94c:	2000128c 	.word	0x2000128c
 802d950:	08034f94 	.word	0x08034f94
 802d954:	08035014 	.word	0x08035014
 802d958:	20001264 	.word	0x20001264

0802d95c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 802d95c:	b580      	push	{r7, lr}
 802d95e:	b086      	sub	sp, #24
 802d960:	af00      	add	r7, sp, #0
 802d962:	60f8      	str	r0, [r7, #12]
 802d964:	60b9      	str	r1, [r7, #8]
 802d966:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 802d968:	4b1b      	ldr	r3, [pc, #108]	; (802d9d8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802d96a:	681b      	ldr	r3, [r3, #0]
 802d96c:	2b03      	cmp	r3, #3
 802d96e:	d906      	bls.n	802d97e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 802d970:	68bb      	ldr	r3, [r7, #8]
 802d972:	4619      	mov	r1, r3
 802d974:	4819      	ldr	r0, [pc, #100]	; (802d9dc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 802d976:	f7d7 ff8e 	bl	8005896 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 802d97a:	2301      	movs	r3, #1
 802d97c:	e028      	b.n	802d9d0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 802d97e:	68bb      	ldr	r3, [r7, #8]
 802d980:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 802d982:	693b      	ldr	r3, [r7, #16]
 802d984:	4619      	mov	r1, r3
 802d986:	68f8      	ldr	r0, [r7, #12]
 802d988:	f7ff ff94 	bl	802d8b4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 802d98c:	4603      	mov	r3, r0
 802d98e:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 802d990:	697b      	ldr	r3, [r7, #20]
 802d992:	2b00      	cmp	r3, #0
 802d994:	d106      	bne.n	802d9a4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 802d996:	68bb      	ldr	r3, [r7, #8]
 802d998:	4619      	mov	r1, r3
 802d99a:	4811      	ldr	r0, [pc, #68]	; (802d9e0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 802d99c:	f7d7 ff7b 	bl	8005896 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 802d9a0:	2301      	movs	r3, #1
 802d9a2:	e015      	b.n	802d9d0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 802d9a4:	4b0c      	ldr	r3, [pc, #48]	; (802d9d8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802d9a6:	681b      	ldr	r3, [r3, #0]
 802d9a8:	4a0e      	ldr	r2, [pc, #56]	; (802d9e4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 802d9aa:	00db      	lsls	r3, r3, #3
 802d9ac:	4413      	add	r3, r2
 802d9ae:	f107 0210 	add.w	r2, r7, #16
 802d9b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 802d9b6:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 802d9ba:	4b07      	ldr	r3, [pc, #28]	; (802d9d8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802d9bc:	681b      	ldr	r3, [r3, #0]
 802d9be:	461a      	mov	r2, r3
 802d9c0:	687b      	ldr	r3, [r7, #4]
 802d9c2:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 802d9c4:	4b04      	ldr	r3, [pc, #16]	; (802d9d8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802d9c6:	681b      	ldr	r3, [r3, #0]
 802d9c8:	3301      	adds	r3, #1
 802d9ca:	4a03      	ldr	r2, [pc, #12]	; (802d9d8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802d9cc:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 802d9ce:	2300      	movs	r3, #0
}
 802d9d0:	4618      	mov	r0, r3
 802d9d2:	3718      	adds	r7, #24
 802d9d4:	46bd      	mov	sp, r7
 802d9d6:	bd80      	pop	{r7, pc}
 802d9d8:	200012b0 	.word	0x200012b0
 802d9dc:	0803504c 	.word	0x0803504c
 802d9e0:	080350a4 	.word	0x080350a4
 802d9e4:	20001290 	.word	0x20001290

0802d9e8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 802d9e8:	b480      	push	{r7}
 802d9ea:	b083      	sub	sp, #12
 802d9ec:	af00      	add	r7, sp, #0
 802d9ee:	6078      	str	r0, [r7, #4]
 802d9f0:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 802d9f2:	4b09      	ldr	r3, [pc, #36]	; (802da18 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 802d9f4:	681b      	ldr	r3, [r3, #0]
 802d9f6:	461a      	mov	r2, r3
 802d9f8:	683b      	ldr	r3, [r7, #0]
 802d9fa:	4293      	cmp	r3, r2
 802d9fc:	dd01      	ble.n	802da02 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 802d9fe:	2300      	movs	r3, #0
 802da00:	e004      	b.n	802da0c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 802da02:	4a06      	ldr	r2, [pc, #24]	; (802da1c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 802da04:	683b      	ldr	r3, [r7, #0]
 802da06:	00db      	lsls	r3, r3, #3
 802da08:	4413      	add	r3, r2
 802da0a:	685b      	ldr	r3, [r3, #4]
}
 802da0c:	4618      	mov	r0, r3
 802da0e:	370c      	adds	r7, #12
 802da10:	46bd      	mov	sp, r7
 802da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da16:	4770      	bx	lr
 802da18:	200012b0 	.word	0x200012b0
 802da1c:	20001290 	.word	0x20001290

0802da20 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 802da20:	b480      	push	{r7}
 802da22:	b083      	sub	sp, #12
 802da24:	af00      	add	r7, sp, #0
 802da26:	6078      	str	r0, [r7, #4]
 802da28:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 802da2a:	683b      	ldr	r3, [r7, #0]
 802da2c:	019b      	lsls	r3, r3, #6
 802da2e:	4a04      	ldr	r2, [pc, #16]	; (802da40 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 802da30:	4413      	add	r3, r2
}
 802da32:	4618      	mov	r0, r3
 802da34:	370c      	adds	r7, #12
 802da36:	46bd      	mov	sp, r7
 802da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da3c:	4770      	bx	lr
 802da3e:	bf00      	nop
 802da40:	20000964 	.word	0x20000964

0802da44 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 802da44:	b480      	push	{r7}
 802da46:	b083      	sub	sp, #12
 802da48:	af00      	add	r7, sp, #0
 802da4a:	6078      	str	r0, [r7, #4]
 802da4c:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 802da4e:	683a      	ldr	r2, [r7, #0]
 802da50:	4613      	mov	r3, r2
 802da52:	005b      	lsls	r3, r3, #1
 802da54:	4413      	add	r3, r2
 802da56:	009b      	lsls	r3, r3, #2
 802da58:	4a03      	ldr	r2, [pc, #12]	; (802da68 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 802da5a:	4413      	add	r3, r2
}
 802da5c:	4618      	mov	r0, r3
 802da5e:	370c      	adds	r7, #12
 802da60:	46bd      	mov	sp, r7
 802da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da66:	4770      	bx	lr
 802da68:	20000f24 	.word	0x20000f24

0802da6c <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 802da6c:	b5b0      	push	{r4, r5, r7, lr}
 802da6e:	b092      	sub	sp, #72	; 0x48
 802da70:	af00      	add	r7, sp, #0
 802da72:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 802da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da76:	f242 3150 	movw	r1, #9040	; 0x2350
 802da7a:	2010      	movs	r0, #16
 802da7c:	4798      	blx	r3
 802da7e:	4603      	mov	r3, r0
 802da80:	4aa3      	ldr	r2, [pc, #652]	; (802dd10 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802da82:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 802da84:	4ba2      	ldr	r3, [pc, #648]	; (802dd10 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802da86:	681b      	ldr	r3, [r3, #0]
 802da88:	2b00      	cmp	r3, #0
 802da8a:	d104      	bne.n	802da96 <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 802da8c:	48a1      	ldr	r0, [pc, #644]	; (802dd14 <_Z18trained_model_initPFPvjjE+0x2a8>)
 802da8e:	f7d7 ff02 	bl	8005896 <_Z9ei_printfPKcz>
    return kTfLiteError;
 802da92:	2301      	movs	r3, #1
 802da94:	e244      	b.n	802df20 <_Z18trained_model_initPFPvjjE+0x4b4>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 802da96:	4b9e      	ldr	r3, [pc, #632]	; (802dd10 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802da98:	681b      	ldr	r3, [r3, #0]
 802da9a:	4a9f      	ldr	r2, [pc, #636]	; (802dd18 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802da9c:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 802da9e:	4b9c      	ldr	r3, [pc, #624]	; (802dd10 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802daa0:	681b      	ldr	r3, [r3, #0]
 802daa2:	f503 530d 	add.w	r3, r3, #9024	; 0x2340
 802daa6:	3310      	adds	r3, #16
 802daa8:	4a9c      	ldr	r2, [pc, #624]	; (802dd1c <_Z18trained_model_initPFPvjjE+0x2b0>)
 802daaa:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 802daac:	4b9c      	ldr	r3, [pc, #624]	; (802dd20 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802daae:	4a9d      	ldr	r2, [pc, #628]	; (802dd24 <_Z18trained_model_initPFPvjjE+0x2b8>)
 802dab0:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 802dab2:	4b9b      	ldr	r3, [pc, #620]	; (802dd20 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802dab4:	4a9c      	ldr	r2, [pc, #624]	; (802dd28 <_Z18trained_model_initPFPvjjE+0x2bc>)
 802dab6:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 802dab8:	4b99      	ldr	r3, [pc, #612]	; (802dd20 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802daba:	4a9c      	ldr	r2, [pc, #624]	; (802dd2c <_Z18trained_model_initPFPvjjE+0x2c0>)
 802dabc:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 802dabe:	4b98      	ldr	r3, [pc, #608]	; (802dd20 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802dac0:	4a9b      	ldr	r2, [pc, #620]	; (802dd30 <_Z18trained_model_initPFPvjjE+0x2c4>)
 802dac2:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 802dac4:	4b96      	ldr	r3, [pc, #600]	; (802dd20 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802dac6:	4a9b      	ldr	r2, [pc, #620]	; (802dd34 <_Z18trained_model_initPFPvjjE+0x2c8>)
 802dac8:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 802daca:	4b95      	ldr	r3, [pc, #596]	; (802dd20 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802dacc:	4a9a      	ldr	r2, [pc, #616]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dace:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 23;
 802dad0:	4b93      	ldr	r3, [pc, #588]	; (802dd20 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802dad2:	2217      	movs	r2, #23
 802dad4:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 23; ++i) {
 802dad6:	2300      	movs	r3, #0
 802dad8:	647b      	str	r3, [r7, #68]	; 0x44
 802dada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dadc:	2b16      	cmp	r3, #22
 802dade:	f200 810c 	bhi.w	802dcfa <_Z18trained_model_initPFPvjjE+0x28e>
    tflTensors[i].type = tensorData[i].type;
 802dae2:	4996      	ldr	r1, [pc, #600]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802dae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dae6:	4613      	mov	r3, r2
 802dae8:	005b      	lsls	r3, r3, #1
 802daea:	4413      	add	r3, r2
 802daec:	00db      	lsls	r3, r3, #3
 802daee:	440b      	add	r3, r1
 802daf0:	3301      	adds	r3, #1
 802daf2:	7819      	ldrb	r1, [r3, #0]
 802daf4:	4a90      	ldr	r2, [pc, #576]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802daf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802daf8:	019b      	lsls	r3, r3, #6
 802dafa:	4413      	add	r3, r2
 802dafc:	460a      	mov	r2, r1
 802dafe:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 802db00:	498e      	ldr	r1, [pc, #568]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802db02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802db04:	4613      	mov	r3, r2
 802db06:	005b      	lsls	r3, r3, #1
 802db08:	4413      	add	r3, r2
 802db0a:	00db      	lsls	r3, r3, #3
 802db0c:	440b      	add	r3, r1
 802db0e:	3301      	adds	r3, #1
 802db10:	7818      	ldrb	r0, [r3, #0]
 802db12:	498b      	ldr	r1, [pc, #556]	; (802dd40 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802db14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802db16:	4613      	mov	r3, r2
 802db18:	005b      	lsls	r3, r3, #1
 802db1a:	4413      	add	r3, r2
 802db1c:	009b      	lsls	r3, r3, #2
 802db1e:	440b      	add	r3, r1
 802db20:	3308      	adds	r3, #8
 802db22:	4602      	mov	r2, r0
 802db24:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 802db26:	4a84      	ldr	r2, [pc, #528]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802db28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802db2a:	019b      	lsls	r3, r3, #6
 802db2c:	4413      	add	r3, r2
 802db2e:	332d      	adds	r3, #45	; 0x2d
 802db30:	2200      	movs	r2, #0
 802db32:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 802db34:	4981      	ldr	r1, [pc, #516]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802db36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802db38:	4613      	mov	r3, r2
 802db3a:	005b      	lsls	r3, r3, #1
 802db3c:	4413      	add	r3, r2
 802db3e:	00db      	lsls	r3, r3, #3
 802db40:	440b      	add	r3, r1
 802db42:	7819      	ldrb	r1, [r3, #0]
 802db44:	4a7c      	ldr	r2, [pc, #496]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802db46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802db48:	019b      	lsls	r3, r3, #6
 802db4a:	4413      	add	r3, r2
 802db4c:	3314      	adds	r3, #20
 802db4e:	460a      	mov	r2, r1
 802db50:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 802db52:	497a      	ldr	r1, [pc, #488]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802db54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802db56:	4613      	mov	r3, r2
 802db58:	005b      	lsls	r3, r3, #1
 802db5a:	4413      	add	r3, r2
 802db5c:	00db      	lsls	r3, r3, #3
 802db5e:	440b      	add	r3, r1
 802db60:	330c      	adds	r3, #12
 802db62:	681a      	ldr	r2, [r3, #0]
 802db64:	4974      	ldr	r1, [pc, #464]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802db66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802db68:	019b      	lsls	r3, r3, #6
 802db6a:	440b      	add	r3, r1
 802db6c:	3318      	adds	r3, #24
 802db6e:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 802db70:	4972      	ldr	r1, [pc, #456]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802db72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802db74:	4613      	mov	r3, r2
 802db76:	005b      	lsls	r3, r3, #1
 802db78:	4413      	add	r3, r2
 802db7a:	00db      	lsls	r3, r3, #3
 802db7c:	440b      	add	r3, r1
 802db7e:	3308      	adds	r3, #8
 802db80:	681a      	ldr	r2, [r3, #0]
 802db82:	496d      	ldr	r1, [pc, #436]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802db84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802db86:	019b      	lsls	r3, r3, #6
 802db88:	440b      	add	r3, r1
 802db8a:	3308      	adds	r3, #8
 802db8c:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 802db8e:	496b      	ldr	r1, [pc, #428]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802db90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802db92:	4613      	mov	r3, r2
 802db94:	005b      	lsls	r3, r3, #1
 802db96:	4413      	add	r3, r2
 802db98:	00db      	lsls	r3, r3, #3
 802db9a:	440b      	add	r3, r1
 802db9c:	3308      	adds	r3, #8
 802db9e:	6819      	ldr	r1, [r3, #0]
 802dba0:	4867      	ldr	r0, [pc, #412]	; (802dd40 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802dba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dba4:	4613      	mov	r3, r2
 802dba6:	005b      	lsls	r3, r3, #1
 802dba8:	4413      	add	r3, r2
 802dbaa:	009b      	lsls	r3, r3, #2
 802dbac:	4403      	add	r3, r0
 802dbae:	3304      	adds	r3, #4
 802dbb0:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 802dbb2:	4a61      	ldr	r2, [pc, #388]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dbb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dbb6:	019b      	lsls	r3, r3, #6
 802dbb8:	4413      	add	r3, r2
 802dbba:	3314      	adds	r3, #20
 802dbbc:	781b      	ldrb	r3, [r3, #0]
 802dbbe:	2b02      	cmp	r3, #2
 802dbc0:	d11e      	bne.n	802dc00 <_Z18trained_model_initPFPvjjE+0x194>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 802dbc2:	495e      	ldr	r1, [pc, #376]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802dbc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dbc6:	4613      	mov	r3, r2
 802dbc8:	005b      	lsls	r3, r3, #1
 802dbca:	4413      	add	r3, r2
 802dbcc:	00db      	lsls	r3, r3, #3
 802dbce:	440b      	add	r3, r1
 802dbd0:	3304      	adds	r3, #4
 802dbd2:	681b      	ldr	r3, [r3, #0]
 802dbd4:	461a      	mov	r2, r3
 802dbd6:	4b4e      	ldr	r3, [pc, #312]	; (802dd10 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802dbd8:	681b      	ldr	r3, [r3, #0]
 802dbda:	4413      	add	r3, r2
 802dbdc:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 802dbde:	4a56      	ldr	r2, [pc, #344]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dbe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dbe2:	019b      	lsls	r3, r3, #6
 802dbe4:	4413      	add	r3, r2
 802dbe6:	3304      	adds	r3, #4
 802dbe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802dbea:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 802dbec:	4954      	ldr	r1, [pc, #336]	; (802dd40 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802dbee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dbf0:	4613      	mov	r3, r2
 802dbf2:	005b      	lsls	r3, r3, #1
 802dbf4:	4413      	add	r3, r2
 802dbf6:	009b      	lsls	r3, r3, #2
 802dbf8:	440b      	add	r3, r1
 802dbfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802dbfc:	601a      	str	r2, [r3, #0]
 802dbfe:	e01f      	b.n	802dc40 <_Z18trained_model_initPFPvjjE+0x1d4>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 802dc00:	494e      	ldr	r1, [pc, #312]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802dc02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dc04:	4613      	mov	r3, r2
 802dc06:	005b      	lsls	r3, r3, #1
 802dc08:	4413      	add	r3, r2
 802dc0a:	00db      	lsls	r3, r3, #3
 802dc0c:	440b      	add	r3, r1
 802dc0e:	3304      	adds	r3, #4
 802dc10:	681a      	ldr	r2, [r3, #0]
 802dc12:	4949      	ldr	r1, [pc, #292]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dc16:	019b      	lsls	r3, r3, #6
 802dc18:	440b      	add	r3, r1
 802dc1a:	3304      	adds	r3, #4
 802dc1c:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 802dc1e:	4947      	ldr	r1, [pc, #284]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802dc20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dc22:	4613      	mov	r3, r2
 802dc24:	005b      	lsls	r3, r3, #1
 802dc26:	4413      	add	r3, r2
 802dc28:	00db      	lsls	r3, r3, #3
 802dc2a:	440b      	add	r3, r1
 802dc2c:	3304      	adds	r3, #4
 802dc2e:	6819      	ldr	r1, [r3, #0]
 802dc30:	4843      	ldr	r0, [pc, #268]	; (802dd40 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802dc32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dc34:	4613      	mov	r3, r2
 802dc36:	005b      	lsls	r3, r3, #1
 802dc38:	4413      	add	r3, r2
 802dc3a:	009b      	lsls	r3, r3, #2
 802dc3c:	4403      	add	r3, r0
 802dc3e:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 802dc40:	4a3d      	ldr	r2, [pc, #244]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dc44:	019b      	lsls	r3, r3, #6
 802dc46:	4413      	add	r3, r2
 802dc48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802dc4c:	493b      	ldr	r1, [pc, #236]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802dc4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dc50:	4613      	mov	r3, r2
 802dc52:	005b      	lsls	r3, r3, #1
 802dc54:	4413      	add	r3, r2
 802dc56:	00db      	lsls	r3, r3, #3
 802dc58:	440b      	add	r3, r1
 802dc5a:	f103 0210 	add.w	r2, r3, #16
 802dc5e:	4603      	mov	r3, r0
 802dc60:	e892 0003 	ldmia.w	r2, {r0, r1}
 802dc64:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 802dc68:	4a33      	ldr	r2, [pc, #204]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dc6c:	019b      	lsls	r3, r3, #6
 802dc6e:	4413      	add	r3, r2
 802dc70:	3330      	adds	r3, #48	; 0x30
 802dc72:	781b      	ldrb	r3, [r3, #0]
 802dc74:	2b01      	cmp	r3, #1
 802dc76:	d11b      	bne.n	802dcb0 <_Z18trained_model_initPFPvjjE+0x244>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 802dc78:	4930      	ldr	r1, [pc, #192]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802dc7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dc7c:	4613      	mov	r3, r2
 802dc7e:	005b      	lsls	r3, r3, #1
 802dc80:	4413      	add	r3, r2
 802dc82:	00db      	lsls	r3, r3, #3
 802dc84:	440b      	add	r3, r1
 802dc86:	3314      	adds	r3, #20
 802dc88:	681b      	ldr	r3, [r3, #0]
 802dc8a:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 802dc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dc8e:	681b      	ldr	r3, [r3, #0]
 802dc90:	685a      	ldr	r2, [r3, #4]
 802dc92:	4929      	ldr	r1, [pc, #164]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dc94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dc96:	019b      	lsls	r3, r3, #6
 802dc98:	440b      	add	r3, r1
 802dc9a:	330c      	adds	r3, #12
 802dc9c:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 802dc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802dca0:	685b      	ldr	r3, [r3, #4]
 802dca2:	685a      	ldr	r2, [r3, #4]
 802dca4:	4924      	ldr	r1, [pc, #144]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dca8:	019b      	lsls	r3, r3, #6
 802dcaa:	440b      	add	r3, r1
 802dcac:	3310      	adds	r3, #16
 802dcae:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 802dcb0:	4a21      	ldr	r2, [pc, #132]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dcb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dcb4:	019b      	lsls	r3, r3, #6
 802dcb6:	4413      	add	r3, r2
 802dcb8:	3314      	adds	r3, #20
 802dcba:	781b      	ldrb	r3, [r3, #0]
 802dcbc:	2b02      	cmp	r3, #2
 802dcbe:	d118      	bne.n	802dcf2 <_Z18trained_model_initPFPvjjE+0x286>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 802dcc0:	4a1d      	ldr	r2, [pc, #116]	; (802dd38 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802dcc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dcc4:	019b      	lsls	r3, r3, #6
 802dcc6:	4413      	add	r3, r2
 802dcc8:	3304      	adds	r3, #4
 802dcca:	6819      	ldr	r1, [r3, #0]
 802dccc:	481b      	ldr	r0, [pc, #108]	; (802dd3c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802dcce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802dcd0:	4613      	mov	r3, r2
 802dcd2:	005b      	lsls	r3, r3, #1
 802dcd4:	4413      	add	r3, r2
 802dcd6:	00db      	lsls	r3, r3, #3
 802dcd8:	4403      	add	r3, r0
 802dcda:	330c      	adds	r3, #12
 802dcdc:	681b      	ldr	r3, [r3, #0]
 802dcde:	440b      	add	r3, r1
 802dce0:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 802dce2:	4b0d      	ldr	r3, [pc, #52]	; (802dd18 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802dce4:	681b      	ldr	r3, [r3, #0]
 802dce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802dce8:	429a      	cmp	r2, r3
 802dcea:	d902      	bls.n	802dcf2 <_Z18trained_model_initPFPvjjE+0x286>
        tensor_boundary = data_end_ptr;
 802dcec:	4a0a      	ldr	r2, [pc, #40]	; (802dd18 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802dcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dcf0:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 23; ++i) {
 802dcf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802dcf4:	3301      	adds	r3, #1
 802dcf6:	647b      	str	r3, [r7, #68]	; 0x44
 802dcf8:	e6ef      	b.n	802dada <_Z18trained_model_initPFPvjjE+0x6e>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 802dcfa:	4b07      	ldr	r3, [pc, #28]	; (802dd18 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802dcfc:	681a      	ldr	r2, [r3, #0]
 802dcfe:	4b07      	ldr	r3, [pc, #28]	; (802dd1c <_Z18trained_model_initPFPvjjE+0x2b0>)
 802dd00:	681b      	ldr	r3, [r3, #0]
 802dd02:	429a      	cmp	r2, r3
 802dd04:	d920      	bls.n	802dd48 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 802dd06:	480f      	ldr	r0, [pc, #60]	; (802dd44 <_Z18trained_model_initPFPvjjE+0x2d8>)
 802dd08:	f7d7 fdc5 	bl	8005896 <_Z9ei_printfPKcz>
    return kTfLiteError;
 802dd0c:	2301      	movs	r3, #1
 802dd0e:	e107      	b.n	802df20 <_Z18trained_model_initPFPvjjE+0x4b4>
 802dd10:	20000900 	.word	0x20000900
 802dd14:	080350d8 	.word	0x080350d8
 802dd18:	20000904 	.word	0x20000904
 802dd1c:	20000908 	.word	0x20000908
 802dd20:	2000090c 	.word	0x2000090c
 802dd24:	0802d8b5 	.word	0x0802d8b5
 802dd28:	0802d95d 	.word	0x0802d95d
 802dd2c:	0802d9e9 	.word	0x0802d9e9
 802dd30:	0802da21 	.word	0x0802da21
 802dd34:	0802da45 	.word	0x0802da45
 802dd38:	20000964 	.word	0x20000964
 802dd3c:	20000454 	.word	0x20000454
 802dd40:	20000f24 	.word	0x20000f24
 802dd44:	08035100 	.word	0x08035100
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
 802dd48:	4c77      	ldr	r4, [pc, #476]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802dd4a:	463b      	mov	r3, r7
 802dd4c:	4618      	mov	r0, r3
 802dd4e:	f7fe f90b 	bl	802bf68 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 802dd52:	4625      	mov	r5, r4
 802dd54:	463c      	mov	r4, r7
 802dd56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802dd58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802dd5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802dd5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
 802dd62:	4c71      	ldr	r4, [pc, #452]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802dd64:	463b      	mov	r3, r7
 802dd66:	4618      	mov	r0, r3
 802dd68:	f7fc f820 	bl	8029dac <_ZN6tflite16Register_CONV_2DEv>
 802dd6c:	3420      	adds	r4, #32
 802dd6e:	463d      	mov	r5, r7
 802dd70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802dd72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802dd74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802dd78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 802dd7c:	4c6a      	ldr	r4, [pc, #424]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802dd7e:	463b      	mov	r3, r7
 802dd80:	4618      	mov	r0, r3
 802dd82:	f7fd ff05 	bl	802bb90 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 802dd86:	3440      	adds	r4, #64	; 0x40
 802dd88:	463d      	mov	r5, r7
 802dd8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802dd8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802dd8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802dd92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 802dd96:	4c64      	ldr	r4, [pc, #400]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802dd98:	463b      	mov	r3, r7
 802dd9a:	4618      	mov	r0, r3
 802dd9c:	f7fd f936 	bl	802b00c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 802dda0:	3460      	adds	r4, #96	; 0x60
 802dda2:	463d      	mov	r5, r7
 802dda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802dda6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802dda8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802ddac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 802ddb0:	4c5d      	ldr	r4, [pc, #372]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802ddb2:	463b      	mov	r3, r7
 802ddb4:	4618      	mov	r0, r3
 802ddb6:	f7fe fc53 	bl	802c660 <_ZN6tflite16Register_SOFTMAXEv>
 802ddba:	3480      	adds	r4, #128	; 0x80
 802ddbc:	463d      	mov	r5, r7
 802ddbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802ddc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802ddc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802ddc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 11; ++i) {
 802ddca:	2300      	movs	r3, #0
 802ddcc:	643b      	str	r3, [r7, #64]	; 0x40
 802ddce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ddd0:	2b0a      	cmp	r3, #10
 802ddd2:	d86f      	bhi.n	802deb4 <_Z18trained_model_initPFPvjjE+0x448>
    tflNodes[i].inputs = nodeData[i].inputs;
 802ddd4:	4a55      	ldr	r2, [pc, #340]	; (802df2c <_Z18trained_model_initPFPvjjE+0x4c0>)
 802ddd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ddd8:	011b      	lsls	r3, r3, #4
 802ddda:	4413      	add	r3, r2
 802dddc:	6819      	ldr	r1, [r3, #0]
 802ddde:	4854      	ldr	r0, [pc, #336]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802dde0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802dde2:	4613      	mov	r3, r2
 802dde4:	00db      	lsls	r3, r3, #3
 802dde6:	4413      	add	r3, r2
 802dde8:	009b      	lsls	r3, r3, #2
 802ddea:	4403      	add	r3, r0
 802ddec:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 802ddee:	4a4f      	ldr	r2, [pc, #316]	; (802df2c <_Z18trained_model_initPFPvjjE+0x4c0>)
 802ddf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ddf2:	011b      	lsls	r3, r3, #4
 802ddf4:	4413      	add	r3, r2
 802ddf6:	3304      	adds	r3, #4
 802ddf8:	6819      	ldr	r1, [r3, #0]
 802ddfa:	484d      	ldr	r0, [pc, #308]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802ddfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802ddfe:	4613      	mov	r3, r2
 802de00:	00db      	lsls	r3, r3, #3
 802de02:	4413      	add	r3, r2
 802de04:	009b      	lsls	r3, r3, #2
 802de06:	4403      	add	r3, r0
 802de08:	3304      	adds	r3, #4
 802de0a:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 802de0c:	4a47      	ldr	r2, [pc, #284]	; (802df2c <_Z18trained_model_initPFPvjjE+0x4c0>)
 802de0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802de10:	011b      	lsls	r3, r3, #4
 802de12:	4413      	add	r3, r2
 802de14:	3308      	adds	r3, #8
 802de16:	6819      	ldr	r1, [r3, #0]
 802de18:	4845      	ldr	r0, [pc, #276]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802de1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802de1c:	4613      	mov	r3, r2
 802de1e:	00db      	lsls	r3, r3, #3
 802de20:	4413      	add	r3, r2
 802de22:	009b      	lsls	r3, r3, #2
 802de24:	4403      	add	r3, r0
 802de26:	3314      	adds	r3, #20
 802de28:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 802de2a:	4941      	ldr	r1, [pc, #260]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802de2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802de2e:	4613      	mov	r3, r2
 802de30:	00db      	lsls	r3, r3, #3
 802de32:	4413      	add	r3, r2
 802de34:	009b      	lsls	r3, r3, #2
 802de36:	440b      	add	r3, r1
 802de38:	3318      	adds	r3, #24
 802de3a:	2200      	movs	r2, #0
 802de3c:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 802de3e:	493c      	ldr	r1, [pc, #240]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802de40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802de42:	4613      	mov	r3, r2
 802de44:	00db      	lsls	r3, r3, #3
 802de46:	4413      	add	r3, r2
 802de48:	009b      	lsls	r3, r3, #2
 802de4a:	440b      	add	r3, r1
 802de4c:	331c      	adds	r3, #28
 802de4e:	2200      	movs	r2, #0
 802de50:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 802de52:	4a36      	ldr	r2, [pc, #216]	; (802df2c <_Z18trained_model_initPFPvjjE+0x4c0>)
 802de54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802de56:	011b      	lsls	r3, r3, #4
 802de58:	4413      	add	r3, r2
 802de5a:	330c      	adds	r3, #12
 802de5c:	781b      	ldrb	r3, [r3, #0]
 802de5e:	4a32      	ldr	r2, [pc, #200]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802de60:	015b      	lsls	r3, r3, #5
 802de62:	4413      	add	r3, r2
 802de64:	681b      	ldr	r3, [r3, #0]
 802de66:	2b00      	cmp	r3, #0
 802de68:	d020      	beq.n	802deac <_Z18trained_model_initPFPvjjE+0x440>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 802de6a:	4a30      	ldr	r2, [pc, #192]	; (802df2c <_Z18trained_model_initPFPvjjE+0x4c0>)
 802de6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802de6e:	011b      	lsls	r3, r3, #4
 802de70:	4413      	add	r3, r2
 802de72:	330c      	adds	r3, #12
 802de74:	781b      	ldrb	r3, [r3, #0]
 802de76:	4a2c      	ldr	r2, [pc, #176]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802de78:	015b      	lsls	r3, r3, #5
 802de7a:	4413      	add	r3, r2
 802de7c:	681c      	ldr	r4, [r3, #0]
 802de7e:	492c      	ldr	r1, [pc, #176]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802de80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802de82:	4613      	mov	r3, r2
 802de84:	00db      	lsls	r3, r3, #3
 802de86:	4413      	add	r3, r2
 802de88:	009b      	lsls	r3, r3, #2
 802de8a:	440b      	add	r3, r1
 802de8c:	3314      	adds	r3, #20
 802de8e:	681b      	ldr	r3, [r3, #0]
 802de90:	2200      	movs	r2, #0
 802de92:	4619      	mov	r1, r3
 802de94:	4827      	ldr	r0, [pc, #156]	; (802df34 <_Z18trained_model_initPFPvjjE+0x4c8>)
 802de96:	47a0      	blx	r4
 802de98:	4601      	mov	r1, r0
 802de9a:	4825      	ldr	r0, [pc, #148]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802de9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802de9e:	4613      	mov	r3, r2
 802dea0:	00db      	lsls	r3, r3, #3
 802dea2:	4413      	add	r3, r2
 802dea4:	009b      	lsls	r3, r3, #2
 802dea6:	4403      	add	r3, r0
 802dea8:	3310      	adds	r3, #16
 802deaa:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 802deac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802deae:	3301      	adds	r3, #1
 802deb0:	643b      	str	r3, [r7, #64]	; 0x40
 802deb2:	e78c      	b.n	802ddce <_Z18trained_model_initPFPvjjE+0x362>
    }
  }
  for (size_t i = 0; i < 11; ++i) {
 802deb4:	2300      	movs	r3, #0
 802deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 802deb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802deba:	2b0a      	cmp	r3, #10
 802debc:	d82f      	bhi.n	802df1e <_Z18trained_model_initPFPvjjE+0x4b2>
    if (registrations[nodeData[i].used_op_index].prepare) {
 802debe:	4a1b      	ldr	r2, [pc, #108]	; (802df2c <_Z18trained_model_initPFPvjjE+0x4c0>)
 802dec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dec2:	011b      	lsls	r3, r3, #4
 802dec4:	4413      	add	r3, r2
 802dec6:	330c      	adds	r3, #12
 802dec8:	781b      	ldrb	r3, [r3, #0]
 802deca:	4a17      	ldr	r2, [pc, #92]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802decc:	015b      	lsls	r3, r3, #5
 802dece:	4413      	add	r3, r2
 802ded0:	3308      	adds	r3, #8
 802ded2:	681b      	ldr	r3, [r3, #0]
 802ded4:	2b00      	cmp	r3, #0
 802ded6:	d01e      	beq.n	802df16 <_Z18trained_model_initPFPvjjE+0x4aa>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 802ded8:	4a14      	ldr	r2, [pc, #80]	; (802df2c <_Z18trained_model_initPFPvjjE+0x4c0>)
 802deda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dedc:	011b      	lsls	r3, r3, #4
 802dede:	4413      	add	r3, r2
 802dee0:	330c      	adds	r3, #12
 802dee2:	781b      	ldrb	r3, [r3, #0]
 802dee4:	4a10      	ldr	r2, [pc, #64]	; (802df28 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802dee6:	015b      	lsls	r3, r3, #5
 802dee8:	4413      	add	r3, r2
 802deea:	3308      	adds	r3, #8
 802deec:	681c      	ldr	r4, [r3, #0]
 802deee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802def0:	4613      	mov	r3, r2
 802def2:	00db      	lsls	r3, r3, #3
 802def4:	4413      	add	r3, r2
 802def6:	009b      	lsls	r3, r3, #2
 802def8:	4a0d      	ldr	r2, [pc, #52]	; (802df30 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802defa:	4413      	add	r3, r2
 802defc:	4619      	mov	r1, r3
 802defe:	480d      	ldr	r0, [pc, #52]	; (802df34 <_Z18trained_model_initPFPvjjE+0x4c8>)
 802df00:	47a0      	blx	r4
 802df02:	4603      	mov	r3, r0
 802df04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 802df08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802df0c:	2b00      	cmp	r3, #0
 802df0e:	d002      	beq.n	802df16 <_Z18trained_model_initPFPvjjE+0x4aa>
        return status;
 802df10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802df14:	e004      	b.n	802df20 <_Z18trained_model_initPFPvjjE+0x4b4>
  for (size_t i = 0; i < 11; ++i) {
 802df16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802df18:	3301      	adds	r3, #1
 802df1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802df1c:	e7cc      	b.n	802deb8 <_Z18trained_model_initPFPvjjE+0x44c>
      }
    }
  }
  return kTfLiteOk;
 802df1e:	2300      	movs	r3, #0
}
 802df20:	4618      	mov	r0, r3
 802df22:	3748      	adds	r7, #72	; 0x48
 802df24:	46bd      	mov	sp, r7
 802df26:	bdb0      	pop	{r4, r5, r7, pc}
 802df28:	20001038 	.word	0x20001038
 802df2c:	080370f8 	.word	0x080370f8
 802df30:	200010d8 	.word	0x200010d8
 802df34:	2000090c 	.word	0x2000090c

0802df38 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 802df38:	b480      	push	{r7}
 802df3a:	b083      	sub	sp, #12
 802df3c:	af00      	add	r7, sp, #0
 802df3e:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 802df40:	4b05      	ldr	r3, [pc, #20]	; (802df58 <_Z19trained_model_inputi+0x20>)
 802df42:	689a      	ldr	r2, [r3, #8]
 802df44:	2300      	movs	r3, #0
 802df46:	019b      	lsls	r3, r3, #6
 802df48:	4413      	add	r3, r2
}
 802df4a:	4618      	mov	r0, r3
 802df4c:	370c      	adds	r7, #12
 802df4e:	46bd      	mov	sp, r7
 802df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df54:	4770      	bx	lr
 802df56:	bf00      	nop
 802df58:	2000090c 	.word	0x2000090c

0802df5c <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
 802df5c:	b480      	push	{r7}
 802df5e:	b083      	sub	sp, #12
 802df60:	af00      	add	r7, sp, #0
 802df62:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 802df64:	4b05      	ldr	r3, [pc, #20]	; (802df7c <_Z20trained_model_outputi+0x20>)
 802df66:	689a      	ldr	r2, [r3, #8]
 802df68:	2316      	movs	r3, #22
 802df6a:	019b      	lsls	r3, r3, #6
 802df6c:	4413      	add	r3, r2
}
 802df6e:	4618      	mov	r0, r3
 802df70:	370c      	adds	r7, #12
 802df72:	46bd      	mov	sp, r7
 802df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df78:	4770      	bx	lr
 802df7a:	bf00      	nop
 802df7c:	2000090c 	.word	0x2000090c

0802df80 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 802df80:	b590      	push	{r4, r7, lr}
 802df82:	b083      	sub	sp, #12
 802df84:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 11; ++i) {
 802df86:	2300      	movs	r3, #0
 802df88:	607b      	str	r3, [r7, #4]
 802df8a:	687b      	ldr	r3, [r7, #4]
 802df8c:	2b0a      	cmp	r3, #10
 802df8e:	d81f      	bhi.n	802dfd0 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 802df90:	4a12      	ldr	r2, [pc, #72]	; (802dfdc <_Z20trained_model_invokev+0x5c>)
 802df92:	687b      	ldr	r3, [r7, #4]
 802df94:	011b      	lsls	r3, r3, #4
 802df96:	4413      	add	r3, r2
 802df98:	330c      	adds	r3, #12
 802df9a:	781b      	ldrb	r3, [r3, #0]
 802df9c:	4a10      	ldr	r2, [pc, #64]	; (802dfe0 <_Z20trained_model_invokev+0x60>)
 802df9e:	015b      	lsls	r3, r3, #5
 802dfa0:	4413      	add	r3, r2
 802dfa2:	330c      	adds	r3, #12
 802dfa4:	681c      	ldr	r4, [r3, #0]
 802dfa6:	687a      	ldr	r2, [r7, #4]
 802dfa8:	4613      	mov	r3, r2
 802dfaa:	00db      	lsls	r3, r3, #3
 802dfac:	4413      	add	r3, r2
 802dfae:	009b      	lsls	r3, r3, #2
 802dfb0:	4a0c      	ldr	r2, [pc, #48]	; (802dfe4 <_Z20trained_model_invokev+0x64>)
 802dfb2:	4413      	add	r3, r2
 802dfb4:	4619      	mov	r1, r3
 802dfb6:	480c      	ldr	r0, [pc, #48]	; (802dfe8 <_Z20trained_model_invokev+0x68>)
 802dfb8:	47a0      	blx	r4
 802dfba:	4603      	mov	r3, r0
 802dfbc:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 802dfbe:	78fb      	ldrb	r3, [r7, #3]
 802dfc0:	2b00      	cmp	r3, #0
 802dfc2:	d001      	beq.n	802dfc8 <_Z20trained_model_invokev+0x48>
      return status;
 802dfc4:	78fb      	ldrb	r3, [r7, #3]
 802dfc6:	e004      	b.n	802dfd2 <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 11; ++i) {
 802dfc8:	687b      	ldr	r3, [r7, #4]
 802dfca:	3301      	adds	r3, #1
 802dfcc:	607b      	str	r3, [r7, #4]
 802dfce:	e7dc      	b.n	802df8a <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 802dfd0:	2300      	movs	r3, #0
}
 802dfd2:	4618      	mov	r0, r3
 802dfd4:	370c      	adds	r7, #12
 802dfd6:	46bd      	mov	sp, r7
 802dfd8:	bd90      	pop	{r4, r7, pc}
 802dfda:	bf00      	nop
 802dfdc:	080370f8 	.word	0x080370f8
 802dfe0:	20001038 	.word	0x20001038
 802dfe4:	200010d8 	.word	0x200010d8
 802dfe8:	2000090c 	.word	0x2000090c

0802dfec <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 802dfec:	b580      	push	{r7, lr}
 802dfee:	b084      	sub	sp, #16
 802dff0:	af00      	add	r7, sp, #0
 802dff2:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 802dff4:	4b10      	ldr	r3, [pc, #64]	; (802e038 <_Z19trained_model_resetPFvPvE+0x4c>)
 802dff6:	681a      	ldr	r2, [r3, #0]
 802dff8:	687b      	ldr	r3, [r7, #4]
 802dffa:	4610      	mov	r0, r2
 802dffc:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 802dffe:	4b0f      	ldr	r3, [pc, #60]	; (802e03c <_Z19trained_model_resetPFvPvE+0x50>)
 802e000:	2200      	movs	r2, #0
 802e002:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 802e004:	2300      	movs	r3, #0
 802e006:	60fb      	str	r3, [r7, #12]
 802e008:	4b0d      	ldr	r3, [pc, #52]	; (802e040 <_Z19trained_model_resetPFvPvE+0x54>)
 802e00a:	681b      	ldr	r3, [r3, #0]
 802e00c:	68fa      	ldr	r2, [r7, #12]
 802e00e:	429a      	cmp	r2, r3
 802e010:	d20a      	bcs.n	802e028 <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 802e012:	4a0c      	ldr	r2, [pc, #48]	; (802e044 <_Z19trained_model_resetPFvPvE+0x58>)
 802e014:	68fb      	ldr	r3, [r7, #12]
 802e016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e01a:	4618      	mov	r0, r3
 802e01c:	f7f8 fdce 	bl	8026bbc <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 802e020:	68fb      	ldr	r3, [r7, #12]
 802e022:	3301      	adds	r3, #1
 802e024:	60fb      	str	r3, [r7, #12]
 802e026:	e7ef      	b.n	802e008 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 802e028:	4b05      	ldr	r3, [pc, #20]	; (802e040 <_Z19trained_model_resetPFvPvE+0x54>)
 802e02a:	2200      	movs	r2, #0
 802e02c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 802e02e:	2300      	movs	r3, #0
}
 802e030:	4618      	mov	r0, r3
 802e032:	3710      	adds	r7, #16
 802e034:	46bd      	mov	sp, r7
 802e036:	bd80      	pop	{r7, pc}
 802e038:	20000900 	.word	0x20000900
 802e03c:	200012b0 	.word	0x200012b0
 802e040:	2000128c 	.word	0x2000128c
 802e044:	20001264 	.word	0x20001264

0802e048 <_Z41__static_initialization_and_destruction_0ii>:
 802e048:	b480      	push	{r7}
 802e04a:	b083      	sub	sp, #12
 802e04c:	af00      	add	r7, sp, #0
 802e04e:	6078      	str	r0, [r7, #4]
 802e050:	6039      	str	r1, [r7, #0]
 802e052:	687b      	ldr	r3, [r7, #4]
 802e054:	2b01      	cmp	r3, #1
 802e056:	d14b      	bne.n	802e0f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 802e058:	683b      	ldr	r3, [r7, #0]
 802e05a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802e05e:	4293      	cmp	r3, r2
 802e060:	d146      	bne.n	802e0f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 802e062:	4b26      	ldr	r3, [pc, #152]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e064:	681b      	ldr	r3, [r3, #0]
 802e066:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 802e06a:	4a25      	ldr	r2, [pc, #148]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e06c:	6053      	str	r3, [r2, #4]
 802e06e:	4b23      	ldr	r3, [pc, #140]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e070:	681b      	ldr	r3, [r3, #0]
 802e072:	4a23      	ldr	r2, [pc, #140]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e074:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
 802e078:	4b20      	ldr	r3, [pc, #128]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e07a:	681b      	ldr	r3, [r3, #0]
 802e07c:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 802e080:	4a1f      	ldr	r2, [pc, #124]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e082:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 802e086:	4b1d      	ldr	r3, [pc, #116]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e088:	681b      	ldr	r3, [r3, #0]
 802e08a:	4a1d      	ldr	r2, [pc, #116]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e08c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 802e090:	4b1a      	ldr	r3, [pc, #104]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e092:	681b      	ldr	r3, [r3, #0]
 802e094:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 802e098:	4a19      	ldr	r2, [pc, #100]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e09a:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 802e09e:	4b17      	ldr	r3, [pc, #92]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e0a0:	681b      	ldr	r3, [r3, #0]
 802e0a2:	4a17      	ldr	r2, [pc, #92]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e0a4:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
 802e0a8:	4b14      	ldr	r3, [pc, #80]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e0aa:	681b      	ldr	r3, [r3, #0]
 802e0ac:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 802e0b0:	4a13      	ldr	r2, [pc, #76]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e0b2:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 802e0b6:	4b11      	ldr	r3, [pc, #68]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e0b8:	681b      	ldr	r3, [r3, #0]
 802e0ba:	4a11      	ldr	r2, [pc, #68]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e0bc:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
 802e0c0:	4b0e      	ldr	r3, [pc, #56]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e0c2:	681b      	ldr	r3, [r3, #0]
 802e0c4:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 802e0c8:	4a0d      	ldr	r2, [pc, #52]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e0ca:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 802e0ce:	4b0b      	ldr	r3, [pc, #44]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e0d0:	681b      	ldr	r3, [r3, #0]
 802e0d2:	4a0b      	ldr	r2, [pc, #44]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e0d4:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 802e0d8:	4b08      	ldr	r3, [pc, #32]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e0da:	681b      	ldr	r3, [r3, #0]
 802e0dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 802e0e0:	4a07      	ldr	r2, [pc, #28]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e0e2:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 802e0e6:	4b05      	ldr	r3, [pc, #20]	; (802e0fc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802e0e8:	681b      	ldr	r3, [r3, #0]
 802e0ea:	4a05      	ldr	r2, [pc, #20]	; (802e100 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802e0ec:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
}
 802e0f0:	bf00      	nop
 802e0f2:	370c      	adds	r7, #12
 802e0f4:	46bd      	mov	sp, r7
 802e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e0fa:	4770      	bx	lr
 802e0fc:	20000900 	.word	0x20000900
 802e100:	20000454 	.word	0x20000454

0802e104 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 802e104:	b580      	push	{r7, lr}
 802e106:	af00      	add	r7, sp, #0
 802e108:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802e10c:	2001      	movs	r0, #1
 802e10e:	f7ff ff9b 	bl	802e048 <_Z41__static_initialization_and_destruction_0ii>
 802e112:	bd80      	pop	{r7, pc}

0802e114 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802e114:	b580      	push	{r7, lr}
 802e116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802e118:	2200      	movs	r2, #0
 802e11a:	4912      	ldr	r1, [pc, #72]	; (802e164 <MX_USB_DEVICE_Init+0x50>)
 802e11c:	4812      	ldr	r0, [pc, #72]	; (802e168 <MX_USB_DEVICE_Init+0x54>)
 802e11e:	f7e4 fe23 	bl	8012d68 <USBD_Init>
 802e122:	4603      	mov	r3, r0
 802e124:	2b00      	cmp	r3, #0
 802e126:	d001      	beq.n	802e12c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802e128:	f7d7 fcf6 	bl	8005b18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802e12c:	490f      	ldr	r1, [pc, #60]	; (802e16c <MX_USB_DEVICE_Init+0x58>)
 802e12e:	480e      	ldr	r0, [pc, #56]	; (802e168 <MX_USB_DEVICE_Init+0x54>)
 802e130:	f7e4 fe45 	bl	8012dbe <USBD_RegisterClass>
 802e134:	4603      	mov	r3, r0
 802e136:	2b00      	cmp	r3, #0
 802e138:	d001      	beq.n	802e13e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 802e13a:	f7d7 fced 	bl	8005b18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802e13e:	490c      	ldr	r1, [pc, #48]	; (802e170 <MX_USB_DEVICE_Init+0x5c>)
 802e140:	4809      	ldr	r0, [pc, #36]	; (802e168 <MX_USB_DEVICE_Init+0x54>)
 802e142:	f7e4 fd73 	bl	8012c2c <USBD_CDC_RegisterInterface>
 802e146:	4603      	mov	r3, r0
 802e148:	2b00      	cmp	r3, #0
 802e14a:	d001      	beq.n	802e150 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 802e14c:	f7d7 fce4 	bl	8005b18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802e150:	4805      	ldr	r0, [pc, #20]	; (802e168 <MX_USB_DEVICE_Init+0x54>)
 802e152:	f7e4 fe4e 	bl	8012df2 <USBD_Start>
 802e156:	4603      	mov	r3, r0
 802e158:	2b00      	cmp	r3, #0
 802e15a:	d001      	beq.n	802e160 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 802e15c:	f7d7 fcdc 	bl	8005b18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802e160:	bf00      	nop
 802e162:	bd80      	pop	{r7, pc}
 802e164:	2000068c 	.word	0x2000068c
 802e168:	200012b4 	.word	0x200012b4
 802e16c:	20000344 	.word	0x20000344
 802e170:	2000067c 	.word	0x2000067c

0802e174 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 802e174:	b580      	push	{r7, lr}
 802e176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802e178:	2200      	movs	r2, #0
 802e17a:	4905      	ldr	r1, [pc, #20]	; (802e190 <CDC_Init_FS+0x1c>)
 802e17c:	4805      	ldr	r0, [pc, #20]	; (802e194 <CDC_Init_FS+0x20>)
 802e17e:	f7e4 fd6c 	bl	8012c5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802e182:	4905      	ldr	r1, [pc, #20]	; (802e198 <CDC_Init_FS+0x24>)
 802e184:	4803      	ldr	r0, [pc, #12]	; (802e194 <CDC_Init_FS+0x20>)
 802e186:	f7e4 fd82 	bl	8012c8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 802e18a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 802e18c:	4618      	mov	r0, r3
 802e18e:	bd80      	pop	{r7, pc}
 802e190:	20001960 	.word	0x20001960
 802e194:	200012b4 	.word	0x200012b4
 802e198:	20001578 	.word	0x20001578

0802e19c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 802e19c:	b480      	push	{r7}
 802e19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802e1a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802e1a2:	4618      	mov	r0, r3
 802e1a4:	46bd      	mov	sp, r7
 802e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e1aa:	4770      	bx	lr

0802e1ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802e1ac:	b480      	push	{r7}
 802e1ae:	b083      	sub	sp, #12
 802e1b0:	af00      	add	r7, sp, #0
 802e1b2:	4603      	mov	r3, r0
 802e1b4:	6039      	str	r1, [r7, #0]
 802e1b6:	71fb      	strb	r3, [r7, #7]
 802e1b8:	4613      	mov	r3, r2
 802e1ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 802e1bc:	79fb      	ldrb	r3, [r7, #7]
 802e1be:	2b23      	cmp	r3, #35	; 0x23
 802e1c0:	d84a      	bhi.n	802e258 <CDC_Control_FS+0xac>
 802e1c2:	a201      	add	r2, pc, #4	; (adr r2, 802e1c8 <CDC_Control_FS+0x1c>)
 802e1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e1c8:	0802e259 	.word	0x0802e259
 802e1cc:	0802e259 	.word	0x0802e259
 802e1d0:	0802e259 	.word	0x0802e259
 802e1d4:	0802e259 	.word	0x0802e259
 802e1d8:	0802e259 	.word	0x0802e259
 802e1dc:	0802e259 	.word	0x0802e259
 802e1e0:	0802e259 	.word	0x0802e259
 802e1e4:	0802e259 	.word	0x0802e259
 802e1e8:	0802e259 	.word	0x0802e259
 802e1ec:	0802e259 	.word	0x0802e259
 802e1f0:	0802e259 	.word	0x0802e259
 802e1f4:	0802e259 	.word	0x0802e259
 802e1f8:	0802e259 	.word	0x0802e259
 802e1fc:	0802e259 	.word	0x0802e259
 802e200:	0802e259 	.word	0x0802e259
 802e204:	0802e259 	.word	0x0802e259
 802e208:	0802e259 	.word	0x0802e259
 802e20c:	0802e259 	.word	0x0802e259
 802e210:	0802e259 	.word	0x0802e259
 802e214:	0802e259 	.word	0x0802e259
 802e218:	0802e259 	.word	0x0802e259
 802e21c:	0802e259 	.word	0x0802e259
 802e220:	0802e259 	.word	0x0802e259
 802e224:	0802e259 	.word	0x0802e259
 802e228:	0802e259 	.word	0x0802e259
 802e22c:	0802e259 	.word	0x0802e259
 802e230:	0802e259 	.word	0x0802e259
 802e234:	0802e259 	.word	0x0802e259
 802e238:	0802e259 	.word	0x0802e259
 802e23c:	0802e259 	.word	0x0802e259
 802e240:	0802e259 	.word	0x0802e259
 802e244:	0802e259 	.word	0x0802e259
 802e248:	0802e259 	.word	0x0802e259
 802e24c:	0802e259 	.word	0x0802e259
 802e250:	0802e259 	.word	0x0802e259
 802e254:	0802e259 	.word	0x0802e259
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 802e258:	bf00      	nop
  }

  return (USBD_OK);
 802e25a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802e25c:	4618      	mov	r0, r3
 802e25e:	370c      	adds	r7, #12
 802e260:	46bd      	mov	sp, r7
 802e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e266:	4770      	bx	lr

0802e268 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 802e268:	b580      	push	{r7, lr}
 802e26a:	b082      	sub	sp, #8
 802e26c:	af00      	add	r7, sp, #0
 802e26e:	6078      	str	r0, [r7, #4]
 802e270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802e272:	6879      	ldr	r1, [r7, #4]
 802e274:	4805      	ldr	r0, [pc, #20]	; (802e28c <CDC_Receive_FS+0x24>)
 802e276:	f7e4 fd0a 	bl	8012c8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802e27a:	4804      	ldr	r0, [pc, #16]	; (802e28c <CDC_Receive_FS+0x24>)
 802e27c:	f7e4 fd4a 	bl	8012d14 <USBD_CDC_ReceivePacket>
//	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
//  }
//  else if(Buf[0] == '0'){
//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
//  }
  return (USBD_OK);
 802e280:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802e282:	4618      	mov	r0, r3
 802e284:	3708      	adds	r7, #8
 802e286:	46bd      	mov	sp, r7
 802e288:	bd80      	pop	{r7, pc}
 802e28a:	bf00      	nop
 802e28c:	200012b4 	.word	0x200012b4

0802e290 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802e290:	b580      	push	{r7, lr}
 802e292:	b084      	sub	sp, #16
 802e294:	af00      	add	r7, sp, #0
 802e296:	6078      	str	r0, [r7, #4]
 802e298:	460b      	mov	r3, r1
 802e29a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 802e29c:	2300      	movs	r3, #0
 802e29e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802e2a0:	4b0d      	ldr	r3, [pc, #52]	; (802e2d8 <CDC_Transmit_FS+0x48>)
 802e2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802e2a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 802e2a8:	68bb      	ldr	r3, [r7, #8]
 802e2aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802e2ae:	2b00      	cmp	r3, #0
 802e2b0:	d001      	beq.n	802e2b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 802e2b2:	2301      	movs	r3, #1
 802e2b4:	e00b      	b.n	802e2ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802e2b6:	887b      	ldrh	r3, [r7, #2]
 802e2b8:	461a      	mov	r2, r3
 802e2ba:	6879      	ldr	r1, [r7, #4]
 802e2bc:	4806      	ldr	r0, [pc, #24]	; (802e2d8 <CDC_Transmit_FS+0x48>)
 802e2be:	f7e4 fccc 	bl	8012c5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802e2c2:	4805      	ldr	r0, [pc, #20]	; (802e2d8 <CDC_Transmit_FS+0x48>)
 802e2c4:	f7e4 fcf7 	bl	8012cb6 <USBD_CDC_TransmitPacket>
 802e2c8:	4603      	mov	r3, r0
 802e2ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 802e2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 802e2ce:	4618      	mov	r0, r3
 802e2d0:	3710      	adds	r7, #16
 802e2d2:	46bd      	mov	sp, r7
 802e2d4:	bd80      	pop	{r7, pc}
 802e2d6:	bf00      	nop
 802e2d8:	200012b4 	.word	0x200012b4

0802e2dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802e2dc:	b480      	push	{r7}
 802e2de:	b083      	sub	sp, #12
 802e2e0:	af00      	add	r7, sp, #0
 802e2e2:	4603      	mov	r3, r0
 802e2e4:	6039      	str	r1, [r7, #0]
 802e2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802e2e8:	683b      	ldr	r3, [r7, #0]
 802e2ea:	2212      	movs	r2, #18
 802e2ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802e2ee:	4b03      	ldr	r3, [pc, #12]	; (802e2fc <USBD_FS_DeviceDescriptor+0x20>)
}
 802e2f0:	4618      	mov	r0, r3
 802e2f2:	370c      	adds	r7, #12
 802e2f4:	46bd      	mov	sp, r7
 802e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2fa:	4770      	bx	lr
 802e2fc:	200006a8 	.word	0x200006a8

0802e300 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802e300:	b480      	push	{r7}
 802e302:	b083      	sub	sp, #12
 802e304:	af00      	add	r7, sp, #0
 802e306:	4603      	mov	r3, r0
 802e308:	6039      	str	r1, [r7, #0]
 802e30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802e30c:	683b      	ldr	r3, [r7, #0]
 802e30e:	2204      	movs	r2, #4
 802e310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802e312:	4b03      	ldr	r3, [pc, #12]	; (802e320 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802e314:	4618      	mov	r0, r3
 802e316:	370c      	adds	r7, #12
 802e318:	46bd      	mov	sp, r7
 802e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e31e:	4770      	bx	lr
 802e320:	200006bc 	.word	0x200006bc

0802e324 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802e324:	b580      	push	{r7, lr}
 802e326:	b082      	sub	sp, #8
 802e328:	af00      	add	r7, sp, #0
 802e32a:	4603      	mov	r3, r0
 802e32c:	6039      	str	r1, [r7, #0]
 802e32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802e330:	79fb      	ldrb	r3, [r7, #7]
 802e332:	2b00      	cmp	r3, #0
 802e334:	d105      	bne.n	802e342 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802e336:	683a      	ldr	r2, [r7, #0]
 802e338:	4907      	ldr	r1, [pc, #28]	; (802e358 <USBD_FS_ProductStrDescriptor+0x34>)
 802e33a:	4808      	ldr	r0, [pc, #32]	; (802e35c <USBD_FS_ProductStrDescriptor+0x38>)
 802e33c:	f7e5 fcd7 	bl	8013cee <USBD_GetString>
 802e340:	e004      	b.n	802e34c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802e342:	683a      	ldr	r2, [r7, #0]
 802e344:	4904      	ldr	r1, [pc, #16]	; (802e358 <USBD_FS_ProductStrDescriptor+0x34>)
 802e346:	4805      	ldr	r0, [pc, #20]	; (802e35c <USBD_FS_ProductStrDescriptor+0x38>)
 802e348:	f7e5 fcd1 	bl	8013cee <USBD_GetString>
  }
  return USBD_StrDesc;
 802e34c:	4b02      	ldr	r3, [pc, #8]	; (802e358 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802e34e:	4618      	mov	r0, r3
 802e350:	3708      	adds	r7, #8
 802e352:	46bd      	mov	sp, r7
 802e354:	bd80      	pop	{r7, pc}
 802e356:	bf00      	nop
 802e358:	20001d48 	.word	0x20001d48
 802e35c:	08035154 	.word	0x08035154

0802e360 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802e360:	b580      	push	{r7, lr}
 802e362:	b082      	sub	sp, #8
 802e364:	af00      	add	r7, sp, #0
 802e366:	4603      	mov	r3, r0
 802e368:	6039      	str	r1, [r7, #0]
 802e36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802e36c:	683a      	ldr	r2, [r7, #0]
 802e36e:	4904      	ldr	r1, [pc, #16]	; (802e380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 802e370:	4804      	ldr	r0, [pc, #16]	; (802e384 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802e372:	f7e5 fcbc 	bl	8013cee <USBD_GetString>
  return USBD_StrDesc;
 802e376:	4b02      	ldr	r3, [pc, #8]	; (802e380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 802e378:	4618      	mov	r0, r3
 802e37a:	3708      	adds	r7, #8
 802e37c:	46bd      	mov	sp, r7
 802e37e:	bd80      	pop	{r7, pc}
 802e380:	20001d48 	.word	0x20001d48
 802e384:	0803516c 	.word	0x0803516c

0802e388 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802e388:	b580      	push	{r7, lr}
 802e38a:	b082      	sub	sp, #8
 802e38c:	af00      	add	r7, sp, #0
 802e38e:	4603      	mov	r3, r0
 802e390:	6039      	str	r1, [r7, #0]
 802e392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802e394:	683b      	ldr	r3, [r7, #0]
 802e396:	221a      	movs	r2, #26
 802e398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802e39a:	f000 f843 	bl	802e424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802e39e:	4b02      	ldr	r3, [pc, #8]	; (802e3a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 802e3a0:	4618      	mov	r0, r3
 802e3a2:	3708      	adds	r7, #8
 802e3a4:	46bd      	mov	sp, r7
 802e3a6:	bd80      	pop	{r7, pc}
 802e3a8:	200006c0 	.word	0x200006c0

0802e3ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802e3ac:	b580      	push	{r7, lr}
 802e3ae:	b082      	sub	sp, #8
 802e3b0:	af00      	add	r7, sp, #0
 802e3b2:	4603      	mov	r3, r0
 802e3b4:	6039      	str	r1, [r7, #0]
 802e3b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 802e3b8:	79fb      	ldrb	r3, [r7, #7]
 802e3ba:	2b00      	cmp	r3, #0
 802e3bc:	d105      	bne.n	802e3ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802e3be:	683a      	ldr	r2, [r7, #0]
 802e3c0:	4907      	ldr	r1, [pc, #28]	; (802e3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 802e3c2:	4808      	ldr	r0, [pc, #32]	; (802e3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 802e3c4:	f7e5 fc93 	bl	8013cee <USBD_GetString>
 802e3c8:	e004      	b.n	802e3d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802e3ca:	683a      	ldr	r2, [r7, #0]
 802e3cc:	4904      	ldr	r1, [pc, #16]	; (802e3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 802e3ce:	4805      	ldr	r0, [pc, #20]	; (802e3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 802e3d0:	f7e5 fc8d 	bl	8013cee <USBD_GetString>
  }
  return USBD_StrDesc;
 802e3d4:	4b02      	ldr	r3, [pc, #8]	; (802e3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 802e3d6:	4618      	mov	r0, r3
 802e3d8:	3708      	adds	r7, #8
 802e3da:	46bd      	mov	sp, r7
 802e3dc:	bd80      	pop	{r7, pc}
 802e3de:	bf00      	nop
 802e3e0:	20001d48 	.word	0x20001d48
 802e3e4:	08035180 	.word	0x08035180

0802e3e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802e3e8:	b580      	push	{r7, lr}
 802e3ea:	b082      	sub	sp, #8
 802e3ec:	af00      	add	r7, sp, #0
 802e3ee:	4603      	mov	r3, r0
 802e3f0:	6039      	str	r1, [r7, #0]
 802e3f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802e3f4:	79fb      	ldrb	r3, [r7, #7]
 802e3f6:	2b00      	cmp	r3, #0
 802e3f8:	d105      	bne.n	802e406 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802e3fa:	683a      	ldr	r2, [r7, #0]
 802e3fc:	4907      	ldr	r1, [pc, #28]	; (802e41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802e3fe:	4808      	ldr	r0, [pc, #32]	; (802e420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802e400:	f7e5 fc75 	bl	8013cee <USBD_GetString>
 802e404:	e004      	b.n	802e410 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802e406:	683a      	ldr	r2, [r7, #0]
 802e408:	4904      	ldr	r1, [pc, #16]	; (802e41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802e40a:	4805      	ldr	r0, [pc, #20]	; (802e420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802e40c:	f7e5 fc6f 	bl	8013cee <USBD_GetString>
  }
  return USBD_StrDesc;
 802e410:	4b02      	ldr	r3, [pc, #8]	; (802e41c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 802e412:	4618      	mov	r0, r3
 802e414:	3708      	adds	r7, #8
 802e416:	46bd      	mov	sp, r7
 802e418:	bd80      	pop	{r7, pc}
 802e41a:	bf00      	nop
 802e41c:	20001d48 	.word	0x20001d48
 802e420:	0803518c 	.word	0x0803518c

0802e424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 802e424:	b580      	push	{r7, lr}
 802e426:	b084      	sub	sp, #16
 802e428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802e42a:	4b0f      	ldr	r3, [pc, #60]	; (802e468 <Get_SerialNum+0x44>)
 802e42c:	681b      	ldr	r3, [r3, #0]
 802e42e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802e430:	4b0e      	ldr	r3, [pc, #56]	; (802e46c <Get_SerialNum+0x48>)
 802e432:	681b      	ldr	r3, [r3, #0]
 802e434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802e436:	4b0e      	ldr	r3, [pc, #56]	; (802e470 <Get_SerialNum+0x4c>)
 802e438:	681b      	ldr	r3, [r3, #0]
 802e43a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802e43c:	68fa      	ldr	r2, [r7, #12]
 802e43e:	687b      	ldr	r3, [r7, #4]
 802e440:	4413      	add	r3, r2
 802e442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 802e444:	68fb      	ldr	r3, [r7, #12]
 802e446:	2b00      	cmp	r3, #0
 802e448:	d009      	beq.n	802e45e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802e44a:	2208      	movs	r2, #8
 802e44c:	4909      	ldr	r1, [pc, #36]	; (802e474 <Get_SerialNum+0x50>)
 802e44e:	68f8      	ldr	r0, [r7, #12]
 802e450:	f000 f814 	bl	802e47c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802e454:	2204      	movs	r2, #4
 802e456:	4908      	ldr	r1, [pc, #32]	; (802e478 <Get_SerialNum+0x54>)
 802e458:	68b8      	ldr	r0, [r7, #8]
 802e45a:	f000 f80f 	bl	802e47c <IntToUnicode>
  }
}
 802e45e:	bf00      	nop
 802e460:	3710      	adds	r7, #16
 802e462:	46bd      	mov	sp, r7
 802e464:	bd80      	pop	{r7, pc}
 802e466:	bf00      	nop
 802e468:	1ffff7ac 	.word	0x1ffff7ac
 802e46c:	1ffff7b0 	.word	0x1ffff7b0
 802e470:	1ffff7b4 	.word	0x1ffff7b4
 802e474:	200006c2 	.word	0x200006c2
 802e478:	200006d2 	.word	0x200006d2

0802e47c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802e47c:	b480      	push	{r7}
 802e47e:	b087      	sub	sp, #28
 802e480:	af00      	add	r7, sp, #0
 802e482:	60f8      	str	r0, [r7, #12]
 802e484:	60b9      	str	r1, [r7, #8]
 802e486:	4613      	mov	r3, r2
 802e488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802e48a:	2300      	movs	r3, #0
 802e48c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802e48e:	2300      	movs	r3, #0
 802e490:	75fb      	strb	r3, [r7, #23]
 802e492:	e027      	b.n	802e4e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 802e494:	68fb      	ldr	r3, [r7, #12]
 802e496:	0f1b      	lsrs	r3, r3, #28
 802e498:	2b09      	cmp	r3, #9
 802e49a:	d80b      	bhi.n	802e4b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802e49c:	68fb      	ldr	r3, [r7, #12]
 802e49e:	0f1b      	lsrs	r3, r3, #28
 802e4a0:	b2da      	uxtb	r2, r3
 802e4a2:	7dfb      	ldrb	r3, [r7, #23]
 802e4a4:	005b      	lsls	r3, r3, #1
 802e4a6:	4619      	mov	r1, r3
 802e4a8:	68bb      	ldr	r3, [r7, #8]
 802e4aa:	440b      	add	r3, r1
 802e4ac:	3230      	adds	r2, #48	; 0x30
 802e4ae:	b2d2      	uxtb	r2, r2
 802e4b0:	701a      	strb	r2, [r3, #0]
 802e4b2:	e00a      	b.n	802e4ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802e4b4:	68fb      	ldr	r3, [r7, #12]
 802e4b6:	0f1b      	lsrs	r3, r3, #28
 802e4b8:	b2da      	uxtb	r2, r3
 802e4ba:	7dfb      	ldrb	r3, [r7, #23]
 802e4bc:	005b      	lsls	r3, r3, #1
 802e4be:	4619      	mov	r1, r3
 802e4c0:	68bb      	ldr	r3, [r7, #8]
 802e4c2:	440b      	add	r3, r1
 802e4c4:	3237      	adds	r2, #55	; 0x37
 802e4c6:	b2d2      	uxtb	r2, r2
 802e4c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802e4ca:	68fb      	ldr	r3, [r7, #12]
 802e4cc:	011b      	lsls	r3, r3, #4
 802e4ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802e4d0:	7dfb      	ldrb	r3, [r7, #23]
 802e4d2:	005b      	lsls	r3, r3, #1
 802e4d4:	3301      	adds	r3, #1
 802e4d6:	68ba      	ldr	r2, [r7, #8]
 802e4d8:	4413      	add	r3, r2
 802e4da:	2200      	movs	r2, #0
 802e4dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802e4de:	7dfb      	ldrb	r3, [r7, #23]
 802e4e0:	3301      	adds	r3, #1
 802e4e2:	75fb      	strb	r3, [r7, #23]
 802e4e4:	7dfa      	ldrb	r2, [r7, #23]
 802e4e6:	79fb      	ldrb	r3, [r7, #7]
 802e4e8:	429a      	cmp	r2, r3
 802e4ea:	d3d3      	bcc.n	802e494 <IntToUnicode+0x18>
  }
}
 802e4ec:	bf00      	nop
 802e4ee:	bf00      	nop
 802e4f0:	371c      	adds	r7, #28
 802e4f2:	46bd      	mov	sp, r7
 802e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4f8:	4770      	bx	lr
	...

0802e4fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802e4fc:	b580      	push	{r7, lr}
 802e4fe:	b08a      	sub	sp, #40	; 0x28
 802e500:	af00      	add	r7, sp, #0
 802e502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802e504:	f107 0314 	add.w	r3, r7, #20
 802e508:	2200      	movs	r2, #0
 802e50a:	601a      	str	r2, [r3, #0]
 802e50c:	605a      	str	r2, [r3, #4]
 802e50e:	609a      	str	r2, [r3, #8]
 802e510:	60da      	str	r2, [r3, #12]
 802e512:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 802e514:	687b      	ldr	r3, [r7, #4]
 802e516:	681b      	ldr	r3, [r3, #0]
 802e518:	4a1c      	ldr	r2, [pc, #112]	; (802e58c <HAL_PCD_MspInit+0x90>)
 802e51a:	4293      	cmp	r3, r2
 802e51c:	d131      	bne.n	802e582 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802e51e:	4b1c      	ldr	r3, [pc, #112]	; (802e590 <HAL_PCD_MspInit+0x94>)
 802e520:	695b      	ldr	r3, [r3, #20]
 802e522:	4a1b      	ldr	r2, [pc, #108]	; (802e590 <HAL_PCD_MspInit+0x94>)
 802e524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802e528:	6153      	str	r3, [r2, #20]
 802e52a:	4b19      	ldr	r3, [pc, #100]	; (802e590 <HAL_PCD_MspInit+0x94>)
 802e52c:	695b      	ldr	r3, [r3, #20]
 802e52e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e532:	613b      	str	r3, [r7, #16]
 802e534:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 802e536:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802e53a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802e53c:	2302      	movs	r3, #2
 802e53e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802e540:	2300      	movs	r3, #0
 802e542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 802e544:	2303      	movs	r3, #3
 802e546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 802e548:	230e      	movs	r3, #14
 802e54a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802e54c:	f107 0314 	add.w	r3, r7, #20
 802e550:	4619      	mov	r1, r3
 802e552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 802e556:	f7db fcc5 	bl	8009ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 802e55a:	4b0d      	ldr	r3, [pc, #52]	; (802e590 <HAL_PCD_MspInit+0x94>)
 802e55c:	69db      	ldr	r3, [r3, #28]
 802e55e:	4a0c      	ldr	r2, [pc, #48]	; (802e590 <HAL_PCD_MspInit+0x94>)
 802e560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802e564:	61d3      	str	r3, [r2, #28]
 802e566:	4b0a      	ldr	r3, [pc, #40]	; (802e590 <HAL_PCD_MspInit+0x94>)
 802e568:	69db      	ldr	r3, [r3, #28]
 802e56a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802e56e:	60fb      	str	r3, [r7, #12]
 802e570:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 802e572:	2200      	movs	r2, #0
 802e574:	2100      	movs	r1, #0
 802e576:	2014      	movs	r0, #20
 802e578:	f7db fb14 	bl	8009ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 802e57c:	2014      	movs	r0, #20
 802e57e:	f7db fb3d 	bl	8009bfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 802e582:	bf00      	nop
 802e584:	3728      	adds	r7, #40	; 0x28
 802e586:	46bd      	mov	sp, r7
 802e588:	bd80      	pop	{r7, pc}
 802e58a:	bf00      	nop
 802e58c:	40005c00 	.word	0x40005c00
 802e590:	40021000 	.word	0x40021000

0802e594 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802e594:	b580      	push	{r7, lr}
 802e596:	b082      	sub	sp, #8
 802e598:	af00      	add	r7, sp, #0
 802e59a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802e59c:	687b      	ldr	r3, [r7, #4]
 802e59e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 802e5a2:	687b      	ldr	r3, [r7, #4]
 802e5a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 802e5a8:	4619      	mov	r1, r3
 802e5aa:	4610      	mov	r0, r2
 802e5ac:	f7e4 fc6a 	bl	8012e84 <USBD_LL_SetupStage>
}
 802e5b0:	bf00      	nop
 802e5b2:	3708      	adds	r7, #8
 802e5b4:	46bd      	mov	sp, r7
 802e5b6:	bd80      	pop	{r7, pc}

0802e5b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802e5b8:	b580      	push	{r7, lr}
 802e5ba:	b082      	sub	sp, #8
 802e5bc:	af00      	add	r7, sp, #0
 802e5be:	6078      	str	r0, [r7, #4]
 802e5c0:	460b      	mov	r3, r1
 802e5c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802e5c4:	687b      	ldr	r3, [r7, #4]
 802e5c6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 802e5ca:	78fa      	ldrb	r2, [r7, #3]
 802e5cc:	6879      	ldr	r1, [r7, #4]
 802e5ce:	4613      	mov	r3, r2
 802e5d0:	009b      	lsls	r3, r3, #2
 802e5d2:	4413      	add	r3, r2
 802e5d4:	00db      	lsls	r3, r3, #3
 802e5d6:	440b      	add	r3, r1
 802e5d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 802e5dc:	681a      	ldr	r2, [r3, #0]
 802e5de:	78fb      	ldrb	r3, [r7, #3]
 802e5e0:	4619      	mov	r1, r3
 802e5e2:	f7e4 fc9c 	bl	8012f1e <USBD_LL_DataOutStage>
}
 802e5e6:	bf00      	nop
 802e5e8:	3708      	adds	r7, #8
 802e5ea:	46bd      	mov	sp, r7
 802e5ec:	bd80      	pop	{r7, pc}

0802e5ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802e5ee:	b580      	push	{r7, lr}
 802e5f0:	b082      	sub	sp, #8
 802e5f2:	af00      	add	r7, sp, #0
 802e5f4:	6078      	str	r0, [r7, #4]
 802e5f6:	460b      	mov	r3, r1
 802e5f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802e5fa:	687b      	ldr	r3, [r7, #4]
 802e5fc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 802e600:	78fa      	ldrb	r2, [r7, #3]
 802e602:	6879      	ldr	r1, [r7, #4]
 802e604:	4613      	mov	r3, r2
 802e606:	009b      	lsls	r3, r3, #2
 802e608:	4413      	add	r3, r2
 802e60a:	00db      	lsls	r3, r3, #3
 802e60c:	440b      	add	r3, r1
 802e60e:	333c      	adds	r3, #60	; 0x3c
 802e610:	681a      	ldr	r2, [r3, #0]
 802e612:	78fb      	ldrb	r3, [r7, #3]
 802e614:	4619      	mov	r1, r3
 802e616:	f7e4 fcf3 	bl	8013000 <USBD_LL_DataInStage>
}
 802e61a:	bf00      	nop
 802e61c:	3708      	adds	r7, #8
 802e61e:	46bd      	mov	sp, r7
 802e620:	bd80      	pop	{r7, pc}

0802e622 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802e622:	b580      	push	{r7, lr}
 802e624:	b082      	sub	sp, #8
 802e626:	af00      	add	r7, sp, #0
 802e628:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802e62a:	687b      	ldr	r3, [r7, #4]
 802e62c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802e630:	4618      	mov	r0, r3
 802e632:	f7e4 fe06 	bl	8013242 <USBD_LL_SOF>
}
 802e636:	bf00      	nop
 802e638:	3708      	adds	r7, #8
 802e63a:	46bd      	mov	sp, r7
 802e63c:	bd80      	pop	{r7, pc}

0802e63e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802e63e:	b580      	push	{r7, lr}
 802e640:	b084      	sub	sp, #16
 802e642:	af00      	add	r7, sp, #0
 802e644:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802e646:	2301      	movs	r3, #1
 802e648:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802e64a:	687b      	ldr	r3, [r7, #4]
 802e64c:	689b      	ldr	r3, [r3, #8]
 802e64e:	2b02      	cmp	r3, #2
 802e650:	d001      	beq.n	802e656 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 802e652:	f7d7 fa61 	bl	8005b18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802e656:	687b      	ldr	r3, [r7, #4]
 802e658:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802e65c:	7bfa      	ldrb	r2, [r7, #15]
 802e65e:	4611      	mov	r1, r2
 802e660:	4618      	mov	r0, r3
 802e662:	f7e4 fdb3 	bl	80131cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802e666:	687b      	ldr	r3, [r7, #4]
 802e668:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802e66c:	4618      	mov	r0, r3
 802e66e:	f7e4 fd6c 	bl	801314a <USBD_LL_Reset>
}
 802e672:	bf00      	nop
 802e674:	3710      	adds	r7, #16
 802e676:	46bd      	mov	sp, r7
 802e678:	bd80      	pop	{r7, pc}
	...

0802e67c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802e67c:	b580      	push	{r7, lr}
 802e67e:	b082      	sub	sp, #8
 802e680:	af00      	add	r7, sp, #0
 802e682:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802e684:	687b      	ldr	r3, [r7, #4]
 802e686:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802e68a:	4618      	mov	r0, r3
 802e68c:	f7e4 fdae 	bl	80131ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802e690:	687b      	ldr	r3, [r7, #4]
 802e692:	699b      	ldr	r3, [r3, #24]
 802e694:	2b00      	cmp	r3, #0
 802e696:	d005      	beq.n	802e6a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802e698:	4b04      	ldr	r3, [pc, #16]	; (802e6ac <HAL_PCD_SuspendCallback+0x30>)
 802e69a:	691b      	ldr	r3, [r3, #16]
 802e69c:	4a03      	ldr	r2, [pc, #12]	; (802e6ac <HAL_PCD_SuspendCallback+0x30>)
 802e69e:	f043 0306 	orr.w	r3, r3, #6
 802e6a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 802e6a4:	bf00      	nop
 802e6a6:	3708      	adds	r7, #8
 802e6a8:	46bd      	mov	sp, r7
 802e6aa:	bd80      	pop	{r7, pc}
 802e6ac:	e000ed00 	.word	0xe000ed00

0802e6b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802e6b0:	b580      	push	{r7, lr}
 802e6b2:	b082      	sub	sp, #8
 802e6b4:	af00      	add	r7, sp, #0
 802e6b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802e6b8:	687b      	ldr	r3, [r7, #4]
 802e6ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802e6be:	4618      	mov	r0, r3
 802e6c0:	f7e4 fda9 	bl	8013216 <USBD_LL_Resume>
}
 802e6c4:	bf00      	nop
 802e6c6:	3708      	adds	r7, #8
 802e6c8:	46bd      	mov	sp, r7
 802e6ca:	bd80      	pop	{r7, pc}

0802e6cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 802e6cc:	b580      	push	{r7, lr}
 802e6ce:	b082      	sub	sp, #8
 802e6d0:	af00      	add	r7, sp, #0
 802e6d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 802e6d4:	4a28      	ldr	r2, [pc, #160]	; (802e778 <USBD_LL_Init+0xac>)
 802e6d6:	687b      	ldr	r3, [r7, #4]
 802e6d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 802e6dc:	687b      	ldr	r3, [r7, #4]
 802e6de:	4a26      	ldr	r2, [pc, #152]	; (802e778 <USBD_LL_Init+0xac>)
 802e6e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 802e6e4:	4b24      	ldr	r3, [pc, #144]	; (802e778 <USBD_LL_Init+0xac>)
 802e6e6:	4a25      	ldr	r2, [pc, #148]	; (802e77c <USBD_LL_Init+0xb0>)
 802e6e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802e6ea:	4b23      	ldr	r3, [pc, #140]	; (802e778 <USBD_LL_Init+0xac>)
 802e6ec:	2208      	movs	r2, #8
 802e6ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 802e6f0:	4b21      	ldr	r3, [pc, #132]	; (802e778 <USBD_LL_Init+0xac>)
 802e6f2:	2202      	movs	r2, #2
 802e6f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802e6f6:	4b20      	ldr	r3, [pc, #128]	; (802e778 <USBD_LL_Init+0xac>)
 802e6f8:	2202      	movs	r2, #2
 802e6fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802e6fc:	4b1e      	ldr	r3, [pc, #120]	; (802e778 <USBD_LL_Init+0xac>)
 802e6fe:	2200      	movs	r2, #0
 802e700:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 802e702:	4b1d      	ldr	r3, [pc, #116]	; (802e778 <USBD_LL_Init+0xac>)
 802e704:	2200      	movs	r2, #0
 802e706:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802e708:	481b      	ldr	r0, [pc, #108]	; (802e778 <USBD_LL_Init+0xac>)
 802e70a:	f7dc f845 	bl	800a798 <HAL_PCD_Init>
 802e70e:	4603      	mov	r3, r0
 802e710:	2b00      	cmp	r3, #0
 802e712:	d001      	beq.n	802e718 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 802e714:	f7d7 fa00 	bl	8005b18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802e718:	687b      	ldr	r3, [r7, #4]
 802e71a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e71e:	2318      	movs	r3, #24
 802e720:	2200      	movs	r2, #0
 802e722:	2100      	movs	r1, #0
 802e724:	f7dd fcee 	bl	800c104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 802e728:	687b      	ldr	r3, [r7, #4]
 802e72a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e72e:	2358      	movs	r3, #88	; 0x58
 802e730:	2200      	movs	r2, #0
 802e732:	2180      	movs	r1, #128	; 0x80
 802e734:	f7dd fce6 	bl	800c104 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802e738:	687b      	ldr	r3, [r7, #4]
 802e73a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e73e:	23c0      	movs	r3, #192	; 0xc0
 802e740:	2200      	movs	r2, #0
 802e742:	2181      	movs	r1, #129	; 0x81
 802e744:	f7dd fcde 	bl	800c104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 802e748:	687b      	ldr	r3, [r7, #4]
 802e74a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e74e:	f44f 7388 	mov.w	r3, #272	; 0x110
 802e752:	2200      	movs	r2, #0
 802e754:	2101      	movs	r1, #1
 802e756:	f7dd fcd5 	bl	800c104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 802e75a:	687b      	ldr	r3, [r7, #4]
 802e75c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e760:	f44f 7380 	mov.w	r3, #256	; 0x100
 802e764:	2200      	movs	r2, #0
 802e766:	2182      	movs	r1, #130	; 0x82
 802e768:	f7dd fccc 	bl	800c104 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802e76c:	2300      	movs	r3, #0
}
 802e76e:	4618      	mov	r0, r3
 802e770:	3708      	adds	r7, #8
 802e772:	46bd      	mov	sp, r7
 802e774:	bd80      	pop	{r7, pc}
 802e776:	bf00      	nop
 802e778:	20001f48 	.word	0x20001f48
 802e77c:	40005c00 	.word	0x40005c00

0802e780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 802e780:	b580      	push	{r7, lr}
 802e782:	b084      	sub	sp, #16
 802e784:	af00      	add	r7, sp, #0
 802e786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e788:	2300      	movs	r3, #0
 802e78a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e78c:	2300      	movs	r3, #0
 802e78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 802e790:	687b      	ldr	r3, [r7, #4]
 802e792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802e796:	4618      	mov	r0, r3
 802e798:	f7dc f8ea 	bl	800a970 <HAL_PCD_Start>
 802e79c:	4603      	mov	r3, r0
 802e79e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e7a0:	7bfb      	ldrb	r3, [r7, #15]
 802e7a2:	4618      	mov	r0, r3
 802e7a4:	f000 f954 	bl	802ea50 <USBD_Get_USB_Status>
 802e7a8:	4603      	mov	r3, r0
 802e7aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802e7ac:	7bbb      	ldrb	r3, [r7, #14]
}
 802e7ae:	4618      	mov	r0, r3
 802e7b0:	3710      	adds	r7, #16
 802e7b2:	46bd      	mov	sp, r7
 802e7b4:	bd80      	pop	{r7, pc}

0802e7b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802e7b6:	b580      	push	{r7, lr}
 802e7b8:	b084      	sub	sp, #16
 802e7ba:	af00      	add	r7, sp, #0
 802e7bc:	6078      	str	r0, [r7, #4]
 802e7be:	4608      	mov	r0, r1
 802e7c0:	4611      	mov	r1, r2
 802e7c2:	461a      	mov	r2, r3
 802e7c4:	4603      	mov	r3, r0
 802e7c6:	70fb      	strb	r3, [r7, #3]
 802e7c8:	460b      	mov	r3, r1
 802e7ca:	70bb      	strb	r3, [r7, #2]
 802e7cc:	4613      	mov	r3, r2
 802e7ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e7d0:	2300      	movs	r3, #0
 802e7d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e7d4:	2300      	movs	r3, #0
 802e7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e7de:	78bb      	ldrb	r3, [r7, #2]
 802e7e0:	883a      	ldrh	r2, [r7, #0]
 802e7e2:	78f9      	ldrb	r1, [r7, #3]
 802e7e4:	f7dc fa06 	bl	800abf4 <HAL_PCD_EP_Open>
 802e7e8:	4603      	mov	r3, r0
 802e7ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e7ec:	7bfb      	ldrb	r3, [r7, #15]
 802e7ee:	4618      	mov	r0, r3
 802e7f0:	f000 f92e 	bl	802ea50 <USBD_Get_USB_Status>
 802e7f4:	4603      	mov	r3, r0
 802e7f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802e7f8:	7bbb      	ldrb	r3, [r7, #14]
}
 802e7fa:	4618      	mov	r0, r3
 802e7fc:	3710      	adds	r7, #16
 802e7fe:	46bd      	mov	sp, r7
 802e800:	bd80      	pop	{r7, pc}

0802e802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802e802:	b580      	push	{r7, lr}
 802e804:	b084      	sub	sp, #16
 802e806:	af00      	add	r7, sp, #0
 802e808:	6078      	str	r0, [r7, #4]
 802e80a:	460b      	mov	r3, r1
 802e80c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e80e:	2300      	movs	r3, #0
 802e810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e812:	2300      	movs	r3, #0
 802e814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802e816:	687b      	ldr	r3, [r7, #4]
 802e818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802e81c:	78fa      	ldrb	r2, [r7, #3]
 802e81e:	4611      	mov	r1, r2
 802e820:	4618      	mov	r0, r3
 802e822:	f7dc fa4d 	bl	800acc0 <HAL_PCD_EP_Close>
 802e826:	4603      	mov	r3, r0
 802e828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e82a:	7bfb      	ldrb	r3, [r7, #15]
 802e82c:	4618      	mov	r0, r3
 802e82e:	f000 f90f 	bl	802ea50 <USBD_Get_USB_Status>
 802e832:	4603      	mov	r3, r0
 802e834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802e836:	7bbb      	ldrb	r3, [r7, #14]
}
 802e838:	4618      	mov	r0, r3
 802e83a:	3710      	adds	r7, #16
 802e83c:	46bd      	mov	sp, r7
 802e83e:	bd80      	pop	{r7, pc}

0802e840 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802e840:	b580      	push	{r7, lr}
 802e842:	b084      	sub	sp, #16
 802e844:	af00      	add	r7, sp, #0
 802e846:	6078      	str	r0, [r7, #4]
 802e848:	460b      	mov	r3, r1
 802e84a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e84c:	2300      	movs	r3, #0
 802e84e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e850:	2300      	movs	r3, #0
 802e852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802e854:	687b      	ldr	r3, [r7, #4]
 802e856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802e85a:	78fa      	ldrb	r2, [r7, #3]
 802e85c:	4611      	mov	r1, r2
 802e85e:	4618      	mov	r0, r3
 802e860:	f7dc fb0e 	bl	800ae80 <HAL_PCD_EP_SetStall>
 802e864:	4603      	mov	r3, r0
 802e866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e868:	7bfb      	ldrb	r3, [r7, #15]
 802e86a:	4618      	mov	r0, r3
 802e86c:	f000 f8f0 	bl	802ea50 <USBD_Get_USB_Status>
 802e870:	4603      	mov	r3, r0
 802e872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802e874:	7bbb      	ldrb	r3, [r7, #14]
}
 802e876:	4618      	mov	r0, r3
 802e878:	3710      	adds	r7, #16
 802e87a:	46bd      	mov	sp, r7
 802e87c:	bd80      	pop	{r7, pc}

0802e87e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802e87e:	b580      	push	{r7, lr}
 802e880:	b084      	sub	sp, #16
 802e882:	af00      	add	r7, sp, #0
 802e884:	6078      	str	r0, [r7, #4]
 802e886:	460b      	mov	r3, r1
 802e888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e88a:	2300      	movs	r3, #0
 802e88c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e88e:	2300      	movs	r3, #0
 802e890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802e892:	687b      	ldr	r3, [r7, #4]
 802e894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802e898:	78fa      	ldrb	r2, [r7, #3]
 802e89a:	4611      	mov	r1, r2
 802e89c:	4618      	mov	r0, r3
 802e89e:	f7dc fb41 	bl	800af24 <HAL_PCD_EP_ClrStall>
 802e8a2:	4603      	mov	r3, r0
 802e8a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e8a6:	7bfb      	ldrb	r3, [r7, #15]
 802e8a8:	4618      	mov	r0, r3
 802e8aa:	f000 f8d1 	bl	802ea50 <USBD_Get_USB_Status>
 802e8ae:	4603      	mov	r3, r0
 802e8b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802e8b2:	7bbb      	ldrb	r3, [r7, #14]
}
 802e8b4:	4618      	mov	r0, r3
 802e8b6:	3710      	adds	r7, #16
 802e8b8:	46bd      	mov	sp, r7
 802e8ba:	bd80      	pop	{r7, pc}

0802e8bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802e8bc:	b480      	push	{r7}
 802e8be:	b085      	sub	sp, #20
 802e8c0:	af00      	add	r7, sp, #0
 802e8c2:	6078      	str	r0, [r7, #4]
 802e8c4:	460b      	mov	r3, r1
 802e8c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802e8c8:	687b      	ldr	r3, [r7, #4]
 802e8ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802e8ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802e8d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802e8d4:	2b00      	cmp	r3, #0
 802e8d6:	da0c      	bge.n	802e8f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802e8d8:	78fb      	ldrb	r3, [r7, #3]
 802e8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802e8de:	68f9      	ldr	r1, [r7, #12]
 802e8e0:	1c5a      	adds	r2, r3, #1
 802e8e2:	4613      	mov	r3, r2
 802e8e4:	009b      	lsls	r3, r3, #2
 802e8e6:	4413      	add	r3, r2
 802e8e8:	00db      	lsls	r3, r3, #3
 802e8ea:	440b      	add	r3, r1
 802e8ec:	3302      	adds	r3, #2
 802e8ee:	781b      	ldrb	r3, [r3, #0]
 802e8f0:	e00b      	b.n	802e90a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802e8f2:	78fb      	ldrb	r3, [r7, #3]
 802e8f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802e8f8:	68f9      	ldr	r1, [r7, #12]
 802e8fa:	4613      	mov	r3, r2
 802e8fc:	009b      	lsls	r3, r3, #2
 802e8fe:	4413      	add	r3, r2
 802e900:	00db      	lsls	r3, r3, #3
 802e902:	440b      	add	r3, r1
 802e904:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 802e908:	781b      	ldrb	r3, [r3, #0]
  }
}
 802e90a:	4618      	mov	r0, r3
 802e90c:	3714      	adds	r7, #20
 802e90e:	46bd      	mov	sp, r7
 802e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e914:	4770      	bx	lr

0802e916 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 802e916:	b580      	push	{r7, lr}
 802e918:	b084      	sub	sp, #16
 802e91a:	af00      	add	r7, sp, #0
 802e91c:	6078      	str	r0, [r7, #4]
 802e91e:	460b      	mov	r3, r1
 802e920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e922:	2300      	movs	r3, #0
 802e924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e926:	2300      	movs	r3, #0
 802e928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802e92a:	687b      	ldr	r3, [r7, #4]
 802e92c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802e930:	78fa      	ldrb	r2, [r7, #3]
 802e932:	4611      	mov	r1, r2
 802e934:	4618      	mov	r0, r3
 802e936:	f7dc f938 	bl	800abaa <HAL_PCD_SetAddress>
 802e93a:	4603      	mov	r3, r0
 802e93c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e93e:	7bfb      	ldrb	r3, [r7, #15]
 802e940:	4618      	mov	r0, r3
 802e942:	f000 f885 	bl	802ea50 <USBD_Get_USB_Status>
 802e946:	4603      	mov	r3, r0
 802e948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802e94a:	7bbb      	ldrb	r3, [r7, #14]
}
 802e94c:	4618      	mov	r0, r3
 802e94e:	3710      	adds	r7, #16
 802e950:	46bd      	mov	sp, r7
 802e952:	bd80      	pop	{r7, pc}

0802e954 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 802e954:	b580      	push	{r7, lr}
 802e956:	b086      	sub	sp, #24
 802e958:	af00      	add	r7, sp, #0
 802e95a:	60f8      	str	r0, [r7, #12]
 802e95c:	607a      	str	r2, [r7, #4]
 802e95e:	461a      	mov	r2, r3
 802e960:	460b      	mov	r3, r1
 802e962:	72fb      	strb	r3, [r7, #11]
 802e964:	4613      	mov	r3, r2
 802e966:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e968:	2300      	movs	r3, #0
 802e96a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e96c:	2300      	movs	r3, #0
 802e96e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802e970:	68fb      	ldr	r3, [r7, #12]
 802e972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e976:	893b      	ldrh	r3, [r7, #8]
 802e978:	7af9      	ldrb	r1, [r7, #11]
 802e97a:	687a      	ldr	r2, [r7, #4]
 802e97c:	f7dc fa3d 	bl	800adfa <HAL_PCD_EP_Transmit>
 802e980:	4603      	mov	r3, r0
 802e982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e984:	7dfb      	ldrb	r3, [r7, #23]
 802e986:	4618      	mov	r0, r3
 802e988:	f000 f862 	bl	802ea50 <USBD_Get_USB_Status>
 802e98c:	4603      	mov	r3, r0
 802e98e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802e990:	7dbb      	ldrb	r3, [r7, #22]
}
 802e992:	4618      	mov	r0, r3
 802e994:	3718      	adds	r7, #24
 802e996:	46bd      	mov	sp, r7
 802e998:	bd80      	pop	{r7, pc}

0802e99a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 802e99a:	b580      	push	{r7, lr}
 802e99c:	b086      	sub	sp, #24
 802e99e:	af00      	add	r7, sp, #0
 802e9a0:	60f8      	str	r0, [r7, #12]
 802e9a2:	607a      	str	r2, [r7, #4]
 802e9a4:	461a      	mov	r2, r3
 802e9a6:	460b      	mov	r3, r1
 802e9a8:	72fb      	strb	r3, [r7, #11]
 802e9aa:	4613      	mov	r3, r2
 802e9ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802e9ae:	2300      	movs	r3, #0
 802e9b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802e9b2:	2300      	movs	r3, #0
 802e9b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802e9b6:	68fb      	ldr	r3, [r7, #12]
 802e9b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802e9bc:	893b      	ldrh	r3, [r7, #8]
 802e9be:	7af9      	ldrb	r1, [r7, #11]
 802e9c0:	687a      	ldr	r2, [r7, #4]
 802e9c2:	f7dc f9c5 	bl	800ad50 <HAL_PCD_EP_Receive>
 802e9c6:	4603      	mov	r3, r0
 802e9c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802e9ca:	7dfb      	ldrb	r3, [r7, #23]
 802e9cc:	4618      	mov	r0, r3
 802e9ce:	f000 f83f 	bl	802ea50 <USBD_Get_USB_Status>
 802e9d2:	4603      	mov	r3, r0
 802e9d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802e9d6:	7dbb      	ldrb	r3, [r7, #22]
}
 802e9d8:	4618      	mov	r0, r3
 802e9da:	3718      	adds	r7, #24
 802e9dc:	46bd      	mov	sp, r7
 802e9de:	bd80      	pop	{r7, pc}

0802e9e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802e9e0:	b580      	push	{r7, lr}
 802e9e2:	b082      	sub	sp, #8
 802e9e4:	af00      	add	r7, sp, #0
 802e9e6:	6078      	str	r0, [r7, #4]
 802e9e8:	460b      	mov	r3, r1
 802e9ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802e9ec:	687b      	ldr	r3, [r7, #4]
 802e9ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802e9f2:	78fa      	ldrb	r2, [r7, #3]
 802e9f4:	4611      	mov	r1, r2
 802e9f6:	4618      	mov	r0, r3
 802e9f8:	f7dc f9e7 	bl	800adca <HAL_PCD_EP_GetRxCount>
 802e9fc:	4603      	mov	r3, r0
}
 802e9fe:	4618      	mov	r0, r3
 802ea00:	3708      	adds	r7, #8
 802ea02:	46bd      	mov	sp, r7
 802ea04:	bd80      	pop	{r7, pc}
	...

0802ea08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 802ea08:	b480      	push	{r7}
 802ea0a:	b083      	sub	sp, #12
 802ea0c:	af00      	add	r7, sp, #0
 802ea0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 802ea10:	4b03      	ldr	r3, [pc, #12]	; (802ea20 <USBD_static_malloc+0x18>)
}
 802ea12:	4618      	mov	r0, r3
 802ea14:	370c      	adds	r7, #12
 802ea16:	46bd      	mov	sp, r7
 802ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea1c:	4770      	bx	lr
 802ea1e:	bf00      	nop
 802ea20:	20002234 	.word	0x20002234

0802ea24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 802ea24:	b480      	push	{r7}
 802ea26:	b083      	sub	sp, #12
 802ea28:	af00      	add	r7, sp, #0
 802ea2a:	6078      	str	r0, [r7, #4]

}
 802ea2c:	bf00      	nop
 802ea2e:	370c      	adds	r7, #12
 802ea30:	46bd      	mov	sp, r7
 802ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea36:	4770      	bx	lr

0802ea38 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802ea38:	b480      	push	{r7}
 802ea3a:	b083      	sub	sp, #12
 802ea3c:	af00      	add	r7, sp, #0
 802ea3e:	6078      	str	r0, [r7, #4]
 802ea40:	460b      	mov	r3, r1
 802ea42:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 802ea44:	bf00      	nop
 802ea46:	370c      	adds	r7, #12
 802ea48:	46bd      	mov	sp, r7
 802ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea4e:	4770      	bx	lr

0802ea50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802ea50:	b480      	push	{r7}
 802ea52:	b085      	sub	sp, #20
 802ea54:	af00      	add	r7, sp, #0
 802ea56:	4603      	mov	r3, r0
 802ea58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802ea5a:	2300      	movs	r3, #0
 802ea5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802ea5e:	79fb      	ldrb	r3, [r7, #7]
 802ea60:	2b03      	cmp	r3, #3
 802ea62:	d817      	bhi.n	802ea94 <USBD_Get_USB_Status+0x44>
 802ea64:	a201      	add	r2, pc, #4	; (adr r2, 802ea6c <USBD_Get_USB_Status+0x1c>)
 802ea66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ea6a:	bf00      	nop
 802ea6c:	0802ea7d 	.word	0x0802ea7d
 802ea70:	0802ea83 	.word	0x0802ea83
 802ea74:	0802ea89 	.word	0x0802ea89
 802ea78:	0802ea8f 	.word	0x0802ea8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 802ea7c:	2300      	movs	r3, #0
 802ea7e:	73fb      	strb	r3, [r7, #15]
    break;
 802ea80:	e00b      	b.n	802ea9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 802ea82:	2302      	movs	r3, #2
 802ea84:	73fb      	strb	r3, [r7, #15]
    break;
 802ea86:	e008      	b.n	802ea9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802ea88:	2301      	movs	r3, #1
 802ea8a:	73fb      	strb	r3, [r7, #15]
    break;
 802ea8c:	e005      	b.n	802ea9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802ea8e:	2302      	movs	r3, #2
 802ea90:	73fb      	strb	r3, [r7, #15]
    break;
 802ea92:	e002      	b.n	802ea9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 802ea94:	2302      	movs	r3, #2
 802ea96:	73fb      	strb	r3, [r7, #15]
    break;
 802ea98:	bf00      	nop
  }
  return usb_status;
 802ea9a:	7bfb      	ldrb	r3, [r7, #15]
}
 802ea9c:	4618      	mov	r0, r3
 802ea9e:	3714      	adds	r7, #20
 802eaa0:	46bd      	mov	sp, r7
 802eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eaa6:	4770      	bx	lr

0802eaa8 <_ZdlPvj>:
 802eaa8:	f000 b8cd 	b.w	802ec46 <_ZdlPv>

0802eaac <_ZdaPv>:
 802eaac:	f000 b8cb 	b.w	802ec46 <_ZdlPv>

0802eab0 <_Znwj>:
 802eab0:	2801      	cmp	r0, #1
 802eab2:	bf38      	it	cc
 802eab4:	2001      	movcc	r0, #1
 802eab6:	b510      	push	{r4, lr}
 802eab8:	4604      	mov	r4, r0
 802eaba:	4620      	mov	r0, r4
 802eabc:	f002 fcb8 	bl	8031430 <malloc>
 802eac0:	b930      	cbnz	r0, 802ead0 <_Znwj+0x20>
 802eac2:	f000 f8c3 	bl	802ec4c <_ZSt15get_new_handlerv>
 802eac6:	b908      	cbnz	r0, 802eacc <_Znwj+0x1c>
 802eac8:	f002 fc44 	bl	8031354 <abort>
 802eacc:	4780      	blx	r0
 802eace:	e7f4      	b.n	802eaba <_Znwj+0xa>
 802ead0:	bd10      	pop	{r4, pc}

0802ead2 <_Znaj>:
 802ead2:	f7ff bfed 	b.w	802eab0 <_Znwj>

0802ead6 <_ZSt17__throw_bad_allocv>:
 802ead6:	b508      	push	{r3, lr}
 802ead8:	f002 fc3c 	bl	8031354 <abort>

0802eadc <_ZSt19__throw_logic_errorPKc>:
 802eadc:	b508      	push	{r3, lr}
 802eade:	f002 fc39 	bl	8031354 <abort>

0802eae2 <_ZSt20__throw_length_errorPKc>:
 802eae2:	b508      	push	{r3, lr}
 802eae4:	f002 fc36 	bl	8031354 <abort>

0802eae8 <_ZSt24__throw_out_of_range_fmtPKcz>:
 802eae8:	b40f      	push	{r0, r1, r2, r3}
 802eaea:	b580      	push	{r7, lr}
 802eaec:	b084      	sub	sp, #16
 802eaee:	af00      	add	r7, sp, #0
 802eaf0:	f107 0418 	add.w	r4, r7, #24
 802eaf4:	f854 2b04 	ldr.w	r2, [r4], #4
 802eaf8:	607a      	str	r2, [r7, #4]
 802eafa:	4610      	mov	r0, r2
 802eafc:	f7d1 fbc2 	bl	8000284 <strlen>
 802eb00:	f200 2307 	addw	r3, r0, #519	; 0x207
 802eb04:	f023 0307 	bic.w	r3, r3, #7
 802eb08:	ebad 0d03 	sub.w	sp, sp, r3
 802eb0c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 802eb10:	687a      	ldr	r2, [r7, #4]
 802eb12:	60fc      	str	r4, [r7, #12]
 802eb14:	4623      	mov	r3, r4
 802eb16:	4668      	mov	r0, sp
 802eb18:	f000 f854 	bl	802ebc4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 802eb1c:	f002 fc1a 	bl	8031354 <abort>

0802eb20 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 802eb20:	b580      	push	{r7, lr}
 802eb22:	b09c      	sub	sp, #112	; 0x70
 802eb24:	4606      	mov	r6, r0
 802eb26:	af00      	add	r7, sp, #0
 802eb28:	460c      	mov	r4, r1
 802eb2a:	1ba4      	subs	r4, r4, r6
 802eb2c:	490e      	ldr	r1, [pc, #56]	; (802eb68 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 802eb2e:	2269      	movs	r2, #105	; 0x69
 802eb30:	1d38      	adds	r0, r7, #4
 802eb32:	f002 fc8d 	bl	8031450 <memcpy>
 802eb36:	f104 0370 	add.w	r3, r4, #112	; 0x70
 802eb3a:	f023 0307 	bic.w	r3, r3, #7
 802eb3e:	ebad 0d03 	sub.w	sp, sp, r3
 802eb42:	466d      	mov	r5, sp
 802eb44:	2268      	movs	r2, #104	; 0x68
 802eb46:	1d39      	adds	r1, r7, #4
 802eb48:	4628      	mov	r0, r5
 802eb4a:	f002 fc81 	bl	8031450 <memcpy>
 802eb4e:	4622      	mov	r2, r4
 802eb50:	4631      	mov	r1, r6
 802eb52:	f105 0068 	add.w	r0, r5, #104	; 0x68
 802eb56:	442c      	add	r4, r5
 802eb58:	f002 fc7a 	bl	8031450 <memcpy>
 802eb5c:	2300      	movs	r3, #0
 802eb5e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 802eb62:	4628      	mov	r0, r5
 802eb64:	f7ff ffba 	bl	802eadc <_ZSt19__throw_logic_errorPKc>
 802eb68:	080371a8 	.word	0x080371a8

0802eb6c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 802eb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802eb70:	af00      	add	r7, sp, #0
 802eb72:	b084      	sub	sp, #16
 802eb74:	466d      	mov	r5, sp
 802eb76:	f105 040c 	add.w	r4, r5, #12
 802eb7a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 802ebc0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 802eb7e:	4623      	mov	r3, r4
 802eb80:	f04f 0c0a 	mov.w	ip, #10
 802eb84:	fbb2 f6fc 	udiv	r6, r2, ip
 802eb88:	fb0c 2e16 	mls	lr, ip, r6, r2
 802eb8c:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802eb90:	f803 ed01 	strb.w	lr, [r3, #-1]!
 802eb94:	4696      	mov	lr, r2
 802eb96:	f1be 0f09 	cmp.w	lr, #9
 802eb9a:	4632      	mov	r2, r6
 802eb9c:	d8f2      	bhi.n	802eb84 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 802eb9e:	1ae4      	subs	r4, r4, r3
 802eba0:	428c      	cmp	r4, r1
 802eba2:	d809      	bhi.n	802ebb8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 802eba4:	f1c4 030c 	rsb	r3, r4, #12
 802eba8:	4622      	mov	r2, r4
 802ebaa:	18e9      	adds	r1, r5, r3
 802ebac:	f002 fc50 	bl	8031450 <memcpy>
 802ebb0:	4620      	mov	r0, r4
 802ebb2:	46bd      	mov	sp, r7
 802ebb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ebb8:	f04f 34ff 	mov.w	r4, #4294967295
 802ebbc:	e7f8      	b.n	802ebb0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 802ebbe:	bf00      	nop
 802ebc0:	08037211 	.word	0x08037211

0802ebc4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 802ebc4:	3901      	subs	r1, #1
 802ebc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ebca:	4607      	mov	r7, r0
 802ebcc:	4615      	mov	r5, r2
 802ebce:	eb00 0801 	add.w	r8, r0, r1
 802ebd2:	4604      	mov	r4, r0
 802ebd4:	782a      	ldrb	r2, [r5, #0]
 802ebd6:	b392      	cbz	r2, 802ec3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 802ebd8:	4544      	cmp	r4, r8
 802ebda:	d22a      	bcs.n	802ec32 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 802ebdc:	2a25      	cmp	r2, #37	; 0x25
 802ebde:	d107      	bne.n	802ebf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802ebe0:	786a      	ldrb	r2, [r5, #1]
 802ebe2:	2a73      	cmp	r2, #115	; 0x73
 802ebe4:	d009      	beq.n	802ebfa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 802ebe6:	2a7a      	cmp	r2, #122	; 0x7a
 802ebe8:	d012      	beq.n	802ec10 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 802ebea:	2a25      	cmp	r2, #37	; 0x25
 802ebec:	d100      	bne.n	802ebf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802ebee:	3501      	adds	r5, #1
 802ebf0:	f815 2b01 	ldrb.w	r2, [r5], #1
 802ebf4:	f804 2b01 	strb.w	r2, [r4], #1
 802ebf8:	e7ec      	b.n	802ebd4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802ebfa:	f853 2b04 	ldr.w	r2, [r3], #4
 802ebfe:	3a01      	subs	r2, #1
 802ec00:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 802ec04:	b1c9      	cbz	r1, 802ec3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 802ec06:	4544      	cmp	r4, r8
 802ec08:	d013      	beq.n	802ec32 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 802ec0a:	f804 1b01 	strb.w	r1, [r4], #1
 802ec0e:	e7f7      	b.n	802ec00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 802ec10:	78aa      	ldrb	r2, [r5, #2]
 802ec12:	2a75      	cmp	r2, #117	; 0x75
 802ec14:	d1ec      	bne.n	802ebf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802ec16:	461e      	mov	r6, r3
 802ec18:	eba8 0104 	sub.w	r1, r8, r4
 802ec1c:	f856 2b04 	ldr.w	r2, [r6], #4
 802ec20:	4620      	mov	r0, r4
 802ec22:	f7ff ffa3 	bl	802eb6c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 802ec26:	2800      	cmp	r0, #0
 802ec28:	dd03      	ble.n	802ec32 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 802ec2a:	4404      	add	r4, r0
 802ec2c:	3503      	adds	r5, #3
 802ec2e:	4633      	mov	r3, r6
 802ec30:	e7d0      	b.n	802ebd4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802ec32:	4621      	mov	r1, r4
 802ec34:	4638      	mov	r0, r7
 802ec36:	f7ff ff73 	bl	802eb20 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 802ec3a:	3502      	adds	r5, #2
 802ec3c:	e7ca      	b.n	802ebd4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802ec3e:	7022      	strb	r2, [r4, #0]
 802ec40:	1be0      	subs	r0, r4, r7
 802ec42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802ec46 <_ZdlPv>:
 802ec46:	f002 bbfb 	b.w	8031440 <free>
	...

0802ec4c <_ZSt15get_new_handlerv>:
 802ec4c:	4b02      	ldr	r3, [pc, #8]	; (802ec58 <_ZSt15get_new_handlerv+0xc>)
 802ec4e:	6818      	ldr	r0, [r3, #0]
 802ec50:	f3bf 8f5b 	dmb	ish
 802ec54:	4770      	bx	lr
 802ec56:	bf00      	nop
 802ec58:	20002454 	.word	0x20002454
 802ec5c:	00000000 	.word	0x00000000

0802ec60 <cos>:
 802ec60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ec62:	ec53 2b10 	vmov	r2, r3, d0
 802ec66:	4826      	ldr	r0, [pc, #152]	; (802ed00 <cos+0xa0>)
 802ec68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802ec6c:	4281      	cmp	r1, r0
 802ec6e:	dc06      	bgt.n	802ec7e <cos+0x1e>
 802ec70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 802ecf8 <cos+0x98>
 802ec74:	b005      	add	sp, #20
 802ec76:	f85d eb04 	ldr.w	lr, [sp], #4
 802ec7a:	f001 bd95 	b.w	80307a8 <__kernel_cos>
 802ec7e:	4821      	ldr	r0, [pc, #132]	; (802ed04 <cos+0xa4>)
 802ec80:	4281      	cmp	r1, r0
 802ec82:	dd09      	ble.n	802ec98 <cos+0x38>
 802ec84:	ee10 0a10 	vmov	r0, s0
 802ec88:	4619      	mov	r1, r3
 802ec8a:	f7d1 fb07 	bl	800029c <__aeabi_dsub>
 802ec8e:	ec41 0b10 	vmov	d0, r0, r1
 802ec92:	b005      	add	sp, #20
 802ec94:	f85d fb04 	ldr.w	pc, [sp], #4
 802ec98:	4668      	mov	r0, sp
 802ec9a:	f001 f8ad 	bl	802fdf8 <__ieee754_rem_pio2>
 802ec9e:	f000 0003 	and.w	r0, r0, #3
 802eca2:	2801      	cmp	r0, #1
 802eca4:	d00b      	beq.n	802ecbe <cos+0x5e>
 802eca6:	2802      	cmp	r0, #2
 802eca8:	d016      	beq.n	802ecd8 <cos+0x78>
 802ecaa:	b9e0      	cbnz	r0, 802ece6 <cos+0x86>
 802ecac:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ecb0:	ed9d 0b00 	vldr	d0, [sp]
 802ecb4:	f001 fd78 	bl	80307a8 <__kernel_cos>
 802ecb8:	ec51 0b10 	vmov	r0, r1, d0
 802ecbc:	e7e7      	b.n	802ec8e <cos+0x2e>
 802ecbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ecc2:	ed9d 0b00 	vldr	d0, [sp]
 802ecc6:	f002 f987 	bl	8030fd8 <__kernel_sin>
 802ecca:	ec53 2b10 	vmov	r2, r3, d0
 802ecce:	ee10 0a10 	vmov	r0, s0
 802ecd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802ecd6:	e7da      	b.n	802ec8e <cos+0x2e>
 802ecd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ecdc:	ed9d 0b00 	vldr	d0, [sp]
 802ece0:	f001 fd62 	bl	80307a8 <__kernel_cos>
 802ece4:	e7f1      	b.n	802ecca <cos+0x6a>
 802ece6:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ecea:	ed9d 0b00 	vldr	d0, [sp]
 802ecee:	2001      	movs	r0, #1
 802ecf0:	f002 f972 	bl	8030fd8 <__kernel_sin>
 802ecf4:	e7e0      	b.n	802ecb8 <cos+0x58>
 802ecf6:	bf00      	nop
	...
 802ed00:	3fe921fb 	.word	0x3fe921fb
 802ed04:	7fefffff 	.word	0x7fefffff

0802ed08 <floor>:
 802ed08:	ec51 0b10 	vmov	r0, r1, d0
 802ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ed10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802ed14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 802ed18:	2e13      	cmp	r6, #19
 802ed1a:	ee10 5a10 	vmov	r5, s0
 802ed1e:	ee10 8a10 	vmov	r8, s0
 802ed22:	460c      	mov	r4, r1
 802ed24:	dc32      	bgt.n	802ed8c <floor+0x84>
 802ed26:	2e00      	cmp	r6, #0
 802ed28:	da14      	bge.n	802ed54 <floor+0x4c>
 802ed2a:	a333      	add	r3, pc, #204	; (adr r3, 802edf8 <floor+0xf0>)
 802ed2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed30:	f7d1 fab6 	bl	80002a0 <__adddf3>
 802ed34:	2200      	movs	r2, #0
 802ed36:	2300      	movs	r3, #0
 802ed38:	f7d1 fef8 	bl	8000b2c <__aeabi_dcmpgt>
 802ed3c:	b138      	cbz	r0, 802ed4e <floor+0x46>
 802ed3e:	2c00      	cmp	r4, #0
 802ed40:	da57      	bge.n	802edf2 <floor+0xea>
 802ed42:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802ed46:	431d      	orrs	r5, r3
 802ed48:	d001      	beq.n	802ed4e <floor+0x46>
 802ed4a:	4c2d      	ldr	r4, [pc, #180]	; (802ee00 <floor+0xf8>)
 802ed4c:	2500      	movs	r5, #0
 802ed4e:	4621      	mov	r1, r4
 802ed50:	4628      	mov	r0, r5
 802ed52:	e025      	b.n	802eda0 <floor+0x98>
 802ed54:	4f2b      	ldr	r7, [pc, #172]	; (802ee04 <floor+0xfc>)
 802ed56:	4137      	asrs	r7, r6
 802ed58:	ea01 0307 	and.w	r3, r1, r7
 802ed5c:	4303      	orrs	r3, r0
 802ed5e:	d01f      	beq.n	802eda0 <floor+0x98>
 802ed60:	a325      	add	r3, pc, #148	; (adr r3, 802edf8 <floor+0xf0>)
 802ed62:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed66:	f7d1 fa9b 	bl	80002a0 <__adddf3>
 802ed6a:	2200      	movs	r2, #0
 802ed6c:	2300      	movs	r3, #0
 802ed6e:	f7d1 fedd 	bl	8000b2c <__aeabi_dcmpgt>
 802ed72:	2800      	cmp	r0, #0
 802ed74:	d0eb      	beq.n	802ed4e <floor+0x46>
 802ed76:	2c00      	cmp	r4, #0
 802ed78:	bfbe      	ittt	lt
 802ed7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802ed7e:	fa43 f606 	asrlt.w	r6, r3, r6
 802ed82:	19a4      	addlt	r4, r4, r6
 802ed84:	ea24 0407 	bic.w	r4, r4, r7
 802ed88:	2500      	movs	r5, #0
 802ed8a:	e7e0      	b.n	802ed4e <floor+0x46>
 802ed8c:	2e33      	cmp	r6, #51	; 0x33
 802ed8e:	dd0b      	ble.n	802eda8 <floor+0xa0>
 802ed90:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802ed94:	d104      	bne.n	802eda0 <floor+0x98>
 802ed96:	ee10 2a10 	vmov	r2, s0
 802ed9a:	460b      	mov	r3, r1
 802ed9c:	f7d1 fa80 	bl	80002a0 <__adddf3>
 802eda0:	ec41 0b10 	vmov	d0, r0, r1
 802eda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802eda8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802edac:	f04f 33ff 	mov.w	r3, #4294967295
 802edb0:	fa23 f707 	lsr.w	r7, r3, r7
 802edb4:	4207      	tst	r7, r0
 802edb6:	d0f3      	beq.n	802eda0 <floor+0x98>
 802edb8:	a30f      	add	r3, pc, #60	; (adr r3, 802edf8 <floor+0xf0>)
 802edba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802edbe:	f7d1 fa6f 	bl	80002a0 <__adddf3>
 802edc2:	2200      	movs	r2, #0
 802edc4:	2300      	movs	r3, #0
 802edc6:	f7d1 feb1 	bl	8000b2c <__aeabi_dcmpgt>
 802edca:	2800      	cmp	r0, #0
 802edcc:	d0bf      	beq.n	802ed4e <floor+0x46>
 802edce:	2c00      	cmp	r4, #0
 802edd0:	da02      	bge.n	802edd8 <floor+0xd0>
 802edd2:	2e14      	cmp	r6, #20
 802edd4:	d103      	bne.n	802edde <floor+0xd6>
 802edd6:	3401      	adds	r4, #1
 802edd8:	ea25 0507 	bic.w	r5, r5, r7
 802eddc:	e7b7      	b.n	802ed4e <floor+0x46>
 802edde:	2301      	movs	r3, #1
 802ede0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802ede4:	fa03 f606 	lsl.w	r6, r3, r6
 802ede8:	4435      	add	r5, r6
 802edea:	4545      	cmp	r5, r8
 802edec:	bf38      	it	cc
 802edee:	18e4      	addcc	r4, r4, r3
 802edf0:	e7f2      	b.n	802edd8 <floor+0xd0>
 802edf2:	2500      	movs	r5, #0
 802edf4:	462c      	mov	r4, r5
 802edf6:	e7aa      	b.n	802ed4e <floor+0x46>
 802edf8:	8800759c 	.word	0x8800759c
 802edfc:	7e37e43c 	.word	0x7e37e43c
 802ee00:	bff00000 	.word	0xbff00000
 802ee04:	000fffff 	.word	0x000fffff

0802ee08 <frexp>:
 802ee08:	b570      	push	{r4, r5, r6, lr}
 802ee0a:	2100      	movs	r1, #0
 802ee0c:	ec55 4b10 	vmov	r4, r5, d0
 802ee10:	6001      	str	r1, [r0, #0]
 802ee12:	4916      	ldr	r1, [pc, #88]	; (802ee6c <frexp+0x64>)
 802ee14:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 802ee18:	428a      	cmp	r2, r1
 802ee1a:	4606      	mov	r6, r0
 802ee1c:	462b      	mov	r3, r5
 802ee1e:	dc22      	bgt.n	802ee66 <frexp+0x5e>
 802ee20:	ee10 1a10 	vmov	r1, s0
 802ee24:	4311      	orrs	r1, r2
 802ee26:	d01e      	beq.n	802ee66 <frexp+0x5e>
 802ee28:	4911      	ldr	r1, [pc, #68]	; (802ee70 <frexp+0x68>)
 802ee2a:	4029      	ands	r1, r5
 802ee2c:	b969      	cbnz	r1, 802ee4a <frexp+0x42>
 802ee2e:	4b11      	ldr	r3, [pc, #68]	; (802ee74 <frexp+0x6c>)
 802ee30:	2200      	movs	r2, #0
 802ee32:	ee10 0a10 	vmov	r0, s0
 802ee36:	4629      	mov	r1, r5
 802ee38:	f7d1 fbe8 	bl	800060c <__aeabi_dmul>
 802ee3c:	460b      	mov	r3, r1
 802ee3e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802ee42:	f06f 0135 	mvn.w	r1, #53	; 0x35
 802ee46:	4604      	mov	r4, r0
 802ee48:	6031      	str	r1, [r6, #0]
 802ee4a:	6831      	ldr	r1, [r6, #0]
 802ee4c:	1512      	asrs	r2, r2, #20
 802ee4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802ee52:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 802ee56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802ee5a:	440a      	add	r2, r1
 802ee5c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 802ee60:	6032      	str	r2, [r6, #0]
 802ee62:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802ee66:	ec45 4b10 	vmov	d0, r4, r5
 802ee6a:	bd70      	pop	{r4, r5, r6, pc}
 802ee6c:	7fefffff 	.word	0x7fefffff
 802ee70:	7ff00000 	.word	0x7ff00000
 802ee74:	43500000 	.word	0x43500000

0802ee78 <round>:
 802ee78:	ec51 0b10 	vmov	r0, r1, d0
 802ee7c:	b570      	push	{r4, r5, r6, lr}
 802ee7e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 802ee82:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 802ee86:	2c13      	cmp	r4, #19
 802ee88:	ee10 2a10 	vmov	r2, s0
 802ee8c:	460b      	mov	r3, r1
 802ee8e:	dc19      	bgt.n	802eec4 <round+0x4c>
 802ee90:	2c00      	cmp	r4, #0
 802ee92:	da09      	bge.n	802eea8 <round+0x30>
 802ee94:	3401      	adds	r4, #1
 802ee96:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 802ee9a:	d103      	bne.n	802eea4 <round+0x2c>
 802ee9c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802eea0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802eea4:	2200      	movs	r2, #0
 802eea6:	e028      	b.n	802eefa <round+0x82>
 802eea8:	4d15      	ldr	r5, [pc, #84]	; (802ef00 <round+0x88>)
 802eeaa:	4125      	asrs	r5, r4
 802eeac:	ea01 0605 	and.w	r6, r1, r5
 802eeb0:	4332      	orrs	r2, r6
 802eeb2:	d00e      	beq.n	802eed2 <round+0x5a>
 802eeb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 802eeb8:	fa42 f404 	asr.w	r4, r2, r4
 802eebc:	4423      	add	r3, r4
 802eebe:	ea23 0305 	bic.w	r3, r3, r5
 802eec2:	e7ef      	b.n	802eea4 <round+0x2c>
 802eec4:	2c33      	cmp	r4, #51	; 0x33
 802eec6:	dd07      	ble.n	802eed8 <round+0x60>
 802eec8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 802eecc:	d101      	bne.n	802eed2 <round+0x5a>
 802eece:	f7d1 f9e7 	bl	80002a0 <__adddf3>
 802eed2:	ec41 0b10 	vmov	d0, r0, r1
 802eed6:	bd70      	pop	{r4, r5, r6, pc}
 802eed8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 802eedc:	f04f 35ff 	mov.w	r5, #4294967295
 802eee0:	40f5      	lsrs	r5, r6
 802eee2:	4228      	tst	r0, r5
 802eee4:	d0f5      	beq.n	802eed2 <round+0x5a>
 802eee6:	2101      	movs	r1, #1
 802eee8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 802eeec:	fa01 f404 	lsl.w	r4, r1, r4
 802eef0:	1912      	adds	r2, r2, r4
 802eef2:	bf28      	it	cs
 802eef4:	185b      	addcs	r3, r3, r1
 802eef6:	ea22 0205 	bic.w	r2, r2, r5
 802eefa:	4619      	mov	r1, r3
 802eefc:	4610      	mov	r0, r2
 802eefe:	e7e8      	b.n	802eed2 <round+0x5a>
 802ef00:	000fffff 	.word	0x000fffff
 802ef04:	00000000 	.word	0x00000000

0802ef08 <sin>:
 802ef08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ef0a:	ec53 2b10 	vmov	r2, r3, d0
 802ef0e:	4828      	ldr	r0, [pc, #160]	; (802efb0 <sin+0xa8>)
 802ef10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802ef14:	4281      	cmp	r1, r0
 802ef16:	dc07      	bgt.n	802ef28 <sin+0x20>
 802ef18:	ed9f 1b23 	vldr	d1, [pc, #140]	; 802efa8 <sin+0xa0>
 802ef1c:	2000      	movs	r0, #0
 802ef1e:	b005      	add	sp, #20
 802ef20:	f85d eb04 	ldr.w	lr, [sp], #4
 802ef24:	f002 b858 	b.w	8030fd8 <__kernel_sin>
 802ef28:	4822      	ldr	r0, [pc, #136]	; (802efb4 <sin+0xac>)
 802ef2a:	4281      	cmp	r1, r0
 802ef2c:	dd09      	ble.n	802ef42 <sin+0x3a>
 802ef2e:	ee10 0a10 	vmov	r0, s0
 802ef32:	4619      	mov	r1, r3
 802ef34:	f7d1 f9b2 	bl	800029c <__aeabi_dsub>
 802ef38:	ec41 0b10 	vmov	d0, r0, r1
 802ef3c:	b005      	add	sp, #20
 802ef3e:	f85d fb04 	ldr.w	pc, [sp], #4
 802ef42:	4668      	mov	r0, sp
 802ef44:	f000 ff58 	bl	802fdf8 <__ieee754_rem_pio2>
 802ef48:	f000 0003 	and.w	r0, r0, #3
 802ef4c:	2801      	cmp	r0, #1
 802ef4e:	d00c      	beq.n	802ef6a <sin+0x62>
 802ef50:	2802      	cmp	r0, #2
 802ef52:	d011      	beq.n	802ef78 <sin+0x70>
 802ef54:	b9f0      	cbnz	r0, 802ef94 <sin+0x8c>
 802ef56:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ef5a:	ed9d 0b00 	vldr	d0, [sp]
 802ef5e:	2001      	movs	r0, #1
 802ef60:	f002 f83a 	bl	8030fd8 <__kernel_sin>
 802ef64:	ec51 0b10 	vmov	r0, r1, d0
 802ef68:	e7e6      	b.n	802ef38 <sin+0x30>
 802ef6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ef6e:	ed9d 0b00 	vldr	d0, [sp]
 802ef72:	f001 fc19 	bl	80307a8 <__kernel_cos>
 802ef76:	e7f5      	b.n	802ef64 <sin+0x5c>
 802ef78:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ef7c:	ed9d 0b00 	vldr	d0, [sp]
 802ef80:	2001      	movs	r0, #1
 802ef82:	f002 f829 	bl	8030fd8 <__kernel_sin>
 802ef86:	ec53 2b10 	vmov	r2, r3, d0
 802ef8a:	ee10 0a10 	vmov	r0, s0
 802ef8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802ef92:	e7d1      	b.n	802ef38 <sin+0x30>
 802ef94:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ef98:	ed9d 0b00 	vldr	d0, [sp]
 802ef9c:	f001 fc04 	bl	80307a8 <__kernel_cos>
 802efa0:	e7f1      	b.n	802ef86 <sin+0x7e>
 802efa2:	bf00      	nop
 802efa4:	f3af 8000 	nop.w
	...
 802efb0:	3fe921fb 	.word	0x3fe921fb
 802efb4:	7fefffff 	.word	0x7fefffff

0802efb8 <ceilf>:
 802efb8:	ee10 3a10 	vmov	r3, s0
 802efbc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802efc0:	3a7f      	subs	r2, #127	; 0x7f
 802efc2:	2a16      	cmp	r2, #22
 802efc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802efc8:	dc2a      	bgt.n	802f020 <ceilf+0x68>
 802efca:	2a00      	cmp	r2, #0
 802efcc:	da11      	bge.n	802eff2 <ceilf+0x3a>
 802efce:	eddf 7a19 	vldr	s15, [pc, #100]	; 802f034 <ceilf+0x7c>
 802efd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 802efd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802efda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802efde:	dd05      	ble.n	802efec <ceilf+0x34>
 802efe0:	2b00      	cmp	r3, #0
 802efe2:	db23      	blt.n	802f02c <ceilf+0x74>
 802efe4:	2900      	cmp	r1, #0
 802efe6:	bf18      	it	ne
 802efe8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802efec:	ee00 3a10 	vmov	s0, r3
 802eff0:	4770      	bx	lr
 802eff2:	4911      	ldr	r1, [pc, #68]	; (802f038 <ceilf+0x80>)
 802eff4:	4111      	asrs	r1, r2
 802eff6:	420b      	tst	r3, r1
 802eff8:	d0fa      	beq.n	802eff0 <ceilf+0x38>
 802effa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802f034 <ceilf+0x7c>
 802effe:	ee30 0a27 	vadd.f32	s0, s0, s15
 802f002:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f00a:	ddef      	ble.n	802efec <ceilf+0x34>
 802f00c:	2b00      	cmp	r3, #0
 802f00e:	bfc2      	ittt	gt
 802f010:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802f014:	fa40 f202 	asrgt.w	r2, r0, r2
 802f018:	189b      	addgt	r3, r3, r2
 802f01a:	ea23 0301 	bic.w	r3, r3, r1
 802f01e:	e7e5      	b.n	802efec <ceilf+0x34>
 802f020:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802f024:	d3e4      	bcc.n	802eff0 <ceilf+0x38>
 802f026:	ee30 0a00 	vadd.f32	s0, s0, s0
 802f02a:	4770      	bx	lr
 802f02c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802f030:	e7dc      	b.n	802efec <ceilf+0x34>
 802f032:	bf00      	nop
 802f034:	7149f2ca 	.word	0x7149f2ca
 802f038:	007fffff 	.word	0x007fffff

0802f03c <floorf>:
 802f03c:	ee10 3a10 	vmov	r3, s0
 802f040:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802f044:	3a7f      	subs	r2, #127	; 0x7f
 802f046:	2a16      	cmp	r2, #22
 802f048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802f04c:	dc2a      	bgt.n	802f0a4 <floorf+0x68>
 802f04e:	2a00      	cmp	r2, #0
 802f050:	da11      	bge.n	802f076 <floorf+0x3a>
 802f052:	eddf 7a18 	vldr	s15, [pc, #96]	; 802f0b4 <floorf+0x78>
 802f056:	ee30 0a27 	vadd.f32	s0, s0, s15
 802f05a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802f05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f062:	dd05      	ble.n	802f070 <floorf+0x34>
 802f064:	2b00      	cmp	r3, #0
 802f066:	da23      	bge.n	802f0b0 <floorf+0x74>
 802f068:	4a13      	ldr	r2, [pc, #76]	; (802f0b8 <floorf+0x7c>)
 802f06a:	2900      	cmp	r1, #0
 802f06c:	bf18      	it	ne
 802f06e:	4613      	movne	r3, r2
 802f070:	ee00 3a10 	vmov	s0, r3
 802f074:	4770      	bx	lr
 802f076:	4911      	ldr	r1, [pc, #68]	; (802f0bc <floorf+0x80>)
 802f078:	4111      	asrs	r1, r2
 802f07a:	420b      	tst	r3, r1
 802f07c:	d0fa      	beq.n	802f074 <floorf+0x38>
 802f07e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802f0b4 <floorf+0x78>
 802f082:	ee30 0a27 	vadd.f32	s0, s0, s15
 802f086:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802f08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f08e:	ddef      	ble.n	802f070 <floorf+0x34>
 802f090:	2b00      	cmp	r3, #0
 802f092:	bfbe      	ittt	lt
 802f094:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802f098:	fa40 f202 	asrlt.w	r2, r0, r2
 802f09c:	189b      	addlt	r3, r3, r2
 802f09e:	ea23 0301 	bic.w	r3, r3, r1
 802f0a2:	e7e5      	b.n	802f070 <floorf+0x34>
 802f0a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802f0a8:	d3e4      	bcc.n	802f074 <floorf+0x38>
 802f0aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 802f0ae:	4770      	bx	lr
 802f0b0:	2300      	movs	r3, #0
 802f0b2:	e7dd      	b.n	802f070 <floorf+0x34>
 802f0b4:	7149f2ca 	.word	0x7149f2ca
 802f0b8:	bf800000 	.word	0xbf800000
 802f0bc:	007fffff 	.word	0x007fffff

0802f0c0 <fmaf>:
 802f0c0:	eea0 0a20 	vfma.f32	s0, s0, s1
 802f0c4:	4770      	bx	lr
	...

0802f0c8 <frexpf>:
 802f0c8:	ee10 3a10 	vmov	r3, s0
 802f0cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802f0d0:	2100      	movs	r1, #0
 802f0d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802f0d6:	6001      	str	r1, [r0, #0]
 802f0d8:	da19      	bge.n	802f10e <frexpf+0x46>
 802f0da:	b1c2      	cbz	r2, 802f10e <frexpf+0x46>
 802f0dc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802f0e0:	d10a      	bne.n	802f0f8 <frexpf+0x30>
 802f0e2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802f110 <frexpf+0x48>
 802f0e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 802f0ea:	f06f 0118 	mvn.w	r1, #24
 802f0ee:	ee17 3a90 	vmov	r3, s15
 802f0f2:	6001      	str	r1, [r0, #0]
 802f0f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802f0f8:	6801      	ldr	r1, [r0, #0]
 802f0fa:	15d2      	asrs	r2, r2, #23
 802f0fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802f100:	3a7e      	subs	r2, #126	; 0x7e
 802f102:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 802f106:	440a      	add	r2, r1
 802f108:	ee00 3a10 	vmov	s0, r3
 802f10c:	6002      	str	r2, [r0, #0]
 802f10e:	4770      	bx	lr
 802f110:	4c000000 	.word	0x4c000000

0802f114 <roundf>:
 802f114:	ee10 0a10 	vmov	r0, s0
 802f118:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 802f11c:	3a7f      	subs	r2, #127	; 0x7f
 802f11e:	2a16      	cmp	r2, #22
 802f120:	dc15      	bgt.n	802f14e <roundf+0x3a>
 802f122:	2a00      	cmp	r2, #0
 802f124:	da08      	bge.n	802f138 <roundf+0x24>
 802f126:	3201      	adds	r2, #1
 802f128:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 802f12c:	d101      	bne.n	802f132 <roundf+0x1e>
 802f12e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 802f132:	ee00 3a10 	vmov	s0, r3
 802f136:	4770      	bx	lr
 802f138:	4907      	ldr	r1, [pc, #28]	; (802f158 <roundf+0x44>)
 802f13a:	4111      	asrs	r1, r2
 802f13c:	4208      	tst	r0, r1
 802f13e:	d0fa      	beq.n	802f136 <roundf+0x22>
 802f140:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802f144:	4113      	asrs	r3, r2
 802f146:	4403      	add	r3, r0
 802f148:	ea23 0301 	bic.w	r3, r3, r1
 802f14c:	e7f1      	b.n	802f132 <roundf+0x1e>
 802f14e:	2a80      	cmp	r2, #128	; 0x80
 802f150:	d1f1      	bne.n	802f136 <roundf+0x22>
 802f152:	ee30 0a00 	vadd.f32	s0, s0, s0
 802f156:	4770      	bx	lr
 802f158:	007fffff 	.word	0x007fffff

0802f15c <pow>:
 802f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f15e:	ed2d 8b02 	vpush	{d8}
 802f162:	eeb0 8a40 	vmov.f32	s16, s0
 802f166:	eef0 8a60 	vmov.f32	s17, s1
 802f16a:	ec55 4b11 	vmov	r4, r5, d1
 802f16e:	f000 f913 	bl	802f398 <__ieee754_pow>
 802f172:	4622      	mov	r2, r4
 802f174:	462b      	mov	r3, r5
 802f176:	4620      	mov	r0, r4
 802f178:	4629      	mov	r1, r5
 802f17a:	ec57 6b10 	vmov	r6, r7, d0
 802f17e:	f7d1 fcdf 	bl	8000b40 <__aeabi_dcmpun>
 802f182:	2800      	cmp	r0, #0
 802f184:	d13b      	bne.n	802f1fe <pow+0xa2>
 802f186:	ec51 0b18 	vmov	r0, r1, d8
 802f18a:	2200      	movs	r2, #0
 802f18c:	2300      	movs	r3, #0
 802f18e:	f7d1 fca5 	bl	8000adc <__aeabi_dcmpeq>
 802f192:	b1b8      	cbz	r0, 802f1c4 <pow+0x68>
 802f194:	2200      	movs	r2, #0
 802f196:	2300      	movs	r3, #0
 802f198:	4620      	mov	r0, r4
 802f19a:	4629      	mov	r1, r5
 802f19c:	f7d1 fc9e 	bl	8000adc <__aeabi_dcmpeq>
 802f1a0:	2800      	cmp	r0, #0
 802f1a2:	d146      	bne.n	802f232 <pow+0xd6>
 802f1a4:	ec45 4b10 	vmov	d0, r4, r5
 802f1a8:	f002 f82f 	bl	803120a <finite>
 802f1ac:	b338      	cbz	r0, 802f1fe <pow+0xa2>
 802f1ae:	2200      	movs	r2, #0
 802f1b0:	2300      	movs	r3, #0
 802f1b2:	4620      	mov	r0, r4
 802f1b4:	4629      	mov	r1, r5
 802f1b6:	f7d1 fc9b 	bl	8000af0 <__aeabi_dcmplt>
 802f1ba:	b300      	cbz	r0, 802f1fe <pow+0xa2>
 802f1bc:	f002 f8f8 	bl	80313b0 <__errno>
 802f1c0:	2322      	movs	r3, #34	; 0x22
 802f1c2:	e01b      	b.n	802f1fc <pow+0xa0>
 802f1c4:	ec47 6b10 	vmov	d0, r6, r7
 802f1c8:	f002 f81f 	bl	803120a <finite>
 802f1cc:	b9e0      	cbnz	r0, 802f208 <pow+0xac>
 802f1ce:	eeb0 0a48 	vmov.f32	s0, s16
 802f1d2:	eef0 0a68 	vmov.f32	s1, s17
 802f1d6:	f002 f818 	bl	803120a <finite>
 802f1da:	b1a8      	cbz	r0, 802f208 <pow+0xac>
 802f1dc:	ec45 4b10 	vmov	d0, r4, r5
 802f1e0:	f002 f813 	bl	803120a <finite>
 802f1e4:	b180      	cbz	r0, 802f208 <pow+0xac>
 802f1e6:	4632      	mov	r2, r6
 802f1e8:	463b      	mov	r3, r7
 802f1ea:	4630      	mov	r0, r6
 802f1ec:	4639      	mov	r1, r7
 802f1ee:	f7d1 fca7 	bl	8000b40 <__aeabi_dcmpun>
 802f1f2:	2800      	cmp	r0, #0
 802f1f4:	d0e2      	beq.n	802f1bc <pow+0x60>
 802f1f6:	f002 f8db 	bl	80313b0 <__errno>
 802f1fa:	2321      	movs	r3, #33	; 0x21
 802f1fc:	6003      	str	r3, [r0, #0]
 802f1fe:	ecbd 8b02 	vpop	{d8}
 802f202:	ec47 6b10 	vmov	d0, r6, r7
 802f206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f208:	2200      	movs	r2, #0
 802f20a:	2300      	movs	r3, #0
 802f20c:	4630      	mov	r0, r6
 802f20e:	4639      	mov	r1, r7
 802f210:	f7d1 fc64 	bl	8000adc <__aeabi_dcmpeq>
 802f214:	2800      	cmp	r0, #0
 802f216:	d0f2      	beq.n	802f1fe <pow+0xa2>
 802f218:	eeb0 0a48 	vmov.f32	s0, s16
 802f21c:	eef0 0a68 	vmov.f32	s1, s17
 802f220:	f001 fff3 	bl	803120a <finite>
 802f224:	2800      	cmp	r0, #0
 802f226:	d0ea      	beq.n	802f1fe <pow+0xa2>
 802f228:	ec45 4b10 	vmov	d0, r4, r5
 802f22c:	f001 ffed 	bl	803120a <finite>
 802f230:	e7c3      	b.n	802f1ba <pow+0x5e>
 802f232:	4f01      	ldr	r7, [pc, #4]	; (802f238 <pow+0xdc>)
 802f234:	2600      	movs	r6, #0
 802f236:	e7e2      	b.n	802f1fe <pow+0xa2>
 802f238:	3ff00000 	.word	0x3ff00000

0802f23c <sqrt>:
 802f23c:	b538      	push	{r3, r4, r5, lr}
 802f23e:	ed2d 8b02 	vpush	{d8}
 802f242:	ec55 4b10 	vmov	r4, r5, d0
 802f246:	f000 ffe3 	bl	8030210 <__ieee754_sqrt>
 802f24a:	4622      	mov	r2, r4
 802f24c:	462b      	mov	r3, r5
 802f24e:	4620      	mov	r0, r4
 802f250:	4629      	mov	r1, r5
 802f252:	eeb0 8a40 	vmov.f32	s16, s0
 802f256:	eef0 8a60 	vmov.f32	s17, s1
 802f25a:	f7d1 fc71 	bl	8000b40 <__aeabi_dcmpun>
 802f25e:	b990      	cbnz	r0, 802f286 <sqrt+0x4a>
 802f260:	2200      	movs	r2, #0
 802f262:	2300      	movs	r3, #0
 802f264:	4620      	mov	r0, r4
 802f266:	4629      	mov	r1, r5
 802f268:	f7d1 fc42 	bl	8000af0 <__aeabi_dcmplt>
 802f26c:	b158      	cbz	r0, 802f286 <sqrt+0x4a>
 802f26e:	f002 f89f 	bl	80313b0 <__errno>
 802f272:	2321      	movs	r3, #33	; 0x21
 802f274:	6003      	str	r3, [r0, #0]
 802f276:	2200      	movs	r2, #0
 802f278:	2300      	movs	r3, #0
 802f27a:	4610      	mov	r0, r2
 802f27c:	4619      	mov	r1, r3
 802f27e:	f7d1 faef 	bl	8000860 <__aeabi_ddiv>
 802f282:	ec41 0b18 	vmov	d8, r0, r1
 802f286:	eeb0 0a48 	vmov.f32	s0, s16
 802f28a:	eef0 0a68 	vmov.f32	s1, s17
 802f28e:	ecbd 8b02 	vpop	{d8}
 802f292:	bd38      	pop	{r3, r4, r5, pc}

0802f294 <expf>:
 802f294:	b508      	push	{r3, lr}
 802f296:	ed2d 8b02 	vpush	{d8}
 802f29a:	eef0 8a40 	vmov.f32	s17, s0
 802f29e:	f001 f869 	bl	8030374 <__ieee754_expf>
 802f2a2:	eeb0 8a40 	vmov.f32	s16, s0
 802f2a6:	eeb0 0a68 	vmov.f32	s0, s17
 802f2aa:	f002 f83f 	bl	803132c <finitef>
 802f2ae:	b160      	cbz	r0, 802f2ca <expf+0x36>
 802f2b0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 802f2f0 <expf+0x5c>
 802f2b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 802f2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f2bc:	dd0a      	ble.n	802f2d4 <expf+0x40>
 802f2be:	f002 f877 	bl	80313b0 <__errno>
 802f2c2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 802f2f4 <expf+0x60>
 802f2c6:	2322      	movs	r3, #34	; 0x22
 802f2c8:	6003      	str	r3, [r0, #0]
 802f2ca:	eeb0 0a48 	vmov.f32	s0, s16
 802f2ce:	ecbd 8b02 	vpop	{d8}
 802f2d2:	bd08      	pop	{r3, pc}
 802f2d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 802f2f8 <expf+0x64>
 802f2d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 802f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f2e0:	d5f3      	bpl.n	802f2ca <expf+0x36>
 802f2e2:	f002 f865 	bl	80313b0 <__errno>
 802f2e6:	2322      	movs	r3, #34	; 0x22
 802f2e8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 802f2fc <expf+0x68>
 802f2ec:	6003      	str	r3, [r0, #0]
 802f2ee:	e7ec      	b.n	802f2ca <expf+0x36>
 802f2f0:	42b17180 	.word	0x42b17180
 802f2f4:	7f800000 	.word	0x7f800000
 802f2f8:	c2cff1b5 	.word	0xc2cff1b5
 802f2fc:	00000000 	.word	0x00000000

0802f300 <log10f>:
 802f300:	b508      	push	{r3, lr}
 802f302:	ed2d 8b02 	vpush	{d8}
 802f306:	eeb0 8a40 	vmov.f32	s16, s0
 802f30a:	f001 f9f1 	bl	80306f0 <__ieee754_log10f>
 802f30e:	eeb4 8a48 	vcmp.f32	s16, s16
 802f312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f316:	d60f      	bvs.n	802f338 <log10f+0x38>
 802f318:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802f31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f320:	d80a      	bhi.n	802f338 <log10f+0x38>
 802f322:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802f326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f32a:	d108      	bne.n	802f33e <log10f+0x3e>
 802f32c:	f002 f840 	bl	80313b0 <__errno>
 802f330:	2322      	movs	r3, #34	; 0x22
 802f332:	ed9f 0a08 	vldr	s0, [pc, #32]	; 802f354 <log10f+0x54>
 802f336:	6003      	str	r3, [r0, #0]
 802f338:	ecbd 8b02 	vpop	{d8}
 802f33c:	bd08      	pop	{r3, pc}
 802f33e:	f002 f837 	bl	80313b0 <__errno>
 802f342:	ecbd 8b02 	vpop	{d8}
 802f346:	2321      	movs	r3, #33	; 0x21
 802f348:	6003      	str	r3, [r0, #0]
 802f34a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802f34e:	4802      	ldr	r0, [pc, #8]	; (802f358 <log10f+0x58>)
 802f350:	f001 bffa 	b.w	8031348 <nanf>
 802f354:	ff800000 	.word	0xff800000
 802f358:	0803747b 	.word	0x0803747b

0802f35c <sqrtf>:
 802f35c:	b508      	push	{r3, lr}
 802f35e:	ed2d 8b02 	vpush	{d8}
 802f362:	eeb0 8a40 	vmov.f32	s16, s0
 802f366:	f001 fa1b 	bl	80307a0 <__ieee754_sqrtf>
 802f36a:	eeb4 8a48 	vcmp.f32	s16, s16
 802f36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f372:	d60c      	bvs.n	802f38e <sqrtf+0x32>
 802f374:	eddf 8a07 	vldr	s17, [pc, #28]	; 802f394 <sqrtf+0x38>
 802f378:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802f37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802f380:	d505      	bpl.n	802f38e <sqrtf+0x32>
 802f382:	f002 f815 	bl	80313b0 <__errno>
 802f386:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802f38a:	2321      	movs	r3, #33	; 0x21
 802f38c:	6003      	str	r3, [r0, #0]
 802f38e:	ecbd 8b02 	vpop	{d8}
 802f392:	bd08      	pop	{r3, pc}
 802f394:	00000000 	.word	0x00000000

0802f398 <__ieee754_pow>:
 802f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f39c:	ed2d 8b06 	vpush	{d8-d10}
 802f3a0:	b089      	sub	sp, #36	; 0x24
 802f3a2:	ed8d 1b00 	vstr	d1, [sp]
 802f3a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 802f3aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802f3ae:	ea58 0102 	orrs.w	r1, r8, r2
 802f3b2:	ec57 6b10 	vmov	r6, r7, d0
 802f3b6:	d115      	bne.n	802f3e4 <__ieee754_pow+0x4c>
 802f3b8:	19b3      	adds	r3, r6, r6
 802f3ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802f3be:	4152      	adcs	r2, r2
 802f3c0:	4299      	cmp	r1, r3
 802f3c2:	4b89      	ldr	r3, [pc, #548]	; (802f5e8 <__ieee754_pow+0x250>)
 802f3c4:	4193      	sbcs	r3, r2
 802f3c6:	f080 84d2 	bcs.w	802fd6e <__ieee754_pow+0x9d6>
 802f3ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 802f3ce:	4630      	mov	r0, r6
 802f3d0:	4639      	mov	r1, r7
 802f3d2:	f7d0 ff65 	bl	80002a0 <__adddf3>
 802f3d6:	ec41 0b10 	vmov	d0, r0, r1
 802f3da:	b009      	add	sp, #36	; 0x24
 802f3dc:	ecbd 8b06 	vpop	{d8-d10}
 802f3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f3e4:	4b81      	ldr	r3, [pc, #516]	; (802f5ec <__ieee754_pow+0x254>)
 802f3e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802f3ea:	429c      	cmp	r4, r3
 802f3ec:	ee10 aa10 	vmov	sl, s0
 802f3f0:	463d      	mov	r5, r7
 802f3f2:	dc06      	bgt.n	802f402 <__ieee754_pow+0x6a>
 802f3f4:	d101      	bne.n	802f3fa <__ieee754_pow+0x62>
 802f3f6:	2e00      	cmp	r6, #0
 802f3f8:	d1e7      	bne.n	802f3ca <__ieee754_pow+0x32>
 802f3fa:	4598      	cmp	r8, r3
 802f3fc:	dc01      	bgt.n	802f402 <__ieee754_pow+0x6a>
 802f3fe:	d10f      	bne.n	802f420 <__ieee754_pow+0x88>
 802f400:	b172      	cbz	r2, 802f420 <__ieee754_pow+0x88>
 802f402:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802f406:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802f40a:	ea55 050a 	orrs.w	r5, r5, sl
 802f40e:	d1dc      	bne.n	802f3ca <__ieee754_pow+0x32>
 802f410:	e9dd 3200 	ldrd	r3, r2, [sp]
 802f414:	18db      	adds	r3, r3, r3
 802f416:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802f41a:	4152      	adcs	r2, r2
 802f41c:	429d      	cmp	r5, r3
 802f41e:	e7d0      	b.n	802f3c2 <__ieee754_pow+0x2a>
 802f420:	2d00      	cmp	r5, #0
 802f422:	da3b      	bge.n	802f49c <__ieee754_pow+0x104>
 802f424:	4b72      	ldr	r3, [pc, #456]	; (802f5f0 <__ieee754_pow+0x258>)
 802f426:	4598      	cmp	r8, r3
 802f428:	dc51      	bgt.n	802f4ce <__ieee754_pow+0x136>
 802f42a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802f42e:	4598      	cmp	r8, r3
 802f430:	f340 84ac 	ble.w	802fd8c <__ieee754_pow+0x9f4>
 802f434:	ea4f 5328 	mov.w	r3, r8, asr #20
 802f438:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802f43c:	2b14      	cmp	r3, #20
 802f43e:	dd0f      	ble.n	802f460 <__ieee754_pow+0xc8>
 802f440:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802f444:	fa22 f103 	lsr.w	r1, r2, r3
 802f448:	fa01 f303 	lsl.w	r3, r1, r3
 802f44c:	4293      	cmp	r3, r2
 802f44e:	f040 849d 	bne.w	802fd8c <__ieee754_pow+0x9f4>
 802f452:	f001 0101 	and.w	r1, r1, #1
 802f456:	f1c1 0302 	rsb	r3, r1, #2
 802f45a:	9304      	str	r3, [sp, #16]
 802f45c:	b182      	cbz	r2, 802f480 <__ieee754_pow+0xe8>
 802f45e:	e05f      	b.n	802f520 <__ieee754_pow+0x188>
 802f460:	2a00      	cmp	r2, #0
 802f462:	d15b      	bne.n	802f51c <__ieee754_pow+0x184>
 802f464:	f1c3 0314 	rsb	r3, r3, #20
 802f468:	fa48 f103 	asr.w	r1, r8, r3
 802f46c:	fa01 f303 	lsl.w	r3, r1, r3
 802f470:	4543      	cmp	r3, r8
 802f472:	f040 8488 	bne.w	802fd86 <__ieee754_pow+0x9ee>
 802f476:	f001 0101 	and.w	r1, r1, #1
 802f47a:	f1c1 0302 	rsb	r3, r1, #2
 802f47e:	9304      	str	r3, [sp, #16]
 802f480:	4b5c      	ldr	r3, [pc, #368]	; (802f5f4 <__ieee754_pow+0x25c>)
 802f482:	4598      	cmp	r8, r3
 802f484:	d132      	bne.n	802f4ec <__ieee754_pow+0x154>
 802f486:	f1b9 0f00 	cmp.w	r9, #0
 802f48a:	f280 8478 	bge.w	802fd7e <__ieee754_pow+0x9e6>
 802f48e:	4959      	ldr	r1, [pc, #356]	; (802f5f4 <__ieee754_pow+0x25c>)
 802f490:	4632      	mov	r2, r6
 802f492:	463b      	mov	r3, r7
 802f494:	2000      	movs	r0, #0
 802f496:	f7d1 f9e3 	bl	8000860 <__aeabi_ddiv>
 802f49a:	e79c      	b.n	802f3d6 <__ieee754_pow+0x3e>
 802f49c:	2300      	movs	r3, #0
 802f49e:	9304      	str	r3, [sp, #16]
 802f4a0:	2a00      	cmp	r2, #0
 802f4a2:	d13d      	bne.n	802f520 <__ieee754_pow+0x188>
 802f4a4:	4b51      	ldr	r3, [pc, #324]	; (802f5ec <__ieee754_pow+0x254>)
 802f4a6:	4598      	cmp	r8, r3
 802f4a8:	d1ea      	bne.n	802f480 <__ieee754_pow+0xe8>
 802f4aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802f4ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802f4b2:	ea53 030a 	orrs.w	r3, r3, sl
 802f4b6:	f000 845a 	beq.w	802fd6e <__ieee754_pow+0x9d6>
 802f4ba:	4b4f      	ldr	r3, [pc, #316]	; (802f5f8 <__ieee754_pow+0x260>)
 802f4bc:	429c      	cmp	r4, r3
 802f4be:	dd08      	ble.n	802f4d2 <__ieee754_pow+0x13a>
 802f4c0:	f1b9 0f00 	cmp.w	r9, #0
 802f4c4:	f2c0 8457 	blt.w	802fd76 <__ieee754_pow+0x9de>
 802f4c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 802f4cc:	e783      	b.n	802f3d6 <__ieee754_pow+0x3e>
 802f4ce:	2302      	movs	r3, #2
 802f4d0:	e7e5      	b.n	802f49e <__ieee754_pow+0x106>
 802f4d2:	f1b9 0f00 	cmp.w	r9, #0
 802f4d6:	f04f 0000 	mov.w	r0, #0
 802f4da:	f04f 0100 	mov.w	r1, #0
 802f4de:	f6bf af7a 	bge.w	802f3d6 <__ieee754_pow+0x3e>
 802f4e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 802f4e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802f4ea:	e774      	b.n	802f3d6 <__ieee754_pow+0x3e>
 802f4ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802f4f0:	d106      	bne.n	802f500 <__ieee754_pow+0x168>
 802f4f2:	4632      	mov	r2, r6
 802f4f4:	463b      	mov	r3, r7
 802f4f6:	4630      	mov	r0, r6
 802f4f8:	4639      	mov	r1, r7
 802f4fa:	f7d1 f887 	bl	800060c <__aeabi_dmul>
 802f4fe:	e76a      	b.n	802f3d6 <__ieee754_pow+0x3e>
 802f500:	4b3e      	ldr	r3, [pc, #248]	; (802f5fc <__ieee754_pow+0x264>)
 802f502:	4599      	cmp	r9, r3
 802f504:	d10c      	bne.n	802f520 <__ieee754_pow+0x188>
 802f506:	2d00      	cmp	r5, #0
 802f508:	db0a      	blt.n	802f520 <__ieee754_pow+0x188>
 802f50a:	ec47 6b10 	vmov	d0, r6, r7
 802f50e:	b009      	add	sp, #36	; 0x24
 802f510:	ecbd 8b06 	vpop	{d8-d10}
 802f514:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f518:	f000 be7a 	b.w	8030210 <__ieee754_sqrt>
 802f51c:	2300      	movs	r3, #0
 802f51e:	9304      	str	r3, [sp, #16]
 802f520:	ec47 6b10 	vmov	d0, r6, r7
 802f524:	f001 fe68 	bl	80311f8 <fabs>
 802f528:	ec51 0b10 	vmov	r0, r1, d0
 802f52c:	f1ba 0f00 	cmp.w	sl, #0
 802f530:	d129      	bne.n	802f586 <__ieee754_pow+0x1ee>
 802f532:	b124      	cbz	r4, 802f53e <__ieee754_pow+0x1a6>
 802f534:	4b2f      	ldr	r3, [pc, #188]	; (802f5f4 <__ieee754_pow+0x25c>)
 802f536:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802f53a:	429a      	cmp	r2, r3
 802f53c:	d123      	bne.n	802f586 <__ieee754_pow+0x1ee>
 802f53e:	f1b9 0f00 	cmp.w	r9, #0
 802f542:	da05      	bge.n	802f550 <__ieee754_pow+0x1b8>
 802f544:	4602      	mov	r2, r0
 802f546:	460b      	mov	r3, r1
 802f548:	2000      	movs	r0, #0
 802f54a:	492a      	ldr	r1, [pc, #168]	; (802f5f4 <__ieee754_pow+0x25c>)
 802f54c:	f7d1 f988 	bl	8000860 <__aeabi_ddiv>
 802f550:	2d00      	cmp	r5, #0
 802f552:	f6bf af40 	bge.w	802f3d6 <__ieee754_pow+0x3e>
 802f556:	9b04      	ldr	r3, [sp, #16]
 802f558:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802f55c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802f560:	4323      	orrs	r3, r4
 802f562:	d108      	bne.n	802f576 <__ieee754_pow+0x1de>
 802f564:	4602      	mov	r2, r0
 802f566:	460b      	mov	r3, r1
 802f568:	4610      	mov	r0, r2
 802f56a:	4619      	mov	r1, r3
 802f56c:	f7d0 fe96 	bl	800029c <__aeabi_dsub>
 802f570:	4602      	mov	r2, r0
 802f572:	460b      	mov	r3, r1
 802f574:	e78f      	b.n	802f496 <__ieee754_pow+0xfe>
 802f576:	9b04      	ldr	r3, [sp, #16]
 802f578:	2b01      	cmp	r3, #1
 802f57a:	f47f af2c 	bne.w	802f3d6 <__ieee754_pow+0x3e>
 802f57e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802f582:	4619      	mov	r1, r3
 802f584:	e727      	b.n	802f3d6 <__ieee754_pow+0x3e>
 802f586:	0feb      	lsrs	r3, r5, #31
 802f588:	3b01      	subs	r3, #1
 802f58a:	9306      	str	r3, [sp, #24]
 802f58c:	9a06      	ldr	r2, [sp, #24]
 802f58e:	9b04      	ldr	r3, [sp, #16]
 802f590:	4313      	orrs	r3, r2
 802f592:	d102      	bne.n	802f59a <__ieee754_pow+0x202>
 802f594:	4632      	mov	r2, r6
 802f596:	463b      	mov	r3, r7
 802f598:	e7e6      	b.n	802f568 <__ieee754_pow+0x1d0>
 802f59a:	4b19      	ldr	r3, [pc, #100]	; (802f600 <__ieee754_pow+0x268>)
 802f59c:	4598      	cmp	r8, r3
 802f59e:	f340 80fb 	ble.w	802f798 <__ieee754_pow+0x400>
 802f5a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802f5a6:	4598      	cmp	r8, r3
 802f5a8:	4b13      	ldr	r3, [pc, #76]	; (802f5f8 <__ieee754_pow+0x260>)
 802f5aa:	dd0c      	ble.n	802f5c6 <__ieee754_pow+0x22e>
 802f5ac:	429c      	cmp	r4, r3
 802f5ae:	dc0f      	bgt.n	802f5d0 <__ieee754_pow+0x238>
 802f5b0:	f1b9 0f00 	cmp.w	r9, #0
 802f5b4:	da0f      	bge.n	802f5d6 <__ieee754_pow+0x23e>
 802f5b6:	2000      	movs	r0, #0
 802f5b8:	b009      	add	sp, #36	; 0x24
 802f5ba:	ecbd 8b06 	vpop	{d8-d10}
 802f5be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5c2:	f001 bdee 	b.w	80311a2 <__math_oflow>
 802f5c6:	429c      	cmp	r4, r3
 802f5c8:	dbf2      	blt.n	802f5b0 <__ieee754_pow+0x218>
 802f5ca:	4b0a      	ldr	r3, [pc, #40]	; (802f5f4 <__ieee754_pow+0x25c>)
 802f5cc:	429c      	cmp	r4, r3
 802f5ce:	dd19      	ble.n	802f604 <__ieee754_pow+0x26c>
 802f5d0:	f1b9 0f00 	cmp.w	r9, #0
 802f5d4:	dcef      	bgt.n	802f5b6 <__ieee754_pow+0x21e>
 802f5d6:	2000      	movs	r0, #0
 802f5d8:	b009      	add	sp, #36	; 0x24
 802f5da:	ecbd 8b06 	vpop	{d8-d10}
 802f5de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5e2:	f001 bdd5 	b.w	8031190 <__math_uflow>
 802f5e6:	bf00      	nop
 802f5e8:	fff00000 	.word	0xfff00000
 802f5ec:	7ff00000 	.word	0x7ff00000
 802f5f0:	433fffff 	.word	0x433fffff
 802f5f4:	3ff00000 	.word	0x3ff00000
 802f5f8:	3fefffff 	.word	0x3fefffff
 802f5fc:	3fe00000 	.word	0x3fe00000
 802f600:	41e00000 	.word	0x41e00000
 802f604:	4b60      	ldr	r3, [pc, #384]	; (802f788 <__ieee754_pow+0x3f0>)
 802f606:	2200      	movs	r2, #0
 802f608:	f7d0 fe48 	bl	800029c <__aeabi_dsub>
 802f60c:	a354      	add	r3, pc, #336	; (adr r3, 802f760 <__ieee754_pow+0x3c8>)
 802f60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f612:	4604      	mov	r4, r0
 802f614:	460d      	mov	r5, r1
 802f616:	f7d0 fff9 	bl	800060c <__aeabi_dmul>
 802f61a:	a353      	add	r3, pc, #332	; (adr r3, 802f768 <__ieee754_pow+0x3d0>)
 802f61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f620:	4606      	mov	r6, r0
 802f622:	460f      	mov	r7, r1
 802f624:	4620      	mov	r0, r4
 802f626:	4629      	mov	r1, r5
 802f628:	f7d0 fff0 	bl	800060c <__aeabi_dmul>
 802f62c:	4b57      	ldr	r3, [pc, #348]	; (802f78c <__ieee754_pow+0x3f4>)
 802f62e:	4682      	mov	sl, r0
 802f630:	468b      	mov	fp, r1
 802f632:	2200      	movs	r2, #0
 802f634:	4620      	mov	r0, r4
 802f636:	4629      	mov	r1, r5
 802f638:	f7d0 ffe8 	bl	800060c <__aeabi_dmul>
 802f63c:	4602      	mov	r2, r0
 802f63e:	460b      	mov	r3, r1
 802f640:	a14b      	add	r1, pc, #300	; (adr r1, 802f770 <__ieee754_pow+0x3d8>)
 802f642:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f646:	f7d0 fe29 	bl	800029c <__aeabi_dsub>
 802f64a:	4622      	mov	r2, r4
 802f64c:	462b      	mov	r3, r5
 802f64e:	f7d0 ffdd 	bl	800060c <__aeabi_dmul>
 802f652:	4602      	mov	r2, r0
 802f654:	460b      	mov	r3, r1
 802f656:	2000      	movs	r0, #0
 802f658:	494d      	ldr	r1, [pc, #308]	; (802f790 <__ieee754_pow+0x3f8>)
 802f65a:	f7d0 fe1f 	bl	800029c <__aeabi_dsub>
 802f65e:	4622      	mov	r2, r4
 802f660:	4680      	mov	r8, r0
 802f662:	4689      	mov	r9, r1
 802f664:	462b      	mov	r3, r5
 802f666:	4620      	mov	r0, r4
 802f668:	4629      	mov	r1, r5
 802f66a:	f7d0 ffcf 	bl	800060c <__aeabi_dmul>
 802f66e:	4602      	mov	r2, r0
 802f670:	460b      	mov	r3, r1
 802f672:	4640      	mov	r0, r8
 802f674:	4649      	mov	r1, r9
 802f676:	f7d0 ffc9 	bl	800060c <__aeabi_dmul>
 802f67a:	a33f      	add	r3, pc, #252	; (adr r3, 802f778 <__ieee754_pow+0x3e0>)
 802f67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f680:	f7d0 ffc4 	bl	800060c <__aeabi_dmul>
 802f684:	4602      	mov	r2, r0
 802f686:	460b      	mov	r3, r1
 802f688:	4650      	mov	r0, sl
 802f68a:	4659      	mov	r1, fp
 802f68c:	f7d0 fe06 	bl	800029c <__aeabi_dsub>
 802f690:	4602      	mov	r2, r0
 802f692:	460b      	mov	r3, r1
 802f694:	4680      	mov	r8, r0
 802f696:	4689      	mov	r9, r1
 802f698:	4630      	mov	r0, r6
 802f69a:	4639      	mov	r1, r7
 802f69c:	f7d0 fe00 	bl	80002a0 <__adddf3>
 802f6a0:	2000      	movs	r0, #0
 802f6a2:	4632      	mov	r2, r6
 802f6a4:	463b      	mov	r3, r7
 802f6a6:	4604      	mov	r4, r0
 802f6a8:	460d      	mov	r5, r1
 802f6aa:	f7d0 fdf7 	bl	800029c <__aeabi_dsub>
 802f6ae:	4602      	mov	r2, r0
 802f6b0:	460b      	mov	r3, r1
 802f6b2:	4640      	mov	r0, r8
 802f6b4:	4649      	mov	r1, r9
 802f6b6:	f7d0 fdf1 	bl	800029c <__aeabi_dsub>
 802f6ba:	9b04      	ldr	r3, [sp, #16]
 802f6bc:	9a06      	ldr	r2, [sp, #24]
 802f6be:	3b01      	subs	r3, #1
 802f6c0:	4313      	orrs	r3, r2
 802f6c2:	4682      	mov	sl, r0
 802f6c4:	468b      	mov	fp, r1
 802f6c6:	f040 81e7 	bne.w	802fa98 <__ieee754_pow+0x700>
 802f6ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 802f780 <__ieee754_pow+0x3e8>
 802f6ce:	eeb0 8a47 	vmov.f32	s16, s14
 802f6d2:	eef0 8a67 	vmov.f32	s17, s15
 802f6d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 802f6da:	2600      	movs	r6, #0
 802f6dc:	4632      	mov	r2, r6
 802f6de:	463b      	mov	r3, r7
 802f6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802f6e4:	f7d0 fdda 	bl	800029c <__aeabi_dsub>
 802f6e8:	4622      	mov	r2, r4
 802f6ea:	462b      	mov	r3, r5
 802f6ec:	f7d0 ff8e 	bl	800060c <__aeabi_dmul>
 802f6f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 802f6f4:	4680      	mov	r8, r0
 802f6f6:	4689      	mov	r9, r1
 802f6f8:	4650      	mov	r0, sl
 802f6fa:	4659      	mov	r1, fp
 802f6fc:	f7d0 ff86 	bl	800060c <__aeabi_dmul>
 802f700:	4602      	mov	r2, r0
 802f702:	460b      	mov	r3, r1
 802f704:	4640      	mov	r0, r8
 802f706:	4649      	mov	r1, r9
 802f708:	f7d0 fdca 	bl	80002a0 <__adddf3>
 802f70c:	4632      	mov	r2, r6
 802f70e:	463b      	mov	r3, r7
 802f710:	4680      	mov	r8, r0
 802f712:	4689      	mov	r9, r1
 802f714:	4620      	mov	r0, r4
 802f716:	4629      	mov	r1, r5
 802f718:	f7d0 ff78 	bl	800060c <__aeabi_dmul>
 802f71c:	460b      	mov	r3, r1
 802f71e:	4604      	mov	r4, r0
 802f720:	460d      	mov	r5, r1
 802f722:	4602      	mov	r2, r0
 802f724:	4649      	mov	r1, r9
 802f726:	4640      	mov	r0, r8
 802f728:	f7d0 fdba 	bl	80002a0 <__adddf3>
 802f72c:	4b19      	ldr	r3, [pc, #100]	; (802f794 <__ieee754_pow+0x3fc>)
 802f72e:	4299      	cmp	r1, r3
 802f730:	ec45 4b19 	vmov	d9, r4, r5
 802f734:	4606      	mov	r6, r0
 802f736:	460f      	mov	r7, r1
 802f738:	468b      	mov	fp, r1
 802f73a:	f340 82f1 	ble.w	802fd20 <__ieee754_pow+0x988>
 802f73e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802f742:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802f746:	4303      	orrs	r3, r0
 802f748:	f000 81e4 	beq.w	802fb14 <__ieee754_pow+0x77c>
 802f74c:	ec51 0b18 	vmov	r0, r1, d8
 802f750:	2200      	movs	r2, #0
 802f752:	2300      	movs	r3, #0
 802f754:	f7d1 f9cc 	bl	8000af0 <__aeabi_dcmplt>
 802f758:	3800      	subs	r0, #0
 802f75a:	bf18      	it	ne
 802f75c:	2001      	movne	r0, #1
 802f75e:	e72b      	b.n	802f5b8 <__ieee754_pow+0x220>
 802f760:	60000000 	.word	0x60000000
 802f764:	3ff71547 	.word	0x3ff71547
 802f768:	f85ddf44 	.word	0xf85ddf44
 802f76c:	3e54ae0b 	.word	0x3e54ae0b
 802f770:	55555555 	.word	0x55555555
 802f774:	3fd55555 	.word	0x3fd55555
 802f778:	652b82fe 	.word	0x652b82fe
 802f77c:	3ff71547 	.word	0x3ff71547
 802f780:	00000000 	.word	0x00000000
 802f784:	bff00000 	.word	0xbff00000
 802f788:	3ff00000 	.word	0x3ff00000
 802f78c:	3fd00000 	.word	0x3fd00000
 802f790:	3fe00000 	.word	0x3fe00000
 802f794:	408fffff 	.word	0x408fffff
 802f798:	4bd5      	ldr	r3, [pc, #852]	; (802faf0 <__ieee754_pow+0x758>)
 802f79a:	402b      	ands	r3, r5
 802f79c:	2200      	movs	r2, #0
 802f79e:	b92b      	cbnz	r3, 802f7ac <__ieee754_pow+0x414>
 802f7a0:	4bd4      	ldr	r3, [pc, #848]	; (802faf4 <__ieee754_pow+0x75c>)
 802f7a2:	f7d0 ff33 	bl	800060c <__aeabi_dmul>
 802f7a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802f7aa:	460c      	mov	r4, r1
 802f7ac:	1523      	asrs	r3, r4, #20
 802f7ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802f7b2:	4413      	add	r3, r2
 802f7b4:	9305      	str	r3, [sp, #20]
 802f7b6:	4bd0      	ldr	r3, [pc, #832]	; (802faf8 <__ieee754_pow+0x760>)
 802f7b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802f7bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802f7c0:	429c      	cmp	r4, r3
 802f7c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802f7c6:	dd08      	ble.n	802f7da <__ieee754_pow+0x442>
 802f7c8:	4bcc      	ldr	r3, [pc, #816]	; (802fafc <__ieee754_pow+0x764>)
 802f7ca:	429c      	cmp	r4, r3
 802f7cc:	f340 8162 	ble.w	802fa94 <__ieee754_pow+0x6fc>
 802f7d0:	9b05      	ldr	r3, [sp, #20]
 802f7d2:	3301      	adds	r3, #1
 802f7d4:	9305      	str	r3, [sp, #20]
 802f7d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802f7da:	2400      	movs	r4, #0
 802f7dc:	00e3      	lsls	r3, r4, #3
 802f7de:	9307      	str	r3, [sp, #28]
 802f7e0:	4bc7      	ldr	r3, [pc, #796]	; (802fb00 <__ieee754_pow+0x768>)
 802f7e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802f7e6:	ed93 7b00 	vldr	d7, [r3]
 802f7ea:	4629      	mov	r1, r5
 802f7ec:	ec53 2b17 	vmov	r2, r3, d7
 802f7f0:	eeb0 9a47 	vmov.f32	s18, s14
 802f7f4:	eef0 9a67 	vmov.f32	s19, s15
 802f7f8:	4682      	mov	sl, r0
 802f7fa:	f7d0 fd4f 	bl	800029c <__aeabi_dsub>
 802f7fe:	4652      	mov	r2, sl
 802f800:	4606      	mov	r6, r0
 802f802:	460f      	mov	r7, r1
 802f804:	462b      	mov	r3, r5
 802f806:	ec51 0b19 	vmov	r0, r1, d9
 802f80a:	f7d0 fd49 	bl	80002a0 <__adddf3>
 802f80e:	4602      	mov	r2, r0
 802f810:	460b      	mov	r3, r1
 802f812:	2000      	movs	r0, #0
 802f814:	49bb      	ldr	r1, [pc, #748]	; (802fb04 <__ieee754_pow+0x76c>)
 802f816:	f7d1 f823 	bl	8000860 <__aeabi_ddiv>
 802f81a:	ec41 0b1a 	vmov	d10, r0, r1
 802f81e:	4602      	mov	r2, r0
 802f820:	460b      	mov	r3, r1
 802f822:	4630      	mov	r0, r6
 802f824:	4639      	mov	r1, r7
 802f826:	f7d0 fef1 	bl	800060c <__aeabi_dmul>
 802f82a:	2300      	movs	r3, #0
 802f82c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802f830:	9302      	str	r3, [sp, #8]
 802f832:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802f836:	46ab      	mov	fp, r5
 802f838:	106d      	asrs	r5, r5, #1
 802f83a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802f83e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802f842:	ec41 0b18 	vmov	d8, r0, r1
 802f846:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802f84a:	2200      	movs	r2, #0
 802f84c:	4640      	mov	r0, r8
 802f84e:	4649      	mov	r1, r9
 802f850:	4614      	mov	r4, r2
 802f852:	461d      	mov	r5, r3
 802f854:	f7d0 feda 	bl	800060c <__aeabi_dmul>
 802f858:	4602      	mov	r2, r0
 802f85a:	460b      	mov	r3, r1
 802f85c:	4630      	mov	r0, r6
 802f85e:	4639      	mov	r1, r7
 802f860:	f7d0 fd1c 	bl	800029c <__aeabi_dsub>
 802f864:	ec53 2b19 	vmov	r2, r3, d9
 802f868:	4606      	mov	r6, r0
 802f86a:	460f      	mov	r7, r1
 802f86c:	4620      	mov	r0, r4
 802f86e:	4629      	mov	r1, r5
 802f870:	f7d0 fd14 	bl	800029c <__aeabi_dsub>
 802f874:	4602      	mov	r2, r0
 802f876:	460b      	mov	r3, r1
 802f878:	4650      	mov	r0, sl
 802f87a:	4659      	mov	r1, fp
 802f87c:	f7d0 fd0e 	bl	800029c <__aeabi_dsub>
 802f880:	4642      	mov	r2, r8
 802f882:	464b      	mov	r3, r9
 802f884:	f7d0 fec2 	bl	800060c <__aeabi_dmul>
 802f888:	4602      	mov	r2, r0
 802f88a:	460b      	mov	r3, r1
 802f88c:	4630      	mov	r0, r6
 802f88e:	4639      	mov	r1, r7
 802f890:	f7d0 fd04 	bl	800029c <__aeabi_dsub>
 802f894:	ec53 2b1a 	vmov	r2, r3, d10
 802f898:	f7d0 feb8 	bl	800060c <__aeabi_dmul>
 802f89c:	ec53 2b18 	vmov	r2, r3, d8
 802f8a0:	ec41 0b19 	vmov	d9, r0, r1
 802f8a4:	ec51 0b18 	vmov	r0, r1, d8
 802f8a8:	f7d0 feb0 	bl	800060c <__aeabi_dmul>
 802f8ac:	a37c      	add	r3, pc, #496	; (adr r3, 802faa0 <__ieee754_pow+0x708>)
 802f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f8b2:	4604      	mov	r4, r0
 802f8b4:	460d      	mov	r5, r1
 802f8b6:	f7d0 fea9 	bl	800060c <__aeabi_dmul>
 802f8ba:	a37b      	add	r3, pc, #492	; (adr r3, 802faa8 <__ieee754_pow+0x710>)
 802f8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f8c0:	f7d0 fcee 	bl	80002a0 <__adddf3>
 802f8c4:	4622      	mov	r2, r4
 802f8c6:	462b      	mov	r3, r5
 802f8c8:	f7d0 fea0 	bl	800060c <__aeabi_dmul>
 802f8cc:	a378      	add	r3, pc, #480	; (adr r3, 802fab0 <__ieee754_pow+0x718>)
 802f8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f8d2:	f7d0 fce5 	bl	80002a0 <__adddf3>
 802f8d6:	4622      	mov	r2, r4
 802f8d8:	462b      	mov	r3, r5
 802f8da:	f7d0 fe97 	bl	800060c <__aeabi_dmul>
 802f8de:	a376      	add	r3, pc, #472	; (adr r3, 802fab8 <__ieee754_pow+0x720>)
 802f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f8e4:	f7d0 fcdc 	bl	80002a0 <__adddf3>
 802f8e8:	4622      	mov	r2, r4
 802f8ea:	462b      	mov	r3, r5
 802f8ec:	f7d0 fe8e 	bl	800060c <__aeabi_dmul>
 802f8f0:	a373      	add	r3, pc, #460	; (adr r3, 802fac0 <__ieee754_pow+0x728>)
 802f8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f8f6:	f7d0 fcd3 	bl	80002a0 <__adddf3>
 802f8fa:	4622      	mov	r2, r4
 802f8fc:	462b      	mov	r3, r5
 802f8fe:	f7d0 fe85 	bl	800060c <__aeabi_dmul>
 802f902:	a371      	add	r3, pc, #452	; (adr r3, 802fac8 <__ieee754_pow+0x730>)
 802f904:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f908:	f7d0 fcca 	bl	80002a0 <__adddf3>
 802f90c:	4622      	mov	r2, r4
 802f90e:	4606      	mov	r6, r0
 802f910:	460f      	mov	r7, r1
 802f912:	462b      	mov	r3, r5
 802f914:	4620      	mov	r0, r4
 802f916:	4629      	mov	r1, r5
 802f918:	f7d0 fe78 	bl	800060c <__aeabi_dmul>
 802f91c:	4602      	mov	r2, r0
 802f91e:	460b      	mov	r3, r1
 802f920:	4630      	mov	r0, r6
 802f922:	4639      	mov	r1, r7
 802f924:	f7d0 fe72 	bl	800060c <__aeabi_dmul>
 802f928:	4642      	mov	r2, r8
 802f92a:	4604      	mov	r4, r0
 802f92c:	460d      	mov	r5, r1
 802f92e:	464b      	mov	r3, r9
 802f930:	ec51 0b18 	vmov	r0, r1, d8
 802f934:	f7d0 fcb4 	bl	80002a0 <__adddf3>
 802f938:	ec53 2b19 	vmov	r2, r3, d9
 802f93c:	f7d0 fe66 	bl	800060c <__aeabi_dmul>
 802f940:	4622      	mov	r2, r4
 802f942:	462b      	mov	r3, r5
 802f944:	f7d0 fcac 	bl	80002a0 <__adddf3>
 802f948:	4642      	mov	r2, r8
 802f94a:	4682      	mov	sl, r0
 802f94c:	468b      	mov	fp, r1
 802f94e:	464b      	mov	r3, r9
 802f950:	4640      	mov	r0, r8
 802f952:	4649      	mov	r1, r9
 802f954:	f7d0 fe5a 	bl	800060c <__aeabi_dmul>
 802f958:	4b6b      	ldr	r3, [pc, #428]	; (802fb08 <__ieee754_pow+0x770>)
 802f95a:	2200      	movs	r2, #0
 802f95c:	4606      	mov	r6, r0
 802f95e:	460f      	mov	r7, r1
 802f960:	f7d0 fc9e 	bl	80002a0 <__adddf3>
 802f964:	4652      	mov	r2, sl
 802f966:	465b      	mov	r3, fp
 802f968:	f7d0 fc9a 	bl	80002a0 <__adddf3>
 802f96c:	2000      	movs	r0, #0
 802f96e:	4604      	mov	r4, r0
 802f970:	460d      	mov	r5, r1
 802f972:	4602      	mov	r2, r0
 802f974:	460b      	mov	r3, r1
 802f976:	4640      	mov	r0, r8
 802f978:	4649      	mov	r1, r9
 802f97a:	f7d0 fe47 	bl	800060c <__aeabi_dmul>
 802f97e:	4b62      	ldr	r3, [pc, #392]	; (802fb08 <__ieee754_pow+0x770>)
 802f980:	4680      	mov	r8, r0
 802f982:	4689      	mov	r9, r1
 802f984:	2200      	movs	r2, #0
 802f986:	4620      	mov	r0, r4
 802f988:	4629      	mov	r1, r5
 802f98a:	f7d0 fc87 	bl	800029c <__aeabi_dsub>
 802f98e:	4632      	mov	r2, r6
 802f990:	463b      	mov	r3, r7
 802f992:	f7d0 fc83 	bl	800029c <__aeabi_dsub>
 802f996:	4602      	mov	r2, r0
 802f998:	460b      	mov	r3, r1
 802f99a:	4650      	mov	r0, sl
 802f99c:	4659      	mov	r1, fp
 802f99e:	f7d0 fc7d 	bl	800029c <__aeabi_dsub>
 802f9a2:	ec53 2b18 	vmov	r2, r3, d8
 802f9a6:	f7d0 fe31 	bl	800060c <__aeabi_dmul>
 802f9aa:	4622      	mov	r2, r4
 802f9ac:	4606      	mov	r6, r0
 802f9ae:	460f      	mov	r7, r1
 802f9b0:	462b      	mov	r3, r5
 802f9b2:	ec51 0b19 	vmov	r0, r1, d9
 802f9b6:	f7d0 fe29 	bl	800060c <__aeabi_dmul>
 802f9ba:	4602      	mov	r2, r0
 802f9bc:	460b      	mov	r3, r1
 802f9be:	4630      	mov	r0, r6
 802f9c0:	4639      	mov	r1, r7
 802f9c2:	f7d0 fc6d 	bl	80002a0 <__adddf3>
 802f9c6:	4606      	mov	r6, r0
 802f9c8:	460f      	mov	r7, r1
 802f9ca:	4602      	mov	r2, r0
 802f9cc:	460b      	mov	r3, r1
 802f9ce:	4640      	mov	r0, r8
 802f9d0:	4649      	mov	r1, r9
 802f9d2:	f7d0 fc65 	bl	80002a0 <__adddf3>
 802f9d6:	a33e      	add	r3, pc, #248	; (adr r3, 802fad0 <__ieee754_pow+0x738>)
 802f9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f9dc:	2000      	movs	r0, #0
 802f9de:	4604      	mov	r4, r0
 802f9e0:	460d      	mov	r5, r1
 802f9e2:	f7d0 fe13 	bl	800060c <__aeabi_dmul>
 802f9e6:	4642      	mov	r2, r8
 802f9e8:	ec41 0b18 	vmov	d8, r0, r1
 802f9ec:	464b      	mov	r3, r9
 802f9ee:	4620      	mov	r0, r4
 802f9f0:	4629      	mov	r1, r5
 802f9f2:	f7d0 fc53 	bl	800029c <__aeabi_dsub>
 802f9f6:	4602      	mov	r2, r0
 802f9f8:	460b      	mov	r3, r1
 802f9fa:	4630      	mov	r0, r6
 802f9fc:	4639      	mov	r1, r7
 802f9fe:	f7d0 fc4d 	bl	800029c <__aeabi_dsub>
 802fa02:	a335      	add	r3, pc, #212	; (adr r3, 802fad8 <__ieee754_pow+0x740>)
 802fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fa08:	f7d0 fe00 	bl	800060c <__aeabi_dmul>
 802fa0c:	a334      	add	r3, pc, #208	; (adr r3, 802fae0 <__ieee754_pow+0x748>)
 802fa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fa12:	4606      	mov	r6, r0
 802fa14:	460f      	mov	r7, r1
 802fa16:	4620      	mov	r0, r4
 802fa18:	4629      	mov	r1, r5
 802fa1a:	f7d0 fdf7 	bl	800060c <__aeabi_dmul>
 802fa1e:	4602      	mov	r2, r0
 802fa20:	460b      	mov	r3, r1
 802fa22:	4630      	mov	r0, r6
 802fa24:	4639      	mov	r1, r7
 802fa26:	f7d0 fc3b 	bl	80002a0 <__adddf3>
 802fa2a:	9a07      	ldr	r2, [sp, #28]
 802fa2c:	4b37      	ldr	r3, [pc, #220]	; (802fb0c <__ieee754_pow+0x774>)
 802fa2e:	4413      	add	r3, r2
 802fa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fa34:	f7d0 fc34 	bl	80002a0 <__adddf3>
 802fa38:	4682      	mov	sl, r0
 802fa3a:	9805      	ldr	r0, [sp, #20]
 802fa3c:	468b      	mov	fp, r1
 802fa3e:	f7d0 fd7b 	bl	8000538 <__aeabi_i2d>
 802fa42:	9a07      	ldr	r2, [sp, #28]
 802fa44:	4b32      	ldr	r3, [pc, #200]	; (802fb10 <__ieee754_pow+0x778>)
 802fa46:	4413      	add	r3, r2
 802fa48:	e9d3 8900 	ldrd	r8, r9, [r3]
 802fa4c:	4606      	mov	r6, r0
 802fa4e:	460f      	mov	r7, r1
 802fa50:	4652      	mov	r2, sl
 802fa52:	465b      	mov	r3, fp
 802fa54:	ec51 0b18 	vmov	r0, r1, d8
 802fa58:	f7d0 fc22 	bl	80002a0 <__adddf3>
 802fa5c:	4642      	mov	r2, r8
 802fa5e:	464b      	mov	r3, r9
 802fa60:	f7d0 fc1e 	bl	80002a0 <__adddf3>
 802fa64:	4632      	mov	r2, r6
 802fa66:	463b      	mov	r3, r7
 802fa68:	f7d0 fc1a 	bl	80002a0 <__adddf3>
 802fa6c:	2000      	movs	r0, #0
 802fa6e:	4632      	mov	r2, r6
 802fa70:	463b      	mov	r3, r7
 802fa72:	4604      	mov	r4, r0
 802fa74:	460d      	mov	r5, r1
 802fa76:	f7d0 fc11 	bl	800029c <__aeabi_dsub>
 802fa7a:	4642      	mov	r2, r8
 802fa7c:	464b      	mov	r3, r9
 802fa7e:	f7d0 fc0d 	bl	800029c <__aeabi_dsub>
 802fa82:	ec53 2b18 	vmov	r2, r3, d8
 802fa86:	f7d0 fc09 	bl	800029c <__aeabi_dsub>
 802fa8a:	4602      	mov	r2, r0
 802fa8c:	460b      	mov	r3, r1
 802fa8e:	4650      	mov	r0, sl
 802fa90:	4659      	mov	r1, fp
 802fa92:	e610      	b.n	802f6b6 <__ieee754_pow+0x31e>
 802fa94:	2401      	movs	r4, #1
 802fa96:	e6a1      	b.n	802f7dc <__ieee754_pow+0x444>
 802fa98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 802fae8 <__ieee754_pow+0x750>
 802fa9c:	e617      	b.n	802f6ce <__ieee754_pow+0x336>
 802fa9e:	bf00      	nop
 802faa0:	4a454eef 	.word	0x4a454eef
 802faa4:	3fca7e28 	.word	0x3fca7e28
 802faa8:	93c9db65 	.word	0x93c9db65
 802faac:	3fcd864a 	.word	0x3fcd864a
 802fab0:	a91d4101 	.word	0xa91d4101
 802fab4:	3fd17460 	.word	0x3fd17460
 802fab8:	518f264d 	.word	0x518f264d
 802fabc:	3fd55555 	.word	0x3fd55555
 802fac0:	db6fabff 	.word	0xdb6fabff
 802fac4:	3fdb6db6 	.word	0x3fdb6db6
 802fac8:	33333303 	.word	0x33333303
 802facc:	3fe33333 	.word	0x3fe33333
 802fad0:	e0000000 	.word	0xe0000000
 802fad4:	3feec709 	.word	0x3feec709
 802fad8:	dc3a03fd 	.word	0xdc3a03fd
 802fadc:	3feec709 	.word	0x3feec709
 802fae0:	145b01f5 	.word	0x145b01f5
 802fae4:	be3e2fe0 	.word	0xbe3e2fe0
 802fae8:	00000000 	.word	0x00000000
 802faec:	3ff00000 	.word	0x3ff00000
 802faf0:	7ff00000 	.word	0x7ff00000
 802faf4:	43400000 	.word	0x43400000
 802faf8:	0003988e 	.word	0x0003988e
 802fafc:	000bb679 	.word	0x000bb679
 802fb00:	08037220 	.word	0x08037220
 802fb04:	3ff00000 	.word	0x3ff00000
 802fb08:	40080000 	.word	0x40080000
 802fb0c:	08037240 	.word	0x08037240
 802fb10:	08037230 	.word	0x08037230
 802fb14:	a3b5      	add	r3, pc, #724	; (adr r3, 802fdec <__ieee754_pow+0xa54>)
 802fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb1a:	4640      	mov	r0, r8
 802fb1c:	4649      	mov	r1, r9
 802fb1e:	f7d0 fbbf 	bl	80002a0 <__adddf3>
 802fb22:	4622      	mov	r2, r4
 802fb24:	ec41 0b1a 	vmov	d10, r0, r1
 802fb28:	462b      	mov	r3, r5
 802fb2a:	4630      	mov	r0, r6
 802fb2c:	4639      	mov	r1, r7
 802fb2e:	f7d0 fbb5 	bl	800029c <__aeabi_dsub>
 802fb32:	4602      	mov	r2, r0
 802fb34:	460b      	mov	r3, r1
 802fb36:	ec51 0b1a 	vmov	r0, r1, d10
 802fb3a:	f7d0 fff7 	bl	8000b2c <__aeabi_dcmpgt>
 802fb3e:	2800      	cmp	r0, #0
 802fb40:	f47f ae04 	bne.w	802f74c <__ieee754_pow+0x3b4>
 802fb44:	4aa4      	ldr	r2, [pc, #656]	; (802fdd8 <__ieee754_pow+0xa40>)
 802fb46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802fb4a:	4293      	cmp	r3, r2
 802fb4c:	f340 8108 	ble.w	802fd60 <__ieee754_pow+0x9c8>
 802fb50:	151b      	asrs	r3, r3, #20
 802fb52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802fb56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802fb5a:	fa4a f303 	asr.w	r3, sl, r3
 802fb5e:	445b      	add	r3, fp
 802fb60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802fb64:	4e9d      	ldr	r6, [pc, #628]	; (802fddc <__ieee754_pow+0xa44>)
 802fb66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802fb6a:	4116      	asrs	r6, r2
 802fb6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802fb70:	2000      	movs	r0, #0
 802fb72:	ea23 0106 	bic.w	r1, r3, r6
 802fb76:	f1c2 0214 	rsb	r2, r2, #20
 802fb7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802fb7e:	fa4a fa02 	asr.w	sl, sl, r2
 802fb82:	f1bb 0f00 	cmp.w	fp, #0
 802fb86:	4602      	mov	r2, r0
 802fb88:	460b      	mov	r3, r1
 802fb8a:	4620      	mov	r0, r4
 802fb8c:	4629      	mov	r1, r5
 802fb8e:	bfb8      	it	lt
 802fb90:	f1ca 0a00 	rsblt	sl, sl, #0
 802fb94:	f7d0 fb82 	bl	800029c <__aeabi_dsub>
 802fb98:	ec41 0b19 	vmov	d9, r0, r1
 802fb9c:	4642      	mov	r2, r8
 802fb9e:	464b      	mov	r3, r9
 802fba0:	ec51 0b19 	vmov	r0, r1, d9
 802fba4:	f7d0 fb7c 	bl	80002a0 <__adddf3>
 802fba8:	a37b      	add	r3, pc, #492	; (adr r3, 802fd98 <__ieee754_pow+0xa00>)
 802fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fbae:	2000      	movs	r0, #0
 802fbb0:	4604      	mov	r4, r0
 802fbb2:	460d      	mov	r5, r1
 802fbb4:	f7d0 fd2a 	bl	800060c <__aeabi_dmul>
 802fbb8:	ec53 2b19 	vmov	r2, r3, d9
 802fbbc:	4606      	mov	r6, r0
 802fbbe:	460f      	mov	r7, r1
 802fbc0:	4620      	mov	r0, r4
 802fbc2:	4629      	mov	r1, r5
 802fbc4:	f7d0 fb6a 	bl	800029c <__aeabi_dsub>
 802fbc8:	4602      	mov	r2, r0
 802fbca:	460b      	mov	r3, r1
 802fbcc:	4640      	mov	r0, r8
 802fbce:	4649      	mov	r1, r9
 802fbd0:	f7d0 fb64 	bl	800029c <__aeabi_dsub>
 802fbd4:	a372      	add	r3, pc, #456	; (adr r3, 802fda0 <__ieee754_pow+0xa08>)
 802fbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fbda:	f7d0 fd17 	bl	800060c <__aeabi_dmul>
 802fbde:	a372      	add	r3, pc, #456	; (adr r3, 802fda8 <__ieee754_pow+0xa10>)
 802fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fbe4:	4680      	mov	r8, r0
 802fbe6:	4689      	mov	r9, r1
 802fbe8:	4620      	mov	r0, r4
 802fbea:	4629      	mov	r1, r5
 802fbec:	f7d0 fd0e 	bl	800060c <__aeabi_dmul>
 802fbf0:	4602      	mov	r2, r0
 802fbf2:	460b      	mov	r3, r1
 802fbf4:	4640      	mov	r0, r8
 802fbf6:	4649      	mov	r1, r9
 802fbf8:	f7d0 fb52 	bl	80002a0 <__adddf3>
 802fbfc:	4604      	mov	r4, r0
 802fbfe:	460d      	mov	r5, r1
 802fc00:	4602      	mov	r2, r0
 802fc02:	460b      	mov	r3, r1
 802fc04:	4630      	mov	r0, r6
 802fc06:	4639      	mov	r1, r7
 802fc08:	f7d0 fb4a 	bl	80002a0 <__adddf3>
 802fc0c:	4632      	mov	r2, r6
 802fc0e:	463b      	mov	r3, r7
 802fc10:	4680      	mov	r8, r0
 802fc12:	4689      	mov	r9, r1
 802fc14:	f7d0 fb42 	bl	800029c <__aeabi_dsub>
 802fc18:	4602      	mov	r2, r0
 802fc1a:	460b      	mov	r3, r1
 802fc1c:	4620      	mov	r0, r4
 802fc1e:	4629      	mov	r1, r5
 802fc20:	f7d0 fb3c 	bl	800029c <__aeabi_dsub>
 802fc24:	4642      	mov	r2, r8
 802fc26:	4606      	mov	r6, r0
 802fc28:	460f      	mov	r7, r1
 802fc2a:	464b      	mov	r3, r9
 802fc2c:	4640      	mov	r0, r8
 802fc2e:	4649      	mov	r1, r9
 802fc30:	f7d0 fcec 	bl	800060c <__aeabi_dmul>
 802fc34:	a35e      	add	r3, pc, #376	; (adr r3, 802fdb0 <__ieee754_pow+0xa18>)
 802fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc3a:	4604      	mov	r4, r0
 802fc3c:	460d      	mov	r5, r1
 802fc3e:	f7d0 fce5 	bl	800060c <__aeabi_dmul>
 802fc42:	a35d      	add	r3, pc, #372	; (adr r3, 802fdb8 <__ieee754_pow+0xa20>)
 802fc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc48:	f7d0 fb28 	bl	800029c <__aeabi_dsub>
 802fc4c:	4622      	mov	r2, r4
 802fc4e:	462b      	mov	r3, r5
 802fc50:	f7d0 fcdc 	bl	800060c <__aeabi_dmul>
 802fc54:	a35a      	add	r3, pc, #360	; (adr r3, 802fdc0 <__ieee754_pow+0xa28>)
 802fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc5a:	f7d0 fb21 	bl	80002a0 <__adddf3>
 802fc5e:	4622      	mov	r2, r4
 802fc60:	462b      	mov	r3, r5
 802fc62:	f7d0 fcd3 	bl	800060c <__aeabi_dmul>
 802fc66:	a358      	add	r3, pc, #352	; (adr r3, 802fdc8 <__ieee754_pow+0xa30>)
 802fc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc6c:	f7d0 fb16 	bl	800029c <__aeabi_dsub>
 802fc70:	4622      	mov	r2, r4
 802fc72:	462b      	mov	r3, r5
 802fc74:	f7d0 fcca 	bl	800060c <__aeabi_dmul>
 802fc78:	a355      	add	r3, pc, #340	; (adr r3, 802fdd0 <__ieee754_pow+0xa38>)
 802fc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc7e:	f7d0 fb0f 	bl	80002a0 <__adddf3>
 802fc82:	4622      	mov	r2, r4
 802fc84:	462b      	mov	r3, r5
 802fc86:	f7d0 fcc1 	bl	800060c <__aeabi_dmul>
 802fc8a:	4602      	mov	r2, r0
 802fc8c:	460b      	mov	r3, r1
 802fc8e:	4640      	mov	r0, r8
 802fc90:	4649      	mov	r1, r9
 802fc92:	f7d0 fb03 	bl	800029c <__aeabi_dsub>
 802fc96:	4604      	mov	r4, r0
 802fc98:	460d      	mov	r5, r1
 802fc9a:	4602      	mov	r2, r0
 802fc9c:	460b      	mov	r3, r1
 802fc9e:	4640      	mov	r0, r8
 802fca0:	4649      	mov	r1, r9
 802fca2:	f7d0 fcb3 	bl	800060c <__aeabi_dmul>
 802fca6:	2200      	movs	r2, #0
 802fca8:	ec41 0b19 	vmov	d9, r0, r1
 802fcac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802fcb0:	4620      	mov	r0, r4
 802fcb2:	4629      	mov	r1, r5
 802fcb4:	f7d0 faf2 	bl	800029c <__aeabi_dsub>
 802fcb8:	4602      	mov	r2, r0
 802fcba:	460b      	mov	r3, r1
 802fcbc:	ec51 0b19 	vmov	r0, r1, d9
 802fcc0:	f7d0 fdce 	bl	8000860 <__aeabi_ddiv>
 802fcc4:	4632      	mov	r2, r6
 802fcc6:	4604      	mov	r4, r0
 802fcc8:	460d      	mov	r5, r1
 802fcca:	463b      	mov	r3, r7
 802fccc:	4640      	mov	r0, r8
 802fcce:	4649      	mov	r1, r9
 802fcd0:	f7d0 fc9c 	bl	800060c <__aeabi_dmul>
 802fcd4:	4632      	mov	r2, r6
 802fcd6:	463b      	mov	r3, r7
 802fcd8:	f7d0 fae2 	bl	80002a0 <__adddf3>
 802fcdc:	4602      	mov	r2, r0
 802fcde:	460b      	mov	r3, r1
 802fce0:	4620      	mov	r0, r4
 802fce2:	4629      	mov	r1, r5
 802fce4:	f7d0 fada 	bl	800029c <__aeabi_dsub>
 802fce8:	4642      	mov	r2, r8
 802fcea:	464b      	mov	r3, r9
 802fcec:	f7d0 fad6 	bl	800029c <__aeabi_dsub>
 802fcf0:	460b      	mov	r3, r1
 802fcf2:	4602      	mov	r2, r0
 802fcf4:	493a      	ldr	r1, [pc, #232]	; (802fde0 <__ieee754_pow+0xa48>)
 802fcf6:	2000      	movs	r0, #0
 802fcf8:	f7d0 fad0 	bl	800029c <__aeabi_dsub>
 802fcfc:	ec41 0b10 	vmov	d0, r0, r1
 802fd00:	ee10 3a90 	vmov	r3, s1
 802fd04:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802fd08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802fd0c:	da2b      	bge.n	802fd66 <__ieee754_pow+0x9ce>
 802fd0e:	4650      	mov	r0, sl
 802fd10:	f001 fa86 	bl	8031220 <scalbn>
 802fd14:	ec51 0b10 	vmov	r0, r1, d0
 802fd18:	ec53 2b18 	vmov	r2, r3, d8
 802fd1c:	f7ff bbed 	b.w	802f4fa <__ieee754_pow+0x162>
 802fd20:	4b30      	ldr	r3, [pc, #192]	; (802fde4 <__ieee754_pow+0xa4c>)
 802fd22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802fd26:	429e      	cmp	r6, r3
 802fd28:	f77f af0c 	ble.w	802fb44 <__ieee754_pow+0x7ac>
 802fd2c:	4b2e      	ldr	r3, [pc, #184]	; (802fde8 <__ieee754_pow+0xa50>)
 802fd2e:	440b      	add	r3, r1
 802fd30:	4303      	orrs	r3, r0
 802fd32:	d009      	beq.n	802fd48 <__ieee754_pow+0x9b0>
 802fd34:	ec51 0b18 	vmov	r0, r1, d8
 802fd38:	2200      	movs	r2, #0
 802fd3a:	2300      	movs	r3, #0
 802fd3c:	f7d0 fed8 	bl	8000af0 <__aeabi_dcmplt>
 802fd40:	3800      	subs	r0, #0
 802fd42:	bf18      	it	ne
 802fd44:	2001      	movne	r0, #1
 802fd46:	e447      	b.n	802f5d8 <__ieee754_pow+0x240>
 802fd48:	4622      	mov	r2, r4
 802fd4a:	462b      	mov	r3, r5
 802fd4c:	f7d0 faa6 	bl	800029c <__aeabi_dsub>
 802fd50:	4642      	mov	r2, r8
 802fd52:	464b      	mov	r3, r9
 802fd54:	f7d0 fee0 	bl	8000b18 <__aeabi_dcmpge>
 802fd58:	2800      	cmp	r0, #0
 802fd5a:	f43f aef3 	beq.w	802fb44 <__ieee754_pow+0x7ac>
 802fd5e:	e7e9      	b.n	802fd34 <__ieee754_pow+0x99c>
 802fd60:	f04f 0a00 	mov.w	sl, #0
 802fd64:	e71a      	b.n	802fb9c <__ieee754_pow+0x804>
 802fd66:	ec51 0b10 	vmov	r0, r1, d0
 802fd6a:	4619      	mov	r1, r3
 802fd6c:	e7d4      	b.n	802fd18 <__ieee754_pow+0x980>
 802fd6e:	491c      	ldr	r1, [pc, #112]	; (802fde0 <__ieee754_pow+0xa48>)
 802fd70:	2000      	movs	r0, #0
 802fd72:	f7ff bb30 	b.w	802f3d6 <__ieee754_pow+0x3e>
 802fd76:	2000      	movs	r0, #0
 802fd78:	2100      	movs	r1, #0
 802fd7a:	f7ff bb2c 	b.w	802f3d6 <__ieee754_pow+0x3e>
 802fd7e:	4630      	mov	r0, r6
 802fd80:	4639      	mov	r1, r7
 802fd82:	f7ff bb28 	b.w	802f3d6 <__ieee754_pow+0x3e>
 802fd86:	9204      	str	r2, [sp, #16]
 802fd88:	f7ff bb7a 	b.w	802f480 <__ieee754_pow+0xe8>
 802fd8c:	2300      	movs	r3, #0
 802fd8e:	f7ff bb64 	b.w	802f45a <__ieee754_pow+0xc2>
 802fd92:	bf00      	nop
 802fd94:	f3af 8000 	nop.w
 802fd98:	00000000 	.word	0x00000000
 802fd9c:	3fe62e43 	.word	0x3fe62e43
 802fda0:	fefa39ef 	.word	0xfefa39ef
 802fda4:	3fe62e42 	.word	0x3fe62e42
 802fda8:	0ca86c39 	.word	0x0ca86c39
 802fdac:	be205c61 	.word	0xbe205c61
 802fdb0:	72bea4d0 	.word	0x72bea4d0
 802fdb4:	3e663769 	.word	0x3e663769
 802fdb8:	c5d26bf1 	.word	0xc5d26bf1
 802fdbc:	3ebbbd41 	.word	0x3ebbbd41
 802fdc0:	af25de2c 	.word	0xaf25de2c
 802fdc4:	3f11566a 	.word	0x3f11566a
 802fdc8:	16bebd93 	.word	0x16bebd93
 802fdcc:	3f66c16c 	.word	0x3f66c16c
 802fdd0:	5555553e 	.word	0x5555553e
 802fdd4:	3fc55555 	.word	0x3fc55555
 802fdd8:	3fe00000 	.word	0x3fe00000
 802fddc:	000fffff 	.word	0x000fffff
 802fde0:	3ff00000 	.word	0x3ff00000
 802fde4:	4090cbff 	.word	0x4090cbff
 802fde8:	3f6f3400 	.word	0x3f6f3400
 802fdec:	652b82fe 	.word	0x652b82fe
 802fdf0:	3c971547 	.word	0x3c971547
 802fdf4:	00000000 	.word	0x00000000

0802fdf8 <__ieee754_rem_pio2>:
 802fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fdfc:	ed2d 8b02 	vpush	{d8}
 802fe00:	ec55 4b10 	vmov	r4, r5, d0
 802fe04:	4bca      	ldr	r3, [pc, #808]	; (8030130 <__ieee754_rem_pio2+0x338>)
 802fe06:	b08b      	sub	sp, #44	; 0x2c
 802fe08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802fe0c:	4598      	cmp	r8, r3
 802fe0e:	4682      	mov	sl, r0
 802fe10:	9502      	str	r5, [sp, #8]
 802fe12:	dc08      	bgt.n	802fe26 <__ieee754_rem_pio2+0x2e>
 802fe14:	2200      	movs	r2, #0
 802fe16:	2300      	movs	r3, #0
 802fe18:	ed80 0b00 	vstr	d0, [r0]
 802fe1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802fe20:	f04f 0b00 	mov.w	fp, #0
 802fe24:	e028      	b.n	802fe78 <__ieee754_rem_pio2+0x80>
 802fe26:	4bc3      	ldr	r3, [pc, #780]	; (8030134 <__ieee754_rem_pio2+0x33c>)
 802fe28:	4598      	cmp	r8, r3
 802fe2a:	dc78      	bgt.n	802ff1e <__ieee754_rem_pio2+0x126>
 802fe2c:	9b02      	ldr	r3, [sp, #8]
 802fe2e:	4ec2      	ldr	r6, [pc, #776]	; (8030138 <__ieee754_rem_pio2+0x340>)
 802fe30:	2b00      	cmp	r3, #0
 802fe32:	ee10 0a10 	vmov	r0, s0
 802fe36:	a3b0      	add	r3, pc, #704	; (adr r3, 80300f8 <__ieee754_rem_pio2+0x300>)
 802fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe3c:	4629      	mov	r1, r5
 802fe3e:	dd39      	ble.n	802feb4 <__ieee754_rem_pio2+0xbc>
 802fe40:	f7d0 fa2c 	bl	800029c <__aeabi_dsub>
 802fe44:	45b0      	cmp	r8, r6
 802fe46:	4604      	mov	r4, r0
 802fe48:	460d      	mov	r5, r1
 802fe4a:	d01b      	beq.n	802fe84 <__ieee754_rem_pio2+0x8c>
 802fe4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8030100 <__ieee754_rem_pio2+0x308>)
 802fe4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe52:	f7d0 fa23 	bl	800029c <__aeabi_dsub>
 802fe56:	4602      	mov	r2, r0
 802fe58:	460b      	mov	r3, r1
 802fe5a:	e9ca 2300 	strd	r2, r3, [sl]
 802fe5e:	4620      	mov	r0, r4
 802fe60:	4629      	mov	r1, r5
 802fe62:	f7d0 fa1b 	bl	800029c <__aeabi_dsub>
 802fe66:	a3a6      	add	r3, pc, #664	; (adr r3, 8030100 <__ieee754_rem_pio2+0x308>)
 802fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe6c:	f7d0 fa16 	bl	800029c <__aeabi_dsub>
 802fe70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802fe74:	f04f 0b01 	mov.w	fp, #1
 802fe78:	4658      	mov	r0, fp
 802fe7a:	b00b      	add	sp, #44	; 0x2c
 802fe7c:	ecbd 8b02 	vpop	{d8}
 802fe80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fe84:	a3a0      	add	r3, pc, #640	; (adr r3, 8030108 <__ieee754_rem_pio2+0x310>)
 802fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe8a:	f7d0 fa07 	bl	800029c <__aeabi_dsub>
 802fe8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8030110 <__ieee754_rem_pio2+0x318>)
 802fe90:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe94:	4604      	mov	r4, r0
 802fe96:	460d      	mov	r5, r1
 802fe98:	f7d0 fa00 	bl	800029c <__aeabi_dsub>
 802fe9c:	4602      	mov	r2, r0
 802fe9e:	460b      	mov	r3, r1
 802fea0:	e9ca 2300 	strd	r2, r3, [sl]
 802fea4:	4620      	mov	r0, r4
 802fea6:	4629      	mov	r1, r5
 802fea8:	f7d0 f9f8 	bl	800029c <__aeabi_dsub>
 802feac:	a398      	add	r3, pc, #608	; (adr r3, 8030110 <__ieee754_rem_pio2+0x318>)
 802feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802feb2:	e7db      	b.n	802fe6c <__ieee754_rem_pio2+0x74>
 802feb4:	f7d0 f9f4 	bl	80002a0 <__adddf3>
 802feb8:	45b0      	cmp	r8, r6
 802feba:	4604      	mov	r4, r0
 802febc:	460d      	mov	r5, r1
 802febe:	d016      	beq.n	802feee <__ieee754_rem_pio2+0xf6>
 802fec0:	a38f      	add	r3, pc, #572	; (adr r3, 8030100 <__ieee754_rem_pio2+0x308>)
 802fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fec6:	f7d0 f9eb 	bl	80002a0 <__adddf3>
 802feca:	4602      	mov	r2, r0
 802fecc:	460b      	mov	r3, r1
 802fece:	e9ca 2300 	strd	r2, r3, [sl]
 802fed2:	4620      	mov	r0, r4
 802fed4:	4629      	mov	r1, r5
 802fed6:	f7d0 f9e1 	bl	800029c <__aeabi_dsub>
 802feda:	a389      	add	r3, pc, #548	; (adr r3, 8030100 <__ieee754_rem_pio2+0x308>)
 802fedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fee0:	f7d0 f9de 	bl	80002a0 <__adddf3>
 802fee4:	f04f 3bff 	mov.w	fp, #4294967295
 802fee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802feec:	e7c4      	b.n	802fe78 <__ieee754_rem_pio2+0x80>
 802feee:	a386      	add	r3, pc, #536	; (adr r3, 8030108 <__ieee754_rem_pio2+0x310>)
 802fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fef4:	f7d0 f9d4 	bl	80002a0 <__adddf3>
 802fef8:	a385      	add	r3, pc, #532	; (adr r3, 8030110 <__ieee754_rem_pio2+0x318>)
 802fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fefe:	4604      	mov	r4, r0
 802ff00:	460d      	mov	r5, r1
 802ff02:	f7d0 f9cd 	bl	80002a0 <__adddf3>
 802ff06:	4602      	mov	r2, r0
 802ff08:	460b      	mov	r3, r1
 802ff0a:	e9ca 2300 	strd	r2, r3, [sl]
 802ff0e:	4620      	mov	r0, r4
 802ff10:	4629      	mov	r1, r5
 802ff12:	f7d0 f9c3 	bl	800029c <__aeabi_dsub>
 802ff16:	a37e      	add	r3, pc, #504	; (adr r3, 8030110 <__ieee754_rem_pio2+0x318>)
 802ff18:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff1c:	e7e0      	b.n	802fee0 <__ieee754_rem_pio2+0xe8>
 802ff1e:	4b87      	ldr	r3, [pc, #540]	; (803013c <__ieee754_rem_pio2+0x344>)
 802ff20:	4598      	cmp	r8, r3
 802ff22:	f300 80d9 	bgt.w	80300d8 <__ieee754_rem_pio2+0x2e0>
 802ff26:	f001 f967 	bl	80311f8 <fabs>
 802ff2a:	ec55 4b10 	vmov	r4, r5, d0
 802ff2e:	ee10 0a10 	vmov	r0, s0
 802ff32:	a379      	add	r3, pc, #484	; (adr r3, 8030118 <__ieee754_rem_pio2+0x320>)
 802ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff38:	4629      	mov	r1, r5
 802ff3a:	f7d0 fb67 	bl	800060c <__aeabi_dmul>
 802ff3e:	4b80      	ldr	r3, [pc, #512]	; (8030140 <__ieee754_rem_pio2+0x348>)
 802ff40:	2200      	movs	r2, #0
 802ff42:	f7d0 f9ad 	bl	80002a0 <__adddf3>
 802ff46:	f7d0 fe11 	bl	8000b6c <__aeabi_d2iz>
 802ff4a:	4683      	mov	fp, r0
 802ff4c:	f7d0 faf4 	bl	8000538 <__aeabi_i2d>
 802ff50:	4602      	mov	r2, r0
 802ff52:	460b      	mov	r3, r1
 802ff54:	ec43 2b18 	vmov	d8, r2, r3
 802ff58:	a367      	add	r3, pc, #412	; (adr r3, 80300f8 <__ieee754_rem_pio2+0x300>)
 802ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff5e:	f7d0 fb55 	bl	800060c <__aeabi_dmul>
 802ff62:	4602      	mov	r2, r0
 802ff64:	460b      	mov	r3, r1
 802ff66:	4620      	mov	r0, r4
 802ff68:	4629      	mov	r1, r5
 802ff6a:	f7d0 f997 	bl	800029c <__aeabi_dsub>
 802ff6e:	a364      	add	r3, pc, #400	; (adr r3, 8030100 <__ieee754_rem_pio2+0x308>)
 802ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff74:	4606      	mov	r6, r0
 802ff76:	460f      	mov	r7, r1
 802ff78:	ec51 0b18 	vmov	r0, r1, d8
 802ff7c:	f7d0 fb46 	bl	800060c <__aeabi_dmul>
 802ff80:	f1bb 0f1f 	cmp.w	fp, #31
 802ff84:	4604      	mov	r4, r0
 802ff86:	460d      	mov	r5, r1
 802ff88:	dc0d      	bgt.n	802ffa6 <__ieee754_rem_pio2+0x1ae>
 802ff8a:	4b6e      	ldr	r3, [pc, #440]	; (8030144 <__ieee754_rem_pio2+0x34c>)
 802ff8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 802ff90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ff94:	4543      	cmp	r3, r8
 802ff96:	d006      	beq.n	802ffa6 <__ieee754_rem_pio2+0x1ae>
 802ff98:	4622      	mov	r2, r4
 802ff9a:	462b      	mov	r3, r5
 802ff9c:	4630      	mov	r0, r6
 802ff9e:	4639      	mov	r1, r7
 802ffa0:	f7d0 f97c 	bl	800029c <__aeabi_dsub>
 802ffa4:	e00f      	b.n	802ffc6 <__ieee754_rem_pio2+0x1ce>
 802ffa6:	462b      	mov	r3, r5
 802ffa8:	4622      	mov	r2, r4
 802ffaa:	4630      	mov	r0, r6
 802ffac:	4639      	mov	r1, r7
 802ffae:	f7d0 f975 	bl	800029c <__aeabi_dsub>
 802ffb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 802ffb6:	9303      	str	r3, [sp, #12]
 802ffb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802ffbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 802ffc0:	f1b8 0f10 	cmp.w	r8, #16
 802ffc4:	dc02      	bgt.n	802ffcc <__ieee754_rem_pio2+0x1d4>
 802ffc6:	e9ca 0100 	strd	r0, r1, [sl]
 802ffca:	e039      	b.n	8030040 <__ieee754_rem_pio2+0x248>
 802ffcc:	a34e      	add	r3, pc, #312	; (adr r3, 8030108 <__ieee754_rem_pio2+0x310>)
 802ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffd2:	ec51 0b18 	vmov	r0, r1, d8
 802ffd6:	f7d0 fb19 	bl	800060c <__aeabi_dmul>
 802ffda:	4604      	mov	r4, r0
 802ffdc:	460d      	mov	r5, r1
 802ffde:	4602      	mov	r2, r0
 802ffe0:	460b      	mov	r3, r1
 802ffe2:	4630      	mov	r0, r6
 802ffe4:	4639      	mov	r1, r7
 802ffe6:	f7d0 f959 	bl	800029c <__aeabi_dsub>
 802ffea:	4602      	mov	r2, r0
 802ffec:	460b      	mov	r3, r1
 802ffee:	4680      	mov	r8, r0
 802fff0:	4689      	mov	r9, r1
 802fff2:	4630      	mov	r0, r6
 802fff4:	4639      	mov	r1, r7
 802fff6:	f7d0 f951 	bl	800029c <__aeabi_dsub>
 802fffa:	4622      	mov	r2, r4
 802fffc:	462b      	mov	r3, r5
 802fffe:	f7d0 f94d 	bl	800029c <__aeabi_dsub>
 8030002:	a343      	add	r3, pc, #268	; (adr r3, 8030110 <__ieee754_rem_pio2+0x318>)
 8030004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030008:	4604      	mov	r4, r0
 803000a:	460d      	mov	r5, r1
 803000c:	ec51 0b18 	vmov	r0, r1, d8
 8030010:	f7d0 fafc 	bl	800060c <__aeabi_dmul>
 8030014:	4622      	mov	r2, r4
 8030016:	462b      	mov	r3, r5
 8030018:	f7d0 f940 	bl	800029c <__aeabi_dsub>
 803001c:	4602      	mov	r2, r0
 803001e:	460b      	mov	r3, r1
 8030020:	4604      	mov	r4, r0
 8030022:	460d      	mov	r5, r1
 8030024:	4640      	mov	r0, r8
 8030026:	4649      	mov	r1, r9
 8030028:	f7d0 f938 	bl	800029c <__aeabi_dsub>
 803002c:	9a03      	ldr	r2, [sp, #12]
 803002e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8030032:	1ad3      	subs	r3, r2, r3
 8030034:	2b31      	cmp	r3, #49	; 0x31
 8030036:	dc24      	bgt.n	8030082 <__ieee754_rem_pio2+0x28a>
 8030038:	e9ca 0100 	strd	r0, r1, [sl]
 803003c:	4646      	mov	r6, r8
 803003e:	464f      	mov	r7, r9
 8030040:	e9da 8900 	ldrd	r8, r9, [sl]
 8030044:	4630      	mov	r0, r6
 8030046:	4642      	mov	r2, r8
 8030048:	464b      	mov	r3, r9
 803004a:	4639      	mov	r1, r7
 803004c:	f7d0 f926 	bl	800029c <__aeabi_dsub>
 8030050:	462b      	mov	r3, r5
 8030052:	4622      	mov	r2, r4
 8030054:	f7d0 f922 	bl	800029c <__aeabi_dsub>
 8030058:	9b02      	ldr	r3, [sp, #8]
 803005a:	2b00      	cmp	r3, #0
 803005c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8030060:	f6bf af0a 	bge.w	802fe78 <__ieee754_rem_pio2+0x80>
 8030064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8030068:	f8ca 3004 	str.w	r3, [sl, #4]
 803006c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030070:	f8ca 8000 	str.w	r8, [sl]
 8030074:	f8ca 0008 	str.w	r0, [sl, #8]
 8030078:	f8ca 300c 	str.w	r3, [sl, #12]
 803007c:	f1cb 0b00 	rsb	fp, fp, #0
 8030080:	e6fa      	b.n	802fe78 <__ieee754_rem_pio2+0x80>
 8030082:	a327      	add	r3, pc, #156	; (adr r3, 8030120 <__ieee754_rem_pio2+0x328>)
 8030084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030088:	ec51 0b18 	vmov	r0, r1, d8
 803008c:	f7d0 fabe 	bl	800060c <__aeabi_dmul>
 8030090:	4604      	mov	r4, r0
 8030092:	460d      	mov	r5, r1
 8030094:	4602      	mov	r2, r0
 8030096:	460b      	mov	r3, r1
 8030098:	4640      	mov	r0, r8
 803009a:	4649      	mov	r1, r9
 803009c:	f7d0 f8fe 	bl	800029c <__aeabi_dsub>
 80300a0:	4602      	mov	r2, r0
 80300a2:	460b      	mov	r3, r1
 80300a4:	4606      	mov	r6, r0
 80300a6:	460f      	mov	r7, r1
 80300a8:	4640      	mov	r0, r8
 80300aa:	4649      	mov	r1, r9
 80300ac:	f7d0 f8f6 	bl	800029c <__aeabi_dsub>
 80300b0:	4622      	mov	r2, r4
 80300b2:	462b      	mov	r3, r5
 80300b4:	f7d0 f8f2 	bl	800029c <__aeabi_dsub>
 80300b8:	a31b      	add	r3, pc, #108	; (adr r3, 8030128 <__ieee754_rem_pio2+0x330>)
 80300ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80300be:	4604      	mov	r4, r0
 80300c0:	460d      	mov	r5, r1
 80300c2:	ec51 0b18 	vmov	r0, r1, d8
 80300c6:	f7d0 faa1 	bl	800060c <__aeabi_dmul>
 80300ca:	4622      	mov	r2, r4
 80300cc:	462b      	mov	r3, r5
 80300ce:	f7d0 f8e5 	bl	800029c <__aeabi_dsub>
 80300d2:	4604      	mov	r4, r0
 80300d4:	460d      	mov	r5, r1
 80300d6:	e75f      	b.n	802ff98 <__ieee754_rem_pio2+0x1a0>
 80300d8:	4b1b      	ldr	r3, [pc, #108]	; (8030148 <__ieee754_rem_pio2+0x350>)
 80300da:	4598      	cmp	r8, r3
 80300dc:	dd36      	ble.n	803014c <__ieee754_rem_pio2+0x354>
 80300de:	ee10 2a10 	vmov	r2, s0
 80300e2:	462b      	mov	r3, r5
 80300e4:	4620      	mov	r0, r4
 80300e6:	4629      	mov	r1, r5
 80300e8:	f7d0 f8d8 	bl	800029c <__aeabi_dsub>
 80300ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80300f0:	e9ca 0100 	strd	r0, r1, [sl]
 80300f4:	e694      	b.n	802fe20 <__ieee754_rem_pio2+0x28>
 80300f6:	bf00      	nop
 80300f8:	54400000 	.word	0x54400000
 80300fc:	3ff921fb 	.word	0x3ff921fb
 8030100:	1a626331 	.word	0x1a626331
 8030104:	3dd0b461 	.word	0x3dd0b461
 8030108:	1a600000 	.word	0x1a600000
 803010c:	3dd0b461 	.word	0x3dd0b461
 8030110:	2e037073 	.word	0x2e037073
 8030114:	3ba3198a 	.word	0x3ba3198a
 8030118:	6dc9c883 	.word	0x6dc9c883
 803011c:	3fe45f30 	.word	0x3fe45f30
 8030120:	2e000000 	.word	0x2e000000
 8030124:	3ba3198a 	.word	0x3ba3198a
 8030128:	252049c1 	.word	0x252049c1
 803012c:	397b839a 	.word	0x397b839a
 8030130:	3fe921fb 	.word	0x3fe921fb
 8030134:	4002d97b 	.word	0x4002d97b
 8030138:	3ff921fb 	.word	0x3ff921fb
 803013c:	413921fb 	.word	0x413921fb
 8030140:	3fe00000 	.word	0x3fe00000
 8030144:	08037250 	.word	0x08037250
 8030148:	7fefffff 	.word	0x7fefffff
 803014c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8030150:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8030154:	ee10 0a10 	vmov	r0, s0
 8030158:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 803015c:	ee10 6a10 	vmov	r6, s0
 8030160:	460f      	mov	r7, r1
 8030162:	f7d0 fd03 	bl	8000b6c <__aeabi_d2iz>
 8030166:	f7d0 f9e7 	bl	8000538 <__aeabi_i2d>
 803016a:	4602      	mov	r2, r0
 803016c:	460b      	mov	r3, r1
 803016e:	4630      	mov	r0, r6
 8030170:	4639      	mov	r1, r7
 8030172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8030176:	f7d0 f891 	bl	800029c <__aeabi_dsub>
 803017a:	4b23      	ldr	r3, [pc, #140]	; (8030208 <__ieee754_rem_pio2+0x410>)
 803017c:	2200      	movs	r2, #0
 803017e:	f7d0 fa45 	bl	800060c <__aeabi_dmul>
 8030182:	460f      	mov	r7, r1
 8030184:	4606      	mov	r6, r0
 8030186:	f7d0 fcf1 	bl	8000b6c <__aeabi_d2iz>
 803018a:	f7d0 f9d5 	bl	8000538 <__aeabi_i2d>
 803018e:	4602      	mov	r2, r0
 8030190:	460b      	mov	r3, r1
 8030192:	4630      	mov	r0, r6
 8030194:	4639      	mov	r1, r7
 8030196:	e9cd 2306 	strd	r2, r3, [sp, #24]
 803019a:	f7d0 f87f 	bl	800029c <__aeabi_dsub>
 803019e:	4b1a      	ldr	r3, [pc, #104]	; (8030208 <__ieee754_rem_pio2+0x410>)
 80301a0:	2200      	movs	r2, #0
 80301a2:	f7d0 fa33 	bl	800060c <__aeabi_dmul>
 80301a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80301aa:	ad04      	add	r5, sp, #16
 80301ac:	f04f 0803 	mov.w	r8, #3
 80301b0:	46a9      	mov	r9, r5
 80301b2:	2600      	movs	r6, #0
 80301b4:	2700      	movs	r7, #0
 80301b6:	4632      	mov	r2, r6
 80301b8:	463b      	mov	r3, r7
 80301ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80301be:	46c3      	mov	fp, r8
 80301c0:	3d08      	subs	r5, #8
 80301c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80301c6:	f7d0 fc89 	bl	8000adc <__aeabi_dcmpeq>
 80301ca:	2800      	cmp	r0, #0
 80301cc:	d1f3      	bne.n	80301b6 <__ieee754_rem_pio2+0x3be>
 80301ce:	4b0f      	ldr	r3, [pc, #60]	; (803020c <__ieee754_rem_pio2+0x414>)
 80301d0:	9301      	str	r3, [sp, #4]
 80301d2:	2302      	movs	r3, #2
 80301d4:	9300      	str	r3, [sp, #0]
 80301d6:	4622      	mov	r2, r4
 80301d8:	465b      	mov	r3, fp
 80301da:	4651      	mov	r1, sl
 80301dc:	4648      	mov	r0, r9
 80301de:	f000 fbab 	bl	8030938 <__kernel_rem_pio2>
 80301e2:	9b02      	ldr	r3, [sp, #8]
 80301e4:	2b00      	cmp	r3, #0
 80301e6:	4683      	mov	fp, r0
 80301e8:	f6bf ae46 	bge.w	802fe78 <__ieee754_rem_pio2+0x80>
 80301ec:	e9da 2100 	ldrd	r2, r1, [sl]
 80301f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80301f4:	e9ca 2300 	strd	r2, r3, [sl]
 80301f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80301fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030200:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8030204:	e73a      	b.n	803007c <__ieee754_rem_pio2+0x284>
 8030206:	bf00      	nop
 8030208:	41700000 	.word	0x41700000
 803020c:	080372d0 	.word	0x080372d0

08030210 <__ieee754_sqrt>:
 8030210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030214:	ec55 4b10 	vmov	r4, r5, d0
 8030218:	4e55      	ldr	r6, [pc, #340]	; (8030370 <__ieee754_sqrt+0x160>)
 803021a:	43ae      	bics	r6, r5
 803021c:	ee10 0a10 	vmov	r0, s0
 8030220:	ee10 3a10 	vmov	r3, s0
 8030224:	462a      	mov	r2, r5
 8030226:	4629      	mov	r1, r5
 8030228:	d110      	bne.n	803024c <__ieee754_sqrt+0x3c>
 803022a:	ee10 2a10 	vmov	r2, s0
 803022e:	462b      	mov	r3, r5
 8030230:	f7d0 f9ec 	bl	800060c <__aeabi_dmul>
 8030234:	4602      	mov	r2, r0
 8030236:	460b      	mov	r3, r1
 8030238:	4620      	mov	r0, r4
 803023a:	4629      	mov	r1, r5
 803023c:	f7d0 f830 	bl	80002a0 <__adddf3>
 8030240:	4604      	mov	r4, r0
 8030242:	460d      	mov	r5, r1
 8030244:	ec45 4b10 	vmov	d0, r4, r5
 8030248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803024c:	2d00      	cmp	r5, #0
 803024e:	dc10      	bgt.n	8030272 <__ieee754_sqrt+0x62>
 8030250:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8030254:	4330      	orrs	r0, r6
 8030256:	d0f5      	beq.n	8030244 <__ieee754_sqrt+0x34>
 8030258:	b15d      	cbz	r5, 8030272 <__ieee754_sqrt+0x62>
 803025a:	ee10 2a10 	vmov	r2, s0
 803025e:	462b      	mov	r3, r5
 8030260:	ee10 0a10 	vmov	r0, s0
 8030264:	f7d0 f81a 	bl	800029c <__aeabi_dsub>
 8030268:	4602      	mov	r2, r0
 803026a:	460b      	mov	r3, r1
 803026c:	f7d0 faf8 	bl	8000860 <__aeabi_ddiv>
 8030270:	e7e6      	b.n	8030240 <__ieee754_sqrt+0x30>
 8030272:	1512      	asrs	r2, r2, #20
 8030274:	d074      	beq.n	8030360 <__ieee754_sqrt+0x150>
 8030276:	07d4      	lsls	r4, r2, #31
 8030278:	f3c1 0113 	ubfx	r1, r1, #0, #20
 803027c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8030280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8030284:	bf5e      	ittt	pl
 8030286:	0fda      	lsrpl	r2, r3, #31
 8030288:	005b      	lslpl	r3, r3, #1
 803028a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 803028e:	2400      	movs	r4, #0
 8030290:	0fda      	lsrs	r2, r3, #31
 8030292:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8030296:	107f      	asrs	r7, r7, #1
 8030298:	005b      	lsls	r3, r3, #1
 803029a:	2516      	movs	r5, #22
 803029c:	4620      	mov	r0, r4
 803029e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80302a2:	1886      	adds	r6, r0, r2
 80302a4:	428e      	cmp	r6, r1
 80302a6:	bfde      	ittt	le
 80302a8:	1b89      	suble	r1, r1, r6
 80302aa:	18b0      	addle	r0, r6, r2
 80302ac:	18a4      	addle	r4, r4, r2
 80302ae:	0049      	lsls	r1, r1, #1
 80302b0:	3d01      	subs	r5, #1
 80302b2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80302b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80302ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80302be:	d1f0      	bne.n	80302a2 <__ieee754_sqrt+0x92>
 80302c0:	462a      	mov	r2, r5
 80302c2:	f04f 0e20 	mov.w	lr, #32
 80302c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80302ca:	4281      	cmp	r1, r0
 80302cc:	eb06 0c05 	add.w	ip, r6, r5
 80302d0:	dc02      	bgt.n	80302d8 <__ieee754_sqrt+0xc8>
 80302d2:	d113      	bne.n	80302fc <__ieee754_sqrt+0xec>
 80302d4:	459c      	cmp	ip, r3
 80302d6:	d811      	bhi.n	80302fc <__ieee754_sqrt+0xec>
 80302d8:	f1bc 0f00 	cmp.w	ip, #0
 80302dc:	eb0c 0506 	add.w	r5, ip, r6
 80302e0:	da43      	bge.n	803036a <__ieee754_sqrt+0x15a>
 80302e2:	2d00      	cmp	r5, #0
 80302e4:	db41      	blt.n	803036a <__ieee754_sqrt+0x15a>
 80302e6:	f100 0801 	add.w	r8, r0, #1
 80302ea:	1a09      	subs	r1, r1, r0
 80302ec:	459c      	cmp	ip, r3
 80302ee:	bf88      	it	hi
 80302f0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80302f4:	eba3 030c 	sub.w	r3, r3, ip
 80302f8:	4432      	add	r2, r6
 80302fa:	4640      	mov	r0, r8
 80302fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8030300:	f1be 0e01 	subs.w	lr, lr, #1
 8030304:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8030308:	ea4f 0343 	mov.w	r3, r3, lsl #1
 803030c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8030310:	d1db      	bne.n	80302ca <__ieee754_sqrt+0xba>
 8030312:	430b      	orrs	r3, r1
 8030314:	d006      	beq.n	8030324 <__ieee754_sqrt+0x114>
 8030316:	1c50      	adds	r0, r2, #1
 8030318:	bf13      	iteet	ne
 803031a:	3201      	addne	r2, #1
 803031c:	3401      	addeq	r4, #1
 803031e:	4672      	moveq	r2, lr
 8030320:	f022 0201 	bicne.w	r2, r2, #1
 8030324:	1063      	asrs	r3, r4, #1
 8030326:	0852      	lsrs	r2, r2, #1
 8030328:	07e1      	lsls	r1, r4, #31
 803032a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 803032e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8030332:	bf48      	it	mi
 8030334:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8030338:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 803033c:	4614      	mov	r4, r2
 803033e:	e781      	b.n	8030244 <__ieee754_sqrt+0x34>
 8030340:	0ad9      	lsrs	r1, r3, #11
 8030342:	3815      	subs	r0, #21
 8030344:	055b      	lsls	r3, r3, #21
 8030346:	2900      	cmp	r1, #0
 8030348:	d0fa      	beq.n	8030340 <__ieee754_sqrt+0x130>
 803034a:	02cd      	lsls	r5, r1, #11
 803034c:	d50a      	bpl.n	8030364 <__ieee754_sqrt+0x154>
 803034e:	f1c2 0420 	rsb	r4, r2, #32
 8030352:	fa23 f404 	lsr.w	r4, r3, r4
 8030356:	1e55      	subs	r5, r2, #1
 8030358:	4093      	lsls	r3, r2
 803035a:	4321      	orrs	r1, r4
 803035c:	1b42      	subs	r2, r0, r5
 803035e:	e78a      	b.n	8030276 <__ieee754_sqrt+0x66>
 8030360:	4610      	mov	r0, r2
 8030362:	e7f0      	b.n	8030346 <__ieee754_sqrt+0x136>
 8030364:	0049      	lsls	r1, r1, #1
 8030366:	3201      	adds	r2, #1
 8030368:	e7ef      	b.n	803034a <__ieee754_sqrt+0x13a>
 803036a:	4680      	mov	r8, r0
 803036c:	e7bd      	b.n	80302ea <__ieee754_sqrt+0xda>
 803036e:	bf00      	nop
 8030370:	7ff00000 	.word	0x7ff00000

08030374 <__ieee754_expf>:
 8030374:	ee10 2a10 	vmov	r2, s0
 8030378:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 803037c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8030380:	d902      	bls.n	8030388 <__ieee754_expf+0x14>
 8030382:	ee30 0a00 	vadd.f32	s0, s0, s0
 8030386:	4770      	bx	lr
 8030388:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 803038c:	d106      	bne.n	803039c <__ieee754_expf+0x28>
 803038e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80304c8 <__ieee754_expf+0x154>
 8030392:	2b00      	cmp	r3, #0
 8030394:	bf18      	it	ne
 8030396:	eeb0 0a67 	vmovne.f32	s0, s15
 803039a:	4770      	bx	lr
 803039c:	484b      	ldr	r0, [pc, #300]	; (80304cc <__ieee754_expf+0x158>)
 803039e:	4282      	cmp	r2, r0
 80303a0:	dd02      	ble.n	80303a8 <__ieee754_expf+0x34>
 80303a2:	2000      	movs	r0, #0
 80303a4:	f000 bf22 	b.w	80311ec <__math_oflowf>
 80303a8:	2a00      	cmp	r2, #0
 80303aa:	da05      	bge.n	80303b8 <__ieee754_expf+0x44>
 80303ac:	4a48      	ldr	r2, [pc, #288]	; (80304d0 <__ieee754_expf+0x15c>)
 80303ae:	4291      	cmp	r1, r2
 80303b0:	d902      	bls.n	80303b8 <__ieee754_expf+0x44>
 80303b2:	2000      	movs	r0, #0
 80303b4:	f000 bf14 	b.w	80311e0 <__math_uflowf>
 80303b8:	4a46      	ldr	r2, [pc, #280]	; (80304d4 <__ieee754_expf+0x160>)
 80303ba:	4291      	cmp	r1, r2
 80303bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80303c0:	d952      	bls.n	8030468 <__ieee754_expf+0xf4>
 80303c2:	4a45      	ldr	r2, [pc, #276]	; (80304d8 <__ieee754_expf+0x164>)
 80303c4:	4291      	cmp	r1, r2
 80303c6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80303ca:	d834      	bhi.n	8030436 <__ieee754_expf+0xc2>
 80303cc:	4943      	ldr	r1, [pc, #268]	; (80304dc <__ieee754_expf+0x168>)
 80303ce:	4411      	add	r1, r2
 80303d0:	ed91 7a00 	vldr	s14, [r1]
 80303d4:	4942      	ldr	r1, [pc, #264]	; (80304e0 <__ieee754_expf+0x16c>)
 80303d6:	440a      	add	r2, r1
 80303d8:	edd2 7a00 	vldr	s15, [r2]
 80303dc:	ee30 7a47 	vsub.f32	s14, s0, s14
 80303e0:	f1c3 0201 	rsb	r2, r3, #1
 80303e4:	1ad2      	subs	r2, r2, r3
 80303e6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80303ea:	ee20 6a00 	vmul.f32	s12, s0, s0
 80303ee:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80304e4 <__ieee754_expf+0x170>
 80303f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80304e8 <__ieee754_expf+0x174>
 80303f6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80303fa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80304ec <__ieee754_expf+0x178>
 80303fe:	eea6 5a86 	vfma.f32	s10, s13, s12
 8030402:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80304f0 <__ieee754_expf+0x17c>
 8030406:	eee5 6a06 	vfma.f32	s13, s10, s12
 803040a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80304f4 <__ieee754_expf+0x180>
 803040e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8030412:	eef0 6a40 	vmov.f32	s13, s0
 8030416:	eee5 6a46 	vfms.f32	s13, s10, s12
 803041a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 803041e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8030422:	bb92      	cbnz	r2, 803048a <__ieee754_expf+0x116>
 8030424:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8030428:	eec5 7a26 	vdiv.f32	s15, s10, s13
 803042c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8030430:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8030434:	4770      	bx	lr
 8030436:	4b30      	ldr	r3, [pc, #192]	; (80304f8 <__ieee754_expf+0x184>)
 8030438:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80304fc <__ieee754_expf+0x188>
 803043c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8030500 <__ieee754_expf+0x18c>
 8030440:	4413      	add	r3, r2
 8030442:	edd3 7a00 	vldr	s15, [r3]
 8030446:	eee0 7a07 	vfma.f32	s15, s0, s14
 803044a:	eeb0 7a40 	vmov.f32	s14, s0
 803044e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8030452:	ee17 2a90 	vmov	r2, s15
 8030456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 803045a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 803045e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8030504 <__ieee754_expf+0x190>
 8030462:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8030466:	e7be      	b.n	80303e6 <__ieee754_expf+0x72>
 8030468:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 803046c:	d20b      	bcs.n	8030486 <__ieee754_expf+0x112>
 803046e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8030508 <__ieee754_expf+0x194>
 8030472:	ee70 6a26 	vadd.f32	s13, s0, s13
 8030476:	eef4 6ae5 	vcmpe.f32	s13, s11
 803047a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803047e:	dd02      	ble.n	8030486 <__ieee754_expf+0x112>
 8030480:	ee30 0a25 	vadd.f32	s0, s0, s11
 8030484:	4770      	bx	lr
 8030486:	2200      	movs	r2, #0
 8030488:	e7af      	b.n	80303ea <__ieee754_expf+0x76>
 803048a:	ee76 6a66 	vsub.f32	s13, s12, s13
 803048e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8030492:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8030496:	bfb8      	it	lt
 8030498:	3264      	addlt	r2, #100	; 0x64
 803049a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 803049e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80304a2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80304a6:	ee17 3a90 	vmov	r3, s15
 80304aa:	bfab      	itete	ge
 80304ac:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80304b0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80304b4:	ee00 3a10 	vmovge	s0, r3
 80304b8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 803050c <__ieee754_expf+0x198>
 80304bc:	bfbc      	itt	lt
 80304be:	ee00 3a10 	vmovlt	s0, r3
 80304c2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80304c6:	4770      	bx	lr
 80304c8:	00000000 	.word	0x00000000
 80304cc:	42b17217 	.word	0x42b17217
 80304d0:	42cff1b5 	.word	0x42cff1b5
 80304d4:	3eb17218 	.word	0x3eb17218
 80304d8:	3f851591 	.word	0x3f851591
 80304dc:	080373e0 	.word	0x080373e0
 80304e0:	080373e8 	.word	0x080373e8
 80304e4:	3331bb4c 	.word	0x3331bb4c
 80304e8:	b5ddea0e 	.word	0xb5ddea0e
 80304ec:	388ab355 	.word	0x388ab355
 80304f0:	bb360b61 	.word	0xbb360b61
 80304f4:	3e2aaaab 	.word	0x3e2aaaab
 80304f8:	080373d8 	.word	0x080373d8
 80304fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8030500:	3f317180 	.word	0x3f317180
 8030504:	3717f7d1 	.word	0x3717f7d1
 8030508:	7149f2ca 	.word	0x7149f2ca
 803050c:	0d800000 	.word	0x0d800000

08030510 <__ieee754_logf>:
 8030510:	ee10 3a10 	vmov	r3, s0
 8030514:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8030518:	d106      	bne.n	8030528 <__ieee754_logf+0x18>
 803051a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80306b0 <__ieee754_logf+0x1a0>
 803051e:	eddf 7a65 	vldr	s15, [pc, #404]	; 80306b4 <__ieee754_logf+0x1a4>
 8030522:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8030526:	4770      	bx	lr
 8030528:	2b00      	cmp	r3, #0
 803052a:	da02      	bge.n	8030532 <__ieee754_logf+0x22>
 803052c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8030530:	e7f5      	b.n	803051e <__ieee754_logf+0xe>
 8030532:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8030536:	db02      	blt.n	803053e <__ieee754_logf+0x2e>
 8030538:	ee30 0a00 	vadd.f32	s0, s0, s0
 803053c:	4770      	bx	lr
 803053e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8030542:	bfb8      	it	lt
 8030544:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80306b8 <__ieee754_logf+0x1a8>
 8030548:	485c      	ldr	r0, [pc, #368]	; (80306bc <__ieee754_logf+0x1ac>)
 803054a:	bfbe      	ittt	lt
 803054c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8030550:	f06f 0118 	mvnlt.w	r1, #24
 8030554:	ee17 3a90 	vmovlt	r3, s15
 8030558:	ea4f 52e3 	mov.w	r2, r3, asr #23
 803055c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8030560:	4418      	add	r0, r3
 8030562:	bfa8      	it	ge
 8030564:	2100      	movge	r1, #0
 8030566:	3a7f      	subs	r2, #127	; 0x7f
 8030568:	440a      	add	r2, r1
 803056a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 803056e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8030572:	4319      	orrs	r1, r3
 8030574:	ee00 1a10 	vmov	s0, r1
 8030578:	4951      	ldr	r1, [pc, #324]	; (80306c0 <__ieee754_logf+0x1b0>)
 803057a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 803057e:	f103 000f 	add.w	r0, r3, #15
 8030582:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8030586:	4001      	ands	r1, r0
 8030588:	ee30 0a67 	vsub.f32	s0, s0, s15
 803058c:	bb89      	cbnz	r1, 80305f2 <__ieee754_logf+0xe2>
 803058e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8030592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8030596:	d10f      	bne.n	80305b8 <__ieee754_logf+0xa8>
 8030598:	2a00      	cmp	r2, #0
 803059a:	f000 8085 	beq.w	80306a8 <__ieee754_logf+0x198>
 803059e:	ee07 2a90 	vmov	s15, r2
 80305a2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80306c4 <__ieee754_logf+0x1b4>
 80305a6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80306c8 <__ieee754_logf+0x1b8>
 80305aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80305ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80305b2:	eea7 0a87 	vfma.f32	s0, s15, s14
 80305b6:	4770      	bx	lr
 80305b8:	eddf 6a44 	vldr	s13, [pc, #272]	; 80306cc <__ieee754_logf+0x1bc>
 80305bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80305c0:	eee0 7a66 	vfms.f32	s15, s0, s13
 80305c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80305c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80305cc:	b912      	cbnz	r2, 80305d4 <__ieee754_logf+0xc4>
 80305ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 80305d2:	4770      	bx	lr
 80305d4:	ee07 2a90 	vmov	s15, r2
 80305d8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80306c4 <__ieee754_logf+0x1b4>
 80305dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80305e0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80305e4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80305e8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80306c8 <__ieee754_logf+0x1b8>
 80305ec:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80305f0:	4770      	bx	lr
 80305f2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80305f6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80305fa:	eddf 5a35 	vldr	s11, [pc, #212]	; 80306d0 <__ieee754_logf+0x1c0>
 80305fe:	eddf 4a35 	vldr	s9, [pc, #212]	; 80306d4 <__ieee754_logf+0x1c4>
 8030602:	4935      	ldr	r1, [pc, #212]	; (80306d8 <__ieee754_logf+0x1c8>)
 8030604:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8030608:	4419      	add	r1, r3
 803060a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 803060e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8030612:	430b      	orrs	r3, r1
 8030614:	2b00      	cmp	r3, #0
 8030616:	ee07 2a90 	vmov	s15, r2
 803061a:	ee26 5a06 	vmul.f32	s10, s12, s12
 803061e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8030622:	ee25 7a05 	vmul.f32	s14, s10, s10
 8030626:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80306dc <__ieee754_logf+0x1cc>
 803062a:	eee7 7a25 	vfma.f32	s15, s14, s11
 803062e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80306e0 <__ieee754_logf+0x1d0>
 8030632:	eee7 5a87 	vfma.f32	s11, s15, s14
 8030636:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80306e4 <__ieee754_logf+0x1d4>
 803063a:	eee7 7a24 	vfma.f32	s15, s14, s9
 803063e:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80306e8 <__ieee754_logf+0x1d8>
 8030642:	eee7 4a87 	vfma.f32	s9, s15, s14
 8030646:	eddf 7a29 	vldr	s15, [pc, #164]	; 80306ec <__ieee754_logf+0x1dc>
 803064a:	eee4 7a87 	vfma.f32	s15, s9, s14
 803064e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8030652:	eee5 7a87 	vfma.f32	s15, s11, s14
 8030656:	dd1c      	ble.n	8030692 <__ieee754_logf+0x182>
 8030658:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 803065c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8030660:	ee27 7a00 	vmul.f32	s14, s14, s0
 8030664:	ee77 7a87 	vadd.f32	s15, s15, s14
 8030668:	ee67 7a86 	vmul.f32	s15, s15, s12
 803066c:	b922      	cbnz	r2, 8030678 <__ieee754_logf+0x168>
 803066e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8030672:	ee30 0a67 	vsub.f32	s0, s0, s15
 8030676:	4770      	bx	lr
 8030678:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80306c4 <__ieee754_logf+0x1b4>
 803067c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8030680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8030684:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8030688:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80306c8 <__ieee754_logf+0x1b8>
 803068c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8030690:	4770      	bx	lr
 8030692:	ee70 7a67 	vsub.f32	s15, s0, s15
 8030696:	ee67 7a86 	vmul.f32	s15, s15, s12
 803069a:	2a00      	cmp	r2, #0
 803069c:	d0e9      	beq.n	8030672 <__ieee754_logf+0x162>
 803069e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80306c4 <__ieee754_logf+0x1b4>
 80306a2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80306a6:	e7ed      	b.n	8030684 <__ieee754_logf+0x174>
 80306a8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80306b4 <__ieee754_logf+0x1a4>
 80306ac:	4770      	bx	lr
 80306ae:	bf00      	nop
 80306b0:	cc000000 	.word	0xcc000000
 80306b4:	00000000 	.word	0x00000000
 80306b8:	4c000000 	.word	0x4c000000
 80306bc:	004afb20 	.word	0x004afb20
 80306c0:	007ffff0 	.word	0x007ffff0
 80306c4:	3717f7d1 	.word	0x3717f7d1
 80306c8:	3f317180 	.word	0x3f317180
 80306cc:	3eaaaaab 	.word	0x3eaaaaab
 80306d0:	3e1cd04f 	.word	0x3e1cd04f
 80306d4:	3e178897 	.word	0x3e178897
 80306d8:	ffcf5c30 	.word	0xffcf5c30
 80306dc:	3e638e29 	.word	0x3e638e29
 80306e0:	3ecccccd 	.word	0x3ecccccd
 80306e4:	3e3a3325 	.word	0x3e3a3325
 80306e8:	3e924925 	.word	0x3e924925
 80306ec:	3f2aaaab 	.word	0x3f2aaaab

080306f0 <__ieee754_log10f>:
 80306f0:	b508      	push	{r3, lr}
 80306f2:	ee10 2a10 	vmov	r2, s0
 80306f6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80306fa:	ed2d 8b02 	vpush	{d8}
 80306fe:	d108      	bne.n	8030712 <__ieee754_log10f+0x22>
 8030700:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8030788 <__ieee754_log10f+0x98>
 8030704:	eddf 7a21 	vldr	s15, [pc, #132]	; 803078c <__ieee754_log10f+0x9c>
 8030708:	ee87 0a27 	vdiv.f32	s0, s14, s15
 803070c:	ecbd 8b02 	vpop	{d8}
 8030710:	bd08      	pop	{r3, pc}
 8030712:	2a00      	cmp	r2, #0
 8030714:	da02      	bge.n	803071c <__ieee754_log10f+0x2c>
 8030716:	ee30 7a40 	vsub.f32	s14, s0, s0
 803071a:	e7f3      	b.n	8030704 <__ieee754_log10f+0x14>
 803071c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8030720:	db02      	blt.n	8030728 <__ieee754_log10f+0x38>
 8030722:	ee30 0a00 	vadd.f32	s0, s0, s0
 8030726:	e7f1      	b.n	803070c <__ieee754_log10f+0x1c>
 8030728:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 803072c:	bfbf      	itttt	lt
 803072e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8030790 <__ieee754_log10f+0xa0>
 8030732:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8030736:	f06f 0118 	mvnlt.w	r1, #24
 803073a:	ee17 2a90 	vmovlt	r2, s15
 803073e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8030742:	bfa8      	it	ge
 8030744:	2100      	movge	r1, #0
 8030746:	3b7f      	subs	r3, #127	; 0x7f
 8030748:	440b      	add	r3, r1
 803074a:	0fd9      	lsrs	r1, r3, #31
 803074c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8030750:	ee07 3a90 	vmov	s15, r3
 8030754:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8030758:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 803075c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8030760:	ee00 3a10 	vmov	s0, r3
 8030764:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8030768:	f7ff fed2 	bl	8030510 <__ieee754_logf>
 803076c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8030794 <__ieee754_log10f+0xa4>
 8030770:	ee20 0a27 	vmul.f32	s0, s0, s15
 8030774:	eddf 7a08 	vldr	s15, [pc, #32]	; 8030798 <__ieee754_log10f+0xa8>
 8030778:	eea8 0a27 	vfma.f32	s0, s16, s15
 803077c:	eddf 7a07 	vldr	s15, [pc, #28]	; 803079c <__ieee754_log10f+0xac>
 8030780:	eea8 0a27 	vfma.f32	s0, s16, s15
 8030784:	e7c2      	b.n	803070c <__ieee754_log10f+0x1c>
 8030786:	bf00      	nop
 8030788:	cc000000 	.word	0xcc000000
 803078c:	00000000 	.word	0x00000000
 8030790:	4c000000 	.word	0x4c000000
 8030794:	3ede5bd9 	.word	0x3ede5bd9
 8030798:	355427db 	.word	0x355427db
 803079c:	3e9a2080 	.word	0x3e9a2080

080307a0 <__ieee754_sqrtf>:
 80307a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80307a4:	4770      	bx	lr
	...

080307a8 <__kernel_cos>:
 80307a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80307ac:	ec57 6b10 	vmov	r6, r7, d0
 80307b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80307b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80307b8:	ed8d 1b00 	vstr	d1, [sp]
 80307bc:	da07      	bge.n	80307ce <__kernel_cos+0x26>
 80307be:	ee10 0a10 	vmov	r0, s0
 80307c2:	4639      	mov	r1, r7
 80307c4:	f7d0 f9d2 	bl	8000b6c <__aeabi_d2iz>
 80307c8:	2800      	cmp	r0, #0
 80307ca:	f000 8088 	beq.w	80308de <__kernel_cos+0x136>
 80307ce:	4632      	mov	r2, r6
 80307d0:	463b      	mov	r3, r7
 80307d2:	4630      	mov	r0, r6
 80307d4:	4639      	mov	r1, r7
 80307d6:	f7cf ff19 	bl	800060c <__aeabi_dmul>
 80307da:	4b51      	ldr	r3, [pc, #324]	; (8030920 <__kernel_cos+0x178>)
 80307dc:	2200      	movs	r2, #0
 80307de:	4604      	mov	r4, r0
 80307e0:	460d      	mov	r5, r1
 80307e2:	f7cf ff13 	bl	800060c <__aeabi_dmul>
 80307e6:	a340      	add	r3, pc, #256	; (adr r3, 80308e8 <__kernel_cos+0x140>)
 80307e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80307ec:	4682      	mov	sl, r0
 80307ee:	468b      	mov	fp, r1
 80307f0:	4620      	mov	r0, r4
 80307f2:	4629      	mov	r1, r5
 80307f4:	f7cf ff0a 	bl	800060c <__aeabi_dmul>
 80307f8:	a33d      	add	r3, pc, #244	; (adr r3, 80308f0 <__kernel_cos+0x148>)
 80307fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80307fe:	f7cf fd4f 	bl	80002a0 <__adddf3>
 8030802:	4622      	mov	r2, r4
 8030804:	462b      	mov	r3, r5
 8030806:	f7cf ff01 	bl	800060c <__aeabi_dmul>
 803080a:	a33b      	add	r3, pc, #236	; (adr r3, 80308f8 <__kernel_cos+0x150>)
 803080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030810:	f7cf fd44 	bl	800029c <__aeabi_dsub>
 8030814:	4622      	mov	r2, r4
 8030816:	462b      	mov	r3, r5
 8030818:	f7cf fef8 	bl	800060c <__aeabi_dmul>
 803081c:	a338      	add	r3, pc, #224	; (adr r3, 8030900 <__kernel_cos+0x158>)
 803081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030822:	f7cf fd3d 	bl	80002a0 <__adddf3>
 8030826:	4622      	mov	r2, r4
 8030828:	462b      	mov	r3, r5
 803082a:	f7cf feef 	bl	800060c <__aeabi_dmul>
 803082e:	a336      	add	r3, pc, #216	; (adr r3, 8030908 <__kernel_cos+0x160>)
 8030830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030834:	f7cf fd32 	bl	800029c <__aeabi_dsub>
 8030838:	4622      	mov	r2, r4
 803083a:	462b      	mov	r3, r5
 803083c:	f7cf fee6 	bl	800060c <__aeabi_dmul>
 8030840:	a333      	add	r3, pc, #204	; (adr r3, 8030910 <__kernel_cos+0x168>)
 8030842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030846:	f7cf fd2b 	bl	80002a0 <__adddf3>
 803084a:	4622      	mov	r2, r4
 803084c:	462b      	mov	r3, r5
 803084e:	f7cf fedd 	bl	800060c <__aeabi_dmul>
 8030852:	4622      	mov	r2, r4
 8030854:	462b      	mov	r3, r5
 8030856:	f7cf fed9 	bl	800060c <__aeabi_dmul>
 803085a:	e9dd 2300 	ldrd	r2, r3, [sp]
 803085e:	4604      	mov	r4, r0
 8030860:	460d      	mov	r5, r1
 8030862:	4630      	mov	r0, r6
 8030864:	4639      	mov	r1, r7
 8030866:	f7cf fed1 	bl	800060c <__aeabi_dmul>
 803086a:	460b      	mov	r3, r1
 803086c:	4602      	mov	r2, r0
 803086e:	4629      	mov	r1, r5
 8030870:	4620      	mov	r0, r4
 8030872:	f7cf fd13 	bl	800029c <__aeabi_dsub>
 8030876:	4b2b      	ldr	r3, [pc, #172]	; (8030924 <__kernel_cos+0x17c>)
 8030878:	4598      	cmp	r8, r3
 803087a:	4606      	mov	r6, r0
 803087c:	460f      	mov	r7, r1
 803087e:	dc10      	bgt.n	80308a2 <__kernel_cos+0xfa>
 8030880:	4602      	mov	r2, r0
 8030882:	460b      	mov	r3, r1
 8030884:	4650      	mov	r0, sl
 8030886:	4659      	mov	r1, fp
 8030888:	f7cf fd08 	bl	800029c <__aeabi_dsub>
 803088c:	460b      	mov	r3, r1
 803088e:	4926      	ldr	r1, [pc, #152]	; (8030928 <__kernel_cos+0x180>)
 8030890:	4602      	mov	r2, r0
 8030892:	2000      	movs	r0, #0
 8030894:	f7cf fd02 	bl	800029c <__aeabi_dsub>
 8030898:	ec41 0b10 	vmov	d0, r0, r1
 803089c:	b003      	add	sp, #12
 803089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80308a2:	4b22      	ldr	r3, [pc, #136]	; (803092c <__kernel_cos+0x184>)
 80308a4:	4920      	ldr	r1, [pc, #128]	; (8030928 <__kernel_cos+0x180>)
 80308a6:	4598      	cmp	r8, r3
 80308a8:	bfcc      	ite	gt
 80308aa:	4d21      	ldrgt	r5, [pc, #132]	; (8030930 <__kernel_cos+0x188>)
 80308ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80308b0:	2400      	movs	r4, #0
 80308b2:	4622      	mov	r2, r4
 80308b4:	462b      	mov	r3, r5
 80308b6:	2000      	movs	r0, #0
 80308b8:	f7cf fcf0 	bl	800029c <__aeabi_dsub>
 80308bc:	4622      	mov	r2, r4
 80308be:	4680      	mov	r8, r0
 80308c0:	4689      	mov	r9, r1
 80308c2:	462b      	mov	r3, r5
 80308c4:	4650      	mov	r0, sl
 80308c6:	4659      	mov	r1, fp
 80308c8:	f7cf fce8 	bl	800029c <__aeabi_dsub>
 80308cc:	4632      	mov	r2, r6
 80308ce:	463b      	mov	r3, r7
 80308d0:	f7cf fce4 	bl	800029c <__aeabi_dsub>
 80308d4:	4602      	mov	r2, r0
 80308d6:	460b      	mov	r3, r1
 80308d8:	4640      	mov	r0, r8
 80308da:	4649      	mov	r1, r9
 80308dc:	e7da      	b.n	8030894 <__kernel_cos+0xec>
 80308de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8030918 <__kernel_cos+0x170>
 80308e2:	e7db      	b.n	803089c <__kernel_cos+0xf4>
 80308e4:	f3af 8000 	nop.w
 80308e8:	be8838d4 	.word	0xbe8838d4
 80308ec:	bda8fae9 	.word	0xbda8fae9
 80308f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80308f4:	3e21ee9e 	.word	0x3e21ee9e
 80308f8:	809c52ad 	.word	0x809c52ad
 80308fc:	3e927e4f 	.word	0x3e927e4f
 8030900:	19cb1590 	.word	0x19cb1590
 8030904:	3efa01a0 	.word	0x3efa01a0
 8030908:	16c15177 	.word	0x16c15177
 803090c:	3f56c16c 	.word	0x3f56c16c
 8030910:	5555554c 	.word	0x5555554c
 8030914:	3fa55555 	.word	0x3fa55555
 8030918:	00000000 	.word	0x00000000
 803091c:	3ff00000 	.word	0x3ff00000
 8030920:	3fe00000 	.word	0x3fe00000
 8030924:	3fd33332 	.word	0x3fd33332
 8030928:	3ff00000 	.word	0x3ff00000
 803092c:	3fe90000 	.word	0x3fe90000
 8030930:	3fd20000 	.word	0x3fd20000
 8030934:	00000000 	.word	0x00000000

08030938 <__kernel_rem_pio2>:
 8030938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803093c:	ed2d 8b02 	vpush	{d8}
 8030940:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8030944:	f112 0f14 	cmn.w	r2, #20
 8030948:	9308      	str	r3, [sp, #32]
 803094a:	9101      	str	r1, [sp, #4]
 803094c:	4bc4      	ldr	r3, [pc, #784]	; (8030c60 <__kernel_rem_pio2+0x328>)
 803094e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8030950:	900b      	str	r0, [sp, #44]	; 0x2c
 8030952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8030956:	9302      	str	r3, [sp, #8]
 8030958:	9b08      	ldr	r3, [sp, #32]
 803095a:	f103 33ff 	add.w	r3, r3, #4294967295
 803095e:	bfa8      	it	ge
 8030960:	1ed4      	subge	r4, r2, #3
 8030962:	9306      	str	r3, [sp, #24]
 8030964:	bfb2      	itee	lt
 8030966:	2400      	movlt	r4, #0
 8030968:	2318      	movge	r3, #24
 803096a:	fb94 f4f3 	sdivge	r4, r4, r3
 803096e:	f06f 0317 	mvn.w	r3, #23
 8030972:	fb04 3303 	mla	r3, r4, r3, r3
 8030976:	eb03 0a02 	add.w	sl, r3, r2
 803097a:	9b02      	ldr	r3, [sp, #8]
 803097c:	9a06      	ldr	r2, [sp, #24]
 803097e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8030c50 <__kernel_rem_pio2+0x318>
 8030982:	eb03 0802 	add.w	r8, r3, r2
 8030986:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8030988:	1aa7      	subs	r7, r4, r2
 803098a:	ae22      	add	r6, sp, #136	; 0x88
 803098c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8030990:	2500      	movs	r5, #0
 8030992:	4545      	cmp	r5, r8
 8030994:	dd13      	ble.n	80309be <__kernel_rem_pio2+0x86>
 8030996:	9b08      	ldr	r3, [sp, #32]
 8030998:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8030c50 <__kernel_rem_pio2+0x318>
 803099c:	aa22      	add	r2, sp, #136	; 0x88
 803099e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80309a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80309a6:	f04f 0800 	mov.w	r8, #0
 80309aa:	9b02      	ldr	r3, [sp, #8]
 80309ac:	4598      	cmp	r8, r3
 80309ae:	dc2f      	bgt.n	8030a10 <__kernel_rem_pio2+0xd8>
 80309b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80309b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80309b8:	462f      	mov	r7, r5
 80309ba:	2600      	movs	r6, #0
 80309bc:	e01b      	b.n	80309f6 <__kernel_rem_pio2+0xbe>
 80309be:	42ef      	cmn	r7, r5
 80309c0:	d407      	bmi.n	80309d2 <__kernel_rem_pio2+0x9a>
 80309c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80309c6:	f7cf fdb7 	bl	8000538 <__aeabi_i2d>
 80309ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80309ce:	3501      	adds	r5, #1
 80309d0:	e7df      	b.n	8030992 <__kernel_rem_pio2+0x5a>
 80309d2:	ec51 0b18 	vmov	r0, r1, d8
 80309d6:	e7f8      	b.n	80309ca <__kernel_rem_pio2+0x92>
 80309d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80309dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80309e0:	f7cf fe14 	bl	800060c <__aeabi_dmul>
 80309e4:	4602      	mov	r2, r0
 80309e6:	460b      	mov	r3, r1
 80309e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80309ec:	f7cf fc58 	bl	80002a0 <__adddf3>
 80309f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80309f4:	3601      	adds	r6, #1
 80309f6:	9b06      	ldr	r3, [sp, #24]
 80309f8:	429e      	cmp	r6, r3
 80309fa:	f1a7 0708 	sub.w	r7, r7, #8
 80309fe:	ddeb      	ble.n	80309d8 <__kernel_rem_pio2+0xa0>
 8030a00:	ed9d 7b04 	vldr	d7, [sp, #16]
 8030a04:	f108 0801 	add.w	r8, r8, #1
 8030a08:	ecab 7b02 	vstmia	fp!, {d7}
 8030a0c:	3508      	adds	r5, #8
 8030a0e:	e7cc      	b.n	80309aa <__kernel_rem_pio2+0x72>
 8030a10:	9b02      	ldr	r3, [sp, #8]
 8030a12:	aa0e      	add	r2, sp, #56	; 0x38
 8030a14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8030a18:	930d      	str	r3, [sp, #52]	; 0x34
 8030a1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8030a1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8030a20:	9c02      	ldr	r4, [sp, #8]
 8030a22:	930c      	str	r3, [sp, #48]	; 0x30
 8030a24:	00e3      	lsls	r3, r4, #3
 8030a26:	930a      	str	r3, [sp, #40]	; 0x28
 8030a28:	ab9a      	add	r3, sp, #616	; 0x268
 8030a2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8030a2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8030a32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8030a36:	ab72      	add	r3, sp, #456	; 0x1c8
 8030a38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8030a3c:	46c3      	mov	fp, r8
 8030a3e:	46a1      	mov	r9, r4
 8030a40:	f1b9 0f00 	cmp.w	r9, #0
 8030a44:	f1a5 0508 	sub.w	r5, r5, #8
 8030a48:	dc77      	bgt.n	8030b3a <__kernel_rem_pio2+0x202>
 8030a4a:	ec47 6b10 	vmov	d0, r6, r7
 8030a4e:	4650      	mov	r0, sl
 8030a50:	f000 fbe6 	bl	8031220 <scalbn>
 8030a54:	ec57 6b10 	vmov	r6, r7, d0
 8030a58:	2200      	movs	r2, #0
 8030a5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8030a5e:	ee10 0a10 	vmov	r0, s0
 8030a62:	4639      	mov	r1, r7
 8030a64:	f7cf fdd2 	bl	800060c <__aeabi_dmul>
 8030a68:	ec41 0b10 	vmov	d0, r0, r1
 8030a6c:	f7fe f94c 	bl	802ed08 <floor>
 8030a70:	4b7c      	ldr	r3, [pc, #496]	; (8030c64 <__kernel_rem_pio2+0x32c>)
 8030a72:	ec51 0b10 	vmov	r0, r1, d0
 8030a76:	2200      	movs	r2, #0
 8030a78:	f7cf fdc8 	bl	800060c <__aeabi_dmul>
 8030a7c:	4602      	mov	r2, r0
 8030a7e:	460b      	mov	r3, r1
 8030a80:	4630      	mov	r0, r6
 8030a82:	4639      	mov	r1, r7
 8030a84:	f7cf fc0a 	bl	800029c <__aeabi_dsub>
 8030a88:	460f      	mov	r7, r1
 8030a8a:	4606      	mov	r6, r0
 8030a8c:	f7d0 f86e 	bl	8000b6c <__aeabi_d2iz>
 8030a90:	9004      	str	r0, [sp, #16]
 8030a92:	f7cf fd51 	bl	8000538 <__aeabi_i2d>
 8030a96:	4602      	mov	r2, r0
 8030a98:	460b      	mov	r3, r1
 8030a9a:	4630      	mov	r0, r6
 8030a9c:	4639      	mov	r1, r7
 8030a9e:	f7cf fbfd 	bl	800029c <__aeabi_dsub>
 8030aa2:	f1ba 0f00 	cmp.w	sl, #0
 8030aa6:	4606      	mov	r6, r0
 8030aa8:	460f      	mov	r7, r1
 8030aaa:	dd6d      	ble.n	8030b88 <__kernel_rem_pio2+0x250>
 8030aac:	1e62      	subs	r2, r4, #1
 8030aae:	ab0e      	add	r3, sp, #56	; 0x38
 8030ab0:	9d04      	ldr	r5, [sp, #16]
 8030ab2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8030ab6:	f1ca 0118 	rsb	r1, sl, #24
 8030aba:	fa40 f301 	asr.w	r3, r0, r1
 8030abe:	441d      	add	r5, r3
 8030ac0:	408b      	lsls	r3, r1
 8030ac2:	1ac0      	subs	r0, r0, r3
 8030ac4:	ab0e      	add	r3, sp, #56	; 0x38
 8030ac6:	9504      	str	r5, [sp, #16]
 8030ac8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8030acc:	f1ca 0317 	rsb	r3, sl, #23
 8030ad0:	fa40 fb03 	asr.w	fp, r0, r3
 8030ad4:	f1bb 0f00 	cmp.w	fp, #0
 8030ad8:	dd65      	ble.n	8030ba6 <__kernel_rem_pio2+0x26e>
 8030ada:	9b04      	ldr	r3, [sp, #16]
 8030adc:	2200      	movs	r2, #0
 8030ade:	3301      	adds	r3, #1
 8030ae0:	9304      	str	r3, [sp, #16]
 8030ae2:	4615      	mov	r5, r2
 8030ae4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8030ae8:	4294      	cmp	r4, r2
 8030aea:	f300 809c 	bgt.w	8030c26 <__kernel_rem_pio2+0x2ee>
 8030aee:	f1ba 0f00 	cmp.w	sl, #0
 8030af2:	dd07      	ble.n	8030b04 <__kernel_rem_pio2+0x1cc>
 8030af4:	f1ba 0f01 	cmp.w	sl, #1
 8030af8:	f000 80c0 	beq.w	8030c7c <__kernel_rem_pio2+0x344>
 8030afc:	f1ba 0f02 	cmp.w	sl, #2
 8030b00:	f000 80c6 	beq.w	8030c90 <__kernel_rem_pio2+0x358>
 8030b04:	f1bb 0f02 	cmp.w	fp, #2
 8030b08:	d14d      	bne.n	8030ba6 <__kernel_rem_pio2+0x26e>
 8030b0a:	4632      	mov	r2, r6
 8030b0c:	463b      	mov	r3, r7
 8030b0e:	4956      	ldr	r1, [pc, #344]	; (8030c68 <__kernel_rem_pio2+0x330>)
 8030b10:	2000      	movs	r0, #0
 8030b12:	f7cf fbc3 	bl	800029c <__aeabi_dsub>
 8030b16:	4606      	mov	r6, r0
 8030b18:	460f      	mov	r7, r1
 8030b1a:	2d00      	cmp	r5, #0
 8030b1c:	d043      	beq.n	8030ba6 <__kernel_rem_pio2+0x26e>
 8030b1e:	4650      	mov	r0, sl
 8030b20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8030c58 <__kernel_rem_pio2+0x320>
 8030b24:	f000 fb7c 	bl	8031220 <scalbn>
 8030b28:	4630      	mov	r0, r6
 8030b2a:	4639      	mov	r1, r7
 8030b2c:	ec53 2b10 	vmov	r2, r3, d0
 8030b30:	f7cf fbb4 	bl	800029c <__aeabi_dsub>
 8030b34:	4606      	mov	r6, r0
 8030b36:	460f      	mov	r7, r1
 8030b38:	e035      	b.n	8030ba6 <__kernel_rem_pio2+0x26e>
 8030b3a:	4b4c      	ldr	r3, [pc, #304]	; (8030c6c <__kernel_rem_pio2+0x334>)
 8030b3c:	2200      	movs	r2, #0
 8030b3e:	4630      	mov	r0, r6
 8030b40:	4639      	mov	r1, r7
 8030b42:	f7cf fd63 	bl	800060c <__aeabi_dmul>
 8030b46:	f7d0 f811 	bl	8000b6c <__aeabi_d2iz>
 8030b4a:	f7cf fcf5 	bl	8000538 <__aeabi_i2d>
 8030b4e:	4602      	mov	r2, r0
 8030b50:	460b      	mov	r3, r1
 8030b52:	ec43 2b18 	vmov	d8, r2, r3
 8030b56:	4b46      	ldr	r3, [pc, #280]	; (8030c70 <__kernel_rem_pio2+0x338>)
 8030b58:	2200      	movs	r2, #0
 8030b5a:	f7cf fd57 	bl	800060c <__aeabi_dmul>
 8030b5e:	4602      	mov	r2, r0
 8030b60:	460b      	mov	r3, r1
 8030b62:	4630      	mov	r0, r6
 8030b64:	4639      	mov	r1, r7
 8030b66:	f7cf fb99 	bl	800029c <__aeabi_dsub>
 8030b6a:	f7cf ffff 	bl	8000b6c <__aeabi_d2iz>
 8030b6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8030b72:	f84b 0b04 	str.w	r0, [fp], #4
 8030b76:	ec51 0b18 	vmov	r0, r1, d8
 8030b7a:	f7cf fb91 	bl	80002a0 <__adddf3>
 8030b7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8030b82:	4606      	mov	r6, r0
 8030b84:	460f      	mov	r7, r1
 8030b86:	e75b      	b.n	8030a40 <__kernel_rem_pio2+0x108>
 8030b88:	d106      	bne.n	8030b98 <__kernel_rem_pio2+0x260>
 8030b8a:	1e63      	subs	r3, r4, #1
 8030b8c:	aa0e      	add	r2, sp, #56	; 0x38
 8030b8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8030b92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8030b96:	e79d      	b.n	8030ad4 <__kernel_rem_pio2+0x19c>
 8030b98:	4b36      	ldr	r3, [pc, #216]	; (8030c74 <__kernel_rem_pio2+0x33c>)
 8030b9a:	2200      	movs	r2, #0
 8030b9c:	f7cf ffbc 	bl	8000b18 <__aeabi_dcmpge>
 8030ba0:	2800      	cmp	r0, #0
 8030ba2:	d13d      	bne.n	8030c20 <__kernel_rem_pio2+0x2e8>
 8030ba4:	4683      	mov	fp, r0
 8030ba6:	2200      	movs	r2, #0
 8030ba8:	2300      	movs	r3, #0
 8030baa:	4630      	mov	r0, r6
 8030bac:	4639      	mov	r1, r7
 8030bae:	f7cf ff95 	bl	8000adc <__aeabi_dcmpeq>
 8030bb2:	2800      	cmp	r0, #0
 8030bb4:	f000 80c0 	beq.w	8030d38 <__kernel_rem_pio2+0x400>
 8030bb8:	1e65      	subs	r5, r4, #1
 8030bba:	462b      	mov	r3, r5
 8030bbc:	2200      	movs	r2, #0
 8030bbe:	9902      	ldr	r1, [sp, #8]
 8030bc0:	428b      	cmp	r3, r1
 8030bc2:	da6c      	bge.n	8030c9e <__kernel_rem_pio2+0x366>
 8030bc4:	2a00      	cmp	r2, #0
 8030bc6:	f000 8089 	beq.w	8030cdc <__kernel_rem_pio2+0x3a4>
 8030bca:	ab0e      	add	r3, sp, #56	; 0x38
 8030bcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8030bd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8030bd4:	2b00      	cmp	r3, #0
 8030bd6:	f000 80ad 	beq.w	8030d34 <__kernel_rem_pio2+0x3fc>
 8030bda:	4650      	mov	r0, sl
 8030bdc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8030c58 <__kernel_rem_pio2+0x320>
 8030be0:	f000 fb1e 	bl	8031220 <scalbn>
 8030be4:	ab9a      	add	r3, sp, #616	; 0x268
 8030be6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8030bea:	ec57 6b10 	vmov	r6, r7, d0
 8030bee:	00ec      	lsls	r4, r5, #3
 8030bf0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8030bf4:	46aa      	mov	sl, r5
 8030bf6:	f1ba 0f00 	cmp.w	sl, #0
 8030bfa:	f280 80d6 	bge.w	8030daa <__kernel_rem_pio2+0x472>
 8030bfe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8030c50 <__kernel_rem_pio2+0x318>
 8030c02:	462e      	mov	r6, r5
 8030c04:	2e00      	cmp	r6, #0
 8030c06:	f2c0 8104 	blt.w	8030e12 <__kernel_rem_pio2+0x4da>
 8030c0a:	ab72      	add	r3, sp, #456	; 0x1c8
 8030c0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8030c10:	f8df a064 	ldr.w	sl, [pc, #100]	; 8030c78 <__kernel_rem_pio2+0x340>
 8030c14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8030c18:	f04f 0800 	mov.w	r8, #0
 8030c1c:	1baf      	subs	r7, r5, r6
 8030c1e:	e0ea      	b.n	8030df6 <__kernel_rem_pio2+0x4be>
 8030c20:	f04f 0b02 	mov.w	fp, #2
 8030c24:	e759      	b.n	8030ada <__kernel_rem_pio2+0x1a2>
 8030c26:	f8d8 3000 	ldr.w	r3, [r8]
 8030c2a:	b955      	cbnz	r5, 8030c42 <__kernel_rem_pio2+0x30a>
 8030c2c:	b123      	cbz	r3, 8030c38 <__kernel_rem_pio2+0x300>
 8030c2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8030c32:	f8c8 3000 	str.w	r3, [r8]
 8030c36:	2301      	movs	r3, #1
 8030c38:	3201      	adds	r2, #1
 8030c3a:	f108 0804 	add.w	r8, r8, #4
 8030c3e:	461d      	mov	r5, r3
 8030c40:	e752      	b.n	8030ae8 <__kernel_rem_pio2+0x1b0>
 8030c42:	1acb      	subs	r3, r1, r3
 8030c44:	f8c8 3000 	str.w	r3, [r8]
 8030c48:	462b      	mov	r3, r5
 8030c4a:	e7f5      	b.n	8030c38 <__kernel_rem_pio2+0x300>
 8030c4c:	f3af 8000 	nop.w
	...
 8030c5c:	3ff00000 	.word	0x3ff00000
 8030c60:	08037430 	.word	0x08037430
 8030c64:	40200000 	.word	0x40200000
 8030c68:	3ff00000 	.word	0x3ff00000
 8030c6c:	3e700000 	.word	0x3e700000
 8030c70:	41700000 	.word	0x41700000
 8030c74:	3fe00000 	.word	0x3fe00000
 8030c78:	080373f0 	.word	0x080373f0
 8030c7c:	1e62      	subs	r2, r4, #1
 8030c7e:	ab0e      	add	r3, sp, #56	; 0x38
 8030c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8030c84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8030c88:	a90e      	add	r1, sp, #56	; 0x38
 8030c8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8030c8e:	e739      	b.n	8030b04 <__kernel_rem_pio2+0x1cc>
 8030c90:	1e62      	subs	r2, r4, #1
 8030c92:	ab0e      	add	r3, sp, #56	; 0x38
 8030c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8030c98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8030c9c:	e7f4      	b.n	8030c88 <__kernel_rem_pio2+0x350>
 8030c9e:	a90e      	add	r1, sp, #56	; 0x38
 8030ca0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8030ca4:	3b01      	subs	r3, #1
 8030ca6:	430a      	orrs	r2, r1
 8030ca8:	e789      	b.n	8030bbe <__kernel_rem_pio2+0x286>
 8030caa:	3301      	adds	r3, #1
 8030cac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8030cb0:	2900      	cmp	r1, #0
 8030cb2:	d0fa      	beq.n	8030caa <__kernel_rem_pio2+0x372>
 8030cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8030cb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8030cba:	446a      	add	r2, sp
 8030cbc:	3a98      	subs	r2, #152	; 0x98
 8030cbe:	920a      	str	r2, [sp, #40]	; 0x28
 8030cc0:	9a08      	ldr	r2, [sp, #32]
 8030cc2:	18e3      	adds	r3, r4, r3
 8030cc4:	18a5      	adds	r5, r4, r2
 8030cc6:	aa22      	add	r2, sp, #136	; 0x88
 8030cc8:	f104 0801 	add.w	r8, r4, #1
 8030ccc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8030cd0:	9304      	str	r3, [sp, #16]
 8030cd2:	9b04      	ldr	r3, [sp, #16]
 8030cd4:	4543      	cmp	r3, r8
 8030cd6:	da04      	bge.n	8030ce2 <__kernel_rem_pio2+0x3aa>
 8030cd8:	461c      	mov	r4, r3
 8030cda:	e6a3      	b.n	8030a24 <__kernel_rem_pio2+0xec>
 8030cdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8030cde:	2301      	movs	r3, #1
 8030ce0:	e7e4      	b.n	8030cac <__kernel_rem_pio2+0x374>
 8030ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8030ce4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8030ce8:	f7cf fc26 	bl	8000538 <__aeabi_i2d>
 8030cec:	e8e5 0102 	strd	r0, r1, [r5], #8
 8030cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8030cf2:	46ab      	mov	fp, r5
 8030cf4:	461c      	mov	r4, r3
 8030cf6:	f04f 0900 	mov.w	r9, #0
 8030cfa:	2600      	movs	r6, #0
 8030cfc:	2700      	movs	r7, #0
 8030cfe:	9b06      	ldr	r3, [sp, #24]
 8030d00:	4599      	cmp	r9, r3
 8030d02:	dd06      	ble.n	8030d12 <__kernel_rem_pio2+0x3da>
 8030d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8030d06:	e8e3 6702 	strd	r6, r7, [r3], #8
 8030d0a:	f108 0801 	add.w	r8, r8, #1
 8030d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8030d10:	e7df      	b.n	8030cd2 <__kernel_rem_pio2+0x39a>
 8030d12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8030d16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8030d1a:	f7cf fc77 	bl	800060c <__aeabi_dmul>
 8030d1e:	4602      	mov	r2, r0
 8030d20:	460b      	mov	r3, r1
 8030d22:	4630      	mov	r0, r6
 8030d24:	4639      	mov	r1, r7
 8030d26:	f7cf fabb 	bl	80002a0 <__adddf3>
 8030d2a:	f109 0901 	add.w	r9, r9, #1
 8030d2e:	4606      	mov	r6, r0
 8030d30:	460f      	mov	r7, r1
 8030d32:	e7e4      	b.n	8030cfe <__kernel_rem_pio2+0x3c6>
 8030d34:	3d01      	subs	r5, #1
 8030d36:	e748      	b.n	8030bca <__kernel_rem_pio2+0x292>
 8030d38:	ec47 6b10 	vmov	d0, r6, r7
 8030d3c:	f1ca 0000 	rsb	r0, sl, #0
 8030d40:	f000 fa6e 	bl	8031220 <scalbn>
 8030d44:	ec57 6b10 	vmov	r6, r7, d0
 8030d48:	4ba0      	ldr	r3, [pc, #640]	; (8030fcc <__kernel_rem_pio2+0x694>)
 8030d4a:	ee10 0a10 	vmov	r0, s0
 8030d4e:	2200      	movs	r2, #0
 8030d50:	4639      	mov	r1, r7
 8030d52:	f7cf fee1 	bl	8000b18 <__aeabi_dcmpge>
 8030d56:	b1f8      	cbz	r0, 8030d98 <__kernel_rem_pio2+0x460>
 8030d58:	4b9d      	ldr	r3, [pc, #628]	; (8030fd0 <__kernel_rem_pio2+0x698>)
 8030d5a:	2200      	movs	r2, #0
 8030d5c:	4630      	mov	r0, r6
 8030d5e:	4639      	mov	r1, r7
 8030d60:	f7cf fc54 	bl	800060c <__aeabi_dmul>
 8030d64:	f7cf ff02 	bl	8000b6c <__aeabi_d2iz>
 8030d68:	4680      	mov	r8, r0
 8030d6a:	f7cf fbe5 	bl	8000538 <__aeabi_i2d>
 8030d6e:	4b97      	ldr	r3, [pc, #604]	; (8030fcc <__kernel_rem_pio2+0x694>)
 8030d70:	2200      	movs	r2, #0
 8030d72:	f7cf fc4b 	bl	800060c <__aeabi_dmul>
 8030d76:	460b      	mov	r3, r1
 8030d78:	4602      	mov	r2, r0
 8030d7a:	4639      	mov	r1, r7
 8030d7c:	4630      	mov	r0, r6
 8030d7e:	f7cf fa8d 	bl	800029c <__aeabi_dsub>
 8030d82:	f7cf fef3 	bl	8000b6c <__aeabi_d2iz>
 8030d86:	1c65      	adds	r5, r4, #1
 8030d88:	ab0e      	add	r3, sp, #56	; 0x38
 8030d8a:	f10a 0a18 	add.w	sl, sl, #24
 8030d8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8030d92:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8030d96:	e720      	b.n	8030bda <__kernel_rem_pio2+0x2a2>
 8030d98:	4630      	mov	r0, r6
 8030d9a:	4639      	mov	r1, r7
 8030d9c:	f7cf fee6 	bl	8000b6c <__aeabi_d2iz>
 8030da0:	ab0e      	add	r3, sp, #56	; 0x38
 8030da2:	4625      	mov	r5, r4
 8030da4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8030da8:	e717      	b.n	8030bda <__kernel_rem_pio2+0x2a2>
 8030daa:	ab0e      	add	r3, sp, #56	; 0x38
 8030dac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8030db0:	f7cf fbc2 	bl	8000538 <__aeabi_i2d>
 8030db4:	4632      	mov	r2, r6
 8030db6:	463b      	mov	r3, r7
 8030db8:	f7cf fc28 	bl	800060c <__aeabi_dmul>
 8030dbc:	4b84      	ldr	r3, [pc, #528]	; (8030fd0 <__kernel_rem_pio2+0x698>)
 8030dbe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8030dc2:	2200      	movs	r2, #0
 8030dc4:	4630      	mov	r0, r6
 8030dc6:	4639      	mov	r1, r7
 8030dc8:	f7cf fc20 	bl	800060c <__aeabi_dmul>
 8030dcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8030dd0:	4606      	mov	r6, r0
 8030dd2:	460f      	mov	r7, r1
 8030dd4:	e70f      	b.n	8030bf6 <__kernel_rem_pio2+0x2be>
 8030dd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8030dda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8030dde:	f7cf fc15 	bl	800060c <__aeabi_dmul>
 8030de2:	4602      	mov	r2, r0
 8030de4:	460b      	mov	r3, r1
 8030de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8030dea:	f7cf fa59 	bl	80002a0 <__adddf3>
 8030dee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8030df2:	f108 0801 	add.w	r8, r8, #1
 8030df6:	9b02      	ldr	r3, [sp, #8]
 8030df8:	4598      	cmp	r8, r3
 8030dfa:	dc01      	bgt.n	8030e00 <__kernel_rem_pio2+0x4c8>
 8030dfc:	45b8      	cmp	r8, r7
 8030dfe:	ddea      	ble.n	8030dd6 <__kernel_rem_pio2+0x49e>
 8030e00:	ed9d 7b06 	vldr	d7, [sp, #24]
 8030e04:	ab4a      	add	r3, sp, #296	; 0x128
 8030e06:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8030e0a:	ed87 7b00 	vstr	d7, [r7]
 8030e0e:	3e01      	subs	r6, #1
 8030e10:	e6f8      	b.n	8030c04 <__kernel_rem_pio2+0x2cc>
 8030e12:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8030e14:	2b02      	cmp	r3, #2
 8030e16:	dc0b      	bgt.n	8030e30 <__kernel_rem_pio2+0x4f8>
 8030e18:	2b00      	cmp	r3, #0
 8030e1a:	dc35      	bgt.n	8030e88 <__kernel_rem_pio2+0x550>
 8030e1c:	d059      	beq.n	8030ed2 <__kernel_rem_pio2+0x59a>
 8030e1e:	9b04      	ldr	r3, [sp, #16]
 8030e20:	f003 0007 	and.w	r0, r3, #7
 8030e24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8030e28:	ecbd 8b02 	vpop	{d8}
 8030e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030e30:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8030e32:	2b03      	cmp	r3, #3
 8030e34:	d1f3      	bne.n	8030e1e <__kernel_rem_pio2+0x4e6>
 8030e36:	ab4a      	add	r3, sp, #296	; 0x128
 8030e38:	4423      	add	r3, r4
 8030e3a:	9306      	str	r3, [sp, #24]
 8030e3c:	461c      	mov	r4, r3
 8030e3e:	469a      	mov	sl, r3
 8030e40:	9502      	str	r5, [sp, #8]
 8030e42:	9b02      	ldr	r3, [sp, #8]
 8030e44:	2b00      	cmp	r3, #0
 8030e46:	f1aa 0a08 	sub.w	sl, sl, #8
 8030e4a:	dc6b      	bgt.n	8030f24 <__kernel_rem_pio2+0x5ec>
 8030e4c:	46aa      	mov	sl, r5
 8030e4e:	f1ba 0f01 	cmp.w	sl, #1
 8030e52:	f1a4 0408 	sub.w	r4, r4, #8
 8030e56:	f300 8085 	bgt.w	8030f64 <__kernel_rem_pio2+0x62c>
 8030e5a:	9c06      	ldr	r4, [sp, #24]
 8030e5c:	2000      	movs	r0, #0
 8030e5e:	3408      	adds	r4, #8
 8030e60:	2100      	movs	r1, #0
 8030e62:	2d01      	cmp	r5, #1
 8030e64:	f300 809d 	bgt.w	8030fa2 <__kernel_rem_pio2+0x66a>
 8030e68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8030e6c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8030e70:	f1bb 0f00 	cmp.w	fp, #0
 8030e74:	f040 809b 	bne.w	8030fae <__kernel_rem_pio2+0x676>
 8030e78:	9b01      	ldr	r3, [sp, #4]
 8030e7a:	e9c3 5600 	strd	r5, r6, [r3]
 8030e7e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8030e82:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8030e86:	e7ca      	b.n	8030e1e <__kernel_rem_pio2+0x4e6>
 8030e88:	3408      	adds	r4, #8
 8030e8a:	ab4a      	add	r3, sp, #296	; 0x128
 8030e8c:	441c      	add	r4, r3
 8030e8e:	462e      	mov	r6, r5
 8030e90:	2000      	movs	r0, #0
 8030e92:	2100      	movs	r1, #0
 8030e94:	2e00      	cmp	r6, #0
 8030e96:	da36      	bge.n	8030f06 <__kernel_rem_pio2+0x5ce>
 8030e98:	f1bb 0f00 	cmp.w	fp, #0
 8030e9c:	d039      	beq.n	8030f12 <__kernel_rem_pio2+0x5da>
 8030e9e:	4602      	mov	r2, r0
 8030ea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030ea4:	9c01      	ldr	r4, [sp, #4]
 8030ea6:	e9c4 2300 	strd	r2, r3, [r4]
 8030eaa:	4602      	mov	r2, r0
 8030eac:	460b      	mov	r3, r1
 8030eae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8030eb2:	f7cf f9f3 	bl	800029c <__aeabi_dsub>
 8030eb6:	ae4c      	add	r6, sp, #304	; 0x130
 8030eb8:	2401      	movs	r4, #1
 8030eba:	42a5      	cmp	r5, r4
 8030ebc:	da2c      	bge.n	8030f18 <__kernel_rem_pio2+0x5e0>
 8030ebe:	f1bb 0f00 	cmp.w	fp, #0
 8030ec2:	d002      	beq.n	8030eca <__kernel_rem_pio2+0x592>
 8030ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030ec8:	4619      	mov	r1, r3
 8030eca:	9b01      	ldr	r3, [sp, #4]
 8030ecc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8030ed0:	e7a5      	b.n	8030e1e <__kernel_rem_pio2+0x4e6>
 8030ed2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8030ed6:	eb0d 0403 	add.w	r4, sp, r3
 8030eda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8030ede:	2000      	movs	r0, #0
 8030ee0:	2100      	movs	r1, #0
 8030ee2:	2d00      	cmp	r5, #0
 8030ee4:	da09      	bge.n	8030efa <__kernel_rem_pio2+0x5c2>
 8030ee6:	f1bb 0f00 	cmp.w	fp, #0
 8030eea:	d002      	beq.n	8030ef2 <__kernel_rem_pio2+0x5ba>
 8030eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030ef0:	4619      	mov	r1, r3
 8030ef2:	9b01      	ldr	r3, [sp, #4]
 8030ef4:	e9c3 0100 	strd	r0, r1, [r3]
 8030ef8:	e791      	b.n	8030e1e <__kernel_rem_pio2+0x4e6>
 8030efa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8030efe:	f7cf f9cf 	bl	80002a0 <__adddf3>
 8030f02:	3d01      	subs	r5, #1
 8030f04:	e7ed      	b.n	8030ee2 <__kernel_rem_pio2+0x5aa>
 8030f06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8030f0a:	f7cf f9c9 	bl	80002a0 <__adddf3>
 8030f0e:	3e01      	subs	r6, #1
 8030f10:	e7c0      	b.n	8030e94 <__kernel_rem_pio2+0x55c>
 8030f12:	4602      	mov	r2, r0
 8030f14:	460b      	mov	r3, r1
 8030f16:	e7c5      	b.n	8030ea4 <__kernel_rem_pio2+0x56c>
 8030f18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8030f1c:	f7cf f9c0 	bl	80002a0 <__adddf3>
 8030f20:	3401      	adds	r4, #1
 8030f22:	e7ca      	b.n	8030eba <__kernel_rem_pio2+0x582>
 8030f24:	e9da 8900 	ldrd	r8, r9, [sl]
 8030f28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8030f2c:	9b02      	ldr	r3, [sp, #8]
 8030f2e:	3b01      	subs	r3, #1
 8030f30:	9302      	str	r3, [sp, #8]
 8030f32:	4632      	mov	r2, r6
 8030f34:	463b      	mov	r3, r7
 8030f36:	4640      	mov	r0, r8
 8030f38:	4649      	mov	r1, r9
 8030f3a:	f7cf f9b1 	bl	80002a0 <__adddf3>
 8030f3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8030f42:	4602      	mov	r2, r0
 8030f44:	460b      	mov	r3, r1
 8030f46:	4640      	mov	r0, r8
 8030f48:	4649      	mov	r1, r9
 8030f4a:	f7cf f9a7 	bl	800029c <__aeabi_dsub>
 8030f4e:	4632      	mov	r2, r6
 8030f50:	463b      	mov	r3, r7
 8030f52:	f7cf f9a5 	bl	80002a0 <__adddf3>
 8030f56:	ed9d 7b08 	vldr	d7, [sp, #32]
 8030f5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8030f5e:	ed8a 7b00 	vstr	d7, [sl]
 8030f62:	e76e      	b.n	8030e42 <__kernel_rem_pio2+0x50a>
 8030f64:	e9d4 8900 	ldrd	r8, r9, [r4]
 8030f68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8030f6c:	4640      	mov	r0, r8
 8030f6e:	4632      	mov	r2, r6
 8030f70:	463b      	mov	r3, r7
 8030f72:	4649      	mov	r1, r9
 8030f74:	f7cf f994 	bl	80002a0 <__adddf3>
 8030f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8030f7c:	4602      	mov	r2, r0
 8030f7e:	460b      	mov	r3, r1
 8030f80:	4640      	mov	r0, r8
 8030f82:	4649      	mov	r1, r9
 8030f84:	f7cf f98a 	bl	800029c <__aeabi_dsub>
 8030f88:	4632      	mov	r2, r6
 8030f8a:	463b      	mov	r3, r7
 8030f8c:	f7cf f988 	bl	80002a0 <__adddf3>
 8030f90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8030f94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8030f98:	ed84 7b00 	vstr	d7, [r4]
 8030f9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8030fa0:	e755      	b.n	8030e4e <__kernel_rem_pio2+0x516>
 8030fa2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8030fa6:	f7cf f97b 	bl	80002a0 <__adddf3>
 8030faa:	3d01      	subs	r5, #1
 8030fac:	e759      	b.n	8030e62 <__kernel_rem_pio2+0x52a>
 8030fae:	9b01      	ldr	r3, [sp, #4]
 8030fb0:	9a01      	ldr	r2, [sp, #4]
 8030fb2:	601d      	str	r5, [r3, #0]
 8030fb4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8030fb8:	605c      	str	r4, [r3, #4]
 8030fba:	609f      	str	r7, [r3, #8]
 8030fbc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8030fc0:	60d3      	str	r3, [r2, #12]
 8030fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030fc6:	6110      	str	r0, [r2, #16]
 8030fc8:	6153      	str	r3, [r2, #20]
 8030fca:	e728      	b.n	8030e1e <__kernel_rem_pio2+0x4e6>
 8030fcc:	41700000 	.word	0x41700000
 8030fd0:	3e700000 	.word	0x3e700000
 8030fd4:	00000000 	.word	0x00000000

08030fd8 <__kernel_sin>:
 8030fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030fdc:	ed2d 8b04 	vpush	{d8-d9}
 8030fe0:	eeb0 8a41 	vmov.f32	s16, s2
 8030fe4:	eef0 8a61 	vmov.f32	s17, s3
 8030fe8:	ec55 4b10 	vmov	r4, r5, d0
 8030fec:	b083      	sub	sp, #12
 8030fee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8030ff2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8030ff6:	9001      	str	r0, [sp, #4]
 8030ff8:	da06      	bge.n	8031008 <__kernel_sin+0x30>
 8030ffa:	ee10 0a10 	vmov	r0, s0
 8030ffe:	4629      	mov	r1, r5
 8031000:	f7cf fdb4 	bl	8000b6c <__aeabi_d2iz>
 8031004:	2800      	cmp	r0, #0
 8031006:	d051      	beq.n	80310ac <__kernel_sin+0xd4>
 8031008:	4622      	mov	r2, r4
 803100a:	462b      	mov	r3, r5
 803100c:	4620      	mov	r0, r4
 803100e:	4629      	mov	r1, r5
 8031010:	f7cf fafc 	bl	800060c <__aeabi_dmul>
 8031014:	4682      	mov	sl, r0
 8031016:	468b      	mov	fp, r1
 8031018:	4602      	mov	r2, r0
 803101a:	460b      	mov	r3, r1
 803101c:	4620      	mov	r0, r4
 803101e:	4629      	mov	r1, r5
 8031020:	f7cf faf4 	bl	800060c <__aeabi_dmul>
 8031024:	a341      	add	r3, pc, #260	; (adr r3, 803112c <__kernel_sin+0x154>)
 8031026:	e9d3 2300 	ldrd	r2, r3, [r3]
 803102a:	4680      	mov	r8, r0
 803102c:	4689      	mov	r9, r1
 803102e:	4650      	mov	r0, sl
 8031030:	4659      	mov	r1, fp
 8031032:	f7cf faeb 	bl	800060c <__aeabi_dmul>
 8031036:	a33f      	add	r3, pc, #252	; (adr r3, 8031134 <__kernel_sin+0x15c>)
 8031038:	e9d3 2300 	ldrd	r2, r3, [r3]
 803103c:	f7cf f92e 	bl	800029c <__aeabi_dsub>
 8031040:	4652      	mov	r2, sl
 8031042:	465b      	mov	r3, fp
 8031044:	f7cf fae2 	bl	800060c <__aeabi_dmul>
 8031048:	a33c      	add	r3, pc, #240	; (adr r3, 803113c <__kernel_sin+0x164>)
 803104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803104e:	f7cf f927 	bl	80002a0 <__adddf3>
 8031052:	4652      	mov	r2, sl
 8031054:	465b      	mov	r3, fp
 8031056:	f7cf fad9 	bl	800060c <__aeabi_dmul>
 803105a:	a33a      	add	r3, pc, #232	; (adr r3, 8031144 <__kernel_sin+0x16c>)
 803105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031060:	f7cf f91c 	bl	800029c <__aeabi_dsub>
 8031064:	4652      	mov	r2, sl
 8031066:	465b      	mov	r3, fp
 8031068:	f7cf fad0 	bl	800060c <__aeabi_dmul>
 803106c:	a337      	add	r3, pc, #220	; (adr r3, 803114c <__kernel_sin+0x174>)
 803106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031072:	f7cf f915 	bl	80002a0 <__adddf3>
 8031076:	9b01      	ldr	r3, [sp, #4]
 8031078:	4606      	mov	r6, r0
 803107a:	460f      	mov	r7, r1
 803107c:	b9eb      	cbnz	r3, 80310ba <__kernel_sin+0xe2>
 803107e:	4602      	mov	r2, r0
 8031080:	460b      	mov	r3, r1
 8031082:	4650      	mov	r0, sl
 8031084:	4659      	mov	r1, fp
 8031086:	f7cf fac1 	bl	800060c <__aeabi_dmul>
 803108a:	a325      	add	r3, pc, #148	; (adr r3, 8031120 <__kernel_sin+0x148>)
 803108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031090:	f7cf f904 	bl	800029c <__aeabi_dsub>
 8031094:	4642      	mov	r2, r8
 8031096:	464b      	mov	r3, r9
 8031098:	f7cf fab8 	bl	800060c <__aeabi_dmul>
 803109c:	4602      	mov	r2, r0
 803109e:	460b      	mov	r3, r1
 80310a0:	4620      	mov	r0, r4
 80310a2:	4629      	mov	r1, r5
 80310a4:	f7cf f8fc 	bl	80002a0 <__adddf3>
 80310a8:	4604      	mov	r4, r0
 80310aa:	460d      	mov	r5, r1
 80310ac:	ec45 4b10 	vmov	d0, r4, r5
 80310b0:	b003      	add	sp, #12
 80310b2:	ecbd 8b04 	vpop	{d8-d9}
 80310b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80310ba:	4b1b      	ldr	r3, [pc, #108]	; (8031128 <__kernel_sin+0x150>)
 80310bc:	ec51 0b18 	vmov	r0, r1, d8
 80310c0:	2200      	movs	r2, #0
 80310c2:	f7cf faa3 	bl	800060c <__aeabi_dmul>
 80310c6:	4632      	mov	r2, r6
 80310c8:	ec41 0b19 	vmov	d9, r0, r1
 80310cc:	463b      	mov	r3, r7
 80310ce:	4640      	mov	r0, r8
 80310d0:	4649      	mov	r1, r9
 80310d2:	f7cf fa9b 	bl	800060c <__aeabi_dmul>
 80310d6:	4602      	mov	r2, r0
 80310d8:	460b      	mov	r3, r1
 80310da:	ec51 0b19 	vmov	r0, r1, d9
 80310de:	f7cf f8dd 	bl	800029c <__aeabi_dsub>
 80310e2:	4652      	mov	r2, sl
 80310e4:	465b      	mov	r3, fp
 80310e6:	f7cf fa91 	bl	800060c <__aeabi_dmul>
 80310ea:	ec53 2b18 	vmov	r2, r3, d8
 80310ee:	f7cf f8d5 	bl	800029c <__aeabi_dsub>
 80310f2:	a30b      	add	r3, pc, #44	; (adr r3, 8031120 <__kernel_sin+0x148>)
 80310f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80310f8:	4606      	mov	r6, r0
 80310fa:	460f      	mov	r7, r1
 80310fc:	4640      	mov	r0, r8
 80310fe:	4649      	mov	r1, r9
 8031100:	f7cf fa84 	bl	800060c <__aeabi_dmul>
 8031104:	4602      	mov	r2, r0
 8031106:	460b      	mov	r3, r1
 8031108:	4630      	mov	r0, r6
 803110a:	4639      	mov	r1, r7
 803110c:	f7cf f8c8 	bl	80002a0 <__adddf3>
 8031110:	4602      	mov	r2, r0
 8031112:	460b      	mov	r3, r1
 8031114:	4620      	mov	r0, r4
 8031116:	4629      	mov	r1, r5
 8031118:	f7cf f8c0 	bl	800029c <__aeabi_dsub>
 803111c:	e7c4      	b.n	80310a8 <__kernel_sin+0xd0>
 803111e:	bf00      	nop
 8031120:	55555549 	.word	0x55555549
 8031124:	3fc55555 	.word	0x3fc55555
 8031128:	3fe00000 	.word	0x3fe00000
 803112c:	5acfd57c 	.word	0x5acfd57c
 8031130:	3de5d93a 	.word	0x3de5d93a
 8031134:	8a2b9ceb 	.word	0x8a2b9ceb
 8031138:	3e5ae5e6 	.word	0x3e5ae5e6
 803113c:	57b1fe7d 	.word	0x57b1fe7d
 8031140:	3ec71de3 	.word	0x3ec71de3
 8031144:	19c161d5 	.word	0x19c161d5
 8031148:	3f2a01a0 	.word	0x3f2a01a0
 803114c:	1110f8a6 	.word	0x1110f8a6
 8031150:	3f811111 	.word	0x3f811111

08031154 <with_errno>:
 8031154:	b570      	push	{r4, r5, r6, lr}
 8031156:	4604      	mov	r4, r0
 8031158:	460d      	mov	r5, r1
 803115a:	4616      	mov	r6, r2
 803115c:	f000 f928 	bl	80313b0 <__errno>
 8031160:	4629      	mov	r1, r5
 8031162:	6006      	str	r6, [r0, #0]
 8031164:	4620      	mov	r0, r4
 8031166:	bd70      	pop	{r4, r5, r6, pc}

08031168 <xflow>:
 8031168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803116a:	4614      	mov	r4, r2
 803116c:	461d      	mov	r5, r3
 803116e:	b108      	cbz	r0, 8031174 <xflow+0xc>
 8031170:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8031174:	e9cd 2300 	strd	r2, r3, [sp]
 8031178:	e9dd 2300 	ldrd	r2, r3, [sp]
 803117c:	4620      	mov	r0, r4
 803117e:	4629      	mov	r1, r5
 8031180:	f7cf fa44 	bl	800060c <__aeabi_dmul>
 8031184:	2222      	movs	r2, #34	; 0x22
 8031186:	b003      	add	sp, #12
 8031188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803118c:	f7ff bfe2 	b.w	8031154 <with_errno>

08031190 <__math_uflow>:
 8031190:	b508      	push	{r3, lr}
 8031192:	2200      	movs	r2, #0
 8031194:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8031198:	f7ff ffe6 	bl	8031168 <xflow>
 803119c:	ec41 0b10 	vmov	d0, r0, r1
 80311a0:	bd08      	pop	{r3, pc}

080311a2 <__math_oflow>:
 80311a2:	b508      	push	{r3, lr}
 80311a4:	2200      	movs	r2, #0
 80311a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80311aa:	f7ff ffdd 	bl	8031168 <xflow>
 80311ae:	ec41 0b10 	vmov	d0, r0, r1
 80311b2:	bd08      	pop	{r3, pc}

080311b4 <with_errnof>:
 80311b4:	b513      	push	{r0, r1, r4, lr}
 80311b6:	4604      	mov	r4, r0
 80311b8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80311bc:	f000 f8f8 	bl	80313b0 <__errno>
 80311c0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80311c4:	6004      	str	r4, [r0, #0]
 80311c6:	b002      	add	sp, #8
 80311c8:	bd10      	pop	{r4, pc}

080311ca <xflowf>:
 80311ca:	b130      	cbz	r0, 80311da <xflowf+0x10>
 80311cc:	eef1 7a40 	vneg.f32	s15, s0
 80311d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80311d4:	2022      	movs	r0, #34	; 0x22
 80311d6:	f7ff bfed 	b.w	80311b4 <with_errnof>
 80311da:	eef0 7a40 	vmov.f32	s15, s0
 80311de:	e7f7      	b.n	80311d0 <xflowf+0x6>

080311e0 <__math_uflowf>:
 80311e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80311e8 <__math_uflowf+0x8>
 80311e4:	f7ff bff1 	b.w	80311ca <xflowf>
 80311e8:	10000000 	.word	0x10000000

080311ec <__math_oflowf>:
 80311ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80311f4 <__math_oflowf+0x8>
 80311f0:	f7ff bfeb 	b.w	80311ca <xflowf>
 80311f4:	70000000 	.word	0x70000000

080311f8 <fabs>:
 80311f8:	ec51 0b10 	vmov	r0, r1, d0
 80311fc:	ee10 2a10 	vmov	r2, s0
 8031200:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8031204:	ec43 2b10 	vmov	d0, r2, r3
 8031208:	4770      	bx	lr

0803120a <finite>:
 803120a:	b082      	sub	sp, #8
 803120c:	ed8d 0b00 	vstr	d0, [sp]
 8031210:	9801      	ldr	r0, [sp, #4]
 8031212:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8031216:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 803121a:	0fc0      	lsrs	r0, r0, #31
 803121c:	b002      	add	sp, #8
 803121e:	4770      	bx	lr

08031220 <scalbn>:
 8031220:	b570      	push	{r4, r5, r6, lr}
 8031222:	ec55 4b10 	vmov	r4, r5, d0
 8031226:	f3c5 520a 	ubfx	r2, r5, #20, #11
 803122a:	4606      	mov	r6, r0
 803122c:	462b      	mov	r3, r5
 803122e:	b99a      	cbnz	r2, 8031258 <scalbn+0x38>
 8031230:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8031234:	4323      	orrs	r3, r4
 8031236:	d036      	beq.n	80312a6 <scalbn+0x86>
 8031238:	4b39      	ldr	r3, [pc, #228]	; (8031320 <scalbn+0x100>)
 803123a:	4629      	mov	r1, r5
 803123c:	ee10 0a10 	vmov	r0, s0
 8031240:	2200      	movs	r2, #0
 8031242:	f7cf f9e3 	bl	800060c <__aeabi_dmul>
 8031246:	4b37      	ldr	r3, [pc, #220]	; (8031324 <scalbn+0x104>)
 8031248:	429e      	cmp	r6, r3
 803124a:	4604      	mov	r4, r0
 803124c:	460d      	mov	r5, r1
 803124e:	da10      	bge.n	8031272 <scalbn+0x52>
 8031250:	a32b      	add	r3, pc, #172	; (adr r3, 8031300 <scalbn+0xe0>)
 8031252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031256:	e03a      	b.n	80312ce <scalbn+0xae>
 8031258:	f240 71ff 	movw	r1, #2047	; 0x7ff
 803125c:	428a      	cmp	r2, r1
 803125e:	d10c      	bne.n	803127a <scalbn+0x5a>
 8031260:	ee10 2a10 	vmov	r2, s0
 8031264:	4620      	mov	r0, r4
 8031266:	4629      	mov	r1, r5
 8031268:	f7cf f81a 	bl	80002a0 <__adddf3>
 803126c:	4604      	mov	r4, r0
 803126e:	460d      	mov	r5, r1
 8031270:	e019      	b.n	80312a6 <scalbn+0x86>
 8031272:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8031276:	460b      	mov	r3, r1
 8031278:	3a36      	subs	r2, #54	; 0x36
 803127a:	4432      	add	r2, r6
 803127c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8031280:	428a      	cmp	r2, r1
 8031282:	dd08      	ble.n	8031296 <scalbn+0x76>
 8031284:	2d00      	cmp	r5, #0
 8031286:	a120      	add	r1, pc, #128	; (adr r1, 8031308 <scalbn+0xe8>)
 8031288:	e9d1 0100 	ldrd	r0, r1, [r1]
 803128c:	da1c      	bge.n	80312c8 <scalbn+0xa8>
 803128e:	a120      	add	r1, pc, #128	; (adr r1, 8031310 <scalbn+0xf0>)
 8031290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031294:	e018      	b.n	80312c8 <scalbn+0xa8>
 8031296:	2a00      	cmp	r2, #0
 8031298:	dd08      	ble.n	80312ac <scalbn+0x8c>
 803129a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 803129e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80312a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80312a6:	ec45 4b10 	vmov	d0, r4, r5
 80312aa:	bd70      	pop	{r4, r5, r6, pc}
 80312ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80312b0:	da19      	bge.n	80312e6 <scalbn+0xc6>
 80312b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80312b6:	429e      	cmp	r6, r3
 80312b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80312bc:	dd0a      	ble.n	80312d4 <scalbn+0xb4>
 80312be:	a112      	add	r1, pc, #72	; (adr r1, 8031308 <scalbn+0xe8>)
 80312c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80312c4:	2b00      	cmp	r3, #0
 80312c6:	d1e2      	bne.n	803128e <scalbn+0x6e>
 80312c8:	a30f      	add	r3, pc, #60	; (adr r3, 8031308 <scalbn+0xe8>)
 80312ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312ce:	f7cf f99d 	bl	800060c <__aeabi_dmul>
 80312d2:	e7cb      	b.n	803126c <scalbn+0x4c>
 80312d4:	a10a      	add	r1, pc, #40	; (adr r1, 8031300 <scalbn+0xe0>)
 80312d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80312da:	2b00      	cmp	r3, #0
 80312dc:	d0b8      	beq.n	8031250 <scalbn+0x30>
 80312de:	a10e      	add	r1, pc, #56	; (adr r1, 8031318 <scalbn+0xf8>)
 80312e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80312e4:	e7b4      	b.n	8031250 <scalbn+0x30>
 80312e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80312ea:	3236      	adds	r2, #54	; 0x36
 80312ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80312f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80312f4:	4620      	mov	r0, r4
 80312f6:	4b0c      	ldr	r3, [pc, #48]	; (8031328 <scalbn+0x108>)
 80312f8:	2200      	movs	r2, #0
 80312fa:	e7e8      	b.n	80312ce <scalbn+0xae>
 80312fc:	f3af 8000 	nop.w
 8031300:	c2f8f359 	.word	0xc2f8f359
 8031304:	01a56e1f 	.word	0x01a56e1f
 8031308:	8800759c 	.word	0x8800759c
 803130c:	7e37e43c 	.word	0x7e37e43c
 8031310:	8800759c 	.word	0x8800759c
 8031314:	fe37e43c 	.word	0xfe37e43c
 8031318:	c2f8f359 	.word	0xc2f8f359
 803131c:	81a56e1f 	.word	0x81a56e1f
 8031320:	43500000 	.word	0x43500000
 8031324:	ffff3cb0 	.word	0xffff3cb0
 8031328:	3c900000 	.word	0x3c900000

0803132c <finitef>:
 803132c:	b082      	sub	sp, #8
 803132e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8031332:	9801      	ldr	r0, [sp, #4]
 8031334:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8031338:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 803133c:	bfac      	ite	ge
 803133e:	2000      	movge	r0, #0
 8031340:	2001      	movlt	r0, #1
 8031342:	b002      	add	sp, #8
 8031344:	4770      	bx	lr
	...

08031348 <nanf>:
 8031348:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8031350 <nanf+0x8>
 803134c:	4770      	bx	lr
 803134e:	bf00      	nop
 8031350:	7fc00000 	.word	0x7fc00000

08031354 <abort>:
 8031354:	b508      	push	{r3, lr}
 8031356:	2006      	movs	r0, #6
 8031358:	f000 fcc6 	bl	8031ce8 <raise>
 803135c:	2001      	movs	r0, #1
 803135e:	f7d6 f947 	bl	80075f0 <_exit>
	...

08031364 <__assert_func>:
 8031364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8031366:	4614      	mov	r4, r2
 8031368:	461a      	mov	r2, r3
 803136a:	4b09      	ldr	r3, [pc, #36]	; (8031390 <__assert_func+0x2c>)
 803136c:	681b      	ldr	r3, [r3, #0]
 803136e:	4605      	mov	r5, r0
 8031370:	68d8      	ldr	r0, [r3, #12]
 8031372:	b14c      	cbz	r4, 8031388 <__assert_func+0x24>
 8031374:	4b07      	ldr	r3, [pc, #28]	; (8031394 <__assert_func+0x30>)
 8031376:	9100      	str	r1, [sp, #0]
 8031378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803137c:	4906      	ldr	r1, [pc, #24]	; (8031398 <__assert_func+0x34>)
 803137e:	462b      	mov	r3, r5
 8031380:	f000 f81c 	bl	80313bc <fiprintf>
 8031384:	f7ff ffe6 	bl	8031354 <abort>
 8031388:	4b04      	ldr	r3, [pc, #16]	; (803139c <__assert_func+0x38>)
 803138a:	461c      	mov	r4, r3
 803138c:	e7f3      	b.n	8031376 <__assert_func+0x12>
 803138e:	bf00      	nop
 8031390:	200006dc 	.word	0x200006dc
 8031394:	08037440 	.word	0x08037440
 8031398:	0803744d 	.word	0x0803744d
 803139c:	0803747b 	.word	0x0803747b

080313a0 <calloc>:
 80313a0:	4b02      	ldr	r3, [pc, #8]	; (80313ac <calloc+0xc>)
 80313a2:	460a      	mov	r2, r1
 80313a4:	4601      	mov	r1, r0
 80313a6:	6818      	ldr	r0, [r3, #0]
 80313a8:	f000 b882 	b.w	80314b0 <_calloc_r>
 80313ac:	200006dc 	.word	0x200006dc

080313b0 <__errno>:
 80313b0:	4b01      	ldr	r3, [pc, #4]	; (80313b8 <__errno+0x8>)
 80313b2:	6818      	ldr	r0, [r3, #0]
 80313b4:	4770      	bx	lr
 80313b6:	bf00      	nop
 80313b8:	200006dc 	.word	0x200006dc

080313bc <fiprintf>:
 80313bc:	b40e      	push	{r1, r2, r3}
 80313be:	b503      	push	{r0, r1, lr}
 80313c0:	4601      	mov	r1, r0
 80313c2:	ab03      	add	r3, sp, #12
 80313c4:	4805      	ldr	r0, [pc, #20]	; (80313dc <fiprintf+0x20>)
 80313c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80313ca:	6800      	ldr	r0, [r0, #0]
 80313cc:	9301      	str	r3, [sp, #4]
 80313ce:	f000 f98f 	bl	80316f0 <_vfiprintf_r>
 80313d2:	b002      	add	sp, #8
 80313d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80313d8:	b003      	add	sp, #12
 80313da:	4770      	bx	lr
 80313dc:	200006dc 	.word	0x200006dc

080313e0 <__libc_init_array>:
 80313e0:	b570      	push	{r4, r5, r6, lr}
 80313e2:	4d0d      	ldr	r5, [pc, #52]	; (8031418 <__libc_init_array+0x38>)
 80313e4:	4c0d      	ldr	r4, [pc, #52]	; (803141c <__libc_init_array+0x3c>)
 80313e6:	1b64      	subs	r4, r4, r5
 80313e8:	10a4      	asrs	r4, r4, #2
 80313ea:	2600      	movs	r6, #0
 80313ec:	42a6      	cmp	r6, r4
 80313ee:	d109      	bne.n	8031404 <__libc_init_array+0x24>
 80313f0:	4d0b      	ldr	r5, [pc, #44]	; (8031420 <__libc_init_array+0x40>)
 80313f2:	4c0c      	ldr	r4, [pc, #48]	; (8031424 <__libc_init_array+0x44>)
 80313f4:	f001 f9da 	bl	80327ac <_init>
 80313f8:	1b64      	subs	r4, r4, r5
 80313fa:	10a4      	asrs	r4, r4, #2
 80313fc:	2600      	movs	r6, #0
 80313fe:	42a6      	cmp	r6, r4
 8031400:	d105      	bne.n	803140e <__libc_init_array+0x2e>
 8031402:	bd70      	pop	{r4, r5, r6, pc}
 8031404:	f855 3b04 	ldr.w	r3, [r5], #4
 8031408:	4798      	blx	r3
 803140a:	3601      	adds	r6, #1
 803140c:	e7ee      	b.n	80313ec <__libc_init_array+0xc>
 803140e:	f855 3b04 	ldr.w	r3, [r5], #4
 8031412:	4798      	blx	r3
 8031414:	3601      	adds	r6, #1
 8031416:	e7f2      	b.n	80313fe <__libc_init_array+0x1e>
 8031418:	0803751c 	.word	0x0803751c
 803141c:	0803751c 	.word	0x0803751c
 8031420:	0803751c 	.word	0x0803751c
 8031424:	08037524 	.word	0x08037524

08031428 <__retarget_lock_init_recursive>:
 8031428:	4770      	bx	lr

0803142a <__retarget_lock_acquire_recursive>:
 803142a:	4770      	bx	lr

0803142c <__retarget_lock_release_recursive>:
 803142c:	4770      	bx	lr
	...

08031430 <malloc>:
 8031430:	4b02      	ldr	r3, [pc, #8]	; (803143c <malloc+0xc>)
 8031432:	4601      	mov	r1, r0
 8031434:	6818      	ldr	r0, [r3, #0]
 8031436:	f000 b8bd 	b.w	80315b4 <_malloc_r>
 803143a:	bf00      	nop
 803143c:	200006dc 	.word	0x200006dc

08031440 <free>:
 8031440:	4b02      	ldr	r3, [pc, #8]	; (803144c <free+0xc>)
 8031442:	4601      	mov	r1, r0
 8031444:	6818      	ldr	r0, [r3, #0]
 8031446:	f000 b849 	b.w	80314dc <_free_r>
 803144a:	bf00      	nop
 803144c:	200006dc 	.word	0x200006dc

08031450 <memcpy>:
 8031450:	440a      	add	r2, r1
 8031452:	4291      	cmp	r1, r2
 8031454:	f100 33ff 	add.w	r3, r0, #4294967295
 8031458:	d100      	bne.n	803145c <memcpy+0xc>
 803145a:	4770      	bx	lr
 803145c:	b510      	push	{r4, lr}
 803145e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8031462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8031466:	4291      	cmp	r1, r2
 8031468:	d1f9      	bne.n	803145e <memcpy+0xe>
 803146a:	bd10      	pop	{r4, pc}

0803146c <memmove>:
 803146c:	4288      	cmp	r0, r1
 803146e:	b510      	push	{r4, lr}
 8031470:	eb01 0402 	add.w	r4, r1, r2
 8031474:	d902      	bls.n	803147c <memmove+0x10>
 8031476:	4284      	cmp	r4, r0
 8031478:	4623      	mov	r3, r4
 803147a:	d807      	bhi.n	803148c <memmove+0x20>
 803147c:	1e43      	subs	r3, r0, #1
 803147e:	42a1      	cmp	r1, r4
 8031480:	d008      	beq.n	8031494 <memmove+0x28>
 8031482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8031486:	f803 2f01 	strb.w	r2, [r3, #1]!
 803148a:	e7f8      	b.n	803147e <memmove+0x12>
 803148c:	4402      	add	r2, r0
 803148e:	4601      	mov	r1, r0
 8031490:	428a      	cmp	r2, r1
 8031492:	d100      	bne.n	8031496 <memmove+0x2a>
 8031494:	bd10      	pop	{r4, pc}
 8031496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803149a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803149e:	e7f7      	b.n	8031490 <memmove+0x24>

080314a0 <memset>:
 80314a0:	4402      	add	r2, r0
 80314a2:	4603      	mov	r3, r0
 80314a4:	4293      	cmp	r3, r2
 80314a6:	d100      	bne.n	80314aa <memset+0xa>
 80314a8:	4770      	bx	lr
 80314aa:	f803 1b01 	strb.w	r1, [r3], #1
 80314ae:	e7f9      	b.n	80314a4 <memset+0x4>

080314b0 <_calloc_r>:
 80314b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80314b2:	fba1 2402 	umull	r2, r4, r1, r2
 80314b6:	b94c      	cbnz	r4, 80314cc <_calloc_r+0x1c>
 80314b8:	4611      	mov	r1, r2
 80314ba:	9201      	str	r2, [sp, #4]
 80314bc:	f000 f87a 	bl	80315b4 <_malloc_r>
 80314c0:	9a01      	ldr	r2, [sp, #4]
 80314c2:	4605      	mov	r5, r0
 80314c4:	b930      	cbnz	r0, 80314d4 <_calloc_r+0x24>
 80314c6:	4628      	mov	r0, r5
 80314c8:	b003      	add	sp, #12
 80314ca:	bd30      	pop	{r4, r5, pc}
 80314cc:	220c      	movs	r2, #12
 80314ce:	6002      	str	r2, [r0, #0]
 80314d0:	2500      	movs	r5, #0
 80314d2:	e7f8      	b.n	80314c6 <_calloc_r+0x16>
 80314d4:	4621      	mov	r1, r4
 80314d6:	f7ff ffe3 	bl	80314a0 <memset>
 80314da:	e7f4      	b.n	80314c6 <_calloc_r+0x16>

080314dc <_free_r>:
 80314dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80314de:	2900      	cmp	r1, #0
 80314e0:	d044      	beq.n	803156c <_free_r+0x90>
 80314e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80314e6:	9001      	str	r0, [sp, #4]
 80314e8:	2b00      	cmp	r3, #0
 80314ea:	f1a1 0404 	sub.w	r4, r1, #4
 80314ee:	bfb8      	it	lt
 80314f0:	18e4      	addlt	r4, r4, r3
 80314f2:	f000 ff11 	bl	8032318 <__malloc_lock>
 80314f6:	4a1e      	ldr	r2, [pc, #120]	; (8031570 <_free_r+0x94>)
 80314f8:	9801      	ldr	r0, [sp, #4]
 80314fa:	6813      	ldr	r3, [r2, #0]
 80314fc:	b933      	cbnz	r3, 803150c <_free_r+0x30>
 80314fe:	6063      	str	r3, [r4, #4]
 8031500:	6014      	str	r4, [r2, #0]
 8031502:	b003      	add	sp, #12
 8031504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8031508:	f000 bf0c 	b.w	8032324 <__malloc_unlock>
 803150c:	42a3      	cmp	r3, r4
 803150e:	d908      	bls.n	8031522 <_free_r+0x46>
 8031510:	6825      	ldr	r5, [r4, #0]
 8031512:	1961      	adds	r1, r4, r5
 8031514:	428b      	cmp	r3, r1
 8031516:	bf01      	itttt	eq
 8031518:	6819      	ldreq	r1, [r3, #0]
 803151a:	685b      	ldreq	r3, [r3, #4]
 803151c:	1949      	addeq	r1, r1, r5
 803151e:	6021      	streq	r1, [r4, #0]
 8031520:	e7ed      	b.n	80314fe <_free_r+0x22>
 8031522:	461a      	mov	r2, r3
 8031524:	685b      	ldr	r3, [r3, #4]
 8031526:	b10b      	cbz	r3, 803152c <_free_r+0x50>
 8031528:	42a3      	cmp	r3, r4
 803152a:	d9fa      	bls.n	8031522 <_free_r+0x46>
 803152c:	6811      	ldr	r1, [r2, #0]
 803152e:	1855      	adds	r5, r2, r1
 8031530:	42a5      	cmp	r5, r4
 8031532:	d10b      	bne.n	803154c <_free_r+0x70>
 8031534:	6824      	ldr	r4, [r4, #0]
 8031536:	4421      	add	r1, r4
 8031538:	1854      	adds	r4, r2, r1
 803153a:	42a3      	cmp	r3, r4
 803153c:	6011      	str	r1, [r2, #0]
 803153e:	d1e0      	bne.n	8031502 <_free_r+0x26>
 8031540:	681c      	ldr	r4, [r3, #0]
 8031542:	685b      	ldr	r3, [r3, #4]
 8031544:	6053      	str	r3, [r2, #4]
 8031546:	4421      	add	r1, r4
 8031548:	6011      	str	r1, [r2, #0]
 803154a:	e7da      	b.n	8031502 <_free_r+0x26>
 803154c:	d902      	bls.n	8031554 <_free_r+0x78>
 803154e:	230c      	movs	r3, #12
 8031550:	6003      	str	r3, [r0, #0]
 8031552:	e7d6      	b.n	8031502 <_free_r+0x26>
 8031554:	6825      	ldr	r5, [r4, #0]
 8031556:	1961      	adds	r1, r4, r5
 8031558:	428b      	cmp	r3, r1
 803155a:	bf04      	itt	eq
 803155c:	6819      	ldreq	r1, [r3, #0]
 803155e:	685b      	ldreq	r3, [r3, #4]
 8031560:	6063      	str	r3, [r4, #4]
 8031562:	bf04      	itt	eq
 8031564:	1949      	addeq	r1, r1, r5
 8031566:	6021      	streq	r1, [r4, #0]
 8031568:	6054      	str	r4, [r2, #4]
 803156a:	e7ca      	b.n	8031502 <_free_r+0x26>
 803156c:	b003      	add	sp, #12
 803156e:	bd30      	pop	{r4, r5, pc}
 8031570:	2000245c 	.word	0x2000245c

08031574 <sbrk_aligned>:
 8031574:	b570      	push	{r4, r5, r6, lr}
 8031576:	4e0e      	ldr	r6, [pc, #56]	; (80315b0 <sbrk_aligned+0x3c>)
 8031578:	460c      	mov	r4, r1
 803157a:	6831      	ldr	r1, [r6, #0]
 803157c:	4605      	mov	r5, r0
 803157e:	b911      	cbnz	r1, 8031586 <sbrk_aligned+0x12>
 8031580:	f000 fb7a 	bl	8031c78 <_sbrk_r>
 8031584:	6030      	str	r0, [r6, #0]
 8031586:	4621      	mov	r1, r4
 8031588:	4628      	mov	r0, r5
 803158a:	f000 fb75 	bl	8031c78 <_sbrk_r>
 803158e:	1c43      	adds	r3, r0, #1
 8031590:	d00a      	beq.n	80315a8 <sbrk_aligned+0x34>
 8031592:	1cc4      	adds	r4, r0, #3
 8031594:	f024 0403 	bic.w	r4, r4, #3
 8031598:	42a0      	cmp	r0, r4
 803159a:	d007      	beq.n	80315ac <sbrk_aligned+0x38>
 803159c:	1a21      	subs	r1, r4, r0
 803159e:	4628      	mov	r0, r5
 80315a0:	f000 fb6a 	bl	8031c78 <_sbrk_r>
 80315a4:	3001      	adds	r0, #1
 80315a6:	d101      	bne.n	80315ac <sbrk_aligned+0x38>
 80315a8:	f04f 34ff 	mov.w	r4, #4294967295
 80315ac:	4620      	mov	r0, r4
 80315ae:	bd70      	pop	{r4, r5, r6, pc}
 80315b0:	20002460 	.word	0x20002460

080315b4 <_malloc_r>:
 80315b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80315b8:	1ccd      	adds	r5, r1, #3
 80315ba:	f025 0503 	bic.w	r5, r5, #3
 80315be:	3508      	adds	r5, #8
 80315c0:	2d0c      	cmp	r5, #12
 80315c2:	bf38      	it	cc
 80315c4:	250c      	movcc	r5, #12
 80315c6:	2d00      	cmp	r5, #0
 80315c8:	4607      	mov	r7, r0
 80315ca:	db01      	blt.n	80315d0 <_malloc_r+0x1c>
 80315cc:	42a9      	cmp	r1, r5
 80315ce:	d905      	bls.n	80315dc <_malloc_r+0x28>
 80315d0:	230c      	movs	r3, #12
 80315d2:	603b      	str	r3, [r7, #0]
 80315d4:	2600      	movs	r6, #0
 80315d6:	4630      	mov	r0, r6
 80315d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80315dc:	4e2e      	ldr	r6, [pc, #184]	; (8031698 <_malloc_r+0xe4>)
 80315de:	f000 fe9b 	bl	8032318 <__malloc_lock>
 80315e2:	6833      	ldr	r3, [r6, #0]
 80315e4:	461c      	mov	r4, r3
 80315e6:	bb34      	cbnz	r4, 8031636 <_malloc_r+0x82>
 80315e8:	4629      	mov	r1, r5
 80315ea:	4638      	mov	r0, r7
 80315ec:	f7ff ffc2 	bl	8031574 <sbrk_aligned>
 80315f0:	1c43      	adds	r3, r0, #1
 80315f2:	4604      	mov	r4, r0
 80315f4:	d14d      	bne.n	8031692 <_malloc_r+0xde>
 80315f6:	6834      	ldr	r4, [r6, #0]
 80315f8:	4626      	mov	r6, r4
 80315fa:	2e00      	cmp	r6, #0
 80315fc:	d140      	bne.n	8031680 <_malloc_r+0xcc>
 80315fe:	6823      	ldr	r3, [r4, #0]
 8031600:	4631      	mov	r1, r6
 8031602:	4638      	mov	r0, r7
 8031604:	eb04 0803 	add.w	r8, r4, r3
 8031608:	f000 fb36 	bl	8031c78 <_sbrk_r>
 803160c:	4580      	cmp	r8, r0
 803160e:	d13a      	bne.n	8031686 <_malloc_r+0xd2>
 8031610:	6821      	ldr	r1, [r4, #0]
 8031612:	3503      	adds	r5, #3
 8031614:	1a6d      	subs	r5, r5, r1
 8031616:	f025 0503 	bic.w	r5, r5, #3
 803161a:	3508      	adds	r5, #8
 803161c:	2d0c      	cmp	r5, #12
 803161e:	bf38      	it	cc
 8031620:	250c      	movcc	r5, #12
 8031622:	4629      	mov	r1, r5
 8031624:	4638      	mov	r0, r7
 8031626:	f7ff ffa5 	bl	8031574 <sbrk_aligned>
 803162a:	3001      	adds	r0, #1
 803162c:	d02b      	beq.n	8031686 <_malloc_r+0xd2>
 803162e:	6823      	ldr	r3, [r4, #0]
 8031630:	442b      	add	r3, r5
 8031632:	6023      	str	r3, [r4, #0]
 8031634:	e00e      	b.n	8031654 <_malloc_r+0xa0>
 8031636:	6822      	ldr	r2, [r4, #0]
 8031638:	1b52      	subs	r2, r2, r5
 803163a:	d41e      	bmi.n	803167a <_malloc_r+0xc6>
 803163c:	2a0b      	cmp	r2, #11
 803163e:	d916      	bls.n	803166e <_malloc_r+0xba>
 8031640:	1961      	adds	r1, r4, r5
 8031642:	42a3      	cmp	r3, r4
 8031644:	6025      	str	r5, [r4, #0]
 8031646:	bf18      	it	ne
 8031648:	6059      	strne	r1, [r3, #4]
 803164a:	6863      	ldr	r3, [r4, #4]
 803164c:	bf08      	it	eq
 803164e:	6031      	streq	r1, [r6, #0]
 8031650:	5162      	str	r2, [r4, r5]
 8031652:	604b      	str	r3, [r1, #4]
 8031654:	4638      	mov	r0, r7
 8031656:	f104 060b 	add.w	r6, r4, #11
 803165a:	f000 fe63 	bl	8032324 <__malloc_unlock>
 803165e:	f026 0607 	bic.w	r6, r6, #7
 8031662:	1d23      	adds	r3, r4, #4
 8031664:	1af2      	subs	r2, r6, r3
 8031666:	d0b6      	beq.n	80315d6 <_malloc_r+0x22>
 8031668:	1b9b      	subs	r3, r3, r6
 803166a:	50a3      	str	r3, [r4, r2]
 803166c:	e7b3      	b.n	80315d6 <_malloc_r+0x22>
 803166e:	6862      	ldr	r2, [r4, #4]
 8031670:	42a3      	cmp	r3, r4
 8031672:	bf0c      	ite	eq
 8031674:	6032      	streq	r2, [r6, #0]
 8031676:	605a      	strne	r2, [r3, #4]
 8031678:	e7ec      	b.n	8031654 <_malloc_r+0xa0>
 803167a:	4623      	mov	r3, r4
 803167c:	6864      	ldr	r4, [r4, #4]
 803167e:	e7b2      	b.n	80315e6 <_malloc_r+0x32>
 8031680:	4634      	mov	r4, r6
 8031682:	6876      	ldr	r6, [r6, #4]
 8031684:	e7b9      	b.n	80315fa <_malloc_r+0x46>
 8031686:	230c      	movs	r3, #12
 8031688:	603b      	str	r3, [r7, #0]
 803168a:	4638      	mov	r0, r7
 803168c:	f000 fe4a 	bl	8032324 <__malloc_unlock>
 8031690:	e7a1      	b.n	80315d6 <_malloc_r+0x22>
 8031692:	6025      	str	r5, [r4, #0]
 8031694:	e7de      	b.n	8031654 <_malloc_r+0xa0>
 8031696:	bf00      	nop
 8031698:	2000245c 	.word	0x2000245c

0803169c <__sfputc_r>:
 803169c:	6893      	ldr	r3, [r2, #8]
 803169e:	3b01      	subs	r3, #1
 80316a0:	2b00      	cmp	r3, #0
 80316a2:	b410      	push	{r4}
 80316a4:	6093      	str	r3, [r2, #8]
 80316a6:	da08      	bge.n	80316ba <__sfputc_r+0x1e>
 80316a8:	6994      	ldr	r4, [r2, #24]
 80316aa:	42a3      	cmp	r3, r4
 80316ac:	db01      	blt.n	80316b2 <__sfputc_r+0x16>
 80316ae:	290a      	cmp	r1, #10
 80316b0:	d103      	bne.n	80316ba <__sfputc_r+0x1e>
 80316b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80316b6:	f000 bb53 	b.w	8031d60 <__swbuf_r>
 80316ba:	6813      	ldr	r3, [r2, #0]
 80316bc:	1c58      	adds	r0, r3, #1
 80316be:	6010      	str	r0, [r2, #0]
 80316c0:	7019      	strb	r1, [r3, #0]
 80316c2:	4608      	mov	r0, r1
 80316c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80316c8:	4770      	bx	lr

080316ca <__sfputs_r>:
 80316ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80316cc:	4606      	mov	r6, r0
 80316ce:	460f      	mov	r7, r1
 80316d0:	4614      	mov	r4, r2
 80316d2:	18d5      	adds	r5, r2, r3
 80316d4:	42ac      	cmp	r4, r5
 80316d6:	d101      	bne.n	80316dc <__sfputs_r+0x12>
 80316d8:	2000      	movs	r0, #0
 80316da:	e007      	b.n	80316ec <__sfputs_r+0x22>
 80316dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80316e0:	463a      	mov	r2, r7
 80316e2:	4630      	mov	r0, r6
 80316e4:	f7ff ffda 	bl	803169c <__sfputc_r>
 80316e8:	1c43      	adds	r3, r0, #1
 80316ea:	d1f3      	bne.n	80316d4 <__sfputs_r+0xa>
 80316ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080316f0 <_vfiprintf_r>:
 80316f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80316f4:	460d      	mov	r5, r1
 80316f6:	b09d      	sub	sp, #116	; 0x74
 80316f8:	4614      	mov	r4, r2
 80316fa:	4698      	mov	r8, r3
 80316fc:	4606      	mov	r6, r0
 80316fe:	b118      	cbz	r0, 8031708 <_vfiprintf_r+0x18>
 8031700:	6983      	ldr	r3, [r0, #24]
 8031702:	b90b      	cbnz	r3, 8031708 <_vfiprintf_r+0x18>
 8031704:	f000 fd06 	bl	8032114 <__sinit>
 8031708:	4b89      	ldr	r3, [pc, #548]	; (8031930 <_vfiprintf_r+0x240>)
 803170a:	429d      	cmp	r5, r3
 803170c:	d11b      	bne.n	8031746 <_vfiprintf_r+0x56>
 803170e:	6875      	ldr	r5, [r6, #4]
 8031710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031712:	07d9      	lsls	r1, r3, #31
 8031714:	d405      	bmi.n	8031722 <_vfiprintf_r+0x32>
 8031716:	89ab      	ldrh	r3, [r5, #12]
 8031718:	059a      	lsls	r2, r3, #22
 803171a:	d402      	bmi.n	8031722 <_vfiprintf_r+0x32>
 803171c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803171e:	f7ff fe84 	bl	803142a <__retarget_lock_acquire_recursive>
 8031722:	89ab      	ldrh	r3, [r5, #12]
 8031724:	071b      	lsls	r3, r3, #28
 8031726:	d501      	bpl.n	803172c <_vfiprintf_r+0x3c>
 8031728:	692b      	ldr	r3, [r5, #16]
 803172a:	b9eb      	cbnz	r3, 8031768 <_vfiprintf_r+0x78>
 803172c:	4629      	mov	r1, r5
 803172e:	4630      	mov	r0, r6
 8031730:	f000 fb68 	bl	8031e04 <__swsetup_r>
 8031734:	b1c0      	cbz	r0, 8031768 <_vfiprintf_r+0x78>
 8031736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031738:	07dc      	lsls	r4, r3, #31
 803173a:	d50e      	bpl.n	803175a <_vfiprintf_r+0x6a>
 803173c:	f04f 30ff 	mov.w	r0, #4294967295
 8031740:	b01d      	add	sp, #116	; 0x74
 8031742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031746:	4b7b      	ldr	r3, [pc, #492]	; (8031934 <_vfiprintf_r+0x244>)
 8031748:	429d      	cmp	r5, r3
 803174a:	d101      	bne.n	8031750 <_vfiprintf_r+0x60>
 803174c:	68b5      	ldr	r5, [r6, #8]
 803174e:	e7df      	b.n	8031710 <_vfiprintf_r+0x20>
 8031750:	4b79      	ldr	r3, [pc, #484]	; (8031938 <_vfiprintf_r+0x248>)
 8031752:	429d      	cmp	r5, r3
 8031754:	bf08      	it	eq
 8031756:	68f5      	ldreq	r5, [r6, #12]
 8031758:	e7da      	b.n	8031710 <_vfiprintf_r+0x20>
 803175a:	89ab      	ldrh	r3, [r5, #12]
 803175c:	0598      	lsls	r0, r3, #22
 803175e:	d4ed      	bmi.n	803173c <_vfiprintf_r+0x4c>
 8031760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031762:	f7ff fe63 	bl	803142c <__retarget_lock_release_recursive>
 8031766:	e7e9      	b.n	803173c <_vfiprintf_r+0x4c>
 8031768:	2300      	movs	r3, #0
 803176a:	9309      	str	r3, [sp, #36]	; 0x24
 803176c:	2320      	movs	r3, #32
 803176e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8031772:	f8cd 800c 	str.w	r8, [sp, #12]
 8031776:	2330      	movs	r3, #48	; 0x30
 8031778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803193c <_vfiprintf_r+0x24c>
 803177c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8031780:	f04f 0901 	mov.w	r9, #1
 8031784:	4623      	mov	r3, r4
 8031786:	469a      	mov	sl, r3
 8031788:	f813 2b01 	ldrb.w	r2, [r3], #1
 803178c:	b10a      	cbz	r2, 8031792 <_vfiprintf_r+0xa2>
 803178e:	2a25      	cmp	r2, #37	; 0x25
 8031790:	d1f9      	bne.n	8031786 <_vfiprintf_r+0x96>
 8031792:	ebba 0b04 	subs.w	fp, sl, r4
 8031796:	d00b      	beq.n	80317b0 <_vfiprintf_r+0xc0>
 8031798:	465b      	mov	r3, fp
 803179a:	4622      	mov	r2, r4
 803179c:	4629      	mov	r1, r5
 803179e:	4630      	mov	r0, r6
 80317a0:	f7ff ff93 	bl	80316ca <__sfputs_r>
 80317a4:	3001      	adds	r0, #1
 80317a6:	f000 80aa 	beq.w	80318fe <_vfiprintf_r+0x20e>
 80317aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80317ac:	445a      	add	r2, fp
 80317ae:	9209      	str	r2, [sp, #36]	; 0x24
 80317b0:	f89a 3000 	ldrb.w	r3, [sl]
 80317b4:	2b00      	cmp	r3, #0
 80317b6:	f000 80a2 	beq.w	80318fe <_vfiprintf_r+0x20e>
 80317ba:	2300      	movs	r3, #0
 80317bc:	f04f 32ff 	mov.w	r2, #4294967295
 80317c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80317c4:	f10a 0a01 	add.w	sl, sl, #1
 80317c8:	9304      	str	r3, [sp, #16]
 80317ca:	9307      	str	r3, [sp, #28]
 80317cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80317d0:	931a      	str	r3, [sp, #104]	; 0x68
 80317d2:	4654      	mov	r4, sl
 80317d4:	2205      	movs	r2, #5
 80317d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80317da:	4858      	ldr	r0, [pc, #352]	; (803193c <_vfiprintf_r+0x24c>)
 80317dc:	f7ce fcf8 	bl	80001d0 <memchr>
 80317e0:	9a04      	ldr	r2, [sp, #16]
 80317e2:	b9d8      	cbnz	r0, 803181c <_vfiprintf_r+0x12c>
 80317e4:	06d1      	lsls	r1, r2, #27
 80317e6:	bf44      	itt	mi
 80317e8:	2320      	movmi	r3, #32
 80317ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80317ee:	0713      	lsls	r3, r2, #28
 80317f0:	bf44      	itt	mi
 80317f2:	232b      	movmi	r3, #43	; 0x2b
 80317f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80317f8:	f89a 3000 	ldrb.w	r3, [sl]
 80317fc:	2b2a      	cmp	r3, #42	; 0x2a
 80317fe:	d015      	beq.n	803182c <_vfiprintf_r+0x13c>
 8031800:	9a07      	ldr	r2, [sp, #28]
 8031802:	4654      	mov	r4, sl
 8031804:	2000      	movs	r0, #0
 8031806:	f04f 0c0a 	mov.w	ip, #10
 803180a:	4621      	mov	r1, r4
 803180c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8031810:	3b30      	subs	r3, #48	; 0x30
 8031812:	2b09      	cmp	r3, #9
 8031814:	d94e      	bls.n	80318b4 <_vfiprintf_r+0x1c4>
 8031816:	b1b0      	cbz	r0, 8031846 <_vfiprintf_r+0x156>
 8031818:	9207      	str	r2, [sp, #28]
 803181a:	e014      	b.n	8031846 <_vfiprintf_r+0x156>
 803181c:	eba0 0308 	sub.w	r3, r0, r8
 8031820:	fa09 f303 	lsl.w	r3, r9, r3
 8031824:	4313      	orrs	r3, r2
 8031826:	9304      	str	r3, [sp, #16]
 8031828:	46a2      	mov	sl, r4
 803182a:	e7d2      	b.n	80317d2 <_vfiprintf_r+0xe2>
 803182c:	9b03      	ldr	r3, [sp, #12]
 803182e:	1d19      	adds	r1, r3, #4
 8031830:	681b      	ldr	r3, [r3, #0]
 8031832:	9103      	str	r1, [sp, #12]
 8031834:	2b00      	cmp	r3, #0
 8031836:	bfbb      	ittet	lt
 8031838:	425b      	neglt	r3, r3
 803183a:	f042 0202 	orrlt.w	r2, r2, #2
 803183e:	9307      	strge	r3, [sp, #28]
 8031840:	9307      	strlt	r3, [sp, #28]
 8031842:	bfb8      	it	lt
 8031844:	9204      	strlt	r2, [sp, #16]
 8031846:	7823      	ldrb	r3, [r4, #0]
 8031848:	2b2e      	cmp	r3, #46	; 0x2e
 803184a:	d10c      	bne.n	8031866 <_vfiprintf_r+0x176>
 803184c:	7863      	ldrb	r3, [r4, #1]
 803184e:	2b2a      	cmp	r3, #42	; 0x2a
 8031850:	d135      	bne.n	80318be <_vfiprintf_r+0x1ce>
 8031852:	9b03      	ldr	r3, [sp, #12]
 8031854:	1d1a      	adds	r2, r3, #4
 8031856:	681b      	ldr	r3, [r3, #0]
 8031858:	9203      	str	r2, [sp, #12]
 803185a:	2b00      	cmp	r3, #0
 803185c:	bfb8      	it	lt
 803185e:	f04f 33ff 	movlt.w	r3, #4294967295
 8031862:	3402      	adds	r4, #2
 8031864:	9305      	str	r3, [sp, #20]
 8031866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803194c <_vfiprintf_r+0x25c>
 803186a:	7821      	ldrb	r1, [r4, #0]
 803186c:	2203      	movs	r2, #3
 803186e:	4650      	mov	r0, sl
 8031870:	f7ce fcae 	bl	80001d0 <memchr>
 8031874:	b140      	cbz	r0, 8031888 <_vfiprintf_r+0x198>
 8031876:	2340      	movs	r3, #64	; 0x40
 8031878:	eba0 000a 	sub.w	r0, r0, sl
 803187c:	fa03 f000 	lsl.w	r0, r3, r0
 8031880:	9b04      	ldr	r3, [sp, #16]
 8031882:	4303      	orrs	r3, r0
 8031884:	3401      	adds	r4, #1
 8031886:	9304      	str	r3, [sp, #16]
 8031888:	f814 1b01 	ldrb.w	r1, [r4], #1
 803188c:	482c      	ldr	r0, [pc, #176]	; (8031940 <_vfiprintf_r+0x250>)
 803188e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031892:	2206      	movs	r2, #6
 8031894:	f7ce fc9c 	bl	80001d0 <memchr>
 8031898:	2800      	cmp	r0, #0
 803189a:	d03f      	beq.n	803191c <_vfiprintf_r+0x22c>
 803189c:	4b29      	ldr	r3, [pc, #164]	; (8031944 <_vfiprintf_r+0x254>)
 803189e:	bb1b      	cbnz	r3, 80318e8 <_vfiprintf_r+0x1f8>
 80318a0:	9b03      	ldr	r3, [sp, #12]
 80318a2:	3307      	adds	r3, #7
 80318a4:	f023 0307 	bic.w	r3, r3, #7
 80318a8:	3308      	adds	r3, #8
 80318aa:	9303      	str	r3, [sp, #12]
 80318ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80318ae:	443b      	add	r3, r7
 80318b0:	9309      	str	r3, [sp, #36]	; 0x24
 80318b2:	e767      	b.n	8031784 <_vfiprintf_r+0x94>
 80318b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80318b8:	460c      	mov	r4, r1
 80318ba:	2001      	movs	r0, #1
 80318bc:	e7a5      	b.n	803180a <_vfiprintf_r+0x11a>
 80318be:	2300      	movs	r3, #0
 80318c0:	3401      	adds	r4, #1
 80318c2:	9305      	str	r3, [sp, #20]
 80318c4:	4619      	mov	r1, r3
 80318c6:	f04f 0c0a 	mov.w	ip, #10
 80318ca:	4620      	mov	r0, r4
 80318cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80318d0:	3a30      	subs	r2, #48	; 0x30
 80318d2:	2a09      	cmp	r2, #9
 80318d4:	d903      	bls.n	80318de <_vfiprintf_r+0x1ee>
 80318d6:	2b00      	cmp	r3, #0
 80318d8:	d0c5      	beq.n	8031866 <_vfiprintf_r+0x176>
 80318da:	9105      	str	r1, [sp, #20]
 80318dc:	e7c3      	b.n	8031866 <_vfiprintf_r+0x176>
 80318de:	fb0c 2101 	mla	r1, ip, r1, r2
 80318e2:	4604      	mov	r4, r0
 80318e4:	2301      	movs	r3, #1
 80318e6:	e7f0      	b.n	80318ca <_vfiprintf_r+0x1da>
 80318e8:	ab03      	add	r3, sp, #12
 80318ea:	9300      	str	r3, [sp, #0]
 80318ec:	462a      	mov	r2, r5
 80318ee:	4b16      	ldr	r3, [pc, #88]	; (8031948 <_vfiprintf_r+0x258>)
 80318f0:	a904      	add	r1, sp, #16
 80318f2:	4630      	mov	r0, r6
 80318f4:	f3af 8000 	nop.w
 80318f8:	4607      	mov	r7, r0
 80318fa:	1c78      	adds	r0, r7, #1
 80318fc:	d1d6      	bne.n	80318ac <_vfiprintf_r+0x1bc>
 80318fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031900:	07d9      	lsls	r1, r3, #31
 8031902:	d405      	bmi.n	8031910 <_vfiprintf_r+0x220>
 8031904:	89ab      	ldrh	r3, [r5, #12]
 8031906:	059a      	lsls	r2, r3, #22
 8031908:	d402      	bmi.n	8031910 <_vfiprintf_r+0x220>
 803190a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803190c:	f7ff fd8e 	bl	803142c <__retarget_lock_release_recursive>
 8031910:	89ab      	ldrh	r3, [r5, #12]
 8031912:	065b      	lsls	r3, r3, #25
 8031914:	f53f af12 	bmi.w	803173c <_vfiprintf_r+0x4c>
 8031918:	9809      	ldr	r0, [sp, #36]	; 0x24
 803191a:	e711      	b.n	8031740 <_vfiprintf_r+0x50>
 803191c:	ab03      	add	r3, sp, #12
 803191e:	9300      	str	r3, [sp, #0]
 8031920:	462a      	mov	r2, r5
 8031922:	4b09      	ldr	r3, [pc, #36]	; (8031948 <_vfiprintf_r+0x258>)
 8031924:	a904      	add	r1, sp, #16
 8031926:	4630      	mov	r0, r6
 8031928:	f000 f880 	bl	8031a2c <_printf_i>
 803192c:	e7e4      	b.n	80318f8 <_vfiprintf_r+0x208>
 803192e:	bf00      	nop
 8031930:	080374d4 	.word	0x080374d4
 8031934:	080374f4 	.word	0x080374f4
 8031938:	080374b4 	.word	0x080374b4
 803193c:	08037480 	.word	0x08037480
 8031940:	0803748a 	.word	0x0803748a
 8031944:	00000000 	.word	0x00000000
 8031948:	080316cb 	.word	0x080316cb
 803194c:	08037486 	.word	0x08037486

08031950 <_printf_common>:
 8031950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8031954:	4616      	mov	r6, r2
 8031956:	4699      	mov	r9, r3
 8031958:	688a      	ldr	r2, [r1, #8]
 803195a:	690b      	ldr	r3, [r1, #16]
 803195c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8031960:	4293      	cmp	r3, r2
 8031962:	bfb8      	it	lt
 8031964:	4613      	movlt	r3, r2
 8031966:	6033      	str	r3, [r6, #0]
 8031968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803196c:	4607      	mov	r7, r0
 803196e:	460c      	mov	r4, r1
 8031970:	b10a      	cbz	r2, 8031976 <_printf_common+0x26>
 8031972:	3301      	adds	r3, #1
 8031974:	6033      	str	r3, [r6, #0]
 8031976:	6823      	ldr	r3, [r4, #0]
 8031978:	0699      	lsls	r1, r3, #26
 803197a:	bf42      	ittt	mi
 803197c:	6833      	ldrmi	r3, [r6, #0]
 803197e:	3302      	addmi	r3, #2
 8031980:	6033      	strmi	r3, [r6, #0]
 8031982:	6825      	ldr	r5, [r4, #0]
 8031984:	f015 0506 	ands.w	r5, r5, #6
 8031988:	d106      	bne.n	8031998 <_printf_common+0x48>
 803198a:	f104 0a19 	add.w	sl, r4, #25
 803198e:	68e3      	ldr	r3, [r4, #12]
 8031990:	6832      	ldr	r2, [r6, #0]
 8031992:	1a9b      	subs	r3, r3, r2
 8031994:	42ab      	cmp	r3, r5
 8031996:	dc26      	bgt.n	80319e6 <_printf_common+0x96>
 8031998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803199c:	1e13      	subs	r3, r2, #0
 803199e:	6822      	ldr	r2, [r4, #0]
 80319a0:	bf18      	it	ne
 80319a2:	2301      	movne	r3, #1
 80319a4:	0692      	lsls	r2, r2, #26
 80319a6:	d42b      	bmi.n	8031a00 <_printf_common+0xb0>
 80319a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80319ac:	4649      	mov	r1, r9
 80319ae:	4638      	mov	r0, r7
 80319b0:	47c0      	blx	r8
 80319b2:	3001      	adds	r0, #1
 80319b4:	d01e      	beq.n	80319f4 <_printf_common+0xa4>
 80319b6:	6823      	ldr	r3, [r4, #0]
 80319b8:	68e5      	ldr	r5, [r4, #12]
 80319ba:	6832      	ldr	r2, [r6, #0]
 80319bc:	f003 0306 	and.w	r3, r3, #6
 80319c0:	2b04      	cmp	r3, #4
 80319c2:	bf08      	it	eq
 80319c4:	1aad      	subeq	r5, r5, r2
 80319c6:	68a3      	ldr	r3, [r4, #8]
 80319c8:	6922      	ldr	r2, [r4, #16]
 80319ca:	bf0c      	ite	eq
 80319cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80319d0:	2500      	movne	r5, #0
 80319d2:	4293      	cmp	r3, r2
 80319d4:	bfc4      	itt	gt
 80319d6:	1a9b      	subgt	r3, r3, r2
 80319d8:	18ed      	addgt	r5, r5, r3
 80319da:	2600      	movs	r6, #0
 80319dc:	341a      	adds	r4, #26
 80319de:	42b5      	cmp	r5, r6
 80319e0:	d11a      	bne.n	8031a18 <_printf_common+0xc8>
 80319e2:	2000      	movs	r0, #0
 80319e4:	e008      	b.n	80319f8 <_printf_common+0xa8>
 80319e6:	2301      	movs	r3, #1
 80319e8:	4652      	mov	r2, sl
 80319ea:	4649      	mov	r1, r9
 80319ec:	4638      	mov	r0, r7
 80319ee:	47c0      	blx	r8
 80319f0:	3001      	adds	r0, #1
 80319f2:	d103      	bne.n	80319fc <_printf_common+0xac>
 80319f4:	f04f 30ff 	mov.w	r0, #4294967295
 80319f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80319fc:	3501      	adds	r5, #1
 80319fe:	e7c6      	b.n	803198e <_printf_common+0x3e>
 8031a00:	18e1      	adds	r1, r4, r3
 8031a02:	1c5a      	adds	r2, r3, #1
 8031a04:	2030      	movs	r0, #48	; 0x30
 8031a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8031a0a:	4422      	add	r2, r4
 8031a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8031a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8031a14:	3302      	adds	r3, #2
 8031a16:	e7c7      	b.n	80319a8 <_printf_common+0x58>
 8031a18:	2301      	movs	r3, #1
 8031a1a:	4622      	mov	r2, r4
 8031a1c:	4649      	mov	r1, r9
 8031a1e:	4638      	mov	r0, r7
 8031a20:	47c0      	blx	r8
 8031a22:	3001      	adds	r0, #1
 8031a24:	d0e6      	beq.n	80319f4 <_printf_common+0xa4>
 8031a26:	3601      	adds	r6, #1
 8031a28:	e7d9      	b.n	80319de <_printf_common+0x8e>
	...

08031a2c <_printf_i>:
 8031a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8031a30:	7e0f      	ldrb	r7, [r1, #24]
 8031a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8031a34:	2f78      	cmp	r7, #120	; 0x78
 8031a36:	4691      	mov	r9, r2
 8031a38:	4680      	mov	r8, r0
 8031a3a:	460c      	mov	r4, r1
 8031a3c:	469a      	mov	sl, r3
 8031a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8031a42:	d807      	bhi.n	8031a54 <_printf_i+0x28>
 8031a44:	2f62      	cmp	r7, #98	; 0x62
 8031a46:	d80a      	bhi.n	8031a5e <_printf_i+0x32>
 8031a48:	2f00      	cmp	r7, #0
 8031a4a:	f000 80d8 	beq.w	8031bfe <_printf_i+0x1d2>
 8031a4e:	2f58      	cmp	r7, #88	; 0x58
 8031a50:	f000 80a3 	beq.w	8031b9a <_printf_i+0x16e>
 8031a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8031a5c:	e03a      	b.n	8031ad4 <_printf_i+0xa8>
 8031a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8031a62:	2b15      	cmp	r3, #21
 8031a64:	d8f6      	bhi.n	8031a54 <_printf_i+0x28>
 8031a66:	a101      	add	r1, pc, #4	; (adr r1, 8031a6c <_printf_i+0x40>)
 8031a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8031a6c:	08031ac5 	.word	0x08031ac5
 8031a70:	08031ad9 	.word	0x08031ad9
 8031a74:	08031a55 	.word	0x08031a55
 8031a78:	08031a55 	.word	0x08031a55
 8031a7c:	08031a55 	.word	0x08031a55
 8031a80:	08031a55 	.word	0x08031a55
 8031a84:	08031ad9 	.word	0x08031ad9
 8031a88:	08031a55 	.word	0x08031a55
 8031a8c:	08031a55 	.word	0x08031a55
 8031a90:	08031a55 	.word	0x08031a55
 8031a94:	08031a55 	.word	0x08031a55
 8031a98:	08031be5 	.word	0x08031be5
 8031a9c:	08031b09 	.word	0x08031b09
 8031aa0:	08031bc7 	.word	0x08031bc7
 8031aa4:	08031a55 	.word	0x08031a55
 8031aa8:	08031a55 	.word	0x08031a55
 8031aac:	08031c07 	.word	0x08031c07
 8031ab0:	08031a55 	.word	0x08031a55
 8031ab4:	08031b09 	.word	0x08031b09
 8031ab8:	08031a55 	.word	0x08031a55
 8031abc:	08031a55 	.word	0x08031a55
 8031ac0:	08031bcf 	.word	0x08031bcf
 8031ac4:	682b      	ldr	r3, [r5, #0]
 8031ac6:	1d1a      	adds	r2, r3, #4
 8031ac8:	681b      	ldr	r3, [r3, #0]
 8031aca:	602a      	str	r2, [r5, #0]
 8031acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8031ad4:	2301      	movs	r3, #1
 8031ad6:	e0a3      	b.n	8031c20 <_printf_i+0x1f4>
 8031ad8:	6820      	ldr	r0, [r4, #0]
 8031ada:	6829      	ldr	r1, [r5, #0]
 8031adc:	0606      	lsls	r6, r0, #24
 8031ade:	f101 0304 	add.w	r3, r1, #4
 8031ae2:	d50a      	bpl.n	8031afa <_printf_i+0xce>
 8031ae4:	680e      	ldr	r6, [r1, #0]
 8031ae6:	602b      	str	r3, [r5, #0]
 8031ae8:	2e00      	cmp	r6, #0
 8031aea:	da03      	bge.n	8031af4 <_printf_i+0xc8>
 8031aec:	232d      	movs	r3, #45	; 0x2d
 8031aee:	4276      	negs	r6, r6
 8031af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031af4:	485e      	ldr	r0, [pc, #376]	; (8031c70 <_printf_i+0x244>)
 8031af6:	230a      	movs	r3, #10
 8031af8:	e019      	b.n	8031b2e <_printf_i+0x102>
 8031afa:	680e      	ldr	r6, [r1, #0]
 8031afc:	602b      	str	r3, [r5, #0]
 8031afe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8031b02:	bf18      	it	ne
 8031b04:	b236      	sxthne	r6, r6
 8031b06:	e7ef      	b.n	8031ae8 <_printf_i+0xbc>
 8031b08:	682b      	ldr	r3, [r5, #0]
 8031b0a:	6820      	ldr	r0, [r4, #0]
 8031b0c:	1d19      	adds	r1, r3, #4
 8031b0e:	6029      	str	r1, [r5, #0]
 8031b10:	0601      	lsls	r1, r0, #24
 8031b12:	d501      	bpl.n	8031b18 <_printf_i+0xec>
 8031b14:	681e      	ldr	r6, [r3, #0]
 8031b16:	e002      	b.n	8031b1e <_printf_i+0xf2>
 8031b18:	0646      	lsls	r6, r0, #25
 8031b1a:	d5fb      	bpl.n	8031b14 <_printf_i+0xe8>
 8031b1c:	881e      	ldrh	r6, [r3, #0]
 8031b1e:	4854      	ldr	r0, [pc, #336]	; (8031c70 <_printf_i+0x244>)
 8031b20:	2f6f      	cmp	r7, #111	; 0x6f
 8031b22:	bf0c      	ite	eq
 8031b24:	2308      	moveq	r3, #8
 8031b26:	230a      	movne	r3, #10
 8031b28:	2100      	movs	r1, #0
 8031b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8031b2e:	6865      	ldr	r5, [r4, #4]
 8031b30:	60a5      	str	r5, [r4, #8]
 8031b32:	2d00      	cmp	r5, #0
 8031b34:	bfa2      	ittt	ge
 8031b36:	6821      	ldrge	r1, [r4, #0]
 8031b38:	f021 0104 	bicge.w	r1, r1, #4
 8031b3c:	6021      	strge	r1, [r4, #0]
 8031b3e:	b90e      	cbnz	r6, 8031b44 <_printf_i+0x118>
 8031b40:	2d00      	cmp	r5, #0
 8031b42:	d04d      	beq.n	8031be0 <_printf_i+0x1b4>
 8031b44:	4615      	mov	r5, r2
 8031b46:	fbb6 f1f3 	udiv	r1, r6, r3
 8031b4a:	fb03 6711 	mls	r7, r3, r1, r6
 8031b4e:	5dc7      	ldrb	r7, [r0, r7]
 8031b50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8031b54:	4637      	mov	r7, r6
 8031b56:	42bb      	cmp	r3, r7
 8031b58:	460e      	mov	r6, r1
 8031b5a:	d9f4      	bls.n	8031b46 <_printf_i+0x11a>
 8031b5c:	2b08      	cmp	r3, #8
 8031b5e:	d10b      	bne.n	8031b78 <_printf_i+0x14c>
 8031b60:	6823      	ldr	r3, [r4, #0]
 8031b62:	07de      	lsls	r6, r3, #31
 8031b64:	d508      	bpl.n	8031b78 <_printf_i+0x14c>
 8031b66:	6923      	ldr	r3, [r4, #16]
 8031b68:	6861      	ldr	r1, [r4, #4]
 8031b6a:	4299      	cmp	r1, r3
 8031b6c:	bfde      	ittt	le
 8031b6e:	2330      	movle	r3, #48	; 0x30
 8031b70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8031b74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8031b78:	1b52      	subs	r2, r2, r5
 8031b7a:	6122      	str	r2, [r4, #16]
 8031b7c:	f8cd a000 	str.w	sl, [sp]
 8031b80:	464b      	mov	r3, r9
 8031b82:	aa03      	add	r2, sp, #12
 8031b84:	4621      	mov	r1, r4
 8031b86:	4640      	mov	r0, r8
 8031b88:	f7ff fee2 	bl	8031950 <_printf_common>
 8031b8c:	3001      	adds	r0, #1
 8031b8e:	d14c      	bne.n	8031c2a <_printf_i+0x1fe>
 8031b90:	f04f 30ff 	mov.w	r0, #4294967295
 8031b94:	b004      	add	sp, #16
 8031b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031b9a:	4835      	ldr	r0, [pc, #212]	; (8031c70 <_printf_i+0x244>)
 8031b9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8031ba0:	6829      	ldr	r1, [r5, #0]
 8031ba2:	6823      	ldr	r3, [r4, #0]
 8031ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8031ba8:	6029      	str	r1, [r5, #0]
 8031baa:	061d      	lsls	r5, r3, #24
 8031bac:	d514      	bpl.n	8031bd8 <_printf_i+0x1ac>
 8031bae:	07df      	lsls	r7, r3, #31
 8031bb0:	bf44      	itt	mi
 8031bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8031bb6:	6023      	strmi	r3, [r4, #0]
 8031bb8:	b91e      	cbnz	r6, 8031bc2 <_printf_i+0x196>
 8031bba:	6823      	ldr	r3, [r4, #0]
 8031bbc:	f023 0320 	bic.w	r3, r3, #32
 8031bc0:	6023      	str	r3, [r4, #0]
 8031bc2:	2310      	movs	r3, #16
 8031bc4:	e7b0      	b.n	8031b28 <_printf_i+0xfc>
 8031bc6:	6823      	ldr	r3, [r4, #0]
 8031bc8:	f043 0320 	orr.w	r3, r3, #32
 8031bcc:	6023      	str	r3, [r4, #0]
 8031bce:	2378      	movs	r3, #120	; 0x78
 8031bd0:	4828      	ldr	r0, [pc, #160]	; (8031c74 <_printf_i+0x248>)
 8031bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8031bd6:	e7e3      	b.n	8031ba0 <_printf_i+0x174>
 8031bd8:	0659      	lsls	r1, r3, #25
 8031bda:	bf48      	it	mi
 8031bdc:	b2b6      	uxthmi	r6, r6
 8031bde:	e7e6      	b.n	8031bae <_printf_i+0x182>
 8031be0:	4615      	mov	r5, r2
 8031be2:	e7bb      	b.n	8031b5c <_printf_i+0x130>
 8031be4:	682b      	ldr	r3, [r5, #0]
 8031be6:	6826      	ldr	r6, [r4, #0]
 8031be8:	6961      	ldr	r1, [r4, #20]
 8031bea:	1d18      	adds	r0, r3, #4
 8031bec:	6028      	str	r0, [r5, #0]
 8031bee:	0635      	lsls	r5, r6, #24
 8031bf0:	681b      	ldr	r3, [r3, #0]
 8031bf2:	d501      	bpl.n	8031bf8 <_printf_i+0x1cc>
 8031bf4:	6019      	str	r1, [r3, #0]
 8031bf6:	e002      	b.n	8031bfe <_printf_i+0x1d2>
 8031bf8:	0670      	lsls	r0, r6, #25
 8031bfa:	d5fb      	bpl.n	8031bf4 <_printf_i+0x1c8>
 8031bfc:	8019      	strh	r1, [r3, #0]
 8031bfe:	2300      	movs	r3, #0
 8031c00:	6123      	str	r3, [r4, #16]
 8031c02:	4615      	mov	r5, r2
 8031c04:	e7ba      	b.n	8031b7c <_printf_i+0x150>
 8031c06:	682b      	ldr	r3, [r5, #0]
 8031c08:	1d1a      	adds	r2, r3, #4
 8031c0a:	602a      	str	r2, [r5, #0]
 8031c0c:	681d      	ldr	r5, [r3, #0]
 8031c0e:	6862      	ldr	r2, [r4, #4]
 8031c10:	2100      	movs	r1, #0
 8031c12:	4628      	mov	r0, r5
 8031c14:	f7ce fadc 	bl	80001d0 <memchr>
 8031c18:	b108      	cbz	r0, 8031c1e <_printf_i+0x1f2>
 8031c1a:	1b40      	subs	r0, r0, r5
 8031c1c:	6060      	str	r0, [r4, #4]
 8031c1e:	6863      	ldr	r3, [r4, #4]
 8031c20:	6123      	str	r3, [r4, #16]
 8031c22:	2300      	movs	r3, #0
 8031c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031c28:	e7a8      	b.n	8031b7c <_printf_i+0x150>
 8031c2a:	6923      	ldr	r3, [r4, #16]
 8031c2c:	462a      	mov	r2, r5
 8031c2e:	4649      	mov	r1, r9
 8031c30:	4640      	mov	r0, r8
 8031c32:	47d0      	blx	sl
 8031c34:	3001      	adds	r0, #1
 8031c36:	d0ab      	beq.n	8031b90 <_printf_i+0x164>
 8031c38:	6823      	ldr	r3, [r4, #0]
 8031c3a:	079b      	lsls	r3, r3, #30
 8031c3c:	d413      	bmi.n	8031c66 <_printf_i+0x23a>
 8031c3e:	68e0      	ldr	r0, [r4, #12]
 8031c40:	9b03      	ldr	r3, [sp, #12]
 8031c42:	4298      	cmp	r0, r3
 8031c44:	bfb8      	it	lt
 8031c46:	4618      	movlt	r0, r3
 8031c48:	e7a4      	b.n	8031b94 <_printf_i+0x168>
 8031c4a:	2301      	movs	r3, #1
 8031c4c:	4632      	mov	r2, r6
 8031c4e:	4649      	mov	r1, r9
 8031c50:	4640      	mov	r0, r8
 8031c52:	47d0      	blx	sl
 8031c54:	3001      	adds	r0, #1
 8031c56:	d09b      	beq.n	8031b90 <_printf_i+0x164>
 8031c58:	3501      	adds	r5, #1
 8031c5a:	68e3      	ldr	r3, [r4, #12]
 8031c5c:	9903      	ldr	r1, [sp, #12]
 8031c5e:	1a5b      	subs	r3, r3, r1
 8031c60:	42ab      	cmp	r3, r5
 8031c62:	dcf2      	bgt.n	8031c4a <_printf_i+0x21e>
 8031c64:	e7eb      	b.n	8031c3e <_printf_i+0x212>
 8031c66:	2500      	movs	r5, #0
 8031c68:	f104 0619 	add.w	r6, r4, #25
 8031c6c:	e7f5      	b.n	8031c5a <_printf_i+0x22e>
 8031c6e:	bf00      	nop
 8031c70:	08037491 	.word	0x08037491
 8031c74:	080374a2 	.word	0x080374a2

08031c78 <_sbrk_r>:
 8031c78:	b538      	push	{r3, r4, r5, lr}
 8031c7a:	4d06      	ldr	r5, [pc, #24]	; (8031c94 <_sbrk_r+0x1c>)
 8031c7c:	2300      	movs	r3, #0
 8031c7e:	4604      	mov	r4, r0
 8031c80:	4608      	mov	r0, r1
 8031c82:	602b      	str	r3, [r5, #0]
 8031c84:	f7d5 fd2c 	bl	80076e0 <_sbrk>
 8031c88:	1c43      	adds	r3, r0, #1
 8031c8a:	d102      	bne.n	8031c92 <_sbrk_r+0x1a>
 8031c8c:	682b      	ldr	r3, [r5, #0]
 8031c8e:	b103      	cbz	r3, 8031c92 <_sbrk_r+0x1a>
 8031c90:	6023      	str	r3, [r4, #0]
 8031c92:	bd38      	pop	{r3, r4, r5, pc}
 8031c94:	20002464 	.word	0x20002464

08031c98 <_raise_r>:
 8031c98:	291f      	cmp	r1, #31
 8031c9a:	b538      	push	{r3, r4, r5, lr}
 8031c9c:	4604      	mov	r4, r0
 8031c9e:	460d      	mov	r5, r1
 8031ca0:	d904      	bls.n	8031cac <_raise_r+0x14>
 8031ca2:	2316      	movs	r3, #22
 8031ca4:	6003      	str	r3, [r0, #0]
 8031ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8031caa:	bd38      	pop	{r3, r4, r5, pc}
 8031cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8031cae:	b112      	cbz	r2, 8031cb6 <_raise_r+0x1e>
 8031cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8031cb4:	b94b      	cbnz	r3, 8031cca <_raise_r+0x32>
 8031cb6:	4620      	mov	r0, r4
 8031cb8:	f000 f830 	bl	8031d1c <_getpid_r>
 8031cbc:	462a      	mov	r2, r5
 8031cbe:	4601      	mov	r1, r0
 8031cc0:	4620      	mov	r0, r4
 8031cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8031cc6:	f000 b817 	b.w	8031cf8 <_kill_r>
 8031cca:	2b01      	cmp	r3, #1
 8031ccc:	d00a      	beq.n	8031ce4 <_raise_r+0x4c>
 8031cce:	1c59      	adds	r1, r3, #1
 8031cd0:	d103      	bne.n	8031cda <_raise_r+0x42>
 8031cd2:	2316      	movs	r3, #22
 8031cd4:	6003      	str	r3, [r0, #0]
 8031cd6:	2001      	movs	r0, #1
 8031cd8:	e7e7      	b.n	8031caa <_raise_r+0x12>
 8031cda:	2400      	movs	r4, #0
 8031cdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8031ce0:	4628      	mov	r0, r5
 8031ce2:	4798      	blx	r3
 8031ce4:	2000      	movs	r0, #0
 8031ce6:	e7e0      	b.n	8031caa <_raise_r+0x12>

08031ce8 <raise>:
 8031ce8:	4b02      	ldr	r3, [pc, #8]	; (8031cf4 <raise+0xc>)
 8031cea:	4601      	mov	r1, r0
 8031cec:	6818      	ldr	r0, [r3, #0]
 8031cee:	f7ff bfd3 	b.w	8031c98 <_raise_r>
 8031cf2:	bf00      	nop
 8031cf4:	200006dc 	.word	0x200006dc

08031cf8 <_kill_r>:
 8031cf8:	b538      	push	{r3, r4, r5, lr}
 8031cfa:	4d07      	ldr	r5, [pc, #28]	; (8031d18 <_kill_r+0x20>)
 8031cfc:	2300      	movs	r3, #0
 8031cfe:	4604      	mov	r4, r0
 8031d00:	4608      	mov	r0, r1
 8031d02:	4611      	mov	r1, r2
 8031d04:	602b      	str	r3, [r5, #0]
 8031d06:	f7d5 fc63 	bl	80075d0 <_kill>
 8031d0a:	1c43      	adds	r3, r0, #1
 8031d0c:	d102      	bne.n	8031d14 <_kill_r+0x1c>
 8031d0e:	682b      	ldr	r3, [r5, #0]
 8031d10:	b103      	cbz	r3, 8031d14 <_kill_r+0x1c>
 8031d12:	6023      	str	r3, [r4, #0]
 8031d14:	bd38      	pop	{r3, r4, r5, pc}
 8031d16:	bf00      	nop
 8031d18:	20002464 	.word	0x20002464

08031d1c <_getpid_r>:
 8031d1c:	f7d5 bc50 	b.w	80075c0 <_getpid>

08031d20 <_vsiprintf_r>:
 8031d20:	b500      	push	{lr}
 8031d22:	b09b      	sub	sp, #108	; 0x6c
 8031d24:	9100      	str	r1, [sp, #0]
 8031d26:	9104      	str	r1, [sp, #16]
 8031d28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8031d2c:	9105      	str	r1, [sp, #20]
 8031d2e:	9102      	str	r1, [sp, #8]
 8031d30:	4905      	ldr	r1, [pc, #20]	; (8031d48 <_vsiprintf_r+0x28>)
 8031d32:	9103      	str	r1, [sp, #12]
 8031d34:	4669      	mov	r1, sp
 8031d36:	f000 fb85 	bl	8032444 <_svfiprintf_r>
 8031d3a:	9b00      	ldr	r3, [sp, #0]
 8031d3c:	2200      	movs	r2, #0
 8031d3e:	701a      	strb	r2, [r3, #0]
 8031d40:	b01b      	add	sp, #108	; 0x6c
 8031d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8031d46:	bf00      	nop
 8031d48:	ffff0208 	.word	0xffff0208

08031d4c <vsiprintf>:
 8031d4c:	4613      	mov	r3, r2
 8031d4e:	460a      	mov	r2, r1
 8031d50:	4601      	mov	r1, r0
 8031d52:	4802      	ldr	r0, [pc, #8]	; (8031d5c <vsiprintf+0x10>)
 8031d54:	6800      	ldr	r0, [r0, #0]
 8031d56:	f7ff bfe3 	b.w	8031d20 <_vsiprintf_r>
 8031d5a:	bf00      	nop
 8031d5c:	200006dc 	.word	0x200006dc

08031d60 <__swbuf_r>:
 8031d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031d62:	460e      	mov	r6, r1
 8031d64:	4614      	mov	r4, r2
 8031d66:	4605      	mov	r5, r0
 8031d68:	b118      	cbz	r0, 8031d72 <__swbuf_r+0x12>
 8031d6a:	6983      	ldr	r3, [r0, #24]
 8031d6c:	b90b      	cbnz	r3, 8031d72 <__swbuf_r+0x12>
 8031d6e:	f000 f9d1 	bl	8032114 <__sinit>
 8031d72:	4b21      	ldr	r3, [pc, #132]	; (8031df8 <__swbuf_r+0x98>)
 8031d74:	429c      	cmp	r4, r3
 8031d76:	d12b      	bne.n	8031dd0 <__swbuf_r+0x70>
 8031d78:	686c      	ldr	r4, [r5, #4]
 8031d7a:	69a3      	ldr	r3, [r4, #24]
 8031d7c:	60a3      	str	r3, [r4, #8]
 8031d7e:	89a3      	ldrh	r3, [r4, #12]
 8031d80:	071a      	lsls	r2, r3, #28
 8031d82:	d52f      	bpl.n	8031de4 <__swbuf_r+0x84>
 8031d84:	6923      	ldr	r3, [r4, #16]
 8031d86:	b36b      	cbz	r3, 8031de4 <__swbuf_r+0x84>
 8031d88:	6923      	ldr	r3, [r4, #16]
 8031d8a:	6820      	ldr	r0, [r4, #0]
 8031d8c:	1ac0      	subs	r0, r0, r3
 8031d8e:	6963      	ldr	r3, [r4, #20]
 8031d90:	b2f6      	uxtb	r6, r6
 8031d92:	4283      	cmp	r3, r0
 8031d94:	4637      	mov	r7, r6
 8031d96:	dc04      	bgt.n	8031da2 <__swbuf_r+0x42>
 8031d98:	4621      	mov	r1, r4
 8031d9a:	4628      	mov	r0, r5
 8031d9c:	f000 f926 	bl	8031fec <_fflush_r>
 8031da0:	bb30      	cbnz	r0, 8031df0 <__swbuf_r+0x90>
 8031da2:	68a3      	ldr	r3, [r4, #8]
 8031da4:	3b01      	subs	r3, #1
 8031da6:	60a3      	str	r3, [r4, #8]
 8031da8:	6823      	ldr	r3, [r4, #0]
 8031daa:	1c5a      	adds	r2, r3, #1
 8031dac:	6022      	str	r2, [r4, #0]
 8031dae:	701e      	strb	r6, [r3, #0]
 8031db0:	6963      	ldr	r3, [r4, #20]
 8031db2:	3001      	adds	r0, #1
 8031db4:	4283      	cmp	r3, r0
 8031db6:	d004      	beq.n	8031dc2 <__swbuf_r+0x62>
 8031db8:	89a3      	ldrh	r3, [r4, #12]
 8031dba:	07db      	lsls	r3, r3, #31
 8031dbc:	d506      	bpl.n	8031dcc <__swbuf_r+0x6c>
 8031dbe:	2e0a      	cmp	r6, #10
 8031dc0:	d104      	bne.n	8031dcc <__swbuf_r+0x6c>
 8031dc2:	4621      	mov	r1, r4
 8031dc4:	4628      	mov	r0, r5
 8031dc6:	f000 f911 	bl	8031fec <_fflush_r>
 8031dca:	b988      	cbnz	r0, 8031df0 <__swbuf_r+0x90>
 8031dcc:	4638      	mov	r0, r7
 8031dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8031dd0:	4b0a      	ldr	r3, [pc, #40]	; (8031dfc <__swbuf_r+0x9c>)
 8031dd2:	429c      	cmp	r4, r3
 8031dd4:	d101      	bne.n	8031dda <__swbuf_r+0x7a>
 8031dd6:	68ac      	ldr	r4, [r5, #8]
 8031dd8:	e7cf      	b.n	8031d7a <__swbuf_r+0x1a>
 8031dda:	4b09      	ldr	r3, [pc, #36]	; (8031e00 <__swbuf_r+0xa0>)
 8031ddc:	429c      	cmp	r4, r3
 8031dde:	bf08      	it	eq
 8031de0:	68ec      	ldreq	r4, [r5, #12]
 8031de2:	e7ca      	b.n	8031d7a <__swbuf_r+0x1a>
 8031de4:	4621      	mov	r1, r4
 8031de6:	4628      	mov	r0, r5
 8031de8:	f000 f80c 	bl	8031e04 <__swsetup_r>
 8031dec:	2800      	cmp	r0, #0
 8031dee:	d0cb      	beq.n	8031d88 <__swbuf_r+0x28>
 8031df0:	f04f 37ff 	mov.w	r7, #4294967295
 8031df4:	e7ea      	b.n	8031dcc <__swbuf_r+0x6c>
 8031df6:	bf00      	nop
 8031df8:	080374d4 	.word	0x080374d4
 8031dfc:	080374f4 	.word	0x080374f4
 8031e00:	080374b4 	.word	0x080374b4

08031e04 <__swsetup_r>:
 8031e04:	4b32      	ldr	r3, [pc, #200]	; (8031ed0 <__swsetup_r+0xcc>)
 8031e06:	b570      	push	{r4, r5, r6, lr}
 8031e08:	681d      	ldr	r5, [r3, #0]
 8031e0a:	4606      	mov	r6, r0
 8031e0c:	460c      	mov	r4, r1
 8031e0e:	b125      	cbz	r5, 8031e1a <__swsetup_r+0x16>
 8031e10:	69ab      	ldr	r3, [r5, #24]
 8031e12:	b913      	cbnz	r3, 8031e1a <__swsetup_r+0x16>
 8031e14:	4628      	mov	r0, r5
 8031e16:	f000 f97d 	bl	8032114 <__sinit>
 8031e1a:	4b2e      	ldr	r3, [pc, #184]	; (8031ed4 <__swsetup_r+0xd0>)
 8031e1c:	429c      	cmp	r4, r3
 8031e1e:	d10f      	bne.n	8031e40 <__swsetup_r+0x3c>
 8031e20:	686c      	ldr	r4, [r5, #4]
 8031e22:	89a3      	ldrh	r3, [r4, #12]
 8031e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8031e28:	0719      	lsls	r1, r3, #28
 8031e2a:	d42c      	bmi.n	8031e86 <__swsetup_r+0x82>
 8031e2c:	06dd      	lsls	r5, r3, #27
 8031e2e:	d411      	bmi.n	8031e54 <__swsetup_r+0x50>
 8031e30:	2309      	movs	r3, #9
 8031e32:	6033      	str	r3, [r6, #0]
 8031e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8031e38:	81a3      	strh	r3, [r4, #12]
 8031e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8031e3e:	e03e      	b.n	8031ebe <__swsetup_r+0xba>
 8031e40:	4b25      	ldr	r3, [pc, #148]	; (8031ed8 <__swsetup_r+0xd4>)
 8031e42:	429c      	cmp	r4, r3
 8031e44:	d101      	bne.n	8031e4a <__swsetup_r+0x46>
 8031e46:	68ac      	ldr	r4, [r5, #8]
 8031e48:	e7eb      	b.n	8031e22 <__swsetup_r+0x1e>
 8031e4a:	4b24      	ldr	r3, [pc, #144]	; (8031edc <__swsetup_r+0xd8>)
 8031e4c:	429c      	cmp	r4, r3
 8031e4e:	bf08      	it	eq
 8031e50:	68ec      	ldreq	r4, [r5, #12]
 8031e52:	e7e6      	b.n	8031e22 <__swsetup_r+0x1e>
 8031e54:	0758      	lsls	r0, r3, #29
 8031e56:	d512      	bpl.n	8031e7e <__swsetup_r+0x7a>
 8031e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8031e5a:	b141      	cbz	r1, 8031e6e <__swsetup_r+0x6a>
 8031e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8031e60:	4299      	cmp	r1, r3
 8031e62:	d002      	beq.n	8031e6a <__swsetup_r+0x66>
 8031e64:	4630      	mov	r0, r6
 8031e66:	f7ff fb39 	bl	80314dc <_free_r>
 8031e6a:	2300      	movs	r3, #0
 8031e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8031e6e:	89a3      	ldrh	r3, [r4, #12]
 8031e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8031e74:	81a3      	strh	r3, [r4, #12]
 8031e76:	2300      	movs	r3, #0
 8031e78:	6063      	str	r3, [r4, #4]
 8031e7a:	6923      	ldr	r3, [r4, #16]
 8031e7c:	6023      	str	r3, [r4, #0]
 8031e7e:	89a3      	ldrh	r3, [r4, #12]
 8031e80:	f043 0308 	orr.w	r3, r3, #8
 8031e84:	81a3      	strh	r3, [r4, #12]
 8031e86:	6923      	ldr	r3, [r4, #16]
 8031e88:	b94b      	cbnz	r3, 8031e9e <__swsetup_r+0x9a>
 8031e8a:	89a3      	ldrh	r3, [r4, #12]
 8031e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8031e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8031e94:	d003      	beq.n	8031e9e <__swsetup_r+0x9a>
 8031e96:	4621      	mov	r1, r4
 8031e98:	4630      	mov	r0, r6
 8031e9a:	f000 f9fd 	bl	8032298 <__smakebuf_r>
 8031e9e:	89a0      	ldrh	r0, [r4, #12]
 8031ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8031ea4:	f010 0301 	ands.w	r3, r0, #1
 8031ea8:	d00a      	beq.n	8031ec0 <__swsetup_r+0xbc>
 8031eaa:	2300      	movs	r3, #0
 8031eac:	60a3      	str	r3, [r4, #8]
 8031eae:	6963      	ldr	r3, [r4, #20]
 8031eb0:	425b      	negs	r3, r3
 8031eb2:	61a3      	str	r3, [r4, #24]
 8031eb4:	6923      	ldr	r3, [r4, #16]
 8031eb6:	b943      	cbnz	r3, 8031eca <__swsetup_r+0xc6>
 8031eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8031ebc:	d1ba      	bne.n	8031e34 <__swsetup_r+0x30>
 8031ebe:	bd70      	pop	{r4, r5, r6, pc}
 8031ec0:	0781      	lsls	r1, r0, #30
 8031ec2:	bf58      	it	pl
 8031ec4:	6963      	ldrpl	r3, [r4, #20]
 8031ec6:	60a3      	str	r3, [r4, #8]
 8031ec8:	e7f4      	b.n	8031eb4 <__swsetup_r+0xb0>
 8031eca:	2000      	movs	r0, #0
 8031ecc:	e7f7      	b.n	8031ebe <__swsetup_r+0xba>
 8031ece:	bf00      	nop
 8031ed0:	200006dc 	.word	0x200006dc
 8031ed4:	080374d4 	.word	0x080374d4
 8031ed8:	080374f4 	.word	0x080374f4
 8031edc:	080374b4 	.word	0x080374b4

08031ee0 <__sflush_r>:
 8031ee0:	898a      	ldrh	r2, [r1, #12]
 8031ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031ee6:	4605      	mov	r5, r0
 8031ee8:	0710      	lsls	r0, r2, #28
 8031eea:	460c      	mov	r4, r1
 8031eec:	d458      	bmi.n	8031fa0 <__sflush_r+0xc0>
 8031eee:	684b      	ldr	r3, [r1, #4]
 8031ef0:	2b00      	cmp	r3, #0
 8031ef2:	dc05      	bgt.n	8031f00 <__sflush_r+0x20>
 8031ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8031ef6:	2b00      	cmp	r3, #0
 8031ef8:	dc02      	bgt.n	8031f00 <__sflush_r+0x20>
 8031efa:	2000      	movs	r0, #0
 8031efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8031f02:	2e00      	cmp	r6, #0
 8031f04:	d0f9      	beq.n	8031efa <__sflush_r+0x1a>
 8031f06:	2300      	movs	r3, #0
 8031f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8031f0c:	682f      	ldr	r7, [r5, #0]
 8031f0e:	602b      	str	r3, [r5, #0]
 8031f10:	d032      	beq.n	8031f78 <__sflush_r+0x98>
 8031f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8031f14:	89a3      	ldrh	r3, [r4, #12]
 8031f16:	075a      	lsls	r2, r3, #29
 8031f18:	d505      	bpl.n	8031f26 <__sflush_r+0x46>
 8031f1a:	6863      	ldr	r3, [r4, #4]
 8031f1c:	1ac0      	subs	r0, r0, r3
 8031f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8031f20:	b10b      	cbz	r3, 8031f26 <__sflush_r+0x46>
 8031f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8031f24:	1ac0      	subs	r0, r0, r3
 8031f26:	2300      	movs	r3, #0
 8031f28:	4602      	mov	r2, r0
 8031f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8031f2c:	6a21      	ldr	r1, [r4, #32]
 8031f2e:	4628      	mov	r0, r5
 8031f30:	47b0      	blx	r6
 8031f32:	1c43      	adds	r3, r0, #1
 8031f34:	89a3      	ldrh	r3, [r4, #12]
 8031f36:	d106      	bne.n	8031f46 <__sflush_r+0x66>
 8031f38:	6829      	ldr	r1, [r5, #0]
 8031f3a:	291d      	cmp	r1, #29
 8031f3c:	d82c      	bhi.n	8031f98 <__sflush_r+0xb8>
 8031f3e:	4a2a      	ldr	r2, [pc, #168]	; (8031fe8 <__sflush_r+0x108>)
 8031f40:	40ca      	lsrs	r2, r1
 8031f42:	07d6      	lsls	r6, r2, #31
 8031f44:	d528      	bpl.n	8031f98 <__sflush_r+0xb8>
 8031f46:	2200      	movs	r2, #0
 8031f48:	6062      	str	r2, [r4, #4]
 8031f4a:	04d9      	lsls	r1, r3, #19
 8031f4c:	6922      	ldr	r2, [r4, #16]
 8031f4e:	6022      	str	r2, [r4, #0]
 8031f50:	d504      	bpl.n	8031f5c <__sflush_r+0x7c>
 8031f52:	1c42      	adds	r2, r0, #1
 8031f54:	d101      	bne.n	8031f5a <__sflush_r+0x7a>
 8031f56:	682b      	ldr	r3, [r5, #0]
 8031f58:	b903      	cbnz	r3, 8031f5c <__sflush_r+0x7c>
 8031f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8031f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8031f5e:	602f      	str	r7, [r5, #0]
 8031f60:	2900      	cmp	r1, #0
 8031f62:	d0ca      	beq.n	8031efa <__sflush_r+0x1a>
 8031f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8031f68:	4299      	cmp	r1, r3
 8031f6a:	d002      	beq.n	8031f72 <__sflush_r+0x92>
 8031f6c:	4628      	mov	r0, r5
 8031f6e:	f7ff fab5 	bl	80314dc <_free_r>
 8031f72:	2000      	movs	r0, #0
 8031f74:	6360      	str	r0, [r4, #52]	; 0x34
 8031f76:	e7c1      	b.n	8031efc <__sflush_r+0x1c>
 8031f78:	6a21      	ldr	r1, [r4, #32]
 8031f7a:	2301      	movs	r3, #1
 8031f7c:	4628      	mov	r0, r5
 8031f7e:	47b0      	blx	r6
 8031f80:	1c41      	adds	r1, r0, #1
 8031f82:	d1c7      	bne.n	8031f14 <__sflush_r+0x34>
 8031f84:	682b      	ldr	r3, [r5, #0]
 8031f86:	2b00      	cmp	r3, #0
 8031f88:	d0c4      	beq.n	8031f14 <__sflush_r+0x34>
 8031f8a:	2b1d      	cmp	r3, #29
 8031f8c:	d001      	beq.n	8031f92 <__sflush_r+0xb2>
 8031f8e:	2b16      	cmp	r3, #22
 8031f90:	d101      	bne.n	8031f96 <__sflush_r+0xb6>
 8031f92:	602f      	str	r7, [r5, #0]
 8031f94:	e7b1      	b.n	8031efa <__sflush_r+0x1a>
 8031f96:	89a3      	ldrh	r3, [r4, #12]
 8031f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031f9c:	81a3      	strh	r3, [r4, #12]
 8031f9e:	e7ad      	b.n	8031efc <__sflush_r+0x1c>
 8031fa0:	690f      	ldr	r7, [r1, #16]
 8031fa2:	2f00      	cmp	r7, #0
 8031fa4:	d0a9      	beq.n	8031efa <__sflush_r+0x1a>
 8031fa6:	0793      	lsls	r3, r2, #30
 8031fa8:	680e      	ldr	r6, [r1, #0]
 8031faa:	bf08      	it	eq
 8031fac:	694b      	ldreq	r3, [r1, #20]
 8031fae:	600f      	str	r7, [r1, #0]
 8031fb0:	bf18      	it	ne
 8031fb2:	2300      	movne	r3, #0
 8031fb4:	eba6 0807 	sub.w	r8, r6, r7
 8031fb8:	608b      	str	r3, [r1, #8]
 8031fba:	f1b8 0f00 	cmp.w	r8, #0
 8031fbe:	dd9c      	ble.n	8031efa <__sflush_r+0x1a>
 8031fc0:	6a21      	ldr	r1, [r4, #32]
 8031fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8031fc4:	4643      	mov	r3, r8
 8031fc6:	463a      	mov	r2, r7
 8031fc8:	4628      	mov	r0, r5
 8031fca:	47b0      	blx	r6
 8031fcc:	2800      	cmp	r0, #0
 8031fce:	dc06      	bgt.n	8031fde <__sflush_r+0xfe>
 8031fd0:	89a3      	ldrh	r3, [r4, #12]
 8031fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031fd6:	81a3      	strh	r3, [r4, #12]
 8031fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8031fdc:	e78e      	b.n	8031efc <__sflush_r+0x1c>
 8031fde:	4407      	add	r7, r0
 8031fe0:	eba8 0800 	sub.w	r8, r8, r0
 8031fe4:	e7e9      	b.n	8031fba <__sflush_r+0xda>
 8031fe6:	bf00      	nop
 8031fe8:	20400001 	.word	0x20400001

08031fec <_fflush_r>:
 8031fec:	b538      	push	{r3, r4, r5, lr}
 8031fee:	690b      	ldr	r3, [r1, #16]
 8031ff0:	4605      	mov	r5, r0
 8031ff2:	460c      	mov	r4, r1
 8031ff4:	b913      	cbnz	r3, 8031ffc <_fflush_r+0x10>
 8031ff6:	2500      	movs	r5, #0
 8031ff8:	4628      	mov	r0, r5
 8031ffa:	bd38      	pop	{r3, r4, r5, pc}
 8031ffc:	b118      	cbz	r0, 8032006 <_fflush_r+0x1a>
 8031ffe:	6983      	ldr	r3, [r0, #24]
 8032000:	b90b      	cbnz	r3, 8032006 <_fflush_r+0x1a>
 8032002:	f000 f887 	bl	8032114 <__sinit>
 8032006:	4b14      	ldr	r3, [pc, #80]	; (8032058 <_fflush_r+0x6c>)
 8032008:	429c      	cmp	r4, r3
 803200a:	d11b      	bne.n	8032044 <_fflush_r+0x58>
 803200c:	686c      	ldr	r4, [r5, #4]
 803200e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032012:	2b00      	cmp	r3, #0
 8032014:	d0ef      	beq.n	8031ff6 <_fflush_r+0xa>
 8032016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8032018:	07d0      	lsls	r0, r2, #31
 803201a:	d404      	bmi.n	8032026 <_fflush_r+0x3a>
 803201c:	0599      	lsls	r1, r3, #22
 803201e:	d402      	bmi.n	8032026 <_fflush_r+0x3a>
 8032020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8032022:	f7ff fa02 	bl	803142a <__retarget_lock_acquire_recursive>
 8032026:	4628      	mov	r0, r5
 8032028:	4621      	mov	r1, r4
 803202a:	f7ff ff59 	bl	8031ee0 <__sflush_r>
 803202e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8032030:	07da      	lsls	r2, r3, #31
 8032032:	4605      	mov	r5, r0
 8032034:	d4e0      	bmi.n	8031ff8 <_fflush_r+0xc>
 8032036:	89a3      	ldrh	r3, [r4, #12]
 8032038:	059b      	lsls	r3, r3, #22
 803203a:	d4dd      	bmi.n	8031ff8 <_fflush_r+0xc>
 803203c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803203e:	f7ff f9f5 	bl	803142c <__retarget_lock_release_recursive>
 8032042:	e7d9      	b.n	8031ff8 <_fflush_r+0xc>
 8032044:	4b05      	ldr	r3, [pc, #20]	; (803205c <_fflush_r+0x70>)
 8032046:	429c      	cmp	r4, r3
 8032048:	d101      	bne.n	803204e <_fflush_r+0x62>
 803204a:	68ac      	ldr	r4, [r5, #8]
 803204c:	e7df      	b.n	803200e <_fflush_r+0x22>
 803204e:	4b04      	ldr	r3, [pc, #16]	; (8032060 <_fflush_r+0x74>)
 8032050:	429c      	cmp	r4, r3
 8032052:	bf08      	it	eq
 8032054:	68ec      	ldreq	r4, [r5, #12]
 8032056:	e7da      	b.n	803200e <_fflush_r+0x22>
 8032058:	080374d4 	.word	0x080374d4
 803205c:	080374f4 	.word	0x080374f4
 8032060:	080374b4 	.word	0x080374b4

08032064 <std>:
 8032064:	2300      	movs	r3, #0
 8032066:	b510      	push	{r4, lr}
 8032068:	4604      	mov	r4, r0
 803206a:	e9c0 3300 	strd	r3, r3, [r0]
 803206e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8032072:	6083      	str	r3, [r0, #8]
 8032074:	8181      	strh	r1, [r0, #12]
 8032076:	6643      	str	r3, [r0, #100]	; 0x64
 8032078:	81c2      	strh	r2, [r0, #14]
 803207a:	6183      	str	r3, [r0, #24]
 803207c:	4619      	mov	r1, r3
 803207e:	2208      	movs	r2, #8
 8032080:	305c      	adds	r0, #92	; 0x5c
 8032082:	f7ff fa0d 	bl	80314a0 <memset>
 8032086:	4b05      	ldr	r3, [pc, #20]	; (803209c <std+0x38>)
 8032088:	6263      	str	r3, [r4, #36]	; 0x24
 803208a:	4b05      	ldr	r3, [pc, #20]	; (80320a0 <std+0x3c>)
 803208c:	62a3      	str	r3, [r4, #40]	; 0x28
 803208e:	4b05      	ldr	r3, [pc, #20]	; (80320a4 <std+0x40>)
 8032090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8032092:	4b05      	ldr	r3, [pc, #20]	; (80320a8 <std+0x44>)
 8032094:	6224      	str	r4, [r4, #32]
 8032096:	6323      	str	r3, [r4, #48]	; 0x30
 8032098:	bd10      	pop	{r4, pc}
 803209a:	bf00      	nop
 803209c:	08032645 	.word	0x08032645
 80320a0:	08032667 	.word	0x08032667
 80320a4:	0803269f 	.word	0x0803269f
 80320a8:	080326c3 	.word	0x080326c3

080320ac <_cleanup_r>:
 80320ac:	4901      	ldr	r1, [pc, #4]	; (80320b4 <_cleanup_r+0x8>)
 80320ae:	f000 b8af 	b.w	8032210 <_fwalk_reent>
 80320b2:	bf00      	nop
 80320b4:	08031fed 	.word	0x08031fed

080320b8 <__sfmoreglue>:
 80320b8:	b570      	push	{r4, r5, r6, lr}
 80320ba:	2268      	movs	r2, #104	; 0x68
 80320bc:	1e4d      	subs	r5, r1, #1
 80320be:	4355      	muls	r5, r2
 80320c0:	460e      	mov	r6, r1
 80320c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80320c6:	f7ff fa75 	bl	80315b4 <_malloc_r>
 80320ca:	4604      	mov	r4, r0
 80320cc:	b140      	cbz	r0, 80320e0 <__sfmoreglue+0x28>
 80320ce:	2100      	movs	r1, #0
 80320d0:	e9c0 1600 	strd	r1, r6, [r0]
 80320d4:	300c      	adds	r0, #12
 80320d6:	60a0      	str	r0, [r4, #8]
 80320d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80320dc:	f7ff f9e0 	bl	80314a0 <memset>
 80320e0:	4620      	mov	r0, r4
 80320e2:	bd70      	pop	{r4, r5, r6, pc}

080320e4 <__sfp_lock_acquire>:
 80320e4:	4801      	ldr	r0, [pc, #4]	; (80320ec <__sfp_lock_acquire+0x8>)
 80320e6:	f7ff b9a0 	b.w	803142a <__retarget_lock_acquire_recursive>
 80320ea:	bf00      	nop
 80320ec:	20002459 	.word	0x20002459

080320f0 <__sfp_lock_release>:
 80320f0:	4801      	ldr	r0, [pc, #4]	; (80320f8 <__sfp_lock_release+0x8>)
 80320f2:	f7ff b99b 	b.w	803142c <__retarget_lock_release_recursive>
 80320f6:	bf00      	nop
 80320f8:	20002459 	.word	0x20002459

080320fc <__sinit_lock_acquire>:
 80320fc:	4801      	ldr	r0, [pc, #4]	; (8032104 <__sinit_lock_acquire+0x8>)
 80320fe:	f7ff b994 	b.w	803142a <__retarget_lock_acquire_recursive>
 8032102:	bf00      	nop
 8032104:	2000245a 	.word	0x2000245a

08032108 <__sinit_lock_release>:
 8032108:	4801      	ldr	r0, [pc, #4]	; (8032110 <__sinit_lock_release+0x8>)
 803210a:	f7ff b98f 	b.w	803142c <__retarget_lock_release_recursive>
 803210e:	bf00      	nop
 8032110:	2000245a 	.word	0x2000245a

08032114 <__sinit>:
 8032114:	b510      	push	{r4, lr}
 8032116:	4604      	mov	r4, r0
 8032118:	f7ff fff0 	bl	80320fc <__sinit_lock_acquire>
 803211c:	69a3      	ldr	r3, [r4, #24]
 803211e:	b11b      	cbz	r3, 8032128 <__sinit+0x14>
 8032120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8032124:	f7ff bff0 	b.w	8032108 <__sinit_lock_release>
 8032128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803212c:	6523      	str	r3, [r4, #80]	; 0x50
 803212e:	4b13      	ldr	r3, [pc, #76]	; (803217c <__sinit+0x68>)
 8032130:	4a13      	ldr	r2, [pc, #76]	; (8032180 <__sinit+0x6c>)
 8032132:	681b      	ldr	r3, [r3, #0]
 8032134:	62a2      	str	r2, [r4, #40]	; 0x28
 8032136:	42a3      	cmp	r3, r4
 8032138:	bf04      	itt	eq
 803213a:	2301      	moveq	r3, #1
 803213c:	61a3      	streq	r3, [r4, #24]
 803213e:	4620      	mov	r0, r4
 8032140:	f000 f820 	bl	8032184 <__sfp>
 8032144:	6060      	str	r0, [r4, #4]
 8032146:	4620      	mov	r0, r4
 8032148:	f000 f81c 	bl	8032184 <__sfp>
 803214c:	60a0      	str	r0, [r4, #8]
 803214e:	4620      	mov	r0, r4
 8032150:	f000 f818 	bl	8032184 <__sfp>
 8032154:	2200      	movs	r2, #0
 8032156:	60e0      	str	r0, [r4, #12]
 8032158:	2104      	movs	r1, #4
 803215a:	6860      	ldr	r0, [r4, #4]
 803215c:	f7ff ff82 	bl	8032064 <std>
 8032160:	68a0      	ldr	r0, [r4, #8]
 8032162:	2201      	movs	r2, #1
 8032164:	2109      	movs	r1, #9
 8032166:	f7ff ff7d 	bl	8032064 <std>
 803216a:	68e0      	ldr	r0, [r4, #12]
 803216c:	2202      	movs	r2, #2
 803216e:	2112      	movs	r1, #18
 8032170:	f7ff ff78 	bl	8032064 <std>
 8032174:	2301      	movs	r3, #1
 8032176:	61a3      	str	r3, [r4, #24]
 8032178:	e7d2      	b.n	8032120 <__sinit+0xc>
 803217a:	bf00      	nop
 803217c:	0803747c 	.word	0x0803747c
 8032180:	080320ad 	.word	0x080320ad

08032184 <__sfp>:
 8032184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032186:	4607      	mov	r7, r0
 8032188:	f7ff ffac 	bl	80320e4 <__sfp_lock_acquire>
 803218c:	4b1e      	ldr	r3, [pc, #120]	; (8032208 <__sfp+0x84>)
 803218e:	681e      	ldr	r6, [r3, #0]
 8032190:	69b3      	ldr	r3, [r6, #24]
 8032192:	b913      	cbnz	r3, 803219a <__sfp+0x16>
 8032194:	4630      	mov	r0, r6
 8032196:	f7ff ffbd 	bl	8032114 <__sinit>
 803219a:	3648      	adds	r6, #72	; 0x48
 803219c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80321a0:	3b01      	subs	r3, #1
 80321a2:	d503      	bpl.n	80321ac <__sfp+0x28>
 80321a4:	6833      	ldr	r3, [r6, #0]
 80321a6:	b30b      	cbz	r3, 80321ec <__sfp+0x68>
 80321a8:	6836      	ldr	r6, [r6, #0]
 80321aa:	e7f7      	b.n	803219c <__sfp+0x18>
 80321ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80321b0:	b9d5      	cbnz	r5, 80321e8 <__sfp+0x64>
 80321b2:	4b16      	ldr	r3, [pc, #88]	; (803220c <__sfp+0x88>)
 80321b4:	60e3      	str	r3, [r4, #12]
 80321b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80321ba:	6665      	str	r5, [r4, #100]	; 0x64
 80321bc:	f7ff f934 	bl	8031428 <__retarget_lock_init_recursive>
 80321c0:	f7ff ff96 	bl	80320f0 <__sfp_lock_release>
 80321c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80321c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80321cc:	6025      	str	r5, [r4, #0]
 80321ce:	61a5      	str	r5, [r4, #24]
 80321d0:	2208      	movs	r2, #8
 80321d2:	4629      	mov	r1, r5
 80321d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80321d8:	f7ff f962 	bl	80314a0 <memset>
 80321dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80321e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80321e4:	4620      	mov	r0, r4
 80321e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80321e8:	3468      	adds	r4, #104	; 0x68
 80321ea:	e7d9      	b.n	80321a0 <__sfp+0x1c>
 80321ec:	2104      	movs	r1, #4
 80321ee:	4638      	mov	r0, r7
 80321f0:	f7ff ff62 	bl	80320b8 <__sfmoreglue>
 80321f4:	4604      	mov	r4, r0
 80321f6:	6030      	str	r0, [r6, #0]
 80321f8:	2800      	cmp	r0, #0
 80321fa:	d1d5      	bne.n	80321a8 <__sfp+0x24>
 80321fc:	f7ff ff78 	bl	80320f0 <__sfp_lock_release>
 8032200:	230c      	movs	r3, #12
 8032202:	603b      	str	r3, [r7, #0]
 8032204:	e7ee      	b.n	80321e4 <__sfp+0x60>
 8032206:	bf00      	nop
 8032208:	0803747c 	.word	0x0803747c
 803220c:	ffff0001 	.word	0xffff0001

08032210 <_fwalk_reent>:
 8032210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032214:	4606      	mov	r6, r0
 8032216:	4688      	mov	r8, r1
 8032218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803221c:	2700      	movs	r7, #0
 803221e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8032222:	f1b9 0901 	subs.w	r9, r9, #1
 8032226:	d505      	bpl.n	8032234 <_fwalk_reent+0x24>
 8032228:	6824      	ldr	r4, [r4, #0]
 803222a:	2c00      	cmp	r4, #0
 803222c:	d1f7      	bne.n	803221e <_fwalk_reent+0xe>
 803222e:	4638      	mov	r0, r7
 8032230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032234:	89ab      	ldrh	r3, [r5, #12]
 8032236:	2b01      	cmp	r3, #1
 8032238:	d907      	bls.n	803224a <_fwalk_reent+0x3a>
 803223a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803223e:	3301      	adds	r3, #1
 8032240:	d003      	beq.n	803224a <_fwalk_reent+0x3a>
 8032242:	4629      	mov	r1, r5
 8032244:	4630      	mov	r0, r6
 8032246:	47c0      	blx	r8
 8032248:	4307      	orrs	r7, r0
 803224a:	3568      	adds	r5, #104	; 0x68
 803224c:	e7e9      	b.n	8032222 <_fwalk_reent+0x12>

0803224e <__swhatbuf_r>:
 803224e:	b570      	push	{r4, r5, r6, lr}
 8032250:	460e      	mov	r6, r1
 8032252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8032256:	2900      	cmp	r1, #0
 8032258:	b096      	sub	sp, #88	; 0x58
 803225a:	4614      	mov	r4, r2
 803225c:	461d      	mov	r5, r3
 803225e:	da08      	bge.n	8032272 <__swhatbuf_r+0x24>
 8032260:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8032264:	2200      	movs	r2, #0
 8032266:	602a      	str	r2, [r5, #0]
 8032268:	061a      	lsls	r2, r3, #24
 803226a:	d410      	bmi.n	803228e <__swhatbuf_r+0x40>
 803226c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8032270:	e00e      	b.n	8032290 <__swhatbuf_r+0x42>
 8032272:	466a      	mov	r2, sp
 8032274:	f000 fa4c 	bl	8032710 <_fstat_r>
 8032278:	2800      	cmp	r0, #0
 803227a:	dbf1      	blt.n	8032260 <__swhatbuf_r+0x12>
 803227c:	9a01      	ldr	r2, [sp, #4]
 803227e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8032282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8032286:	425a      	negs	r2, r3
 8032288:	415a      	adcs	r2, r3
 803228a:	602a      	str	r2, [r5, #0]
 803228c:	e7ee      	b.n	803226c <__swhatbuf_r+0x1e>
 803228e:	2340      	movs	r3, #64	; 0x40
 8032290:	2000      	movs	r0, #0
 8032292:	6023      	str	r3, [r4, #0]
 8032294:	b016      	add	sp, #88	; 0x58
 8032296:	bd70      	pop	{r4, r5, r6, pc}

08032298 <__smakebuf_r>:
 8032298:	898b      	ldrh	r3, [r1, #12]
 803229a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803229c:	079d      	lsls	r5, r3, #30
 803229e:	4606      	mov	r6, r0
 80322a0:	460c      	mov	r4, r1
 80322a2:	d507      	bpl.n	80322b4 <__smakebuf_r+0x1c>
 80322a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80322a8:	6023      	str	r3, [r4, #0]
 80322aa:	6123      	str	r3, [r4, #16]
 80322ac:	2301      	movs	r3, #1
 80322ae:	6163      	str	r3, [r4, #20]
 80322b0:	b002      	add	sp, #8
 80322b2:	bd70      	pop	{r4, r5, r6, pc}
 80322b4:	ab01      	add	r3, sp, #4
 80322b6:	466a      	mov	r2, sp
 80322b8:	f7ff ffc9 	bl	803224e <__swhatbuf_r>
 80322bc:	9900      	ldr	r1, [sp, #0]
 80322be:	4605      	mov	r5, r0
 80322c0:	4630      	mov	r0, r6
 80322c2:	f7ff f977 	bl	80315b4 <_malloc_r>
 80322c6:	b948      	cbnz	r0, 80322dc <__smakebuf_r+0x44>
 80322c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80322cc:	059a      	lsls	r2, r3, #22
 80322ce:	d4ef      	bmi.n	80322b0 <__smakebuf_r+0x18>
 80322d0:	f023 0303 	bic.w	r3, r3, #3
 80322d4:	f043 0302 	orr.w	r3, r3, #2
 80322d8:	81a3      	strh	r3, [r4, #12]
 80322da:	e7e3      	b.n	80322a4 <__smakebuf_r+0xc>
 80322dc:	4b0d      	ldr	r3, [pc, #52]	; (8032314 <__smakebuf_r+0x7c>)
 80322de:	62b3      	str	r3, [r6, #40]	; 0x28
 80322e0:	89a3      	ldrh	r3, [r4, #12]
 80322e2:	6020      	str	r0, [r4, #0]
 80322e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80322e8:	81a3      	strh	r3, [r4, #12]
 80322ea:	9b00      	ldr	r3, [sp, #0]
 80322ec:	6163      	str	r3, [r4, #20]
 80322ee:	9b01      	ldr	r3, [sp, #4]
 80322f0:	6120      	str	r0, [r4, #16]
 80322f2:	b15b      	cbz	r3, 803230c <__smakebuf_r+0x74>
 80322f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80322f8:	4630      	mov	r0, r6
 80322fa:	f000 fa1b 	bl	8032734 <_isatty_r>
 80322fe:	b128      	cbz	r0, 803230c <__smakebuf_r+0x74>
 8032300:	89a3      	ldrh	r3, [r4, #12]
 8032302:	f023 0303 	bic.w	r3, r3, #3
 8032306:	f043 0301 	orr.w	r3, r3, #1
 803230a:	81a3      	strh	r3, [r4, #12]
 803230c:	89a0      	ldrh	r0, [r4, #12]
 803230e:	4305      	orrs	r5, r0
 8032310:	81a5      	strh	r5, [r4, #12]
 8032312:	e7cd      	b.n	80322b0 <__smakebuf_r+0x18>
 8032314:	080320ad 	.word	0x080320ad

08032318 <__malloc_lock>:
 8032318:	4801      	ldr	r0, [pc, #4]	; (8032320 <__malloc_lock+0x8>)
 803231a:	f7ff b886 	b.w	803142a <__retarget_lock_acquire_recursive>
 803231e:	bf00      	nop
 8032320:	20002458 	.word	0x20002458

08032324 <__malloc_unlock>:
 8032324:	4801      	ldr	r0, [pc, #4]	; (803232c <__malloc_unlock+0x8>)
 8032326:	f7ff b881 	b.w	803142c <__retarget_lock_release_recursive>
 803232a:	bf00      	nop
 803232c:	20002458 	.word	0x20002458

08032330 <_realloc_r>:
 8032330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032334:	4680      	mov	r8, r0
 8032336:	4614      	mov	r4, r2
 8032338:	460e      	mov	r6, r1
 803233a:	b921      	cbnz	r1, 8032346 <_realloc_r+0x16>
 803233c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8032340:	4611      	mov	r1, r2
 8032342:	f7ff b937 	b.w	80315b4 <_malloc_r>
 8032346:	b92a      	cbnz	r2, 8032354 <_realloc_r+0x24>
 8032348:	f7ff f8c8 	bl	80314dc <_free_r>
 803234c:	4625      	mov	r5, r4
 803234e:	4628      	mov	r0, r5
 8032350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032354:	f000 fa10 	bl	8032778 <_malloc_usable_size_r>
 8032358:	4284      	cmp	r4, r0
 803235a:	4607      	mov	r7, r0
 803235c:	d802      	bhi.n	8032364 <_realloc_r+0x34>
 803235e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8032362:	d812      	bhi.n	803238a <_realloc_r+0x5a>
 8032364:	4621      	mov	r1, r4
 8032366:	4640      	mov	r0, r8
 8032368:	f7ff f924 	bl	80315b4 <_malloc_r>
 803236c:	4605      	mov	r5, r0
 803236e:	2800      	cmp	r0, #0
 8032370:	d0ed      	beq.n	803234e <_realloc_r+0x1e>
 8032372:	42bc      	cmp	r4, r7
 8032374:	4622      	mov	r2, r4
 8032376:	4631      	mov	r1, r6
 8032378:	bf28      	it	cs
 803237a:	463a      	movcs	r2, r7
 803237c:	f7ff f868 	bl	8031450 <memcpy>
 8032380:	4631      	mov	r1, r6
 8032382:	4640      	mov	r0, r8
 8032384:	f7ff f8aa 	bl	80314dc <_free_r>
 8032388:	e7e1      	b.n	803234e <_realloc_r+0x1e>
 803238a:	4635      	mov	r5, r6
 803238c:	e7df      	b.n	803234e <_realloc_r+0x1e>

0803238e <__ssputs_r>:
 803238e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8032392:	688e      	ldr	r6, [r1, #8]
 8032394:	429e      	cmp	r6, r3
 8032396:	4682      	mov	sl, r0
 8032398:	460c      	mov	r4, r1
 803239a:	4690      	mov	r8, r2
 803239c:	461f      	mov	r7, r3
 803239e:	d838      	bhi.n	8032412 <__ssputs_r+0x84>
 80323a0:	898a      	ldrh	r2, [r1, #12]
 80323a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80323a6:	d032      	beq.n	803240e <__ssputs_r+0x80>
 80323a8:	6825      	ldr	r5, [r4, #0]
 80323aa:	6909      	ldr	r1, [r1, #16]
 80323ac:	eba5 0901 	sub.w	r9, r5, r1
 80323b0:	6965      	ldr	r5, [r4, #20]
 80323b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80323b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80323ba:	3301      	adds	r3, #1
 80323bc:	444b      	add	r3, r9
 80323be:	106d      	asrs	r5, r5, #1
 80323c0:	429d      	cmp	r5, r3
 80323c2:	bf38      	it	cc
 80323c4:	461d      	movcc	r5, r3
 80323c6:	0553      	lsls	r3, r2, #21
 80323c8:	d531      	bpl.n	803242e <__ssputs_r+0xa0>
 80323ca:	4629      	mov	r1, r5
 80323cc:	f7ff f8f2 	bl	80315b4 <_malloc_r>
 80323d0:	4606      	mov	r6, r0
 80323d2:	b950      	cbnz	r0, 80323ea <__ssputs_r+0x5c>
 80323d4:	230c      	movs	r3, #12
 80323d6:	f8ca 3000 	str.w	r3, [sl]
 80323da:	89a3      	ldrh	r3, [r4, #12]
 80323dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80323e0:	81a3      	strh	r3, [r4, #12]
 80323e2:	f04f 30ff 	mov.w	r0, #4294967295
 80323e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80323ea:	6921      	ldr	r1, [r4, #16]
 80323ec:	464a      	mov	r2, r9
 80323ee:	f7ff f82f 	bl	8031450 <memcpy>
 80323f2:	89a3      	ldrh	r3, [r4, #12]
 80323f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80323f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80323fc:	81a3      	strh	r3, [r4, #12]
 80323fe:	6126      	str	r6, [r4, #16]
 8032400:	6165      	str	r5, [r4, #20]
 8032402:	444e      	add	r6, r9
 8032404:	eba5 0509 	sub.w	r5, r5, r9
 8032408:	6026      	str	r6, [r4, #0]
 803240a:	60a5      	str	r5, [r4, #8]
 803240c:	463e      	mov	r6, r7
 803240e:	42be      	cmp	r6, r7
 8032410:	d900      	bls.n	8032414 <__ssputs_r+0x86>
 8032412:	463e      	mov	r6, r7
 8032414:	6820      	ldr	r0, [r4, #0]
 8032416:	4632      	mov	r2, r6
 8032418:	4641      	mov	r1, r8
 803241a:	f7ff f827 	bl	803146c <memmove>
 803241e:	68a3      	ldr	r3, [r4, #8]
 8032420:	1b9b      	subs	r3, r3, r6
 8032422:	60a3      	str	r3, [r4, #8]
 8032424:	6823      	ldr	r3, [r4, #0]
 8032426:	4433      	add	r3, r6
 8032428:	6023      	str	r3, [r4, #0]
 803242a:	2000      	movs	r0, #0
 803242c:	e7db      	b.n	80323e6 <__ssputs_r+0x58>
 803242e:	462a      	mov	r2, r5
 8032430:	f7ff ff7e 	bl	8032330 <_realloc_r>
 8032434:	4606      	mov	r6, r0
 8032436:	2800      	cmp	r0, #0
 8032438:	d1e1      	bne.n	80323fe <__ssputs_r+0x70>
 803243a:	6921      	ldr	r1, [r4, #16]
 803243c:	4650      	mov	r0, sl
 803243e:	f7ff f84d 	bl	80314dc <_free_r>
 8032442:	e7c7      	b.n	80323d4 <__ssputs_r+0x46>

08032444 <_svfiprintf_r>:
 8032444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032448:	4698      	mov	r8, r3
 803244a:	898b      	ldrh	r3, [r1, #12]
 803244c:	061b      	lsls	r3, r3, #24
 803244e:	b09d      	sub	sp, #116	; 0x74
 8032450:	4607      	mov	r7, r0
 8032452:	460d      	mov	r5, r1
 8032454:	4614      	mov	r4, r2
 8032456:	d50e      	bpl.n	8032476 <_svfiprintf_r+0x32>
 8032458:	690b      	ldr	r3, [r1, #16]
 803245a:	b963      	cbnz	r3, 8032476 <_svfiprintf_r+0x32>
 803245c:	2140      	movs	r1, #64	; 0x40
 803245e:	f7ff f8a9 	bl	80315b4 <_malloc_r>
 8032462:	6028      	str	r0, [r5, #0]
 8032464:	6128      	str	r0, [r5, #16]
 8032466:	b920      	cbnz	r0, 8032472 <_svfiprintf_r+0x2e>
 8032468:	230c      	movs	r3, #12
 803246a:	603b      	str	r3, [r7, #0]
 803246c:	f04f 30ff 	mov.w	r0, #4294967295
 8032470:	e0d1      	b.n	8032616 <_svfiprintf_r+0x1d2>
 8032472:	2340      	movs	r3, #64	; 0x40
 8032474:	616b      	str	r3, [r5, #20]
 8032476:	2300      	movs	r3, #0
 8032478:	9309      	str	r3, [sp, #36]	; 0x24
 803247a:	2320      	movs	r3, #32
 803247c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8032480:	f8cd 800c 	str.w	r8, [sp, #12]
 8032484:	2330      	movs	r3, #48	; 0x30
 8032486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8032630 <_svfiprintf_r+0x1ec>
 803248a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803248e:	f04f 0901 	mov.w	r9, #1
 8032492:	4623      	mov	r3, r4
 8032494:	469a      	mov	sl, r3
 8032496:	f813 2b01 	ldrb.w	r2, [r3], #1
 803249a:	b10a      	cbz	r2, 80324a0 <_svfiprintf_r+0x5c>
 803249c:	2a25      	cmp	r2, #37	; 0x25
 803249e:	d1f9      	bne.n	8032494 <_svfiprintf_r+0x50>
 80324a0:	ebba 0b04 	subs.w	fp, sl, r4
 80324a4:	d00b      	beq.n	80324be <_svfiprintf_r+0x7a>
 80324a6:	465b      	mov	r3, fp
 80324a8:	4622      	mov	r2, r4
 80324aa:	4629      	mov	r1, r5
 80324ac:	4638      	mov	r0, r7
 80324ae:	f7ff ff6e 	bl	803238e <__ssputs_r>
 80324b2:	3001      	adds	r0, #1
 80324b4:	f000 80aa 	beq.w	803260c <_svfiprintf_r+0x1c8>
 80324b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80324ba:	445a      	add	r2, fp
 80324bc:	9209      	str	r2, [sp, #36]	; 0x24
 80324be:	f89a 3000 	ldrb.w	r3, [sl]
 80324c2:	2b00      	cmp	r3, #0
 80324c4:	f000 80a2 	beq.w	803260c <_svfiprintf_r+0x1c8>
 80324c8:	2300      	movs	r3, #0
 80324ca:	f04f 32ff 	mov.w	r2, #4294967295
 80324ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80324d2:	f10a 0a01 	add.w	sl, sl, #1
 80324d6:	9304      	str	r3, [sp, #16]
 80324d8:	9307      	str	r3, [sp, #28]
 80324da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80324de:	931a      	str	r3, [sp, #104]	; 0x68
 80324e0:	4654      	mov	r4, sl
 80324e2:	2205      	movs	r2, #5
 80324e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80324e8:	4851      	ldr	r0, [pc, #324]	; (8032630 <_svfiprintf_r+0x1ec>)
 80324ea:	f7cd fe71 	bl	80001d0 <memchr>
 80324ee:	9a04      	ldr	r2, [sp, #16]
 80324f0:	b9d8      	cbnz	r0, 803252a <_svfiprintf_r+0xe6>
 80324f2:	06d0      	lsls	r0, r2, #27
 80324f4:	bf44      	itt	mi
 80324f6:	2320      	movmi	r3, #32
 80324f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80324fc:	0711      	lsls	r1, r2, #28
 80324fe:	bf44      	itt	mi
 8032500:	232b      	movmi	r3, #43	; 0x2b
 8032502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8032506:	f89a 3000 	ldrb.w	r3, [sl]
 803250a:	2b2a      	cmp	r3, #42	; 0x2a
 803250c:	d015      	beq.n	803253a <_svfiprintf_r+0xf6>
 803250e:	9a07      	ldr	r2, [sp, #28]
 8032510:	4654      	mov	r4, sl
 8032512:	2000      	movs	r0, #0
 8032514:	f04f 0c0a 	mov.w	ip, #10
 8032518:	4621      	mov	r1, r4
 803251a:	f811 3b01 	ldrb.w	r3, [r1], #1
 803251e:	3b30      	subs	r3, #48	; 0x30
 8032520:	2b09      	cmp	r3, #9
 8032522:	d94e      	bls.n	80325c2 <_svfiprintf_r+0x17e>
 8032524:	b1b0      	cbz	r0, 8032554 <_svfiprintf_r+0x110>
 8032526:	9207      	str	r2, [sp, #28]
 8032528:	e014      	b.n	8032554 <_svfiprintf_r+0x110>
 803252a:	eba0 0308 	sub.w	r3, r0, r8
 803252e:	fa09 f303 	lsl.w	r3, r9, r3
 8032532:	4313      	orrs	r3, r2
 8032534:	9304      	str	r3, [sp, #16]
 8032536:	46a2      	mov	sl, r4
 8032538:	e7d2      	b.n	80324e0 <_svfiprintf_r+0x9c>
 803253a:	9b03      	ldr	r3, [sp, #12]
 803253c:	1d19      	adds	r1, r3, #4
 803253e:	681b      	ldr	r3, [r3, #0]
 8032540:	9103      	str	r1, [sp, #12]
 8032542:	2b00      	cmp	r3, #0
 8032544:	bfbb      	ittet	lt
 8032546:	425b      	neglt	r3, r3
 8032548:	f042 0202 	orrlt.w	r2, r2, #2
 803254c:	9307      	strge	r3, [sp, #28]
 803254e:	9307      	strlt	r3, [sp, #28]
 8032550:	bfb8      	it	lt
 8032552:	9204      	strlt	r2, [sp, #16]
 8032554:	7823      	ldrb	r3, [r4, #0]
 8032556:	2b2e      	cmp	r3, #46	; 0x2e
 8032558:	d10c      	bne.n	8032574 <_svfiprintf_r+0x130>
 803255a:	7863      	ldrb	r3, [r4, #1]
 803255c:	2b2a      	cmp	r3, #42	; 0x2a
 803255e:	d135      	bne.n	80325cc <_svfiprintf_r+0x188>
 8032560:	9b03      	ldr	r3, [sp, #12]
 8032562:	1d1a      	adds	r2, r3, #4
 8032564:	681b      	ldr	r3, [r3, #0]
 8032566:	9203      	str	r2, [sp, #12]
 8032568:	2b00      	cmp	r3, #0
 803256a:	bfb8      	it	lt
 803256c:	f04f 33ff 	movlt.w	r3, #4294967295
 8032570:	3402      	adds	r4, #2
 8032572:	9305      	str	r3, [sp, #20]
 8032574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8032640 <_svfiprintf_r+0x1fc>
 8032578:	7821      	ldrb	r1, [r4, #0]
 803257a:	2203      	movs	r2, #3
 803257c:	4650      	mov	r0, sl
 803257e:	f7cd fe27 	bl	80001d0 <memchr>
 8032582:	b140      	cbz	r0, 8032596 <_svfiprintf_r+0x152>
 8032584:	2340      	movs	r3, #64	; 0x40
 8032586:	eba0 000a 	sub.w	r0, r0, sl
 803258a:	fa03 f000 	lsl.w	r0, r3, r0
 803258e:	9b04      	ldr	r3, [sp, #16]
 8032590:	4303      	orrs	r3, r0
 8032592:	3401      	adds	r4, #1
 8032594:	9304      	str	r3, [sp, #16]
 8032596:	f814 1b01 	ldrb.w	r1, [r4], #1
 803259a:	4826      	ldr	r0, [pc, #152]	; (8032634 <_svfiprintf_r+0x1f0>)
 803259c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80325a0:	2206      	movs	r2, #6
 80325a2:	f7cd fe15 	bl	80001d0 <memchr>
 80325a6:	2800      	cmp	r0, #0
 80325a8:	d038      	beq.n	803261c <_svfiprintf_r+0x1d8>
 80325aa:	4b23      	ldr	r3, [pc, #140]	; (8032638 <_svfiprintf_r+0x1f4>)
 80325ac:	bb1b      	cbnz	r3, 80325f6 <_svfiprintf_r+0x1b2>
 80325ae:	9b03      	ldr	r3, [sp, #12]
 80325b0:	3307      	adds	r3, #7
 80325b2:	f023 0307 	bic.w	r3, r3, #7
 80325b6:	3308      	adds	r3, #8
 80325b8:	9303      	str	r3, [sp, #12]
 80325ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80325bc:	4433      	add	r3, r6
 80325be:	9309      	str	r3, [sp, #36]	; 0x24
 80325c0:	e767      	b.n	8032492 <_svfiprintf_r+0x4e>
 80325c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80325c6:	460c      	mov	r4, r1
 80325c8:	2001      	movs	r0, #1
 80325ca:	e7a5      	b.n	8032518 <_svfiprintf_r+0xd4>
 80325cc:	2300      	movs	r3, #0
 80325ce:	3401      	adds	r4, #1
 80325d0:	9305      	str	r3, [sp, #20]
 80325d2:	4619      	mov	r1, r3
 80325d4:	f04f 0c0a 	mov.w	ip, #10
 80325d8:	4620      	mov	r0, r4
 80325da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80325de:	3a30      	subs	r2, #48	; 0x30
 80325e0:	2a09      	cmp	r2, #9
 80325e2:	d903      	bls.n	80325ec <_svfiprintf_r+0x1a8>
 80325e4:	2b00      	cmp	r3, #0
 80325e6:	d0c5      	beq.n	8032574 <_svfiprintf_r+0x130>
 80325e8:	9105      	str	r1, [sp, #20]
 80325ea:	e7c3      	b.n	8032574 <_svfiprintf_r+0x130>
 80325ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80325f0:	4604      	mov	r4, r0
 80325f2:	2301      	movs	r3, #1
 80325f4:	e7f0      	b.n	80325d8 <_svfiprintf_r+0x194>
 80325f6:	ab03      	add	r3, sp, #12
 80325f8:	9300      	str	r3, [sp, #0]
 80325fa:	462a      	mov	r2, r5
 80325fc:	4b0f      	ldr	r3, [pc, #60]	; (803263c <_svfiprintf_r+0x1f8>)
 80325fe:	a904      	add	r1, sp, #16
 8032600:	4638      	mov	r0, r7
 8032602:	f3af 8000 	nop.w
 8032606:	1c42      	adds	r2, r0, #1
 8032608:	4606      	mov	r6, r0
 803260a:	d1d6      	bne.n	80325ba <_svfiprintf_r+0x176>
 803260c:	89ab      	ldrh	r3, [r5, #12]
 803260e:	065b      	lsls	r3, r3, #25
 8032610:	f53f af2c 	bmi.w	803246c <_svfiprintf_r+0x28>
 8032614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8032616:	b01d      	add	sp, #116	; 0x74
 8032618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803261c:	ab03      	add	r3, sp, #12
 803261e:	9300      	str	r3, [sp, #0]
 8032620:	462a      	mov	r2, r5
 8032622:	4b06      	ldr	r3, [pc, #24]	; (803263c <_svfiprintf_r+0x1f8>)
 8032624:	a904      	add	r1, sp, #16
 8032626:	4638      	mov	r0, r7
 8032628:	f7ff fa00 	bl	8031a2c <_printf_i>
 803262c:	e7eb      	b.n	8032606 <_svfiprintf_r+0x1c2>
 803262e:	bf00      	nop
 8032630:	08037480 	.word	0x08037480
 8032634:	0803748a 	.word	0x0803748a
 8032638:	00000000 	.word	0x00000000
 803263c:	0803238f 	.word	0x0803238f
 8032640:	08037486 	.word	0x08037486

08032644 <__sread>:
 8032644:	b510      	push	{r4, lr}
 8032646:	460c      	mov	r4, r1
 8032648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803264c:	f000 f89c 	bl	8032788 <_read_r>
 8032650:	2800      	cmp	r0, #0
 8032652:	bfab      	itete	ge
 8032654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8032656:	89a3      	ldrhlt	r3, [r4, #12]
 8032658:	181b      	addge	r3, r3, r0
 803265a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803265e:	bfac      	ite	ge
 8032660:	6563      	strge	r3, [r4, #84]	; 0x54
 8032662:	81a3      	strhlt	r3, [r4, #12]
 8032664:	bd10      	pop	{r4, pc}

08032666 <__swrite>:
 8032666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803266a:	461f      	mov	r7, r3
 803266c:	898b      	ldrh	r3, [r1, #12]
 803266e:	05db      	lsls	r3, r3, #23
 8032670:	4605      	mov	r5, r0
 8032672:	460c      	mov	r4, r1
 8032674:	4616      	mov	r6, r2
 8032676:	d505      	bpl.n	8032684 <__swrite+0x1e>
 8032678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803267c:	2302      	movs	r3, #2
 803267e:	2200      	movs	r2, #0
 8032680:	f000 f868 	bl	8032754 <_lseek_r>
 8032684:	89a3      	ldrh	r3, [r4, #12]
 8032686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803268a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803268e:	81a3      	strh	r3, [r4, #12]
 8032690:	4632      	mov	r2, r6
 8032692:	463b      	mov	r3, r7
 8032694:	4628      	mov	r0, r5
 8032696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803269a:	f000 b817 	b.w	80326cc <_write_r>

0803269e <__sseek>:
 803269e:	b510      	push	{r4, lr}
 80326a0:	460c      	mov	r4, r1
 80326a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80326a6:	f000 f855 	bl	8032754 <_lseek_r>
 80326aa:	1c43      	adds	r3, r0, #1
 80326ac:	89a3      	ldrh	r3, [r4, #12]
 80326ae:	bf15      	itete	ne
 80326b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80326b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80326b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80326ba:	81a3      	strheq	r3, [r4, #12]
 80326bc:	bf18      	it	ne
 80326be:	81a3      	strhne	r3, [r4, #12]
 80326c0:	bd10      	pop	{r4, pc}

080326c2 <__sclose>:
 80326c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80326c6:	f000 b813 	b.w	80326f0 <_close_r>
	...

080326cc <_write_r>:
 80326cc:	b538      	push	{r3, r4, r5, lr}
 80326ce:	4d07      	ldr	r5, [pc, #28]	; (80326ec <_write_r+0x20>)
 80326d0:	4604      	mov	r4, r0
 80326d2:	4608      	mov	r0, r1
 80326d4:	4611      	mov	r1, r2
 80326d6:	2200      	movs	r2, #0
 80326d8:	602a      	str	r2, [r5, #0]
 80326da:	461a      	mov	r2, r3
 80326dc:	f7d4 ffaf 	bl	800763e <_write>
 80326e0:	1c43      	adds	r3, r0, #1
 80326e2:	d102      	bne.n	80326ea <_write_r+0x1e>
 80326e4:	682b      	ldr	r3, [r5, #0]
 80326e6:	b103      	cbz	r3, 80326ea <_write_r+0x1e>
 80326e8:	6023      	str	r3, [r4, #0]
 80326ea:	bd38      	pop	{r3, r4, r5, pc}
 80326ec:	20002464 	.word	0x20002464

080326f0 <_close_r>:
 80326f0:	b538      	push	{r3, r4, r5, lr}
 80326f2:	4d06      	ldr	r5, [pc, #24]	; (803270c <_close_r+0x1c>)
 80326f4:	2300      	movs	r3, #0
 80326f6:	4604      	mov	r4, r0
 80326f8:	4608      	mov	r0, r1
 80326fa:	602b      	str	r3, [r5, #0]
 80326fc:	f7d4 ffbb 	bl	8007676 <_close>
 8032700:	1c43      	adds	r3, r0, #1
 8032702:	d102      	bne.n	803270a <_close_r+0x1a>
 8032704:	682b      	ldr	r3, [r5, #0]
 8032706:	b103      	cbz	r3, 803270a <_close_r+0x1a>
 8032708:	6023      	str	r3, [r4, #0]
 803270a:	bd38      	pop	{r3, r4, r5, pc}
 803270c:	20002464 	.word	0x20002464

08032710 <_fstat_r>:
 8032710:	b538      	push	{r3, r4, r5, lr}
 8032712:	4d07      	ldr	r5, [pc, #28]	; (8032730 <_fstat_r+0x20>)
 8032714:	2300      	movs	r3, #0
 8032716:	4604      	mov	r4, r0
 8032718:	4608      	mov	r0, r1
 803271a:	4611      	mov	r1, r2
 803271c:	602b      	str	r3, [r5, #0]
 803271e:	f7d4 ffb6 	bl	800768e <_fstat>
 8032722:	1c43      	adds	r3, r0, #1
 8032724:	d102      	bne.n	803272c <_fstat_r+0x1c>
 8032726:	682b      	ldr	r3, [r5, #0]
 8032728:	b103      	cbz	r3, 803272c <_fstat_r+0x1c>
 803272a:	6023      	str	r3, [r4, #0]
 803272c:	bd38      	pop	{r3, r4, r5, pc}
 803272e:	bf00      	nop
 8032730:	20002464 	.word	0x20002464

08032734 <_isatty_r>:
 8032734:	b538      	push	{r3, r4, r5, lr}
 8032736:	4d06      	ldr	r5, [pc, #24]	; (8032750 <_isatty_r+0x1c>)
 8032738:	2300      	movs	r3, #0
 803273a:	4604      	mov	r4, r0
 803273c:	4608      	mov	r0, r1
 803273e:	602b      	str	r3, [r5, #0]
 8032740:	f7d4 ffb5 	bl	80076ae <_isatty>
 8032744:	1c43      	adds	r3, r0, #1
 8032746:	d102      	bne.n	803274e <_isatty_r+0x1a>
 8032748:	682b      	ldr	r3, [r5, #0]
 803274a:	b103      	cbz	r3, 803274e <_isatty_r+0x1a>
 803274c:	6023      	str	r3, [r4, #0]
 803274e:	bd38      	pop	{r3, r4, r5, pc}
 8032750:	20002464 	.word	0x20002464

08032754 <_lseek_r>:
 8032754:	b538      	push	{r3, r4, r5, lr}
 8032756:	4d07      	ldr	r5, [pc, #28]	; (8032774 <_lseek_r+0x20>)
 8032758:	4604      	mov	r4, r0
 803275a:	4608      	mov	r0, r1
 803275c:	4611      	mov	r1, r2
 803275e:	2200      	movs	r2, #0
 8032760:	602a      	str	r2, [r5, #0]
 8032762:	461a      	mov	r2, r3
 8032764:	f7d4 ffae 	bl	80076c4 <_lseek>
 8032768:	1c43      	adds	r3, r0, #1
 803276a:	d102      	bne.n	8032772 <_lseek_r+0x1e>
 803276c:	682b      	ldr	r3, [r5, #0]
 803276e:	b103      	cbz	r3, 8032772 <_lseek_r+0x1e>
 8032770:	6023      	str	r3, [r4, #0]
 8032772:	bd38      	pop	{r3, r4, r5, pc}
 8032774:	20002464 	.word	0x20002464

08032778 <_malloc_usable_size_r>:
 8032778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803277c:	1f18      	subs	r0, r3, #4
 803277e:	2b00      	cmp	r3, #0
 8032780:	bfbc      	itt	lt
 8032782:	580b      	ldrlt	r3, [r1, r0]
 8032784:	18c0      	addlt	r0, r0, r3
 8032786:	4770      	bx	lr

08032788 <_read_r>:
 8032788:	b538      	push	{r3, r4, r5, lr}
 803278a:	4d07      	ldr	r5, [pc, #28]	; (80327a8 <_read_r+0x20>)
 803278c:	4604      	mov	r4, r0
 803278e:	4608      	mov	r0, r1
 8032790:	4611      	mov	r1, r2
 8032792:	2200      	movs	r2, #0
 8032794:	602a      	str	r2, [r5, #0]
 8032796:	461a      	mov	r2, r3
 8032798:	f7d4 ff34 	bl	8007604 <_read>
 803279c:	1c43      	adds	r3, r0, #1
 803279e:	d102      	bne.n	80327a6 <_read_r+0x1e>
 80327a0:	682b      	ldr	r3, [r5, #0]
 80327a2:	b103      	cbz	r3, 80327a6 <_read_r+0x1e>
 80327a4:	6023      	str	r3, [r4, #0]
 80327a6:	bd38      	pop	{r3, r4, r5, pc}
 80327a8:	20002464 	.word	0x20002464

080327ac <_init>:
 80327ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80327ae:	bf00      	nop
 80327b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80327b2:	bc08      	pop	{r3}
 80327b4:	469e      	mov	lr, r3
 80327b6:	4770      	bx	lr

080327b8 <_fini>:
 80327b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80327ba:	bf00      	nop
 80327bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80327be:	bc08      	pop	{r3}
 80327c0:	469e      	mov	lr, r3
 80327c2:	4770      	bx	lr
