
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a3c  08003a3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003a3c  08003a3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a3c  08003a3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000690  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a0  200006a0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014946  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e6d  00000000  00000000  00034986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  000377f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e0  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f97d  00000000  00000000  00039b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171d7  00000000  00000000  0005949d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba5d4  00000000  00000000  00070674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ac48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cc8  00000000  00000000  0012ac98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039e4 	.word	0x080039e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080039e4 	.word	0x080039e4

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	; 0x30
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b57      	ldr	r3, [pc, #348]	; (800033c <MX_GPIO_Init+0x174>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a56      	ldr	r2, [pc, #344]	; (800033c <MX_GPIO_Init+0x174>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b54      	ldr	r3, [pc, #336]	; (800033c <MX_GPIO_Init+0x174>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80001f2:	61bb      	str	r3, [r7, #24]
 80001f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b51      	ldr	r3, [pc, #324]	; (800033c <MX_GPIO_Init+0x174>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a50      	ldr	r2, [pc, #320]	; (800033c <MX_GPIO_Init+0x174>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b4e      	ldr	r3, [pc, #312]	; (800033c <MX_GPIO_Init+0x174>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020a:	617b      	str	r3, [r7, #20]
 800020c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b4b      	ldr	r3, [pc, #300]	; (800033c <MX_GPIO_Init+0x174>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a4a      	ldr	r2, [pc, #296]	; (800033c <MX_GPIO_Init+0x174>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b48      	ldr	r3, [pc, #288]	; (800033c <MX_GPIO_Init+0x174>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000222:	613b      	str	r3, [r7, #16]
 8000224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b45      	ldr	r3, [pc, #276]	; (800033c <MX_GPIO_Init+0x174>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a44      	ldr	r2, [pc, #272]	; (800033c <MX_GPIO_Init+0x174>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b42      	ldr	r3, [pc, #264]	; (800033c <MX_GPIO_Init+0x174>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b3f      	ldr	r3, [pc, #252]	; (800033c <MX_GPIO_Init+0x174>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a3e      	ldr	r2, [pc, #248]	; (800033c <MX_GPIO_Init+0x174>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <MX_GPIO_Init+0x174>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000252:	60bb      	str	r3, [r7, #8]
 8000254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000256:	4b39      	ldr	r3, [pc, #228]	; (800033c <MX_GPIO_Init+0x174>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a38      	ldr	r2, [pc, #224]	; (800033c <MX_GPIO_Init+0x174>)
 800025c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <MX_GPIO_Init+0x174>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800026e:	2200      	movs	r2, #0
 8000270:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000274:	4832      	ldr	r0, [pc, #200]	; (8000340 <MX_GPIO_Init+0x178>)
 8000276:	f000 ffd1 	bl	800121c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000280:	4830      	ldr	r0, [pc, #192]	; (8000344 <MX_GPIO_Init+0x17c>)
 8000282:	f000 ffcb 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000286:	2337      	movs	r3, #55	; 0x37
 8000288:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800028a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800028e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	4619      	mov	r1, r3
 800029a:	4829      	ldr	r0, [pc, #164]	; (8000340 <MX_GPIO_Init+0x178>)
 800029c:	f000 fe2c 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80002a0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80002a4:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a6:	2301      	movs	r3, #1
 80002a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	2300      	movs	r3, #0
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002b2:	f107 031c 	add.w	r3, r7, #28
 80002b6:	4619      	mov	r1, r3
 80002b8:	4821      	ldr	r0, [pc, #132]	; (8000340 <MX_GPIO_Init+0x178>)
 80002ba:	f000 fe1d 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002be:	2301      	movs	r3, #1
 80002c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c2:	2300      	movs	r3, #0
 80002c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ca:	f107 031c 	add.w	r3, r7, #28
 80002ce:	4619      	mov	r1, r3
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d4:	f000 fe10 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80002d8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80002dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2300      	movs	r3, #0
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ea:	f107 031c 	add.w	r3, r7, #28
 80002ee:	4619      	mov	r1, r3
 80002f0:	4814      	ldr	r0, [pc, #80]	; (8000344 <MX_GPIO_Init+0x17c>)
 80002f2:	f000 fe01 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OPPOSITEHIT_BTN_Pin|TABLEHIT_BTN_Pin;
 80002f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80002fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000302:	2301      	movs	r3, #1
 8000304:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000306:	f107 031c 	add.w	r3, r7, #28
 800030a:	4619      	mov	r1, r3
 800030c:	480e      	ldr	r0, [pc, #56]	; (8000348 <MX_GPIO_Init+0x180>)
 800030e:	f000 fdf3 	bl	8000ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	2017      	movs	r0, #23
 8000318:	f000 fdb7 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800031c:	2017      	movs	r0, #23
 800031e:	f000 fdd0 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2100      	movs	r1, #0
 8000326:	2028      	movs	r0, #40	; 0x28
 8000328:	f000 fdaf 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800032c:	2028      	movs	r0, #40	; 0x28
 800032e:	f000 fdc8 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

}
 8000332:	bf00      	nop
 8000334:	3730      	adds	r7, #48	; 0x30
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	48001000 	.word	0x48001000
 8000344:	48000400 	.word	0x48000400
 8000348:	48000c00 	.word	0x48000c00

0800034c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_I2C1_Init+0x74>)
 8000352:	4a1c      	ldr	r2, [pc, #112]	; (80003c4 <MX_I2C1_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_I2C1_Init+0x74>)
 8000358:	4a1b      	ldr	r2, [pc, #108]	; (80003c8 <MX_I2C1_Init+0x7c>)
 800035a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_I2C1_Init+0x74>)
 8000364:	2201      	movs	r2, #1
 8000366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000386:	480e      	ldr	r0, [pc, #56]	; (80003c0 <MX_I2C1_Init+0x74>)
 8000388:	f000 ff78 	bl	800127c <HAL_I2C_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000392:	f000 f967 	bl	8000664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000396:	2100      	movs	r1, #0
 8000398:	4809      	ldr	r0, [pc, #36]	; (80003c0 <MX_I2C1_Init+0x74>)
 800039a:	f000 fffe 	bl	800139a <HAL_I2CEx_ConfigAnalogFilter>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a4:	f000 f95e 	bl	8000664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a8:	2100      	movs	r1, #0
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_I2C1_Init+0x74>)
 80003ac:	f001 f840 	bl	8001430 <HAL_I2CEx_ConfigDigitalFilter>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f955 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	2000002c 	.word	0x2000002c
 80003c4:	40005400 	.word	0x40005400
 80003c8:	2000090e 	.word	0x2000090e

080003cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a17      	ldr	r2, [pc, #92]	; (8000448 <HAL_I2C_MspInit+0x7c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d127      	bne.n	800043e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <HAL_I2C_MspInit+0x80>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <HAL_I2C_MspInit+0x80>)
 80003f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <HAL_I2C_MspInit+0x80>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000406:	23c0      	movs	r3, #192	; 0xc0
 8000408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800040a:	2312      	movs	r3, #18
 800040c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040e:	2301      	movs	r3, #1
 8000410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000412:	2303      	movs	r3, #3
 8000414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000416:	2304      	movs	r3, #4
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	4619      	mov	r1, r3
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <HAL_I2C_MspInit+0x84>)
 8000422:	f000 fd69 	bl	8000ef8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_I2C_MspInit+0x80>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a08      	ldr	r2, [pc, #32]	; (800044c <HAL_I2C_MspInit+0x80>)
 800042c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_I2C_MspInit+0x80>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800043e:	bf00      	nop
 8000440:	3728      	adds	r7, #40	; 0x28
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40005400 	.word	0x40005400
 800044c:	40021000 	.word	0x40021000
 8000450:	48000400 	.word	0x48000400

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b598      	push	{r3, r4, r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fbd6 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f838 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff feb2 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000464:	f7ff ff72 	bl	800034c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000468:	f000 f904 	bl	8000674 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800046c:	f000 fb3c 	bl	8000ae8 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000470:	f000 f93e 	bl	80006f0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000474:	f000 faa6 	bl	80009c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hw_conf.spi_handle = &hspi2;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <main+0x6c>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <main+0x70>)
 800047c:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD_CS_Pin;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <main+0x6c>)
 8000480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000484:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD_CS_GPIO_Port;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <main+0x6c>)
 8000488:	4a0f      	ldr	r2, [pc, #60]	; (80004c8 <main+0x74>)
 800048a:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD_RST_Pin;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <main+0x6c>)
 800048e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000492:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD_RST_GPIO_Port;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <main+0x6c>)
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <main+0x74>)
 8000498:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD_DC_Pin;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <main+0x6c>)
 800049c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004a0:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD_DC_GPIO_Port;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <main+0x6c>)
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <main+0x74>)
 80004a6:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <main+0x6c>)
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <main+0x78>)
 80004ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80004b0:	4614      	mov	r4, r2
 80004b2:	6820      	ldr	r0, [r4, #0]
 80004b4:	6861      	ldr	r1, [r4, #4]
 80004b6:	68a2      	ldr	r2, [r4, #8]
 80004b8:	c307      	stmia	r3!, {r0, r1, r2}
 80004ba:	89a2      	ldrh	r2, [r4, #12]
 80004bc:	801a      	strh	r2, [r3, #0]
//  LCD5110_print("Hello world!\n", BLACK, &lcd1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 80004be:	e7fe      	b.n	80004be <main+0x6a>
 80004c0:	20000078 	.word	0x20000078
 80004c4:	20000300 	.word	0x20000300
 80004c8:	48000400 	.word	0x48000400
 80004cc:	080039fc 	.word	0x080039fc

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09e      	sub	sp, #120	; 0x78
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 fa78 	bl	80039d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	223c      	movs	r2, #60	; 0x3c
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 fa6a 	bl	80039d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000500:	2303      	movs	r3, #3
 8000502:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000508:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2310      	movs	r3, #16
 8000514:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000520:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000524:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800052a:	4618      	mov	r0, r3
 800052c:	f001 f8aa 	bl	8001684 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000536:	f000 f895 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000554:	2101      	movs	r1, #1
 8000556:	4618      	mov	r0, r3
 8000558:	f002 f8d2 	bl	8002700 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000562:	f000 f87f 	bl	8000664 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <SystemClock_Config+0xc4>)
 8000568:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000574:	2300      	movs	r3, #0
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f002 faa6 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000586:	f000 f86d 	bl	8000664 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3778      	adds	r7, #120	; 0x78
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	00021020 	.word	0x00021020

08000598 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == TABLEHIT_BTN_Pin || GPIO_Pin == OPPOSITEHIT_BTN_Pin) && state == true){
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005a8:	d003      	beq.n	80005b2 <HAL_GPIO_EXTI_Callback+0x1a>
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005b0:	d109      	bne.n	80005c6 <HAL_GPIO_EXTI_Callback+0x2e>
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d005      	beq.n	80005c6 <HAL_GPIO_EXTI_Callback+0x2e>
		HAL_TIM_Base_Start_IT(&htim1);
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005bc:	f002 fd38 	bl	8003030 <HAL_TIM_Base_Start_IT>
		state = false;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000364 	.word	0x20000364

080005d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(!HAL_GPIO_ReadPin(OPPOSITEHIT_BTN_GPIO_Port, OPPOSITEHIT_BTN_Pin)){
 80005e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e4:	481b      	ldr	r0, [pc, #108]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005e6:	f000 fe01 	bl	80011ec <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005f8:	f000 fe10 	bl	800121c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim1);
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005fe:	f002 fd17 	bl	8003030 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		state = true;
		HAL_TIM_Base_Stop_IT(&htim1);
	}
}
 8000602:	e023      	b.n	800064c <HAL_TIM_PeriodElapsedCallback+0x74>
	else if (!HAL_GPIO_ReadPin(TABLEHIT_BTN_GPIO_Port, TABLEHIT_BTN_Pin)) {
 8000604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800060a:	f000 fdef 	bl	80011ec <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d109      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x50>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800061c:	f000 fdfe 	bl	800121c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim1);
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000622:	f002 fd05 	bl	8003030 <HAL_TIM_Base_Start_IT>
}
 8000626:	e011      	b.n	800064c <HAL_TIM_PeriodElapsedCallback+0x74>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000630:	f000 fdf4 	bl	800121c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800063c:	f000 fdee 	bl	800121c <HAL_GPIO_WritePin>
		state = true;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000648:	f002 fd5c 	bl	8003104 <HAL_TIM_Base_Stop_IT>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	48000c00 	.word	0x48000c00
 8000658:	48001000 	.word	0x48001000
 800065c:	20000364 	.word	0x20000364
 8000660:	20000000 	.word	0x20000000

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_SPI1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_SPI1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI1_Init+0x74>)
 800068e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000692:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006aa:	2208      	movs	r2, #8
 80006ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006c2:	2207      	movs	r2, #7
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006ce:	2208      	movs	r2, #8
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006d4:	f002 fbaa 	bl	8002e2c <HAL_SPI_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f7ff ffc1 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000029c 	.word	0x2000029c
 80006ec:	40013000 	.word	0x40013000

080006f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_SPI2_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_SPI2_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_SPI2_Init+0x74>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_SPI2_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI2_Init+0x74>)
 800070a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800070e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_SPI2_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI2_Init+0x74>)
 800071e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000722:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI2_Init+0x74>)
 8000726:	2210      	movs	r2, #16
 8000728:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_SPI2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI2_Init+0x74>)
 800073e:	2207      	movs	r2, #7
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_SPI2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI2_Init+0x74>)
 800074a:	2208      	movs	r2, #8
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_SPI2_Init+0x74>)
 8000750:	f002 fb6c 	bl	8002e2c <HAL_SPI_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800075a:	f7ff ff83 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000300 	.word	0x20000300
 8000768:	40003800 	.word	0x40003800

0800076c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <HAL_SPI_MspInit+0x114>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d129      	bne.n	80007e2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <HAL_SPI_MspInit+0x118>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a3c      	ldr	r2, [pc, #240]	; (8000884 <HAL_SPI_MspInit+0x118>)
 8000794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <HAL_SPI_MspInit+0x118>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_SPI_MspInit+0x118>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a36      	ldr	r2, [pc, #216]	; (8000884 <HAL_SPI_MspInit+0x118>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <HAL_SPI_MspInit+0x118>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007be:	23e0      	movs	r3, #224	; 0xe0
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ce:	2305      	movs	r3, #5
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f000 fb8c 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007e0:	e04a      	b.n	8000878 <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a28      	ldr	r2, [pc, #160]	; (8000888 <HAL_SPI_MspInit+0x11c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d145      	bne.n	8000878 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <HAL_SPI_MspInit+0x118>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	4a24      	ldr	r2, [pc, #144]	; (8000884 <HAL_SPI_MspInit+0x118>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	61d3      	str	r3, [r2, #28]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_SPI_MspInit+0x118>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <HAL_SPI_MspInit+0x118>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <HAL_SPI_MspInit+0x118>)
 800080a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800080e:	6153      	str	r3, [r2, #20]
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <HAL_SPI_MspInit+0x118>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_SPI_MspInit+0x118>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a18      	ldr	r2, [pc, #96]	; (8000884 <HAL_SPI_MspInit+0x118>)
 8000822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000826:	6153      	str	r3, [r2, #20]
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_SPI_MspInit+0x118>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480e      	ldr	r0, [pc, #56]	; (800088c <HAL_SPI_MspInit+0x120>)
 8000852:	f000 fb51 	bl	8000ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000868:	2305      	movs	r3, #5
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <HAL_SPI_MspInit+0x124>)
 8000874:	f000 fb40 	bl	8000ef8 <HAL_GPIO_Init>
}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	; 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40013000 	.word	0x40013000
 8000884:	40021000 	.word	0x40021000
 8000888:	40003800 	.word	0x40003800
 800088c:	48001400 	.word	0x48001400
 8000890:	48000400 	.word	0x48000400

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x44>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x44>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x44>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ca:	2007      	movs	r0, #7
 80008cc:	f000 fad2 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f9b4 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPPOSITEHIT_BTN_Pin);
 8000934:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000938:	f000 fc88 	bl	800124c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000946:	f002 fc0c 	bl	8003162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000364 	.word	0x20000364

08000954 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800095a:	f002 fc02 	bl	8003162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000364 	.word	0x20000364

08000968 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800096e:	f002 fbf8 	bl	8003162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000364 	.word	0x20000364

0800097c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <TIM1_CC_IRQHandler+0x10>)
 8000982:	f002 fbee 	bl	8003162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000364 	.word	0x20000364

08000990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TABLEHIT_BTN_Pin);
 8000994:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000998:	f000 fc58 	bl	800124c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_TIM1_Init+0xa0>)
 80009e4:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <MX_TIM1_Init+0xa4>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_TIM1_Init+0xa0>)
 80009ea:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80009ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_TIM1_Init+0xa0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_TIM1_Init+0xa0>)
 80009f8:	2232      	movs	r2, #50	; 0x32
 80009fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_TIM1_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM1_Init+0xa0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_TIM1_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a0e:	4815      	ldr	r0, [pc, #84]	; (8000a64 <MX_TIM1_Init+0xa0>)
 8000a10:	f002 fab7 	bl	8002f82 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a1a:	f7ff fe23 	bl	8000664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_TIM1_Init+0xa0>)
 8000a2c:	f002 fcb8 	bl	80033a0 <HAL_TIM_ConfigClockSource>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a36:	f7ff fe15 	bl	8000664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <MX_TIM1_Init+0xa0>)
 8000a4c:	f002 fec4 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a56:	f7ff fe05 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000364 	.word	0x20000364
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_TIM_Base_MspInit+0x74>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12b      	bne.n	8000ad6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_TIM_Base_MspInit+0x78>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <HAL_TIM_Base_MspInit+0x78>)
 8000a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_TIM_Base_MspInit+0x78>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2018      	movs	r0, #24
 8000a9c:	f000 f9f5 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000aa0:	2018      	movs	r0, #24
 8000aa2:	f000 fa0e 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2019      	movs	r0, #25
 8000aac:	f000 f9ed 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ab0:	2019      	movs	r0, #25
 8000ab2:	f000 fa06 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	201a      	movs	r0, #26
 8000abc:	f000 f9e5 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ac0:	201a      	movs	r0, #26
 8000ac2:	f000 f9fe 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	201b      	movs	r0, #27
 8000acc:	f000 f9dd 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ad0:	201b      	movs	r0, #27
 8000ad2:	f000 f9f6 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40012c00 	.word	0x40012c00
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_USB_PCD_Init+0x3c>)
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <MX_USB_PCD_Init+0x40>)
 8000af0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USB_PCD_Init+0x3c>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_USB_PCD_Init+0x3c>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USB_PCD_Init+0x3c>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_USB_PCD_Init+0x3c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USB_PCD_Init+0x3c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_USB_PCD_Init+0x3c>)
 8000b12:	f000 fcd9 	bl	80014c8 <HAL_PCD_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000b1c:	f7ff fda2 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200003b0 	.word	0x200003b0
 8000b28:	40005c00 	.word	0x40005c00

08000b2c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a18      	ldr	r2, [pc, #96]	; (8000bac <HAL_PCD_MspInit+0x80>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d129      	bne.n	8000ba2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_PCD_MspInit+0x84>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_PCD_MspInit+0x84>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6153      	str	r3, [r2, #20]
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_PCD_MspInit+0x84>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f000 f9b7 	bl	8000ef8 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_PCD_MspInit+0x84>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_PCD_MspInit+0x84>)
 8000b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_PCD_MspInit+0x84>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40005c00 	.word	0x40005c00
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bde:	f7ff fedf 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f002 fed3 	bl	800398c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fc35 	bl	8000454 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bf8:	08003a44 	.word	0x08003a44
  ldr r2, =_sbss
 8000bfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c00:	200006a0 	.word	0x200006a0

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x28>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f92b 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe36 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f943 	bl	8000ede <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 f90b 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000004 	.word	0x20000004
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	2000069c 	.word	0x2000069c

08000cbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000069c 	.word	0x2000069c

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff29 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff3e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff31 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e154      	b.n	80011b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8146 	beq.w	80011ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d005      	beq.n	8000f38 <HAL_GPIO_Init+0x40>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d130      	bne.n	8000f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 0201 	and.w	r2, r3, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	6939      	ldr	r1, [r7, #16]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80a0 	beq.w	80011ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001084:	4a53      	ldr	r2, [pc, #332]	; (80011d4 <HAL_GPIO_Init+0x2dc>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ae:	d019      	beq.n	80010e4 <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2e4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1e4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <HAL_GPIO_Init+0x2ec>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1dc>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e008      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010d4:	2305      	movs	r3, #5
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010d8:	2303      	movs	r3, #3
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010dc:	2302      	movs	r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_Init+0x1ee>
 80010e4:	2300      	movs	r3, #0
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f6:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_GPIO_Init+0x2dc>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f aea3 	bne.w	8000f08 <HAL_GPIO_Init+0x10>
  }
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000c00 	.word	0x48000c00
 80011e4:	48001000 	.word	0x48001000
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001238:	e002      	b.n	8001240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f994 	bl	8000598 <HAL_GPIO_EXTI_Callback>
  }
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e081      	b.n	8001392 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff f892 	bl	80003cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2224      	movs	r2, #36	; 0x24
 80012ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	e006      	b.n	8001304 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001302:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d104      	bne.n	8001316 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001314:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69d9      	ldr	r1, [r3, #28]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d138      	bne.n	8001422 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e032      	b.n	8001424 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2224      	movs	r2, #36	; 0x24
 80013ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0201 	bic.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2220      	movs	r2, #32
 8001412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001422:	2302      	movs	r3, #2
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	d139      	bne.n	80014ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001450:	2302      	movs	r3, #2
 8001452:	e033      	b.n	80014bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2224      	movs	r2, #36	; 0x24
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001482:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014ba:	2302      	movs	r3, #2
  }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af06      	add	r7, sp, #24
 80014ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d0      	b.n	800167c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fb1c 	bl	8000b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fa07 	bl	8003914 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e04c      	b.n	80015a6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	3301      	adds	r3, #1
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	b298      	uxth	r0, r3
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3336      	adds	r3, #54	; 0x36
 800154a:	4602      	mov	r2, r0
 800154c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3303      	adds	r3, #3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	3338      	adds	r3, #56	; 0x38
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	333c      	adds	r3, #60	; 0x3c
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	3340      	adds	r3, #64	; 0x40
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	3301      	adds	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3ad      	bcc.n	800150c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e044      	b.n	8001640 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	3301      	adds	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	d3b5      	bcc.n	80015b6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	687e      	ldr	r6, [r7, #4]
 8001652:	466d      	mov	r5, sp
 8001654:	f106 0410 	add.w	r4, r6, #16
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	602b      	str	r3, [r5, #0]
 8001660:	1d33      	adds	r3, r6, #4
 8001662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f002 f970 	bl	800394a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800168a:	af00      	add	r7, sp, #0
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001694:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f001 b823 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 817d 	beq.w	80019ba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016c0:	4bbc      	ldr	r3, [pc, #752]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d00c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016cc:	4bb9      	ldr	r3, [pc, #740]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d15c      	bne.n	8001792 <HAL_RCC_OscConfig+0x10e>
 80016d8:	4bb6      	ldr	r3, [pc, #728]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d155      	bne.n	8001792 <HAL_RCC_OscConfig+0x10e>
 80016e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	095b      	lsrs	r3, r3, #5
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d102      	bne.n	8001718 <HAL_RCC_OscConfig+0x94>
 8001712:	4ba8      	ldr	r3, [pc, #672]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	e015      	b.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800172c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001730:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001734:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001740:	4b9c      	ldr	r3, [pc, #624]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001748:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800174c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001750:	fa92 f2a2 	rbit	r2, r2
 8001754:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001758:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800175c:	fab2 f282 	clz	r2, r2
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f042 0220 	orr.w	r2, r2, #32
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f002 021f 	and.w	r2, r2, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 811f 	beq.w	80019b8 <HAL_RCC_OscConfig+0x334>
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8116 	bne.w	80019b8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	f000 bfaf 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12e>
 80017a4:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a82      	ldr	r2, [pc, #520]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e036      	b.n	8001820 <HAL_RCC_OscConfig+0x19c>
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x158>
 80017c2:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7b      	ldr	r2, [pc, #492]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a78      	ldr	r2, [pc, #480]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e021      	b.n	8001820 <HAL_RCC_OscConfig+0x19c>
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x184>
 80017ee:	4b71      	ldr	r3, [pc, #452]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a70      	ldr	r2, [pc, #448]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6e      	ldr	r3, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6d      	ldr	r2, [pc, #436]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0x19c>
 8001808:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a69      	ldr	r2, [pc, #420]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a66      	ldr	r2, [pc, #408]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001820:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f023 020f 	bic.w	r2, r3, #15
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	495f      	ldr	r1, [pc, #380]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001836:	4313      	orrs	r3, r2
 8001838:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d059      	beq.n	80018fe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fa37 	bl	8000cbc <HAL_GetTick>
 800184e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fa32 	bl	8000cbc <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d902      	bls.n	800186a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	f000 bf43 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
 800186a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800187e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d102      	bne.n	800189c <HAL_RCC_OscConfig+0x218>
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	e015      	b.n	80018c8 <HAL_RCC_OscConfig+0x244>
 800189c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018cc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018d0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018d4:	fa92 f2a2 	rbit	r2, r2
 80018d8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018e0:	fab2 f282 	clz	r2, r2
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	f042 0220 	orr.w	r2, r2, #32
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f002 021f 	and.w	r2, r2, #31
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0ab      	beq.n	8001854 <HAL_RCC_OscConfig+0x1d0>
 80018fc:	e05d      	b.n	80019ba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f9dd 	bl	8000cbc <HAL_GetTick>
 8001902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f9d8 	bl	8000cbc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	; 0x64
 8001916:	d902      	bls.n	800191e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	f000 bee9 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
 800191e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001922:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001932:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	095b      	lsrs	r3, r3, #5
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x2cc>
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	e015      	b.n	800197c <HAL_RCC_OscConfig+0x2f8>
 8001950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001954:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001968:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800196c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001980:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001984:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001988:	fa92 f2a2 	rbit	r2, r2
 800198c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001990:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001994:	fab2 f282 	clz	r2, r2
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	f042 0220 	orr.w	r2, r2, #32
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f002 021f 	and.w	r2, r2, #31
 80019a4:	2101      	movs	r1, #1
 80019a6:	fa01 f202 	lsl.w	r2, r1, r2
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ab      	bne.n	8001908 <HAL_RCC_OscConfig+0x284>
 80019b0:	e003      	b.n	80019ba <HAL_RCC_OscConfig+0x336>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 817d 	beq.w	8001cca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019d0:	4ba6      	ldr	r3, [pc, #664]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019dc:	4ba3      	ldr	r3, [pc, #652]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d172      	bne.n	8001ace <HAL_RCC_OscConfig+0x44a>
 80019e8:	4ba0      	ldr	r3, [pc, #640]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d16c      	bne.n	8001ace <HAL_RCC_OscConfig+0x44a>
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0x3a0>
 8001a1e:	4b93      	ldr	r3, [pc, #588]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e013      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c8>
 8001a24:	2302      	movs	r3, #2
 8001a26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a48:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00a      	beq.n	8001a94 <HAL_RCC_OscConfig+0x410>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f000 be2e 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	21f8      	movs	r1, #248	; 0xf8
 8001aaa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ab2:	fa91 f1a1 	rbit	r1, r1
 8001ab6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001aba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001abe:	fab1 f181 	clz	r1, r1
 8001ac2:	b2c9      	uxtb	r1, r1
 8001ac4:	408b      	lsls	r3, r1
 8001ac6:	4969      	ldr	r1, [pc, #420]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001acc:	e0fd      	b.n	8001cca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8088 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x56c>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001af2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	461a      	mov	r2, r3
 8001b08:	2301      	movs	r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f8d6 	bl	8000cbc <HAL_GetTick>
 8001b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff f8d1 	bl	8000cbc <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d902      	bls.n	8001b2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f000 bde2 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4d8>
 8001b56:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	e013      	b.n	8001b84 <HAL_RCC_OscConfig+0x500>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2202      	movs	r2, #2
 8001b86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b8e:	fa92 f2a2 	rbit	r2, r2
 8001b92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b9a:	fab2 f282 	clz	r2, r2
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f042 0220 	orr.w	r2, r2, #32
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f002 021f 	and.w	r2, r2, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0af      	beq.n	8001b16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	21f8      	movs	r1, #248	; 0xf8
 8001bcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bd4:	fa91 f1a1 	rbit	r1, r1
 8001bd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bdc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001be0:	fab1 f181 	clz	r1, r1
 8001be4:	b2c9      	uxtb	r1, r1
 8001be6:	408b      	lsls	r3, r1
 8001be8:	4920      	ldr	r1, [pc, #128]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
 8001bee:	e06c      	b.n	8001cca <HAL_RCC_OscConfig+0x646>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	461a      	mov	r2, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f84e 	bl	8000cbc <HAL_GetTick>
 8001c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff f849 	bl	8000cbc <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d902      	bls.n	8001c3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	f000 bd5a 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d104      	bne.n	8001c70 <HAL_RCC_OscConfig+0x5ec>
 8001c66:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <HAL_RCC_OscConfig+0x5e8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	e015      	b.n	8001c98 <HAL_RCC_OscConfig+0x614>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c94:	4bc8      	ldr	r3, [pc, #800]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001caa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f002 021f 	and.w	r2, r2, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ad      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8110 	beq.w	8001f00 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d079      	beq.n	8001de4 <HAL_RCC_OscConfig+0x760>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4bab      	ldr	r3, [pc, #684]	; (8001fbc <HAL_RCC_OscConfig+0x938>)
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	461a      	mov	r2, r3
 8001d16:	2301      	movs	r3, #1
 8001d18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe ffcf 	bl	8000cbc <HAL_GetTick>
 8001d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7fe ffca 	bl	8000cbc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d902      	bls.n	8001d3a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f000 bcdb 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d54:	2202      	movs	r2, #2
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d78:	2202      	movs	r2, #2
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	fa93 f2a3 	rbit	r2, r3
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d94:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001da0:	2102      	movs	r1, #2
 8001da2:	6019      	str	r1, [r3, #0]
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f1a3 	rbit	r1, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dba:	6019      	str	r1, [r3, #0]
  return result;
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0a0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x6a0>
 8001de2:	e08d      	b.n	8001f00 <HAL_RCC_OscConfig+0x87c>
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e06:	601a      	str	r2, [r3, #0]
  return result;
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e10:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x938>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	461a      	mov	r2, r3
 8001e22:	2300      	movs	r3, #0
 8001e24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7fe ff49 	bl	8000cbc <HAL_GetTick>
 8001e2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7fe ff44 	bl	8000cbc <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d902      	bls.n	8001e46 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f000 bc55 	b.w	80026f0 <HAL_RCC_OscConfig+0x106c>
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e96:	2202      	movs	r2, #2
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	fa93 f2a3 	rbit	r2, r3
 8001ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001eb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	6019      	str	r1, [r3, #0]
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f1a3 	rbit	r1, r3
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ed8:	6019      	str	r1, [r3, #0]
  return result;
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d197      	bne.n	8001e30 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 81a1 	beq.w	8002258 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d116      	bne.n	8001f56 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	61d3      	str	r3, [r2, #28]
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_RCC_OscConfig+0x93c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d11a      	bne.n	8001f98 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0x93c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_RCC_OscConfig+0x93c>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fea5 	bl	8000cbc <HAL_GetTick>
 8001f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	e009      	b.n	8001f8c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f78:	f7fe fea0 	bl	8000cbc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e3b1      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_OscConfig+0x93c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ef      	beq.n	8001f78 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x940>
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a02      	ldr	r2, [pc, #8]	; (8001fb8 <HAL_RCC_OscConfig+0x934>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e03c      	b.n	8002030 <HAL_RCC_OscConfig+0x9ac>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	10908120 	.word	0x10908120
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x96a>
 8001fd4:	4bc1      	ldr	r3, [pc, #772]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4ac0      	ldr	r2, [pc, #768]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	4bbe      	ldr	r3, [pc, #760]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4abd      	ldr	r2, [pc, #756]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e020      	b.n	8002030 <HAL_RCC_OscConfig+0x9ac>
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x994>
 8001ffe:	4bb7      	ldr	r3, [pc, #732]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4ab6      	ldr	r2, [pc, #728]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4bb4      	ldr	r3, [pc, #720]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4ab3      	ldr	r2, [pc, #716]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0x9ac>
 8002018:	4bb0      	ldr	r3, [pc, #704]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4aaf      	ldr	r2, [pc, #700]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	4bad      	ldr	r3, [pc, #692]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4aac      	ldr	r2, [pc, #688]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 800202a:	f023 0304 	bic.w	r3, r3, #4
 800202e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 8081 	beq.w	8002144 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7fe fe3b 	bl	8000cbc <HAL_GetTick>
 8002046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7fe fe36 	bl	8000cbc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e345      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800206c:	2202      	movs	r2, #2
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002090:	2202      	movs	r2, #2
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020aa:	601a      	str	r2, [r3, #0]
  return result;
 80020ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d102      	bne.n	80020d0 <HAL_RCC_OscConfig+0xa4c>
 80020ca:	4b84      	ldr	r3, [pc, #528]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	e013      	b.n	80020f8 <HAL_RCC_OscConfig+0xa74>
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020d8:	2202      	movs	r2, #2
 80020da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	4b79      	ldr	r3, [pc, #484]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002100:	2102      	movs	r1, #2
 8002102:	6011      	str	r1, [r2, #0]
 8002104:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002108:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	fa92 f1a2 	rbit	r1, r2
 8002112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002116:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800211a:	6011      	str	r1, [r2, #0]
  return result;
 800211c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002120:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d084      	beq.n	800204c <HAL_RCC_OscConfig+0x9c8>
 8002142:	e07f      	b.n	8002244 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7fe fdba 	bl	8000cbc <HAL_GetTick>
 8002148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fdb5 	bl	8000cbc <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e2c4      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800216e:	2202      	movs	r2, #2
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021ac:	601a      	str	r2, [r3, #0]
  return result;
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_OscConfig+0xb4e>
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	e013      	b.n	80021fa <HAL_RCC_OscConfig+0xb76>
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021da:	2202      	movs	r2, #2
 80021dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f2a3 	rbit	r2, r3
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	4b39      	ldr	r3, [pc, #228]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002202:	2102      	movs	r1, #2
 8002204:	6011      	str	r1, [r2, #0]
 8002206:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800220a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	fa92 f1a2 	rbit	r1, r2
 8002214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002218:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800221c:	6011      	str	r1, [r2, #0]
  return result;
 800221e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002222:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	f002 021f 	and.w	r2, r2, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d184      	bne.n	800214e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002244:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 8002252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8242 	beq.w	80026ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_RCC_OscConfig+0xc58>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b08      	cmp	r3, #8
 8002274:	f000 8213 	beq.w	800269e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b02      	cmp	r3, #2
 8002286:	f040 8162 	bne.w	800254e <HAL_RCC_OscConfig+0xeca>
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fa93 f2a3 	rbit	r2, r3
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022ae:	601a      	str	r2, [r3, #0]
  return result;
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	461a      	mov	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fcf4 	bl	8000cbc <HAL_GetTick>
 80022d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e00c      	b.n	80022f4 <HAL_RCC_OscConfig+0xc70>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fcec 	bl	8000cbc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1fd      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002318:	601a      	str	r2, [r3, #0]
  return result;
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002322:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <HAL_RCC_OscConfig+0xcba>
 8002338:	4bb0      	ldr	r3, [pc, #704]	; (80025fc <HAL_RCC_OscConfig+0xf78>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e027      	b.n	800238e <HAL_RCC_OscConfig+0xd0a>
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800236c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	4b9c      	ldr	r3, [pc, #624]	; (80025fc <HAL_RCC_OscConfig+0xf78>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002392:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002396:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800239a:	6011      	str	r1, [r2, #0]
 800239c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	fa92 f1a2 	rbit	r1, r2
 80023aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023b2:	6011      	str	r1, [r2, #0]
  return result;
 80023b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	fab2 f282 	clz	r2, r2
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f042 0220 	orr.w	r2, r2, #32
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f002 021f 	and.w	r2, r2, #31
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d182      	bne.n	80022e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0xf78>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	430b      	orrs	r3, r1
 80023fc:	497f      	ldr	r1, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0xf78>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800240a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002426:	601a      	str	r2, [r3, #0]
  return result;
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002430:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800243c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	461a      	mov	r2, r3
 8002444:	2301      	movs	r3, #1
 8002446:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fc38 	bl	8000cbc <HAL_GetTick>
 800244c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	e009      	b.n	8002466 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fc33 	bl	8000cbc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e144      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800246e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fa93 f2a3 	rbit	r2, r3
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800248a:	601a      	str	r2, [r3, #0]
  return result;
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002494:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0xe2c>
 80024aa:	4b54      	ldr	r3, [pc, #336]	; (80025fc <HAL_RCC_OscConfig+0xf78>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	e027      	b.n	8002500 <HAL_RCC_OscConfig+0xe7c>
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_OscConfig+0xf78>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002504:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002508:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800250c:	6011      	str	r1, [r2, #0]
 800250e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002512:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	fa92 f1a2 	rbit	r1, r2
 800251c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002520:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002524:	6011      	str	r1, [r2, #0]
  return result;
 8002526:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f002 021f 	and.w	r2, r2, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d082      	beq.n	8002452 <HAL_RCC_OscConfig+0xdce>
 800254c:	e0cf      	b.n	80026ee <HAL_RCC_OscConfig+0x106a>
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002556:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800255a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800257c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002588:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	461a      	mov	r2, r3
 8002590:	2300      	movs	r3, #0
 8002592:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fb92 	bl	8000cbc <HAL_GetTick>
 8002598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe fb8d 	bl	8000cbc <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e09e      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025d6:	601a      	str	r2, [r3, #0]
  return result;
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d104      	bne.n	8002600 <HAL_RCC_OscConfig+0xf7c>
 80025f6:	4b01      	ldr	r3, [pc, #4]	; (80025fc <HAL_RCC_OscConfig+0xf78>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e029      	b.n	8002650 <HAL_RCC_OscConfig+0xfcc>
 80025fc:	40021000 	.word	0x40021000
 8002600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002604:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800262e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x1078>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002654:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002658:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800265c:	6011      	str	r1, [r2, #0]
 800265e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002662:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	fa92 f1a2 	rbit	r1, r2
 800266c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002670:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002674:	6011      	str	r1, [r2, #0]
  return result;
 8002676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800267a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f042 0220 	orr.w	r2, r2, #32
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f002 021f 	and.w	r2, r2, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d180      	bne.n	800259e <HAL_RCC_OscConfig+0xf1a>
 800269c:	e027      	b.n	80026ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01e      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_OscConfig+0x1078>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10b      	bne.n	80026ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b09e      	sub	sp, #120	; 0x78
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e162      	b.n	80029de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b90      	ldr	r3, [pc, #576]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d910      	bls.n	8002748 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b8d      	ldr	r3, [pc, #564]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	498b      	ldr	r1, [pc, #556]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b89      	ldr	r3, [pc, #548]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e14a      	b.n	80029de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b82      	ldr	r3, [pc, #520]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	497f      	ldr	r1, [pc, #508]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80dc 	beq.w	800292c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d13c      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xf6>
 800277c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002780:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xa6>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e00f      	b.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
 80027a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	667b      	str	r3, [r7, #100]	; 0x64
 80027b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b8:	663b      	str	r3, [r7, #96]	; 0x60
 80027ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80027cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ce:	fa92 f2a2 	rbit	r2, r2
 80027d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027d6:	fab2 f282 	clz	r2, r2
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f042 0220 	orr.w	r2, r2, #32
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f002 021f 	and.w	r2, r2, #31
 80027e6:	2101      	movs	r1, #1
 80027e8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d17b      	bne.n	80028ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0f3      	b.n	80029de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d13c      	bne.n	8002878 <HAL_RCC_ClockConfig+0x178>
 80027fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002802:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800280c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_ClockConfig+0x128>
 8002822:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e00f      	b.n	8002848 <HAL_RCC_ClockConfig+0x148>
 8002828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	647b      	str	r3, [r7, #68]	; 0x44
 8002836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283a:	643b      	str	r3, [r7, #64]	; 0x40
 800283c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284c:	63ba      	str	r2, [r7, #56]	; 0x38
 800284e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002850:	fa92 f2a2 	rbit	r2, r2
 8002854:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002858:	fab2 f282 	clz	r2, r2
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f042 0220 	orr.w	r2, r2, #32
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f002 021f 	and.w	r2, r2, #31
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f202 	lsl.w	r2, r1, r2
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d13a      	bne.n	80028ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b2      	b.n	80029de <HAL_RCC_ClockConfig+0x2de>
 8002878:	2302      	movs	r3, #2
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1a0>
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e00d      	b.n	80028bc <HAL_RCC_ClockConfig+0x1bc>
 80028a0:	2302      	movs	r3, #2
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2202      	movs	r2, #2
 80028be:	61ba      	str	r2, [r7, #24]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	617a      	str	r2, [r7, #20]
  return result;
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e079      	b.n	80029de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	491a      	ldr	r1, [pc, #104]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028fc:	f7fe f9de 	bl	8000cbc <HAL_GetTick>
 8002900:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	e00a      	b.n	800291a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe f9da 	bl	8000cbc <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e061      	b.n	80029de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_RCC_ClockConfig+0x260>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 020c 	and.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	429a      	cmp	r2, r3
 800292a:	d1eb      	bne.n	8002904 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d214      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 0207 	bic.w	r2, r3, #7
 8002942:	4906      	ldr	r1, [pc, #24]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <HAL_RCC_ClockConfig+0x25c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e040      	b.n	80029de <HAL_RCC_ClockConfig+0x2de>
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	491a      	ldr	r1, [pc, #104]	; (80029e8 <HAL_RCC_ClockConfig+0x2e8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4912      	ldr	r1, [pc, #72]	; (80029e8 <HAL_RCC_ClockConfig+0x2e8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029a2:	f000 f829 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4601      	mov	r1, r0
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCC_ClockConfig+0x2e8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	22f0      	movs	r2, #240	; 0xf0
 80029b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	fa92 f2a2 	rbit	r2, r2
 80029ba:	60fa      	str	r2, [r7, #12]
  return result;
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	fab2 f282 	clz	r2, r2
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	40d3      	lsrs	r3, r2
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x2ec>)
 80029c8:	5cd3      	ldrb	r3, [r2, r3]
 80029ca:	fa21 f303 	lsr.w	r3, r1, r3
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_RCC_ClockConfig+0x2f0>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_RCC_ClockConfig+0x2f4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe f92c 	bl	8000c34 <HAL_InitTick>
  
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3778      	adds	r7, #120	; 0x78
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08003a0c 	.word	0x08003a0c
 80029f0:	20000004 	.word	0x20000004
 80029f4:	20000008 	.word	0x20000008

080029f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b08b      	sub	sp, #44	; 0x2c
 80029fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x30>
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x36>
 8002a26:	e03c      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a2a:	623b      	str	r3, [r7, #32]
      break;
 8002a2c:	e03c      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	fa92 f2a2 	rbit	r2, r2
 8002a40:	607a      	str	r2, [r7, #4]
  return result;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	fab2 f282 	clz	r2, r2
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	40d3      	lsrs	r3, r2
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	fa92 f2a2 	rbit	r2, r2
 8002a64:	60fa      	str	r2, [r7, #12]
  return result;
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	40d3      	lsrs	r3, r2
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a80:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	e004      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	623b      	str	r3, [r7, #32]
      break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa4:	623b      	str	r3, [r7, #32]
      break;
 8002aa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	372c      	adds	r7, #44	; 0x2c
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	007a1200 	.word	0x007a1200
 8002ac0:	08003a1c 	.word	0x08003a1c
 8002ac4:	08003a2c 	.word	0x08003a2c
 8002ac8:	003d0900 	.word	0x003d0900

08002acc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b092      	sub	sp, #72	; 0x48
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80d4 	beq.w	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af0:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10e      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	61d3      	str	r3, [r2, #28]
 8002b08:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b45      	ldr	r3, [pc, #276]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b26:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a41      	ldr	r2, [pc, #260]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7fe f8c3 	bl	8000cbc <HAL_GetTick>
 8002b36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe f8bf 	bl	8000cbc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	; 0x64
 8002b46:	d901      	bls.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e169      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b58:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8084 	beq.w	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d07c      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b78:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d04b      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe f86f 	bl	8000cbc <HAL_GetTick>
 8002bde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe f86b 	bl	8000cbc <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e113      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
 8002c04:	2302      	movs	r3, #2
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d108      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c26:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	e00d      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	10908100 	.word	0x10908100
 8002c38:	2302      	movs	r3, #2
 8002c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2202      	movs	r2, #2
 8002c4a:	613a      	str	r2, [r7, #16]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	60fa      	str	r2, [r7, #12]
  return result;
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	fab2 f282 	clz	r2, r2
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	f002 021f 	and.w	r2, r2, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0b7      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c72:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	496a      	ldr	r1, [pc, #424]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a65      	ldr	r2, [pc, #404]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca4:	4b60      	ldr	r3, [pc, #384]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f023 0203 	bic.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	495d      	ldr	r1, [pc, #372]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc2:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4956      	ldr	r1, [pc, #344]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ce0:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	494e      	ldr	r1, [pc, #312]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f023 0210 	bic.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4947      	ldr	r1, [pc, #284]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d1c:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	493f      	ldr	r1, [pc, #252]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f023 0220 	bic.w	r2, r3, #32
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4938      	ldr	r1, [pc, #224]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	4930      	ldr	r1, [pc, #192]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d76:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	4929      	ldr	r1, [pc, #164]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	4921      	ldr	r1, [pc, #132]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	491a      	ldr	r1, [pc, #104]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	490b      	ldr	r1, [pc, #44]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3748      	adds	r7, #72	; 0x48
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e09d      	b.n	8002f7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e4e:	d009      	beq.n	8002e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
 8002e56:	e005      	b.n	8002e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd fc74 	bl	800076c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ea4:	d902      	bls.n	8002eac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e002      	b.n	8002eb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002eba:	d007      	beq.n	8002ecc <HAL_SPI_Init+0xa0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	ea42 0103 	orr.w	r1, r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	f003 0204 	and.w	r2, r3, #4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e049      	b.n	8003028 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd fd5f 	bl	8000a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f000 fadf 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04a      	b.n	80030de <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_TIM_Base_Start_IT+0xbc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d013      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_TIM_Base_Start_IT+0xc0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d115      	bne.n	80030c8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <HAL_TIM_Base_Start_IT+0xd0>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d015      	beq.n	80030da <HAL_TIM_Base_Start_IT+0xaa>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d011      	beq.n	80030da <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c6:	e008      	b.n	80030da <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e000      	b.n	80030dc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40013400 	.word	0x40013400
 80030fc:	40014000 	.word	0x40014000
 8003100:	00010007 	.word	0x00010007

08003104 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	f241 1311 	movw	r3, #4369	; 0x1111
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10f      	bne.n	800314c <HAL_TIM_Base_Stop_IT+0x48>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a1a      	ldr	r2, [r3, #32]
 8003132:	f240 4344 	movw	r3, #1092	; 0x444
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d107      	bne.n	800314c <HAL_TIM_Base_Stop_IT+0x48>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d122      	bne.n	80031be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d11b      	bne.n	80031be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0202 	mvn.w	r2, #2
 800318e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f9ce 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 80031aa:	e005      	b.n	80031b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9c0 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f9d1 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d122      	bne.n	8003212 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d11b      	bne.n	8003212 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0204 	mvn.w	r2, #4
 80031e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f9a4 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 80031fe:	e005      	b.n	800320c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f996 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9a7 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b08      	cmp	r3, #8
 800321e:	d122      	bne.n	8003266 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11b      	bne.n	8003266 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0208 	mvn.w	r2, #8
 8003236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2204      	movs	r2, #4
 800323c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f97a 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 8003252:	e005      	b.n	8003260 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f96c 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f97d 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b10      	cmp	r3, #16
 8003272:	d122      	bne.n	80032ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b10      	cmp	r3, #16
 8003280:	d11b      	bne.n	80032ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f06f 0210 	mvn.w	r2, #16
 800328a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2208      	movs	r2, #8
 8003290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f950 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 80032a6:	e005      	b.n	80032b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f942 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f953 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10e      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d107      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f06f 0201 	mvn.w	r2, #1
 80032de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fd f979 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d10e      	bne.n	8003312 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d107      	bne.n	8003312 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800330a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 faed 	bl	80038ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003320:	d10e      	bne.n	8003340 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d107      	bne.n	8003340 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fae0 	bl	8003900 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d10e      	bne.n	800336c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d107      	bne.n	800336c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f901 	bl	800356e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b20      	cmp	r3, #32
 8003378:	d10e      	bne.n	8003398 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b20      	cmp	r3, #32
 8003386:	d107      	bne.n	8003398 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0220 	mvn.w	r2, #32
 8003390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 faa0 	bl	80038d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_ConfigClockSource+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0b6      	b.n	800352a <HAL_TIM_ConfigClockSource+0x18a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d03e      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0xd8>
 80033fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fe:	f200 8087 	bhi.w	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003406:	f000 8086 	beq.w	8003516 <HAL_TIM_ConfigClockSource+0x176>
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	d87f      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003410:	2b70      	cmp	r3, #112	; 0x70
 8003412:	d01a      	beq.n	800344a <HAL_TIM_ConfigClockSource+0xaa>
 8003414:	2b70      	cmp	r3, #112	; 0x70
 8003416:	d87b      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003418:	2b60      	cmp	r3, #96	; 0x60
 800341a:	d050      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x11e>
 800341c:	2b60      	cmp	r3, #96	; 0x60
 800341e:	d877      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003420:	2b50      	cmp	r3, #80	; 0x50
 8003422:	d03c      	beq.n	800349e <HAL_TIM_ConfigClockSource+0xfe>
 8003424:	2b50      	cmp	r3, #80	; 0x50
 8003426:	d873      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d058      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x13e>
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d86f      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003430:	2b30      	cmp	r3, #48	; 0x30
 8003432:	d064      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x15e>
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d86b      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d060      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x15e>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d867      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05c      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x15e>
 8003444:	2b10      	cmp	r3, #16
 8003446:	d05a      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x15e>
 8003448:	e062      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f000 f99d 	bl	8003798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800346c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	609a      	str	r2, [r3, #8]
      break;
 8003476:	e04f      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f000 f986 	bl	8003798 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349a:	609a      	str	r2, [r3, #8]
      break;
 800349c:	e03c      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 f8fa 	bl	80036a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2150      	movs	r1, #80	; 0x50
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f953 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80034bc:	e02c      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 f919 	bl	8003702 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2160      	movs	r1, #96	; 0x60
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f943 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80034dc:	e01c      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 f8da 	bl	80036a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f933 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80034fc:	e00c      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f000 f92a 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 800350e:	e003      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      break;
 8003514:	e000      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3c      	ldr	r2, [pc, #240]	; (8003688 <TIM_Base_SetConfig+0x104>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a39      	ldr	r2, [pc, #228]	; (800368c <TIM_Base_SetConfig+0x108>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a38      	ldr	r2, [pc, #224]	; (8003690 <TIM_Base_SetConfig+0x10c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a37      	ldr	r2, [pc, #220]	; (8003694 <TIM_Base_SetConfig+0x110>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2d      	ldr	r2, [pc, #180]	; (8003688 <TIM_Base_SetConfig+0x104>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01b      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d017      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2a      	ldr	r2, [pc, #168]	; (800368c <TIM_Base_SetConfig+0x108>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <TIM_Base_SetConfig+0x10c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00f      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a28      	ldr	r2, [pc, #160]	; (8003694 <TIM_Base_SetConfig+0x110>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <TIM_Base_SetConfig+0x114>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a26      	ldr	r2, [pc, #152]	; (800369c <TIM_Base_SetConfig+0x118>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a25      	ldr	r2, [pc, #148]	; (80036a0 <TIM_Base_SetConfig+0x11c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <TIM_Base_SetConfig+0x104>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00f      	beq.n	800366c <TIM_Base_SetConfig+0xe8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a11      	ldr	r2, [pc, #68]	; (8003694 <TIM_Base_SetConfig+0x110>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00b      	beq.n	800366c <TIM_Base_SetConfig+0xe8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <TIM_Base_SetConfig+0x114>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_Base_SetConfig+0xe8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0f      	ldr	r2, [pc, #60]	; (800369c <TIM_Base_SetConfig+0x118>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0xe8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <TIM_Base_SetConfig+0x11c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40013400 	.word	0x40013400
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800

080036a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0201 	bic.w	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 030a 	bic.w	r3, r3, #10
 80036e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003702:	b480      	push	{r7}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0210 	bic.w	r2, r3, #16
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800372c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	031b      	lsls	r3, r3, #12
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800373e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	f043 0307 	orr.w	r3, r3, #7
 8003784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	021a      	lsls	r2, r3, #8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e063      	b.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2b      	ldr	r2, [pc, #172]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800382a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d018      	beq.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d013      	beq.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00e      	beq.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d10c      	bne.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003892:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	4313      	orrs	r3, r2
 800389c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40013400 	.word	0x40013400
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40014000 	.word	0x40014000

080038d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800391c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003920:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	b29b      	uxth	r3, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	4013      	ands	r3, r2
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800394a:	b084      	sub	sp, #16
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	f107 0014 	add.w	r0, r7, #20
 8003958:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	b004      	add	sp, #16
 800398a:	4770      	bx	lr

0800398c <__libc_init_array>:
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	4d0d      	ldr	r5, [pc, #52]	; (80039c4 <__libc_init_array+0x38>)
 8003990:	4c0d      	ldr	r4, [pc, #52]	; (80039c8 <__libc_init_array+0x3c>)
 8003992:	1b64      	subs	r4, r4, r5
 8003994:	10a4      	asrs	r4, r4, #2
 8003996:	2600      	movs	r6, #0
 8003998:	42a6      	cmp	r6, r4
 800399a:	d109      	bne.n	80039b0 <__libc_init_array+0x24>
 800399c:	4d0b      	ldr	r5, [pc, #44]	; (80039cc <__libc_init_array+0x40>)
 800399e:	4c0c      	ldr	r4, [pc, #48]	; (80039d0 <__libc_init_array+0x44>)
 80039a0:	f000 f820 	bl	80039e4 <_init>
 80039a4:	1b64      	subs	r4, r4, r5
 80039a6:	10a4      	asrs	r4, r4, #2
 80039a8:	2600      	movs	r6, #0
 80039aa:	42a6      	cmp	r6, r4
 80039ac:	d105      	bne.n	80039ba <__libc_init_array+0x2e>
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b4:	4798      	blx	r3
 80039b6:	3601      	adds	r6, #1
 80039b8:	e7ee      	b.n	8003998 <__libc_init_array+0xc>
 80039ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80039be:	4798      	blx	r3
 80039c0:	3601      	adds	r6, #1
 80039c2:	e7f2      	b.n	80039aa <__libc_init_array+0x1e>
 80039c4:	08003a3c 	.word	0x08003a3c
 80039c8:	08003a3c 	.word	0x08003a3c
 80039cc:	08003a3c 	.word	0x08003a3c
 80039d0:	08003a40 	.word	0x08003a40

080039d4 <memset>:
 80039d4:	4402      	add	r2, r0
 80039d6:	4603      	mov	r3, r0
 80039d8:	4293      	cmp	r3, r2
 80039da:	d100      	bne.n	80039de <memset+0xa>
 80039dc:	4770      	bx	lr
 80039de:	f803 1b01 	strb.w	r1, [r3], #1
 80039e2:	e7f9      	b.n	80039d8 <memset+0x4>

080039e4 <_init>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	bf00      	nop
 80039e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ea:	bc08      	pop	{r3}
 80039ec:	469e      	mov	lr, r3
 80039ee:	4770      	bx	lr

080039f0 <_fini>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr
